<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ComponentModel.Composition</name>
  </assembly>
  <members>
    <member name="E:System.ComponentModel.Composition.Hosting.AggregateCatalog.Changed">
      <summary>
              发生时的内容 <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> 对象已更改。
            </summary>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.AggregateCatalog.Changing">
      <summary>
              发生时的内容 <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> 正在更改对象。
            </summary>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.Changed">
      <summary>
              当基础目录已更改，如果该目录支持通知时发生。
            </summary>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.Changing">
      <summary>
              如果该目录支持通知，则会在基础目录更改时，发生。
            </summary>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Changed">
      <summary>
              出现目录的内容发生更改时。
            </summary>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Changing">
      <summary>
              将目录更改时发生。
            </summary>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged">
      <summary>
              发生时中的导出 <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> 更改。
            </summary>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging">
      <summary>
              提供的导出正在更改时发生。
            </summary>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.FilteredCatalog.Changed">
      <summary>
              当基础目录已更改时发生。
            </summary>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.FilteredCatalog.Changing">
      <summary>
              当基础目录更改时发生。
            </summary>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged.Changed">
      <summary>
              发生时 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> 已更改。
            </summary>
    </member>
    <member name="E:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged.Changing">
      <summary>
              发生时 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> 正在更改。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Composition.Hosting.CompositionConstants.ExportTypeIdentityMetadataName">
      <summary>
              指定创建的复合系统，以标记使用唯一的标识符部件的元数据键。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Composition.Hosting.CompositionConstants.GenericContractMetadataName">
      <summary>
              指定创建的复合系统将泛型协定标记的元数据键。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Composition.Hosting.CompositionConstants.GenericParametersMetadataName">
      <summary>
              指定创建的复合系统来标记泛型参数的元数据键。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Composition.Hosting.CompositionConstants.ImportSourceMetadataName">
      <summary>
              指定创建的复合系统来标记导入源的元数据键。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Composition.Hosting.CompositionConstants.IsGenericPartMetadataName">
      <summary>
              指定创建复合系统来标记的元数据密钥 <see langword="IsGenericPart" /> 方法。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Composition.Hosting.CompositionConstants.PartCreationPolicyMetadataName">
      <summary>
              指定创建的复合系统来标记创建策略的部件的元数据键。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.AddExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionBatch,``0)">
      <summary>
              从指定的值创建一个部件并将其添加到指定的批。
            </summary>
      <param name="batch">
                要添加的批。
              </param>
      <param name="exportedValue">
                要相加的值。
              </param>
      <typeparam name="T">
                新部件的类型。
              </typeparam>
      <returns>
              新部件。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.AddExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionBatch,System.String,``0)">
      <summary>
              从指定的值创建一个部件并将其添加到具有指定的协定名称指定的批处理。
            </summary>
      <param name="batch">
                要添加的批。
              </param>
      <param name="contractName">
                导出的协定名称。
              </param>
      <param name="exportedValue">
                要相加的值。
              </param>
      <typeparam name="T">
                新部件的类型。
              </typeparam>
      <returns>
              新部件。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.AddPart(System.ComponentModel.Composition.Hosting.CompositionBatch,System.Object)">
      <summary>
              从指定的特性化对象，创建一个可组合部分并将其添加到指定的组合批。
            </summary>
      <param name="batch">
                要添加的批。
              </param>
      <param name="attributedPart">
                要添加的对象。
              </param>
      <returns>
              新部件。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.ComposeExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionContainer,``0)">
      <summary>
              从指定的值创建一个部件，并在指定的组合容器中对它进行组合。
            </summary>
      <param name="container">
                要在其中执行组合的组合容器。
              </param>
      <param name="exportedValue">
                要组合的值。
              </param>
      <typeparam name="T">
                新部件的类型。
              </typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.ComposeExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionContainer,System.String,``0)">
      <summary>
              创建部件从下指定的协定名称的指定对象，并在指定的组合容器中对它进行组合。
            </summary>
      <param name="container">
                要在其中执行组合的组合容器。
              </param>
      <param name="contractName">
                要在下的一部分将导出的协定名称。
              </param>
      <param name="exportedValue">
                要组合的值。
              </param>
      <typeparam name="T">
                新部件的类型。
              </typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.ComposeParts(System.ComponentModel.Composition.Hosting.CompositionContainer,System.Object[])">
      <summary>
              从特性化的对象的数组创建可组合的部件，并在指定的组合容器中对它们进行组合。
            </summary>
      <param name="container">
                要在其中执行组合的组合容器。
              </param>
      <param name="attributedParts">
                特性化的对象构成的数组。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.CreatePart(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Object)">
      <summary>
              从指定的特性化对象，并使用指定的部件定义创建一个可组合部分。
            </summary>
      <param name="partDefinition">
                新部件的定义。
              </param>
      <param name="attributedPart">
                特性化的对象。
              </param>
      <returns>
              创建的部件。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.CreatePart(System.Object)">
      <summary>
              从指定的特性化对象创建一个可组合部分。
            </summary>
      <param name="attributedPart">
                特性化的对象。
              </param>
      <returns>
              创建的部件。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.CreatePart(System.Object,System.Reflection.ReflectionContext)">
      <summary>
              从指定的特性化对象，并使用指定的反射上下文中创建一个可组合部分。
            </summary>
      <param name="attributedPart">
                特性化的对象。
              </param>
      <param name="reflectionContext">
                反射上下文的部分。
              </param>
      <returns>
              创建的部件。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reflectionContext" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.CreatePartDefinition(System.Type,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>
              创建具有指定的类型和源部件定义。
            </summary>
      <param name="type">
                定义的类型。
              </param>
      <param name="origin">
                定义的来源。
              </param>
      <returns>
              新的部件定义。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.CreatePartDefinition(System.Type,System.ComponentModel.Composition.Primitives.ICompositionElement,System.Boolean)">
      <summary>
              创建具有指定的类型和源部件定义。
            </summary>
      <param name="type">
                定义的类型。
              </param>
      <param name="origin">
                定义的来源。
              </param>
      <param name="ensureIsDiscoverable">
                一个值，该值指示应可检测到新的定义。
              </param>
      <returns>
              新的部件定义。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.Exports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Type)">
      <summary>
              返回一个值，该值指示指定的部件是否包含与指定的协定类型相匹配的导出。
            </summary>
      <param name="part">
                要搜索的部件。
              </param>
      <param name="contractType">
                协定类型。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="part" /> 包含匹配的导出定义 <paramref name="contractType" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.Exports``1(System.ComponentModel.Composition.Primitives.ComposablePartDefinition)">
      <summary>
              返回一个值，该值指示指定的部件是否包含与指定的协定类型相匹配的导出。
            </summary>
      <param name="part">
                要搜索的部件。
              </param>
      <typeparam name="T">
                协定类型。
              </typeparam>
      <returns>
              <see langword="true" /> 如果 <paramref name="part" /> 包含类型的导出定义 <paramref name="T" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.GetContractName(System.Type)">
      <summary>
              获取指定类型的规范协定名称。
            </summary>
      <param name="type">
                要使用的类型。
              </param>
      <returns>
              创建从指定类型的协定名称。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.GetMetadataView``1(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
              从松散元数据的字典中获取元数据视图对象。
            </summary>
      <param name="metadata">
                松散元数据的集合。
              </param>
      <typeparam name="TMetadataView">
                要获取的元数据视图对象的类型。
              </typeparam>
      <returns>
              包含指定的元数据的元数据视图。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.GetTypeIdentity(System.Reflection.MethodInfo)">
      <summary>
              获取指定的方法的唯一标识符。
            </summary>
      <param name="method">
                要检查的方法。
              </param>
      <returns>
              方法的唯一标识符。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.GetTypeIdentity(System.Type)">
      <summary>
              获取指定类型的唯一标识符。
            </summary>
      <param name="type">
                要检查的类型。
              </param>
      <returns>
              类型的唯一标识符。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Type)">
      <summary>
              返回一个值，该值指示指定的部件是否包含与指定的协定类型相匹配的导入。
            </summary>
      <param name="part">
                要搜索的部件。
              </param>
      <param name="contractType">
                协定类型。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="part" /> 包含匹配的导入定义 <paramref name="contractType" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Type,System.ComponentModel.Composition.Primitives.ImportCardinality)">
      <summary>
              返回一个值，该值指示指定的部件是否包含与指定的协定相匹配的导入类型，并导入的基数。
            </summary>
      <param name="part">
                要搜索的部件。
              </param>
      <param name="contractType">
                协定类型。
              </param>
      <param name="importCardinality">
                导入基数。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="part" /> 包含匹配的导入定义 <paramref name="contractType" /> 和 <paramref name="importCardinality" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.Imports``1(System.ComponentModel.Composition.Primitives.ComposablePartDefinition)">
      <summary>
              返回一个值，该值指示指定的部件是否包含与指定的协定类型相匹配的导入。
            </summary>
      <param name="part">
                要搜索的部件。
              </param>
      <typeparam name="T">
                协定类型。
              </typeparam>
      <returns>
              <see langword="true" /> 如果 <paramref name="part" /> 包含类型导入定义 <paramref name="T" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.Imports``1(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.ComponentModel.Composition.Primitives.ImportCardinality)">
      <summary>
              返回一个值，该值指示指定的部件是否包含与指定的协定相匹配的导入类型，并导入的基数。
            </summary>
      <param name="part">
                要搜索的部件。
              </param>
      <param name="importCardinality">
                导入基数。
              </param>
      <typeparam name="T">
                协定类型。
              </typeparam>
      <returns>
              <see langword="true" /> 如果 <paramref name="part" /> 包含类型导入定义 <paramref name="T" /> 具有指定的导入基数; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.SatisfyImportsOnce(System.ComponentModel.Composition.ICompositionService,System.Object)">
      <summary>
              通过使用指定的组合服务重新组合后禁用组合指定的部件。
            </summary>
      <param name="compositionService">
                要使用的复合服务。
              </param>
      <param name="attributedPart">
                要组合的部件。
              </param>
      <returns>
              已组合的部件。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.AttributedModelServices.SatisfyImportsOnce(System.ComponentModel.Composition.ICompositionService,System.Object,System.Reflection.ReflectionContext)">
      <summary>
              通过使用重新组合已禁用指定的组合服务，并使用指定的反射上下文中组合指定的部件。
            </summary>
      <param name="compositionService">
                要使用的复合服务。
              </param>
      <param name="attributedPart">
                要组合的部件。
              </param>
      <param name="reflectionContext">
                反射上下文的部分。
              </param>
      <returns>
              已组合的部件。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reflectionContext" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.CatalogReflectionContextAttribute.#ctor(System.Type)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> 类与指定 <see cref="T:System.Reflection.ReflectionContext" /> 类型。
            </summary>
      <param name="reflectionContextType">
                反射上下文的类型。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.CatalogReflectionContextAttribute.CreateReflectionContext">
      <summary>
              创建自定义的一个实例 <see cref="T:System.Reflection.ReflectionContext" /> 对象。
            </summary>
      <returns>
              自定义的反射上下文的实例。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.ChangeRejectedException.#ctor">
      <summary>
              使用由系统提供的用于描述错误的消息初始化 <see cref="T:System.ComponentModel.Composition.ChangeRejectedException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ChangeRejectedException.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.CompositionError})">
      <summary>
              初始化的新实例<see cref="T:System.ComponentModel.Composition.ChangeRejectedException" />类的列表的组合错误。
            </summary>
      <param name="errors">
                组合期间发生的错误的集合。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.ChangeRejectedException.#ctor(System.String)">
      <summary>
              使用指定的描述错误的消息初始化 <see cref="T:System.ComponentModel.Composition.ChangeRejectedException" /> 类的新实例。
            </summary>
      <param name="message">
                描述该异常的消息。
                 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.ChangeRejectedException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.ComponentModel.Composition.ChangeRejectedException" /> 类的新实例。
            </summary>
      <param name="message">
                描述该异常的消息。
                 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。
              </param>
      <param name="innerException">
                导致当前异常的异常。
                 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor">
      <summary>
              使用由系统提供的用于描述错误的消息初始化 <see cref="T:System.ComponentModel.Composition.CompositionContractMismatchException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              用序列化数据初始化 <see cref="T:System.ComponentModel.Composition.CompositionContractMismatchException" /> 类的新实例。
            </summary>
      <param name="info">
                承载序列化对象数据的对象。
              </param>
      <param name="context">
                关于来源和目标的上下文信息
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor(System.String)">
      <summary>
              使用指定的描述错误的消息初始化 <see cref="T:System.ComponentModel.Composition.CompositionContractMismatchException" /> 类的新实例。
            </summary>
      <param name="message">
                描述该异常的消息。
                 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionContractMismatchException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.ComponentModel.Composition.CompositionContractMismatchException" /> 类的新实例。
            </summary>
      <param name="message">
                描述该异常的消息。
                 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。
              </param>
      <param name="innerException">
                导致当前异常的异常。
                 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionError.#ctor(System.String)">
      <summary>
              使用指定的错误消息初始化 <see cref="T:System.ComponentModel.Composition.CompositionError" /> 类的新实例。
            </summary>
      <param name="message">
                一条消息，说明 <see cref="T:System.ComponentModel.Composition.CompositionError" /> 或 <see langword="null" /> 设置 <see cref="P:System.ComponentModel.Composition.CompositionError.Description" /> 属性设置为一个空字符串 ("")。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionError.#ctor(System.String,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>
              初始化的新实例 <see cref="T:System.ComponentModel.Composition.CompositionError" /> 带有指定的错误消息和组合错误导致的组合元素的类。
            </summary>
      <param name="message">
                一条消息，说明 <see cref="T:System.ComponentModel.Composition.CompositionError" /> 或 <see langword="null" /> 设置 <see cref="P:System.ComponentModel.Composition.CompositionError.Description" /> 属性设置为一个空字符串 ("")。
              </param>
      <param name="element">
                是的原因的组合元素 <see cref="T:System.ComponentModel.Composition.CompositionError" /> 或 <see langword="null" /> 设置 <see cref="P:System.ComponentModel.Composition.CompositionError.Element" /> 属性设置为 <see langword="null" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionError.#ctor(System.String,System.ComponentModel.Composition.Primitives.ICompositionElement,System.Exception)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.CompositionError" /> 类，具有指定的错误消息的组合元素和组合错误导致的异常。
            </summary>
      <param name="message">
                一条消息，说明 <see cref="T:System.ComponentModel.Composition.CompositionError" /> 或 <see langword="null" /> 设置 <see cref="P:System.ComponentModel.Composition.CompositionError.Description" /> 属性设置为一个空字符串 ("")。
              </param>
      <param name="element">
                是的原因的组合元素 <see cref="T:System.ComponentModel.Composition.CompositionError" /> 或 <see langword="null" /> 设置 <see cref="P:System.ComponentModel.Composition.CompositionError.Element" /> 属性设置为 <see langword="null" />。
              </param>
      <param name="exception">
                <see cref="P:System.ComponentModel.Composition.CompositionError.Exception" /> 的根本原因，它是 <see cref="T:System.ComponentModel.Composition.CompositionError" /> 或 <see langword="null" /> 设置 <see cref="P:System.ComponentModel.Composition.CompositionError.Exception" /> 属性设置为 <see langword="null" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionError.#ctor(System.String,System.Exception)">
      <summary>
              初始化的新实例 <see cref="T:System.ComponentModel.Composition.CompositionError" /> 类，具有指定的错误消息和组合错误导致的异常。
            </summary>
      <param name="message">
                一条消息，说明 <see cref="T:System.ComponentModel.Composition.CompositionError" /> 或 <see langword="null" /> 设置 <see cref="P:System.ComponentModel.Composition.CompositionError.Description" /> 属性设置为一个空字符串 ("")。
              </param>
      <param name="exception">
                <see cref="P:System.ComponentModel.Composition.CompositionError.Exception" /> 的根本原因，它是 <see cref="T:System.ComponentModel.Composition.CompositionError" /> 或 <see langword="null" /> 设置 <see cref="P:System.ComponentModel.Composition.CompositionError.Exception" /> 属性设置为 <see langword="null" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionError.ToString">
      <summary>
              返回的字符串表示形式组合错误。
            </summary>
      <returns>
              一个字符串，包含 <see cref="P:System.ComponentModel.Composition.CompositionError.Description" /> 属性。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionException.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Composition.CompositionException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionException.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.CompositionError})">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.CompositionException" /> 类与指定的集合的组合错误。
            </summary>
      <param name="errors">
                一套 <see cref="T:System.ComponentModel.Composition.CompositionError" /> 组合期间，错误表示问题的对象。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionException.#ctor(System.String)">
      <summary>
              使用指定的错误消息初始化 <see cref="T:System.ComponentModel.Composition.CompositionException" /> 类的新实例。
            </summary>
      <param name="message">
                一条消息，说明 <see cref="T:System.ComponentModel.Composition.CompositionException" /> 或 <see langword="null" /> 设置 <see cref="P:System.Exception.Message" /> 属性设置为其默认值。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.CompositionException.#ctor(System.String,System.Exception)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.CompositionException" /> 带有指定的错误消息和对导致此异常的异常类。
            </summary>
      <param name="message">
                一条消息，说明 <see cref="T:System.ComponentModel.Composition.CompositionException" /> 或 <see langword="null" /> 设置 <see cref="P:System.Exception.Message" /> 属性设置为其默认值。
              </param>
      <param name="innerException">
                原因的异常的根本 <see cref="T:System.ComponentModel.Composition.CompositionException" /> 或 <see langword="null" /> 设置 <see cref="P:System.Exception.InnerException" /> 属性设置为 <see langword="null" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.ExportAttribute.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.ExportAttribute" /> 类中，导出该类型或成员使用默认协定名称下此特性标记。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ExportAttribute.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.ExportAttribute" /> 类中，导出该类型或成员使用在指定的协定名称下，此特性标记。
            </summary>
      <param name="contractName">
                用于导出的类型或成员用此特性标记的协定名称或 <see langword="null" /> 或空字符串 ("") 以使用默认协定名称。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.ExportAttribute.#ctor(System.String,System.Type)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.ExportAttribute" /> 类中，导出指定的协定名称下指定的类型。
            </summary>
      <param name="contractName">
                用于导出的类型或成员用此特性标记的协定名称或 <see langword="null" /> 或空字符串 ("") 以使用默认协定名称。
              </param>
      <param name="contractType">
                要导出的类型。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.ExportAttribute.#ctor(System.Type)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.ExportAttribute" /> 类中，导出该类型或成员使用派生自指定的类型的协定名称下此特性标记。
            </summary>
      <param name="contractType">
                从中派生的用于导出的类型或成员用此特性标记的协定名称的类型或 <see langword="null" /> 以使用默认协定名称。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.ExportFactory`1.#ctor(System.Func{System.Tuple{`0,System.Action}})">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Composition.ExportFactory`1" /> 类的新实例。
            </summary>
      <param name="exportLifetimeContextCreator">
                一个返回导出的值的函数与 <see cref="T:System.Action" /> 中释放它。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.ExportFactory`1.CreateExport">
      <summary>
              创建工厂导出类型的实例。
            </summary>
      <returns>
              有效实例的工厂导出类型。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.ExportFactory`2.#ctor(System.Func{System.Tuple{`0,System.Action}},`1)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Composition.ExportFactory`2" /> 类的新实例。
            </summary>
      <param name="exportLifetimeContextCreator">
                一个返回导出的值的函数与 <see cref="T:System.Action" /> 中释放它。
              </param>
      <param name="metadata">
                要附加到所创建部件的元数据。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.ExportLifetimeContext`1.#ctor(`0,System.Action)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Composition.ExportLifetimeContext`1" /> 类的新实例。
            </summary>
      <param name="value">
                导出的值。
              </param>
      <param name="disposeAction">
                对方法来释放对象的引用。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.ExportLifetimeContext`1.Dispose">
      <summary>
              释放当前实例所使用的所有资源 <see cref="T:System.ComponentModel.Composition.ExportLifetimeContext`1" /> 类，包括其关联的导出。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ExportMetadataAttribute.#ctor(System.String,System.Object)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.ExportMetadataAttribute" /> 具有指定名称和元数据值。
            </summary>
      <param name="name">
                一个字符串，包含元数据值的名称或 <see langword="null" /> 设置 <see cref="P:System.ComponentModel.Composition.ExportMetadataAttribute.Name" /> 属性设置为一个空字符串 ("")。
              </param>
      <param name="value">
                一个包含元数据值的对象。
                 这可能是 <see langword="null" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePartCatalog})">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> 类使用指定的目录。
            </summary>
      <param name="catalogs">
                一套 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> 要添加到对象 <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> 或 <see langword="null" /> 来创建一个空 <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" />。
              </param>
      <exception cref="T:System.ArgumentException">
                  <paramref name="catalogs" /> 包含的元素将是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog[])">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> 类使用指定的目录。
            </summary>
      <param name="catalogs">
                数组 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> 要添加到对象 <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="catalogs" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="catalogs" /> 包含的元素将是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.Dispose(System.Boolean)">
      <summary>
              释放由 <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.GetEnumerator">
      <summary>
              返回循环访问目录的枚举。
            </summary>
      <returns>
              一个枚举器可用于循环访问该目录。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>
              获取表示指定的定义的约束相匹配的导出定义。
            </summary>
      <param name="definition">
                应满足的条件 <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> 要返回的对象。
              </param>
      <returns>
              一套 <see cref="T:System.Tuple`2" /> 包含 <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> 及其关联 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> 相匹配由指定的约束的对象的对象 <paramref name="definition" />。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> 对象已释放。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="definition" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.OnChanged(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)">
      <summary>
              引发 <see cref="E:System.ComponentModel.Composition.Hosting.AggregateCatalog.Changed" /> 事件。
            </summary>
      <param name="e">
                包含事件数据的 <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" /> 对象。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateCatalog.OnChanging(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)">
      <summary>
              引发 <see cref="E:System.ComponentModel.Composition.Hosting.AggregateCatalog.Changing" /> 事件。
            </summary>
      <param name="e">
                包含事件数据的 <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" /> 对象。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Hosting.ExportProvider})">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" /> 类的新实例。
            </summary>
      <param name="providers">
                导出提供程序的优先级的列表。
                 提供程序将按顺序以提供参考。
              </param>
      <exception cref="T:System.ArgumentException">
                  一个或多个元素 <paramref name="providers" /> 是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider[])">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" /> 类的新实例。
            </summary>
      <param name="providers">
                导出提供程序的优先级的列表。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.Dispose">
      <summary>
              释放 <see cref="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" /> 类的当前实例所使用的所有资源。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.Dispose(System.Boolean)">
      <summary>
              释放 <see cref="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" /> 类使用的非托管资源，并可以选择释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AggregateExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>
              获取与指定的导入的条件匹配的所有导出。
            </summary>
      <param name="definition">
                应满足的条件 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 要返回的对象。
              </param>
      <param name="atomicComposition">
                用于组合的事务性容器。
              </param>
      <returns>
              包含与指定的条件匹配的所有导出的集合。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ApplicationCatalog.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Composition.Hosting.ApplicationCatalog" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ApplicationCatalog.#ctor(System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Hosting.ApplicationCatalog" /> 部件使用指定的源的类。
            </summary>
      <param name="definitionOrigin">
                诊断用于标识部分的源的元素。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ApplicationCatalog.#ctor(System.Reflection.ReflectionContext)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Hosting.ApplicationCatalog" /> 通过使用指定的反射上下文的类。
            </summary>
      <param name="reflectionContext">
                反射上下文中。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ApplicationCatalog.#ctor(System.Reflection.ReflectionContext,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Hosting.ApplicationCatalog" /> 部件使用指定的反射上下文和源的类。
            </summary>
      <param name="reflectionContext">
                反射上下文中。
              </param>
      <param name="definitionOrigin">
                诊断用于标识部分的源的元素。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ApplicationCatalog.Dispose(System.Boolean)">
      <summary>
              释放由 <see cref="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" /> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ApplicationCatalog.GetEnumerator">
      <summary>
              返回一个循环访问集合的枚举器。
            </summary>
      <returns>
              用于循环访问集合的枚举数。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ApplicationCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>
              获取表示由指定的导入定义的约束相匹配的导出定义。
            </summary>
      <param name="definition">
                应满足的条件 <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> 要返回的对象。
              </param>
      <returns>
              包含的对象的集合 <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> 及其关联 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> 对象指定的约束相匹配。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  <see cref="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" /> 对象已释放。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="definition" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ApplicationCatalog.ToString">
      <summary>
              检索应用程序目录的字符串表示形式。
            </summary>
      <returns>
              目录的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor(System.Reflection.Assembly)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> 类，具有指定的程序集。
            </summary>
      <param name="assembly">
                包含的特性化的程序集 <see cref="T:System.Type" /> 要添加到对象 <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> 对象。
              </param>
      <exception cref="T:System.ArgumentException">
                  <paramref name="assembly" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="assembly" /> 已加载到只反射上下文中。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor(System.Reflection.Assembly,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> 类，具有指定的程序集。
            </summary>
      <param name="assembly">
                包含的特性化的程序集 <see cref="T:System.Type" /> 要添加到对象 <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> 对象。
              </param>
      <param name="definitionOrigin">
                诊断用于标识部分的源的元素。
              </param>
      <exception cref="T:System.ArgumentException">
                  <paramref name="assembly" /> 或 <paramref name="definitionOrigin" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="assembly" /> 已加载到只反射上下文中。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor(System.Reflection.Assembly,System.Reflection.ReflectionContext)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> 使用指定的程序集和反射上下文的类。
            </summary>
      <param name="assembly">
                包含的特性化的程序集 <see cref="T:System.Type" /> 要添加到对象 <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> 对象。
              </param>
      <param name="reflectionContext">
                将目录用于解释类型的上下文。
              </param>
      <exception cref="T:System.ArgumentException">
                  <paramref name="assembly" /> 或 <paramref name="reflectionContext" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="assembly" /> 已加载到只反射上下文中。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor(System.Reflection.Assembly,System.Reflection.ReflectionContext,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> 使用指定的程序集和反射上下文的类。
            </summary>
      <param name="assembly">
                包含的特性化的程序集 <see cref="T:System.Type" /> 要添加到对象 <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> 对象。
              </param>
      <param name="reflectionContext">
                将目录用于解释类型的上下文。
              </param>
      <param name="definitionOrigin">
                诊断用于标识部分的源的元素。
              </param>
      <exception cref="T:System.ArgumentException">
                  <paramref name="assembly" />, <paramref name="definitionOrigin" />, or <paramref name="reflectionContext" /> is <see langword="null" />.
                
                  - 或 -
                
                  <paramref name="assembly" /> 已加载到只反射上下文中。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> 具有指定的代码基的类。
            </summary>
      <param name="codeBase">
                一个字符串，指定包含的特性化的程序集 （即，程序集文件的路径） 的基本代码 <see cref="T:System.Type" /> 要添加到对象 <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> 对象。
              </param>
      <exception cref="T:System.BadImageFormatException">
                  <paramref name="codeBase" /> 不是有效的程序集。
                
                  - 或 -
                
                  当前加载版本 2.0 或更早版本的公共语言运行时和 <paramref name="codeBase" /> 编译时所用的更高版本。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                  调用方没有路径发现权限。
                </exception>
      <exception cref="T:System.IO.FileLoadException">
                  <paramref name="codeBase" /> 无法加载。
                
                  - 或 -
                
                  <paramref name="codeBase" /> 指定一个目录。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="codeBase" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
                  <paramref name="codeBase" /> 未找到。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="codeBase" /> 是一个零长度字符串、 仅包含空白，或通过定义包含一个或多个无效字符 <see cref="F:System.IO.Path.InvalidPathChars" />。
                </exception>
      <exception cref="T:System.IO.PathTooLongException">
                  指定的路径和/或文件名超过了系统定义的最大长度。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor(System.String,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> 具有指定的代码基的类。
            </summary>
      <param name="codeBase">
                一个字符串，指定包含的特性化的程序集 （即，程序集文件的路径） 的基本代码 <see cref="T:System.Type" /> 要添加到对象 <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> 对象。
              </param>
      <param name="definitionOrigin">
                诊断用于标识部分的源的元素。
              </param>
      <exception cref="T:System.BadImageFormatException">
                  <paramref name="codeBase" /> 不是有效的程序集。
                
                  - 或 -
                
                  当前加载版本 2.0 或更高版本的公共语言运行时和 <paramref name="codeBase" /> 编译时所用的更高版本。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                  调用方没有路径发现权限。
                </exception>
      <exception cref="T:System.IO.FileLoadException">
                  <paramref name="codeBase" /> 无法加载。
                
                  - 或 -
                
                  <paramref name="codeBase" /> 指定一个目录。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="codebase" /> 或 <paramref name="definitionOrigin" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
                  <paramref name="codeBase" /> 未找到。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="codeBase" /> 是一个零长度字符串、 仅包含空白，或通过定义包含一个或多个无效字符 <see cref="F:System.IO.Path.InvalidPathChars" />。
                </exception>
      <exception cref="T:System.IO.PathTooLongException">
                  指定的路径和/或文件名超过了系统定义的最大长度。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor(System.String,System.Reflection.ReflectionContext)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> 与指定的代码库和反射上下文的类。
            </summary>
      <param name="codeBase">
                一个字符串，指定包含的特性化的程序集 （即，程序集文件的路径） 的基本代码 <see cref="T:System.Type" /> 要添加到对象 <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> 对象。
              </param>
      <param name="reflectionContext">
                将目录用于解释类型的上下文。
              </param>
      <exception cref="T:System.BadImageFormatException">
                  <paramref name="codeBase" /> 不是有效的程序集。
                
                  - 或 -
                
                  当前加载版本 2.0 或更高版本的公共语言运行时和 <paramref name="codeBase" /> 编译时所用的更高版本。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                  调用方没有路径发现权限。
                </exception>
      <exception cref="T:System.IO.FileLoadException">
                  <paramref name="codeBase" /> 无法加载。
                
                  - 或 -
                
                  <paramref name="codeBase" /> 指定一个目录。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="codebase" /> 或 <paramref name="reflectionContext" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
                  <paramref name="codeBase" /> 未找到。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="codeBase" /> 是一个零长度字符串、 仅包含空白，或通过定义包含一个或多个无效字符 <see cref="F:System.IO.Path.InvalidPathChars" />。
                </exception>
      <exception cref="T:System.IO.PathTooLongException">
                  指定的路径和/或文件名超过了系统定义的最大长度。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.#ctor(System.String,System.Reflection.ReflectionContext,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>
              用指定的基本代码和反射上下文初始化 <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> 类的新实例。
            </summary>
      <param name="codeBase">
                一个字符串，该字符串指定程序集的基本代码（即程序集文件的路径），该程序集包含要添加到 <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> 对象的特性化 <see cref="T:System.Type" /> 对象。
              </param>
      <param name="reflectionContext">
                目录用于解释类型的上下文。
              </param>
      <param name="definitionOrigin">
                诊断用于标识部件的源的元素。
              </param>
      <exception cref="T:System.BadImageFormatException">
                  <paramref name="codeBase" /> 不是有效的程序集。
                
                  - 或 -
                
                  当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="codeBase" /> 是用更高的版本编译的。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                  调用方没有路径发现权限。
                </exception>
      <exception cref="T:System.IO.FileLoadException">
                  未能加载 <paramref name="codeBase" />。
                
                  - 或 -
                
                  <paramref name="codeBase" /> 指定了一个目录。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="codebase" />、<paramref name="definitionOrigin" /> 或 <paramref name="reflectionContext" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
                  <paramref name="codeBase" /> 未找到。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="codeBase" /> 是一个长度为零的字符串，仅包含空格，或包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars" /> 定义的无效字符。
                </exception>
      <exception cref="T:System.IO.PathTooLongException">
                  指定的路径和/或文件名超过了系统定义的最大长度。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.Dispose(System.Boolean)">
      <summary>
              释放由 <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.GetEnumerator">
      <summary>
              返回循环访问目录的枚举。
            </summary>
      <returns>
              一个枚举器可用于循环访问该目录。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>
              获取与指定的导入定义的条件匹配的导出集合。
            </summary>
      <param name="definition">
                指定相匹配的导出的条件。
              </param>
      <returns>
              与由指定的条件匹配的导出集合 <paramref name="definition" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AssemblyCatalog.ToString">
      <summary>
              获取程序集目录的字符串表示。
            </summary>
      <returns>
              程序集目录的表示形式。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.#ctor(System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" /> 与指定的父对象的类 <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" />。
            </summary>
      <param name="outerAtomicComposition">
                此组合操作的父级。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.AddCompleteAction(System.Action)">
      <summary>
              添加一个在整个组合操作成功完成时要执行的操作。
            </summary>
      <param name="completeAction">
                要执行的操作。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.AddRevertAction(System.Action)">
      <summary>
              添加一个在整个组合操作失败时要执行的操作。
            </summary>
      <param name="revertAction">
                要执行的操作。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.Complete">
      <summary>
              将标记为已完成此组合操作。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.Dispose">
      <summary>
              释放当前实例所使用的所有资源 <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" /> 类，并将此组合操作标记为失败。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.Dispose(System.Boolean)">
      <summary>
              释放由 <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" /> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.SetValue(System.Object,System.Object)">
      <summary>
              将键 / 值对保存在要跟踪暂定状态的事务。
            </summary>
      <param name="key">
                要保存的键。
              </param>
      <param name="value">
                要保存的值。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue``1(System.Object,``0@)">
      <summary>
              获取一个值，该值由保存 <see cref="M:System.ComponentModel.Composition.Hosting.AtomicComposition.SetValue(System.Object,System.Object)" /> 方法。
            </summary>
      <param name="key">
                要从检索的键。
              </param>
      <param name="value">
                检索到的值。
              </param>
      <typeparam name="T">
                要检索的值的类型。
              </typeparam>
      <returns>
              <see langword="true" /> 如果成功检索的值;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue``1(System.Object,System.Boolean,``0@)">
      <summary>
              获取一个值，该值由保存 <see cref="M:System.ComponentModel.Composition.Hosting.AtomicComposition.SetValue(System.Object,System.Object)" /> 方法，并且可以选择不搜索父事务。
            </summary>
      <param name="key">
                要从检索的键。
              </param>
      <param name="localAtomicCompositionOnly">
                <see langword="true" /> 要排除父事务;否则为 <see langword="false" />。
              </param>
      <param name="value">
                检索到的值。
              </param>
      <typeparam name="T">
                要检索的值的类型。
              </typeparam>
      <returns>
              <see langword="true" /> 如果成功检索的值;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog)">
      <summary>
              初始化的新实例 <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> 类与指定的目录。
            </summary>
      <param name="catalog">
                该目录， <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> 使用来生成 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="catalog" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> 带有指定的目录和可选的线程安全模式的类。
            </summary>
      <param name="catalog">
                该目录， <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> 使用来生成 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象。
              </param>
      <param name="isThreadSafe">
                <see langword="true" /> 如果此对象必须是线程安全的。否则为 <see langword="false" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="catalog" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.ComponentModel.Composition.Hosting.CompositionOptions)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> 类，具有指定的目录和组合选项。
            </summary>
      <param name="catalog">
                该目录， <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> 使用来生成 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象。
              </param>
      <param name="compositionOptions">
                确定此提供程序的行为的选项。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="catalog" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.Dispose">
      <summary>
              释放 <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> 类的当前实例所使用的所有资源。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.Dispose(System.Boolean)">
      <summary>
              释放由 <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CatalogExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>
              返回与指定的导入的条件匹配的所有导出。
            </summary>
      <param name="definition">
                应满足的条件 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 要返回的对象。
              </param>
      <param name="atomicComposition">
                若要使用的组合事务或 <see langword="null" /> 以禁用事务性组合。
              </param>
      <returns>
              包含与指定的条件匹配的所有导出的集合。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CatalogExtensions.CreateCompositionService(System.ComponentModel.Composition.Primitives.ComposablePartCatalog)">
      <summary>
              通过使用指定的目录作为源对导出创建一个新的复合服务。
            </summary>
      <param name="composablePartCatalog">
                目录，其中将提供的导出。
              </param>
      <returns>
              新的复合服务。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePartDefinition},System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePartDefinition},System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" /> 类，具有指定的更改。
            </summary>
      <param name="addedDefinitions">
                已添加到目录部件定义。
              </param>
      <param name="removedDefinitions">
                从目录中删除部件定义。
              </param>
      <param name="atomicComposition">
                若要使用的组合事务或 <see langword="null" /> 以禁用事务性组合。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.#ctor(System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> 类，根据需要在线程安全模式。
            </summary>
      <param name="isThreadSafe">
                <see langword="true" /> 如果 <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> 对象必须是线程安全的; 否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.#ctor(System.ComponentModel.Composition.Hosting.CompositionOptions)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> 类，具有指定的组合选项。
            </summary>
      <param name="compositionOptions">
                指定此提供程序的行为的选项。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.Compose(System.ComponentModel.Composition.Hosting.CompositionBatch)">
      <summary>
              执行对指定的批的组合。
            </summary>
      <param name="batch">
                要对其执行组合的批。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  该容器已在撰写的过程。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.Dispose">
      <summary>
              释放 <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> 类的当前实例所使用的所有资源。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.Dispose(System.Boolean)">
      <summary>
              释放由 <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>
              获取此提供程序中与指定的导入的条件匹配的所有导出的集合。
            </summary>
      <param name="definition">
                <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 定义的条件 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 来获取。
              </param>
      <param name="atomicComposition">
                若要使用的组合事务或 <see langword="null" /> 以禁用事务性组合。
              </param>
      <returns>
              此提供程序中与指定的条件匹配的所有导出的集合。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionBatch.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionBatch.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePart},System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePart})">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch" /> 与要添加和移除的指定部分的类。
            </summary>
      <param name="partsToAdd">
                一套 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 要添加对象。
              </param>
      <param name="partsToRemove">
                一套 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象以删除。
              </param>
      <exception cref="T:System.ArgumentException">
                  <paramref name="partsToAdd" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="partsToRemove" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionBatch.AddExport(System.ComponentModel.Composition.Primitives.Export)">
      <summary>
              添加到指定的导出 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch" /> 对象。
            </summary>
      <param name="export">
                要添加的导出 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch" /> 对象。
              </param>
      <returns>
              添加了部分。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="export" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionBatch.AddPart(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <summary>
              添加到指定的部件 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch" /> 对象。
            </summary>
      <param name="part">
                要添加的部件。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="part" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionBatch.RemovePart(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <summary>
              将指定的部件放在要移除的部件列表。
            </summary>
      <param name="part">
                要删除的部件。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="part" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Hosting.CompositionOptions,System.ComponentModel.Composition.Hosting.ExportProvider[])">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 使用指定的导出提供程序和选项。
            </summary>
      <param name="compositionOptions">
                一个对象，指定此容器的行为。
              </param>
      <param name="providers">
                一个数组 <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> 对象，它提供 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 访问 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象，或 <see langword="null" /> 设置 <see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /> 为空 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。
              </param>
      <exception cref="T:System.ArgumentException">
                  <paramref name="providers" /> 包含的元素将是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider[])">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 与指定的导出提供程序的类。
            </summary>
      <param name="providers">
                一个数组 <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> 对象，它提供 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 访问 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象，或 <see langword="null" /> 设置 <see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /> 为空 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。
              </param>
      <exception cref="T:System.ArgumentException">
                  <paramref name="providers" /> 包含的元素将是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Boolean,System.ComponentModel.Composition.Hosting.ExportProvider[])">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 类与指定的目录中，线程安全模式，并导出提供程序。
            </summary>
      <param name="catalog">
                一个目录，其中提供了 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象添加到 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />。
              </param>
      <param name="isThreadSafe">
                <see langword="true" /> 如果此 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象必须是线程安全的; 否则为 <see langword="false" />。
              </param>
      <param name="providers">
                一个数组 <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> 对象，它提供 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 访问 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象，或 <see langword="null" /> 设置 <see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /> 属性设置为一个空 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。
              </param>
      <exception cref="T:System.ArgumentException">
                  一个或多个元素 <paramref name="providers" /> 是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.ComponentModel.Composition.Hosting.CompositionOptions,System.ComponentModel.Composition.Hosting.ExportProvider[])">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 类与指定的目录选项，并导出提供程序。
            </summary>
      <param name="catalog">
                一个目录，其中提供了 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象添加到 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />。
              </param>
      <param name="compositionOptions">
                一个对象，指定影响容器的行为的选项。
              </param>
      <param name="providers">
                一个数组 <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> 对象，它提供 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 访问 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象，或 <see langword="null" /> 设置 <see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /> 为空 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。
              </param>
      <exception cref="T:System.ArgumentException">
                  <paramref name="providers" /> 包含的元素将是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.ComponentModel.Composition.Hosting.ExportProvider[])">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 类与指定的目录，并导出提供程序。
            </summary>
      <param name="catalog">
                一个目录，其中提供了 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象添加到 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />。
              </param>
      <param name="providers">
                一个数组 <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> 对象，它提供 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 访问 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象，或 <see langword="null" /> 设置 <see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /> 为空 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。
              </param>
      <exception cref="T:System.ArgumentException">
                  <paramref name="providers" /> 包含的元素将是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose(System.ComponentModel.Composition.Hosting.CompositionBatch)">
      <summary>
              在添加或移除各个部分指定 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch" /> 从容器并执行组合。
            </summary>
      <param name="batch">
                更改为 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 以包括在组合期间。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose">
      <summary>
              释放 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 类的当前实例所使用的所有资源。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose(System.Boolean)">
      <summary>
              释放由 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>
              返回与在指定的条件匹配的所有导出的集合 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 对象。
            </summary>
      <param name="definition">
                定义的条件的对象 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象，以获得。
              </param>
      <param name="atomicComposition">
                若要使用的组合事务或 <see langword="null" /> 以禁用事务性组合。
              </param>
      <returns>
              所有的集合 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 函数使用此 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 与由指定的条件匹配的对象 <paramref name="definition" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport(System.ComponentModel.Composition.Primitives.Export)">
      <summary>
              释放指定 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象从 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />。
            </summary>
      <param name="export">
                <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> ，需要释放。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="export" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport``1(System.Lazy{``0})">
      <summary>
              从组合中移除指定的导出，如有可能释放其资源。
            </summary>
      <param name="export">
                对要删除的导出的间接引用。
              </param>
      <typeparam name="T">
                导出的类型。
              </typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export})">
      <summary>
              释放一组 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象从 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />。
            </summary>
      <param name="exports">
                一套 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 要释放的对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="exports" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="exports" /> 包含的元素将是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports``1(System.Collections.Generic.IEnumerable{System.Lazy{``0}})">
      <summary>
              从组合中移除的导出的集合，如有可能释放其资源。
            </summary>
      <param name="exports">
                要删除的导出的间接引用的集合。
              </param>
      <typeparam name="T">
                导出的类型。
              </typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports``2(System.Collections.Generic.IEnumerable{System.Lazy{``0,``1}})">
      <summary>
              从组合中移除的导出的集合，如有可能释放其资源。
            </summary>
      <param name="exports">
                要删除的导出和其元数据的间接引用的集合。
              </param>
      <typeparam name="T">
                导出的类型。
              </typeparam>
      <typeparam name="TMetadataView">
                导出的元数据视图的类型。
              </typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionContainer.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <summary>
              满足指定的导入 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象而无需注册以进行重新组合。
            </summary>
      <param name="part">
                要满足的导入的部件。
              </param>
      <exception cref="T:System.ObjectDisposedException">
                  <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象已释放。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="part" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">
                  在组合期间出错。
                  <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> 将包含发生的错误的集合。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Hosting.CompositionScopeDefinition})">
      <summary>
              初始化的新实例 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition" /> 类，具有指定的基础目录及其子级。
            </summary>
      <param name="catalog">
                此目录基础目录。
              </param>
      <param name="children">
                此目录的子范围的集合。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Hosting.CompositionScopeDefinition},System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ExportDefinition})">
      <summary>
              初始化的新实例 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition" /> 与指定的基础目录、 子级和公共接口的类。
            </summary>
      <param name="catalog">
                此目录基础目录。
              </param>
      <param name="children">
                此目录的子范围的集合。
              </param>
      <param name="publicSurface">
                此目录公共接口。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.Dispose(System.Boolean)">
      <summary>
              由 <see langword="Dispose()" /> 和 <see langword="Finalize()" /> 方法调用，以释放 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition" /> 类的当前实例所占用的托管资源和非托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管的资源，则为 <see langword="true" />；若要仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.GetEnumerator">
      <summary>
              返回循环访问目录的枚举。
            </summary>
      <returns>
              一个枚举器可用于循环访问该目录。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>
              获取与指定的导入定义的条件匹配的导出集合。
            </summary>
      <param name="definition">
                指定相匹配的导出的条件。
              </param>
      <returns>
              与指定的条件匹配的导出集合。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.OnChanged(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)">
      <summary>
              引发 <see cref="E:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.Changed" /> 事件。
            </summary>
      <param name="e">
                包含数据 <see cref="E:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.Changed" /> 事件。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.OnChanging(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)">
      <summary>
              引发 <see cref="E:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.Changing" /> 事件。
            </summary>
      <param name="e">
                包含数据 <see cref="E:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.Changing" /> 事件。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionService.Dispose">
      <summary>
              释放 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 类的当前实例所使用的所有资源。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.CompositionService.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <summary>
              组合指定的部件，组合和验证被禁用。
            </summary>
      <param name="part">
                要组合的部件。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" /> 类通过使用 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> 对象根据指定的目录路径中的所有 DLL 文件。
            </summary>
      <param name="path">
                要扫描的程序集以添加到目录的目录路径。
              
                路径必须是绝对或相对于 <see cref="P:System.AppDomain.BaseDirectory" />。
              </param>
      <exception cref="T:System.IO.DirectoryNotFoundException">
                  指定 <paramref name="path" /> 无效 （例如，它位于未映射的驱动器上）。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="path" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.UnauthorizedAccessException">
                  调用方没有所要求的权限。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="path" /> 是一个零长度字符串，仅包含空白，或者包含一个或多个特定于实现的无效字符。
                </exception>
      <exception cref="T:System.IO.PathTooLongException">
                  指定的 <paramref name="path" />、文件名或这两者都超过了系统定义的最大长度。
                   例如，在基于 Windows 的计算机，路径必须少于 248 个字符，文件名必须少于 260 个字符。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" /> 类通过使用 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> 对象根据所有的 DLL 文件中指定的目录路径中与指定的源的部件。
            </summary>
      <param name="path">
                要扫描的程序集以添加到目录的目录路径。
              
                路径必须是绝对或相对于 <see cref="P:System.AppDomain.BaseDirectory" />。
              </param>
      <param name="definitionOrigin">
                诊断用于标识部分的源的元素。
              </param>
      <exception cref="T:System.IO.DirectoryNotFoundException">
                  指定 <paramref name="path" /> 无效 （例如，它位于未映射的驱动器上）。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="path" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.UnauthorizedAccessException">
                  调用方没有所要求的权限。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="path" /> 是一个零长度字符串，仅包含空白，或者包含一个或多个特定于实现的无效字符。
                </exception>
      <exception cref="T:System.IO.PathTooLongException">
                  指定的 <paramref name="path" />、文件名或这两者都超过了系统定义的最大长度。
                   例如，在基于 Windows 的计算机，路径必须少于 248 个字符，文件名必须少于 260 个字符。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String,System.Reflection.ReflectionContext)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" /> 类通过使用 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> 对象根据指定的目录路径，在指定的反射上下文中的所有 DLL 文件。
            </summary>
      <param name="path">
                要扫描的程序集以添加到目录的目录路径。
              
                路径必须是绝对或相对于 <see cref="P:System.AppDomain.BaseDirectory" />。
              </param>
      <param name="reflectionContext">
                用于创建部件的上下文。
              </param>
      <exception cref="T:System.IO.DirectoryNotFoundException">
                  指定 <paramref name="path" /> 无效 （例如，它位于未映射的驱动器上）。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="path" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.UnauthorizedAccessException">
                  调用方没有所要求的权限。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="path" /> 是一个零长度字符串，仅包含空白，或者包含一个或多个特定于实现的无效字符。
                </exception>
      <exception cref="T:System.IO.PathTooLongException">
                  指定的 <paramref name="path" />、文件名或这两者都超过了系统定义的最大长度。
                   例如，在基于 Windows 的计算机，路径必须少于 248 个字符，文件名必须少于 260 个字符。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String,System.Reflection.ReflectionContext,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" /> 类通过使用 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> 对象根据指定的目录路径，在指定的反射上下文中的所有 DLL 文件。
            </summary>
      <param name="path">
                要扫描的程序集以添加到目录的目录路径。
              
                路径必须是绝对或相对于 <see cref="P:System.AppDomain.BaseDirectory" />。
              </param>
      <param name="reflectionContext">
                用于创建部件的上下文。
              </param>
      <param name="definitionOrigin">
                诊断用于标识部分的源的元素。
              </param>
      <exception cref="T:System.IO.DirectoryNotFoundException">
                  指定 <paramref name="path" /> 无效 （例如，它位于未映射的驱动器上）。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="path" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.UnauthorizedAccessException">
                  调用方没有所要求的权限。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="path" /> 是一个零长度字符串，仅包含空白，或者包含一个或多个特定于实现的无效字符。
                </exception>
      <exception cref="T:System.IO.PathTooLongException">
                  指定的 <paramref name="path" />、文件名或这两者都超过了系统定义的最大长度。
                   例如，在基于 Windows 的计算机，路径必须少于 248 个字符，文件名必须少于 260 个字符。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" /> 类通过使用 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> 与指定的目录路径中指定的搜索模式匹配的对象。
            </summary>
      <param name="path">
                要扫描的程序集以添加到目录的目录路径。
              
                路径必须是绝对或相对于 <see cref="P:System.AppDomain.BaseDirectory" />。
              </param>
      <param name="searchPattern">
                搜索字符串。
                 字符串的格式应为与指定的相同 <see cref="M:System.IO.Directory.GetFiles(System.String,System.String)" /> 方法。
              </param>
      <exception cref="T:System.IO.DirectoryNotFoundException">
                  指定 <paramref name="path" /> 无效 （例如，它位于未映射的驱动器上）。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="path" /> 或 <paramref name="searchPattern" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.UnauthorizedAccessException">
                  调用方没有所要求的权限。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="path" /> 是一个零长度字符串，仅包含空白，或者包含一个或多个特定于实现的无效字符。
                
                  - 或 -
                
                  <paramref name="searchPattern" /> 不包含有效模式。
                </exception>
      <exception cref="T:System.IO.PathTooLongException">
                  指定的 <paramref name="path" />、文件名或这两者都超过了系统定义的最大长度。
                   例如，在基于 Windows 的计算机，路径必须少于 248 个字符，文件名必须少于 260 个字符。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String,System.String,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" /> 类通过使用 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> 对象基于与指定的源的部件的指定的目录路径中指定的搜索模式。
            </summary>
      <param name="path">
                要扫描的程序集以添加到目录的目录路径。
              
                路径必须是绝对或相对于 <see cref="P:System.AppDomain.BaseDirectory" />。
              </param>
      <param name="searchPattern">
                搜索字符串。
                 字符串的格式应为与指定的相同 <see cref="M:System.IO.Directory.GetFiles(System.String,System.String)" /> 方法。
              </param>
      <param name="definitionOrigin">
                诊断用于标识部分的源的元素。
              </param>
      <exception cref="T:System.IO.DirectoryNotFoundException">
                  指定 <paramref name="path" /> 无效 （例如，它位于未映射的驱动器上）。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="path" /> 或 <paramref name="searchPattern" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.UnauthorizedAccessException">
                  调用方没有所要求的权限。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="path" /> 是一个零长度字符串，仅包含空白，或者包含一个或多个特定于实现的无效字符。
                
                  - 或 -
                
                  <paramref name="searchPattern" /> 不包含有效模式。
                </exception>
      <exception cref="T:System.IO.PathTooLongException">
                  指定的 <paramref name="path" />、文件名或这两者都超过了系统定义的最大长度。
                   例如，在基于 Windows 的计算机，路径必须少于 248 个字符，文件名必须少于 260 个字符。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String,System.String,System.Reflection.ReflectionContext)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" /> 类通过使用 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> 对象根据指定的目录路径，使用指定的反射上下文中指定的搜索模式。
            </summary>
      <param name="path">
                要扫描的程序集以添加到目录的目录路径。
              
                路径必须是绝对或相对于 <see cref="P:System.AppDomain.BaseDirectory" />。
              </param>
      <param name="searchPattern">
                搜索字符串。
                 字符串的格式应为与指定的相同 <see cref="M:System.IO.Directory.GetFiles(System.String,System.String)" /> 方法。
              </param>
      <param name="reflectionContext">
                用于创建部件的上下文。
              </param>
      <exception cref="T:System.IO.DirectoryNotFoundException">
                  指定 <paramref name="path" /> 无效 （例如，它位于未映射的驱动器上）。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="path" /> 或 <paramref name="searchPattern" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.UnauthorizedAccessException">
                  调用方没有所要求的权限。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="path" /> 是一个零长度字符串，仅包含空白，或者包含一个或多个特定于实现的无效字符。
                
                  - 或 -
                
                  <paramref name="searchPattern" /> 不包含有效模式。
                </exception>
      <exception cref="T:System.IO.PathTooLongException">
                  指定的 <paramref name="path" />、文件名或这两者都超过了系统定义的最大长度。
                   例如，在基于 Windows 的计算机，路径必须少于 248 个字符，文件名必须少于 260 个字符。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String,System.String,System.Reflection.ReflectionContext,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" /> 类通过使用 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> 对象根据指定的目录路径，使用指定的反射上下文中指定的搜索模式。
            </summary>
      <param name="path">
                要扫描的程序集以添加到目录的目录路径。
              
                路径必须是绝对或相对于 <see cref="P:System.AppDomain.BaseDirectory" />。
              </param>
      <param name="searchPattern">
                搜索字符串。
                 字符串的格式应为与指定的相同 <see cref="M:System.IO.Directory.GetFiles(System.String,System.String)" /> 方法。
              </param>
      <param name="reflectionContext">
                用于创建部件的上下文。
              </param>
      <param name="definitionOrigin">
                诊断用于标识部分的源的元素。
              </param>
      <exception cref="T:System.IO.DirectoryNotFoundException">
                  指定 <paramref name="path" /> 无效 （例如，它位于未映射的驱动器上）。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="path" /> 或 <paramref name="searchPattern" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.UnauthorizedAccessException">
                  调用方没有所要求的权限。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="path" /> 是一个零长度字符串，仅包含空白，或者包含一个或多个特定于实现的无效字符。
                
                  - 或 -
                
                  <paramref name="searchPattern" /> 不包含有效模式。
                </exception>
      <exception cref="T:System.IO.PathTooLongException">
                  指定的 <paramref name="path" />、文件名或这两者都超过了系统定义的最大长度。
                   例如，在基于 Windows 的计算机，路径必须少于 248 个字符，文件名必须少于 260 个字符。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Dispose(System.Boolean)">
      <summary>
              释放由 <see cref="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" /> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.GetEnumerator">
      <summary>
              返回循环访问目录的枚举。
            </summary>
      <returns>
              一个枚举器可用于循环访问该目录。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>
              获取表示由指定的导入定义的约束相匹配的导出定义。
            </summary>
      <param name="definition">
                应满足的条件 <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> 要返回的对象。
              </param>
      <returns>
              包含的对象的集合 <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> 及其关联 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> 与由指定的约束匹配的对象 <paramref name="definition" />。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  <see cref="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" /> 对象已被释放。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="definition" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.OnChanged(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)">
      <summary>
              引发 <see cref="E:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Changed" /> 事件。
            </summary>
      <param name="e">
                一个包含事件数据的对象。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.OnChanging(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)">
      <summary>
              引发 <see cref="E:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Changing" /> 事件。
            </summary>
      <param name="e">
                一个包含事件数据的对象。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Refresh">
      <summary>
              刷新 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> 具有最新的文件的目录中与搜索模式匹配的对象。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.DirectoryCatalog.ToString">
      <summary>
              获取目录的字符串表示。
            </summary>
      <returns>
              目录的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1">
      <summary>
              返回派生自指定的类型参数的协定名称的导出。
               如果不是正好有一个匹配的导出，则将引发异常。
            </summary>
      <typeparam name="T">
                类型参数 <see cref="T:System.Lazy`1" /> 要返回对象。
                 协定名称也派生自此类型参数。
              </typeparam>
      <returns>
              导出的协定名称派生自指定的类型参数。
            </returns>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
                  有零个 <see cref="T:System.Lazy`1" /> 具有协定名称的对象，派生自 <paramref name="T" /> 中 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象。
                
                  - 或 -
                
                  有了多个 <see cref="T:System.Lazy`1" /> 具有协定名称的对象派生自 <paramref name="T" /> 中 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象已释放。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1(System.String)">
      <summary>
              返回具有指定的协定名称的导出。
               如果不是正好有一个匹配的导出，则将引发异常。
            </summary>
      <param name="contractName">
                协定名称的 <see cref="T:System.Lazy`1" /> 对象若要返回，或 <see langword="null" /> 或空字符串 ("") 以使用默认协定名称。
              </param>
      <typeparam name="T">
                类型参数 <see cref="T:System.Lazy`1" /> 要返回对象。
              </typeparam>
      <returns>
              具有指定的协定名称的导出。
            </returns>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
                  有零个 <see cref="T:System.Lazy`1" /> 具有协定名称的对象，派生自 <paramref name="T" /> 中 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象。
                
                  - 或 -
                
                  有了多个 <see cref="T:System.Lazy`1" /> 具有协定名称的对象派生自 <paramref name="T" /> 中 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象已释放。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``2">
      <summary>
              返回派生自指定的类型参数的协定名称的导出。
               如果不是正好有一个匹配的导出，则将引发异常。
            </summary>
      <typeparam name="T">
                类型参数 <see cref="T:System.Lazy`2" /> 要返回对象。
                 协定名称也派生自此类型参数。
              </typeparam>
      <typeparam name="TMetadataView">
                元数据视图的类型 <see cref="T:System.Lazy`2" /> 要返回对象。
              </typeparam>
      <returns>
              System.Lazy'2
            </returns>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
                  有零个 <see cref="T:System.Lazy`2" /> 具有协定名称的对象，派生自 <paramref name="T" /> 中 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象。
                
                  - 或 -
                
                  有了多个 <see cref="T:System.Lazy`2" /> 具有协定名称的对象派生自 <paramref name="T" /> 中 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象已释放。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="TMetadataView" /> 不是有效的元数据视图类型。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``2(System.String)">
      <summary>
              返回具有指定的协定名称的导出。
               如果不是正好有一个匹配的导出，则将引发异常。
            </summary>
      <param name="contractName">
                协定名称的 <see cref="T:System.Lazy`2" /> 对象若要返回，或 <see langword="null" /> 或空字符串 ("") 以使用默认协定名称。
              </param>
      <typeparam name="T">
                类型参数 <see cref="T:System.Lazy`2" /> 要返回对象。
              </typeparam>
      <typeparam name="TMetadataView">
                元数据视图的类型 <see cref="T:System.Lazy`2" /> 要返回对象。
              </typeparam>
      <returns>
              具有指定的协定名称的导出。
            </returns>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
                  有零个 <see cref="T:System.Lazy`2" /> 具有协定名称的对象，派生自 <paramref name="T" /> 中 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象。
                
                  - 或 -
                
                  有了多个 <see cref="T:System.Lazy`2" /> 具有协定名称的对象派生自 <paramref name="T" /> 中 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象已释放。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="TMetadataView" /> 不是有效的元数据视图类型。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1">
      <summary>
              返回的已导出的对象派生自指定的类型参数的协定名称。
               如果不是正好有一个匹配的导出的对象，则将引发异常。
            </summary>
      <typeparam name="T">
                要返回的导出对象的类型。
                 协定名称也派生自此类型参数。
              </typeparam>
      <returns>
              导出的协定名称的对象派生自指定的类型参数。
            </returns>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
                  有零个导出的对象具有协定名称派生自 <paramref name="T" /> 中 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />。
                
                  - 或 -
                
                  有了多个导出的协定名称的对象派生自 <paramref name="T" /> 中 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象已释放。
                </exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">
                  基础导出的对象不能强制转换为 <paramref name="T" />。
                </exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">
                  在组合期间出错。
                  <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> 将包含发生的错误的集合。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1(System.String)">
      <summary>
              返回具有指定的协定名称的导出的对象。
               如果不是正好有一个匹配的导出的对象，则将引发异常。
            </summary>
      <param name="contractName">
                若要返回，导出对象的协定名称或 <see langword="null" /> 或空字符串 ("") 以使用默认协定名称。
              </param>
      <typeparam name="T">
                要返回的导出对象的类型。
              </typeparam>
      <returns>
              具有指定的协定名称的导出的对象。
            </returns>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
                  有零个导出的对象具有协定名称派生自 <paramref name="T" /> 中 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />。
                
                  - 或 -
                
                  有了多个导出的协定名称的对象派生自 <paramref name="T" /> 中 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象已释放。
                </exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">
                  基础导出的对象不能强制转换为 <paramref name="T" />。
                </exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">
                  在组合期间出错。
                  <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> 将包含发生的错误的集合。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1">
      <summary>
              获取导出的对象具有协定名称派生自指定的类型参数或指定类型的默认值或引发异常，如果多个匹配的导出的对象。
            </summary>
      <typeparam name="T">
                要返回的导出对象的类型。
                 协定名称也派生自此类型参数。
              </typeparam>
      <returns>
              导出的协定名称的对象派生自 <paramref name="T" />, ，如果找到; 否则为默认值为 <paramref name="T" />。
            </returns>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
                  有了多个导出的协定名称的对象派生自 <paramref name="T" /> 中 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象已释放。
                </exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">
                  基础导出的对象不能强制转换为 <paramref name="T" />。
                </exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">
                  在组合期间出错。
                  <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> 将包含发生的错误的集合。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1(System.String)">
      <summary>
              获取指定类型的已导出的对象与指定的协定名称或默认值或引发异常，如果多个匹配的导出的对象。
            </summary>
      <param name="contractName">
                若要返回，导出对象的协定名称或 <see langword="null" /> 或空字符串 ("") 以使用默认协定名称。
              </param>
      <typeparam name="T">
                要返回的导出对象的类型。
              </typeparam>
      <returns>
              导出的对象具有指定的协定名称，如果找到，则否则，默认值为 <paramref name="T" />。
            </returns>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
                  没有与指定的协定名称，在多个导出的对象 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象已释放。
                </exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">
                  基础导出的对象不能强制转换为 <paramref name="T" />。
                </exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">
                  在组合期间出错。
                  <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> 将包含发生的错误的集合。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1">
      <summary>
              获取派生自指定的类型参数的协定名称的所有导出的对象。
            </summary>
      <typeparam name="T">
                要返回的导出对象的类型。
                 协定名称也派生自此类型参数。
              </typeparam>
      <returns>
              找到具有协定名称派生自指定的类型参数，如果导出的对象;否则为空 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 对象。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象已释放。
                </exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">
                  无法将一个或多个基础导出的对象转换为 <paramref name="T" />。
                </exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">
                  在组合期间出错。
                  <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> 将包含发生的错误的集合。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1(System.String)">
      <summary>
              获取具有指定的协定名称的所有导出的对象。
            </summary>
      <param name="contractName">
                导出的对象以返回; 协定名称或 <see langword="null" /> 或空字符串 ("") 以使用默认协定名称。
              </param>
      <typeparam name="T">
                要返回的导出对象的类型。
              </typeparam>
      <returns>
              导出的对象具有指定的协定名称，如果找到，则否则为空 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 对象。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象已释放。
                </exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">
                  一个或多个基础导出值无法转换为 <paramref name="T" />。
                </exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">
                  在组合期间出错。
                  <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> 将包含发生的错误的集合。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>
              获取与指定的导入定义的条件匹配的所有导出。
            </summary>
      <param name="definition">
                定义的条件的对象 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象，以获得。
              </param>
      <returns>
              所有的集合 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 匹配所指定条件的对象 <paramref name="definition" />。
            </returns>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
                  <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> 是 <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> 且没有任何 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 与指定的条件匹配的对象 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />。
                
                  - 或 -
                
                  <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> 是 <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> 或 <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> ，并且没有多个 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 指定的条件相匹配的对象 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="definition" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>
              获取与指定的导入定义和组合的条件匹配的所有导出。
            </summary>
      <param name="definition">
                定义的条件的对象 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象，以获得。
              </param>
      <param name="atomicComposition">
                用于组合的事务性容器。
              </param>
      <returns>
              所有的集合 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 匹配所指定条件的对象 <paramref name="definition" /> 和 <paramref name="atomicComposition" />。
            </returns>
      <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
                  <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> 是 <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> 且没有任何 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 与指定的条件匹配的对象 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />。
                
                  - 或 -
                
                  <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> 是 <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> 或 <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> ，并且没有多个 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 指定的条件相匹配的对象 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="definition" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="atomicComposition" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.Type,System.Type,System.String)">
      <summary>
              获取与指定的协定名称的所有导出。
            </summary>
      <param name="type">
                类型参数 <see cref="T:System.Lazy`2" /> 要返回的对象。
              </param>
      <param name="metadataViewType">
                元数据视图的类型 <see cref="T:System.Lazy`2" /> 要返回的对象。
              </param>
      <param name="contractName">
                协定名称的 <see cref="T:System.Lazy`2" /> 对象若要返回，或 <see langword="null" /> 或空字符串 ("") 以使用默认协定名称。
              </param>
      <returns>
              所有的集合 <see cref="T:System.Lazy`2" /> 协定匹配的对象 <paramref name="contractName" />。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象已释放。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="type" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="metadataViewType" /> 不是有效的元数据视图类型。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1">
      <summary>
              获取派生自指定的类型参数的协定名称的所有导出。
            </summary>
      <typeparam name="T">
                类型参数 <see cref="T:System.Lazy`1" /> 要返回的对象。
                 协定名称也派生自此类型参数。
              </typeparam>
      <returns>
              <see cref="T:System.Lazy`1" /> 具有协定名称的对象，派生自 <paramref name="T" />, ，如果找到; 否则为一个空 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象已释放。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1(System.String)">
      <summary>
              获取与指定的协定名称的所有导出。
            </summary>
      <param name="contractName">
                协定名称的 <see cref="T:System.Lazy`1" /> 对象若要返回，或 <see langword="null" /> 或空字符串 ("") 以使用默认协定名称。
              </param>
      <typeparam name="T">
                类型参数 <see cref="T:System.Lazy`1" /> 要返回的对象。
              </typeparam>
      <returns>
              <see cref="T:System.Lazy`1" /> 对象具有指定的协定名称，如果找到; 否则为一个空 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象已释放。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``2">
      <summary>
              获取派生自指定的类型参数的协定名称的所有导出。
            </summary>
      <typeparam name="T">
                类型参数 <see cref="T:System.Lazy`2" /> 要返回的对象。
                 协定名称也派生自此类型参数。
              </typeparam>
      <typeparam name="TMetadataView">
                元数据视图的类型 <see cref="T:System.Lazy`2" /> 要返回的对象。
              </typeparam>
      <returns>
              <see cref="T:System.Lazy`2" /> 具有协定名称的对象，派生自 <paramref name="T" />, ，如果找到; 否则为一个空 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象已释放。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="TMetadataView" /> 不是有效的元数据视图类型。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``2(System.String)">
      <summary>
              获取与指定的协定名称的所有导出。
            </summary>
      <param name="contractName">
                协定名称的 <see cref="T:System.Lazy`2" /> 对象若要返回，或 <see langword="null " />或空字符串 ("") 以使用默认协定名称。
              </param>
      <typeparam name="T">
                类型参数 <see cref="T:System.Lazy`2" /> 要返回的对象。
                 协定名称也派生自此类型参数。
              </typeparam>
      <typeparam name="TMetadataView">
                元数据视图的类型 <see cref="T:System.Lazy`2" /> 要返回的对象。
              </typeparam>
      <returns>
              <see cref="T:System.Lazy`2" /> 对象具有指定的协定名称，如果找到; 否则为一个空 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象已释放。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="TMetadataView" /> 不是有效的元数据视图类型。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>
              获取与指定的定义所定义的约束匹配的所有导出。
            </summary>
      <param name="definition">
                定义的条件的对象 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 要返回的对象。
              </param>
      <param name="atomicComposition">
                用于组合的事务性容器。
              </param>
      <returns>
              包含与指定的条件匹配的所有导出的集合。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanged(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)">
      <summary>
              引发 <see cref="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged" /> 事件。
            </summary>
      <param name="e">
                包含事件数据的 <see cref="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanging(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)">
      <summary>
              引发 <see cref="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging" /> 事件。
            </summary>
      <param name="e">
                包含事件数据的 <see cref="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportProvider.TryGetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export}@)">
      <summary>
              获取与指定的导入的条件匹配的所有导出。
            </summary>
      <param name="definition">
                定义的条件的对象 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象，以获得。
              </param>
      <param name="atomicComposition">
                用于组合的事务性容器。
              </param>
      <param name="exports">
                此方法返回时，包含一套 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象定义的条件相匹配 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />, ，如果找到; 否则为一个空 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象。
                 此参数未经初始化即被传递。
              </param>
      <returns>
              <see langword="true" />如果 <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> 是 <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> 或 <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrMore" /> 且没有任何 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 与指定的条件匹配的对象 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />; <see langword="true" /> 如果 <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> 是 <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> 或 <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> 和是正好有一个 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> ，与指定的条件相匹配 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="definition" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ExportDefinition},System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ExportDefinition},System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" /> 类的新实例。
            </summary>
      <param name="addedExports">
                添加了事件。
              </param>
      <param name="removedExports">
                已删除事件。
              </param>
      <param name="atomicComposition">
                包含更改组合事务。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" /> 使用指定的基础目录和筛选器的类。
            </summary>
      <param name="catalog">
                基础目录中。
              </param>
      <param name="filter">
                用于筛选部分的函数。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.Dispose(System.Boolean)">
      <summary>
              由 <see langword="Dispose()" /> 和 <see langword="Finalize()" /> 方法调用，以释放 <see cref="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" /> 类的当前实例所占用的托管资源和非托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管的资源，则为 <see langword="true" />；若要仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.GetEnumerator">
      <summary>
              返回循环访问目录的枚举。
            </summary>
      <returns>
              一个枚举器可用于循环访问该目录。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>
              从匹配指定的导入此目录中获取导出的部件。
            </summary>
      <param name="definition">
                导入匹配。
              </param>
      <returns>
              匹配的部件的集合。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies">
      <summary>
              获取一个新 <see cref="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" /> 对象，包含此目录中的所有部件和所有依赖项。
            </summary>
      <returns>
              新的目录中。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies(System.Func{System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean})">
      <summary>
              获取一个新 <see cref="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" /> 对象，其中包含此目录中的所有部分和通过与指定筛选器匹配的导入可达到的所有依赖项。
            </summary>
      <param name="importFilter">
                导入筛选器。
              </param>
      <returns>
              新的目录中。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents">
      <summary>
              获取一个新 <see cref="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" /> 对象，包含此目录中的所有部件和所有依赖项。
            </summary>
      <returns>
              新的目录中。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents(System.Func{System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean})">
      <summary>
              获取一个新 <see cref="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" /> 对象，其中包含此目录中的所有部分和通过与指定筛选器匹配的导入可达到的所有依赖项。
            </summary>
      <param name="importFilter">
                导入筛选器。
              </param>
      <returns>
              新的目录中。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.OnChanged(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)">
      <summary>
              引发 <see cref="E:System.ComponentModel.Composition.Hosting.FilteredCatalog.Changed" /> 事件。
            </summary>
      <param name="e">
                为事件提供数据。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.OnChanging(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)">
      <summary>
              引发 <see cref="E:System.ComponentModel.Composition.Hosting.FilteredCatalog.Changing" /> 事件。
            </summary>
      <param name="e">
                为事件提供数据。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Composition.Hosting.ImportEngine" /> 类的新实例。
            </summary>
      <param name="sourceProvider">
                <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> ，它提供 <see cref="T:System.ComponentModel.Composition.Hosting.ImportEngine" /> 访问 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider,System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Hosting.ImportEngine" /> 类，根据需要在线程安全模式。
            </summary>
      <param name="sourceProvider">
                <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> ，它提供 <see cref="T:System.ComponentModel.Composition.Hosting.ImportEngine" /> 访问 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象。
              </param>
      <param name="isThreadSafe">
                <see langword="true" /> 如果线程安全是必需的;否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider,System.ComponentModel.Composition.Hosting.CompositionOptions)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Hosting.ImportEngine" /> 类，具有指定的选项。
            </summary>
      <param name="sourceProvider">
                <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> ，它提供 <see cref="T:System.ComponentModel.Composition.Hosting.ImportEngine" /> 访问 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象。
              </param>
      <param name="compositionOptions">
                一个对象，指定影响引擎的行为的选项。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.Dispose">
      <summary>
              释放 <see cref="T:System.ComponentModel.Composition.Hosting.ImportEngine" /> 类的当前实例所使用的所有资源。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.Dispose(System.Boolean)">
      <summary>
              释放由 <see cref="T:System.ComponentModel.Composition.Hosting.ImportEngine" /> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.PreviewImports(System.ComponentModel.Composition.Primitives.ComposablePart,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>
              预览所需的所有导入的指定部分，以确保它们能感到满意，而无需实际设置它们。
            </summary>
      <param name="part">
                若要预览其导入的一部分。
              </param>
      <param name="atomicComposition">
                若要使用的组合事务或 <see langword="null" /> 表示没有组合事务。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.ReleaseImports(System.ComponentModel.Composition.Primitives.ComposablePart,System.ComponentModel.Composition.Hosting.AtomicComposition)">
      <summary>
              释放所有导出项用来满足其导入的指定部分。
            </summary>
      <param name="part">
                要释放的导入的部件。
              </param>
      <param name="atomicComposition">
                若要使用的组合事务或 <see langword="null" /> 表示没有组合事务。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.SatisfyImports(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <summary>
              可满足其导入的指定部分。
            </summary>
      <param name="part">
                要满足的导入的部件。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ImportEngine.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <summary>
              注册以进行重新组合的情况下可满足其导入的指定部分。
            </summary>
      <param name="part">
                要满足的导入的部件。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadata``1(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String,``0)">
      <summary>
              获取一个值，该值指示指定的部件是否包含具有指定的键和值的元数据。
            </summary>
      <param name="part">
                要搜索的部件。
              </param>
      <param name="key">
                元数据键。
              </param>
      <param name="value">
                元数据的值。
              </param>
      <typeparam name="T">
                元数据值的类型。
              </typeparam>
      <returns>
              <see langword="true" /> 如果 <paramref name="part" /> 包含元数据，具有指定的键、 值类型和值; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadataWithKey(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String)">
      <summary>
              获取一个值，该值指示指定的部件是否包含具有指定的键的元数据。
            </summary>
      <param name="part">
                要搜索的部件。
              </param>
      <param name="key">
                元数据键。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="part" /> 包含具有指定的元数据键; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.Exports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String)">
      <summary>
              获取一个值，该值指示指定的部件是否导出指定的协定。
            </summary>
      <param name="part">
                要搜索的部件。
              </param>
      <param name="contractName">
                协定的名称。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="part" /> 导出指定的协定; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.Filter(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})">
      <summary>
              筛选器与指定的筛选器函数的指定的目录。
            </summary>
      <param name="catalog">
                要筛选的目录。
              </param>
      <param name="filter">
                筛选器函数中。
              </param>
      <returns>
              使用指定的筛选器筛选的一个新目录。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String)">
      <summary>
              确定指定的部件是否导入指定的协定。
            </summary>
      <param name="part">
                要搜索的部件。
              </param>
      <param name="contractName">
                协定的名称。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="part" /> 导入指定的协定; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String,System.ComponentModel.Composition.Primitives.ImportCardinality)">
      <summary>
              确定是否指定的部分用指定的基数导入指定的协定。
            </summary>
      <param name="part">
                要搜索的部件。
              </param>
      <param name="contractName">
                协定的名称。
              </param>
      <param name="importCardinality">
                协定的基数。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="part" /> 导入的协定具有指定的名称和基数; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.TypeCatalog.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> 使用指定的类型的类。
            </summary>
      <param name="types">
                特性化的集合 <see cref="T:System.Type" /> 要添加到对象 <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> 对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="types" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="types" /> 包含的元素将是 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="types" /> 包含已加载到只反射上下文中的元素。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.TypeCatalog.#ctor(System.Collections.Generic.IEnumerable{System.Type},System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> 带有指定的类型和源部件的类。
            </summary>
      <param name="types">
                特性化的集合 <see cref="T:System.Type" /> 要添加到对象 <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> 对象。
              </param>
      <param name="definitionOrigin">
                诊断用于标识部分的源元素。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="types" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="types" /> 包含的元素将是 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="types" /> 包含已加载到只反射上下文中的元素。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.TypeCatalog.#ctor(System.Collections.Generic.IEnumerable{System.Type},System.Reflection.ReflectionContext)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> 使用指定的反射上下文中指定的类型的类。
            </summary>
      <param name="types">
                特性化的集合 <see cref="T:System.Type" /> 要添加到对象 <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> 对象。
              </param>
      <param name="reflectionContext">
                用于解释类型的上下文。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="types" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="types" /> 包含的元素将是 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="types" /> 包含已加载到只反射上下文中的元素。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.TypeCatalog.#ctor(System.Collections.Generic.IEnumerable{System.Type},System.Reflection.ReflectionContext,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> 与指定的反射上下文和部件的源中的指定类型的类。
            </summary>
      <param name="types">
                特性化的集合 <see cref="T:System.Type" /> 要添加到对象 <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> 对象。
              </param>
      <param name="reflectionContext">
                用于解释类型的上下文。
              </param>
      <param name="definitionOrigin">
                诊断用于标识部分的源元素。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="types" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="types" /> 包含的元素将是 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="types" /> 包含已加载到只反射上下文中的元素。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.TypeCatalog.#ctor(System.Type[])">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> 使用指定的类型的类。
            </summary>
      <param name="types">
                数组特性化 <see cref="T:System.Type" /> 要添加到对象 <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> 对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="types" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="types" /> 包含的元素将是 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="types" /> 包含已加载到只反射上下文中的元素。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.TypeCatalog.Dispose(System.Boolean)">
      <summary>
              释放由 <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.TypeCatalog.GetEnumerator">
      <summary>
              返回循环访问目录的枚举。
            </summary>
      <returns>
              一个枚举器可用于循环访问该目录。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Hosting.TypeCatalog.ToString">
      <summary>
              返回的字符串表示形式类型目录。
            </summary>
      <returns>
              字符串表示形式类型目录。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.ICompositionService.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)">
      <summary>
              组合指定的部件，组合和验证被禁用。
            </summary>
      <param name="part">
                要组合的部件。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportAttribute.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.ImportAttribute" /> 类中，导入具有默认的协定名称的导出。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportAttribute.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.ImportAttribute" /> 类中，导入具有指定的协定名称的导出。
            </summary>
      <param name="contractName">
                要导入、 导出的协定名称或 <see langword="null" /> 或空字符串 ("") 以使用默认协定名称。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportAttribute.#ctor(System.String,System.Type)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.ImportAttribute" /> 类中，导入具有指定的协定名称和类型的导出。
            </summary>
      <param name="contractName">
                要导入、 导出的协定名称或 <see langword="null" /> 或空字符串 ("") 以使用默认协定名称。
              </param>
      <param name="contractType">
                要导入导出的类型。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportAttribute.#ctor(System.Type)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.ImportAttribute" /> 类，导入导出的协定名称派生自指定的类型。
            </summary>
      <param name="contractType">
                要派生，导出的协定名称的类型或 <see langword="null" /> 若要使用默认的协定名称。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor">
      <summary>
              使用由系统提供的用来描述错误的消息初始化 <see cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              用序列化数据初始化 <see cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" /> 类的新实例。
            </summary>
      <param name="info">
                包含有关序列化的对象数据的对象 <see cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" />。
              </param>
      <param name="context">
                包含有关源或目标的上下文信息的对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="info" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
                  <paramref name="info" /> 缺少所需的值。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  <paramref name="info" /> 包含一个值，不能强制转换为正确的类型。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor(System.String)">
      <summary>
              使用指定的描述错误的消息初始化 <see cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" /> 类的新实例。
            </summary>
      <param name="message">
                一条消息，说明 <see cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" />, ，或 <see langword="null" /> 设置 <see cref="P:System.Exception.Message" /> 属性设置为其默认值。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportCardinalityMismatchException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException" /> 类的新实例。
            </summary>
      <param name="message">
                描述该异常的消息。
                 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。
              </param>
      <param name="innerException">
                导致当前异常的异常。
                 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportingConstructorAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Composition.ImportingConstructorAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportManyAttribute.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.ImportManyAttribute" /> 类中，导入的具有默认的协定名称导出的组。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportManyAttribute.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.ImportManyAttribute" /> 类中，导入的一套导出具有指定的协定名称。
            </summary>
      <param name="contractName">
                要导入、 导出的协定名称或 <see langword="null" /> 或空字符串 ("") 以使用默认协定名称。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportManyAttribute.#ctor(System.String,System.Type)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.ImportManyAttribute" /> 类，用指定的协定名称和协定类型导入的一套导出。
            </summary>
      <param name="contractName">
                要导入、 导出的协定名称或 <see langword="null" /> 或空字符串 ("") 以使用默认协定名称。
              </param>
      <param name="contractType">
                要导入导出的类型。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.ImportManyAttribute.#ctor(System.Type)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.ImportManyAttribute" /> 类，导入导出的协定名称集派生自指定的类型。
            </summary>
      <param name="contractType">
                要派生要导入、 导出的协定名称的类型或 <see langword="null" /> 以使用默认协定名称。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Composition.InheritedExportAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.InheritedExportAttribute" /> 初始化具有指定的协定名称。
            </summary>
      <param name="contractName">
                协定的名称。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor(System.String,System.Type)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.InheritedExportAttribute" /> 类具有指定的协定名称和类型。
            </summary>
      <param name="contractName">
                协定的名称。
              </param>
      <param name="contractType">
                协定的类型。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor(System.Type)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.InheritedExportAttribute" /> 与指定的协定类型的类。
            </summary>
      <param name="contractType">
                协定的类型。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.IPartImportsSatisfiedNotification.OnImportsSatisfied">
      <summary>
              当部件的导入都得到满足并且可安全地使用时调用。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.MetadataAttributeAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Composition.MetadataAttributeAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.MetadataViewImplementationAttribute.#ctor(System.Type)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Composition.MetadataViewImplementationAttribute" /> 类的新实例。
            </summary>
      <param name="implementationType">
                元数据视图的类型。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.PartCreationPolicyAttribute.#ctor(System.ComponentModel.Composition.CreationPolicy)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.PartCreationPolicyAttribute" /> 指定的创建策略的类。
            </summary>
      <param name="creationPolicy">
                要使用的创建策略。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.PartMetadataAttribute.#ctor(System.String,System.Object)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.PartMetadataAttribute" /> 类具有指定名称和元数据值。
            </summary>
      <param name="name">
                一个字符串，包含的元数据值的名称或 <see langword="null" /> 以使用一个空字符串 ("")。
              </param>
      <param name="value">
                一个包含元数据值的对象。
                 这可能是 <see langword="null" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.PartNotDiscoverableAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Composition.PartNotDiscoverableAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePart.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePart.Activate">
      <summary>
              已设置的部件的所有导入，并且可检索导出时调用。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePart.GetExportedValue(System.ComponentModel.Composition.Primitives.ExportDefinition)">
      <summary>
              获取由指定所述的导出的对象 <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> 对象。
            </summary>
      <param name="definition">
                其中一个 <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> 对象从 <see cref="P:System.ComponentModel.Composition.Primitives.ComposablePart.ExportDefinitions" /> 描述要返回的导出的对象的属性。
              </param>
      <returns>
              所描述的导出的对象 <paramref name="definition" />。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象已释放。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="definition" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException">
                  获取所描述的导出的对象时出错 <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="definition" /> 不是源自 <see cref="P:System.ComponentModel.Composition.Primitives.ComposablePart.ExportDefinitions" /> 属性 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  一个或多个必备导入，由 <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.IsPrerequisite" />, ，尚未设置。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePart.SetImport(System.ComponentModel.Composition.Primitives.ImportDefinition,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export})">
      <summary>
              设置描述由指定的导入 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 要满足指定导出的对象。
            </summary>
      <param name="definition">
                从对象之一 <see cref="P:System.ComponentModel.Composition.Primitives.ComposablePart.ImportDefinitions" /> 指定要设置的导入的属性。
              </param>
      <param name="exports">
                一套 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 的可设置导入所描述对象 <paramref name="definition" />。
              </param>
      <exception cref="T:System.ObjectDisposedException">
                  <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象已释放。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="definition" /> 为 <see langword="null" />。
                
                   - 或 - 
                
                  <paramref name="exports" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException">
                  设置导入由描述时出现错误 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 对象。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="definition" /> 不是源自 <see cref="P:System.ComponentModel.Composition.Primitives.ComposablePart.ImportDefinitions" /> 属性 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" />。
                
                   - 或 - 
                
                  <paramref name="exports" /> 包含的元素将是 <see langword="null" />。
                
                   - 或 - 
                
                  <paramref name="exports" /> 为空并 <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> 是 <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" />。
                
                   - 或 - 
                
                  <paramref name="exports" /> 包含多个元素和 <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> 是 <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> 或 <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="M:System.ComponentModel.Composition.Primitives.ComposablePart.SetImport(System.ComponentModel.Composition.Primitives.ImportDefinition,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export})" /> 先前已经调用和 <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.IsRecomposable" /> 是 <see langword="false" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose">
      <summary>
              释放由 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> 使用的所有资源。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose(System.Boolean)">
      <summary>
              释放由 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.GetEnumerator">
      <summary>
              返回循环访问目录的枚举。
            </summary>
      <returns>
              一个枚举器可用于循环访问该目录。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>
              获取与指定所定义的约束匹配的导出定义的列表 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 对象。
            </summary>
      <param name="definition">
                应满足的条件 <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> 要返回的对象。
              </param>
      <returns>
              一套 <see cref="T:System.Tuple`2" /> 包含 <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> 及其关联 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> 相匹配由指定的约束的对象的对象 <paramref name="definition" />。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> 对象已释放。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="definition" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              返回循环访问目录的枚举。
            </summary>
      <returns>
              一个枚举器可用于循环访问该目录。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartDefinition.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartDefinition.CreatePart">
      <summary>
              创建部件的新实例，该 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> 描述。
            </summary>
      <returns>
              创建的部件。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartException.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> 用指定的序列化数据。
            </summary>
      <param name="info">
                包含序列化的对象数据的对象 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />。
              </param>
      <param name="context">
                包含有关源或目标的上下文信息的对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="info" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
                  <paramref name="info" /> 缺少所需的值。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  <paramref name="info" /> 包含一个值，不能强制转换为正确的类型。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartException.#ctor(System.String)">
      <summary>
              使用指定的错误消息初始化 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> 类的新实例。
            </summary>
      <param name="message">
                一条消息，说明 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />, ，或 <see langword="null" /> 设置 <see cref="P:System.Exception.Message" /> 属性设置为其默认值。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartException.#ctor(System.String,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> 带有指定的错误消息和导致异常的组合元素的类。
            </summary>
      <param name="message">
                一条消息，说明 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />, ，或 <see langword="null" /> 设置 <see cref="P:System.Exception.Message" /> 属性设置为其默认值。
              </param>
      <param name="element">
                是的原因的组合元素 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />, ，或 <see langword="null" /> 设置 <see cref="P:System.ComponentModel.Composition.Primitives.ComposablePartException.Element" /> 属性设置为 <see langword="null" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartException.#ctor(System.String,System.ComponentModel.Composition.Primitives.ICompositionElement,System.Exception)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> 用指定的错误消息和组合元素和导致此异常的原因的异常。
            </summary>
      <param name="message">
                一条消息，说明 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />, ，或 <see langword="null" /> 设置 <see cref="P:System.Exception.Message" /> 属性设置为其默认值。
              </param>
      <param name="element">
                是的原因的组合元素 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />, ，或 <see langword="null" /> 设置 <see cref="P:System.ComponentModel.Composition.Primitives.ComposablePartException.Element" /> 属性设置为 <see langword="null" />。
              </param>
      <param name="innerException">
                原因的异常的根本 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />, ，或 <see langword="null" /> 设置 <see cref="P:System.Exception.InnerException" /> 属性设置为 <see langword="null" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartException.#ctor(System.String,System.Exception)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" /> 带有指定的错误消息和对导致此异常的异常类。
            </summary>
      <param name="message">
                一条消息，说明 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />, ，或 <see langword="null" /> 设置 <see cref="P:System.Exception.Message" /> 属性设置为其默认值。
              </param>
      <param name="innerException">
                原因的异常的根本 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />, ，或 <see langword="null" /> 设置 <see cref="P:System.Exception.InnerException" /> 属性设置为 <see langword="null" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ComposablePartException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              获取异常的序列化数据。
            </summary>
      <param name="info">
                调用方法后，包含序列化的对象数据有关 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />。
              </param>
      <param name="context">
                调用方法后，包含有关源或目标的上下文信息。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="info" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.Boolean,System.Boolean,System.ComponentModel.Composition.CreationPolicy)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" /> 类与指定的协定名称、 所需的类型标识、 必需的元数据、 基数和创建策略，并指示是否可重新组合导入定义还是一个必备组件。
            </summary>
      <param name="contractName">
                协定名称的 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 所需的导入定义的对象。
              </param>
      <param name="requiredTypeIdentity">
                期望的导出类型的类型标识。
                 使用 <see cref="M:System.ComponentModel.Composition.AttributedModelServices.GetTypeIdentity(System.Type)" /> 方法来生成给定类型的类型标识。
                 如果没有具体的类型是必需的使用 <see langword="null" />。
              </param>
      <param name="requiredMetadata">
                包含元数据名称和所需的导入定义中; 类型的键/值对的集合或 <see langword="null" /> 设置 <see cref="P:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredMetadata" /> 属性设置为一个空 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 集合。
              </param>
      <param name="cardinality">
                一个枚举值，该值指示的基数 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 所需的导入定义对象。
              </param>
      <param name="isRecomposable">
                <see langword="true" /> 若要指定导入定义，可以满足多次的整个生存期 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" />; 否则为 <see langword="false" />。
              </param>
      <param name="isPrerequisite">
                <see langword="true" /> 指定导入定义需要得到满足之前 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 才能开始生成导出的对象; 否则为 <see langword="false" />。
              </param>
      <param name="requiredCreationPolicy">
                一个值，指示导入程序，需要用来满足此导入导出特定的创建策略。
                 如果不需要任何特定的创建策略，则默认值是 <see cref="F:System.ComponentModel.Composition.CreationPolicy.Any" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="contractName" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="contractName" /> 为空字符串 ("")。
                
                  - 或 -
                
                  <paramref name="requiredMetadata" /> 包含的元素将是 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="cardinality" /> 不属于某个 <see cref="T:System.ComponentModel.Composition.Primitives.ImportCardinality" /> 值。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.Boolean,System.Boolean,System.ComponentModel.Composition.CreationPolicy,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" /> 类具有指定的协定名称、 所需的类型标识、 必选和可选元数据、 基数，和创建策略，并指示是否可重新组合导入定义还是一个必备组件。
            </summary>
      <param name="contractName">
                协定名称的 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 所需的导入定义的对象。
              </param>
      <param name="requiredTypeIdentity">
                期望的导出类型的类型标识。
                 使用 <see cref="M:System.ComponentModel.Composition.AttributedModelServices.GetTypeIdentity(System.Type)" /> 方法来生成给定类型的类型标识。
                 如果没有具体的类型是必需的使用 <see langword="null" />。
              </param>
      <param name="requiredMetadata">
                包含元数据名称和所需的导入定义中; 类型的键/值对的集合或 <see langword="null" /> 设置 <see cref="P:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredMetadata" /> 属性设置为一个空 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 集合。
              </param>
      <param name="cardinality">
                一个枚举值，该值指示的基数 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 所需的导入定义对象。
              </param>
      <param name="isRecomposable">
                <see langword="true" /> 若要指定导入定义，可以满足多次的整个生存期 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" />; 否则为 <see langword="false" />。
              </param>
      <param name="isPrerequisite">
                <see langword="true" /> 指定导入定义需要得到满足之前 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 才能开始生成导出的对象; 否则为 <see langword="false" />。
              </param>
      <param name="requiredCreationPolicy">
                一个值，指示导入程序，需要用来满足此导入导出特定的创建策略。
                 如果不需要任何特定的创建策略，则默认值是 <see cref="F:System.ComponentModel.Composition.CreationPolicy.Any" />。
              </param>
      <param name="metadata">
                此导入关联的元数据。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="contractName" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="contractName" /> 为空字符串 ("")。
                
                  - 或 -
                
                  <paramref name="requiredMetadata" /> 包含的元素将是 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="cardinality" /> 不属于某个 <see cref="T:System.ComponentModel.Composition.Primitives.ImportCardinality" /> 值。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.IsConstraintSatisfiedBy(System.ComponentModel.Composition.Primitives.ExportDefinition)">
      <summary>
              返回一个值，该值指示是否根据给定的导出定义所表示的导出满足此对象所表示的约束。
            </summary>
      <param name="exportDefinition">
                要测试的导出定义。
              </param>
      <returns>
              <see langword="true" /> 如果不满足约束为;，否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.ToString">
      <summary>
              返回此 <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" /> 对象的字符串表示形式。
            </summary>
      <returns>
              此 <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" /> 对象的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.Export.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.Export.#ctor(System.ComponentModel.Composition.Primitives.ExportDefinition,System.Func{System.Object})">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 使用指定的导出定义和导出的对象 getter 的类。
            </summary>
      <param name="definition">
                一个对象，描述协定， <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象满足。
              </param>
      <param name="exportedValueGetter">
                调用来创建的导出的对象的方法 <see cref="T:System.ComponentModel.Composition.Primitives.Export" />。
                 这会创建的对象，直到延迟 <see cref="P:System.ComponentModel.Composition.Primitives.Export.Value" /> 调用属性。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="definition" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="exportedObjectGetter" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.Export.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Func{System.Object})">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 使用指定的协定名称、 元数据，以及导出的值 getter。
            </summary>
      <param name="contractName">
                协定名称的 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象。
              </param>
      <param name="metadata">
                元数据的 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象或 <see langword="null" /> 设置 <see cref="P:System.ComponentModel.Composition.Primitives.Export.Metadata" /> 属性为空的只读 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象。
              </param>
      <param name="exportedValueGetter">
                调用来创建的导出的对象的方法 <see cref="T:System.ComponentModel.Composition.Primitives.Export" />。
                 这会创建的对象，直到延迟 <see cref="P:System.ComponentModel.Composition.Primitives.Export.Value" /> 调用方法。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="contractName" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="exportedObjectGetter" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="contractName" /> 为空字符串 ("")。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.Export.#ctor(System.String,System.Func{System.Object})">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 类，具有指定的协定名称和导出值 getter。
            </summary>
      <param name="contractName">
                协定名称的 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象。
              </param>
      <param name="exportedValueGetter">
                调用来创建的导出的对象的方法 <see cref="T:System.ComponentModel.Composition.Primitives.Export" />。
                 这会创建的对象，直到延迟 <see cref="P:System.ComponentModel.Composition.Primitives.Export.Value" /> 调用方法。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="contractName" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="exportedObjectGetter" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="contractName" /> 为空字符串 ("")。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.Export.GetExportedValueCore">
      <summary>
              返回的导出提供已导出的对象。
            </summary>
      <returns>
              导出的对象导出提供。
            </returns>
      <exception cref="T:System.NotImplementedException">
                  <see cref="M:System.ComponentModel.Composition.Primitives.Export.GetExportedValueCore" /> 方法未由派生类重写。
                </exception>
      <exception cref="T:System.ComponentModel.Composition.CompositionException">
                  在组合期间出错。
                  <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> 将包含发生的错误的集合。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ExportDefinition.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ExportDefinition.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> 使用指定的协定名称和元数据的类。
            </summary>
      <param name="contractName">
                协定名称的 <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> 对象。
              </param>
      <param name="metadata">
                元数据的 <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> 或 <see langword="null" /> 设置 <see cref="P:System.ComponentModel.Composition.Primitives.ExportDefinition.Metadata" /> 属性为空的只读 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="contractName" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="contractName" /> 为空字符串 ("")。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ExportDefinition.ToString">
      <summary>
              返回的字符串表示形式导出定义。
            </summary>
      <returns>
              导出定义的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ExportedDelegate.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Composition.Primitives.ExportedDelegate" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ExportedDelegate.#ctor(System.Object,System.Reflection.MethodInfo)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Primitives.ExportedDelegate" /> 类用于在指定的部件和方法。
            </summary>
      <param name="instance">
                导出方法中的部分。
              </param>
      <param name="method">
                要导出的方法。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ExportedDelegate.CreateDelegate(System.Type)">
      <summary>
              获取指定类型的委托。
            </summary>
      <param name="delegateType">
                要返回的委托的类型。
              </param>
      <returns>
              指定类型的委托或 <see langword="null" /> 是否可创建此类委托。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ImportDefinition.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ImportDefinition.#ctor(System.Linq.Expressions.Expression{System.Func{System.ComponentModel.Composition.Primitives.ExportDefinition,System.Boolean}},System.String,System.ComponentModel.Composition.Primitives.ImportCardinality,System.Boolean,System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 使用指定的约束、 协定名称和基数，类，并指示是否可重新组合导入定义还是一个必备组件。
            </summary>
      <param name="constraint">
                一个表达式，包含 <see cref="T:System.Func`2" /> 定义的条件的对象 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 必须匹配才能满足导入定义。
              </param>
      <param name="contractName">
                协定名称。
              </param>
      <param name="cardinality">
                一个枚举值，该值指示的基数 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 所需的导入定义对象。
              </param>
      <param name="isRecomposable">
                <see langword="true" /> 若要指定导入定义，可以满足多次的整个生存期 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象; 否则为 <see langword="false" />。
              </param>
      <param name="isPrerequisite">
                <see langword="true" /> 若要指定要在之前导入定义必须满足 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 才能开始生成导出的对象; 否则为 <see langword="false" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="constraint" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="cardinality" /> 不是一个的值 <see cref="T:System.ComponentModel.Composition.Primitives.ImportCardinality" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ImportDefinition.#ctor(System.Linq.Expressions.Expression{System.Func{System.ComponentModel.Composition.Primitives.ExportDefinition,System.Boolean}},System.String,System.ComponentModel.Composition.Primitives.ImportCardinality,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 类与指定的约束、 协定名称、 基数和元数据，并指明导入定义是否可重新组合或系统必备组件。
            </summary>
      <param name="constraint">
                一个表达式，包含 <see cref="T:System.Func`2" /> 定义的条件的对象 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 必须匹配才能满足导入定义。
              </param>
      <param name="contractName">
                协定名称。
              </param>
      <param name="cardinality">
                一个枚举值，该值指示的基数 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 所需的导入定义对象。
              </param>
      <param name="isRecomposable">
                <see langword="true" /> 若要指定导入定义，可以满足多次的整个生存期 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象; 否则为 <see langword="false" />。
              </param>
      <param name="isPrerequisite">
                <see langword="true" /> 若要指定要在之前导入定义必须满足 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 才能开始生成导出的对象; 否则为 <see langword="false" />。
              </param>
      <param name="metadata">
                与导入关联的元数据。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ImportDefinition.IsConstraintSatisfiedBy(System.ComponentModel.Composition.Primitives.ExportDefinition)">
      <summary>
              获取一个值，该值指示所表示的指定的定义导出是否满足此导入定义的约束。
            </summary>
      <param name="exportDefinition">
                要测试的导出定义。
              </param>
      <returns>
              <see langword="true" /> 如果满足约束条件;，否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Primitives.ImportDefinition.ToString">
      <summary>
              返回的字符串表示形式导入定义。
            </summary>
      <returns>
              字符串表示形式导入定义。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.#ctor(System.Reflection.MemberInfo)">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo" /> 类中，表示指定的成员。
            </summary>
      <param name="member">
                要表示的成员。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.#ctor(System.Reflection.MemberTypes,System.Func{System.Reflection.MemberInfo[]})">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo" /> 类具有指定访问器的指定类型的一个成员。
            </summary>
      <param name="memberType">
                表示成员的类型。
              </param>
      <param name="accessorsCreator">
                一个函数，其返回值是表示成员的访问器的集合。
              </param>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.#ctor(System.Reflection.MemberTypes,System.Reflection.MemberInfo[])">
      <summary>
              新实例初始化 <see cref="T:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo" /> 类具有指定访问器的指定类型的一个成员。
            </summary>
      <param name="memberType">
                表示成员的类型。
              </param>
      <param name="accessors">
                一个表示成员的访问器的数组。
              </param>
      <exception cref="T:System.ArgumentException">
                  一个或多个中的对象 <paramref name="accessors" /> 不为此成员的有效访问器。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.Equals(System.Object)">
      <summary>
              指示此实例与指定对象是否相等。
            </summary>
      <param name="obj">
                要比较的另一个对象。
              </param>
      <returns>
              如果 <see langword="true" /> 和该实例具有相同的类型并表示相同的值，则为 <paramref name="obj" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.GetAccessors">
      <summary>
              获取表示成员的访问器数组。
            </summary>
      <returns>
              一个表示成员的访问器的数组。
            </returns>
      <exception cref="T:System.ArgumentException">
                  一个或多个访问器的属性在此对象中的无效。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.GetHashCode">
      <summary>
              返回此实例的哈希代码。
            </summary>
      <returns>
              一个 32 位带符号整数，它是此实例的哈希代码。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.op_Equality(System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo,System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo)">
      <summary>
              确定两个指定 <see cref="T:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo" /> 对象是否相等。
            </summary>
      <param name="left">
                要测试的第一个对象。
              </param>
      <param name="right">
                要测试的第二个对象。
              </param>
      <returns>
              如果对象相等，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.op_Inequality(System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo,System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo)">
      <summary>
              确定两个指定 <see cref="T:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo" /> 对象是否不相等。
            </summary>
      <param name="left">
                要测试的第一个对象。
              </param>
      <param name="right">
                要测试的第二个对象。
              </param>
      <returns>
              如果对象相等，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateExportDefinition(System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo,System.String,System.Lazy{System.Collections.Generic.IDictionary{System.String,System.Object}},System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>
              创建一个导出定义从指定的成员，使用指定的协定名称、 元数据和原点。
            </summary>
      <param name="exportingMember">
                要导出的成员。
              </param>
      <param name="contractName">
                要用于导出的协定名称。
              </param>
      <param name="metadata">
                用于导出元数据。
              </param>
      <param name="origin">
                导出源自对象。
              </param>
      <returns>
              从指定的参数创建的导出定义。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateImportDefinition(System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.Boolean,System.Boolean,System.ComponentModel.Composition.CreationPolicy,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>
              使用指定的协定名称、 类型标识、 导入和协定的元数据、 基数、 重新组合策略和创建策略为指定的成员创建导入定义。
            </summary>
      <param name="importingMember">
                要导入的成员。
              </param>
      <param name="contractName">
                要用于导入的协定名称。
              </param>
      <param name="requiredTypeIdentity">
                导入所需的类型标识。
              </param>
      <param name="requiredMetadata">
                导入所需元数据。
              </param>
      <param name="cardinality">
                导入的基数。
              </param>
      <param name="isRecomposable">
                <see langword="true" /> 若要指示导入是可重新组合;否则为 <see langword="false" />。
              </param>
      <param name="isPreRequisite">
                <see langword="true" /> 若要指示导入是一项必备条件;否则为 <see langword="false" />。
              </param>
      <param name="requiredCreationPolicy">
                指定导入的创建策略的枚举值之一。
              </param>
      <param name="metadata">
                协定的元数据。
              </param>
      <param name="isExportFactory">
                <see langword="true" /> 若要指示导入表示 <see cref="T:System.ComponentModel.Composition.ExportFactory`1" />; 否则为 <see langword="false" />。
              </param>
      <param name="origin">
                要导入的对象。
              </param>
      <returns>
              从指定的参数创建的导入定义。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateImportDefinition(System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.Boolean,System.ComponentModel.Composition.CreationPolicy,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>
              使用指定的协定名称、 类型标识、 导入和协定的元数据、 基数、 重新组合策略和创建策略为指定的成员创建导入定义。
            </summary>
      <param name="importingMember">
                要导入的成员。
              </param>
      <param name="contractName">
                要用于导入的协定名称。
              </param>
      <param name="requiredTypeIdentity">
                导入所需的类型标识。
              </param>
      <param name="requiredMetadata">
                导入所需元数据。
              </param>
      <param name="cardinality">
                导入的基数。
              </param>
      <param name="isRecomposable">
                <see langword="true" /> 若要指示导入是可重新组合;否则为 <see langword="false" />。
              </param>
      <param name="requiredCreationPolicy">
                指定导入的创建策略的枚举值之一。
              </param>
      <param name="metadata">
                协定的元数据。
              </param>
      <param name="isExportFactory">
                <see langword="true" /> 若要指示导入表示 <see cref="T:System.ComponentModel.Composition.ExportFactory`1" />; 否则为 <see langword="false" />。
              </param>
      <param name="origin">
                要导入的对象。
              </param>
      <returns>
              从指定的参数创建的导入定义。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateImportDefinition(System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.Boolean,System.ComponentModel.Composition.CreationPolicy,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>
              使用指定的协定名称、 类型标识、 导入元数据、 基数、 重新组合策略和创建策略为指定的成员创建导入定义。
            </summary>
      <param name="importingMember">
                要导入的成员。
              </param>
      <param name="contractName">
                要用于导入的协定名称。
              </param>
      <param name="requiredTypeIdentity">
                导入所需的类型标识。
              </param>
      <param name="requiredMetadata">
                导入所需元数据。
              </param>
      <param name="cardinality">
                导入的基数。
              </param>
      <param name="isRecomposable">
                <see langword="true" /> 若要指示导入是可重新组合;否则为 <see langword="false" />。
              </param>
      <param name="requiredCreationPolicy">
                指定导入的创建策略的枚举值之一。
              </param>
      <param name="origin">
                要导入的对象。
              </param>
      <returns>
              从指定的参数创建的导入定义。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateImportDefinition(System.Lazy{System.Reflection.ParameterInfo},System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.ComponentModel.Composition.CreationPolicy,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>
              使用指定的协定名称、 类型标识、 导入和协定的元数据、 基数和创建策略创建导入定义为指定的参数。
            </summary>
      <param name="parameter">
                要导入的参数。
              </param>
      <param name="contractName">
                要用于导入的协定名称。
              </param>
      <param name="requiredTypeIdentity">
                导入所需的类型标识。
              </param>
      <param name="requiredMetadata">
                导入所需元数据。
              </param>
      <param name="cardinality">
                导入的基数。
              </param>
      <param name="requiredCreationPolicy">
                指定导入的创建策略的枚举值之一。
              </param>
      <param name="metadata">
                协定元数据
              </param>
      <param name="isExportFactory">
                <see langword="true" /> 若要指示导入表示 <see cref="T:System.ComponentModel.Composition.ExportFactory`1" />; 否则为 <see langword="false" />。
              </param>
      <param name="origin">
                要导入的对象。
              </param>
      <returns>
              从指定的参数创建的导入定义。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateImportDefinition(System.Lazy{System.Reflection.ParameterInfo},System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.ComponentModel.Composition.CreationPolicy,System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>
              使用指定的协定名称、 类型标识、 导入元数据、 基数和创建策略创建导入定义为指定的参数。
            </summary>
      <param name="parameter">
                要导入的参数。
              </param>
      <param name="contractName">
                要用于导入的协定名称。
              </param>
      <param name="requiredTypeIdentity">
                导入所需的类型标识。
              </param>
      <param name="requiredMetadata">
                导入所需元数据。
              </param>
      <param name="cardinality">
                导入的基数。
              </param>
      <param name="requiredCreationPolicy">
                指定导入的创建策略的枚举值之一。
              </param>
      <param name="origin">
                要导入的对象。
              </param>
      <returns>
              从指定的参数创建的导入定义。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreatePartDefinition(System.Lazy{System.Type},System.Boolean,System.Lazy{System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ImportDefinition}},System.Lazy{System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ExportDefinition}},System.Lazy{System.Collections.Generic.IDictionary{System.String,System.Object}},System.ComponentModel.Composition.Primitives.ICompositionElement)">
      <summary>
              创建具有指定的部件类型、 导入、 导出、 元数据和源部件定义。
            </summary>
      <param name="partType">
                部件的类型。
              </param>
      <param name="isDisposalRequired">
                <see langword="true" /> 如果部件要求可供使用;否则为 <see langword="false" />。
              </param>
      <param name="imports">
                部件的导入的集合。
              </param>
      <param name="exports">
                部件的导出集合。
              </param>
      <param name="metadata">
                部件的元数据。
              </param>
      <param name="origin">
                部件的源。
              </param>
      <returns>
              从指定的参数创建的部件定义。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetExportFactoryProductImportDefinition(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>
              返回作为导出工厂产品导入定义的表示形式。
            </summary>
      <param name="importDefinition">
                导入定义来表示。
              </param>
      <returns>
              导入定义的表示形式。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetExportingMember(System.ComponentModel.Composition.Primitives.ExportDefinition)">
      <summary>
              从指定的导出定义获取导出的成员。
            </summary>
      <param name="exportDefinition">
                要检查的导出定义。
              </param>
      <returns>
              在导出定义中指定的成员。
            </returns>
      <exception cref="T:System.ArgumentException">
                  <paramref name="exportDefinition" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetImportingMember(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>
              从指定的导入定义中获取导入的成员。
            </summary>
      <param name="importDefinition">
                要检查的导入定义。
              </param>
      <returns>
              导入定义中指定的成员。
            </returns>
      <exception cref="T:System.ArgumentException">
                  <paramref name="importDefinition" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetImportingParameter(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>
              从指定的导入定义获取导入的参数。
            </summary>
      <param name="importDefinition">
                要检查的导入定义。
              </param>
      <returns>
              导入定义中指定的参数。
            </returns>
      <exception cref="T:System.ArgumentException">
                  <paramref name="importDefinition" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetPartType(System.ComponentModel.Composition.Primitives.ComposablePartDefinition)">
      <summary>
              从指定的部件定义获取部件的类型。
            </summary>
      <param name="partDefinition">
                要检查的一部分定义。
              </param>
      <returns>
              已定义部件的类型。
            </returns>
      <exception cref="T:System.ArgumentException">
                  <paramref name="partDefinition" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.IsDisposalRequired(System.ComponentModel.Composition.Primitives.ComposablePartDefinition)">
      <summary>
              确定指定的部件是否需要可供使用。
            </summary>
      <param name="partDefinition">
                要检查的部件。
              </param>
      <returns>
              <see langword="true" /> 如果部件要求可供使用;否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  <paramref name="partDefinition" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.IsExportFactoryImportDefinition(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>
              该值指示指定的导入定义是否表示导出工厂 (<see cref="T:System.ComponentModel.Composition.ExportFactory`1" /> 或 <see cref="T:System.ComponentModel.Composition.ExportFactory`2" /> 对象)。
            </summary>
      <param name="importDefinition">
                要检查的导入定义。
              </param>
      <returns>
              <see langword="true" /> 如果指定的导入定义都表示一个导出工厂;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.IsImportingParameter(System.ComponentModel.Composition.Primitives.ImportDefinition)">
      <summary>
              确定是否导入定义表示成员或参数。
            </summary>
      <param name="importDefinition">
                要检查的导入定义。
              </param>
      <returns>
              <see langword="true" /> 如果导入定义表示参数;否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  <paramref name="importDefinition" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.TryMakeGenericPartDefinition(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Collections.Generic.IEnumerable{System.Type},System.ComponentModel.Composition.Primitives.ComposablePartDefinition@)">
      <summary>
              指示是否可以使用提供的参数的常规部分定义进行专用化。
            </summary>
      <param name="partDefinition">
                部件定义中。
              </param>
      <param name="genericParameters">
                要指定的泛型参数的类型的集合。
              </param>
      <param name="specialization">
                此方法返回时，包含的专用的部件定义。
                 该参数未经初始化即被处理。
              </param>
      <returns>
              <see langword="true" /> 如果专用化成功，则否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Lazy`2.#ctor(`1)">
      <summary>
              新实例初始化 <see cref="T:System.Lazy`2" /> 类，具有指定的元数据。
            </summary>
      <param name="metadata">
                与所引用对象关联的元数据。
              </param>
    </member>
    <member name="M:System.Lazy`2.#ctor(`1,System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.Lazy`2" /> 类，具有指定的元数据和线程安全值。
            </summary>
      <param name="metadata">
                与所引用对象关联的元数据。
              </param>
      <param name="isThreadSafe">
                指示是否 <see cref="T:System.Lazy`2" /> 创建的对象将是线程安全。
              </param>
    </member>
    <member name="M:System.Lazy`2.#ctor(`1,System.Threading.LazyThreadSafetyMode)">
      <summary>
              新实例初始化 <see cref="T:System.Lazy`2" /> 用指定的元数据和线程同步模式的类。
            </summary>
      <param name="metadata">
                与所引用对象关联的元数据。
              </param>
      <param name="mode">
                线程同步模式。
              </param>
    </member>
    <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1)">
      <summary>
              新实例初始化 <see cref="T:System.Lazy`2" /> 类，具有使用指定的函数来获取所引用的对象的指定元数据。
            </summary>
      <param name="valueFactory">
                返回所引用的对象的函数。
              </param>
      <param name="metadata">
                与所引用对象关联的元数据。
              </param>
    </member>
    <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1,System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.Lazy`2" /> 使用指定元数据和线程安全值，使用指定的函数来获取所引用的对象的类。
            </summary>
      <param name="valueFactory">
                返回所引用的对象的函数。
              </param>
      <param name="metadata">
                与所引用对象关联的元数据。
              </param>
      <param name="isThreadSafe">
                指示是否 <see cref="T:System.Lazy`2" /> 创建的对象将是线程安全。
              </param>
    </member>
    <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1,System.Threading.LazyThreadSafetyMode)">
      <summary>
              新实例初始化 <see cref="T:System.Lazy`2" /> 使用指定元数据和线程同步模式使用指定的函数来获取所引用的对象的类。
            </summary>
      <param name="valueFactory">
                返回所引用的对象的函数
              </param>
      <param name="metadata">
                与所引用对象关联的元数据。
              </param>
      <param name="mode">
                线程同步模式
              </param>
    </member>
    <member name="P:System.ComponentModel.Composition.ChangeRejectedException.Message">
      <summary>
              获取或设置与组件拒绝相关联的消息。
            </summary>
      <returns>
              与组件拒绝关联的消息。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.CompositionError.Description">
      <summary>
              获取组合错误的说明。
            </summary>
      <returns>
              一条消息，说明 <see cref="T:System.ComponentModel.Composition.CompositionError" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.CompositionError.Element">
      <summary>
              获取是错误的原因的组合元素。
            </summary>
      <returns>
              是的原因的组合元素 <see cref="T:System.ComponentModel.Composition.CompositionError" />。
               默认值为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.CompositionError.Exception">
      <summary>
              获取是组合错误的根本原因的异常。
            </summary>
      <returns>
              原因的异常的根本 <see cref="T:System.ComponentModel.Composition.CompositionError" />。
               默认值为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.CompositionException.Errors">
      <summary>
              获取或设置的集合 <see cref="T:System.ComponentModel.Composition.CompositionError" /> 这些对象描述与关联的错误 <see cref="T:System.ComponentModel.Composition.CompositionException" />。
            </summary>
      <returns>
              一套 <see cref="T:System.ComponentModel.Composition.CompositionError" /> 这些对象描述与关联的错误 <see cref="T:System.ComponentModel.Composition.CompositionException" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.CompositionException.Message">
      <summary>
              获取描述此异常的消息。
            </summary>
      <returns>
               一条消息，说明 <see cref="T:System.ComponentModel.Composition.CompositionException" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.CompositionException.RootCauses">
      <summary>
              获取包含此异常的初始源的集合。
            </summary>
      <returns>
              一个包含此异常的初始源的集合。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ExportAttribute.ContractName">
      <summary>
              获取用于将导出该类型或成员用此特性标记的协定名称。
            </summary>
      <returns>
              使用此特性标记用于导出的类型或成员的协定名称。
               默认值为空字符串 ("")。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ExportAttribute.ContractType">
      <summary>
              获取此属性附加到该成员由导出的协定类型。
            </summary>
      <returns>
              为提供的导出的类型。
               默认值是 <see langword="null" />, ，这意味着，将通过此导出中附加到的成员上查看的类型获取类型。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ExportFactory`2.Metadata">
      <summary>
              获取要附加到所创建部件的元数据。
            </summary>
      <returns>
              将附加到所创建部件的元数据对象。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ExportLifetimeContext`1.Value">
      <summary>
              获取导出的值的 <see cref="T:System.ComponentModel.Composition.ExportFactory`1" /> 对象。
            </summary>
      <returns>
              导出的值。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ExportMetadataAttribute.IsMultiple">
      <summary>
              获取或设置一个值，该值指示该项是否不止一次具有此属性。
            </summary>
      <returns>
              <see langword="true" /> 如果该项目标记为不止一次;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ExportMetadataAttribute.Name">
      <summary>
              获取元数据值的名称。
            </summary>
      <returns>
               一个字符串，包含的元数据值的名称。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ExportMetadataAttribute.Value">
      <summary>
              获取元数据值。
            </summary>
      <returns>
               一个包含元数据值的对象。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.AggregateCatalog.Catalogs">
      <summary>
              获取基础目录的 <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> 对象。
            </summary>
      <returns>
              一套 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> 对象为基础 <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> 对象。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  <see cref="T:System.ComponentModel.Composition.Hosting.AggregateCatalog" /> 对象已释放。
                </exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.AggregateExportProvider.Providers">
      <summary>
              获取包含的提供程序的集合， <see cref="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" /> 对象聚合。
            </summary>
      <returns>
              一套 <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> 对象 <see cref="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" /> 聚合。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  <see cref="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider" /> 对象已释放。
                </exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ApplicationCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#DisplayName">
      <summary>
              获取应用程序目录的显示名称。
            </summary>
      <returns>
              一个字符串，包含的用户可读的显示名称为 <see cref="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" /> 对象。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ApplicationCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#Origin">
      <summary>
              获取应用程序目录所源自的组合元素。
            </summary>
      <returns>
              总是为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.AssemblyCatalog.Assembly">
      <summary>
              在程序集目录中获取其特性化的类型都包含的程序集。
            </summary>
      <returns>
              程序集的特性化 <see cref="T:System.Type" /> 对象包含在 <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.AssemblyCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#DisplayName">
      <summary>
              获取的显示名称 <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> 对象。
            </summary>
      <returns>
              一个字符串，表示的类型和程序集这 <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> 对象。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.AssemblyCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#Origin">
      <summary>
              获取此元素源自的组合元素。
            </summary>
      <returns>
              总是为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.CatalogExportProvider.Catalog">
      <summary>
              获取用于提供导出的目录。
            </summary>
      <returns>
              该目录， <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> 使用来生成 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 已释放。
                </exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.CatalogExportProvider.SourceProvider">
      <summary>
              获取或设置的导出提供程序提供对其他导出的访问。
            </summary>
      <returns>
              提供的导出提供 <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> 访问其他 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象。
               默认值为 <see langword="null" />。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> 已释放。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="value" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  尚未设置此属性。
                
                  - 或 -
                
                  上的方法 <see cref="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider" /> 已经被访问对象。
                </exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs.AddedDefinitions">
      <summary>
              获取一个定义添加到集合 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> 入此更改。
            </summary>
      <returns>
              定义添加到目录的集合。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs.AtomicComposition">
      <summary>
              获取此更改的组合事务。
            </summary>
      <returns>
              此更改组合事务。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs.RemovedDefinitions">
      <summary>
              获取集合中移除的定义 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> 入此更改。
            </summary>
      <returns>
              定义从这一更改在目录中删除的集合。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.SourceProvider">
      <summary>
              获取或设置附加的导出提供程序提供对访问 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象。
            </summary>
      <returns>
              提供了一个提供程序 <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> 访问 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象。
            
              默认值为 <see langword="null" />。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> 已释放。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="value" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  尚未设置此属性。
                
                  - 或 -
                
                  上的方法 <see cref="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider" /> 被访问。
                </exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.CompositionBatch.PartsToAdd">
      <summary>
              获取的集合 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 要添加对象。
            </summary>
      <returns>
              要添加部分的集合。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.CompositionBatch.PartsToRemove">
      <summary>
              获取的集合 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 要移除对象。
            </summary>
      <returns>
              要移除的部分的集合。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Catalog">
      <summary>
              获取 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> 可提供对容器访问 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象。
            </summary>
      <returns>
              提供的目录 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 访问导出从生成 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象。
               默认值为 <see langword="null" />。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象已释放。
                </exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers">
      <summary>
              获取提供的容器访问权限的导出提供程序附加 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> 对象。
            </summary>
      <returns>
              一套 <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> 对象，它提供 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 访问其他 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象。
               默认值为空 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 已释放。
                </exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.Children">
      <summary>
              获取子范围的此目录。
            </summary>
      <returns>
              此目录的子范围的集合。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition.PublicSurface">
      <summary>
              获取对此目录的父作用域可见的部件的集合。
            </summary>
      <returns>
              此目录与父范围可见部分的集合。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.DirectoryCatalog.FullPath">
      <summary>
              获取通过观察到的已翻译的绝对路径 <see cref="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" /> 对象。
            </summary>
      <returns>
              目录遵循翻译后的绝对路径。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.DirectoryCatalog.LoadedFiles">
      <summary>
              获取当前目录中加载的文件的集合。
            </summary>
      <returns>
              在目录中当前加载的文件的集合。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.DirectoryCatalog.Path">
      <summary>
              获取遵循的路径 <see cref="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" /> 对象。
            </summary>
      <returns>
              遵循该目录的路径。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.DirectoryCatalog.SearchPattern">
      <summary>
              获取传入的构造函数的搜索模式 <see cref="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog" /> 对象。
            </summary>
      <returns>
              目录的搜索模式使用查找文件。
               默认值为 *.dll，返回的所有 DLL 文件。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.DirectoryCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#DisplayName">
      <summary>
              获取目录的显示名称。
            </summary>
      <returns>
              包含目录的用户可读的显示名称的字符串。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.DirectoryCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#Origin">
      <summary>
              获取目录所源自的组合元素。
            </summary>
      <returns>
              总是为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.AddedExports">
      <summary>
              获取已添加此更改中的导出。
            </summary>
      <returns>
              已添加的导出集合。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.AtomicComposition">
      <summary>
              如果有的话，请获取此更改的组合事务。
            </summary>
      <returns>
              对与此更改关联的组合事务的引用或 <see langword="null" /> 如果未不使用任何事务。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.ChangedContractNames">
      <summary>
              获取在更改中已更改的协定名称。
            </summary>
      <returns>
              更改后的协定名称的集合。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs.RemovedExports">
      <summary>
              获取在更改已删除的导出。
            </summary>
      <returns>
              已删除的导出集合。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.FilteredCatalog.Complement">
      <summary>
              获取一个目录，其中包含存在于基础目录，但该对象被筛选排除筛选器函数的部分。
            </summary>
      <returns>
              一个包含该目录的补数的目录。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.TypeCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#DisplayName">
      <summary>
              获取类型目录的显示名称。
            </summary>
      <returns>
              包含的用户可读的显示名称的字符串 <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Hosting.TypeCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#Origin">
      <summary>
              获取类型目录所源自的组合元素。
            </summary>
      <returns>
              总是为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportAttribute.AllowDefault">
      <summary>
              获取或设置一个值，该值指示是否属性、 字段或参数将设置为其类型的默认值不存在的容器中导出的协定名称时。
            </summary>
      <returns>
              <see langword="true" /> 如果具有任何导出时将为其类型的默认值设置属性、 字段或参数 <see cref="P:System.ComponentModel.Composition.ImportAttribute.ContractName" /> 中 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />; 否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportAttribute.AllowRecomposition">
      <summary>
              获取或设置一个值，该值指示在容器中使用匹配协定的导出已更改时被重排属性或字段。
            </summary>
      <returns>
              <see langword="true" /> 如果属性或字段允许重新组合时具有匹配导出 <see cref="P:System.ComponentModel.Composition.ImportAttribute.ContractName" /> 添加或从中删除 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />; 否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportAttribute.ContractName">
      <summary>
              获取要导入导出的协定名称。
            </summary>
      <returns>
              要导入导出的协定名称。
               默认值为空字符串("")。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportAttribute.ContractType">
      <summary>
              获取要导入导出的类型。
            </summary>
      <returns>
              要导入导出的类型。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportAttribute.RequiredCreationPolicy">
      <summary>
              获取或设置一个值，该值指示导入程序需要特定 <see cref="T:System.ComponentModel.Composition.CreationPolicy" /> 对用来满足此导入导出。
            </summary>
      <returns>
              以下值之一：
            
              <see cref="F:System.ComponentModel.Composition.CreationPolicy.Any" />, 如果导入程序不需要特定 <see cref="T:System.ComponentModel.Composition.CreationPolicy" />。
               这是默认设置。
            
              <see cref="F:System.ComponentModel.Composition.CreationPolicy.Shared" /> 需要所有已使用的导出将由容器中的所有部件共享。
            
              <see cref="F:System.ComponentModel.Composition.CreationPolicy.NonShared" /> 若要求所有已使用的导出为非共享容器中。
               在这种情况下，每个部分都会收到他们自己的实例。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportAttribute.Source">
      <summary>
              获取或设置一个值，指定可以从中满足此导入的作用域。
            </summary>
      <returns>
              一个值，指定可以从中满足此导入的作用域。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportManyAttribute.AllowRecomposition">
      <summary>
              获取或设置一个值，该值提供匹配的导出协定更改时被重排修饰的属性或字段。
            </summary>
      <returns>
              <see langword="true" /> 如果属性或字段时，可以重新组合提供相同的导出 <see cref="P:System.ComponentModel.Composition.ImportManyAttribute.ContractName" /> 添加或从中删除 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />; 否则为 <see langword="false" />。
            
              默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportManyAttribute.ContractName">
      <summary>
              获取要导入导出的协定名称。
            </summary>
      <returns>
              要导入导出的协定名称。
               默认值为空字符串 ("")。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportManyAttribute.ContractType">
      <summary>
              获取要导入导出的协定类型。
            </summary>
      <returns>
              需要此导入导出的类型。
               默认值是 <see langword="null" />, ，这意味着，将通过此导入附加到的成员上查看的类型获取类型。
               如果类型为 <see cref="T:System.Object" />, ，导入与导出的类型相匹配。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportManyAttribute.RequiredCreationPolicy">
      <summary>
              获取或设置一个值，该值指示导入程序需要特定 <see cref="T:System.ComponentModel.Composition.CreationPolicy" /> 对用来满足此导入导出。
            </summary>
      <returns>
              以下值之一：
            
              <see cref="F:System.ComponentModel.Composition.CreationPolicy.Any" />, 如果导入程序不需要特定 <see cref="T:System.ComponentModel.Composition.CreationPolicy" />。
               这是默认设置。
            
              <see cref="F:System.ComponentModel.Composition.CreationPolicy.Shared" /> 需要所有已使用的导出将由容器中的所有部件共享。
            
              <see cref="F:System.ComponentModel.Composition.CreationPolicy.NonShared" /> 若要求所有已使用的导出为非共享容器中。
               在这种情况下，每个部分都会收到他们自己的实例。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ImportManyAttribute.Source">
      <summary>
              获取或设置一个值，指定可以从中满足此导入的作用域。
            </summary>
      <returns>
              一个值，指定可以从中满足此导入的作用域。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.MetadataViewImplementationAttribute.ImplementationType">
      <summary>
              获取元数据视图的类型。
            </summary>
      <returns>
              元数据视图的类型。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.PartCreationPolicyAttribute.CreationPolicy">
      <summary>
              获取或设置一个值，指示特性化部件的创建策略。
            </summary>
      <returns>
              其中一个 <see cref="P:System.ComponentModel.Composition.PartCreationPolicyAttribute.CreationPolicy" /> 值，该值指示特性化部件的创建策略。
               默认值为 <see cref="F:System.ComponentModel.Composition.CreationPolicy.Any" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.PartMetadataAttribute.Name">
      <summary>
              获取元数据值的名称。
            </summary>
      <returns>
               一个字符串，包含的元数据值的名称。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.PartMetadataAttribute.Value">
      <summary>
              获取元数据值。
            </summary>
      <returns>
               一个包含元数据值的对象。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePart.ExportDefinitions">
      <summary>
              获取一套 <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> 描述由此部件提供的导出的对象的对象。
            </summary>
      <returns>
              一套 <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> 这些对象描述由提供的导出的对象 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" />。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象已释放。
                </exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePart.ImportDefinitions">
      <summary>
              获取一套 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 描述此部件所需的导入的对象的对象。
            </summary>
      <returns>
              一套 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 描述所需的导入的对象的对象 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" />。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象已释放。
                </exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePart.Metadata">
      <summary>
              获取的元数据 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象。
            </summary>
      <returns>
              元数据的 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象。
               默认值为空、 只读、 只 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象已释放。
                </exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Parts">
      <summary>
              获取包含在目录的部件定义。
            </summary>
      <returns>
              <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> 中包含 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" />。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> 对象已释放。
                </exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePartDefinition.ExportDefinitions">
      <summary>
              获取一套 <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> 描述此定义的部件导出的对象的对象 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> 对象。
            </summary>
      <returns>
              一套 <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> 这些对象描述由提供的导出的对象 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 由创建的对象 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePartDefinition.ImportDefinitions">
      <summary>
              获取一套 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 这些对象描述所需的此定义的部件的导入 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> 对象。
            </summary>
      <returns>
              一套 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 这些对象描述所需的导入 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 由创建的对象 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePartDefinition.Metadata">
      <summary>
              获取此集合的元数据的 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> 对象。
            </summary>
      <returns>
              一个包含的元数据集合 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" />。
               默认值为空、 只读、 只 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ComposablePartException.Element">
      <summary>
              获取导致异常的组合元素。
            </summary>
      <returns>
              是的原因的组合元素 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException" />。
               默认值为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.Constraint">
      <summary>
              获取一个表达式，用于定义必须匹配才能满足此导入定义所描述的导入的条件。
            </summary>
      <returns>
              一个表达式，包含 <see cref="T:System.Func`2" /> 对象，用于定义必须匹配的条件 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 要满足 <see cref="T:System.ComponentModel.Composition.Primitives.Export" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredCreationPolicy">
      <summary>
              获取或设置一个值，该值指示导入程序需要特定 <see cref="T:System.ComponentModel.Composition.CreationPolicy" /> 对用来满足此导入导出。
            </summary>
      <returns>
              以下值之一：
            
              <see cref="F:System.ComponentModel.Composition.CreationPolicy.Any" />, 如果导入程序不需要特定 <see cref="T:System.ComponentModel.Composition.CreationPolicy" />。
            
              <see cref="F:System.ComponentModel.Composition.CreationPolicy.Shared" /> 若要求，应由容器中的所有导入程序共享使用的所有导出。
            
              <see cref="F:System.ComponentModel.Composition.CreationPolicy.NonShared" /> 需要使用的所有导出应都为非共享容器中。
               在这种情况下，每个导入程序收到一个单独实例。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredMetadata">
      <summary>
              获取所需的导入定义的导出的元数据名称。
            </summary>
      <returns>
              一套 <see cref="T:System.String" /> 对象，其中包含的元数据名称 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 所需的对象 <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" />。
               默认值为空 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 集合。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition.RequiredTypeIdentity">
      <summary>
              获取与此相匹配的导出的预期的类型 <see cref="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" />。
            </summary>
      <returns>
              一个字符串，通过调用生成 <see cref="M:System.ComponentModel.Composition.AttributedModelServices.GetTypeIdentity(System.Type)" /> 方法在此导入预期的类型。
               如果值为 <see langword="null" />, ，此导入不需要特定的类型。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.Export.Definition">
      <summary>
              获取描述导出满足协定的定义。
            </summary>
      <returns>
              描述协定的定义， <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象满足。
            </returns>
      <exception cref="T:System.NotImplementedException">
                  不由派生类重写此属性。
                </exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.Export.Metadata">
      <summary>
              获取导出的元数据。
            </summary>
      <returns>
              元数据的 <see cref="T:System.ComponentModel.Composition.Primitives.Export" />。
            </returns>
      <exception cref="T:System.NotImplementedException">
                  <see cref="P:System.ComponentModel.Composition.Primitives.Export.Definition" /> 属性不由派生类重写。
                </exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.Export.Value">
      <summary>
              提供此导出中表示的对象。
            </summary>
      <returns>
              此导出中表示的对象。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ExportDefinition.ContractName">
      <summary>
              获取协定名称。
            </summary>
      <returns>
              协定名称的 <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" /> 对象。
            </returns>
      <exception cref="T:System.NotImplementedException">
                  由派生类，不重写属性。
                </exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ExportDefinition.Metadata">
      <summary>
              获取协定元数据。
            </summary>
      <returns>
              元数据的 <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition" />。
               默认值为空、 只读、 只 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ICompositionElement.DisplayName">
      <summary>
              获取组合元素的显示名称。
            </summary>
      <returns>
              用户可读的显示名称 <see cref="T:System.ComponentModel.Composition.Primitives.ICompositionElement" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ICompositionElement.Origin">
      <summary>
              获取当前的组合元素所源自的组合元素。
            </summary>
      <returns>
              从其的组合元素当前 <see cref="T:System.ComponentModel.Composition.Primitives.ICompositionElement" /> 源于，或 <see langword="null" /> 如果 <see cref="T:System.ComponentModel.Composition.Primitives.ICompositionElement" /> 是根组合元素。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality">
      <summary>
              获取所需的导入定义的导出的基数。
            </summary>
      <returns>
              一个枚举值，该值指示的基数 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 所需的对象 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />。
               默认值为 <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Constraint">
      <summary>
              获取一个表达式，用于定义要匹配的导入定义导入必须满足的条件。
            </summary>
      <returns>
              一个表达式，包含 <see cref="T:System.Func`2" /> 定义的条件的对象 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 要匹配必须满足 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />。
            </returns>
      <exception cref="T:System.NotImplementedException">
                  由派生类，不重写属性。
                </exception>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ImportDefinition.ContractName">
      <summary>
              获取该协定的名称。
            </summary>
      <returns>
              协定名称。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ImportDefinition.IsPrerequisite">
      <summary>
              获取一个值，该值指示是否导入定义之前，必须满足部件才能开始生成导出的对象。
            </summary>
      <returns>
              <see langword="true" /> 如果 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 必须得到满足之前 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象才能开始生成导出的对象; 否则为 <see langword="false" />。
               默认值为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ImportDefinition.IsRecomposable">
      <summary>
              获取一个值，该值指示是否可以满足导入定义多次。
            </summary>
      <returns>
              <see langword="true" /> 如果 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 可以满足整个生存期内多次 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象; 否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Metadata">
      <summary>
              获取与此导入相关联的元数据。
            </summary>
      <returns>
              包含与此导入相关联的元数据集合。
            </returns>
    </member>
    <member name="P:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo.MemberType">
      <summary>
              获取表示成员的类型。
            </summary>
      <returns>
              表示成员的类型。
            </returns>
    </member>
    <member name="P:System.Lazy`2.Metadata">
      <summary>
              获取与所引用对象关联的元数据。
            </summary>
      <returns>
              与所引用对象关联的元数据。
            </returns>
    </member>
    <member name="T:System.ComponentModel.Composition.AttributedModelServices">
      <summary>
              包含用于与撰写使用 MEF 特性化编程模型的帮助器方法。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.CatalogReflectionContextAttribute">
      <summary>
              当应用于 <see cref="T:System.Reflection.Assembly" /> 对象，启用 <see cref="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog" /> 对象查找自定义 <see cref="T:System.Reflection.ReflectionContext" /> 对象。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.ChangeRejectedException">
      <summary>
              一个指示部件是否已拒绝在组合期间的异常。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.CompositionContractMismatchException">
      <summary>
              值或元数据的基础导出时引发的异常 <see cref="T:System.Lazy`1" /> 或 <see cref="T:System.Lazy`2" /> 对象不能强制转换为 T 或 TMetadataView, 分别。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.CompositionError">
      <summary>
              表示组合期间发生的错误。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.CompositionException">
      <summary>
              表示在组合期间发生一个或多个错误时引发的异常 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.CreationPolicy">
      <summary>
              指定何时以及如何将实例化的一部分。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Composition.CreationPolicy.Any">
      <summary>
              指定 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 将使用最适合 <see cref="T:System.ComponentModel.Composition.CreationPolicy" /> 给定当前上下文的部分。
               这是默认的 <see cref="T:System.ComponentModel.Composition.CreationPolicy" />。
               默认情况下， <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 将使用 <see cref="F:System.ComponentModel.Composition.CreationPolicy.Shared" />, ，除非 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 或导入程序请求 <see cref="F:System.ComponentModel.Composition.CreationPolicy.NonShared" />。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Composition.CreationPolicy.Shared">
      <summary>
              指定单个共享实例关联的 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 将通过创建 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 和共享的所有请求者。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Composition.CreationPolicy.NonShared">
      <summary>
              指定关联的非共享的新实例 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 将通过创建 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 为每个请求者。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.ExportAttribute">
      <summary>
              指定某个类型、属性、字段或方法提供特定的导出。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.ExportFactory`1">
      <summary>
              一个工厂，它创建提供指定导出的部件的新实例。
            </summary>
      <typeparam name="T">
                导出的类型。
              </typeparam>
    </member>
    <member name="T:System.ComponentModel.Composition.ExportFactory`2">
      <summary>
              一个工厂，它创建提供指定导出的部件的新实例，具有附加元数据。
            </summary>
      <typeparam name="T">
                所创建部件的类型。
              </typeparam>
      <typeparam name="TMetadata">
                所创建部件的元数据的类型。
              </typeparam>
    </member>
    <member name="T:System.ComponentModel.Composition.ExportLifetimeContext`1">
      <summary>
              保存导出的值由创建 <see cref="T:System.ComponentModel.Composition.ExportFactory`1" /> 对象和方法以释放该对象的引用。
            </summary>
      <typeparam name="T">
                导出的值的类型。
              </typeparam>
    </member>
    <member name="T:System.ComponentModel.Composition.ExportMetadataAttribute">
      <summary>
              指定的类型、 属性、 字段或方法，标记有元数据 <see cref="T:System.ComponentModel.Composition.ExportAttribute" />。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.AggregateCatalog">
      <summary>
              一个目录，其中将的元素组合 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> 对象。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.AggregateExportProvider">
      <summary>
              检索的集合所提供的导出 <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> 对象。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.ApplicationCatalog">
      <summary>
              发现动态链接库 (DLL) 中的特性化部分以及应用程序目录和路径中的 EXE 文件。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.AssemblyCatalog">
      <summary>
              发现托管代码程序集中标有属性的代码段。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.AtomicComposition">
      <summary>
              表示事务性组合的单个组合操作。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.CatalogExportProvider">
      <summary>
              从目录中检索导出。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.CatalogExtensions">
      <summary>
              提供了用于构建复合服务的扩展方法。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs">
      <summary>
              为 <see cref="E:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged.Changed" /> 事件提供数据。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.ComposablePartExportProvider">
      <summary>
              从部件中检索导出。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.CompositionBatch">
      <summary>
              表示一组 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 这将添加或从在单个事务组合容器中移除的对象。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.CompositionConstants">
      <summary>
              包含复合系统所使用的静态元数据密钥。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.CompositionContainer">
      <summary>
              管理部件的组合。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.CompositionOptions">
      <summary>
              为导出提供程序定义选项。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Composition.Hosting.CompositionOptions.Default">
      <summary>
              被不定义的任何选项。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Composition.Hosting.CompositionOptions.DisableSilentRejection">
      <summary>
              无提示拒绝被禁用，因此所有拒绝将都导致错误。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Composition.Hosting.CompositionOptions.IsThreadSafe">
      <summary>
              此提供程序应是线程安全的。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Composition.Hosting.CompositionOptions.ExportCompositionService">
      <summary>
              此提供程序导出复合服务。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.CompositionScopeDefinition">
      <summary>
              表示指定了作用域的目录，反映基础目录以及及其子作用域的树中的节点。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.CompositionService">
      <summary>
              提供方法来满足现有部件实例上的导入。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog">
      <summary>
              发现所指定目录中的程序集的特性化部分。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.ExportProvider">
      <summary>
              检索相匹配指定的导出 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> 对象。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs">
      <summary>
              将提供数据供 <see cref="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging" /> 和 <see cref="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged" /> 事件。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.FilteredCatalog">
      <summary>
              表示一个目录后对其应用筛选器函数。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.ImportEngine">
      <summary>
              对容器执行组合。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged">
      <summary>
              提供的通知时 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> 更改。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.ScopingExtensions">
      <summary>
              定义用于指定作用域的静态简便方法。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Hosting.TypeCatalog">
      <summary>
              发现类型集合中标有属性的部分。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.ICompositionService">
      <summary>
              提供方法来满足现有部件实例上的导入。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.ImportAttribute">
      <summary>
              指定应由提供属性、 字段或参数值 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />对象。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
      <summary>
              导入的基数与不兼容的匹配导出的基数时，将引发异常。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.ImportingConstructorAttribute">
      <summary>
              指定在创建部件时应使用哪个构造函数。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.ImportManyAttribute">
      <summary>
              指定属性、 字段或参数应使用的所有匹配的导出中填充 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 对象。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.ImportSource">
      <summary>
              指定值，用于指示 MEF 组合引擎搜索导入的方式。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Composition.ImportSource.Any">
      <summary>
              导入可能满足从当前作用域或任何上级范围。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Composition.ImportSource.Local">
      <summary>
              导入可能满足只能从当前作用域。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Composition.ImportSource.NonLocal">
      <summary>
              导入可能满足只能从祖先作用域。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.InheritedExportAttribute">
      <summary>
              指定一种类型提供特定的导出，并且此类型的子类还将提供该导出。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.IPartImportsSatisfiedNotification">
      <summary>
              通知已满足其导入部件。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.MetadataAttributeAttribute">
      <summary>
              指定自定义特性的属性为应用于同一类型、属性、字段或方法的导出提供元数据。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.MetadataViewImplementationAttribute">
      <summary>
              指定用来实现的元数据视图的类型。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.PartCreationPolicyAttribute">
      <summary>
              指定 <see cref="P:System.ComponentModel.Composition.PartCreationPolicyAttribute.CreationPolicy" /> 部件。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.PartMetadataAttribute">
      <summary>
              指定部件的元数据。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.PartNotDiscoverableAttribute">
      <summary>
              指定此类型的导出不会包含在 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" />。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ComposablePart">
      <summary>
              定义导入对象和生成已导出的对象的可组合部件的抽象基类。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog">
      <summary>
              表示可组合的部件目录收集和返回的抽象基类 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> 对象。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition">
      <summary>
              定义可组合的部件定义可描述并允许创建一个抽象基类 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ComposablePartException">
      <summary>
              在调用方法时，将发生错误时引发的异常 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition">
      <summary>
              表示所需的导入 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象，并且可以指定的协定名称和元数据。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.Export">
      <summary>
              表示一个导出，这是组成延迟创建的导出的对象，并描述该对象的元数据的类型。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ExportDefinition">
      <summary>
              描述协定，特定 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象满足。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ExportedDelegate">
      <summary>
              表示导出的函数 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" />。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ICompositionElement">
      <summary>
              表示参与组合的元素。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ImportCardinality">
      <summary>
              指示的基数 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 所需的对象 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne">
      <summary>
              零个或一个 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象所需的 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne">
      <summary>
              恰好一个 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象所需 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />。
            </summary>
    </member>
    <member name="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrMore">
      <summary>
              零个或多 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 对象所需的 <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.Primitives.ImportDefinition">
      <summary>
              表示所需的导入 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 对象。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo">
      <summary>
              表示一个 <see cref="T:System.Reflection.MemberInfo" /> 对象，该对象在请求前不会加载程序集或创建对象。
            </summary>
    </member>
    <member name="T:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices">
      <summary>
              提供扩展方法来创建和检索基于反射的部件。
            </summary>
    </member>
    <member name="T:System.Lazy`2">
      <summary>
              提供对对象及其关联元数据的延迟间接引用以供 Managed Extensibility Framework 使用。
            </summary>
      <typeparam name="T">
                引用的对象的类型。
              </typeparam>
      <typeparam name="TMetadata">
                元数据的类型。
              </typeparam>
    </member>
  </members>
</doc>