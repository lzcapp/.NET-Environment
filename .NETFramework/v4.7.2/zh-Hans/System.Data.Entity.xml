<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Data.Entity</name>
  </assembly>
  <members>
    <member name="E:System.Data.Objects.DataClasses.RelatedEnd.AssociationChanged">
      <summary>
              对相关端进行更改时发生。
            </summary>
    </member>
    <member name="E:System.Data.Objects.DataClasses.StructuralObject.PropertyChanged">
      <summary>
              在属性值更改时发生。
            </summary>
    </member>
    <member name="E:System.Data.Objects.DataClasses.StructuralObject.PropertyChanging">
      <summary>
              在属性值更改挂起时发生。
            </summary>
    </member>
    <member name="E:System.Data.Objects.ObjectContext.ObjectMaterialized">
      <summary>
              当使用数据源中的数据创建新的实体对象（作为查询或加载操作的一部分）时发生。
            </summary>
    </member>
    <member name="E:System.Data.Objects.ObjectContext.SavingChanges">
      <summary>
              在将更改保存到数据源时发生。
            </summary>
    </member>
    <member name="E:System.Data.Objects.ObjectStateManager.ObjectStateManagerChanged">
      <summary>
              在从状态管理器中添加或移除实体时发生。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbProviderManifest.ConceptualSchemaDefinition">
      <summary>
              要传递给 GetInformation 获取 ConceptualSchemaDefinitionVersion 的值。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbProviderManifest.ConceptualSchemaDefinitionVersion3">
      <summary>
              要传递给 GetInformation 获取 ConceptualSchemaDefinitionVersion3 的值。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbProviderManifest.StoreSchemaDefinition">
      <summary>
              要传递给 GetInformation 获取 StoreSchemaDefinitionVersion 的值。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbProviderManifest.StoreSchemaDefinitionVersion3">
      <summary>
              要传递给 GetInformation 获取 StoreSchemaDefinitionVersion3 的值。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbProviderManifest.StoreSchemaMapping">
      <summary>
              要传递给 GetInformation 获取 StoreSchemaMappingVersion 的值。
            </summary>
    </member>
    <member name="F:System.Data.Common.DbProviderManifest.StoreSchemaMappingVersion3">
      <summary>
              要传递给 GetInformation 获取 StoreSchemaMappingVersion3 的值。
            </summary>
    </member>
    <member name="F:System.Data.EntityClient.EntityProviderFactory.Instance">
      <summary>
              此 <see cref="T:System.Data.EntityClient.EntityProviderFactory" /> 实例。
            </summary>
    </member>
    <member name="F:System.Data.EntityKey.EntityNotValidKey">
      <summary>
              一个简单的 <see cref="T:System.Data.EntityKey" />，标识由失败的 TREAT 运算产生的实体。
            </summary>
    </member>
    <member name="F:System.Data.EntityKey.NoEntitySetKey">
      <summary>
              一个单独的 <see cref="T:System.Data.EntityKey" />，它标识一个只读实体。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.MetadataWorkspace.MaximumEdmVersionSupported">
      <summary>
              表示实体框架运行库支持的 Entity Data Model (EDM) 的最高版本。
            </summary>
    </member>
    <member name="F:System.Data.Objects.DataClasses.StructuralObject.EntityKeyPropertyName">
      <summary>
              此常量名用于跟踪。
            </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbAndExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbAndExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                生成的结果的类型 <paramref name="visitor" />。
              </typeparam>
      <returns>
              一个由 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的属于特定类型的结果值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbApplyExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbApplyExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                生成的结果的类型 <paramref name="visitor" />。
              </typeparam>
      <returns>
              一个由 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的属于特定类型的结果值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbArithmeticExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbArithmeticExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                <paramref name="visitor" /> 生成的结果的类型。
              </typeparam>
      <returns>
              一个由 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的属于特定类型的结果值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbCaseExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbCaseExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                生成的结果的类型 <paramref name="visitor." />
              </typeparam>
      <returns>
              一个由 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的属于特定类型的结果值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbCastExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbCastExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                生成的结果的类型 <paramref name="visitor." />
              </typeparam>
      <returns>
              一个由 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的属于特定类型的结果值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbComparisonExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbComparisonExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                生成的结果的类型 <paramref name="visitor." />
              </typeparam>
      <returns>
              一个由 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的属于特定类型的结果值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbConstantExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbConstantExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                生成的结果的类型 <paramref name="visitor." />
              </typeparam>
      <returns>
              一个由 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的属于特定类型的结果值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbCrossJoinExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbCrossJoinExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                生成的结果的类型 <paramref name="visitor." />
              </typeparam>
      <returns>
              一个由 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的属于特定类型的结果值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbDerefExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbDerefExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                生成的结果的类型 <paramref name="visitor." />
              </typeparam>
      <returns>
              一个由 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的属于特定类型的结果值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbDistinctExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbDistinctExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                生成的结果的类型 <paramref name="visitor." />
              </typeparam>
      <returns>
              一个由 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的属于特定类型的结果值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbElementExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbElementExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                生成的结果的类型 <paramref name="visitor." />
              </typeparam>
      <returns>
              一个由 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的属于特定类型的结果值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbEntityRefExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbEntityRefExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                生成的结果的类型 <paramref name="visitor." />
              </typeparam>
      <returns>
              一个由 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的属于特定类型的结果值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExceptExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExceptExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                生成的结果的类型 <paramref name="visitor." />
              </typeparam>
      <returns>
              一个由 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的属于特定类型的结果值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                由 visitor 生成的结果类型。
              </typeparam>
      <returns>
              <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的结果的类型。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.Equals(System.Object)">
      <summary>
              确定是否指定 <see cref="T:System.Object" /> 是否等同于当前的 DbExpression 实例。
            </summary>
      <param name="obj">
                要与当前比较的对象 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。
              </param>
      <returns>
              <see langword="True" /> 如果指定 <see cref="T:System.Object" /> 等同于当前的 DbExpression 实例; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.FromBinary(System.Byte[])">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，表示指定的二进制值，该值可以是 null
            </summary>
      <param name="value">
                返回的表达式应基于该二进制值。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，表示指定的二进制值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.FromBoolean(System.Nullable{System.Boolean})">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，表示指定 (可以为 null) 的布尔值。
            </summary>
      <param name="value">
                返回的表达式应基于布尔值。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，表示指定的布尔值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.FromByte(System.Nullable{System.Byte})">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，表示指定的 (可以为 null) 字节值。
            </summary>
      <param name="value">
                返回的表达式应基于的字节值。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，表示指定的字节值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.FromDateTime(System.Nullable{System.DateTime})">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，表示指定 (可以为 null) <see cref="T:System.DateTime" /> 值。
            </summary>
      <param name="value">
                返回的表达式应基于的日期时间值。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，表示指定日期时间值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.FromDateTimeOffset(System.Nullable{System.DateTimeOffset})">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，表示指定 (可以为 null) <see cref="T:System.DateTimeOffset" /> 值。
            </summary>
      <param name="value">
                返回的表达式应基于的 DateTimeOffset 值。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，表示指定的 DateTimeOffset 值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.FromDecimal(System.Nullable{System.Decimal})">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，表示指定 (可以为 null) 的小数值。
            </summary>
      <param name="value">
                返回的表达式应基于十进制值。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，表示指定的十进制值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.FromDouble(System.Nullable{System.Double})">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，表示指定的 (可以为 null) 双精度值。
            </summary>
      <param name="value">
                返回的表达式应基于双精度值。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，表示指定的双精度值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.FromGeography(System.Data.Spatial.DbGeography)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，表示指定 <see cref="T:System.Data.Spatial.DbGeography" /> 值，该值可能为 null。
            </summary>
      <param name="value">
                返回的表达式应基于的 DbGeography 值。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，表示指定的 DbGeography 值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.FromGeometry(System.Data.Spatial.DbGeometry)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，表示指定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值，该值可能为 null。
            </summary>
      <param name="value">
                返回的表达式应基于的 DbGeometry 值。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，表示指定的 DbGeometry 值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.FromGuid(System.Nullable{System.Guid})">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，表示指定 (可以为 null) <see cref="T:System.Guid" /> 值。
            </summary>
      <param name="value">
                返回的表达式应基于 Guid 值。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，表示指定的 Guid 值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.FromInt16(System.Nullable{System.Int16})">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，表示指定的 (可以为 null) Int16 值。
            </summary>
      <param name="value">
                返回的表达式应基于的 Int16 值。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，表示指定的 Int16 值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.FromInt32(System.Nullable{System.Int32})">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，表示指定 (可以为 null) 的 Int32 值。
            </summary>
      <param name="value">
                返回的表达式应基于的 Int32 值。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，表示指定的 Int32 值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.FromInt64(System.Nullable{System.Int64})">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，表示指定的 (可以为 null) Int64 值。
            </summary>
      <param name="value">
                返回的表达式应基于 Int64 值。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，表示指定的 Int64 值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.FromSingle(System.Nullable{System.Single})">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，表示指定 (可以为 null) 的单个值。
            </summary>
      <param name="value">
                返回的表达式应基于单个值。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，表示指定的单个值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.FromString(System.String)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，表示指定的字符串值。
            </summary>
      <param name="value">
                返回的表达式应基于字符串值。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，表示指定的字符串值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.GetHashCode">
      <summary>
              可作为类型的哈希函数。
            </summary>
      <returns>
              将当前表达式哈希代码。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Byte[])~System.Data.Common.CommandTrees.DbExpression">
      <summary>
              将 8 位无符号整数到一个数组转换 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />
            </summary>
      <param name="value">
                一个 8 位无符号整数的数组。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，它表示转换后的 8 位无符号整数数组。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Data.Spatial.DbGeography)~System.Data.Common.CommandTrees.DbExpression">
      <summary>
              DbGeography 将对象转换为 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。
            </summary>
      <param name="value">
                DbGeography 对象中。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，表示转换后的 DbGeography 对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Data.Spatial.DbGeometry)~System.Data.Common.CommandTrees.DbExpression">
      <summary>
              DbGeometry 将对象转换为 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。
            </summary>
      <param name="value">
                DbGeometry 对象中。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，表示转换后的 DbGeography 对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Boolean})~System.Data.Common.CommandTrees.DbExpression">
      <summary>
              可以为 null boolean 类型的值将对象转换为 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。
            </summary>
      <param name="value">
                可以为 null 的布尔值对象。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，表示转换后可以为 null 的布尔值对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Byte})~System.Data.Common.CommandTrees.DbExpression">
      <summary>
              将到可以为 null 的 8 位无符号的整数转换 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。
            </summary>
      <param name="value">
                可以为 null 的 8 位无符号的整数中。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，它表示转换后的 8 位无符号的整数。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.DateTime})~System.Data.Common.CommandTrees.DbExpression">
      <summary>
              转换一个可以为 null <see cref="T:System.DateTime" /> 对象传递给 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。
            </summary>
      <param name="value">
                可以为 null <see cref="T:System.DateTime" /> 对象。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 表示 <see cref="T:System.DateTime" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.DateTimeOffset})~System.Data.Common.CommandTrees.DbExpression">
      <summary>
              转换一个可以为 null <see cref="T:System.DateTimeOffset" /> 对象传递给 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。
            </summary>
      <param name="value">
                可以为 null <see cref="T:System.DateTime" /> 对象。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，表示可以为 null <see cref="T:System.DateTime" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Decimal})~System.Data.Common.CommandTrees.DbExpression">
      <summary>
              转换一个可以为 null <see cref="T:System.Decimal" /> 对象传递给 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。
            </summary>
      <param name="value">
                可以为 null <see cref="T:System.Decimal" /> 对象。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，表示可以为 null <see cref="T:System.Decimal" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Double})~System.Data.Common.CommandTrees.DbExpression">
      <summary>
              转换一个可以为 null <see cref="T:System.Double" /> 对象传递给 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。
            </summary>
      <param name="value">
                可以为 null <see cref="T:System.Double" /> 对象。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，表示可以为 null <see cref="T:System.Double" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Guid})~System.Data.Common.CommandTrees.DbExpression">
      <summary>
              转换一个可以为 null <see cref="T:System.Guid" /> 对象传递给 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。
            </summary>
      <param name="value">
                一个可以为 null <see cref="T:System.Guid" /> 对象。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，表示可以为 null <see cref="T:System.Guid" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Int16})~System.Data.Common.CommandTrees.DbExpression">
      <summary>
              将转换为 null 16 位无符号的整数到 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。
            </summary>
      <param name="value">
                可以为 null 的 16 位无符号的整数中。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，表示可以为 null 的 16 位无符号的整数。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Int32})~System.Data.Common.CommandTrees.DbExpression">
      <summary>
              将到可以为 null 的 32 位无符号的整数转换 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。
            </summary>
      <param name="value">
                可以为 null 的 32 位无符号的整数中。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，表示可以为 null 的 32 位无符号的整数。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Int64})~System.Data.Common.CommandTrees.DbExpression">
      <summary>
              将转换为 null 64 位无符号的整数到 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。
            </summary>
      <param name="value">
                可以为 null 的 64 位无符号的整数中。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，表示可以为 null 的 64 位无符号的整数。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Single})~System.Data.Common.CommandTrees.DbExpression">
      <summary>
              将转换为 null 单精度浮点数到 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。
            </summary>
      <param name="value">
                单精度浮点数。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，它表示一个单精度浮点数。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.op_Implicit(System.String)~System.Data.Common.CommandTrees.DbExpression">
      <summary>
              将转换为 Unicode 字符的有序集合 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。
            </summary>
      <param name="value">
                Unicode 字符的有序集合。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 表示 Unicode 字符的有序集合。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbAndExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbAndExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbAndExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbApplyExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbApplyExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbApplyExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbArithmeticExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbArithmeticExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbArithmeticExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbCaseExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbCastExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbCastExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbCastExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbComparisonExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbComparisonExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbComparisonExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbConstantExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbCrossJoinExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbCrossJoinExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbDerefExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbDerefExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbDerefExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbDistinctExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbDistinctExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbDistinctExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbElementExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbElementExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbElementExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbEntityRefExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbEntityRefExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbEntityRefExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbExceptExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbExceptExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbExceptExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              在派生类中重写时，处理无法识别的类型的任何表达式。
            </summary>
      <param name="expression">
                要处理的表达式。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbFilterExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbFilterExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbFilterExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbFunctionExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbGroupByExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbGroupByExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbGroupByExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbIntersectExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbIntersectExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbIntersectExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbIsEmptyExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbIsEmptyExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbIsNullExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbIsNullExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbIsNullExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbIsOfExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbIsOfExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbIsOfExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbJoinExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbLambdaExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbLambdaExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbLambdaExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbLikeExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbLikeExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbLikeExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbLimitExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbLimitExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbLimitExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbNewInstanceExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbNewInstanceExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbNotExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbNotExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbNotExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbNullExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbNullExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbNullExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbOfTypeExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbOfTypeExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbOfTypeExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbOrExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbOrExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbOrExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbParameterReferenceExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbParameterReferenceExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbProjectExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbProjectExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbProjectExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbPropertyExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbQuantifierExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbQuantifierExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbQuantifierExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbRefExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbRefExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbRefExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbRefKeyExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbRefKeyExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbRefKeyExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbScanExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbScanExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbScanExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbSkipExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbSkipExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbSkipExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbSortExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbTreatExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbTreatExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbTreatExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbUnionAllExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbUnionAllExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbUnionAllExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                所访问的 <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" />。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor`1" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbAndExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbAndExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbAndExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbApplyExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbApplyExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbApplyExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbArithmeticExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbArithmeticExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbArithmeticExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbCaseExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbCastExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbCastExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbCastExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbComparisonExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbComparisonExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbComparisonExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbConstantExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbCrossJoinExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbCrossJoinExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbDerefExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbDerefExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbDerefExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbDistinctExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbDistinctExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbDistinctExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbElementExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbElementExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbElementExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbEntityRefExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbEntityRefExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbEntityRefExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbExceptExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbExceptExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbExceptExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              在派生类中重写时，处理无法识别的类型的任何表达式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbFilterExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbFilterExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbFilterExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbFunctionExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbGroupByExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbGroupByExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbGroupByExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbIntersectExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbIntersectExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbIntersectExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbIsEmptyExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbIsEmptyExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbIsNullExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbIsNullExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbIsNullExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbIsOfExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbIsOfExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbIsOfExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbJoinExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbLambdaExpression)">
      <summary>
              当在派生类中重写时实现访问者模式方法为 <see cref="T:System.Data.Common.CommandTrees.DbLambdaExpression" />。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbLambdaExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbLikeExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbLikeExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbLikeExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbLimitExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbLimitExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbLimitExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbNewInstanceExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbNewInstanceExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbNotExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbNotExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbNotExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbNullExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbNullExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbNullExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbOfTypeExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbOfTypeExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbOfTypeExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbOrExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbOrExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbOrExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbParameterReferenceExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbParameterReferenceExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbProjectExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbProjectExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbProjectExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbPropertyExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbQuantifierExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbQuantifierExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbQuantifierExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbRefExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbRefExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbRefExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbRefKeyExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbRefKeyExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbRefKeyExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbScanExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbScanExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbScanExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbSkipExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbSkipExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbSkipExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbSortExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbTreatExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbTreatExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbTreatExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbUnionAllExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbUnionAllExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbUnionAllExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>
              在派生类中重写时，实现 <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" /> 的访问者模式。
            </summary>
      <param name="expression">
                正在访问的 <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" />。
              </param>
      <returns>
              特定类型的结果值。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbFilterExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbFilterExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                <paramref name="visitor" /> 生成的结果的类型。
              </typeparam>
      <returns>
              一个由 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的属于特定类型的结果值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbFunctionExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbFunctionExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                <paramref name="visitor" /> 生成的结果的类型。
              </typeparam>
      <returns>
              一个由 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的属于特定类型的结果值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbGroupByExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbGroupByExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                <paramref name="visitor" /> 生成的结果的类型。
              </typeparam>
      <returns>
              一个由 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的属于特定类型的结果值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbIntersectExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbIntersectExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                <paramref name="visitor" /> 生成的结果的类型。
              </typeparam>
      <returns>
              一个由 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的属于特定类型的结果值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbIsEmptyExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbIsEmptyExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                <paramref name="visitor" /> 生成的结果的类型。
              </typeparam>
      <returns>
              一个由 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的属于特定类型的结果值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbIsNullExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbIsNullExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                <paramref name="visitor" /> 生成的结果的类型。
              </typeparam>
      <returns>
              一个由 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的属于特定类型的结果值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbIsOfExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbIsOfExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                <paramref name="visitor" /> 生成的结果的类型。
              </typeparam>
      <returns>
              一个由 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的属于特定类型的结果值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbJoinExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbJoinExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                <paramref name="visitor" /> 生成的结果的类型。
              </typeparam>
      <returns>
              一个由 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的属于特定类型的结果值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambda.Create(System.Data.Common.CommandTrees.DbExpression,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbVariableReferenceExpression})">
      <summary>
               使用指定的内联 Lambda 函数实现和形参创建 <see cref="T:System.Data.Common.CommandTrees.DbLambda" />。
            </summary>
      <param name="body">
                一个表达式，该表达式定义 Lambda 函数的逻辑
              </param>
      <param name="variables">
                   一个 <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" /> 集合，该集合表示 Lambda 函数的形参。
                    这些变量在主体表达式中使用是有效的。
              </param>
      <returns>
              一个新的 DbLambda，它描述带有指定正文和形参的内联 Lambda 函数
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  变量
                  正文
                </exception>
      <exception cref="T:System.ArgumentException">
                  变量
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambda.Create(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbVariableReferenceExpression[])">
      <summary>
               使用指定的内联 Lambda 函数实现和形参创建 <see cref="T:System.Data.Common.CommandTrees.DbLambda" />。
            </summary>
      <param name="body">
                一个表达式，该表达式定义 Lambda 函数的逻辑
              </param>
      <param name="variables">
                   一个 <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" /> 集合，该集合表示 Lambda 函数的形参。
                    这些变量在主体表达式中使用是有效的。
              </param>
      <returns>
              一个新的 DbLambda，它描述带有指定正文和形参的内联 Lambda 函数
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  变量
                  正文
                </exception>
      <exception cref="T:System.ArgumentException">
                  变量
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>
               创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbLambda" /> 与指定的类型，如中定义的指定函数的参数。
            </summary>
      <param name="argument1Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义的第一个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument2Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义第二个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument3Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义第三个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument4Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第四个参数的 EDM 类型
              </param>
      <param name="argument5Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第五个参数的 EDM 类型
              </param>
      <param name="argument6Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第六个参数的 EDM 类型
              </param>
      <param name="argument7Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第七个参数的 EDM 类型
              </param>
      <param name="argument8Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第八个参数的 EDM 类型
              </param>
      <param name="argument9Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第九个参数的 EDM 类型
              </param>
      <param name="argument10Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第十个参数的 EDM 类型
              </param>
      <param name="argument11Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第 11 个参数的 EDM 类型
              </param>
      <param name="argument12Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第十二个参数的 EDM 类型
              </param>
      <param name="argument13Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第 13 个参数的 EDM 类型
              </param>
      <param name="argument14Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义的第十四个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument15Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义的第十五个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument16Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第 16 个参数的 EDM 类型
              </param>
      <param name="lambdaFunction">
                定义逻辑作为 Lambda 函数的函数 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />
              </param>
      <returns>
              描述具有指定的正文和正式参数的 Lambda 函数进行内联新 DbLambda。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  argument1Type
                  argument2Type
                  argument3Type
                  argument4Type
                  argument5Type
                  argument6Type
                  argument7Type
                  argument8Type
                  argument9Type
                  argument10Type
                  argument11Type
                  argument12Type
                  argument13Type
                  argument14Type
                  argument15Type
                  argument16Type
                  lambdaFunction
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>
               创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbLambda" /> 与指定的类型，如中定义的指定函数的参数。
            </summary>
      <param name="argument1Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义的第一个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument2Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义第二个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument3Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义第三个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument4Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第四个参数的 EDM 类型
              </param>
      <param name="argument5Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第五个参数的 EDM 类型
              </param>
      <param name="argument6Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第六个参数的 EDM 类型
              </param>
      <param name="argument7Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第七个参数的 EDM 类型
              </param>
      <param name="argument8Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第八个参数的 EDM 类型
              </param>
      <param name="argument9Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第九个参数的 EDM 类型
              </param>
      <param name="argument10Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第十个参数的 EDM 类型
              </param>
      <param name="argument11Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第 11 个参数的 EDM 类型
              </param>
      <param name="argument12Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第十二个参数的 EDM 类型
              </param>
      <param name="argument13Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第 13 个参数的 EDM 类型
              </param>
      <param name="argument14Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义的第十四个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument15Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义的第十五个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="lambdaFunction">
                定义逻辑作为 Lambda 函数的函数 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />
              </param>
      <returns>
              描述具有指定的正文和正式参数的 Lambda 函数进行内联新 DbLambda。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  argument1Type
                  argument2Type
                  argument3Type
                  argument4Type
                  argument5Type
                  argument6Type
                  argument7Type
                  argument8Type
                  argument9Type
                  argument10Type
                  argument11Type
                  argument12Type
                  argument13Type
                  argument14Type
                  argument15Type
                  lambdaFunction
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>
               创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbLambda" /> 与指定的类型，如中定义的指定函数的参数。
            </summary>
      <param name="argument1Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义的第一个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument2Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义第二个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument3Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义第三个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument4Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第四个参数的 EDM 类型
              </param>
      <param name="argument5Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第五个参数的 EDM 类型
              </param>
      <param name="argument6Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第六个参数的 EDM 类型
              </param>
      <param name="argument7Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第七个参数的 EDM 类型
              </param>
      <param name="argument8Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第八个参数的 EDM 类型
              </param>
      <param name="argument9Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第九个参数的 EDM 类型
              </param>
      <param name="argument10Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第十个参数的 EDM 类型
              </param>
      <param name="argument11Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第 11 个参数的 EDM 类型
              </param>
      <param name="argument12Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第十二个参数的 EDM 类型
              </param>
      <param name="argument13Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第 13 个参数的 EDM 类型
              </param>
      <param name="argument14Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义的第十四个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="lambdaFunction">
                定义逻辑作为 Lambda 函数的函数 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />
              </param>
      <returns>
              描述具有指定的正文和正式参数的 Lambda 函数进行内联新 DbLambda。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  argument1Type
                  argument2Type
                  argument3Type
                  argument4Type
                  argument5Type
                  argument6Type
                  argument7Type
                  argument8Type
                  argument9Type
                  argument10Type
                  argument11Type
                  argument12Type
                  argument13Type
                  argument14Type
                  lambdaFunction
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>
               创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbLambda" /> 与指定的类型，如中定义的指定函数的参数。
            </summary>
      <param name="argument1Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义的第一个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument2Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义第二个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument3Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义第三个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument4Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第四个参数的 EDM 类型
              </param>
      <param name="argument5Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第五个参数的 EDM 类型
              </param>
      <param name="argument6Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第六个参数的 EDM 类型
              </param>
      <param name="argument7Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第七个参数的 EDM 类型
              </param>
      <param name="argument8Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第八个参数的 EDM 类型
              </param>
      <param name="argument9Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第九个参数的 EDM 类型
              </param>
      <param name="argument10Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第十个参数的 EDM 类型
              </param>
      <param name="argument11Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第 11 个参数的 EDM 类型
              </param>
      <param name="argument12Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第十二个参数的 EDM 类型
              </param>
      <param name="argument13Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第 13 个参数的 EDM 类型
              </param>
      <param name="lambdaFunction">
                定义逻辑作为 Lambda 函数的函数 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />
              </param>
      <returns>
              描述具有指定的正文和正式参数的 Lambda 函数进行内联新 DbLambda。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  argument1Type
                  argument2Type
                  argument3Type
                  argument4Type
                  argument5Type
                  argument6Type
                  argument7Type
                  argument8Type
                  argument9Type
                  argument10Type
                  argument11Type
                  argument12Type
                  argument13Type
                  lambdaFunction
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>
               创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbLambda" /> 与指定的类型，如中定义的指定函数的参数。
            </summary>
      <param name="argument1Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义的第一个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument2Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义第二个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument3Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义第三个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument4Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第四个参数的 EDM 类型
              </param>
      <param name="argument5Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第五个参数的 EDM 类型
              </param>
      <param name="argument6Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第六个参数的 EDM 类型
              </param>
      <param name="argument7Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第七个参数的 EDM 类型
              </param>
      <param name="argument8Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第八个参数的 EDM 类型
              </param>
      <param name="argument9Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第九个参数的 EDM 类型
              </param>
      <param name="argument10Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第十个参数的 EDM 类型
              </param>
      <param name="argument11Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第 11 个参数的 EDM 类型
              </param>
      <param name="argument12Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第十二个参数的 EDM 类型
              </param>
      <param name="lambdaFunction">
                定义逻辑作为 Lambda 函数的函数 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />
              </param>
      <returns>
              描述具有指定的正文和正式参数的 Lambda 函数进行内联新 DbLambda。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  argument1Type
                  argument2Type
                  argument3Type
                  argument4Type
                  argument5Type
                  argument6Type
                  argument7Type
                  argument8Type
                  argument9Type
                  argument10Type
                  argument11Type
                  argument12Type
                  lambdaFunction
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>
               创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbLambda" /> 与指定的类型，如中定义的指定函数的参数。
            </summary>
      <param name="argument1Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义的第一个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument2Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义第二个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument3Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义第三个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument4Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第四个参数的 EDM 类型
              </param>
      <param name="argument5Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第五个参数的 EDM 类型
              </param>
      <param name="argument6Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第六个参数的 EDM 类型
              </param>
      <param name="argument7Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第七个参数的 EDM 类型
              </param>
      <param name="argument8Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第八个参数的 EDM 类型
              </param>
      <param name="argument9Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第九个参数的 EDM 类型
              </param>
      <param name="argument10Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第十个参数的 EDM 类型
              </param>
      <param name="argument11Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第 11 个参数的 EDM 类型
              </param>
      <param name="lambdaFunction">
                定义逻辑作为 Lambda 函数的函数 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />
              </param>
      <returns>
              描述具有指定的正文和正式参数的 Lambda 函数进行内联新 DbLambda。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  argument1Type
                  argument2Type
                  argument3Type
                  argument4Type
                  argument5Type
                  argument6Type
                  argument7Type
                  argument8Type
                  argument9Type
                  argument10Type
                  argument11Type
                  lambdaFunction
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>
               创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbLambda" /> 与指定的类型，如中定义的指定函数的参数。
            </summary>
      <param name="argument1Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义的第一个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument2Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义第二个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument3Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义第三个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument4Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第四个参数的 EDM 类型
              </param>
      <param name="argument5Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第五个参数的 EDM 类型
              </param>
      <param name="argument6Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第六个参数的 EDM 类型
              </param>
      <param name="argument7Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第七个参数的 EDM 类型
              </param>
      <param name="argument8Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第八个参数的 EDM 类型
              </param>
      <param name="argument9Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第九个参数的 EDM 类型
              </param>
      <param name="argument10Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第十个参数的 EDM 类型
              </param>
      <param name="lambdaFunction">
                定义逻辑作为 Lambda 函数的函数 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />
              </param>
      <returns>
              描述具有指定的正文和正式参数的 Lambda 函数进行内联新 DbLambda。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  argument1Type
                  argument2Type
                  argument3Type
                  argument4Type
                  argument5Type
                  argument6Type
                  argument7Type
                  argument8Type
                  argument9Type
                  argument10Type
                  lambdaFunction
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>
               创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbLambda" /> 与指定的类型，如中定义的指定函数的参数。
            </summary>
      <param name="argument1Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义的第一个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument2Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义第二个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument3Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义第三个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument4Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第四个参数的 EDM 类型
              </param>
      <param name="argument5Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第五个参数的 EDM 类型
              </param>
      <param name="argument6Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第六个参数的 EDM 类型
              </param>
      <param name="argument7Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第七个参数的 EDM 类型
              </param>
      <param name="argument8Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第八个参数的 EDM 类型
              </param>
      <param name="argument9Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第九个参数的 EDM 类型
              </param>
      <param name="lambdaFunction">
                定义逻辑作为 Lambda 函数的函数 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />
              </param>
      <returns>
              描述具有指定的正文和正式参数的 Lambda 函数进行内联新 DbLambda。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  argument1Type
                  argument2Type
                  argument3Type
                  argument4Type
                  argument5Type
                  argument6Type
                  argument7Type
                  argument8Type
                  argument9Type
                  lambdaFunction
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>
               创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbLambda" /> 与指定的类型，如中定义的指定函数的参数。
            </summary>
      <param name="argument1Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义的第一个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument2Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义第二个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument3Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义第三个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument4Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第四个参数的 EDM 类型
              </param>
      <param name="argument5Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第五个参数的 EDM 类型
              </param>
      <param name="argument6Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第六个参数的 EDM 类型
              </param>
      <param name="argument7Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第七个参数的 EDM 类型
              </param>
      <param name="argument8Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第八个参数的 EDM 类型
              </param>
      <param name="lambdaFunction">
                定义逻辑作为 Lambda 函数的函数 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />
              </param>
      <returns>
              描述具有指定的正文和正式参数的 Lambda 函数进行内联新 DbLambda。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  argument1Type
                  argument2Type
                  argument3Type
                  argument4Type
                  argument5Type
                  argument6Type
                  argument7Type
                  argument8Type
                  lambdaFunction
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>
               创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbLambda" /> 与指定的类型，如中定义的指定函数的参数。
            </summary>
      <param name="argument1Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义的第一个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument2Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义第二个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument3Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义第三个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument4Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第四个参数的 EDM 类型
              </param>
      <param name="argument5Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第五个参数的 EDM 类型
              </param>
      <param name="argument6Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第六个参数的 EDM 类型
              </param>
      <param name="argument7Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第七个参数的 EDM 类型
              </param>
      <param name="lambdaFunction">
                定义逻辑作为 Lambda 函数的函数 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />
              </param>
      <returns>
              描述具有指定的正文和正式参数的 Lambda 函数进行内联新 DbLambda。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  argument1Type
                  argument2Type
                  argument3Type
                  argument4Type
                  argument5Type
                  argument6Type
                  argument7Type
                  lambdaFunction
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>
               创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbLambda" /> 与指定的类型，如中定义的指定函数的参数。
            </summary>
      <param name="argument1Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义的第一个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument2Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义第二个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument3Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义第三个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument4Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第四个参数的 EDM 类型
              </param>
      <param name="argument5Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第五个参数的 EDM 类型
              </param>
      <param name="argument6Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第六个参数的 EDM 类型
              </param>
      <param name="lambdaFunction">
                定义逻辑作为 Lambda 函数的函数 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />
              </param>
      <returns>
              描述具有指定的正文和正式参数的 Lambda 函数进行内联新 DbLambda。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  argument1Type
                  argument2Type
                  argument3Type
                  argument4Type
                  argument5Type
                  argument6Type
                  lambdaFunction
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>
               创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbLambda" /> 与指定的类型，如中定义的指定函数的参数。
            </summary>
      <param name="argument1Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义的第一个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument2Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义第二个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument3Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义第三个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument4Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第四个参数的 EDM 类型
              </param>
      <param name="argument5Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第五个参数的 EDM 类型
              </param>
      <param name="lambdaFunction">
                定义逻辑作为 Lambda 函数的函数 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />
              </param>
      <returns>
              描述具有指定的正文和正式参数的 Lambda 函数进行内联新 DbLambda。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  argument1Type
                  argument2Type
                  argument3Type
                  argument4Type
                  argument5Type
                  lambdaFunction
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>
               创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbLambda" /> 与指定的类型，如中定义的指定函数的参数。
            </summary>
      <param name="argument1Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义的第一个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument2Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义第二个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument3Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义第三个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument4Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数的第四个参数的 EDM 类型
              </param>
      <param name="lambdaFunction">
                定义逻辑作为 Lambda 函数的函数 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />
              </param>
      <returns>
              描述具有指定的正文和正式参数的 Lambda 函数进行内联新 DbLambda。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  argument1Type
                  argument2Type
                  argument3Type
                  argument4Type
                  lambdaFunction
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>
               创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbLambda" /> 与指定的类型，如中定义的指定函数的参数。
            </summary>
      <param name="argument1Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义的第一个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument2Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义第二个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument3Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义第三个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="lambdaFunction">
                定义逻辑作为 Lambda 函数的函数 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />
              </param>
      <returns>
              描述具有指定的正文和正式参数的 Lambda 函数进行内联新 DbLambda。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  argument1Type
                  argument2Type
                  argument3Type
                  lambdaFunction
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>
               创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbLambda" /> 与指定的类型，如中定义的指定函数的参数。
            </summary>
      <param name="argument1Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义的第一个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="argument2Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义第二个参数的 EDM 类型到 Lambda 函数
              </param>
      <param name="lambdaFunction">
                定义逻辑作为 Lambda 函数的函数 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />
              </param>
      <returns>
              描述具有指定的正文和正式参数的 Lambda 函数进行内联新 DbLambda。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  argument1Type
                  argument2Type
                  lambdaFunction
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambda.Create(System.Data.Metadata.Edm.TypeUsage,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>
               创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbLambda" /> 与指定的类型定义的指定函数的一个参数。
            </summary>
      <param name="argument1Type">
                一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> ，它定义为 Lambda 函数参数的 EDM 类型
              </param>
      <param name="lambdaFunction">
                定义逻辑作为 Lambda 函数的函数 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />
              </param>
      <returns>
              描述具有指定的正文和一个正式参数的 Lambda 函数的内联新 DbLambda。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  argument1Type
                  lambdaFunction
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambdaExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              不生成结果值的表达式访问者访问者模式方法。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 null
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambdaExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型结果值的表达式访问者访问者模式方法。
            </summary>
      <param name="visitor">
                类型化的实例 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 产生的结果值的类型 TResultType。
              </param>
      <typeparam name="TResultType">
                生成的结果的类型 <paramref name="visitor" />
              </typeparam>
      <returns>
              通过表达式访问者生成的结果的类型。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 null
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLikeExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLikeExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                <paramref name="visitor" /> 生成的结果的类型。
              </typeparam>
      <returns>
              一个由 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的属于特定类型的结果值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLimitExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLimitExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                <paramref name="visitor" /> 生成的结果的类型。
              </typeparam>
      <returns>
              一个由 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的属于特定类型的结果值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbNewInstanceExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbNewInstanceExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                <paramref name="visitor" /> 生成的结果的类型。
              </typeparam>
      <returns>
              一个由 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的属于特定类型的结果值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbNotExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbNotExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                <paramref name="visitor" /> 生成的结果的类型。
              </typeparam>
      <returns>
              一个由 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的属于特定类型的结果值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbNullExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbNullExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                <paramref name="visitor" /> 生成的结果的类型。
              </typeparam>
      <returns>
              一个由 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的属于特定类型的结果值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbOfTypeExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbOfTypeExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                <paramref name="visitor" /> 生成的结果的类型。
              </typeparam>
      <returns>
              一个由 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的属于特定类型的结果值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbOrExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbOrExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                <paramref name="visitor" /> 生成的结果的类型。
              </typeparam>
      <returns>
              一个由 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的属于特定类型的结果值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbParameterReferenceExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbParameterReferenceExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                <paramref name="visitor" /> 生成的结果的类型。
              </typeparam>
      <returns>
              一个由 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的属于特定类型的结果值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbProjectExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbProjectExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                <paramref name="visitor" /> 生成的结果的类型。
              </typeparam>
      <returns>
              一个由 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的属于特定类型的结果值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbPropertyExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbPropertyExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                <paramref name="visitor" /> 生成的结果的类型。
              </typeparam>
      <returns>
              一个由 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的属于特定类型的结果值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbPropertyExpression.op_Implicit(System.Data.Common.CommandTrees.DbPropertyExpression)~System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}">
      <summary>
              创建一个新的键/值对，根据此属性的表达式。
            </summary>
      <param name="value">
                此属性表达式。
              </param>
      <returns>
              具有键和值的新键/值对派生自 <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbPropertyExpression.ToKeyValuePair">
      <summary>
              创建一个新的键/值对，根据此属性的表达式。
            </summary>
      <returns>
              具有键和值的新键/值对派生自 <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbQuantifierExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbQuantifierExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                <paramref name="visitor" /> 生成的结果的类型。
              </typeparam>
      <returns>
              一个由 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的属于特定类型的结果值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbRefExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbRefExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                <paramref name="visitor" /> 生成的结果的类型。
              </typeparam>
      <returns>
              一个由 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的属于特定类型的结果值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbRefKeyExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbRefKeyExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                <paramref name="visitor" /> 生成的结果的类型。
              </typeparam>
      <returns>
              一个由 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的属于特定类型的结果值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                <paramref name="visitor" /> 生成的结果的类型。
              </typeparam>
      <returns>
              一个由 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的属于特定类型的结果值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbScanExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbScanExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                <paramref name="visitor" /> 生成的结果的类型。
              </typeparam>
      <returns>
              一个由 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的属于特定类型的结果值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbSkipExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbSkipExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                <paramref name="visitor" /> 生成的结果的类型。
              </typeparam>
      <returns>
              一个由 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的属于特定类型的结果值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbSortExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbSortExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                <paramref name="visitor" /> 生成的结果的类型。
              </typeparam>
      <returns>
              一个由 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的属于特定类型的结果值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbTreatExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbTreatExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                <paramref name="visitor" /> 生成的结果的类型。
              </typeparam>
      <returns>
              一个由 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的属于特定类型的结果值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbUnionAllExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbUnionAllExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                <paramref name="visitor" /> 生成的结果的类型。
              </typeparam>
      <returns>
              一个由 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的属于特定类型的结果值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbVariableReferenceExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>
              为不生成结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbVariableReferenceExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>
              为生成特定类型的结果值的表达式实现访问者模式。
            </summary>
      <param name="visitor">
                生成特定类型结果值的类型化 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 的一个实例。
              </param>
      <typeparam name="TResultType">
                <paramref name="visitor" /> 生成的结果的类型。
              </typeparam>
      <returns>
              一个由 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> 生成的属于特定类型的结果值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="visitor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Common.CommandTrees.DefaultExpressionVisitor" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.OnEnterScope(System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbVariableReferenceExpression})">
      <summary>
              表示当输入表达式访问者与指定的范围变量的作用域时的事件。
            </summary>
      <param name="scopeVariables">
                作用域变量的集合。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.OnExitScope">
      <summary>
              退出表达式访问者的作用域。
            </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.OnExpressionReplaced(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              旧表达式替换为表达式访问者新建一个。
            </summary>
      <param name="oldExpression">
                旧表达式。
              </param>
      <param name="newExpression">
                新的表达式。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.OnVariableRebound(System.Data.Common.CommandTrees.DbVariableReferenceExpression,System.Data.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>
              表示为表达式访问者复苏变量时发生的事件。
            </summary>
      <param name="fromVarRef">
                变量的位置。
              </param>
      <param name="toVarRef">
                它 rebounded 其中的变量的引用。
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbAndExpression)">
      <summary>
              实现逻辑与表达式的访问者模式。
            </summary>
      <param name="expression">
                逻辑与表达式中。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbApplyExpression)">
      <summary>
              实现对指定输入集中的每个元素指定的函数调用的访问者模式。
            </summary>
      <param name="expression">
                已应用的表达式。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbArithmeticExpression)">
      <summary>
              实现算术运算的访问者模式应用于数值参数。
            </summary>
      <param name="expression">
                算术表达式。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbCaseExpression)">
      <summary>
              实现访问者模式的 When、 Then，和 Else 子句。
            </summary>
      <param name="expression">
                Case 表达式。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbCastExpression)">
      <summary>
              实现的单个参数的类型转换为指定类型的访问者模式。
            </summary>
      <param name="expression">
                强制转换表达式中。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbComparisonExpression)">
      <summary>
              实现比较操作的访问者模式应用于两个参数。
            </summary>
      <param name="expression">
                强制转换表达式中。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbConstantExpression)">
      <summary>
              实现不同类型的常量的访问者模式。
            </summary>
      <param name="expression">
                常量表达式。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>
              实现给定的集合参数之间的无条件联接运算的访问者模式。
            </summary>
      <param name="expression">
                联接表达式中。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbDerefExpression)">
      <summary>
              实现基于指定的引用检索实体的表达式的访问者模式。
            </summary>
      <param name="expression">
                DEREF 表达式中。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbDistinctExpression)">
      <summary>
              实现从指定的集参数移除重复元素的访问者模式。
            </summary>
      <param name="expression">
                非重复表达式。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbElementExpression)">
      <summary>
              实现指定的集参数转换为单一实例指定的集参数转换为单一实例的访问者模式。
            </summary>
      <param name="expression">
                元素的表达式。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbEntityRefExpression)">
      <summary>
              实现从基础实体实例提取引用的表达式的访问者模式。
            </summary>
      <param name="expression">
                实体引用表达式。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbExceptExpression)">
      <summary>
              实现左右操作数之间的集减法运算的访问者模式。
            </summary>
      <param name="expression">
                表达式。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              实现表达式类型所需的基本功能的访问者模式。
            </summary>
      <param name="expression">
                表达式。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbFilterExpression)">
      <summary>
              实现用于筛选输入的集的谓词的访问者模式。
            </summary>
      <param name="expression">
                筛选器表达式中。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbFunctionExpression)">
      <summary>
              实现调用的函数的访问者模式。
            </summary>
      <param name="expression">
                函数表达式中。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbGroupByExpression)">
      <summary>
              通过操作来实现一组的访问者模式。
            </summary>
      <param name="expression">
                表达式。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbIntersectExpression)">
      <summary>
              实现左右操作数之间的交集运算的访问者模式。
            </summary>
      <param name="expression">
                表达式。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>
              实现一个应用于单集参数的空集确定的访问者模式。
            </summary>
      <param name="expression">
                表达式。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbIsNullExpression)">
      <summary>
              实现 null 确定的访问者模式应用于单个参数。
            </summary>
      <param name="expression">
                表达式。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbIsOfExpression)">
      <summary>
              实现单个参数针对指定类型的类型比较的访问者模式。
            </summary>
      <param name="expression">
                表达式。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbJoinExpression)">
      <summary>
              实现访问者模式内部、 左外部联接或在指定的联接条件在给定的集合参数之间的完全外部联接运算。
            </summary>
      <param name="expression">
                表达式。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbLambdaExpression)">
      <summary>
              实现 lambda 函数应用于由 DbExpression 对象表示的参数的访问者模式。
            </summary>
      <param name="expression">
                表达式。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbLikeExpression)">
      <summary>
              实现针对指定的模式与可选的转义字符串的字符串比较的访问者模式。
            </summary>
      <param name="expression">
                表达式。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbLimitExpression)">
      <summary>
              为指定的限制值将参数集合中实现的元素数的限制的访问者模式。
            </summary>
      <param name="expression">
                表达式。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>
              实现构造的给定类型，包括集类型和记录类型的新实例的访问者模式。
            </summary>
      <param name="expression">
                表达式。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbNotExpression)">
      <summary>
              实现逻辑的访问者模式不是单个布尔参数。
            </summary>
      <param name="expression">
                表达式。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbNullExpression)">
      <summary>
              实现对类型化 null 字面值的引用的访问者模式。
            </summary>
      <param name="expression">
                表达式。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbOfTypeExpression)">
      <summary>
              实现检索属于给定的集参数中的指定类型的元素的访问者模式。
            </summary>
      <param name="expression">
                表达式。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbOrExpression)">
      <summary>
              实现对逻辑或的两个布尔型参数的访问者模式。
            </summary>
      <param name="expression">
                表达式。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>
              实现在包含此表达式的命令目录树上声明的参数引用的访问者模式。
            </summary>
      <param name="expression">
                表达式。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbProjectExpression)">
      <summary>
              实现给定输入集在指定表达式的投影的访问者模式。
            </summary>
      <param name="expression">
                表达式。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbPropertyExpression)">
      <summary>
              实现用于检索实例属性的访问者模式。
            </summary>
      <param name="expression">
                表达式。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbQuantifierExpression)">
      <summary>
              通过指定输入集中的元素实现的指定类型的限定符操作的访问者模式。
            </summary>
      <param name="expression">
                表达式。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbRefExpression)">
      <summary>
              实现到实体内的特定实例的强类型引用的访问者模式设置。
            </summary>
      <param name="expression">
                表达式。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbRefKeyExpression)">
      <summary>
              实现从基础引用值的密钥值检索的访问者模式。
            </summary>
      <param name="expression">
                表达式。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>
              实现关系导航的访问者模式。
            </summary>
      <param name="expression">
                表达式。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbScanExpression)">
      <summary>
              实现一次扫描的实体集或关系的访问者模式设置，如目标属性中所示。
            </summary>
      <param name="expression">
                表达式。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbSkipExpression)">
      <summary>
              实现 skip 表达式的访问者模式。
            </summary>
      <param name="expression">
                表达式。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbSortExpression)">
      <summary>
              实现可用作排序顺序的一部分的排序键的访问者模式。
            </summary>
      <param name="expression">
                表达式。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbTreatExpression)">
      <summary>
              实现应用于多态参数的类型转换操作的访问者模式。
            </summary>
      <param name="expression">
                表达式。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbUnionAllExpression)">
      <summary>
              实现左右操作数之间的 set 联合运算的访问者模式。
            </summary>
      <param name="expression">
                表达式。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>
              实现对当前处于范围内的变量的引用的访问者模式。
            </summary>
      <param name="expression">
                表达式。
              </param>
      <returns>
              实现访问者。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitAggregate(System.Data.Common.CommandTrees.DbAggregate)">
      <summary>
              实现聚合的访问者模式。
            </summary>
      <param name="aggregate">
                聚合。
              </param>
      <returns>
              实现访问者模式。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitEntitySet(System.Data.Metadata.Edm.EntitySetBase)">
      <summary>
              实现该实体的访问者模式设置。
            </summary>
      <param name="entitySet">
                实体集。
              </param>
      <returns>
              实现访问者模式。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitExpression(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              实现表达式的访问者模式。
            </summary>
      <param name="expression">
                表达式。
              </param>
      <returns>
              实现访问者模式。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionBinding(System.Data.Common.CommandTrees.DbExpressionBinding)">
      <summary>
              实现表达式绑定的访问者模式。
            </summary>
      <param name="binding">
                表达式绑定。
              </param>
      <returns>
              实现访问者模式。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionBindingList(System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbExpressionBinding})">
      <summary>
              实现表达式绑定列表的访问者模式。
            </summary>
      <param name="list">
                表达式绑定列表中。
              </param>
      <returns>
              实现访问者模式。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionList(System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbExpression})">
      <summary>
              实现表达式列表的访问者模式。
            </summary>
      <param name="list">
                表达式列表中。
              </param>
      <returns>
              实现访问者模式。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitFunction(System.Data.Metadata.Edm.EdmFunction)">
      <summary>
              实现该函数的访问者模式。
            </summary>
      <param name="functionMetadata">
                函数的元数据。
              </param>
      <returns>
              实现访问者模式。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitFunctionAggregate(System.Data.Common.CommandTrees.DbFunctionAggregate)">
      <summary>
              实现函数聚合的访问者模式。
            </summary>
      <param name="aggregate">
                聚合。
              </param>
      <returns>
              实现访问者模式。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitGroupAggregate(System.Data.Common.CommandTrees.DbGroupAggregate)">
      <summary>
              实现组聚合的访问者模式。
            </summary>
      <param name="aggregate">
                聚合。
              </param>
      <returns>
              实现访问者模式。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitGroupExpressionBinding(System.Data.Common.CommandTrees.DbGroupExpressionBinding)">
      <summary>
              实现组表达式绑定的访问者模式。
            </summary>
      <param name="binding">
                绑定。
              </param>
      <returns>
              实现访问者模式。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitLambda(System.Data.Common.CommandTrees.DbLambda)">
      <summary>
              实现 Lambda 函数的访问者模式。
            </summary>
      <param name="lambda">
                Lambda 函数中。
              </param>
      <returns>
              实现访问者模式。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitSortClause(System.Data.Common.CommandTrees.DbSortClause)">
      <summary>
              实现的排序子句的访问者模式。
            </summary>
      <param name="clause">
                指定的排序子句。
              </param>
      <returns>
              实现访问者模式。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitSortOrder(System.Collections.Generic.IList{System.Data.Common.CommandTrees.DbSortClause})">
      <summary>
              实现的排序顺序的访问者模式。
            </summary>
      <param name="sortOrder">
                排序顺序。
              </param>
      <returns>
              实现访问者模式。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitType(System.Data.Metadata.Edm.EdmType)">
      <summary>
              实现该类型的访问者模式。
            </summary>
      <param name="type">
                类型。
              </param>
      <returns>
              实现访问者模式。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DefaultExpressionVisitor.VisitTypeUsage(System.Data.Metadata.Edm.TypeUsage)">
      <summary>
              实现类型用法的访问者模式。
            </summary>
      <param name="type">
                类型。
              </param>
      <returns>
              实现访问者模式。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Aggregate(System.Data.Metadata.Edm.EdmFunction,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbFunctionAggregate" />。
            </summary>
      <param name="function">
                定义聚合运算的函数。
              </param>
      <param name="argument">
                应通过该计算的聚合函数的参数。
              </param>
      <returns>
              新的函数聚合对给定的函数和参数的引用。
               函数聚合非重复属性的值都 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="function" /> 或 <paramref name="argument" /> null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="function" /> 不是聚合函数或具有多个参数或结果类型为 <paramref name="argument" /> 集不等同于或不能提升为的参数类型 <paramref name="function" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.AggregateDistinct(System.Data.Metadata.Edm.EdmFunction,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbFunctionAggregate" /> ，应用不同的方式。
            </summary>
      <param name="function">
                定义聚合运算的函数。
              </param>
      <param name="argument">
                应通过该计算的聚合函数的参数。
              </param>
      <returns>
              新的函数聚合对给定的函数和参数的引用。
               函数聚合非重复属性的值都 <see langword="true" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="function" /> 或 <paramref name="argument" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="function" /> 不是聚合函数或具有多个参数或结果类型为 <paramref name="argument" /> 集不等同于或不能提升为的参数类型 <paramref name="function" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>
               创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbQuantifierExpression" /> ，它确定是否为输入集中的所有元素保留给定的谓词。
            </summary>
      <param name="source">
                一个指定输入的集的表达式。
              </param>
      <param name="predicate">
                一个方法，它表示要计算的输入集的每个成员的谓词。
                    此方法必须生成具有提供的谓词的逻辑的布尔值结果类型的表达式。
              </param>
      <returns>
              表示所有运算新 DbQuantifierExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  生成的表达式 <paramref name="predicate" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="source" />  没有为集合结果类型。
                </exception>
      <exception cref="T:System.ArgumentException">
                  生成的表达式 <paramref name="Predicate" />  没有 Boolean 结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbQuantifierExpression" /> ，它确定是否为输入集中的所有元素保留给定的谓词。
            </summary>
      <param name="input">
                一个表达式，该表达式绑定，它指定输入的集。
              </param>
      <param name="predicate">
                表示要计算的输入集的每个成员的谓词的表达式。
              </param>
      <returns>
              表示所有运算新 DbQuantifierExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="input" /> 或 <paramref name="predicate" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="predicate" />  没有 Boolean 结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.And(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbAndExpression" /> ，它执行的逻辑和的左侧和右侧参数。
            </summary>
      <param name="left">
                指定左边的参数的布尔表达式。
              </param>
      <param name="right">
                指定右边的参数的布尔表达式。
              </param>
      <returns>
              使用指定的参数新 DbAndExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="left" /> 或 <paramref name="right" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="left" /> 和 <paramref name="right" />  没有 Boolean 结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，它确定指定的集参数是否非空。
            </summary>
      <param name="source">
                一个指定输入的集的表达式。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Common.CommandTrees.DbNotExpression" /> 应用于新 <see cref="T:System.Data.Common.CommandTrees.DbIsEmptyExpression" /> 使用指定的参数。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="source" /> 没有为集合结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbQuantifierExpression" /> ，它确定是否为输入任何的集中元素保留给定的谓词。
            </summary>
      <param name="source">
                一个指定输入的集的表达式。
              </param>
      <param name="predicate">
                一个方法，它表示要对输入集中的每个成员进行评估的谓词。
                 此方法必须生成具有提供的谓词的逻辑的布尔值结果类型的表达式。
              </param>
      <returns>
              新 DbQuantifierExpression 表示任何操作的说明。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  生成的表达式 <paramref name="predicate" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="source" /> 没有为集合结果类型。
                </exception>
      <exception cref="T:System.ArgumentException">
                  生成的表达式 <paramref name="predicate" /> 没有 Boolean 结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbQuantifierExpression" /> ，它确定是否为输入任何的集中元素保留给定的谓词。
            </summary>
      <param name="input">
                一个表达式，该表达式绑定，它指定输入的集。
              </param>
      <param name="predicate">
                表示要计算的输入集的每个成员的谓词的表达式。
              </param>
      <returns>
              新 DbQuantifierExpression 表示任何操作的说明。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="input" /> 或 <paramref name="predicate" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  生成的表达式 <paramref name="predicate" /> 没有 Boolean 结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(System.Data.Common.CommandTrees.DbAggregate,System.String)">
      <summary>
              作为键/值对对象返回指定的参数。
            </summary>
      <param name="value">
                中的键/值对的值。
              </param>
      <param name="alias">
                中的键/值对的键。
              </param>
      <returns>
              一个键/值对对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(System.Data.Common.CommandTrees.DbExpression,System.String)">
      <summary>
              作为键/值对对象返回指定的参数。
            </summary>
      <param name="value">
                中的键/值对的值。
              </param>
      <param name="alias">
                中的键/值对的键。
              </param>
      <returns>
              一个键/值对对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Bind(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> ，它使用生成的变量名称绑定给定的表达式。
            </summary>
      <param name="input">
                要绑定的表达式。
              </param>
      <returns>
              具有指定的表达式和生成的变量名称的新表达式绑定。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="input" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="input" /> 不具有集合结果。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.BindAs(System.Data.Common.CommandTrees.DbExpression,System.String)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> ，它使用指定的变量名称绑定给定的表达式 
            </summary>
      <param name="input">
                要绑定的表达式。
              </param>
      <param name="varName">
                应使用的绑定中的变量名称。
              </param>
      <returns>
              具有指定的表达式和变量名的新表达式绑定。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="input" /> 或 <paramref name="varName" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="input" /> 不具有集合结果。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Case(System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression},System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression},System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />。
            </summary>
      <param name="whenExpressions">
                提供有关每个用例的条件的表达式列表。
              </param>
      <param name="thenExpressions">
                提供每个用例结果的表达式列表。
              </param>
      <param name="elseExpression">
                一个表达式，定义结果时不分大小写匹配。
              </param>
      <returns>
              使用指定的用例和默认结果新 DbCaseExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="whenExpressions" /> 或 <paramref name="thenExpressions" /> 为 null 或包含空值，或 <paramref name="elseExpression" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="whenExpressions" /> 或 <paramref name="thenExpressions" /> 为空或 <paramref name="whenExpressions" /> 包含具有为非布尔值结果类型或任何常用结果类型的表达式中的所有表达式都存在 <paramref name="thenExpressions" /> 和 <paramref name="elseExpression" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CastTo(System.Data.Common.CommandTrees.DbExpression,System.Data.Metadata.Edm.TypeUsage)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbCastExpression" /> 适用于多态参数强制转换运算。
            </summary>
      <param name="argument">
                强制转换将应用于参数。
              </param>
      <param name="toType">
                指定要强制转换为的类型的类型元数据。
              </param>
      <returns>
              使用指定的参数和目标类型新 DbCastExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="Argument" /> 或 <paramref name="toType" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  指定的强制转换无效。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant(System.Data.Metadata.Edm.TypeUsage,System.Object)">
      <summary>
               创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" /> 的具有给定的常量值的指定基元类型。
            </summary>
      <param name="constantType">
                常量的值的类型。
              </param>
      <param name="value">
                要表示的常量值。
              </param>
      <returns>
              与给定的值的结果类型为新 DbConstantExpression <paramref name="constantType" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="value" /> 或 <paramref name="constantType" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="value" /> 不是有效的常量类型的实例  <paramref name="constantType" /> 不表示基元类型，或 <paramref name="value" /> 属于基元类型不同于用于由 <paramref name="constantType" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant(System.Object)">
      <summary>
               创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" /> 与给定的常量值。
            </summary>
      <param name="value">
                要表示的常量值。
              </param>
      <returns>
              使用给定的值为新 DbConstantExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="value" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="value" /> 不是有效常量类型的实例。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Metadata.Edm.EntitySet,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression})">
      <summary>
               创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbRefExpression" /> ，其编码到基于键值的特定实体的引用。
            </summary>
      <param name="entitySet">
                实体集引用的元素所在。
              </param>
      <param name="keyValues">
                一套 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />s 提供的密钥值。
                 这些表达式必须匹配 （在数量、 类型和顺序） 的被引用的实体类型的键属性。
              </param>
      <returns>
              新 DbRefExpression 引用与给定的实体集的指定键值的元素的说明。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="entitySet" /> 为 null，或 <paramref name="keyValues" /> 为 null 或包含 null 值。
                </exception>
      <exception cref="T:System.ArgumentException">
                  计数 <paramref name="keyValues" /> 通过声明的键成员的计数不匹配 <paramref name="entitySet" />的元素类型或 <paramref name="keyValues" /> 包含具有与对应的键成员的类型不兼容的结果类型的表达式。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Metadata.Edm.EntitySet,System.Data.Common.CommandTrees.DbExpression[])">
      <summary>
               创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbRefExpression" /> ，其编码到基于键值的特定实体的引用。
            </summary>
      <param name="entitySet">
                实体集引用的元素所在。
              </param>
      <param name="keyValues">
                一套 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />s 提供的密钥值。
                 这些表达式必须匹配 （在数量、 类型和顺序） 的被引用的实体类型的键属性。
              </param>
      <returns>
              新 DbRefExpression 引用与给定的实体集的指定键值的元素的说明。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="entitySet" /> 为 null，或 <paramref name="keyValues" /> 为 null 或包含 null 值。
                </exception>
      <exception cref="T:System.ArgumentException">
                  计数 <paramref name="keyValues" /> 通过声明的键成员的计数不匹配 <paramref name="entitySet" />的元素类型或 <paramref name="keyValues" /> 包含具有与对应的键成员的类型不兼容的结果类型的表达式。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Metadata.Edm.EntitySet,System.Data.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression})">
      <summary>
               创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbRefExpression" /> ，其编码到基于键值的给定类型的特定实体的引用。
            </summary>
      <param name="entitySet">
                实体集引用的元素所在。
              </param>
      <param name="entityType">
                特定类型的被引用的实体。
                 这必须是来自同一层次结构的实体集的元素类型的实体类型。
              </param>
      <param name="keyValues">
                一套 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />s 提供的密钥值。
                 这些表达式必须匹配 （在数量、 类型和顺序） 的被引用的实体类型的键属性。
              </param>
      <returns>
              新 DbRefExpression 引用与给定的实体集的指定键值的元素的说明。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="entitySet" /> 或 <paramref name="entityType" /> 为 null，或 <paramref name="keyValues" /> 为 null 或包含 null 值。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="entityType" /> 为不是来自同一类型层次结构 （子类型、 父类型或同一类型） <paramref name="entitySet" />的元素类型。
                </exception>
      <exception cref="T:System.ArgumentException">
                  计数 <paramref name="keyValues" /> 通过声明的键成员的计数不匹配 <paramref name="entitySet" />的元素类型或 <paramref name="keyValues" /> 包含具有与对应的键成员的类型不兼容的结果类型的表达式。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Metadata.Edm.EntitySet,System.Data.Metadata.Edm.EntityType,System.Data.Common.CommandTrees.DbExpression[])">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbRefExpression" /> ，其编码到基于键值的给定类型的特定实体的引用。
            </summary>
      <param name="entitySet">
                实体集引用的元素所在。
              </param>
      <param name="entityType">
                特定类型的被引用的实体。
                 这必须是来自同一层次结构的实体集的元素类型的实体类型。
              </param>
      <param name="keyValues">
                一套 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />s 提供的密钥值。
                 这些表达式必须匹配 （在数量、 类型和顺序） 的被引用的实体类型的键属性。
              </param>
      <returns>
              新 DbRefExpression 引用与给定的实体集的指定键值的元素的说明。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="entitySet" /> 或 <paramref name="entityType" /> 为 null，或 <paramref name="keyValues" /> 为 null 或包含 null 值。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="entityType" /> 为不是来自同一类型层次结构 （子类型、 父类型或同一类型） <paramref name="entitySet" />的元素类型。
                </exception>
      <exception cref="T:System.ArgumentException">
                  计数 <paramref name="keyValues" /> 通过声明的键成员的计数不匹配 <paramref name="entitySet" />的元素类型或 <paramref name="keyValues" /> 包含具有与对应的键成员的类型不兼容的结果类型的表达式。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}})">
      <summary>
               创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbApplyExpression" /> ，可计算给定 <paramref name="apply" /> 表达式对于给定输入的每个元素执行一次设置，生成具有相应的输入行的集合，并将应用的列。
               为其行 <paramref name="apply" /> 的计算结果为一个空集，不会包括。
            </summary>
      <param name="source">
                一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 指定输入的集。
              </param>
      <param name="apply">
                一个方法，指定要对输入集中的每个成员一次计算的逻辑。
              </param>
      <returns>
              使用指定新 DbApplyExpression 输入参数和应用的绑定和一个 <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" /> 的 CrossApply。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> 或 <paramref name="apply" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="source" /> 没有为集合结果类型。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  结果 <paramref name="apply" /> 包含一个名称或为 null 的表达式。
                </exception>
      <exception cref="T:System.ArgumentException">
                  结果 <paramref name="apply" /> 包含一个名称或表达式都不是有效的表达式绑定。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpressionBinding)">
      <summary>
               创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbApplyExpression" /> ，可计算给定 <paramref name="apply" /> 表达式对于给定输入的每个元素执行一次设置，生成具有相应的输入行的集合，并将应用的列。
               为其行 <paramref name="apply" /> 的计算结果为一个空集，不会包括。
            </summary>
      <param name="input">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> 指定输入的集。
              </param>
      <param name="apply">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> ，它指定要对输入集中的每个成员一次计算逻辑。
              </param>
      <returns>
              使用指定新 DbApplyExpression 输入参数和应用的绑定和一个 <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" /> 的 CrossApply。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="input" /> 或 <paramref name="apply" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossJoin(System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpressionBinding})">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbCrossJoinExpression" /> 的无条件联接的输入的表达式绑定的列表由指定的集。
            </summary>
      <param name="inputs">
                指定输入的集的表达式绑定列表。
              </param>
      <returns>
              新 DbCrossJoinExpression，与 <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" /> 的叉积，表示的无条件联接的输入集。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="inputs" /> 为 null 或包含 null 元素。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="inputs" /> 包含少于 2 个表达式绑定。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Deref(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbDerefExpression" /> 检索特定实体给定引用表达式。
            </summary>
      <param name="argument">
                <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 提供的引用。
                 此表达式必须具有引用类型。
              </param>
      <returns>
              新 DbDerefExpression，用于检索指定的实体的说明。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="argument" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="argument" /> 没有引用结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Distinct(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbDistinctExpression" /> ，从给定的集参数中删除重复项。
            </summary>
      <param name="argument">
                一个表达式，定义一组对其执行不同的操作。
              </param>
      <returns>
              新 DbDistinctExpression 表示不同的操作应用于指定的集参数的说明。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="argument" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="argument" /> 没有为集合结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Divide(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbArithmeticExpression" /> 划分左侧的参数右侧的参数。
            </summary>
      <param name="left">
                指定左边的参数的表达式。
              </param>
      <param name="right">
                一个指定右边的参数的表达式。
              </param>
      <returns>
              新 DbArithmeticExpression 表示除法运算。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="left" /> 或 <paramref name="right" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  没有通用数值结果类型之间存在 <paramref name="left" /> 或 <paramref name="right" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Element(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbElementExpression" /> ，将一组转换为单一实例。
            </summary>
      <param name="argument">
                一个指定输入的集的表达式。
              </param>
      <returns>
              表示集参数到单一实例的转换 DbElementExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="argument" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="argument" /> 没有为集合结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Equal(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbComparisonExpression" /> ，它比较是否相等的左侧和右侧的参数。
            </summary>
      <param name="left">
                指定左边的参数的表达式。
              </param>
      <param name="right">
                一个指定右边的参数的表达式。
              </param>
      <returns>
              新 DbComparisonExpression 表示相等比较。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="left" /> 或 <paramref name="right" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  任何通用的相等比较的结果类型之间存在 <paramref name="left" /> 和 <paramref name="right" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Except(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbExceptExpression" /> 用于计算从左侧的集参数的正确的一组参数的减法运算。
            </summary>
      <param name="left">
                定义左边的表达式将参数设置。
              </param>
      <param name="right">
                定义右边的表达式将参数设置。
              </param>
      <returns>
              新 DbExceptExpression 表示右边的参数左边的参数的差别。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="left" /> 或 <paramref name="right" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  没有通用集合结果类型之间存在 <paramref name="left" /> 和 <paramref name="right" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Exists(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，它确定指定的集参数是否非空。
            </summary>
      <param name="argument">
                一个指定输入的集的表达式。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Common.CommandTrees.DbNotExpression" /> 应用于新 <see cref="T:System.Data.Common.CommandTrees.DbIsEmptyExpression" /> 使用指定的参数。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="argument" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="argument" /> 没有为集合结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Filter(System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbFilterExpression" /> 中给定的输入集使用指定的谓词的元素进行筛选。
            </summary>
      <param name="input">
                一个表达式，该表达式绑定，它指定输入的集。
              </param>
      <param name="predicate">
                表示要计算的输入集的每个成员的谓词的表达式。
              </param>
      <returns>
              新 DbFilterExpression 生成筛选的集。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="input" /> 或 <paramref name="predicate" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="predicate" /> 没有 Boolean 结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>
               新建一个 <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" />，它将 FullOuterJoin 用作 <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" />，在指定的联接条件下，将左侧表达式和右侧表达式指定的集联接起来。
            </summary>
      <param name="left">
                用于指定左侧集自变量的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。
              </param>
      <param name="right">
                用于指定右侧集自变量的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。
              </param>
      <param name="joinCondition">
                 表示要作为联接依据的条件的方法。
                 此方法必须生成具有布尔结果类型的表达式，该结果类型提供联接条件的逻辑。
              </param>
      <returns>
              一个新的 DbJoinExpression，带有 FullOuterJoin 的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" />，表示在给定联接条件下应用到左侧和右侧输入集的完全外部联接操作。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="left" />、<paramref name="right" /> 或 <paramref name="joinCondition" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="left" /> 或 <paramref name="right" /> 不具有集合结果类型。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  由 <paramref name="joinCondition" /> 生成的表达式为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  由 <paramref name="joinCondition" /> 生成的表达式不具有布尔结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" /> 联接的左侧和右侧的表达式绑定，按照在指定的联接条件中，使用 FullOuterJoin 作为由指定的集 <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" />。
            </summary>
      <param name="left">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> ，它指定左侧集参数。
              </param>
      <param name="right">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> 指定权限集参数。
              </param>
      <param name="joinCondition">
                指定要在上面联接条件的表达式。
              </param>
      <returns>
              新 DbJoinExpression，与 <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" /> 的 FullOuterJoin，表示应用于给定的联接条件下的左侧和右侧的输入集的完全外部联接操作。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="left" />,  <paramref name="right" /> 或 <paramref name="joinCondition" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  生成的表达式 <paramref name="joinCondition" /> 没有 Boolean 结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetEntityRef(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbEntityRefExpression" /> 检索结构化形式中的指定实体的引用。
            </summary>
      <param name="argument">
                提供实体的表达式。
                 此表达式必须具有实体结果类型。
              </param>
      <returns>
              检索与指定实体的引用新 DbEntityRefExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="argument" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="argument" /> 没有实体结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetRefKey(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbRefKeyExpression" /> 检索结构化形式中的指定引用的密钥值。
            </summary>
      <param name="argument">
                提供引用的表达式。
                 此表达式必须引用具有实体元素类型的类型。
              </param>
      <returns>
              检索指定的引用键值新 DbRefKeyExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="argument" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="argument" /> 没有引用结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThan(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbComparisonExpression" /> ，它确定左边的参数是否大于右侧的参数。
            </summary>
      <param name="left">
                指定左边的参数的表达式。
              </param>
      <param name="right">
                一个指定右边的参数的表达式。
              </param>
      <returns>
              表示大于新 DbComparisonExpression 的比较。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="left" /> 或 <paramref name="right" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  没有通用的可比较顺序的结果类型之间存在 <paramref name="left" /> 和 <paramref name="right" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThanOrEqual(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbComparisonExpression" /> ，它确定左边的参数是否大于或等于右侧的参数。
            </summary>
      <param name="left">
                指定左边的参数的表达式。
              </param>
      <param name="right">
                一个指定右边的参数的表达式。
              </param>
      <returns>
              表示大于或等于比较新 DbComparisonExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="left" /> 或 <paramref name="right" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  没有通用的可比较顺序的结果类型之间存在 <paramref name="left" /> 和 <paramref name="right" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBind(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建新的组表达式绑定，使用生成的变量和组变量名称来绑定给定的表达式。
            </summary>
      <param name="input">
                要绑定的表达式。
              </param>
      <returns>
              具有指定的表达式和生成的变量名称和组变量名称的新组表达式绑定。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="input" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="input" /> 没有为集合结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBindAs(System.Data.Common.CommandTrees.DbExpression,System.String,System.String)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbGroupExpressionBinding" /> ，使用指定的变量名称和组变量名称来绑定给定的表达式。
            </summary>
      <param name="input">
                要绑定的表达式。
              </param>
      <param name="varName">
                应使用的绑定中的变量名称。
              </param>
      <param name="groupVarName">
                应该用于在 group by 表达式中使用新的组表达式绑定时引用相应组中的变量名称。
              </param>
      <returns>
              具有指定的表达式、 变量名称和组变量名称的新组表达式绑定。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="input" />,  <paramref name="varName" /> 或 <paramref name="groupVarName" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="input" /> 没有为集合结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBy(System.Data.Common.CommandTrees.DbGroupExpressionBinding,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbAggregate}})">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbGroupByExpression" /> 的输入集根据指定的组键的元素进行分组，并将应用给定的聚合。
            </summary>
      <param name="input">
                一个 <see cref="T:System.Data.Common.CommandTrees.DbGroupExpressionBinding" /> 指定输入的集。
              </param>
      <param name="keys">
                定义的分组列的字符串表达式对的列表。
              </param>
      <param name="aggregates">
                指定可应用聚合函数的表达式的列表。
              </param>
      <returns>
              使用指定的输入的集、 分组键和聚合新 DbGroupByExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="input" />,  <paramref name="keys" /> 或 <paramref name="aggregates" /> 为 null，  <paramref name="keys" /> 包含 null 的列键或表达式，或 <paramref name="aggregates" /> 包含 null 的聚合列名称或聚合。
                </exception>
      <exception cref="T:System.ArgumentException">
                  同时 <paramref name="keys" /> 和 <paramref name="aggregates" /> 为空，要么是一个无效的或指定了重复的列名称。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>
               创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" /> 联接的左侧和右侧的表达式，按照在指定的联接条件，使用 InnerJoin 作为由指定的集 <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" />。
            </summary>
      <param name="left">
                一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，它指定左侧集参数。
              </param>
      <param name="right">
                一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 指定权限集参数。
              </param>
      <param name="joinCondition">
                表示条件的联接方法。
                 此方法必须生成具有提供的联接条件的逻辑的布尔值结果类型的表达式。
              </param>
      <returns>
              新 DbJoinExpression，与 <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" /> 的 InnerJoin，表示应用于给定的联接条件下的左侧和右侧的输入集的内部联接操作。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="left" />,  <paramref name="right" /> 或 <paramref name="joinCondition" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="left" /> 或 <paramref name="right" /> 不具有集合结果类型。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  生成的表达式 <paramref name="joinCondition" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  生成的表达式 <paramref name="joinCondition" /> 没有 Boolean 结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" /> 联接的左侧和右侧的表达式绑定，按照在指定的联接条件中，使用 InnerJoin 作为由指定的集 <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" />。
            </summary>
      <param name="left">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> ，它指定左侧集参数。
              </param>
      <param name="right">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> 指定权限集参数。
              </param>
      <param name="joinCondition">
                指定要在上面联接条件的表达式。
              </param>
      <returns>
              新 DbJoinExpression，与 <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" /> 的 InnerJoin，表示应用于给定的联接条件下的左侧和右侧的输入集的内部联接操作。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="left" />,  <paramref name="right" /> 或 <paramref name="joinCondition" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="joinCondition" /> 没有 Boolean 结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Intersect(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbIntersectExpression" /> 用于计算的交集左侧和右侧设置参数。
            </summary>
      <param name="left">
                定义左边的表达式将参数设置。
              </param>
      <param name="right">
                定义右边的表达式将参数设置。
              </param>
      <returns>
              新 DbIntersectExpression，它表示的左侧和右侧的参数的交集。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="left" /> 或 <paramref name="right" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  没有通用集合结果类型之间存在 <paramref name="left" /> 或 <paramref name="right" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Common.CommandTrees.DbLambda,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression})">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbLambdaExpression" /> 到给定的参数表示的指定 Lambda 函数的应用程序。
            </summary>
      <param name="lambda">
                一个 <see cref="T:System.Data.Common.CommandTrees.DbLambda" /> 实例，它表示要应用的 Lambda 函数。
              </param>
      <param name="arguments">
                提供的参数的表达式的列表。
              </param>
      <returns>
              新 DbLambdaExpression 表示的 Lambda 函数应用程序。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="lambda" /> 或 <paramref name="arguments" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  计数 <paramref name="arguments" /> 声明的变量数目不相等 <paramref name="lambda" />, ，或 <paramref name="arguments" /> 包含具有结果类型不等同于或不能提升为对应的变量类型的表达式。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Common.CommandTrees.DbLambda,System.Data.Common.CommandTrees.DbExpression[])">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbLambdaExpression" /> 到给定的参数表示的指定 Lambda 函数的应用程序。
            </summary>
      <param name="lambda">
                一个 <see cref="T:System.Data.Common.CommandTrees.DbLambda" /> 实例，它表示要应用的 Lambda 函数。
              </param>
      <param name="arguments">
                提供的参数的表达式。
              </param>
      <returns>
              新 DbLambdaExpression 表示的 Lambda 函数应用程序。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="lambda" /> 或 <paramref name="arguments" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  计数 <paramref name="arguments" /> 声明的变量数目不相等 <paramref name="lambda" />, ，或 <paramref name="arguments" /> 包含具有结果类型不等同于或不能提升为对应的变量类型的表达式。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Metadata.Edm.EdmFunction,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression})">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> 表示通过给定的参数指定的函数的调用。
            </summary>
      <param name="function">
                若要调用的函数的元数据。
              </param>
      <param name="arguments">
                提供给函数的参数的表达式列表。
              </param>
      <returns>
              新 DbFunctionExpression 表示函数调用。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="function" /> 为 null，或 <paramref name="arguments" /> 为 null 或包含 null 值。
                </exception>
      <exception cref="T:System.ArgumentException">
                  计数 <paramref name="arguments" /> 声明的参数数目不相等 <paramref name="function" />, ，或 <paramref name="arguments" /> 包含具有结果类型不等同于或不能提升为相应的函数参数类型的表达式。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Metadata.Edm.EdmFunction,System.Data.Common.CommandTrees.DbExpression[])">
      <summary>
              使用给定参数创建表示指定函数的调用的新 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />。
            </summary>
      <param name="function">
                要调用的函数的元数据。
              </param>
      <param name="arguments">
                提供函数的参数的表达式。
              </param>
      <returns>
              表示函数调用的新 DbFunctionExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="function" /> 为 null，或 <paramref name="arguments" /> 为 null 或包含 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="arguments" /> 的计数与 <paramref name="function" /> 声明的参数数量不相等，或 <paramref name="arguments" /> 包含具有与对应函数参数类型不相等或不能提升的结果类型的表达式。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsEmpty(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbIsEmptyExpression" /> ，它确定指定的集参数是否为空集。
            </summary>
      <param name="argument">
                一个指定输入的集的表达式。
              </param>
      <returns>
              使用指定的参数的新将 DbIsEmptyExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="argument" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="argument" /> 没有为集合结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsNull(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbIsNullExpression" /> ，它确定指定的参数是否为 null。
            </summary>
      <param name="argument">
                指定参数的表达式。
              </param>
      <returns>
              新根据要求，DbIsNullExpression 使用指定的参数。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="argument" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="argument" /> 具有集合结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOf(System.Data.Common.CommandTrees.DbExpression,System.Data.Metadata.Edm.TypeUsage)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbIsOfExpression" /> ，它确定给定的参数是否为指定的类型或子类型。
            </summary>
      <param name="argument">
                一个表达式，指定的实例。
              </param>
      <param name="type">
                指定应与该实例的结果类型进行比较的类型的类型元数据。
              </param>
      <returns>
              使用指定的实例以及类型和 DbExpressionKind IsOf 新 DbIsOfExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="argument" /> 或 <paramref name="type" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="type" /> 不在相同的结果类型的类型层次结构 <paramref name="argument" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOfOnly(System.Data.Common.CommandTrees.DbExpression,System.Data.Metadata.Edm.TypeUsage)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbIsOfExpression" /> 表达式，用于确定给定的参数是否属于指定的类型和仅这种类型 （而不是子类型）。
            </summary>
      <param name="argument">
                一个表达式，指定的实例。
              </param>
      <param name="type">
                指定应与该实例的结果类型进行比较的类型的类型元数据。
              </param>
      <returns>
              使用指定的实例以及类型和 DbExpressionKind IsOfOnly 新 DbIsOfExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="argument" /> 或 <paramref name="type" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="type" /> 不在相同的结果类型的类型层次结构 <paramref name="argument" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>
              新建一个 <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" />，它在指定的内部键和外部键之间达到相等的条件下，将外部表达式和内部表达式指定的集进行联接，将 InnerJoin 用作 <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" />。
            </summary>
      <param name="outer">
                一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，它指定外部集参数。
              </param>
      <param name="inner">
                一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，它指定内部集参数。
              </param>
      <param name="outerKey">
                一个方法，它指定应如何从外部集的元素中派生外部键值。
              </param>
      <param name="innerKey">
                一个方法，它指定应如何从内部集的元素中派生内部键值。
              </param>
      <returns>
              一个新的 DbJoinExpression，带有 InnerJoin 的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" />，这表示在比较外部键值和内部键值是否相等的联接条件下将内部联接运算应用于左输入集和右输入集。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="outer" />、<paramref name="inner" />、<paramref name="outerKey" /> 或 <paramref name="innerKey" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="outer" /> 或 <paramref name="inner" /> 不具有集合结果类型。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  由 <paramref name="outerKey" /> 或 <paramref name="innerKey" /> 生成的表达式为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  无法比较由 <paramref name="outerKey" /> 和 <paramref name="innerKey" /> 生成的表达式是否相等。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join``1(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,``0})">
      <summary>
              创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbProjectExpression" />，它通过由外部和内部表达式指定的集投影指定的选择器，在指定的内部键和外部键之间达到相等的条件下进行联接，将 InnerJoin 用作 <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" />。
            </summary>
      <param name="outer">
                一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，它指定外部集参数。
              </param>
      <param name="inner">
                一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，它指定内部集参数。
              </param>
      <param name="outerKey">
                一个方法，它指定应如何从外部集的元素中派生外部键值。
              </param>
      <param name="innerKey">
                一个方法，它指定应如何从内部集的元素中派生内部键值。
              </param>
      <param name="selector">
                一个方法，它指定应如何从内部和外部集的元素中派生结果集的元素。
                 此方法必须生成与 Join 相兼容的类型的实例，且可将其解析为 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。
                 备注中介绍了有关 <paramref name="TSelector" /> 的兼容性要求。
              </param>
      <typeparam name="TSelector">
                <paramref name="selector" /> 的类型。
              </typeparam>
      <returns>
              新的 DbProjectExpression，它使用指定的选择器作为其投影、新的 DbJoinExpression 作为其输入。
               使用 InnerJoin 的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" /> 来创建输入 DbJoinExpression，这表示在比较外部键值和内部键值是否相等的联接条件下将内部联接运算应用于左输入集和右输入集。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="outer" />、<paramref name="inner" />、<paramref name="outerKey" />、<paramref name="innerKey" /> 或 <paramref name="selector" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="outer" /> 或 <paramref name="inner" /> 不具有集合结果类型。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  由 <paramref name="outerKey" /> 或 <paramref name="innerKey" /> 生成的表达式为 null。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  在转换为 DbExpression 之后，<paramref name="selector" /> 的结果为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  由 <paramref name="outerKey" /> 和 <paramref name="innerKey" /> 生成的表达式无法比较是否相等。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="Selector" /> 的结果与 SelectMany 不兼容。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Lambda(System.Data.Common.CommandTrees.DbExpression,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbVariableReferenceExpression})">
      <summary>
              使用指定的内联 Lambda 函数实现和形参创建 <see cref="T:System.Data.Common.CommandTrees.DbLambda" />。
            </summary>
      <param name="body">
                一个表达式，定义 Lambda 函数的逻辑。
              </param>
      <param name="variables">
                一个 <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" /> 集合，该集合表示 Lambda 函数的形参。
                 这些变量可用于在中使用 <paramref name="body" /> 表达式。
              </param>
      <returns>
              描述具有指定的正文和正式参数的 Lambda 函数进行内联新 DbLambda。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="variables" /> 为 null 或包含空值，或 <paramref name="body" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="variables" /> 包含多个元素具有相同的变量名称。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Lambda(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbVariableReferenceExpression[])">
      <summary>
              使用指定的内联 Lambda 函数实现和形参创建 <see cref="T:System.Data.Common.CommandTrees.DbLambda" />。
            </summary>
      <param name="body">
                一个表达式，定义 Lambda 函数的逻辑。
              </param>
      <param name="variables">
                一个 <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" /> 集合，该集合表示 Lambda 函数的形参。
                 这些变量可用于在中使用 <paramref name="body" /> 表达式。
              </param>
      <returns>
              描述具有指定的正文和正式参数的 Lambda 函数进行内联新 DbLambda。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="variables" /> 为 null 或包含空值，或 <paramref name="body" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="variables" /> 包含多个元素具有相同的变量名称。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" /> 联接的左侧和右侧的表达式，按照在指定的联接条件，使用为 LeftOuterJoin 由指定的集 <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" />。
            </summary>
      <param name="left">
                一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，它指定左侧集参数。
              </param>
      <param name="right">
                一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 指定权限集参数。
              </param>
      <param name="joinCondition">
                表示条件的联接方法。
                 此方法必须生成具有提供的联接条件的逻辑的布尔值结果类型的表达式。
              </param>
      <returns>
              新 DbJoinExpression，与 <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" /> 的 LeftOuterJoin，它表示应用于给定的联接条件下的左侧和右侧的输入集左外部联接操作。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="left" />,  <paramref name="right" /> 或 <paramref name="joinCondition" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="left" /> 或 <paramref name="right" /> 不具有集合结果类型。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  生成的表达式 <paramref name="joinCondition" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  生成的表达式 <paramref name="joinCondition" /> 没有 Boolean 结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" /> 联接的左侧和右侧的表达式绑定，按照在指定的联接条件中，使用为 LeftOuterJoin 由指定的集 <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" />。
            </summary>
      <param name="left">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> ，它指定左侧集参数。
              </param>
      <param name="right">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> 指定权限集参数。
              </param>
      <param name="joinCondition">
                指定要在上面联接条件的表达式。
              </param>
      <returns>
              新 DbJoinExpression，与 <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" /> 的 LeftOuterJoin，它表示应用于给定的联接条件下的左侧和右侧的输入集左外部联接操作。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="left" />,  <paramref name="right" /> 或 <paramref name="joinCondition" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="joinCondition" /> 没有 Boolean 结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThan(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbComparisonExpression" /> ，它确定左边的参数是否小于右侧的参数。
            </summary>
      <param name="left">
                指定左边的参数的表达式。
              </param>
      <param name="right">
                一个指定右边的参数的表达式。
              </param>
      <returns>
              表示小于新 DbComparisonExpression 的比较。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="left" /> 或 <paramref name="right" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  没有通用的可比较顺序的结果类型之间存在 <paramref name="left" /> 和 <paramref name="right" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThanOrEqual(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbComparisonExpression" /> ，它确定左边的参数是否小于或等于右侧的参数。
            </summary>
      <param name="left">
                指定左边的参数的表达式。
              </param>
      <param name="right">
                一个指定右边的参数的表达式。
              </param>
      <returns>
              表示小于比-或-等于比较新 DbComparisonExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="left" /> 或 <paramref name="right" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  为这两个相等的和可比较顺序的任何通用结果类型之间存在 <paramref name="left" /> 和 <paramref name="right" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbLikeExpression" /> ，它比较指定的输入的字符串与给定的模式。
            </summary>
      <param name="argument">
                指定输入的字符串的表达式。
              </param>
      <param name="pattern">
                指定的模式字符串的表达式。
              </param>
      <returns>
              使用指定的输入、 模式和 null 转义新 DbLikeExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="Argument" /> 或 <paramref name="pattern" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="Argument" /> 或 <paramref name="pattern" /> 不具有字符串结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbLikeExpression" /> ，它比较与给定的模式使用可选的转义指定的输入的字符串。
            </summary>
      <param name="argument">
                指定输入的字符串的表达式。
              </param>
      <param name="pattern">
                指定的模式字符串的表达式。
              </param>
      <param name="escape">
                指定转义字符串的可选表达式。
              </param>
      <returns>
              使用指定的输入、 模式和转义新 DbLikeExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="argument" />,   <paramref name="pattern" /> 或 <paramref name="escape" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="argument" />,   <paramref name="pattern" /> 或 <paramref name="escape" /> 不具有字符串结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Limit(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbLimitExpression" /> 限制为指定计数限制值的参数集合中的元素数。
               在输出中不包括绑定的结果。
            </summary>
      <param name="argument">
                一个指定输入集合的表达式。
              </param>
      <param name="count">
                指定限制值的表达式。
              </param>
      <returns>
              新 DbLimitExpression 与指定的参数和值计数限制不包括绑定结果。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="argument" /> 或 <paramref name="count" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="argument" /> 不具有集合结果类型，或 <paramref name="count" /> 没有等同于或不能提升为 64 位整数类型的结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Minus(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbArithmeticExpression" /> 减去从左侧的参数在右边的参数。
            </summary>
      <param name="left">
                指定左边的参数的表达式。
              </param>
      <param name="right">
                一个指定右边的参数的表达式。
              </param>
      <returns>
              新 DbArithmeticExpression 表示减法运算。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="left" /> 或 <paramref name="right" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  没有通用数值结果类型之间存在 <paramref name="left" /> 和 <paramref name="right" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Modulo(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbArithmeticExpression" /> 用于计算左侧除以右侧的参数的参数的其余部分。
            </summary>
      <param name="left">
                指定左边的参数的表达式。
              </param>
      <param name="right">
                一个指定右边的参数的表达式。
              </param>
      <returns>
              一个新 DbArithmeticExpression 表示取模运算。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="left" /> 或 <paramref name="right" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  没有通用数值结果类型之间存在 <paramref name="left" /> 和 <paramref name="right" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Multiply(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbArithmeticExpression" /> 乘以左侧的参数右侧的参数。
            </summary>
      <param name="left">
                指定左边的参数的表达式。
              </param>
      <param name="right">
                一个指定右边的参数的表达式。
              </param>
      <returns>
              新 DbArithmeticExpression 表示乘法运算。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="left" /> 或 <paramref name="right" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  没有通用数值结果类型之间存在 <paramref name="left" /> 和 <paramref name="right" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(System.Data.Common.CommandTrees.DbExpression,System.Data.Metadata.Edm.RelationshipEndMember,System.Data.Metadata.Edm.RelationshipEndMember)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression" /> 表示组合或关联关系的导航。
            </summary>
      <param name="navigateFrom">
                一个表达式，指定应从其导航的实例。
              </param>
      <param name="fromEnd">
                表示应从其导航的关系端的属性的元数据。
              </param>
      <param name="toEnd">
                表示向其应开始导航的关系端的属性的元数据。
              </param>
      <returns>
              表示指定的导航新 DbRelationshipNavigationExpression from 和 to 指定的关系类型从指定的导航源实例关系两端。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="fromEnd" />,  <paramref name="toEnd" /> 或 <paramref name="navigateFrom" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="fromEnd" /> 和 <paramref name="toEnd" /> 不由同一关系类型，声明或 <paramref name="navigateFrom" /> 与的属性类型不兼容的结果类型 <paramref name="fromEnd" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(System.Data.Metadata.Edm.RelationshipType,System.String,System.String,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression" /> 表示组合或关联关系的导航。
            </summary>
      <param name="type">
                表示关系的关系类型的元数据。
              </param>
      <param name="fromEndName">
                关系类型，表示应从其导航的关系端的属性的名称。
              </param>
      <param name="toEndName">
                表示应会发生导航的关系一端的关系类型的属性的名称。
              </param>
      <param name="navigateFrom">
                表达式指定的实例应从哪些 naviagtion。
              </param>
      <returns>
              表示指定的导航新 DbRelationshipNavigationExpression from 和 to 指定的关系类型从指定的导航源实例关系两端。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="type" />,  <paramref name="fromEndName" />,  ，<paramref name="toEndName" /> 或 <paramref name="navigateFrom" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="type" /> 与此命令目录树的元数据工作区都不关联或 <paramref name="navigateFrom" /> 程序与不同的命令目录树，或 <paramref name="type" /> 未声明具有名称的关系端属性 <paramref name="toEndName" /> 或 <paramref name="fromEndName" />, ，或 <paramref name="navigateFrom" /> 与同名的关系 end 属性的属性类型不兼容的结果类型 <paramref name="fromEndName" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Negate(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbArithmeticExpression" /> ，对参数的值求反。
            </summary>
      <param name="argument">
                指定参数的表达式。
              </param>
      <returns>
              新 DbArithmeticExpression 表示求反运算。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="argument" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  为不存在任何数值结果类型 <paramref name="argument" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(System.Data.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression})">
      <summary>
               创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbNewInstanceExpression" />。
               如果类型参数是集合类型，其参数指定集合的元素。
               否则参数用作属性或列中的新实例的值。
            </summary>
      <param name="instanceType">
                新的实例的类型。
              </param>
      <param name="arguments">
                指定的新实例，根据实例的类型进行解释的值的表达式。
              </param>
      <returns>
              使用指定的类型和参数的新 DbNewInstanceExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="instanceType" /> 或 <paramref name="arguments" /> 为 null，或 <paramref name="arguments" /> 包含 null 值。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="arguments" /> 为空，或者所包含的结果类型的表达式不匹配的要求 <paramref name="instanceType" />  （如备注部分中所述）。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(System.Data.Metadata.Edm.TypeUsage,System.Data.Common.CommandTrees.DbExpression[])">
      <summary>
              创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbNewInstanceExpression" />。
               如果类型参数是集合类型，其参数指定集合的元素。
               否则参数用作属性或列中的新实例的值。
            </summary>
      <param name="instanceType">
                新的实例的类型。
              </param>
      <param name="arguments">
                指定的新实例，根据实例的类型进行解释的值的表达式。
              </param>
      <returns>
              使用指定的类型和参数的新 DbNewInstanceExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="instanceType" /> 或 <paramref name="arguments" /> 为 null，或 <paramref name="arguments" /> 包含 null 值。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="arguments" /> 为空，或者所包含的结果类型的表达式不匹配的要求 <paramref name="instanceType" />  （如备注部分中所述）。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewCollection(System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression})">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbNewInstanceExpression" /> 构造包含指定的元素的集合。
               该集合的类型取决于元素的公共类型。
               如果不存在任何通用元素类型是引发异常。
            </summary>
      <param name="elements">
                提供该集合的元素的表达式列表。
              </param>
      <returns>
              使用指定的集合类型和参数的新 DbNewInstanceExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="elements" /> 为 null，或包含 null 值。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="elements" /> 为空或包含为其存在任何常见结果类型的表达式。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewCollection(System.Data.Common.CommandTrees.DbExpression[])">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbNewInstanceExpression" /> 构造包含指定的元素的集合。
               该集合的类型取决于元素的公共类型。
               如果不存在任何通用元素类型是引发异常。
            </summary>
      <param name="elements">
                提供该集合的元素的表达式列表。
              </param>
      <returns>
              使用指定的集合类型和参数的新 DbNewInstanceExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="elements" /> 为 null，或包含 null 值...
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="elements" /> 为空或包含为其存在任何常见结果类型的表达式。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewEmptyCollection(System.Data.Metadata.Edm.TypeUsage)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbNewInstanceExpression" /> 构造指定的集合类型的空集合。
            </summary>
      <param name="collectionType">
                要创建的集合类型元数据
              </param>
      <returns>
              使用指定的集合类型和一个空新 DbNewInstanceExpression <paramref name="Arguments" /> 列表。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="collectionType" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="collectionType" /> 不是集合类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewRow(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}})">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbNewInstanceExpression" /> 来产生行与指定的命名列和指定作为表达式的给定的值。
            </summary>
      <param name="columnValues">
                定义的结构和行中的值的字符串 DbExpression 键 / 值对的列表。
              </param>
      <returns>
              表示行的构造新 DbNewInstanceExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="columnValues" /> 为 null 或包含的元素具有为 null 的列名称或表达式。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="columnValues" /> 为空，或者包含一个重复或无效的列名称。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Not(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbNotExpression" /> 执行给定的参数的逻辑求反结果。
            </summary>
      <param name="argument">
                指定参数的布尔表达式。
              </param>
      <returns>
              使用指定的参数新 DbNotExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="argument" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="argument" /> 没有 Boolean 结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NotEqual(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbComparisonExpression" /> ，它比较是否不相等的左侧和右侧的参数。
            </summary>
      <param name="left">
                指定左边的参数的表达式。
              </param>
      <param name="right">
                一个指定右边的参数的表达式。
              </param>
      <returns>
              新类型，表示不相等比较 DbComparisonExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="left" /> 或 <paramref name="right" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  任何通用的相等比较的结果类型之间存在 <paramref name="left" /> 和 <paramref name="right" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Null(System.Data.Metadata.Edm.TypeUsage)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbNullExpression" />, ，它表示类型化的 null 值。
            </summary>
      <param name="nullType">
                Null 值的类型。
              </param>
      <returns>
              Dbnullexpression 类型的实例。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="nullType" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfType(System.Data.Common.CommandTrees.DbExpression,System.Data.Metadata.Edm.TypeUsage)">
      <summary>
               创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbOfTypeExpression" /> 生成包括给定的输入元素的一组设置属于指定的类型。
            </summary>
      <param name="argument">
                一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 指定输入的集。
              </param>
      <param name="type">
                键入输入集中的元素必须具有要包括在结果集中的类型元数据。
              </param>
      <returns>
              使用指定的集参数和类型以及的 ExpressionKind 新 DbOfTypeExpression <see cref="F:System.Data.Common.CommandTrees.DbExpressionKind.OfType" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="argument" /> 或 <paramref name="type" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="argument" /> 不具有集合结果类型，或 <paramref name="type" /> 不是类型的集合结果类型的元素类型相同的类型层次结构中 <paramref name="argument" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfTypeOnly(System.Data.Common.CommandTrees.DbExpression,System.Data.Metadata.Edm.TypeUsage)">
      <summary>
               创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbOfTypeExpression" /> 生成包括给定的输入元素的一组设置属于指定的类型。
            </summary>
      <param name="argument">
                <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 指定输入的集。
              </param>
      <param name="type">
                类型的类型输入集中的元素必须完全匹配要包括在结果集中的元数据。
              </param>
      <returns>
              使用指定的集参数和类型以及的 ExpressionKind 新 DbOfTypeExpression <see cref="F:System.Data.Common.CommandTrees.DbExpressionKind.OfTypeOnly" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="argument" /> 或 <paramref name="type" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="argument" /> 不具有集合结果类型，或 <paramref name="type" /> 不是类型的集合结果类型的元素类型相同的类型层次结构中 <paramref name="argument" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Or(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbOrExpression" /> 执行逻辑或的左侧和右侧参数。
            </summary>
      <param name="left">
                指定左边的参数的布尔表达式。
              </param>
      <param name="right">
                指定右边的参数的布尔表达式。
              </param>
      <returns>
              使用指定的参数新 DbOrExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="left" /> 或 <paramref name="right" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="left" /> 或 <paramref name="right" /> 没有 Boolean 结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" /> ，对给定的输入集的指定的排序键，使用升序排序顺序和默认排序规则进行排序。
            </summary>
      <param name="source">
                一个指定输入的集的表达式。
              </param>
      <param name="sortKey">
                指定如何从给定输入集中的成员的排序键表达式的一种方法。
                 此方法必须生成具有提供排序顺序比较的结果类型的表达式键定义。
              </param>
      <returns>
              新 DbSortExpression 表示的 order by 操作的说明。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> 或 <paramref name="sortKey" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  生成的表达式 <paramref name="sortKey" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="source" /> 没有为集合结果类型。
                </exception>
      <exception cref="T:System.ArgumentException">
                  生成的表达式 <paramref name="sortKey" /> 不具有可比较顺序的结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.String)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" /> ，对给定的输入集的指定的排序键，使用升序排序顺序和指定的排序规则进行排序。
            </summary>
      <param name="source">
                一个指定输入的集的表达式。
              </param>
      <param name="sortKey">
                指定如何从给定输入集中的成员的排序键表达式的一种方法。
                 此方法必须生成具有提供排序顺序比较的结果类型的表达式键定义。
              </param>
      <param name="collation">
                要排序所依据的排序规则。
              </param>
      <returns>
              新 DbSortExpression 表示的 order by 操作的说明。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" />,  <paramref name="sortKey" /> 或 <paramref name="collation" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  生成的表达式 <paramref name="sortKey" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="source" /> 没有为集合结果类型。
                </exception>
      <exception cref="T:System.ArgumentException">
                  生成的表达式 <paramref name="sortKey" />  不具有可比较顺序的字符串结果类型。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="collation" /> 为空或只包含空白字符。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" /> ，对给定的输入集的指定的排序键，使用降序排序顺序和默认排序规则进行排序。
            </summary>
      <param name="source">
                一个指定输入的集的表达式。
              </param>
      <param name="sortKey">
                指定如何从给定输入集中的成员的排序键表达式的一种方法。
                 此方法必须生成具有提供排序顺序比较的结果类型的表达式键定义。
              </param>
      <returns>
              新 DbSortExpression 表示的 order by 操作的说明。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> 或 <paramref name="sortKey" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  生成的表达式 <paramref name="sortKey" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="source" /> 没有为集合结果类型。
                </exception>
      <exception cref="T:System.ArgumentException">
                  生成的表达式 <paramref name="sortKey" /> 不具有可比较顺序的结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.String)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" /> ，对给定的输入集的指定的排序键，使用降序排序顺序和指定的排序规则进行排序。
            </summary>
      <param name="source">
                一个指定输入的集的表达式。
              </param>
      <param name="sortKey">
                指定如何从给定输入集中的成员的排序键表达式的一种方法。
                 此方法必须生成具有提供排序顺序比较的结果类型的表达式键定义。
              </param>
      <param name="collation">
                要排序所依据的排序规则。
              </param>
      <returns>
              新 DbSortExpression 表示的 order by 操作的说明。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" />,  <paramref name="sortKey" /> 或 <paramref name="collation" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  生成的表达式 <paramref name="sortKey" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="source" /> 没有为集合结果类型。
                </exception>
      <exception cref="T:System.ArgumentException">
                  生成的表达式 <paramref name="sortKey" /> 不具有可比较顺序的字符串结果类型。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="collation" /> 为空或只包含空白字符。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}})">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbApplyExpression" /> ，可计算给定 <paramref name="apply" /> 表达式对于给定输入的每个元素执行一次设置，生成具有相应的输入行的集合，并将应用的列。
               为其行 <paramref name="apply" /> 的计算结果为一个空集具有的应用列值 <see langword="null" />。
            </summary>
      <param name="source">
                一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 指定输入的集。
              </param>
      <param name="apply">
                一个方法，指定要对输入集中的每个成员一次计算的逻辑。
              </param>
      <returns>
              使用指定新 DbApplyExpression 输入参数和应用的绑定和一个 <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" /> 的 OuterApply。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> 或 <paramref name="apply" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="Source" /> 没有为集合结果类型。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  结果 <paramref name="apply" /> 包含一个名称或为 null 的表达式。
                </exception>
      <exception cref="T:System.ArgumentException">
                  结果 <paramref name="apply" /> 包含一个名称或表达式都不是有效的表达式绑定。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpressionBinding)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbApplyExpression" /> ，可计算给定 <paramref name="apply" /> 表达式对于给定输入的每个元素执行一次设置，生成具有相应的输入行的集合，并将应用的列。
               为其行 <paramref name="apply" /> 的计算结果为一个空集具有的应用列值 <see langword="null" />。
            </summary>
      <param name="input">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> 指定输入的集。
              </param>
      <param name="apply">
                <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> ，它指定要对输入集中的每个成员一次计算逻辑。
              </param>
      <returns>
              使用指定新 DbApplyExpression 输入参数和应用的绑定和一个 <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" /> 的 OuterApply。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="input" /> 或 <paramref name="apply" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Parameter(System.Data.Metadata.Edm.TypeUsage,System.String)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbParameterReferenceExpression" /> 引用具有指定的名称和类型的参数。
            </summary>
      <param name="type">
                所引用的参数类型。
              </param>
      <param name="name">
                所引用的参数的名称。
              </param>
      <returns>
              表示具有指定的名称和类型的参数的引用 DbParameterReferenceExpression。
               该表达式的结果类型将与相同 <paramref name="type" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Plus(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbArithmeticExpression" /> 将左侧的参数添加到右边的参数。
            </summary>
      <param name="left">
                指定左边的参数的表达式。
              </param>
      <param name="right">
                一个指定右边的参数的表达式。
              </param>
      <returns>
              新 DbArithmeticExpression 表示加法运算。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="left" /> 或 <paramref name="right" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  没有通用数值结果类型之间存在 <paramref name="left" /> 和 <paramref name="right" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Project(System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbProjectExpression" /> 的项目指定的表达式对给定输入集。
            </summary>
      <param name="input">
                一个表达式，该表达式绑定，它指定输入的集。
              </param>
      <param name="projection">
                对集的投影的表达式。
              </param>
      <returns>
              在新 DbProjectExpression 表示投影操作。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="input" /> 或 <paramref name="projection" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Common.CommandTrees.DbExpression,System.Data.Metadata.Edm.EdmProperty)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression" /> 表示指定属性的检索。
            </summary>
      <param name="instance">
                从中检索属性的实例。
                 如果可以为 null 属性是静态的。
              </param>
      <param name="propertyMetadata">
                若要检索的属性的元数据。
              </param>
      <returns>
              新 DbPropertyExpression 表示检索属性。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="propertyMetadata" /> 为 null 或 <paramref name="instance" /> 为 null 且该属性不是静态。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Common.CommandTrees.DbExpression,System.Data.Metadata.Edm.NavigationProperty)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression" /> 表示指定的导航属性的检索。
            </summary>
      <param name="instance">
                要从中检索的导航属性实例。
              </param>
      <param name="navigationProperty">
                要检索的导航属性的元数据。
              </param>
      <returns>
              新 DbPropertyExpression 表示导航属性检索。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="navigationProperty" /> 或 <paramref name="instance" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Common.CommandTrees.DbExpression,System.Data.Metadata.Edm.RelationshipEndMember)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression" /> 表示指定的关系 end 成员的检索。
            </summary>
      <param name="instance">
                要从中检索的关系 end 成员实例。
              </param>
      <param name="relationshipEnd">
                若要检索的关系 end 成员的元数据。
              </param>
      <returns>
              表示关系端成员检索新 DbPropertyExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="relationshipEnd" /> 为 null 或 <paramref name="instance" /> 为 null 且该属性不是静态。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Common.CommandTrees.DbExpression,System.String)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression" /> 从给定的实例表示具有指定名称的实例属性检索。
            </summary>
      <param name="instance">
                从中检索属性的实例。
              </param>
      <param name="propertyName">
                要检索的属性的名称。
              </param>
      <returns>
              表示属性检索新 DbPropertyExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="propertyName" /> 为 null 或 <paramref name="instance" /> 为 null 且该属性不是静态。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  没有具有指定名称的属性声明的类型 <paramref name="instance" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(System.Data.Metadata.Edm.EntitySet,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbRefExpression" /> ，其编码到基于键值的特定实体的引用。
            </summary>
      <param name="entitySet">
                中引用的元素所在的实体集。
              </param>
      <param name="keyRow">
                一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，它引用的实体类型的键属性构造 （在数量、 类型和顺序） 匹配的列的记录。
              </param>
      <returns>
              新 DbRefExpression 引用与给定的实体集合中指定的键值的元素的说明。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="entitySet" /> 或 <paramref name="keyRow" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="keyRow" /> 没有与被引用的实体集的实体类型的键属性相匹配的记录结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(System.Data.Metadata.Edm.EntitySet,System.Data.Common.CommandTrees.DbExpression,System.Data.Metadata.Edm.EntityType)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbRefExpression" /> ，其编码到基于键值的特定实体的引用。
            </summary>
      <param name="entitySet">
                中引用的元素所在的实体集。
              </param>
      <param name="keyRow">
                一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，它引用的实体类型的键属性构造 （在数量、 类型和顺序） 匹配的列的记录。
              </param>
      <param name="entityType">
                引用应该参考中的实体的类型。
              </param>
      <returns>
              新 DbRefExpression 引用与给定的实体集合中指定的键值的元素的说明。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="entitySet" />,  <paramref name="keyRow" /> 或 <paramref name="entityType" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="entityType" /> 不在实体集的实体类型相同的类型层次结构或 <paramref name="keyRow" /> 不具有与引用的实体集的实体类型的键属性相匹配的记录结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Scan(System.Data.Metadata.Edm.EntitySetBase)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbScanExpression" /> 引用指定的实体或关系集。
            </summary>
      <param name="targetSet">
                要引用的实体或关系集的元数据。
              </param>
      <returns>
              新 DbScanExpression 基于指定的实体或关系集。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="targetSet" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Select``1(System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,``0})">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbProjectExpression" /> ，选择指定的表达式对给定输入集。
            </summary>
      <param name="source">
                一个指定输入的集的表达式。
              </param>
      <param name="projection">
                一种方法，用于指定如何派生投影的表达式给定输入集中的成员。
                 此方法必须生成的与兼容的类型实例选择且可解析为 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。
                 备注中介绍了有关 <paramref name="TProjection" /> 的兼容性要求。
              </param>
      <typeparam name="TProjection">
                方法结果类型为 <paramref name="projection" />。
              </typeparam>
      <returns>
              在新 DbProjectExpression 表示选择的操作。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> 或 <paramref name="projection" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  结果 <paramref name="projection" /> 为 null。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany(System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbApplyExpression" /> ，可计算给定 <paramref name="apply" /> 表达式对于给定输入的每个元素执行一次设置，生成具有相应的输入行的集合，并将应用的列。
               为其行 <paramref name="apply" /> 的计算结果为一个空集，不会包括。
               一个 <see cref="T:System.Data.Common.CommandTrees.DbProjectExpression" /> 随后会创建该选择 <paramref name="apply" /> 列的每一行，生成的整个集合从 <paramref name="apply" /> 结果。
            </summary>
      <param name="source">
                一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 指定输入的集。
              </param>
      <param name="apply">
                表示要对输入集中的每个成员一次计算的逻辑的方法。
              </param>
      <returns>
              使用指定的输入和应用绑定从新 DbApplyExpression 选择应用列新 DbProjectExpression 和 <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" /> 的 CrossApply。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> 或 <paramref name="apply" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  生成的表达式 <paramref name="apply" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="source" />  没有为集合结果类型。
                </exception>
      <exception cref="T:System.ArgumentException">
                  生成的表达式 <paramref name="apply" /> 不具有集合类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany``1(System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,``0})">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbApplyExpression" /> ，可计算给定 <paramref name="apply" /> 表达式对于给定输入的每个元素执行一次设置，生成具有相应的输入行的集合，并将应用的列。
               为其行 <paramref name="apply" /> 的计算结果为一个空集，不会包括。
               一个 <see cref="T:System.Data.Common.CommandTrees.DbProjectExpression" /> 然后，将创建选择指定 <paramref name="selector" /> 每一行生成整个结果集。
            </summary>
      <param name="source">
                一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 指定输入的集。
              </param>
      <param name="apply">
                表示要对输入集中的每个成员一次计算的逻辑的方法。
              </param>
      <param name="selector">
                一个方法，指定结果的一个元素的设置方式应给定输入元素派生，并将应用设置。
                 此方法必须生成与 SelectMany 兼容类型的实例，且可以解析为 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。
                 备注中介绍了有关 <paramref name="TSelector" /> 的兼容性要求。
              </param>
      <typeparam name="TSelector">
                方法结果类型为 <paramref name="selector" />。
              </typeparam>
      <returns>
              从指定的输入与新 DbApplyExpression 选择给定选择器的结果以及将应用绑定新 DbProjectExpression 和 <see cref="T:System.Data.Common.CommandTrees.DbExpressionKind" /> 的 CrossApply。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" />,  <paramref name="apply" /> 或 <paramref name="selector" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  生成的表达式 <paramref name="apply" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  结果 <paramref name="selector" /> 转换为 DbExpression 的为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="source" /> 没有为集合结果类型。
                </exception>
      <exception cref="T:System.ArgumentException">
                  生成的表达式 <paramref name="apply" /> 不具有集合类型。
                   没有为集合类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(System.Data.Common.CommandTrees.DbExpressionBinding,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbSortClause},System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbSkipExpression" /> ，对给定的输入集由给定的排序规范之前跳过指定的数量的元素进行排序。
            </summary>
      <param name="input">
                一个表达式，该表达式绑定，它指定输入的集。
              </param>
      <param name="sortOrder">
                确定应如何排序对输入集中的元素的排序规范的列表。
              </param>
      <param name="count">
                表达式指定要跳过的有序集的元素数量。
              </param>
      <returns>
              表示跳过操作新 DbSkipExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="input" />,  <paramref name="sortOrder" /> 或 <paramref name="count" /> 为 null，或 <paramref name="sortOrder" /> 包含 null 值。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="sortOrder" /> 为空，或 <paramref name="count" /> 不是 <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" /> 或 <see cref="T:System.Data.Common.CommandTrees.DbParameterReferenceExpression" /> 或具有不等同于或不能提升为 64 位整数类型的结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(System.Data.Common.CommandTrees.DbSortExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbSkipExpression" /> ，将从给定的已排序输入集中跳过指定的数量的元素。
            </summary>
      <param name="argument">
                一个 <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" /> 指定排序的输入的集。
              </param>
      <param name="count">
                表达式指定要跳过的有序集的元素数量。
              </param>
      <returns>
              表示跳过操作新 DbSkipExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="argument" /> 或 <paramref name="count" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="count" /> 不是 <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" /> 或 <see cref="T:System.Data.Common.CommandTrees.DbParameterReferenceExpression" /> 或具有不等同于或不能提升为 64 位整数类型的结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Sort(System.Data.Common.CommandTrees.DbExpressionBinding,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbSortClause})">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" /> ，对给定的输入由指定的排序规范集进行排序。
            </summary>
      <param name="input">
                一个表达式，该表达式绑定，它指定输入的集。
              </param>
      <param name="sortOrder">
                确定应如何排序对输入集中的元素的排序规范的列表。
              </param>
      <returns>
              新 DbSortExpression 表示排序操作的说明。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="input" /> 或 <paramref name="sortOrder" /> 为 null，或 <paramref name="sortOrder" /> 包含 null 值。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="sortOrder" /> 为空。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Take(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbLimitExpression" /> 限制为指定计数限制值的参数集合中的元素数。
               在输出中不包括绑定的结果。
            </summary>
      <param name="argument">
                一个指定输入集合的表达式。
              </param>
      <param name="count">
                指定限制值的表达式。
              </param>
      <returns>
              新 DbLimitExpression 与指定的参数和值计数限制不包括绑定结果。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="argument" /> 或 <paramref name="count" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="argument" /> 不具有集合结果类型，  <paramref name="count" /> 没有等同于或不能提升为 64 位整数类型的结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(System.Data.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" /> 具有排序顺序，其中包含给定的顺序的排序顺序的输入以及指定的排序关键字按升序排序顺序和默认的排序规则的集合。
            </summary>
      <param name="source">
                指定有序的输入的集 DbSortExpression。
              </param>
      <param name="sortKey">
                一个方法，指定如何从另一种排序键表达式给定输入集中的成员。
                 此方法必须生成具有提供排序顺序比较的结果类型的表达式键定义。
              </param>
      <returns>
              新 DbSortExpression 表示新整体排序依据操作的说明。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> 或 <paramref name="sortKey" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  生成的表达式 <paramref name="sortKey" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="source" /> 没有为集合结果类型。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="sortKey" /> 没有可比较顺序的结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(System.Data.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.String)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" /> 具有排序顺序，其中包含给定的顺序的排序顺序的输入以及指定的排序关键字按升序排序顺序，并且具有指定的排序规则的集合。
            </summary>
      <param name="source">
                指定有序的输入的集 DbSortExpression。
              </param>
      <param name="sortKey">
                一个方法，指定如何从另一种排序键表达式给定输入集中的成员。
                 此方法必须生成具有提供排序顺序比较的结果类型的表达式键定义。
              </param>
      <param name="collation">
                要排序所依据的排序规则。
              </param>
      <returns>
              新 DbSortExpression 表示新整体排序依据操作的说明。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" />,  <paramref name="sortKey" /> 或 <paramref name="collation" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  生成的表达式 <paramref name="sortKey" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="source" /> 没有为集合结果类型。
                </exception>
      <exception cref="T:System.ArgumentException">
                  生成的表达式 <paramref name="sortKey" /> 不具有可比较顺序的字符串结果类型。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="collation" /> 为空或只包含空白字符。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(System.Data.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" /> 具有排序顺序，其中包含给定的顺序的排序顺序的输入以及指定的排序关键字按降序排序顺序和默认的排序规则的集合。
            </summary>
      <param name="source">
                指定有序的输入的集 DbSortExpression。
              </param>
      <param name="sortKey">
                一个方法，指定如何从另一种排序键表达式给定输入集中的成员。
                 此方法必须生成具有提供排序顺序比较的结果类型的表达式键定义。
              </param>
      <returns>
              新 DbSortExpression 表示新整体排序依据操作的说明。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> 或 <paramref name="sortKey" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  生成的表达式 <paramref name="sortKey" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="source" /> 没有为集合结果类型。
                </exception>
      <exception cref="T:System.ArgumentException">
                  生成的表达式 <paramref name="sortKey" /> 不具有可比较顺序的结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(System.Data.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.String)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" /> 具有排序顺序，其中包含给定的顺序的排序顺序的输入以及指定的排序关键字按降序排序顺序和与指定的排序规则的集合。
            </summary>
      <param name="source">
                指定有序的输入的集 DbSortExpression。
              </param>
      <param name="sortKey">
                一个方法，指定如何从另一种排序键表达式给定输入集中的成员。
                 此方法必须生成具有提供排序顺序比较的结果类型的表达式键定义。
              </param>
      <param name="collation">
                要排序所依据的排序规则。
              </param>
      <returns>
              新 DbSortExpression 表示新整体排序依据操作的说明。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" />,  <paramref name="sortKey" /> 或 <paramref name="collation" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  生成的表达式 <paramref name="sortKey" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="source" /> 没有为集合结果类型。
                </exception>
      <exception cref="T:System.ArgumentException">
                  生成的表达式 <paramref name="sortKey" /> 不具有可比较顺序的字符串结果类型。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="collation" /> 为空或只包含空白字符。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbSortClause" /> 使用升序排序顺序和默认排序规则。
            </summary>
      <param name="key">
                定义的排序键的表达式。
              </param>
      <returns>
              新的排序子句具有给定的排序键和按升序排序。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="key" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="key" /> 没有可比较顺序的结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(System.Data.Common.CommandTrees.DbExpression,System.String)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbSortClause" /> 升序排序顺序和指定的排序规则。
            </summary>
      <param name="key">
                定义的排序键的表达式。
              </param>
      <param name="collation">
                要排序所依据的排序规则。
              </param>
      <returns>
              新的排序子句与给定的排序键和排序规则，并按升序排序。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="key" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="collation" /> 为空或只包含空白字符。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="key" /> 没有可比较顺序的结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbSortClause" /> 使用降序排序顺序和默认排序规则。
            </summary>
      <param name="key">
                定义的排序键的表达式。
              </param>
      <returns>
              新的具有给定的排序键和降序排序子句。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="key" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="key" /> 没有可比较顺序的结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(System.Data.Common.CommandTrees.DbExpression,System.String)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbSortClause" /> 降序排序顺序和指定的排序规则。
            </summary>
      <param name="key">
                定义的排序键的表达式。
              </param>
      <param name="collation">
                要排序所依据的排序规则。
              </param>
      <returns>
              新的排序子句与给定的排序键和排序规则，并按降序排序。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="key" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="collation" /> 为空或只包含空白字符。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="key" /> 没有可比较顺序的结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.TreatAs(System.Data.Common.CommandTrees.DbExpression,System.Data.Metadata.Edm.TypeUsage)">
      <summary>
              创建一个新的 <see cref="T:System.Data.Common.CommandTrees.DbTreatExpression" />。
            </summary>
      <param name="argument">
                一个表达式，指定的实例。
              </param>
      <param name="treatType">
                类型将元数据的类型。
              </param>
      <returns>
              使用指定的参数和类型新 DbTreatExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="argument" /> 或 <paramref name="treatType" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="treatType" /> 不在相同的结果类型的类型层次结构 <paramref name="argument" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnaryMinus(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbArithmeticExpression" /> ，对参数的值求反。
            </summary>
      <param name="argument">
                指定参数的表达式。
              </param>
      <returns>
              新 DbArithmeticExpression 表示求反运算。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="argument" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  为不存在任何数值结果类型 <paramref name="argument" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Union(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 用于计算剩余的联合并删除了重复项，右侧设置参数。
            </summary>
      <param name="left">
                定义左边的表达式将参数设置。
              </param>
      <param name="right">
                定义右边的表达式将参数设置。
              </param>
      <returns>
              计算的 union、 无重复的新 DbExpression 的左侧和右侧的参数。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="left" /> 或 <paramref name="right" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  具有可比较相等的元素类型没有通用集合结果类型之间存在 <paramref name="left" /> 和 <paramref name="right" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnionAll(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbUnionAllExpression" /> ，计算的左侧和右侧的集参数的并集并不会删除重复项。
            </summary>
      <param name="left">
                定义左边的表达式将参数设置。
              </param>
      <param name="right">
                定义右边的表达式将参数设置。
              </param>
      <returns>
              新 DbUnionAllExpression 的包括重复项，该联合的左侧和右侧的参数。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="left" /> 或 <paramref name="right" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  具有可比较相等的元素类型没有通用集合结果类型之间存在 <paramref name="left" /> 和 <paramref name="right" />。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Variable(System.Data.Metadata.Edm.TypeUsage,System.String)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" /> 引用具有指定的名称和类型的变量。
            </summary>
      <param name="type">
                被引用的变量的类型。
              </param>
      <param name="name">
                所引用的变量的名称。
              </param>
      <returns>
              表示具有指定的名称和类型的变量的引用的 DbVariableReferenceExpression。
               该表达式的结果类型将与相同 <paramref name="type" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Where(System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbFilterExpression" /> 中给定的输入集使用指定的谓词的元素进行筛选。
            </summary>
      <param name="source">
                一个指定输入的集的表达式。
              </param>
      <param name="predicate">
                一个方法，它表示要对输入集中的每个成员进行评估的谓词。
                    此方法必须生成具有提供的谓词的逻辑的布尔值结果类型的表达式。
              </param>
      <returns>
              新 DbQuantifierExpression 表示任何操作的说明。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  生成的表达式 <paramref name="predicate" /> 为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  生成的表达式 <paramref name="predicate" /> 没有 Boolean 结果类型。
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Abs(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数，每个必须具有数值结果类型规范 Abs 函数调用。
               该表达式的结果类型是相同的结果类型 值。
            </summary>
      <param name="value">
                指定的数值表达式。
              </param>
      <returns>
              返回数值的绝对值新 DbFunctionExpression 值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  值
                </exception>
      <exception cref="T:System.ArgumentException">
                  值
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddDays(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它调用带指定参数，都必须使用 DateTime 或 DateTimeOffset 和整数结果类型规范的 AddDays' 函数。
               该表达式的结果类型与 dateValue 的结果类型相同。
            </summary>
      <param name="dateValue">
                指定的值的表达式 addValue应添加。
              </param>
      <param name="addValue">
                一个表达式，指定的天数将添加到 dateValue。
              </param>
      <returns>
              将指定的天数加新 DbFunctionExpression addValue 到指定的值 dateValue。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  dateValue
                  addValue
                </exception>
      <exception cref="T:System.ArgumentException">
                  dateValue
                  addValue
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddHours(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它调用带指定参数，必须具有 DateTime、 DateTimeOffset 或时间和整数结果类型规范的 AddHours' 函数。
               该表达式的结果类型是相同的结果类型 timeValue。
            </summary>
      <param name="timeValue">
                指定的值的表达式 addValue应添加。
              </param>
      <param name="addValue">
                一个表达式，指定要添加的小时数 timeValue。
              </param>
      <returns>
              将指定的小时数加新 DbFunctionExpression addValue 到指定的值 timeValue。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  timeValue
                  addValue
                </exception>
      <exception cref="T:System.ArgumentException">
                  timeValue
                  addValue
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMicroseconds(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它调用带指定参数，必须具有 DateTime、 DateTimeOffset 或时间和整数结果类型规范的 AddMicroseconds' 函数。
               该表达式的结果类型是相同的结果类型 timeValue。
            </summary>
      <param name="timeValue">
                指定的值的表达式 addValue应添加。
              </param>
      <param name="addValue">
                一个表达式，指定将添加到的微秒数 timeValue。
              </param>
      <returns>
              添加指定的微秒数新 DbFunctionExpression addValue 到指定的值 timeValue。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  timeValue
                  addValue
                </exception>
      <exception cref="T:System.ArgumentException">
                  timeValue
                  addValue
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMilliseconds(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它调用带指定参数，必须具有 DateTime、 DateTimeOffset 或时间和整数结果类型规范的 AddMilliseconds' 函数。
               该表达式的结果类型是相同的结果类型 timeValue。
            </summary>
      <param name="timeValue">
                指定的值的表达式 addValue应添加。
              </param>
      <param name="addValue">
                一个表达式，指定要添加的毫秒数 timeValue。
              </param>
      <returns>
              将由指定的毫秒数加新 DbFunctionExpression addValue 到指定的值 timeValue。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  timeValue
                  addValue
                </exception>
      <exception cref="T:System.ArgumentException">
                  timeValue
                  addValue
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMinutes(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它调用带指定参数，必须具有 DateTime、 DateTimeOffset 或时间和整数结果类型规范的 AddMinutes' 函数。
               该表达式的结果类型是相同的结果类型 timeValue。
            </summary>
      <param name="timeValue">
                指定的值的表达式 addValue应添加。
              </param>
      <param name="addValue">
                一个表达式，指定要添加的分钟数 timeValue。
              </param>
      <returns>
              将指定的分钟数加新 DbFunctionExpression addValue 到指定的值 timeValue。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  timeValue
                  addValue
                </exception>
      <exception cref="T:System.ArgumentException">
                  timeValue
                  addValue
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMonths(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它调用带指定参数，都必须使用 DateTime 或 DateTimeOffset 和整数结果类型规范的 AddMonths' 函数。
               该表达式的结果类型与 dateValue 的结果类型相同。
            </summary>
      <param name="dateValue">
                指定的值的表达式 addValue应添加。
              </param>
      <param name="addValue">
                一个表达式，指定要添加的月数 dateValue。
              </param>
      <returns>
              将指定的月数加新 DbFunctionExpression addValue 到指定的值 dateValue。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  dateValue
                  addValue
                </exception>
      <exception cref="T:System.ArgumentException">
                  dateValue
                  addValue
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddNanoseconds(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它调用带指定参数，必须具有 DateTime、 DateTimeOffset 或时间和整数结果类型规范的 AddNanoseconds' 函数。
               该表达式的结果类型是相同的结果类型 timeValue。
            </summary>
      <param name="timeValue">
                指定的值的表达式 addValue应添加。
              </param>
      <param name="addValue">
                一个表达式，指定的毫微秒为单位将添加到数 timeValue。
              </param>
      <returns>
              将指定的毫微秒数加新 DbFunctionExpression addValue 到指定的值 timeValue。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  timeValue
                  addValue
                </exception>
      <exception cref="T:System.ArgumentException">
                  timeValue
                  addValue
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddSeconds(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它调用带指定参数，必须具有 DateTime、 DateTimeOffset 或时间和整数结果类型规范的 AddSeconds' 函数。
               该表达式的结果类型是相同的结果类型 timeValue。
            </summary>
      <param name="timeValue">
                指定的值的表达式 addValue应添加。
              </param>
      <param name="addValue">
                一个表达式，指定要添加到的秒数 timeValue。
              </param>
      <returns>
              将指定的秒数加新 DbFunctionExpression addValue 到指定的值 timeValue。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  timeValue
                  addValue
                </exception>
      <exception cref="T:System.ArgumentException">
                  timeValue
                  addValue
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddYears(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它调用带指定参数，都必须使用 DateTime 或 DateTimeOffset 和整数结果类型规范的 AddYears' 函数。
               该表达式的结果类型与 dateValue 的结果类型相同。
            </summary>
      <param name="dateValue">
                指定的值的表达式 addValue应添加。
              </param>
      <param name="addValue">
                一个表达式，指定将添加到的年数 dateValue。
              </param>
      <returns>
              将指定的年数加新 DbFunctionExpression addValue 到指定的值 dateValue。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  dateValue
                  addValue
                </exception>
      <exception cref="T:System.ArgumentException">
                  dateValue
                  addValue
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Average(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，用于针对指定集合调用规范“Avg”函数。
               该表达式的结果类型与集合的元素类型相同。
            </summary>
      <param name="collection">
                一个表达式，该表达式指定应计算其中平均值的集合。
              </param>
      <returns>
              一个新的 DbFunctionExpression，它生成平均值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  集合
                </exception>
      <exception cref="T:System.ArgumentException">
                  集合
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseAnd(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数，必须具有相同的整数数值结果类型规范 BitwiseAnd' 函数调用。
               该表达式的结果类型是与参数的类型相同。
            </summary>
      <param name="value1">
                一个表达式，指定第一个操作数。
              </param>
      <param name="value2">
                一个表达式，指定第二个操作数。
              </param>
      <returns>
              执行按位 AND 由返回的值的新 DbFunctionExpression value1 和 value2。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  value1
                  value2
                </exception>
      <exception cref="T:System.ArgumentException">
                  value1
                  value2
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseNot(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数必须具有整数数值结果类型规范 BitwiseNot' 函数调用。
               该表达式的结果类型是与参数的类型相同。
            </summary>
      <param name="value">
                一个表达式，指定第一个操作数。
              </param>
      <returns>
              返回的值的新 DbFunctionExpression 由执行位非 值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  值
                </exception>
      <exception cref="T:System.ArgumentException">
                  值
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseOr(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它调用带指定参数，必须具有相同的整数数值结果类型规范的 BitwiseOr' 函数。
               该表达式的结果类型是与参数的类型相同。
            </summary>
      <param name="value1">
                一个表达式，指定第一个操作数。
              </param>
      <param name="value2">
                一个表达式，指定第二个操作数。
              </param>
      <returns>
              执行的按位或由返回的值的新 DbFunctionExpression value1 和 value2。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  value1
                  value2
                </exception>
      <exception cref="T:System.ArgumentException">
                  value1
                  value2
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseXor(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数，必须具有相同的整数数值结果类型规范 BitwiseXor' 函数调用。
               该表达式的结果类型是与参数的类型相同。
            </summary>
      <param name="value1">
                一个表达式，指定第一个操作数。
              </param>
      <param name="value2">
                一个表达式，指定第二个操作数。
              </param>
      <returns>
              执行的按位 XOR （异或） 由返回的值的新 DbFunctionExpression value1 和 value2。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  value1
                  value2
                </exception>
      <exception cref="T:System.ArgumentException">
                  value1
                  value2
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Ceiling(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数，都必须为单精度、 双精度或小数结果类型规范 Ceiling 函数调用。
               该表达式的结果类型是相同的结果类型 值。
            </summary>
      <param name="value">
                指定的数值表达式。
              </param>
      <returns>
              返回不小于比最小整数值的新 DbFunctionExpression 值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  值
                </exception>
      <exception cref="T:System.ArgumentException">
                  值
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Concat(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数，每个必须具有字符串结果类型规范的 Concat 函数调用。
               该表达式的结果类型为字符串。
            </summary>
      <param name="string1">
                一个表达式，指定应显示在串联的结果字符串中第一个字符串。
              </param>
      <param name="string2">
                一个表达式，指定应显示在串联的结果字符串中第二个字符串。
              </param>
      <returns>
              串联的字符串生成新 DbFunctionExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  string1
                  string2
                </exception>
      <exception cref="T:System.ArgumentException">
                  string1
                  string2
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Contains(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它调用带指定参数，每个必须具有字符串结果类型规范的 'Contains' 函数。
               该表达式的结果类型是布尔值。
            </summary>
      <param name="searchedString">
                一个表达式，指定要搜索的任何匹配项的字符串 searchedForString。
              </param>
      <param name="searchedForString">
                一个表达式，指定要在中搜索的字符串 searchedString。
              </param>
      <returns>
              返回一个布尔值，该值指示新 DbFunctionExpression 是否 searchedForString 出现在 searchedString。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  searchedString
                  searchedForString
                </exception>
      <exception cref="T:System.ArgumentException">
                  searchedString
                  searchedForString
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Count(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，用于针对指定集合调用规范“Count”函数。
               该表达式的结果类型为 Edm.Int32。
            </summary>
      <param name="collection">
                一个表达式，该表达式指定应计算其计数值的集合。
              </param>
      <returns>
              一个新的 DbFunctionExpression，它生成计数值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  集合
                </exception>
      <exception cref="T:System.ArgumentException">
                  集合
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateDateTime(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数规范 CreateDateTime' 函数调用。
              第二个 必须具有的结果类型为 Edm.Double，而所有其他参数必须具有的结果类型为 Edm.Int32。
               该表达式的结果类型是 Edm.DateTime。
            </summary>
      <param name="year">
                一个表达式，提供新的 DateTime 实例的年份值。
              </param>
      <param name="month">
                一个表达式，提供新的 DateTime 实例的月份值。
              </param>
      <param name="day">
                为新的 DateTime 实例提供的日期值的表达式。
              </param>
      <param name="hour">
                一个表达式，提供新的 DateTime 实例的小时值。
              </param>
      <param name="minute">
                一个表达式，提供新的 DateTime 实例的分钟值。
              </param>
      <param name="second">
                一个新的 DateTime 实例提供第二个值的表达式。
              </param>
      <returns>
              返回新日期时间新 DbFunctionExpression 基于指定的值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  每年
                  月份
                  一天
                  小时
                  分钟
                  第二个
                </exception>
      <exception cref="T:System.ArgumentException">
                  每年
                  月份
                  一天
                  小时
                  分钟
                  第二个
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateDateTimeOffset(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数规范 CreateDateTimeOffset' 函数调用。
              第二个 必须具有的结果类型为 Edm.Double，而所有其他参数必须具有的结果类型为 Edm.Int32。
               该表达式的结果类型是 Edm.DateTimeOffset。
            </summary>
      <param name="year">
                一个表达式，提供新的 DateTimeOffset 实例的年份值。
              </param>
      <param name="month">
                一个新的 DateTimeOffset 实例提供的月份值的表达式。
              </param>
      <param name="day">
                为新的 DateTimeOffset 实例提供的日期值的表达式。
              </param>
      <param name="hour">
                一个表达式，为新的 DateTimeOffset 实例提供的小时值。
              </param>
      <param name="minute">
                一个表达式，提供新的 DateTimeOffset 实例之间的分钟值。
              </param>
      <param name="second">
                一个新的 DateTimeOffset 实例提供第二个值的表达式。
              </param>
      <param name="timeZoneOffset">
                提供的时区偏移量值中新的 DateTimeOffset 实例的分钟数的表达式。
              </param>
      <returns>
              返回新 DateTimeOffset 新 DbFunctionExpression 基于指定的值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  每年
                  月份
                  一天
                  小时
                  分钟
                  第二个
                  时区偏移量
                </exception>
      <exception cref="T:System.ArgumentException">
                  每年
                  月份
                  一天
                  小时
                  分钟
                  第二个
                  时区偏移量
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateTime(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它用指定的参数规范 CreateTime' 函数调用。
              第二个 必须具有的结果类型为 Edm.Double，而所有其他参数必须具有的结果类型为 Edm.Int32。
               该表达式的结果类型是 Edm.Time。
            </summary>
      <param name="hour">
                一个表达式，提供新的 DateTime 实例的小时值。
              </param>
      <param name="minute">
                一个表达式，提供新的 DateTime 实例的分钟值。
              </param>
      <param name="second">
                一个新的 DateTime 实例提供第二个值的表达式。
              </param>
      <returns>
              返回一个新的时间新 DbFunctionExpression 基于指定的值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  小时
                  分钟
                  第二个
                </exception>
      <exception cref="T:System.ArgumentException">
                  小时
                  分钟
                  第二个
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentDateTime">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它调用规范 CurrentDateTime' 函数。
            </summary>
      <returns>
              返回当前日期和时间的 Edm.DateTime 实例作为新 DbFunctionExpression。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentDateTimeOffset">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它调用规范 CurrentDateTimeOffset' 函数。
            </summary>
      <returns>
              返回当前日期和时间 Edm.DateTimeOffset 实例作为新 DbFunctionExpression。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentUtcDateTime">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它调用规范 CurrentUtcDateTime' 函数。
            </summary>
      <returns>
              返回当前 UTC 日期和时间的 Edm.DateTime 实例作为新 DbFunctionExpression。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Day(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它调用具有指定参数的规范“Day”函数，其必须具有 DateTime 或 DateTimeOffset 结果类型。
               该表达式的结果类型为 Edm.Int32。
            </summary>
      <param name="dateValue">
                一个表达式，该表达式指定应从中检索日的值。
              </param>
      <returns>
              一个新的 DbFunctionExpression，它从 dateValue 中返回整数形式的日值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  dateValue
                </exception>
      <exception cref="T:System.ArgumentException">
                  dateValue
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DayOfYear(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它调用具有指定参数的规范“DayOfYear”函数，其必须具有 DateTime 或 DateTimeOffset 结果类型。
               该表达式的结果类型为 Edm.Int32。
            </summary>
      <param name="dateValue">
                一个表达式，该表达式指定应从中检索一年中某天的值。
              </param>
      <returns>
              一个新的 DbFunctionExpression，它从 dateValue 中返回整数形式的一年中某天的值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  dateValue
                </exception>
      <exception cref="T:System.ArgumentException">
                  dateValue
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffDays(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数，都必须具有 DateTime 或 DateTimeOffset 结果类型规范 DiffDays' 函数调用。
               该表达式的结果类型为 Edm.Int32。
            </summary>
      <param name="dateValue1">
                一个表达式，指定第一个日期值参数。
              </param>
      <param name="dateValue2">
                一个表达式，指定第二个日期值参数。
              </param>
      <returns>
              返回数天之间的区别是新 DbFunctionExpression dateValue1 和 dateValue2。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffHours(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它调用规范 DiffHours 函数使用指定的参数，都必须具有 DateTime、 DateTimeOffset 或结果类型的时间。
               该表达式的结果类型为 Edm.Int32。
            </summary>
      <param name="timeValue1">
                一个表达式，指定第一个时间值参数。
              </param>
      <param name="timeValue2">
                一个表达式，指定第二个时间值参数。
              </param>
      <returns>
              返回的小时数之间的区别是，新 DbFunctionExpression timeValue1 和 timeValue2。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMicroseconds(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它调用规范 DiffMicroseconds 函数使用指定的参数，都必须具有 DateTime、 DateTimeOffset 或结果类型的时间。
               该表达式的结果类型为 Edm.Int32。
            </summary>
      <param name="timeValue1">
                一个表达式，指定第一个时间值参数。
              </param>
      <param name="timeValue2">
                一个表达式，指定第二个时间值参数。
              </param>
      <returns>
              返回的微秒数之间的区别是，新 DbFunctionExpression timeValue1 和 timeValue2。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMilliseconds(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它调用规范 DiffMilliseconds 函数使用指定的参数，都必须具有 DateTime、 DateTimeOffset 或结果类型的时间。
               该表达式的结果类型为 Edm.Int32。
            </summary>
      <param name="timeValue1">
                一个表达式，指定第一个时间值参数。
              </param>
      <param name="timeValue2">
                一个表达式，指定第二个时间值参数。
              </param>
      <returns>
              返回的毫秒数之间的区别是，新 DbFunctionExpression timeValue1 和 timeValue2。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMinutes(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它调用规范 DiffMinutes 函数使用指定的参数，都必须具有 DateTime、 DateTimeOffset 或结果类型的时间。
               该表达式的结果类型为 Edm.Int32。
            </summary>
      <param name="timeValue1">
                一个表达式，指定第一个时间值参数。
              </param>
      <param name="timeValue2">
                一个表达式，指定第二个时间值参数。
              </param>
      <returns>
              返回的分钟数之间的区别是，新 DbFunctionExpression timeValue1 和 timeValue2。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMonths(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数，都必须具有 DateTime 或 DateTimeOffset 结果类型规范 DiffMonths 函数调用。
               该表达式的结果类型为 Edm.Int32。
            </summary>
      <param name="dateValue1">
                一个表达式，指定第一个日期值参数。
              </param>
      <param name="dateValue2">
                一个表达式，指定第二个日期值参数。
              </param>
      <returns>
              返回月数之间的区别是，新 DbFunctionExpression dateValue1 和 dateValue2。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffNanoseconds(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它调用规范 DiffNanoseconds 函数使用指定的参数，都必须具有 DateTime、 DateTimeOffset 或结果类型的时间。
               表达式的结果类型为 Edm.Int32。
            </summary>
      <param name="timeValue1">
                一个表达式，指定第一个时间值参数。
              </param>
      <param name="timeValue2">
                一个表达式，指定第二个时间值参数。
              </param>
      <returns>
              返回的毫微秒数之间的区别是新 DbFunctionExpression timeValue1 和 timeValue2。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffSeconds(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它调用规范 DiffSeconds 函数使用指定的参数，都必须具有 DateTime、 DateTimeOffset 或结果类型的时间。
               该表达式的结果类型为 Edm.Int32。
            </summary>
      <param name="timeValue1">
                一个表达式，指定第一个时间值参数。
              </param>
      <param name="timeValue2">
                一个表达式，指定第二个时间值参数。
              </param>
      <returns>
              返回的秒数之间的区别是新 DbFunctionExpression timeValue1 和 timeValue2。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffYears(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数，都必须具有 DateTime 或 DateTimeOffset 结果类型规范 DiffYears 函数调用。
               该表达式的结果类型为 Edm.Int32。
            </summary>
      <param name="dateValue1">
                一个表达式，指定第一个日期值参数。
              </param>
      <param name="dateValue2">
                一个表达式，指定第二个日期值参数。
              </param>
      <returns>
              返回的年数之间的区别是，新 DbFunctionExpression dateValue1 和 dateValue2。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.EndsWith(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数，每个必须具有字符串结果类型规范 EndsWith 函数调用。
               该表达式的结果类型是布尔值。
            </summary>
      <param name="stringArgument">
                指定搜索字符串结尾的字符串的表达式 后缀。
              </param>
      <param name="suffix">
                一个表达式，指定目标字符串的末尾搜索的 stringArgument。
              </param>
      <returns>
              返回一个布尔值，该值指示新 DbFunctionExpression 是否 stringArgument 结尾 后缀。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Floor(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数，都必须为单精度、 双精度或小数结果类型规范 Floor 函数调用。
               该表达式的结果类型是相同的结果类型 值。
            </summary>
      <param name="value">
                指定的数值表达式。
              </param>
      <returns>
              返回最大的整数值不大于新 DbFunctionExpression 值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  值
                </exception>
      <exception cref="T:System.ArgumentException">
                  值
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.GetTotalOffsetMinutes(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数必须具有 DateTimeOffset 结果类型规范 GetTotalOffsetMinutes' 函数调用。
               该表达式的结果类型为 Edm.Int32。
            </summary>
      <param name="dateTimeOffsetArgument">
                指定应从其检索最相对于 GMT 偏移的分钟数的 DateTimeOffset 值的表达式。
              </param>
      <returns>
              返回的分钟数新 DbFunctionExpression dateTimeOffsetArgument 相对于 GMT 偏移量。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  dateTimeOffsetArgument
                </exception>
      <exception cref="T:System.ArgumentException">
                  dateTimeOffsetArgument
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Hour(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它调用具有指定参数的规范“Hour”函数，其必须具有 DateTime、DateTimeOffset 或 Time 结果类型。
               该表达式的结果类型为 Edm.Int32。
            </summary>
      <param name="timeValue">
                一个表达式，该表达式指定应从中检索小时的值。
              </param>
      <returns>
              一个新的 dbfunctionexpression，返回整数小时值从它timeValue。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  timeValue
                </exception>
      <exception cref="T:System.ArgumentException">
                  timeValue
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.IndexOf(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数，每个必须具有字符串结果类型规范 IndexOf 函数调用。
               该表达式的结果类型为 Edm.Int32。
            </summary>
      <param name="searchString">
                一个表达式，指定要搜索的字符串 stringToFind。
              </param>
      <param name="stringToFind">
                一个表达式，指定要在中找到的字符串 searchString 应检查。
              </param>
      <returns>
              返回的第一个索引新 DbFunctionExpression stringToFind 中 searchString。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  searchString
                  stringToFind
                </exception>
      <exception cref="T:System.ArgumentException">
                  searchString
                  stringToFind
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Left(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它调用具有指定参数的规范“Left”函数，其必须具有字符串和整数值结果类型。
               该表达式的结果类型为字符串。
            </summary>
      <param name="stringArgument">
                一个表达式，该表达式指定要从中提取最左边的子字符串的字符串。
              </param>
      <param name="length">
                一个表达式，该表达式指定要从 stringArgument 中提取的最左边的子字符串的长度。
              </param>
      <returns>
              一个新的 DbFunctionExpression，它从 stringArgument 中返回长度为 length 的最左边的子字符串。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  stringArgument
                  length
                </exception>
      <exception cref="T:System.ArgumentException">
                  stringArgument
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Length(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它调用具有指定参数的规范“Length”函数，其必须具有字符串结果类型。
               该表达式的结果类型为 Edm.Int32。
            </summary>
      <param name="stringArgument">
                一个表达式，该表达式指定应为其计算长度的字符串。
              </param>
      <returns>
              一个新的 DbFunctionExpression，它返回 stringArgument 的长度。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  stringArgument
                </exception>
      <exception cref="T:System.ArgumentException">
                  stringArgument
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.LongCount(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，用于针对指定集合调用规范“BigCount”函数。
               该表达式的结果类型为 Edm.Int64。
            </summary>
      <param name="collection">
                一个表达式，该表达式指定应计算其计数值的集合。
              </param>
      <returns>
              一个新的 DbFunctionExpression，它生成计数值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  集合
                </exception>
      <exception cref="T:System.ArgumentException">
                  集合
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Max(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，用于针对指定集合调用规范“Max”函数。
               该表达式的结果类型与集合的元素类型相同。
            </summary>
      <param name="collection">
                一个表达式，该表达式指定应检索其中最大值的集合
              </param>
      <returns>
              一个新的 DbFunctionExpression，它生成最大值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  集合
                </exception>
      <exception cref="T:System.ArgumentException">
                  集合
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Millisecond(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它调用具有指定参数的规范“Millisecond”函数，其必须具有 DateTime、DateTimeOffset 或 Time 结果类型。
               该表达式的结果类型为 Edm.Int32。
            </summary>
      <param name="timeValue">
                一个表达式，该表达式指定应从中检索毫秒的值。
              </param>
      <returns>
              一个新的 DbFunctionExpression，它从 timeValue 中返回整数毫秒值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  timeValue
                </exception>
      <exception cref="T:System.ArgumentException">
                  timeValue
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Min(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，用于针对指定集合调用规范“Min”函数。
               该表达式的结果类型与集合的元素类型相同。
            </summary>
      <param name="collection">
                一个表达式，该表达式指定应检索其中最小值的集合。
              </param>
      <returns>
              一个新的 DbFunctionExpression，它生成最小值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  集合
                </exception>
      <exception cref="T:System.ArgumentException">
                  集合
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Minute(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它调用具有指定参数的规范“Minute”函数，其必须具有 DateTime、DateTimeOffset 或 Time 结果类型。
               该表达式的结果类型为 Edm.Int32。
            </summary>
      <param name="timeValue">
                一个表达式，该表达式指定应从中检索分钟的值。
              </param>
      <returns>
              一个新的 DbFunctionExpression，它从 timeValue 中返回整数分钟值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  timeValue
                </exception>
      <exception cref="T:System.ArgumentException">
                  timeValue
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Month(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它调用具有指定参数的规范“Month”函数，其必须具有 DateTime 或 DateTimeOffset 结果类型。
               该表达式的结果类型为 Edm.Int32。
            </summary>
      <param name="dateValue">
                一个表达式，该表达式指定应从中检索月的值。
              </param>
      <returns>
              一个新的 DbFunctionExpression，它从 dateValue 中返回整数月值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  dateValue
                </exception>
      <exception cref="T:System.ArgumentException">
                  dateValue
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.NewGuid">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它调用规范 NewGuid' 函数。
            </summary>
      <returns>
              返回一个新的 GUID 值新 DbFunctionExpression。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Power(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数，必须具有数值结果类型规范的 Power 函数调用。
               该表达式的结果类型是相同的结果类型 baseArgument。
            </summary>
      <param name="baseArgument">
                一个表达式，指定要将提升为的指定次幂的数字值。
              </param>
      <param name="exponent">
                一个表达式，指定的电源 baseArgument 应该会出现。
              </param>
      <returns>
              返回的值的新 DbFunctionExpression baseArgument 指定次幂 指数。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  baseArgument
                  指数
                </exception>
      <exception cref="T:System.ArgumentException">
                  baseArgument
                  指数
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Replace(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它调用带指定参数，每个必须具有字符串结果类型规范 'Replace' 函数。
               该表达式的结果类型也为字符串。
            </summary>
      <param name="stringArgument">
                一个表达式，指定要在其中执行替换操作的字符串。
              </param>
      <param name="toReplace">
                一个表达式，指定将被替换的字符串。
              </param>
      <param name="replacement">
                一个表达式，指定替换字符串。
              </param>
      <returns>
              一个新字符串，基于比返回新 DbFunctionExpression stringArgument 其中的每个匹配项 toReplace 替换为 替换。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  stringArgument
                  toReplace
                  替换
                </exception>
      <exception cref="T:System.ArgumentException">
                  stringArgument
                  toReplace
                  替换
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Reverse(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它调用具有指定参数的规范“Reverse”函数，其必须具有字符串结果类型。
               该表达式的结果类型也为字符串。
            </summary>
      <param name="stringArgument">
                一个表达式，该表达式指定要进行反转的字符串。
              </param>
      <returns>
              一个新的 DbFunctionExpression，它生成 stringArgument 的反转值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  stringArgument
                </exception>
      <exception cref="T:System.ArgumentException">
                  stringArgument
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Right(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它调用具有指定参数的规范“Right”函数，其必须具有字符串和整数值结果类型。
               该表达式的结果类型为字符串。
            </summary>
      <param name="stringArgument">
                一个表达式，该表达式指定要从中提取最右边的子字符串的字符串。
              </param>
      <param name="length">
                一个表达式，该表达式指定要从 stringArgument 中提取的最右边的子字符串的长度。
              </param>
      <returns>
              一个新的 DbFunctionExpression，它从 stringArgument 中返回长度为 length 的最右边的子字符串。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  stringArgument
                  length
                </exception>
      <exception cref="T:System.ArgumentException">
                  stringArgument
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数，都必须为单精度、 双精度或小数结果类型规范 Round 函数调用。
               该表达式的结果类型是相同的结果类型 值。
            </summary>
      <param name="value">
                一个表达式，指定要舍入的数字值。
              </param>
      <returns>
              将舍入为最接近的整数值的指定的参数的新 DbFunctionExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  值
                </exception>
      <exception cref="T:System.ArgumentException">
                  值
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它具有指定的参数，必须具有一个双精度或小数和整数结果类型的规范 Round 函数调用。
               该表达式的结果类型是相同的结果类型 值。
            </summary>
      <param name="value">
                一个表达式，指定要舍入的数字值。
              </param>
      <param name="digits">
                一个表达式，指定要使用时的舍入的精度的数字个数。
              </param>
      <returns>
              将舍入到最接近的整数值，其精度为按照指定的参数的新 DbFunctionExpression 数字。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  值
                  digits
                </exception>
      <exception cref="T:System.ArgumentException">
                  值
                  digits
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Second(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它调用具有指定参数的规范“Second”函数，其必须具有 DateTime、DateTimeOffset 或 Time 结果类型。
               该表达式的结果类型为 Edm.Int32。
            </summary>
      <param name="timeValue">
                一个表达式，该表达式指定应从中检索秒的值。
              </param>
      <returns>
              一个新的 DbFunctionExpression，它从 timeValue 中返回整数秒值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  timeValue
                </exception>
      <exception cref="T:System.ArgumentException">
                  timeValue
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StartsWith(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数，每个必须具有字符串结果类型规范 StartsWith 函数调用。
               该表达式的结果类型是布尔值。
            </summary>
      <param name="stringArgument">
                指定搜索字符串开头的字符串的表达式 前缀。
              </param>
      <param name="prefix">
                一个表达式，指定目标字符串的开头搜索的 stringArgument。
              </param>
      <returns>
              返回一个布尔值，该值指示新 DbFunctionExpression 是否 stringArgument 开头 前缀。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDev(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，用于针对指定集合的非 null 成员调用规范“StDev”函数。
               该表达式的结果类型为 Edm.Double。
            </summary>
      <param name="collection">
                一个表达式，该表达式指定应计算其标准偏差的集合。
              </param>
      <returns>
              一个新的 DbFunctionExpression，它生成集合的非 null 成员的标准差异值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  集合
                </exception>
      <exception cref="T:System.ArgumentException">
                  集合
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDevP(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，用于针对指定集合的填充调用规范“StDevP”函数。
               该表达式的结果类型为 Edm.Double。
            </summary>
      <param name="collection">
                一个表达式，该表达式指定应计算其标准偏差的集合。
              </param>
      <returns>
              一个新的 DbFunctionExpression，它生成标准偏差值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  集合
                </exception>
      <exception cref="T:System.ArgumentException">
                  集合
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Substring(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数，必须具有字符串和整数的数值结果类型规范 Substring 函数调用。
               该表达式的结果类型为字符串。
            </summary>
      <param name="stringArgument">
                一个表达式，指定要从中提取子字符串的字符串。
              </param>
      <param name="start">
                一个表达式，指定应从中提取子字符串的起始索引。
              </param>
      <param name="length">
                一个表达式，指定子字符串的长度。
              </param>
      <returns>
              返回的子字符串长度的新 DbFunctionExpression 长度 从 stringArgument 起价 启动。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  stringArgument
                  开始
                  length
                </exception>
      <exception cref="T:System.ArgumentException">
                  stringArgument
                  开始
                  length
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Sum(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，用于针对指定集合调用规范“Sum”函数。
               该表达式的结果类型与集合的元素类型相同。
            </summary>
      <param name="collection">
                一个表达式，该表达式指定应计算其中总和的集合。
              </param>
      <returns>
              一个新的 DbFunctionExpression，它生成总和。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  集合
                </exception>
      <exception cref="T:System.ArgumentException">
                  集合
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToLower(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它调用具有指定参数的规范“ToLower”函数，其必须具有字符串结果类型。
               该表达式的结果类型也为字符串。
            </summary>
      <param name="stringArgument">
                一个表达式，该表达式指定应转换为小写的字符串。
              </param>
      <returns>
              一个新的 DbFunctionExpression，它返回已转换为小写的 stringArgument 的值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  stringArgument
                </exception>
      <exception cref="T:System.ArgumentException">
                  stringArgument
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToUpper(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它调用具有指定参数的规范“ToUpper”函数，其必须具有字符串结果类型。
               该表达式的结果类型也为字符串。
            </summary>
      <param name="stringArgument">
                一个表达式，该表达式指定应转换为大写的字符串。
              </param>
      <returns>
              一个新的 DbFunctionExpression，它返回已转换为大写的 stringArgument 的值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  stringArgument
                </exception>
      <exception cref="T:System.ArgumentException">
                  stringArgument
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Trim(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它调用具有指定参数的规范“Trim”函数，其必须具有字符串结果类型。
               该表达式的结果类型也为字符串。
            </summary>
      <param name="stringArgument">
                一个表达式，该表达式指定应从中删除先导空格和尾随空格的字符串。
              </param>
      <returns>
              一个新的 DbFunctionExpression，它返回已删除先导和尾随空格的 stringArgument 的值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  stringArgument
                </exception>
      <exception cref="T:System.ArgumentException">
                  stringArgument
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimEnd(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它调用具有指定参数的规范“RTrim”函数，其必须具有字符串结果类型。
               该表达式的结果类型也为字符串。
            </summary>
      <param name="stringArgument">
                一个表达式，该表达式指定应从中删除尾随空格的字符串。
              </param>
      <returns>
              一个新的 DbFunctionExpression，它返回已删除尾随空格的 stringArgument 的值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  stringArgument
                </exception>
      <exception cref="T:System.ArgumentException">
                  stringArgument
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimStart(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它调用具有指定参数的规范“LTrim”函数，其必须具有字符串结果类型。
               该表达式的结果类型也为字符串。
            </summary>
      <param name="stringArgument">
                一个表达式，该表达式指定应从其中删除先导空格的字符串。
              </param>
      <returns>
              一个新的 DbFunctionExpression，它返回已删除先导空格的 stringArgument 的值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  stringArgument
                </exception>
      <exception cref="T:System.ArgumentException">
                  stringArgument
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Truncate(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它具有指定的参数，必须具有一个双精度或小数和整数结果类型的规范 Truncate 函数调用。
               该表达式的结果类型是相同的结果类型 值。
            </summary>
      <param name="value">
                一个表达式，指定要截断的数字值。
              </param>
      <param name="digits">
                一个表达式，指定要使用在截断时的精度的数字个数。
              </param>
      <returns>
              将截断到最接近的整数值，其精度为按照指定的参数的新 DbFunctionExpression 数字。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  值
                  digits
                </exception>
      <exception cref="T:System.ArgumentException">
                  值
                  digits
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TruncateTime(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它调用具有指定参数的规范“TruncateTime”函数，其必须具有 DateTime 或 DateTimeOffset 结果类型。
               该表达式的结果类型与 dateValue 的结果类型相同。
            </summary>
      <param name="dateValue">
                一个表达式，该表达式指定应截断其时间部分的值。
              </param>
      <returns>
              一个新的 DbFunctionExpression，它返回时间设为零的 dateValue 的值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  dateValue
                </exception>
      <exception cref="T:System.ArgumentException">
                  dateValue
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Var(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，用于针对指定集合的非 null 成员调用规范“Var”函数。
               该表达式的结果类型为 Edm.Double。
            </summary>
      <param name="collection">
                一个表达式，该表达式指定应计算其统计差异的集合。
              </param>
      <returns>
              一个新的 DbFunctionExpression，它生成集合的非 null 成员的统计差异值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  集合
                </exception>
      <exception cref="T:System.ArgumentException">
                  集合
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.VarP(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，用于针对指定集合的填充调用规范“VarP”函数。
               表达式 Edm.Double 的结果类型。
            </summary>
      <param name="collection">
                一个表达式，该表达式指定应计算其统计差异的集合。
              </param>
      <returns>
              一个新的 DbFunctionExpression，它生成统计差异值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  集合
                </exception>
      <exception cref="T:System.ArgumentException">
                  集合
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Year(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
               创建一个 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />，它调用具有指定参数的规范“Year”函数，其必须具有 DateTime 或 DateTimeOffset 结果类型。
               该表达式的结果类型为 Edm.Int32。
            </summary>
      <param name="dateValue">
                一个表达式，该表达式指定应从中检索年的值。
              </param>
      <returns>
              一个新的 DbFunctionExpression，它从 dateValue 中返回整数年值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  dateValue
                </exception>
      <exception cref="T:System.ArgumentException">
                  dateValue
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Row.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression},System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}[])">
      <summary>
              新实例初始化 <see cref="T:System.Data.Common.CommandTrees.ExpressionBuilder.Row" /> 类与指定第一列的值和可选的连续列的值。
            </summary>
      <param name="columnValue">
                提供了新的行实例中的第一列的键 / 值对。
                 （必需）
              </param>
      <param name="columnValues">
                提供新的行实例中的任何后续列的键 / 值对。
                 （可选）
              </param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Row.op_Implicit(System.Data.Common.CommandTrees.ExpressionBuilder.Row)~System.Data.Common.CommandTrees.DbExpression">
      <summary>
              将转换为指定的行 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。
            </summary>
      <param name="row">
                要转换的行。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，表示转换后的行。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Row.ToExpression">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbNewInstanceExpression" /> 构造一个新行根据此行实例中包含的列。
            </summary>
      <returns>
              新 DbNewInstanceExpression 构造与此行实例具有相同的列名和 DbExpression 值的行。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Area(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型规范的区域函数调用。
               表达式的结果类型为 Edm.Double。
            </summary>
      <param name="spatialValue">
                一个表达式，指定空间的图面值应为其计算区域。
              </param>
      <returns>
              返回的区域新 DbFunctionExpression <paramref name="spatialValue" /> 或 <see langword="null" /> 如果 <paramref name="spatialValue" /> 不是一个图面。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="spatialValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="spatialValue" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsBinary(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型规范 AsBinary' 函数调用。
               该表达式的结果类型是 Edm.Binary。
            </summary>
      <param name="spatialValue">
                指定应从其生成的已知的二进制表示形式的空间值的表达式。
              </param>
      <returns>
              返回的已知的二进制表示形式的新 DbFunctionExpression <paramref name="spatialValue" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="spatialValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="spatialValue" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsGml(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型规范 AsGml' 函数调用。
               表达式的结果类型为 Edm.String。
            </summary>
      <param name="spatialValue">
                指定应从其生成的地理标记语言 (GML) 表示的空间值的表达式。
              </param>
      <returns>
              返回地理标记语言 (GML) 表示形式的新 DbFunctionExpression <paramref name="spatialValue" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="spatialValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="spatialValue" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsText(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型规范 AsText' 函数调用。
               表达式的结果类型为 Edm.String。
            </summary>
      <param name="spatialValue">
                指定应从其生成的已知文本表示的空间值的表达式。
              </param>
      <returns>
              返回的已知文本表示形式的新 DbFunctionExpression <paramref name="spatialValue" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="spatialValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="spatialValue" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Centroid(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数必须具有 Edm.Geometry 结果类型规范质心' 函数调用。
               该表达式的结果类型是 Edm.Geometry。
            </summary>
      <param name="geometryValue">
                指定应从其检索质心的几何图面值的表达式。
              </param>
      <returns>
              返回的质心点新 DbFunctionExpression <paramref name="geometryValue" /> （这可能不在自身的图面上） 或 <see langword="null" /> 如果 <paramref name="geometryValue" /> 不是一个图面。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.CoordinateSystemId(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它调用规范 CoordinateSystemId 函数使用指定的参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型。
               该表达式的结果类型为 Edm.Int32。
            </summary>
      <param name="spatialValue">
                一个表达式，指定应从其检索的坐标系 id (SRID) 的值。
              </param>
      <returns>
              返回整数 SRID 新 DbFunctionExpression 值从 <paramref name="spatialValue" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="spatialValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="spatialValue" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Distance(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数，都必须可 Edm.Geography 或 Edm.Geometry 结果类型规范的 Distance 函数调用。
                结果类型 <paramref name="spatialValue1" /> 必须与匹配的结果类型 <paramref name="spatialValue2" />。
               表达式的结果类型为 Edm.Double。
            </summary>
      <param name="spatialValue1">
                一个表达式，指定第一个空间值。
              </param>
      <param name="spatialValue2">
                一个表达式，指定从其空间的值之间的距离 <paramref name="spatialValue1" /> 应衡量。
              </param>
      <returns>
              返回在最近的点之间的距离新 DbFunctionExpression <paramref name="spatialValue1" /> 和 <paramref name="spatialValue1" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="spatialValue1" />
                  <paramref name="spatialValue2" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="spatialValue1" />
                  <paramref name="spatialValue2" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Elevation(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型规范的提升函数调用。
               表达式的结果类型为 Edm.Double。
            </summary>
      <param name="spatialValue">
                指定应从中检索提升 （Z 合作） 值的空间点值的表达式。
              </param>
      <returns>
              返回的标高值新 DbFunctionExpression <paramref name="spatialValue" /> 或 <see langword="null" /> 如果 <paramref name="spatialValue" /> 不是一个点。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="spatialValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="spatialValue" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.EndPoint(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型规范的终结点函数调用。
               结果类型是相同的 <paramref name="spatialValue" />。
            </summary>
      <param name="spatialValue">
                指定应从其检索终结点的空间曲线值的表达式。
              </param>
      <returns>
              返回的终结点的新 DbFunctionExpression <paramref name="spatialValue" /> 或 <see langword="null" /> 如果 <paramref name="spatialValue" /> 不是一条曲线。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="spatialValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="spatialValue" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.ExteriorRing(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数必须具有 Edm.Geometry 结果类型规范 ExteriorRing' 函数调用。
               该表达式的结果类型是 Edm.Geometry。
            </summary>
      <param name="geometryValue">
                几何值中。
              </param>
      <returns>
              返回多边形任一的外环新 DbFunctionExpression <paramref name="geometryValue" /> 或 <see langword="null" /> 如果 <paramref name="geometryValue" /> 不是多边形。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyCollectionFromBinary(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数规范 GeographyCollectionFromBinary' 函数调用。
              <paramref name="geographyCollectionWellKnownBinaryValue" /> 必须具有二进制结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数数值结果类型。
               该表达式的结果类型是 Edm.Geography。
            </summary>
      <param name="geographyCollectionWellKnownBinaryValue">
                提供的众所周知的二进制表示形式的地理集合值的表达式。
              </param>
      <param name="coordinateSystemId">
                提供的表达式的坐标系 id (SRID) 的地理位置集合值的坐标系统。
              </param>
      <returns>
              返回基于指定的值的新 geography 集合值的新 DbFunctionExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geographyCollectionWellKnownBinaryValue" />
                  <paramref name="coordinateSystemId" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geographyCollectionWellKnownBinaryValue" />
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyCollectionFromText(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数规范 GeographyCollectionFromText' 函数调用。
              <paramref name="geographyCollectionWellKnownText" /> 必须具有字符串结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数数值结果类型。
               该表达式的结果类型是 Edm.Geography。
            </summary>
      <param name="geographyCollectionWellKnownText">
                提供的已知文本表示形式的地理集合值的表达式。
              </param>
      <param name="coordinateSystemId">
                提供的表达式的坐标系 id (SRID) 的地理位置集合值的坐标系统。
              </param>
      <returns>
              返回基于指定的值的新 geography 集合值的新 DbFunctionExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geographyCollectionWellKnownText" />
                  <paramref name="coordinateSystemId" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geographyCollectionWellKnownText" />
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromBinary(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数必须具有二进制结果类型规范 GeographyFromBinary' 函数调用。
               该表达式的结果类型是 Edm.Geography。
            </summary>
      <param name="wellKnownBinaryValue">
                提供的众所周知的二进制表示形式的地理位置值的表达式。
              </param>
      <returns>
              返回基于指定的二进制值的新 geography 值新 DbFunctionExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="wellKnownBinaryValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="wellKnownBinaryValue" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromBinary(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数规范 GeographyFromBinary' 函数调用。
              <paramref name="wellKnownBinaryValue" /> 必须具有二进制结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数数值结果类型。
               该表达式的结果类型是 Edm.Geography。
            </summary>
      <param name="wellKnownBinaryValue">
                提供的众所周知的二进制表示形式的地理位置值的表达式。
              </param>
      <param name="coordinateSystemId">
                一个表达式，提供地理位置值坐标系统的坐标系 id (SRID)。
              </param>
      <returns>
              返回基于指定的值的新 geography 值新 DbFunctionExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="wellKnownBinaryValue" />
                  <paramref name="coordinateSystemId" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="wellKnownBinaryValue" />
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromGml(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数必须具有字符串结果类型规范 GeographyFromGml' 函数调用。
               该表达式的结果类型是 Edm.Geography。
            </summary>
      <param name="geographyMarkup">
                一个提供地理位置值的地理标记语言 (GML) 表示的表达式。
              </param>
      <returns>
              基础提供程序返回基于指定的值与默认坐标系统 id (SRID) 的新 geography 值新 DbFunctionExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geographyMarkup" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geographyMarkup" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromGml(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数规范 GeographyFromGml' 函数调用。
              <paramref name="geographyMarkup" /> 必须具有字符串结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数数值结果类型。
               该表达式的结果类型是 Edm.Geography。
            </summary>
      <param name="geographyMarkup">
                一个提供地理位置值的地理标记语言 (GML) 表示的表达式。
              </param>
      <param name="coordinateSystemId">
                一个表达式，提供地理位置值坐标系统的坐标系 id (SRID)。
              </param>
      <returns>
              返回基于指定的值的新 geography 值新 DbFunctionExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geographyMarkup" />
                  <paramref name="coordinateSystemId" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geographyMarkup" />
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromText(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数必须具有字符串结果类型规范 GeographyFromText' 函数调用。
               该表达式的结果类型是 Edm.Geography。
               它的值具有基础提供程序的默认坐标系统 id (SRID)。
            </summary>
      <param name="wellKnownText">
                提供的已知文本表示形式的地理位置值的表达式。
              </param>
      <returns>
              返回基于指定的值的新 geography 值新 DbFunctionExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="wellKnownText" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="wellKnownText" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromText(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数规范 GeographyFromText' 函数调用。
              <paramref name="wellKnownText" /> 必须具有字符串结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数数值结果类型。
               该表达式的结果类型是 Edm.Geography。
            </summary>
      <param name="wellKnownText">
                提供的已知文本表示形式的地理位置值的表达式。
              </param>
      <param name="coordinateSystemId">
                一个表达式，提供地理位置值坐标系统的坐标系 id (SRID)。
              </param>
      <returns>
              返回基于指定的值的新 geography 值新 DbFunctionExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="wellKnownText" />
                  <paramref name="coordinateSystemId" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="wellKnownText" />
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyLineFromBinary(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数规范 GeographyLineFromBinary' 函数调用。
              <paramref name="lineWellKnownBinaryValue" /> 必须具有二进制结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数数值结果类型。
               该表达式的结果类型是 Edm.Geography。
            </summary>
      <param name="lineWellKnownBinaryValue">
                提供的众所周知的二进制表示形式的 geography 行值的表达式。
              </param>
      <param name="coordinateSystemId">
                提供的表达式的坐标系 id (SRID) 的 geography 行值的坐标系统。
              </param>
      <returns>
              返回基于指定的值的新 geography 行值新 DbFunctionExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="lineWellKnownBinaryValue" />
                  <paramref name="coordinateSystemId" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="lineWellKnownBinaryValue" />
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyLineFromText(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数规范 GeographyLineFromText' 函数调用。
              <paramref name="lineWellKnownText" /> 必须具有字符串结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数数值结果类型。
               该表达式的结果类型是 Edm.Geography。
            </summary>
      <param name="lineWellKnownText">
                提供的已知文本表示形式的 geography 行值的表达式。
              </param>
      <param name="coordinateSystemId">
                提供的表达式的坐标系 id (SRID) 的 geography 行值的坐标系统。
              </param>
      <returns>
              返回基于指定的值的新 geography 行值新 DbFunctionExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="lineWellKnownText" />
                  <paramref name="coordinateSystemId" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="lineWellKnownText" />
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiLineFromBinary(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数规范 GeographyMultiLineFromBinary' 函数调用。
              <paramref name="multiLineWellKnownBinaryValue" /> 必须具有二进制结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数数值结果类型。
               该表达式的结果类型是 Edm.Geography。
            </summary>
      <param name="multiLineWellKnownBinaryValue">
                提供的众所周知的二进制表示形式地理位置的多行值的表达式。
              </param>
      <param name="coordinateSystemId">
                提供的表达式的坐标系 id (SRID) 的地理位置多行值坐标系统。
              </param>
      <returns>
              返回基于指定的值的新 geography 多行值新 DbFunctionExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="multiLineWellKnownBinaryValue" />
                  <paramref name="coordinateSystemId" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="multiLineWellKnownBinaryValue" />
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiLineFromText(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数规范 GeographyMultiLineFromText' 函数调用。
              <paramref name="multiLineWellKnownText" /> 必须具有字符串结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数数值结果类型。
               该表达式的结果类型是 Edm.Geography。
            </summary>
      <param name="multiLineWellKnownText">
                提供的已知文本表示形式地理位置的多行值的表达式。
              </param>
      <param name="coordinateSystemId">
                提供的表达式的坐标系 id (SRID) 的地理位置多行值坐标系统。
              </param>
      <returns>
              返回基于指定的值的新 geography 多行值新 DbFunctionExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="multiLineWellKnownText" />
                  <paramref name="coordinateSystemId" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="multiLineWellKnownText" />
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPointFromBinary(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数规范 GeographyMultiPointFromBinary' 函数调用。
              <paramref name="multiPointWellKnownBinaryValue" /> 必须具有二进制结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数数值结果类型。
               该表达式的结果类型是 Edm.Geography。
            </summary>
      <param name="multiPointWellKnownBinaryValue">
                提供的众所周知的二进制表示形式地理位置的多个点值的表达式。
              </param>
      <param name="coordinateSystemId">
                提供的表达式的坐标系 id (SRID) 的地理位置多点值坐标系统。
              </param>
      <returns>
              返回基于指定的值的新 geography 多点值新 DbFunctionExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="multiPointWellKnownBinaryValue" />
                  <paramref name="coordinateSystemId" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="multiPointWellKnownBinaryValue" />
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPointFromText(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数规范 GeographyMultiPointFromText' 函数调用。
              <paramref name="multiPointWellKnownText" /> 必须具有字符串结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数数值结果类型。
               该表达式的结果类型是 Edm.Geography。
            </summary>
      <param name="multiPointWellKnownText">
                提供的已知文本表示形式地理位置的多个点值的表达式。
              </param>
      <param name="coordinateSystemId">
                提供的表达式的坐标系 id (SRID) 的地理位置多点值坐标系统。
              </param>
      <returns>
              返回基于指定的值的新 geography 多点值新 DbFunctionExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="multiPointWellKnownText" />
                  <paramref name="coordinateSystemId" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="multiPointWellKnownText" />
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPolygonFromBinary(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数规范 GeographyMultiPolygonFromBinary' 函数调用。
              <paramref name="multiPolygonWellKnownBinaryValue" /> 必须具有二进制结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数数值结果类型。
               该表达式的结果类型是 Edm.Geography。
            </summary>
      <param name="multiPolygonWellKnownBinaryValue">
                提供的众所周知的二进制表示形式地理位置的多个多边形值的表达式。
              </param>
      <param name="coordinateSystemId">
                提供的表达式的坐标系 id (SRID) 的地理位置多个多边形值坐标系统。
              </param>
      <returns>
              返回基于指定的值的新 geography 多个多边形值新 DbFunctionExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="multiPolygonWellKnownBinaryValue" />
                  <paramref name="coordinateSystemId" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="multiPolygonWellKnownBinaryValue" />
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPolygonFromText(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数规范 GeographyMultiPolygonFromText' 函数调用。
              <paramref name="multiPolygonWellKnownText" /> 必须具有字符串结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数数值结果类型。
               该表达式的结果类型是 Edm.Geography。
            </summary>
      <param name="multiPolygonWellKnownText">
                提供的已知文本表示形式地理位置的多个多边形值的表达式。
              </param>
      <param name="coordinateSystemId">
                提供的表达式的坐标系 id (SRID) 的地理位置多个多边形值坐标系统。
              </param>
      <returns>
              返回基于指定的值的新 geography 多个多边形值新 DbFunctionExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="multiPolygonWellKnownText" />
                  <paramref name="coordinateSystemId" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="multiPolygonWellKnownText" />
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPointFromBinary(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数规范 GeographyPointFromBinary' 函数调用。
              <paramref name="pointWellKnownBinaryValue" /> 必须具有二进制结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数数值结果类型。
               该表达式的结果类型是 Edm.Geography。
            </summary>
      <param name="pointWellKnownBinaryValue">
                表达式，用于提供已知的二进制表示形式 geography 点值。
              </param>
      <param name="coordinateSystemId">
                提供的表达式的坐标系 id (SRID) 的地理位置点值坐标 systempointWellKnownBinaryValue。
              </param>
      <returns>
              返回新的地域新 DbFunctionExpression 点基于指定的值的值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="pointWellKnownBinaryValue" />
                  <paramref name="coordinateSystemId" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="pointWellKnownBinaryValue" />
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPointFromText(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数规范 GeographyPointFromText' 函数调用。
            </summary>
      <param name="pointWellKnownText">
                表达式，它提供的已知文本表示形式 geography 点值。
              </param>
      <param name="coordinateSystemId">
                提供的表达式的坐标系 id (SRID) 的地理位置点值坐标 systempointWellKnownTextValue。
              </param>
      <returns>
              规范的 GeographyPointFromText' 函数。
            </returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPolygonFromBinary(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数规范 GeographyPolygonFromBinary' 函数调用。
              <paramref name="polygonWellKnownBinaryValue" /> 必须具有二进制结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数数值结果类型。
               该表达式的结果类型是 Edm.Geography。
            </summary>
      <param name="polygonWellKnownBinaryValue">
                提供的众所周知的二进制表示形式的地理多边形值的表达式。
              </param>
      <param name="coordinateSystemId">
                提供的表达式的坐标系 id (SRID) 的地理位置多边形值坐标系统。
              </param>
      <returns>
              返回基于指定的值的新 geography 多边形值新 DbFunctionExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="polygonWellKnownBinaryValue" />
                  <paramref name="coordinateSystemId" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="polygonWellKnownBinaryValue" />
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPolygonFromText(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数规范 GeographyPolygonFromText' 函数调用。
              <paramref name="polygonWellKnownText" /> 必须具有字符串结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数数值结果类型。
               该表达式的结果类型是 Edm.Geography。
            </summary>
      <param name="polygonWellKnownText">
                提供的已知文本表示形式的地理多边形值的表达式。
              </param>
      <param name="coordinateSystemId">
                提供的表达式的坐标系 id (SRID) 的地理位置多边形值坐标系统。
              </param>
      <returns>
              返回基于指定的值的新 geography 多边形值新 DbFunctionExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="polygonWellKnownText" />
                  <paramref name="coordinateSystemId" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="polygonWellKnownText" />
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryCollectionFromBinary(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数规范 GeometryCollectionFromBinary' 函数调用。
              <paramref name="geometryCollectionWellKnownBinaryValue" /> 必须具有二进制结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数数值结果类型。
               该表达式的结果类型是 Edm.Geometry。
            </summary>
      <param name="geometryCollectionWellKnownBinaryValue">
                提供的众所周知的二进制表示形式的几何图形集合值的表达式。
              </param>
      <param name="coordinateSystemId">
                提供的表达式的坐标系 id (SRID) 的几何图形集合值的坐标系统。
              </param>
      <returns>
              返回基于指定的值的新几何图形集合值的新 DbFunctionExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryCollectionWellKnownBinaryValue" />
                  <paramref name="coordinateSystemId" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryCollectionWellKnownBinaryValue" />
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryCollectionFromText(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数规范 GeometryCollectionFromText' 函数调用。
              <paramref name="geometryCollectionWellKnownText" /> 必须具有字符串结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数数值结果类型。
               该表达式的结果类型是 Edm.Geometry。
            </summary>
      <param name="geometryCollectionWellKnownText">
                提供的已知文本表示形式的几何图形集合值的表达式。
              </param>
      <param name="coordinateSystemId">
                提供的表达式的坐标系 id (SRID) 的几何图形集合值的坐标系统。
              </param>
      <returns>
              返回基于指定的值的新几何图形集合值的新 DbFunctionExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryCollectionWellKnownText" />
                  <paramref name="coordinateSystemId" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryCollectionWellKnownText" />
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromBinary(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数必须具有二进制结果类型规范 GeometryFromBinary' 函数调用。
               该表达式的结果类型是 Edm.Geometry。
            </summary>
      <param name="wellKnownBinaryValue">
                提供的众所周知的二进制表示形式的几何值的表达式。
              </param>
      <returns>
              返回基于指定的二进制值的新几何值新 DbFunctionExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="wellKnownBinaryValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="wellKnownBinaryValue" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromBinary(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数规范 GeometryFromBinary' 函数调用。
              <paramref name="wellKnownBinaryValue" /> 必须具有二进制结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数数值结果类型。
               该表达式的结果类型是 Edm.Geometry。
            </summary>
      <param name="wellKnownBinaryValue">
                提供的众所周知的二进制表示形式的几何值的表达式。
              </param>
      <param name="coordinateSystemId">
                一个表达式，提供了几何图形值坐标系统的坐标系 id (SRID)。
              </param>
      <returns>
              返回基于指定的值的新几何值新 DbFunctionExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="wellKnownBinaryValue" />
                  <paramref name="coordinateSystemId" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="wellKnownBinaryValue" />
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromGml(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数必须具有字符串结果类型规范 GeometryFromGml' 函数调用。
               该表达式的结果类型是 Edm.Geometry。
            </summary>
      <param name="geometryMarkup">
                提供的地理标记语言 (GML) 表示的几何值形式的表达式。
              </param>
      <returns>
              基础提供程序返回基于指定的值与默认坐标系统 id (SRID) 的新几何值新 DbFunctionExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryMarkup" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryMarkup" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromGml(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数规范 GeometryFromGml' 函数调用。
              <paramref name="geometryMarkup" /> 必须具有字符串结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数数值结果类型。
               该表达式的结果类型是 Edm.Geometry。
            </summary>
      <param name="geometryMarkup">
                提供的地理标记语言 (GML) 表示的几何值形式的表达式。
              </param>
      <param name="coordinateSystemId">
                一个表达式，提供了几何图形值坐标系统的坐标系 id (SRID)。
              </param>
      <returns>
              返回基于指定的值的新几何值新 DbFunctionExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryMarkup" />
                  <paramref name="coordinateSystemId" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryMarkup" />
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromText(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数必须具有字符串结果类型规范 GeometryFromText' 函数调用。
               该表达式的结果类型是 Edm.Geometry。
               它的值具有基础提供程序的默认坐标系统 id (SRID)。
            </summary>
      <param name="wellKnownText">
                提供的已知文本表示形式的几何值的表达式。
              </param>
      <returns>
              返回基于指定的值的新几何值新 DbFunctionExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="wellKnownText" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="wellKnownText" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromText(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数规范 GeometryFromText' 函数调用。
              <paramref name="wellKnownText" /> 必须具有字符串结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数数值结果类型。
               该表达式的结果类型是 Edm.Geometry。
            </summary>
      <param name="wellKnownText">
                提供的已知文本表示形式的几何值的表达式。
              </param>
      <param name="coordinateSystemId">
                一个表达式，提供了几何图形值坐标系统的坐标系 id (SRID)。
              </param>
      <returns>
              返回基于指定的值的新几何值新 DbFunctionExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="wellKnownText" />
                  <paramref name="coordinateSystemId" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="wellKnownText" />
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryLineFromBinary(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数规范 GeometryLineFromBinary' 函数调用。
              <paramref name="lineWellKnownBinaryValue" /> 必须具有二进制结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数数值结果类型。
               该表达式的结果类型是 Edm.Geometry。
            </summary>
      <param name="lineWellKnownBinaryValue">
                提供的众所周知的二进制表示形式的几何行值的表达式。
              </param>
      <param name="coordinateSystemId">
                提供的表达式的坐标系 id (SRID) 的几何行值的坐标系统。
              </param>
      <returns>
              返回一个新的基于指定的值的几何行值新 DbFunctionExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="lineWellKnownBinaryValue" />
                  <paramref name="coordinateSystemId" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="lineWellKnownBinaryValue" />
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryLineFromText(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数规范 GeometryLineFromText' 函数调用。
              <paramref name="lineWellKnownText" /> 必须具有字符串结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数数值结果类型。
               该表达式的结果类型是 Edm.Geometry。
            </summary>
      <param name="lineWellKnownText">
                提供的已知文本表示形式的几何行值的表达式。
              </param>
      <param name="coordinateSystemId">
                提供的表达式的坐标系 id (SRID) 的几何行值的坐标系统。
              </param>
      <returns>
              返回一个新的基于指定的值的几何行值新 DbFunctionExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="lineWellKnownText" />
                  <paramref name="coordinateSystemId" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="lineWellKnownText" />
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiLineFromBinary(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数规范 GeometryMultiLineFromBinary' 函数调用。
              <paramref name="multiLineWellKnownBinaryValue" /> 必须具有二进制结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数数值结果类型。
               该表达式的结果类型是 Edm.Geometry。
            </summary>
      <param name="multiLineWellKnownBinaryValue">
                提供的众所周知的二进制表示形式的几何多行值的表达式。
              </param>
      <param name="coordinateSystemId">
                提供的表达式的坐标系 id (SRID) 的几何多行值的坐标系统。
              </param>
      <returns>
              返回一个新的基于指定的值的几何多行值新 DbFunctionExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="multiLineWellKnownBinaryValue" />
                  <paramref name="coordinateSystemId" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="multiLineWellKnownBinaryValue" />
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiLineFromText(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数规范 GeometryMultiLineFromText' 函数调用。
              <paramref name="multiLineWellKnownText" /> 必须具有字符串结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数数值结果类型。
               该表达式的结果类型是 Edm.Geometry。
            </summary>
      <param name="multiLineWellKnownText">
                提供的已知文本表示形式的几何多行值的表达式。
              </param>
      <param name="coordinateSystemId">
                提供的表达式的坐标系 id (SRID) 的几何多行值的坐标系统。
              </param>
      <returns>
              返回一个新的基于指定的值的几何多行值新 DbFunctionExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="multiLineWellKnownText" />
                  <paramref name="coordinateSystemId" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="multiLineWellKnownText" />
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPointFromBinary(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数规范 GeometryMultiPointFromBinary' 函数调用。
              <paramref name="multiPointWellKnownBinaryValue" /> 必须具有二进制结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数数值结果类型。
               该表达式的结果类型是 Edm.Geometry。
            </summary>
      <param name="multiPointWellKnownBinaryValue">
                提供的众所周知的二进制表示形式的几何多点值的表达式。
              </param>
      <param name="coordinateSystemId">
                提供的表达式的坐标系 id (SRID) 的几何多点值的坐标系统。
              </param>
      <returns>
              返回一个新的基于指定的值的几何多点值新 DbFunctionExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="multiPointWellKnownBinaryValue" />
                  <paramref name="coordinateSystemId" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="multiPointWellKnownBinaryValue" />
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPointFromText(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数规范 GeometryMultiPointFromText' 函数调用。
              <paramref name="multiPointWellKnownText" /> 必须具有字符串结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数数值结果类型。
               该表达式的结果类型是 Edm.Geometry。
            </summary>
      <param name="multiPointWellKnownText">
                提供的已知文本表示形式的几何多点值的表达式。
              </param>
      <param name="coordinateSystemId">
                提供的表达式的坐标系 id (SRID) 的几何多点值的坐标系统。
              </param>
      <returns>
              返回一个新的基于指定的值的几何多点值新 DbFunctionExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="multiPointWellKnownText" />
                  <paramref name="coordinateSystemId" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="multiPointWellKnownText" />
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPolygonFromBinary(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数规范 GeometryMultiPolygonFromBinary' 函数调用。
              <paramref name="multiPolygonWellKnownBinaryValue" /> 必须具有二进制结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数数值结果类型。
               该表达式的结果类型是 Edm.Geometry。
            </summary>
      <param name="multiPolygonWellKnownBinaryValue">
                提供的众所周知的二进制表示形式的几何多个多边形值的表达式。
              </param>
      <param name="coordinateSystemId">
                提供的表达式的坐标系 id (SRID) 的几何多个多边形值坐标系统。
              </param>
      <returns>
              返回一个新的基于指定的值的几何多个多边形值新 DbFunctionExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="multiPolygonWellKnownBinaryValue" />
                  <paramref name="coordinateSystemId" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="multiPolygonWellKnownBinaryValue" />
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPolygonFromText(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数规范 GeometryMultiPolygonFromText' 函数调用。
              <paramref name="multiPolygonWellKnownText" /> 必须具有字符串结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数数值结果类型。
               该表达式的结果类型是 Edm.Geometry。
            </summary>
      <param name="multiPolygonWellKnownText">
                提供的已知文本表示形式的几何多个多边形值的表达式。
              </param>
      <param name="coordinateSystemId">
                提供的表达式的坐标系 id (SRID) 的几何多个多边形值坐标系统。
              </param>
      <returns>
              返回一个新的基于指定的值的几何多个多边形值新 DbFunctionExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="multiPolygonWellKnownText" />
                  <paramref name="coordinateSystemId" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="multiPolygonWellKnownText" />
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPointFromBinary(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数规范 GeometryPointFromBinary' 函数调用。
              <paramref name="pointWellKnownBinaryValue" /> 必须具有二进制结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数数值结果类型。
               该表达式的结果类型是 Edm.Geometry。
            </summary>
      <param name="pointWellKnownBinaryValue">
                表达式，用于提供已知的二进制表示形式几何点值。
              </param>
      <param name="coordinateSystemId">
                提供几何形状的坐标系统 id (SRID) 的表达式点值的坐标系统。
              </param>
      <returns>
              返回一个新的几何图形新 DbFunctionExpression 点基于指定的值的值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="pointWellKnownBinaryValue" />
                  <paramref name="coordinateSystemId" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="pointWellKnownBinaryValue" />
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPointFromText(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数规范 GeometryPointFromText' 函数调用。
              <paramref name="pointWellKnownText" /> 必须具有字符串结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数数值结果类型。
               该表达式的结果类型是 Edm.Geometry。
            </summary>
      <param name="pointWellKnownText">
                表达式，它提供的已知文本表示形式几何点值。
              </param>
      <param name="coordinateSystemId">
                提供几何形状的坐标系统 id (SRID) 的表达式点值的坐标系统。
              </param>
      <returns>
              返回一个新的几何图形新 DbFunctionExpression 点基于指定的值的值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="pointWellKnownText" />
                  <paramref name="coordinateSystemId" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="pointWellKnownText" />
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPolygonFromBinary(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数规范 GeometryPolygonFromBinary' 函数调用。
              <paramref name="polygonWellKnownBinaryValue" /> 必须具有二进制结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数数值结果类型。
               该表达式的结果类型是 Edm.Geometry。
            </summary>
      <param name="polygonWellKnownBinaryValue">
                提供的众所周知的二进制表示形式的几何多边形值的表达式。
              </param>
      <param name="coordinateSystemId">
                提供的表达式的坐标系 id (SRID) 的几何多边形值坐标系统。
              </param>
      <returns>
              返回一个新的基于指定的值的几何多边形值新 DbFunctionExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="polygonWellKnownBinaryValue" />
                  <paramref name="coordinateSystemId" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="polygonWellKnownBinaryValue" />
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPolygonFromText(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数规范 GeometryPolygonFromText' 函数调用。
              <paramref name="polygonWellKnownText" /> 必须具有字符串结果类型，而 <paramref name="coordinateSystemId" /> 必须具有整数数值结果类型。
               该表达式的结果类型是 Edm.Geometry。
            </summary>
      <param name="polygonWellKnownText">
                提供的已知文本表示形式的几何多边形值的表达式。
              </param>
      <param name="coordinateSystemId">
                提供的表达式的坐标系 id (SRID) 的几何多边形值坐标系统。
              </param>
      <returns>
              返回一个新的基于指定的值的几何多边形值新 DbFunctionExpression。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="polygonWellKnownText" />
                  <paramref name="coordinateSystemId" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="polygonWellKnownText" />
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.InteriorRingAt(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数规范 InteriorRingAt' 函数调用。
               第一个参数必须具有 Edm.Geometry 结果类型。
               第二个参数必须具有整数数值结果类型。
               该表达式的结果类型是 Edm.Geometry。
            </summary>
      <param name="geometryValue">
                几何值中。
              </param>
      <param name="indexValue">
                一个表达式，指定要从其中检索在多边形的内环的位置。
              </param>
      <returns>
              返回任一的内环位于新 DbFunctionExpression <paramref name="indexValue" /> 中 <paramref name="geometryValue" /> 或 <see langword="null" /> 如果 <paramref name="geometryValue" /> 不是多边形。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="indexValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                  <paramref name="indexValue" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.InteriorRingCount(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数必须具有 Edm.Geometry 结果类型规范 InteriorRingCount' 函数调用。
               该表达式的结果类型为 Edm.Int32。
            </summary>
      <param name="geometryValue">
                几何值中。
              </param>
      <returns>
              返回内部数新 DbFunctionExpression 中多边形环 <paramref name="geometryValue" /> 或 <see langword="null" /> 如果 <paramref name="geometryValue" /> 不是多边形。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsClosedSpatial(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型规范 IsClosedSpatial' 函数调用。
               结果类型为 Edm.Boolean。
            </summary>
      <param name="spatialValue">
                指定应从中检索 IsClosedSpatial 值的空间曲线值的表达式。
              </param>
      <returns>
              返回一个布尔值，该值指示新 DbFunctionExpression 是否 <paramref name="spatialValue" /> 已关闭，或 <see langword="null" /> 如果 <paramref name="spatialValue" /> 不是一条曲线。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="spatialValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="spatialValue" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsEmptySpatial(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型规范 IsEmptySpatial' 函数调用。
               该表达式的结果类型是 Edm.Boolean。
            </summary>
      <param name="spatialValue">
                指定应从中检索 IsEmptySptiaal 值的空间值的表达式。
              </param>
      <returns>
              返回一个布尔值，该值指示新 DbFunctionExpression 是否 <paramref name="spatialValue" /> 为空。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="spatialValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="spatialValue" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsRing(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数必须具有 Edm.Geometry 结果类型规范 IsRing' 函数调用。
               结果类型为 Edm.Boolean。
            </summary>
      <param name="geometryValue">
                指定应从中检索 IsRing 值的几何曲线值的表达式。
              </param>
      <returns>
              返回一个布尔值，该值指示新 DbFunctionExpression 是否 <paramref name="geometryValue" /> （已关闭和简单），是一个环或 <see langword="null" /> 如果 <paramref name="geometryValue" /> 不是一条曲线。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsSimpleGeometry(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数必须具有 Edm.Geometry 结果类型规范 IsSimpleGeometry' 函数调用。
               该表达式的结果类型是 Edm.Boolean。
            </summary>
      <param name="geometryValue">
                几何值中。
              </param>
      <returns>
              返回一个布尔值，该值指示新 DbFunctionExpression 是否 <paramref name="geometryValue" /> 是简单的几何图形。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsValidGeometry(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数必须具有 Edm.Geometry 结果类型规范 IsValidGeometry' 函数调用。
               该表达式的结果类型是 Edm.Boolean。
            </summary>
      <param name="geometryValue">
                指定应该对其测试空间有效性的几何值的表达式。
              </param>
      <returns>
              返回一个布尔值，该值指示新 DbFunctionExpression 是否 <paramref name="geometryValue" /> 是否有效。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Latitude(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数必须具有 Edm.Geography 结果类型规范的纬度函数调用。
               表达式的结果类型为 Edm.Double。
            </summary>
      <param name="geographyValue">
                一个表达式，指定地理点的纬度值应从中检索的值。
              </param>
      <returns>
              返回的纬度值新 DbFunctionExpression <paramref name="geographyValue" /> 或 <see langword="null" /> 如果 <paramref name="geographyValue" /> 不是一个点。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geographyValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geographyValue" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Longitude(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数必须具有 Edm.Geography 结果类型规范经度函数调用。
               表达式的结果类型为 Edm.Double。
            </summary>
      <param name="geographyValue">
                一个表达式，指定地理点应从中检索经度值的值。
              </param>
      <returns>
              返回的经度值新 DbFunctionExpression <paramref name="geographyValue" /> 或 <see langword="null" /> 如果 <paramref name="geographyValue" /> 不是一个点。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geographyValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geographyValue" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Measure(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型规范的度量值函数调用。
               表达式的结果类型为 Edm.Double。
            </summary>
      <param name="spatialValue">
                指定应从中检索度量值 (M) 合作值的空间点值的表达式。
              </param>
      <returns>
              返回的任一的度量值的新 DbFunctionExpression <paramref name="spatialValue" /> 或 <see langword="null" /> 如果 <paramref name="spatialValue" /> 不是一个点。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="spatialValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="spatialValue" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointAt(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数规范 PointAt' 函数调用。
               第一个参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型。
               第二个参数必须具有整数结果类型。
               该表达式的结果类型是相同的 <paramref name="spatialValue" />。
            </summary>
      <param name="spatialValue">
                一个表达式，指定空间行字符串值。
              </param>
      <param name="indexValue">
                一个表达式，指定要从其中检索行字符串内的点的位置。
              </param>
      <returns>
              返回位于点新 DbFunctionExpression <paramref name="indexValue" /> 中 <paramref name="spatialValue" /> 或 <see langword="null" /> 如果 <paramref name="spatialValue" /> 不是行字符串。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="spatialValue" />
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="indexValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="spatialValue" />
                  <paramref name="indexValue" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointCount(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型规范 PointCount' 函数调用。
               该表达式的结果类型为 Edm.Int32。
            </summary>
      <param name="spatialValue">
                一个表达式，指定应从其检索的点的数量的空间行字符串值。
              </param>
      <returns>
              返回的中点数新 DbFunctionExpression <paramref name="spatialValue" /> 或 <see langword="null" /> 如果 <paramref name="spatialValue" /> 不是行字符串。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="spatialValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="spatialValue" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointOnSurface(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数必须具有 Edm.Geometry 结果类型规范 PointOnSurface' 函数调用。
               该表达式的结果类型是 Edm.Geometry。
            </summary>
      <param name="geometryValue">
                指定应从中检索该点的几何图面值的表达式。
              </param>
      <returns>
              返回任一点新 DbFunctionExpression 保证表面上是 <paramref name="geometryValue" /> 或 <see langword="null" /> 如果 <paramref name="geometryValue" /> 不是一个图面。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialBoundary(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数必须具有 Edm.Geometry 结果类型规范 SpatialBoundary' 函数调用。
               该表达式的结果类型是 Edm.Geometry。
            </summary>
      <param name="geometryValue">
                指定应从中检索 SpatialBoundary 值的几何值的表达式。
              </param>
      <returns>
              返回新 DbFunctionExpression 的边界 <paramref name="geometryValue" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialBuffer(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它调用带指定参数，必须具有 Edm.Geography 或 Edm.Geometry 和 Edm.Double 导致类型规范的 SpatialBuffer' 函数。
               该表达式的结果类型是 Edm.Geometry。
            </summary>
      <param name="spatialValue">
                指定的空间值的表达式。
              </param>
      <param name="distance">
                一个表达式，指定缓冲区距离。
              </param>
      <returns>
              返回几何图形值，表示所有新 DbFunctionExpression 点小于或等于 <paramref name="distance" /> 从 <paramref name="spatialValue" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="spatialValue" />
                  <paramref name="distance" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="spatialValue" />
                  <paramref name="distance" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialContains(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数，都必须 Edm.Geometry 结果类型规范 SpatialContains' 函数调用。
               该表达式的结果类型是 Edm.Boolean。
            </summary>
      <param name="geometryValue1">
                一个表达式，指定第一个几何图形值。
              </param>
      <param name="geometryValue2">
                一个表达式，指定应与进行比较的几何值 <paramref name="geometryValue1" />。
              </param>
      <returns>
              返回一个布尔值，该值指示新 DbFunctionExpression 是否 <paramref name="geometryValue1" /> 在空间上包含 <paramref name="geometryValue2" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue1" />
                  <paramref name="geometryValue2" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue1" />
                  <paramref name="geometryValue2" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialConvexHull(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数必须具有 Edm.Geometry 结果类型规范 SpatialConvexHull' 函数调用。
               该表达式的结果类型是 Edm.Geometry。
            </summary>
      <param name="geometryValue">
                指定应从中检索凸球面值的几何值的表达式。
              </param>
      <returns>
              返回新 DbFunctionExpression 的凸包 <paramref name="geometryValue" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialCrosses(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数，都必须 Edm.Geometry 结果类型规范 SpatialCrosses' 函数调用。
               该表达式的结果类型是 Edm.Boolean。
            </summary>
      <param name="geometryValue1">
                一个表达式，指定第一个几何图形值。
              </param>
      <param name="geometryValue2">
                一个表达式，指定应与进行比较的几何值 <paramref name="geometryValue1" />。
              </param>
      <returns>
              返回一个布尔值，该值指示新 DbFunctionExpression 是否 <paramref name="geometryValue1" /> 跨越 <paramref name="geometryValue2" /> 相交。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue1" />
                  <paramref name="geometryValue2" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue1" />
                  <paramref name="geometryValue2" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDifference(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它调用带指定参数，都必须可 Edm.Geography 或 Edm.Geometry 结果类型规范的 SpatialDifference' 函数。
               结果类型 <paramref name="spatialValue1" /> 必须与匹配的结果类型 <paramref name="spatialValue2" />。
               该表达式的结果类型为的类型相同 <paramref name="spatialValue1" /> 和 <paramref name="spatialValue2" />。
            </summary>
      <param name="spatialValue1">
                一个表达式，指定第一个空间值。
              </param>
      <param name="spatialValue2">
                为其指定的空间值的表达式的不同之处 <paramref name="spatialValue1" /> 应计算。
              </param>
      <returns>
              返回表示之间的差异的几何值新 DbFunctionExpression <paramref name="spatialValue2" /> 与 <paramref name="spatialValue1" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="spatialValue1" />
                  <paramref name="spatialValue2" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="spatialValue1" />
                  <paramref name="spatialValue2" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDimension(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型规范 SpatialDimension' 函数调用。
               该表达式的结果类型为 Edm.Int32。
            </summary>
      <param name="spatialValue">
                一个表达式，指定应从其检索维度值的值。
              </param>
      <returns>
              返回维度值从新 DbFunctionExpression <paramref name="spatialValue" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="spatialValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="spatialValue" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDisjoint(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它调用带指定参数，都必须可 Edm.Geography 或 Edm.Geometry 结果类型规范的 SpatialDisjoint' 函数。
               结果类型 <paramref name="spatialValue1" /> 必须与匹配的结果类型 <paramref name="spatialValue2" />。
               该表达式的结果类型是 Edm.Boolean。
            </summary>
      <param name="spatialValue1">
                一个表达式，指定第一个空间值。
              </param>
      <param name="spatialValue2">
                一个表达式，指定的空间值应与比较 <paramref name="spatialValue1" /> 为 disjointness。
              </param>
      <returns>
              返回一个布尔值，该值指示新 DbFunctionExpression 是否 <paramref name="spatialValue1" /> 和 <paramref name="spatialValue2" /> 是空间上不相联。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="spatialValue1" />
                  <paramref name="spatialValue2" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="spatialValue1" />
                  <paramref name="spatialValue2" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialElementAt(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数规范 SpatialElementAt' 函数调用。
               第一个参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型。
               第二个参数必须具有整数结果类型。
               该表达式的结果类型是相同的 <paramref name="spatialValue" />。
            </summary>
      <param name="spatialValue">
                指定地理或几何集合值的表达式。
              </param>
      <param name="indexValue">
                一个表达式，指定要从几何图形或地理集合中检索到的元素的位置。
              </param>
      <returns>
              返回位置处的集合元素的新 DbFunctionExpression <paramref name="indexValue" /> 中 <paramref name="spatialValue" /> 或 <see langword="null" /> 如果 <paramref name="spatialValue" /> 不是一个集合。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="spatialValue" />
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="indexValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="spatialValue" />
                  <paramref name="indexValue" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialElementCount(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型规范 SpatialElementCount' 函数调用。
               该表达式的结果类型为 Edm.Int32。
            </summary>
      <param name="spatialValue">
                表达式指定地理或几何集合值应从中检索元素的数目。
              </param>
      <returns>
              返回的中的元素数新 DbFunctionExpression <paramref name="spatialValue" /> 或 <see langword="null" /> 如果 <paramref name="spatialValue" /> 不是一个集合。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="spatialValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="spatialValue" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialEnvelope(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数必须具有 Edm.Geometry 结果类型规范 SpatialEnvelope' 函数调用。
               该表达式的结果类型是 Edm.Geometry。
            </summary>
      <param name="geometryValue">
                一个表达式，指定应从中检索信封值的值。
              </param>
      <returns>
              返回新 DbFunctionExpression 的最小值边界框 <paramref name="geometryValue" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialEquals(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它调用带指定参数，都必须可 Edm.Geography 或 Edm.Geometry 结果类型规范的 SpatialEquals' 函数。
               结果类型 <paramref name="spatialValue1" /> 必须与匹配的结果类型 <paramref name="spatialValue2" />。
               该表达式的结果类型是 Edm.Boolean。
            </summary>
      <param name="spatialValue1">
                一个表达式，指定第一个空间值。
              </param>
      <param name="spatialValue2">
                一个表达式，指定的空间值应与比较 <paramref name="spatialValue1" /> 是否相等。
              </param>
      <returns>
              返回一个布尔值，该值指示新 DbFunctionExpression 是否 <paramref name="spatialValue1" /> 和 <paramref name="spatialValue2" /> 是否相等。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="spatialValue1" />
                  <paramref name="spatialValue2" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="spatialValue1" />
                  <paramref name="spatialValue2" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialIntersection(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它调用带指定参数，都必须可 Edm.Geography 或 Edm.Geometry 结果类型规范的 SpatialIntersection' 函数。
               结果类型 <paramref name="spatialValue1" /> 必须与匹配的结果类型 <paramref name="spatialValue2" />。
               该表达式的结果类型为的类型相同 <paramref name="spatialValue1" /> 和 <paramref name="spatialValue2" />。
            </summary>
      <param name="spatialValue1">
                一个表达式，指定第一个空间值。
              </param>
      <param name="spatialValue2">
                为其指定的空间值的表达式与的交点 <paramref name="spatialValue1" /> 应计算。
              </param>
      <returns>
              返回表示之间的交集的空间值的新 DbFunctionExpression <paramref name="spatialValue1" /> 和 <paramref name="spatialValue2" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="spatialValue1" />
                  <paramref name="spatialValue2" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="spatialValue1" />
                  <paramref name="spatialValue2" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialIntersects(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它调用带指定参数，都必须可 Edm.Geography 或 Edm.Geometry 结果类型规范的 SpatialIntersects' 函数。
               结果类型 <paramref name="spatialValue1" /> 必须与匹配的结果类型 <paramref name="spatialValue2" />。
               该表达式的结果类型是 Edm.Boolean。
            </summary>
      <param name="spatialValue1">
                一个表达式，指定第一个空间值。
              </param>
      <param name="spatialValue2">
                一个表达式，指定的空间值应与比较 <paramref name="spatialValue1" /> 的交集。
              </param>
      <returns>
              返回一个布尔值，该值指示新 DbFunctionExpression 是否 <paramref name="spatialValue1" /> 和 <paramref name="spatialValue2" /> 相交。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="spatialValue1" />
                  <paramref name="spatialValue2" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="spatialValue1" />
                  <paramref name="spatialValue2" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialLength(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型规范 SpatialLength' 函数调用。
               表达式的结果类型为 Edm.Double。
            </summary>
      <param name="spatialValue">
                指定应从其检索长度的空间曲线值的表达式。
              </param>
      <returns>
              返回的长度新 DbFunctionExpression <paramref name="spatialValue" /> 或 <see langword="null" /> 如果 <paramref name="spatialValue" /> 不是一条曲线。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="spatialValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="spatialValue" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialOverlaps(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数，都必须 Edm.Geometry 结果类型规范 SpatialOverlaps' 函数调用。
               该表达式的结果类型是 Edm.Boolean。
            </summary>
      <param name="geometryValue1">
                一个表达式，指定第一个几何图形值。
              </param>
      <param name="geometryValue2">
                一个表达式，指定应与进行比较的几何值 <paramref name="geometryValue1" />。
              </param>
      <returns>
              返回一个布尔值，该值指示新 DbFunctionExpression 是否 <paramref name="geometryValue1" /> 空间上与重叠 <paramref name="geometryValue2" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue1" />
                  <paramref name="geometryValue2" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue1" />
                  <paramref name="geometryValue2" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialRelate(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数，必须使用 Edm.Geometry 和字符串的结果类型规范 SpatialRelate' 函数调用。
               该表达式的结果类型是 Edm.Boolean。
            </summary>
      <param name="geometryValue1">
                一个表达式，指定第一个几何图形值。
              </param>
      <param name="geometryValue2">
                一个表达式，指定应与进行比较的几何值 <paramref name="geometryValue1" />。
              </param>
      <param name="intersectionPatternMatrix">
                一个表达式，指定的文本表示形式的维扩展 9 交集的模型 (DE 9IM) 交集模式用于比较 <paramref name="geometryValue1" /> 和 <paramref name="geometryValue2" />。
              </param>
      <returns>
              返回一个布尔值，该值指示新 DbFunctionExpression 是否 <paramref name="geometryValue1" /> 空间上与 <paramref name="geometryValue2" /> 根据指定的空间关系 <paramref name="intersectionPatternMatrix" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue1" />
                  <paramref name="geometryValue2" />
                  <paramref name="intersectionPatternMatrix" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue1" />
                  <paramref name="geometryValue2" />
                  <paramref name="intersectionPatternMatrix" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialSymmetricDifference(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它调用带指定参数，都必须可 Edm.Geography 或 Edm.Geometry 结果类型规范的 SpatialSymmetricDifference' 函数。
               结果类型 <paramref name="spatialValue1" /> 必须与匹配的结果类型 <paramref name="spatialValue2" />。
               该表达式的结果类型为的类型相同 <paramref name="spatialValue1" /> 和 <paramref name="spatialValue2" />。
            </summary>
      <param name="spatialValue1">
                一个表达式，指定第一个空间值。
              </param>
      <param name="spatialValue2">
                为其指定的空间值的表达式与的余集 <paramref name="spatialValue1" /> 应计算。
              </param>
      <returns>
              返回表示个的余集的几何值新 DbFunctionExpression <paramref name="spatialValue2" /> 与 <paramref name="spatialValue1" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="spatialValue1" />
                  <paramref name="spatialValue2" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="spatialValue1" />
                  <paramref name="spatialValue2" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialTouches(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数，都必须 Edm.Geometry 结果类型规范 SpatialTouches' 函数调用。
               该表达式的结果类型是 Edm.Boolean。
            </summary>
      <param name="geometryValue1">
                一个表达式，指定第一个几何图形值。
              </param>
      <param name="geometryValue2">
                一个表达式，指定应与进行比较的几何值 <paramref name="geometryValue1" />。
              </param>
      <returns>
              返回一个布尔值，该值指示新 DbFunctionExpression 是否 <paramref name="geometryValue1" /> 接触 <paramref name="geometryValue2" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue1" />
                  <paramref name="geometryValue2" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue1" />
                  <paramref name="geometryValue2" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialTypeName(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型规范 SpatialTypeName' 函数调用。
               表达式的结果类型为 Edm.String。
            </summary>
      <param name="spatialValue">
                一个表达式，指定应从其检索几何图形类型名称的值。
              </param>
      <returns>
              返回字符串的几何图形类型名称，从新 DbFunctionExpression <paramref name="spatialValue" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="spatialValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="spatialValue" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialUnion(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它调用带指定参数，都必须可 Edm.Geography 或 Edm.Geometry 结果类型规范的 SpatialUnion' 函数。
               结果类型 <paramref name="spatialValue1" /> 必须与匹配的结果类型 <paramref name="spatialValue2" />。
               该表达式的结果类型为的类型相同 <paramref name="spatialValue1" /> 和 <paramref name="spatialValue2" />。
            </summary>
      <param name="spatialValue1">
                一个表达式，指定第一个空间值。
              </param>
      <param name="spatialValue2">
                为其指定的空间值的表达式具有联合 <paramref name="spatialValue1" /> 应计算。
              </param>
      <returns>
              返回表示的并集的空间值的新 DbFunctionExpression <paramref name="spatialValue1" /> 和 <paramref name="spatialValue2" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="spatialValue1" />
                  <paramref name="spatialValue2" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="spatialValue1" />
                  <paramref name="spatialValue2" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialWithin(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数，都必须 Edm.Geometry 结果类型规范 SpatialWithin' 函数调用。
               该表达式的结果类型是 Edm.Boolean。
            </summary>
      <param name="geometryValue1">
                一个表达式，指定第一个几何图形值。
              </param>
      <param name="geometryValue2">
                一个表达式，指定应与进行比较的几何值 <paramref name="geometryValue1" />。
              </param>
      <returns>
              返回一个布尔值，该值指示新 DbFunctionExpression 是否 <paramref name="geometryValue1" /> 是空间上内 <paramref name="geometryValue2" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue1" />
                  <paramref name="geometryValue2" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue1" />
                  <paramref name="geometryValue2" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.StartPoint(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数必须具有 Edm.Geography 或 Edm.Geometry 结果类型规范的起始点函数调用。
               结果类型是相同的 <paramref name="spatialValue" />。
            </summary>
      <param name="spatialValue">
                应检索指定从其开始点的空间曲线值的表达式。
              </param>
      <returns>
              返回的起始点新 DbFunctionExpression <paramref name="spatialValue" /> 或 <see langword="null" /> 如果 <paramref name="spatialValue" /> 不是一条曲线。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="spatialValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="spatialValue" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.XCoordinate(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数必须具有 Edm.Geometry 结果类型规范 XCoordinate' 函数调用。
               表达式的结果类型为 Edm.Double。
            </summary>
      <param name="geometryValue">
                指定应从其检索 X 合作值的几何点值的表达式。
              </param>
      <returns>
              返回任一 X 合作的值的新 DbFunctionExpression <paramref name="geometryValue" /> 或 <see langword="null" /> 如果 <paramref name="geometryValue" /> 不是一个点。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                </exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.YCoordinate(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建 <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> ，它使用指定的参数必须具有 Edm.Geometry 结果类型规范 YCoordinate' 函数调用。
               表达式的结果类型为 Edm.Double。
            </summary>
      <param name="geometryValue">
                指定应从其检索 Y 合作值的几何点值的表达式。
              </param>
      <returns>
              返回的任一 Y 合作值新 DbFunctionExpression <paramref name="geometryValue" /> 或 <see langword="null" /> 如果 <paramref name="geometryValue" /> 不是一个点。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                </exception>
    </member>
    <member name="M:System.Data.Common.DataRecordInfo.#ctor(System.Data.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Data.Metadata.Edm.EdmMember})">
      <summary>
              使用数据字段的可枚举集合初始化一个特定类型的新 <see cref="T:System.Data.Common.DbDataRecord" /> 对象。
            </summary>
      <param name="metadata">
                此对象表示的类型的元数据，由 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 提供。
              </param>
      <param name="memberInfo">
                表示列信息的 <see cref="T:System.Data.Metadata.Edm.EdmMember" /> 对象的可枚举集合。
              </param>
    </member>
    <member name="M:System.Data.Common.DbCommandDefinition.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Common.DbCommandDefinition" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Common.DbCommandDefinition.#ctor(System.Data.Common.DbCommand)">
      <summary>
              新实例初始化 <see cref="T:System.Data.Common.DbCommandDefinition" /> 类使用所提供 <see cref="T:System.Data.Common.DbCommand" />。
            </summary>
      <param name="prototype">
                提供的 <see cref="T:System.Data.Common.DbCommand" />。
              </param>
    </member>
    <member name="M:System.Data.Common.DbCommandDefinition.CreateCommand">
      <summary>
              创建并返回一个可执行的 <see cref="T:System.Data.Common.DbCommand" /> 对象。
            </summary>
      <returns>
              数据库命令。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Common.DbProviderManifest" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.EscapeLikeArgument(System.String)">
      <summary>
              提供程序作者应重写此方法以返回具有通配符和转义符转义的参数。
               如果 SupportsEscapingLikeArgument，则返回 true，则仅使用此方法。
            </summary>
      <param name="argument">
                要对其进行转义的参数。
              </param>
      <returns>
              使用通配符和转义符的参数转义。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetDbInformation(System.String)">
      <summary>
              当在派生类中重写此方法返回提供程序特定的信息。
            </summary>
      <param name="informationType">
                要返回的信息的类型。
              </param>
      <returns>
              XmlReader 对象，表示映射到基础数据存储目录。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetEdmType(System.Data.Metadata.Edm.TypeUsage)">
      <summary>
              当在派生类中重写此方法将指定的存储类型以及该类型的方面的一组映射到 EDM 类型。
            </summary>
      <param name="storeType">
                TypeUsage 实例描述的存储类型和该类型的方面的一组映射到 EDM 类型。
              </param>
      <returns>
              <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 描述 EDM 类型以及该类型的方面的一组的实例。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetFacetDescriptions(System.Data.Metadata.Edm.EdmType)">
      <summary>
              返回特定类型的 FacetDescription 对象。
            </summary>
      <param name="edmType">
                要返回的方面说明的 EDM 类型。
              </param>
      <returns>
              指定的 EDM 类型 FacetDescription 对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetInformation(System.String)">
      <summary>
              获取提供程序特定信息。
            </summary>
      <param name="informationType">
                要返回的信息的类型。
              </param>
      <returns>
              提供程序特定的信息。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetStoreFunctions">
      <summary>
              当在派生类中重写，则返回的提供程序清单支持 EDM 函数的集合。
            </summary>
      <returns>
              EDM 函数的集合。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetStoreType(System.Data.Metadata.Edm.TypeUsage)">
      <summary>
              当在派生类中重写此方法将指定的 EDM 类型和该类型的方面的一组映射到存储类型。
            </summary>
      <param name="edmType">
                描述 EDM 类型和该类型的方面的一组映射到存储类型 TypeUsage 实例。
              </param>
      <returns>
              描述存储类型以及该类型的方面的一组 TypeUsage 实例。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetStoreTypes">
      <summary>
              当在派生类中重写时返回数据源所支持的基元类型的集。
            </summary>
      <returns>
              数据源所支持的类型集。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.SupportsEscapingLikeArgument(System.Char@)">
      <summary>
              指示提供程序是否支持转义字符串用作 Like 表达式中的模式。
            </summary>
      <param name="escapeCharacter">
                如果该提供程序支持转义，要用作转义符的字符。
              </param>
      <returns>
              <see langword="True" /> 如果此提供程序支持转义字符串用作 Like 表达式; 中的模式否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Common.DbProviderServices" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.CreateCommandDefinition(System.Data.Common.CommandTrees.DbCommandTree)">
      <summary>
              从命令树创建命令定义。
            </summary>
      <param name="commandTree">
                命令目录树。
              </param>
      <returns>
              创建的命令定义。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.CreateCommandDefinition(System.Data.Common.DbCommand)">
      <summary>
              创建使用指定的命令的命令定义。
            </summary>
      <param name="prototype">
                用于创建命令定义的命令。
              </param>
      <returns>
              使用指定的命令创建的命令定义。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.CreateCommandDefinition(System.Data.Common.DbProviderManifest,System.Data.Common.CommandTrees.DbCommandTree)">
      <summary>
              从指定的清单 andcommand 树创建命令定义。
            </summary>
      <param name="providerManifest">
                清单。
              </param>
      <param name="commandTree">
                命令目录树。
              </param>
      <returns>
              创建的命令定义。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.CreateDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Metadata.Edm.StoreItemCollection)">
      <summary>
              创建由连接的数据库并创建架构对象。
            </summary>
      <param name="connection">
                StoreItemCollection 参数用指示为不存在的数据库，需要创建并填充其存储对象的连接。
              </param>
      <param name="commandTimeout">
                创建数据库所需的任何命令的执行超时值。
              </param>
      <param name="storeItemCollection">
                所有的集合存储基础创建脚本的项目。
              </param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.CreateDatabaseScript(System.String,System.Data.Metadata.Edm.StoreItemCollection)">
      <summary>
              生成数据定义语言 （DDL 脚本，创建架构对象 （表、 主键、 外键） 基于 StoreItemCollection 参数的内容，并且目标提供程序清单标记与对应的数据库的版本。
            </summary>
      <param name="providerManifestToken">
                标识目标版本的提供程序清单标记。
              </param>
      <param name="storeItemCollection">
                数据库的结构。
              </param>
      <returns>
              创建架构对象的 DDL 脚本基于 StoreItemCollection 参数的内容，并且目标提供程序清单标记与对应的数据库的版本。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.CreateDbCommandDefinition(System.Data.Common.DbProviderManifest,System.Data.Common.CommandTrees.DbCommandTree)">
      <summary>
              创建命令定义对象为指定的提供程序清单和命令目录树。
            </summary>
      <param name="providerManifest">
                从存储区提供程序以前检索提供程序清单。
              </param>
      <param name="commandTree">
                该语句的命令目录树。
              </param>
      <returns>
              一个可执行命令定义对象。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.DatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Metadata.Edm.StoreItemCollection)">
      <summary>
              返回一个值，该值指定的数据库是否在服务器上存在，并且是否已创建 storeItemCollection 中包含的架构对象。
            </summary>
      <param name="connection">
                可以通过此方法来验证其存在数据库连接。
              </param>
      <param name="commandTimeout">
                确定数据库存在所需的任何命令的执行超时值。
              </param>
      <param name="storeItemCollection">
                所有的集合存储通过此方法确定其存在性数据库中包含的项。
              </param>
      <returns>
              如果提供程序就可以推断出仅基于连接的数据库，则为 true。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.DbCreateDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Metadata.Edm.StoreItemCollection)">
      <summary>
              创建由连接的数据库并创建根据 StoreItemCollection 的内容的架构对象 （表、 主键、 外键）。
            </summary>
      <param name="connection">
                StoreItemCollection 参数用指示为不存在的数据库，需要创建并填充其存储对象的连接。
              </param>
      <param name="commandTimeout">
                创建数据库所需的任何命令的执行超时值。
              </param>
      <param name="storeItemCollection">
                所有的集合存储基础创建脚本的项目。
              </param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.DbCreateDatabaseScript(System.String,System.Data.Metadata.Edm.StoreItemCollection)">
      <summary>
              生成数据定义语言 （DDL 脚本，创建架构对象 （表、 主键、 外键） 基于 StoreItemCollection 参数的内容，并且目标提供程序清单标记与对应的数据库的版本。
            </summary>
      <param name="providerManifestToken">
                标识目标版本的提供程序清单标记。
              </param>
      <param name="storeItemCollection">
                数据库的结构。
              </param>
      <returns>
              创建架构对象的 DDL 脚本基于 StoreItemCollection 参数的内容，并且目标提供程序清单标记与对应的数据库的版本。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.DbDatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Metadata.Edm.StoreItemCollection)">
      <summary>
              返回一个值，该值指定的数据库是否在服务器上存在，并且是否已创建 storeItemCollection 中包含的架构对象。
            </summary>
      <param name="connection">
                可以通过此方法来验证其存在数据库连接。
              </param>
      <param name="commandTimeout">
                确定数据库存在所需的任何命令的执行超时值。
              </param>
      <param name="storeItemCollection">
                通过此方法确定其存在性数据库的结构。
              </param>
      <returns>
              <see langword="True" /> 如果不存在连接和 storeItemCollection 参数所指示的数据库;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.DbDeleteDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Metadata.Edm.StoreItemCollection)">
      <summary>
              删除在从数据库和数据库本身的存储项集合中指定的所有存储对象。
            </summary>
      <param name="connection">
                需要删除现有数据库连接。
              </param>
      <param name="commandTimeout">
                删除数据库所需的任何命令的执行超时值。
              </param>
      <param name="storeItemCollection">
                要删除的数据库的结构。
              </param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.DbGetSpatialServices(System.String)">
      <summary>
              获取有关的空间服务 <see cref="T:System.Data.Common.DbProviderServices" />。
            </summary>
      <param name="manifestToken">
                与提供程序清单关联的令牌信息。
              </param>
      <returns>
              空间的服务。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.DeleteDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Metadata.Edm.StoreItemCollection)">
      <summary>
              删除在从数据库和数据库本身的存储项集合中指定的所有存储对象。
            </summary>
      <param name="connection">
                需要删除现有数据库连接。
              </param>
      <param name="commandTimeout">
                删除数据库所需的任何命令的执行超时值。
              </param>
      <param name="storeItemCollection">
                要删除的数据库的结构。
              </param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetDbProviderManifest(System.String)">
      <summary>
              当在派生类中重写，则返回从 DbProviderManifest 派生而来的类的实例。
            </summary>
      <param name="manifestToken">
                与提供程序清单关联的令牌信息。
              </param>
      <returns>
              DbProviderManifest 对象，表示提供程序清单。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetDbProviderManifestToken(System.Data.Common.DbConnection)">
      <summary>
              返回给定连接的提供程序清单标记。
            </summary>
      <param name="connection">
                到提供程序的连接。
              </param>
      <returns>
              指定的连接提供程序清单标记。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetDbSpatialDataReader(System.Data.Common.DbDataReader,System.String)">
      <summary>
              获取有关的空间数据读取器 <see cref="T:System.Data.Common.DbProviderServices" />。
            </summary>
      <param name="fromReader">
                空间数据来自何处读取器。
              </param>
      <param name="manifestToken">
                与提供程序清单关联的令牌信息。
              </param>
      <returns>
              空间数据读取器。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetProviderFactory(System.Data.Common.DbConnection)">
      <summary>
              检索基于指定的 DbConnection DbProviderFactory。
            </summary>
      <param name="connection">
                要使用的连接。
              </param>
      <returns>
              检索到的 DbProviderFactory。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetProviderManifest(System.String)">
      <summary>
              使用指定的版本信息返回提供程序清单。
            </summary>
      <param name="manifestToken">
                与提供程序清单关联的令牌信息。
              </param>
      <returns>
              通过使用指定的版本信息提供程序清单。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetProviderManifestToken(System.Data.Common.DbConnection)">
      <summary>
              返回提供程序清单标记。
            </summary>
      <param name="connection">
                到提供程序的连接。
              </param>
      <returns>
              提供程序清单标记。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetProviderServices(System.Data.Common.DbConnection)">
      <summary>
              返回给定连接的提供程序。
            </summary>
      <param name="connection">
                到提供程序的连接。
              </param>
      <returns>
              <see cref="T:System.Data.Common.DbProviderServices" /> 在实例化基于指定的连接。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetSpatialDataReader(System.Data.Common.DbDataReader,System.String)">
      <summary>
              获取有关的空间数据读取器 <see cref="T:System.Data.Common.DbProviderServices" />。
            </summary>
      <param name="fromReader">
                空间数据来自何处读取器。
              </param>
      <param name="manifestToken">
                与提供程序清单关联的令牌信息。
              </param>
      <returns>
              空间数据读取器。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetSpatialServices(System.String)">
      <summary>
              获取有关的空间服务 <see cref="T:System.Data.Common.DbProviderServices" />。
            </summary>
      <param name="manifestToken">
                与提供程序清单关联的令牌信息。
              </param>
      <returns>
              空间的服务。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.SetDbParameterValue(System.Data.Common.DbParameter,System.Data.Metadata.Edm.TypeUsage,System.Object)">
      <summary>
              设置的参数值 <see cref="T:System.Data.Common.DbProviderServices" />。
            </summary>
      <param name="parameter">
                参数。
              </param>
      <param name="parameterType">
                参数的类型。
              </param>
      <param name="value">
                参数的值。
              </param>
    </member>
    <member name="M:System.Data.Common.DbXmlEnabledProviderManifest.#ctor(System.Xml.XmlReader)">
      <summary>
              初始化 <see cref="T:System.Data.Common.DbXmlEnabledProviderManifest" /> 类的新实例。
            </summary>
      <param name="reader">
                一个 <see cref="T:System.Xml.XmlReader" /> 对象，该对象提供对提供程序清单文件中的 XML 数据的访问。
              </param>
    </member>
    <member name="M:System.Data.Common.DbXmlEnabledProviderManifest.GetFacetDescriptions(System.Data.Metadata.Edm.EdmType)">
      <summary>
              返回指定的 Entity Data Model (EDM) 类型的方面说明列表。
            </summary>
      <param name="type">
                要为其检索方面说明的 <see cref="T:System.Data.Metadata.Edm.EdmType" />。
              </param>
      <returns>
              一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的集合，其中包含指定的 EDM 类型的方面说明列表。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbXmlEnabledProviderManifest.GetStoreFunctions">
      <summary>
              返回提供程序支持的函数的列表。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的集合，其中包含提供程序支持的函数的列表。
            </returns>
    </member>
    <member name="M:System.Data.Common.DbXmlEnabledProviderManifest.GetStoreTypes">
      <summary>
              返回存储提供程序支持的基元类型的列表。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的集合，其中包含存储提供程序支持的基元类型的列表。
            </returns>
    </member>
    <member name="M:System.Data.Common.EntityRecordInfo.#ctor(System.Data.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Metadata.Edm.EdmMember},System.Data.EntityKey,System.Data.Metadata.Edm.EntitySet)">
      <summary>
              新实例初始化 <see cref="T:System.Data.Common.EntityRecordInfo" /> 特定实体类型与数据字段的可枚举集合和特定的键和实体集信息的类。
            </summary>
      <param name="metadata">
                <see cref="T:System.Data.Metadata.Edm.EntityType" /> 表示的实体的 <see cref="T:System.Data.Common.DbDataRecord" /> 描述 <see cref="T:System.Data.Common.EntityRecordInfo" /> 对象。
              </param>
      <param name="memberInfo">
                表示列信息的 <see cref="T:System.Data.Metadata.Edm.EdmMember" /> 对象的可枚举集合。
              </param>
      <param name="entityKey">
                实体键。
              </param>
      <param name="entitySet">
                设置为该实体所属的实体。
              </param>
    </member>
    <member name="M:System.Data.Common.EntitySql.EntitySqlParser.Parse(System.String,System.Data.Common.CommandTrees.DbParameterReferenceExpression[])">
      <summary>
              分析指定 <paramref name="query" /> 具有指定 <paramref name="parameters" />。
            </summary>
      <param name="query">
                要分析的 EntitySQL 查询。
              </param>
      <param name="parameters">
                可选查询参数。
              </param>
      <returns>
              <see cref="T:System.Data.Common.EntitySql.ParseResult" /> 包含 <see cref="T:System.Data.Common.CommandTrees.DbCommandTree" /> 和描述内联函数定义，如果任何信息。
            </returns>
    </member>
    <member name="M:System.Data.Common.EntitySql.EntitySqlParser.ParseLambda(System.String,System.Data.Common.CommandTrees.DbVariableReferenceExpression[])">
      <summary>
              分析特定 <paramref name="query" /> 用一组特定 <paramref name="variables" /> 并生成 <see cref="T:System.Data.Common.CommandTrees.DbLambda" />。
            </summary>
      <param name="query">
                要分析的查询。
              </param>
      <param name="variables">
                可选的查询变量中。
              </param>
      <returns>
              <see cref="T:System.Data.Common.EntitySql.ParseResult" /> 包含 <see cref="T:System.Data.Common.CommandTrees.DbCommandTree" /> 和描述内联函数定义，如果任何信息。
            </returns>
    </member>
    <member name="M:System.Data.Common.FieldMetadata.#ctor(System.Int32,System.Data.Metadata.Edm.EdmMember)">
      <summary>
              使用指定的序号值和字段类型初始化新的 <see cref="T:System.Data.Common.FieldMetadata" /> 对象。
            </summary>
      <param name="ordinal">
                用于指定元数据位置的整数。
              </param>
      <param name="fieldType">
                字段类型。
              </param>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.Data.EntityClient.EntityCommand" /> 类使用指定的值。
            </summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Data.EntityClient.EntityCommand" /> 类，具有指定的语句。
            </summary>
      <param name="statement">
                命令的文本。
              </param>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.#ctor(System.String,System.Data.EntityClient.EntityConnection)">
      <summary>
              新实例初始化 <see cref="T:System.Data.EntityClient.EntityCommand" /> 使用指定的语句和连接的类。
            </summary>
      <param name="statement">
                命令的文本。
              </param>
      <param name="connection">
                与数据源的连接。
              </param>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.#ctor(System.String,System.Data.EntityClient.EntityConnection,System.Data.EntityClient.EntityTransaction)">
      <summary>
              新实例初始化 <see cref="T:System.Data.EntityClient.EntityCommand" /> 用指定的语句、 连接和事务。
            </summary>
      <param name="statement">
                命令的文本。
              </param>
      <param name="connection">
                与数据源的连接。
              </param>
      <param name="transaction">
                该命令在其中执行的事务。
              </param>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.Cancel">
      <summary>
              取消执行 <see cref="T:System.Data.EntityClient.EntityCommand" />。
            </summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.CreateParameter">
      <summary>
              创建的新实例 <see cref="T:System.Data.EntityClient.EntityParameter" /> 对象。
            </summary>
      <returns>
              新实例 <see cref="T:System.Data.EntityClient.EntityParameter" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.ExecuteNonQuery">
      <summary>
              执行当前命令。
            </summary>
      <returns>
              受影响的行数。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.ExecuteReader">
      <summary>
              执行命令并返回一个数据读取器。
            </summary>
      <returns>
              包含结果的 <see cref="T:System.Data.EntityClient.EntityDataReader" />。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.ExecuteReader(System.Data.CommandBehavior)">
      <summary>
              编译 <see cref="P:System.Data.EntityClient.EntityCommand.CommandText" /> 到命令目录树并将传递到基础存储提供程序的执行，然后生成 <see cref="T:System.Data.EntityClient.EntityDataReader" /> 外产生的结果集使用指定 <see cref="T:System.Data.CommandBehavior" />。
            </summary>
      <param name="behavior">
                <see cref="T:System.Data.CommandBehavior" /> 值之一。
              </param>
      <returns>
              包含结果的 <see cref="T:System.Data.EntityClient.EntityDataReader" />。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.ExecuteScalar">
      <summary>
              执行命令，并返回结果集中第一行的第一列。
               其他列或行将被忽略。
            </summary>
      <returns>
              在结果中的第一行的第一列设置，或空引用 (在 Visual Basic 中为 Nothing) 的结果集是否为空。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.Prepare">
      <summary>
              编译实体级别的命令，并创建该命令的预备的版本。
            </summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.ToTraceString">
      <summary>
              编译实体级别的命令并返回存储命令文本。
            </summary>
      <returns>
              存储命令文本。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.EntityClient.EntityConnection" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.#ctor(System.Data.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection)">
      <summary>
              新实例初始化 <see cref="T:System.Data.EntityClient.EntityConnection" /> 与指定类 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> 和 <see cref="T:System.Data.Common.DbConnection" />。
            </summary>
      <param name="workspace">
                与此 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> 关联的 <see cref="T:System.Data.EntityClient.EntityConnection" />。
              </param>
      <param name="connection">
                此 <see cref="T:System.Data.EntityClient.EntityConnection" /> 对象的基础数据源连接。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="workspace" /> 或 <paramref name="connection" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  工作区缺少概念性模型。
                
                  - 或 -
                
                  工作区缺少映射文件。
                
                  - 或 -
                
                  工作区缺少存储模型。
                
                  - 或 -
                
                  <paramref name="connection" /> 未处于关闭状态。
                </exception>
      <exception cref="T:System.Data.ProviderIncompatibleException">
                  <paramref name="connection" /> 不是来自 ADO.NET 实体框架兼容的提供程序。
                </exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.#ctor(System.String)">
      <summary>
              基于连接字符串初始化 <see cref="T:System.Data.EntityClient.EntityConnection" /> 类的新实例。
            </summary>
      <param name="connectionString">
                提供程序特定的连接字符串。
              </param>
      <exception cref="T:System.ArgumentException">
                  提供的连接字符串关键字无效，或未提供所需的连接字符串关键字。
                </exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.BeginTransaction">
      <summary>
              使用基础提供程序开始一个事务。
            </summary>
      <returns>
              一个新的 <see cref="T:System.Data.EntityClient.EntityTransaction" />。
               返回的 <see cref="T:System.Data.EntityClient.EntityTransaction" /> 实例以后可以与 <see cref="T:System.Data.EntityClient.EntityCommand" /> 关联以执行该事务下的命令。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  基础提供程序未知。
                
                  - 或 -
                
                  对调用 <see cref="M:System.Data.EntityClient.EntityConnection.BeginTransaction" /> 进行 <see cref="T:System.Data.EntityClient.EntityConnection" /> 对已具有当前事务。
                
                  - 或 -
                
                  <see cref="T:System.Data.EntityClient.EntityConnection" /> 的状态不是 <see cref="F:System.Data.ConnectionState.Open" />。
                </exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.BeginTransaction(System.Data.IsolationLevel)">
      <summary>
              使用基础提供程序开始一个具有指定隔离级别的事务。
            </summary>
      <param name="isolationLevel">
                事务的隔离级别。
              </param>
      <returns>
              一个新的 <see cref="T:System.Data.EntityClient.EntityTransaction" />。
               返回的 <see cref="T:System.Data.EntityClient.EntityTransaction" /> 实例以后可以与 <see cref="T:System.Data.EntityClient.EntityCommand" /> 关联以执行该事务下的命令。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  基础提供程序未知。
                
                  - 或 -
                
                  对调用 <see cref="M:System.Data.EntityClient.EntityConnection.BeginTransaction" /> 进行 <see cref="T:System.Data.EntityClient.EntityConnection" /> 对已具有当前事务。
                
                  - 或 -
                
                  <see cref="T:System.Data.EntityClient.EntityConnection" /> 的状态不是 <see cref="F:System.Data.ConnectionState.Open" />。
                </exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.ChangeDatabase(System.String)">
      <summary>
              不支持。
            </summary>
      <param name="databaseName">
                不支持。
              </param>
      <exception cref="T:System.NotSupportedException">
                  当调用该方法。
                </exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.Close">
      <summary>
              关闭与数据库之间的连接。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  关闭连接时出错。
                </exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.CreateCommand">
      <summary>
              在 <see cref="T:System.Data.EntityClient.EntityCommand" /> 设置为此 <see cref="P:System.Data.EntityClient.EntityCommand.Connection" /> 的情况下创建 <see cref="T:System.Data.EntityClient.EntityConnection" /> 的新实例。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.EntityClient.EntityCommand" /> 对象。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  基础数据提供程序的名称未知。
                </exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.EnlistTransaction(System.Transactions.Transaction)">
      <summary>
              在指定的事务中登记此 <see cref="T:System.Data.EntityClient.EntityConnection" />。
            </summary>
      <param name="transaction">
                要在其中进行登记的事务对象。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="T:System.Data.EntityClient.EntityConnection" /> 的状态不是 <see cref="F:System.Data.ConnectionState.Open" />。
                </exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace">
      <summary>
              返回与此 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> 关联的 <see cref="T:System.Data.EntityClient.EntityConnection" />。
            </summary>
      <returns>
              与此 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> 关联的 <see cref="T:System.Data.EntityClient.EntityConnection" />。
            </returns>
      <exception cref="T:System.Data.MetadataException">
                  内联连接字符串包含一个无效的 <see langword="Metadata" /> 关键字值。
                </exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.Open">
      <summary>
              通过调用基础数据提供程序建立与数据源的连接<see langword=" Open" /> 方法。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  打开连接时出错，或基础数据提供程序的名称未知。
                </exception>
      <exception cref="T:System.Data.MetadataException">
                  内联连接字符串包含一个无效的 <see langword="Metadata" /> 关键字值。
                </exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnectionStringBuilder.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnectionStringBuilder.#ctor(System.String)">
      <summary>
              使用提供的连接字符串初始化 <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> 类的新实例。
            </summary>
      <param name="connectionString">
                一个指向基础数据源的提供程序特定的连接字符串。
              </param>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnectionStringBuilder.Clear">
      <summary>
              清除 <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> 实例的内容。
            </summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnectionStringBuilder.ContainsKey(System.String)">
      <summary>
              确定 <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> 是否包含特定键。
            </summary>
      <param name="keyword">
                要在 <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> 中定位的键。
              </param>
      <returns>
              返回 <see langword="true" /> 如果 <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> 包含具有指定的元素键; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnectionStringBuilder.Remove(System.String)">
      <summary>
              从 <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> 实例中移除具有指定的键的项。
            </summary>
      <param name="keyword">
                要从此 <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> 的连接字符串中移除关键字/值对的键。
              </param>
      <returns>
              返回 <see langword="true" /> 如果该键存在于连接字符串中并被移除，则 <see langword="false" /> 如果该键不存在。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="keyword" /> 为 null (<see langword="Nothing" /> 中 Visual Basic)
                </exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
      <summary>
              从此 <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> 中检索与提供的键相对应的值。
            </summary>
      <param name="keyword">
                要检索的项的键。
              </param>
      <param name="value">
                与 <paramref name="keyword." /> 对应的值
              </param>
      <returns>
              返回 <see langword="true" /> 如果 <paramref name="keyword" /> 在连接字符串中找到; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="keyword" /> 包含一个 null 值（在 Visual Basic 中为 <see langword="Nothing" />）。
                </exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.Close">
      <summary>
              关闭 <see cref="T:System.Data.EntityClient.EntityDataReader" /> 对象。
            </summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.Dispose(System.Boolean)">
      <summary>
              释放由此 <see cref="T:System.Data.EntityClient.EntityDataReader" /> 占用的资源并调用 <see cref="M:System.Data.EntityClient.EntityDataReader.Close" />。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetBoolean(System.Int32)">
      <summary>
              以布尔值的形式获取指定列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetByte(System.Int32)">
      <summary>
              以字节的形式获取指定列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>
              从指定的列中，由指示位置处开始读取的字节流 <paramref name="dataIndex" />, ，到缓冲区中，从所指示的位置开始 <paramref name="bufferIndex" />。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <param name="dataOffset">
                行中作为读取操作起始位置的索引。
              </param>
      <param name="buffer">
                要将数据复制到的缓冲区。
              </param>
      <param name="bufferOffset">
                要将数据复制到的位置的缓冲区索引。
              </param>
      <param name="length">
                要读取的最大字符数。
              </param>
      <returns>
              读取的实际字节数。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetChar(System.Int32)">
      <summary>
              以单个字符的形式获取指定列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>
              从指定的列所指示的位置开始的字符流读入 <paramref name="dataIndex" />, ，到缓冲区中，从所指示的位置开始 <paramref name="bufferIndex" />。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <param name="dataOffset">
                行中作为读取操作起始位置的索引。
              </param>
      <param name="buffer">
                要将数据复制到的缓冲区。
              </param>
      <param name="bufferOffset">
                要将数据复制到的位置的缓冲区索引。
              </param>
      <param name="length">
                要读取的最大字符数。
              </param>
      <returns>
              读取的实际字符数。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetDataReader(System.Int32)">
      <summary>
              以 <see cref="T:System.Data.Common.DbDataReader" /> 对象的形式返回嵌套的读取器。
            </summary>
      <param name="i">
                列的序号。
              </param>
      <returns>
              为嵌套的读取器 <see cref="T:System.Data.Common.DbDataReader" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetDataRecord(System.Int32)">
      <summary>
              返回嵌套的 <see cref="T:System.Data.Common.DbDataRecord" />。
            </summary>
      <param name="i">
                数 <see langword="DbDataRecord" /> 返回。
              </param>
      <returns>
              嵌套的数据记录中。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetDataTypeName(System.Int32)">
      <summary>
              获取指定列的数据类型的名称。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              数据类型的名称。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetDateTime(System.Int32)">
      <summary>
              以 <see cref="T:System.DateTime" /> 对象的形式获取指定列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetDbDataReader(System.Int32)">
      <summary>
              为可用提供程序特定的实现重写的已请求的列序号返回一个 <see cref="T:System.Data.Common.DbDataReader" /> 对象。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              数据读取器。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetDecimal(System.Int32)">
      <summary>
              以 <see cref="T:System.Decimal" /> 对象的形式获取指定列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetDouble(System.Int32)">
      <summary>
              以双精度浮点数字的形式获取指定列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetEnumerator">
      <summary>
              返回一个可用于循环访问数据读取器中的行的 <see cref="T:System.Collections.IEnumerator" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.IEnumerator" />，可用于循环访问数据读取器中的行。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetFieldType(System.Int32)">
      <summary>
              获取指定列的数据类型。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              指定列的数据类型。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetFloat(System.Int32)">
      <summary>
              以单精度浮点数字的形式获取指定列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetGuid(System.Int32)">
      <summary>
              以全局唯一标识符 (GUID) 的形式获取指定列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetInt16(System.Int32)">
      <summary>
              16 位有符号整数形式获取指定列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetInt32(System.Int32)">
      <summary>
              作为 32 位有符号整数获取指定列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetInt64(System.Int32)">
      <summary>
              以 64 位有符号整数的形式获取指定列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetName(System.Int32)">
      <summary>
              在给定从零开始的列序号时获取该列的名称。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              指定列的名称。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetOrdinal(System.String)">
      <summary>
              在给定列名时获取相应的列序号。
            </summary>
      <param name="name">
                列的名称。
              </param>
      <returns>
              从零开始的列序号。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  指定的名称不是有效的列名。
                </exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetProviderSpecificFieldType(System.Int32)">
      <summary>
              返回指定列的提供程序特定的字段类型。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              描述指定列的数据类型的 <see cref="T:System.Type" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetProviderSpecificValue(System.Int32)">
      <summary>
              以 <see cref="T:System.Object" /> 实例的形式获取指定列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetProviderSpecificValues(System.Object[])">
      <summary>
              在当前行的集合中获取提供程序特定的所有属性列。
            </summary>
      <param name="values">
                要将属性列复制到的 <see cref="T:System.Object" /> 数组。
              </param>
      <returns>
              数组中的 <see cref="T:System.Object" /> 实例数。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetSchemaTable">
      <summary>
              返回一个描述 <see cref="T:System.Data.DataTable" /> 的列元数据的 <see cref="T:System.Data.Common.DbDataReader" />。
            </summary>
      <returns>
              一个描述列元数据的 <see cref="T:System.Data.DataTable" />。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetString(System.Int32)">
      <summary>
              以 <see cref="T:System.String" /> 实例的形式获取指定列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetValue(System.Int32)">
      <summary>
              以 <see cref="T:System.Object" /> 实例的形式获取指定列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              指定列的值。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetValues(System.Object[])">
      <summary>
              使用来填充数组的对象的当前行的列的值。
            </summary>
      <param name="values">
                要将属性列复制到的 <see cref="T:System.Object" /> 数组。
              </param>
      <returns>
              数组中的 <see cref="T:System.Object" /> 实例数。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.IsDBNull(System.Int32)">
      <summary>
              获取一个值，该值指示列中是否包含不存在或丢失的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号。
              </param>
      <returns>
              <see langword="true" /> 如果指定的列等效于 <see cref="T:System.DBNull" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.NextResult">
      <summary>
              在读取一批语句的结果时，使读取器前进到下一个结果。
            </summary>
      <returns>
              <see langword="true" /> 如果有多个结果集;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.Read">
      <summary>
              使读取器前进到结果集中的下一条记录。
            </summary>
      <returns>
              <see langword="true" /> 如果有多个行;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameter.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.Data.EntityClient.EntityParameter" /> 类使用的默认值。
            </summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType)">
      <summary>
              新实例初始化 <see cref="T:System.Data.EntityClient.EntityParameter" /> 类使用指定的参数名称和数据类型。
            </summary>
      <param name="parameterName">
                参数的名称。
              </param>
      <param name="dbType">
                <see cref="T:System.Data.DbType" /> 值之一。
              </param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.Data.EntityClient.EntityParameter" /> 类使用指定的参数名称、 数据类型和大小。
            </summary>
      <param name="parameterName">
                参数的名称。
              </param>
      <param name="dbType">
                <see cref="T:System.Data.DbType" /> 值之一。
              </param>
      <param name="size">
                参数的大小。
              </param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
      <summary>
              新实例初始化 <see cref="T:System.Data.EntityClient.EntityParameter" /> 类使用指定的属性。
            </summary>
      <param name="parameterName">
                参数的名称。
              </param>
      <param name="dbType">
                <see cref="T:System.Data.DbType" /> 值之一。
              </param>
      <param name="size">
                参数的大小。
              </param>
      <param name="direction">
                <see cref="T:System.Data.ParameterDirection" /> 值之一。
              </param>
      <param name="isNullable">
                <see langword="true" /> 若要指示该参数接受 null 值;否则为 <see langword="false" />。
              </param>
      <param name="precision">
                用来表示值的数字个数。
              </param>
      <param name="scale">
                值是解析的小数位数。
              </param>
      <param name="sourceColumn">
                源列的名称。
              </param>
      <param name="sourceVersion">
                <see cref="T:System.Data.DataRowVersion" /> 值之一。
              </param>
      <param name="value">
                参数的值。
              </param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Data.EntityClient.EntityParameter" /> 类使用指定的属性。
            </summary>
      <param name="parameterName">
                参数的名称。
              </param>
      <param name="dbType">
                <see cref="T:System.Data.DbType" /> 值之一。
              </param>
      <param name="size">
                参数的大小。
              </param>
      <param name="sourceColumn">
                源列的名称。
              </param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameter.ResetDbType">
      <summary>
              重置与关联的类型 <see cref="T:System.Data.EntityClient.EntityParameter" />。
            </summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameter.ToString">
      <summary>
              返回参数的字符串表示形式。
            </summary>
      <returns>
              参数的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Add(System.Data.EntityClient.EntityParameter)">
      <summary>
              将指定的 <see cref="T:System.Data.EntityClient.EntityParameter" /> 对象添加到 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 中。
            </summary>
      <param name="value">
                要添加到集合中的 <see cref="T:System.Data.EntityClient.EntityParameter" />。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.EntityClient.EntityParameter" /> 对象。
            </returns>
      <exception cref="T:System.ArgumentException">
                  <see cref="T:System.Data.EntityClient.EntityParameter" /> 中指定 <paramref name="value" /> 参数已添加到这个或其他 <see cref="T:System.Data.EntityClient.EntityParameterCollection" />。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  传递的参数不是 <see cref="T:System.Data.EntityClient.EntityParameter" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="value" /> 参数为 null。
                </exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Add(System.Object)">
      <summary>
              将指定的对象添加到 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 中。
            </summary>
      <param name="value">
                一个 <see cref="T:System.Object" />。
              </param>
      <returns>
              新的 <see cref="T:System.Data.EntityClient.EntityParameter" /> 对象的索引。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Add(System.String,System.Data.DbType)">
      <summary>
              在给定参数名称和数据类型时向 <see cref="T:System.Data.EntityClient.EntityParameter" /> 中添加一个 <see cref="T:System.Data.EntityClient.EntityParameterCollection" />。
            </summary>
      <param name="parameterName">
                参数的名称。
              </param>
      <param name="dbType">
                <see cref="T:System.Data.DbType" /> 值之一。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.EntityClient.EntityParameter" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Add(System.String,System.Data.DbType,System.Int32)">
      <summary>
              使用给定的参数名称、数据类型和列长度向 <see cref="T:System.Data.EntityClient.EntityParameter" /> 中添加一个 <see cref="T:System.Data.EntityClient.EntityParameterCollection" />。
            </summary>
      <param name="parameterName">
                参数的名称。
              </param>
      <param name="dbType">
                <see cref="T:System.Data.DbType" /> 值之一。
              </param>
      <param name="size">
                列的长度。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.EntityClient.EntityParameter" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.AddRange(System.Array)">
      <summary>
              向 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 的末尾添加一个值数组。
            </summary>
      <param name="values">
                要添加的 <see cref="T:System.Array" /> 值。
              </param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.AddRange(System.Data.EntityClient.EntityParameter[])">
      <summary>
              向 <see cref="T:System.Data.EntityClient.EntityParameter" /> 的末尾添加一个 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 值数组。
            </summary>
      <param name="values">
                要添加的 <see cref="T:System.Data.EntityClient.EntityParameter" /> 值。
              </param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.AddWithValue(System.String,System.Object)">
      <summary>
              向 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 的末尾添加一个值。
            </summary>
      <param name="parameterName">
                参数的名称。
              </param>
      <param name="value">
                要添加的值。
              </param>
      <returns>
              一个 <see cref="T:System.Data.EntityClient.EntityParameter" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Clear">
      <summary>
              从 <see cref="T:System.Data.EntityClient.EntityParameter" /> 中移除所有的 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 对象。
            </summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Contains(System.Object)">
      <summary>
              确定指定的 <see cref="T:System.Object" /> 是否在此 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 中。
            </summary>
      <param name="value">
                <see cref="T:System.Object" /> 值。
              </param>
      <returns>
              <see langword="true" /> 如果 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 包含的值; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Contains(System.String)">
      <summary>
              确定指定的 <see cref="T:System.Data.EntityClient.EntityParameter" /> 是否在此 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 中。
            </summary>
      <param name="parameterName">
                <see cref="T:System.Data.EntityClient.EntityParameter" /> 值。
              </param>
      <returns>
              <see langword="true" /> 如果 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 包含的值; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.CopyTo(System.Array,System.Int32)">
      <summary>
              将当前 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 的所有元素复制到指定的一维 <see cref="T:System.Array" /> 中，并以指定的目标 <see cref="T:System.Array" /> 索引位置作为复制到的起始位置。
            </summary>
      <param name="array">
                作为当前 <see cref="T:System.Array" /> 中的元素的复制目标的一维 <see cref="T:System.Data.EntityClient.EntityParameterCollection" />。
              </param>
      <param name="index">
                一个 32 位整数，表示 <see cref="T:System.Array" /> 中开始复制的位置的索引。
              </param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.CopyTo(System.Data.EntityClient.EntityParameter[],System.Int32)">
      <summary>
              将当前 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 的所有元素复制到指定的 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 中，并以指定的目标索引位置作为复制到的起始位置。
            </summary>
      <param name="array">
                作为当前 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 中的元素的复制目标的 <see cref="T:System.Data.EntityClient.EntityParameterCollection" />。
              </param>
      <param name="index">
                一个 32 位整数，表示 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 中开始复制的位置的索引。
              </param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.GetEnumerator">
      <summary>
              返回循环访问 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 的枚举数。
            </summary>
      <returns>
              用于 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Data.EntityClient.EntityParameterCollection" />。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.IndexOf(System.Data.EntityClient.EntityParameter)">
      <summary>
              获取指定的 <see cref="T:System.Data.EntityClient.EntityParameter" /> 在集合中的位置。
            </summary>
      <param name="value">
                要查找的 <see cref="T:System.Data.EntityClient.EntityParameter" />。
              </param>
      <returns>
              作为集合中的 <see cref="T:System.Data.EntityClient.EntityParameter" /> 的指定 <see cref="T:System.Data.EntityClient.EntityParameter" /> 的位置（从零开始）。
               如果 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 中不存在该对象，则返回 -1。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.IndexOf(System.Object)">
      <summary>
              获取指定的 <see cref="T:System.Object" /> 在集合中的位置。
            </summary>
      <param name="value">
                要查找的 <see cref="T:System.Object" />。
              </param>
      <returns>
              作为集合中的 <see cref="T:System.Object" /> 的指定 <see cref="T:System.Data.EntityClient.EntityParameter" /> 的位置（从零开始）。
               如果 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 中不存在该对象，则返回 -1。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.IndexOf(System.String)">
      <summary>
              获取具有指定名称的指定 <see cref="T:System.Data.EntityClient.EntityParameter" /> 的位置。
            </summary>
      <param name="parameterName">
                要查找的 <see cref="T:System.Data.EntityClient.EntityParameter" /> 的名称（区分大小写）。
              </param>
      <returns>
              具有指定名称（区分大小写）的指定 <see cref="T:System.Data.EntityClient.EntityParameter" /> 的位置（从零开始）。
               如果 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 中不存在该对象，则返回 -1。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Insert(System.Int32,System.Data.EntityClient.EntityParameter)">
      <summary>
              在 <see cref="T:System.Data.EntityClient.EntityParameter" /> 中的指定索引处插入一个 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 对象。
            </summary>
      <param name="index">
                应将值插入到的位置的索引（从零开始）。
              </param>
      <param name="value">
                要插入到 <see cref="T:System.Data.EntityClient.EntityParameter" /> 中的 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 对象。
              </param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Insert(System.Int32,System.Object)">
      <summary>
              在 <see cref="T:System.Object" /> 中的指定索引处插入一个 <see cref="T:System.Data.EntityClient.EntityParameterCollection" />。
            </summary>
      <param name="index">
                应将值插入到的位置的索引（从零开始）。
              </param>
      <param name="value">
                要插入到 <see cref="T:System.Object" /> 中的 <see cref="T:System.Data.EntityClient.EntityParameterCollection" />。
              </param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Remove(System.Data.EntityClient.EntityParameter)">
      <summary>
              从集合中移除指定的 <see cref="T:System.Data.EntityClient.EntityParameter" />。
            </summary>
      <param name="value">
                要从集合中移除的 <see cref="T:System.Data.EntityClient.EntityParameter" /> 对象。
              </param>
      <exception cref="T:System.InvalidCastException">
                  该参数不是 <see cref="T:System.Data.EntityClient.EntityParameter" />。
                </exception>
      <exception cref="T:System.SystemException">
                  集合中不存在该参数。
                </exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Remove(System.Object)">
      <summary>
              从集合中移除指定的参数。
            </summary>
      <param name="value">
                要从集合中移除的 <see cref="T:System.Object" /> 对象。
              </param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.RemoveAt(System.Int32)">
      <summary>
              从 <see cref="T:System.Data.EntityClient.EntityParameter" /> 的指定索引处移除 <see cref="T:System.Data.EntityClient.EntityParameterCollection" />。
            </summary>
      <param name="index">
                要移除的 <see cref="T:System.Data.EntityClient.EntityParameter" /> 对象的索引（从零开始）。
              </param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.RemoveAt(System.String)">
      <summary>
              从 <see cref="T:System.Data.EntityClient.EntityParameter" /> 中移除具有指定参数名称的 <see cref="T:System.Data.EntityClient.EntityParameterCollection" />。
            </summary>
      <param name="parameterName">
                要移除的 <see cref="T:System.Data.EntityClient.EntityParameter" /> 的名称。
              </param>
    </member>
    <member name="M:System.Data.EntityClient.EntityProviderFactory.CreateCommand">
      <summary>
              返回实现 <see cref="T:System.Data.EntityClient.EntityCommand" /> 类的提供程序类的一个新实例。
            </summary>
      <returns>
              <see cref="T:System.Data.EntityClient.EntityCommand" /> 的新实例。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityProviderFactory.CreateCommandBuilder">
      <summary>
              引发 <see cref="T:System.NotSupportedException" />。
               当前不支持该方法。
            </summary>
      <returns>
              当前不支持该方法。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityProviderFactory.CreateConnection">
      <summary>
              返回实现 <see cref="T:System.Data.EntityClient.EntityConnection" /> 类的提供程序类的一个新实例。
            </summary>
      <returns>
              <see cref="T:System.Data.EntityClient.EntityConnection" /> 的新实例。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityProviderFactory.CreateConnectionStringBuilder">
      <summary>
              返回实现 <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> 类的提供程序类的一个新实例。
            </summary>
      <returns>
              <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> 的新实例。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityProviderFactory.CreateDataAdapter">
      <summary>
              此版本的 <see cref="M:System.Data.EntityClient.EntityProviderFactory.CreateDataAdapter" /> 中不支持 .NET Framework。
            </summary>
      <returns>
              一个 <see cref="T:System.NotSupportedException" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityProviderFactory.CreateParameter">
      <summary>
              返回实现 <see cref="T:System.Data.EntityClient.EntityParameter" /> 类的提供程序类的一个新实例。
            </summary>
      <returns>
              <see cref="T:System.Data.EntityClient.EntityParameter" /> 的新实例。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityProviderFactory.CreatePermission(System.Security.Permissions.PermissionState)">
      <summary>
              返回实现 <see cref="T:System.Security.CodeAccessPermission" /> 类的提供程序版本的提供程序类的一个新实例。
            </summary>
      <param name="state">
                <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。
              </param>
      <returns>
              指定的 <see cref="T:System.Security.CodeAccessPermission" /> 的一个 <see cref="T:System.Security.Permissions.PermissionState" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityProviderFactory.System#IServiceProvider#GetService(System.Type)">
      <summary>
              返回请求的 <see cref="T:System.IServiceProvider" /> 类。
            </summary>
      <param name="serviceType">
                 要返回的 <see cref="T:System.Type" />。
              </param>
      <returns>
              <see cref="T:System.IServiceProvider" /> 的新实例。
               支持的类型有 <see cref="T:System.Data.Common.DbProviderServices" />、<see cref="T:System.Data.Common.DbCommandDefinitionBuilder" /> 和 <see cref="T:System.Data.IEntityAdapter" />。
               将返回 null (或 <see langword="Nothing" /> 中 Visual Basic) 对于所有其他类型。 </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityTransaction.Commit">
      <summary>
              提交基础事务。
            </summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityTransaction.Rollback">
      <summary>
              回滚基础事务。
            </summary>
    </member>
    <member name="M:System.Data.EntityCommandCompilationException.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.EntityCommandCompilationException" /> 的新实例。
            </summary>
    </member>
    <member name="M:System.Data.EntityCommandCompilationException.#ctor(System.String)">
      <summary>
              初始化 <see cref="T:System.Data.EntityCommandCompilationException" /> 的新实例。
            </summary>
      <param name="message">
                描述错误的消息。
              </param>
    </member>
    <member name="M:System.Data.EntityCommandCompilationException.#ctor(System.String,System.Exception)">
      <summary>
              初始化 <see cref="T:System.Data.EntityCommandCompilationException" /> 的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="innerException">
                导致当前异常的异常或 <see langword="null" /> 引用 (<see langword="Nothing" /> 在 Visual Basic 中) 如果未不指定任何内部异常。
              </param>
    </member>
    <member name="M:System.Data.EntityCommandExecutionException.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.EntityCommandExecutionException" /> 的新实例。
            </summary>
    </member>
    <member name="M:System.Data.EntityCommandExecutionException.#ctor(System.String)">
      <summary>
              初始化 <see cref="T:System.Data.EntityCommandExecutionException" /> 的新实例。
            </summary>
      <param name="message">
                描述错误的消息。
              </param>
    </member>
    <member name="M:System.Data.EntityCommandExecutionException.#ctor(System.String,System.Exception)">
      <summary>
              初始化 <see cref="T:System.Data.EntityCommandExecutionException" /> 的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="innerException">
                导致当前异常的异常或 <see langword="null" /> 引用 (<see langword="Nothing" /> 在 Visual Basic 中) 如果未不指定任何内部异常。
              </param>
    </member>
    <member name="M:System.Data.EntityException.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.EntityException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.EntityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              初始化 <see cref="T:System.Data.EntityException" /> 类的新实例。
            </summary>
      <param name="info">
                <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它保存关于所引发异常的序列化对象数据。
              </param>
      <param name="context">
                <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。
              </param>
    </member>
    <member name="M:System.Data.EntityException.#ctor(System.String)">
      <summary>
              初始化 <see cref="T:System.Data.EntityException" /> 类的新实例。
            </summary>
      <param name="message">
                描述错误的消息。
              </param>
    </member>
    <member name="M:System.Data.EntityException.#ctor(System.String,System.Exception)">
      <summary>
              初始化 <see cref="T:System.Data.EntityException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="innerException">
                导致当前异常的异常或 <see langword="null" /> 引用 (<see langword="Nothing" /> 在 Visual Basic 中) 如果未不指定任何内部异常。
              </param>
    </member>
    <member name="M:System.Data.EntityKey.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.EntityKey" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
      <summary>
              使用实体集名称和泛型 <see cref="T:System.Data.EntityKey" /> 集合初始化 <see cref="T:System.Collections.Generic.KeyValuePair" /> 类的新实例。
            </summary>
      <param name="qualifiedEntitySetName">
                一个 <see cref="T:System.String" />，它是由实体容器名称限定的实体集名称。
              </param>
      <param name="entityKeyValues">
                一个泛型 <see cref="T:System.Collections.Generic.KeyValuePair" /> 集合。
              
                每个键/值对中，属性名称作为键，该属性的值作为值。
                 对作为 <see cref="T:System.Data.EntityKey" /> 的一部分的每个属性都应有一个键/值对。
                 键/值对的顺序并不重要，但是应包括每个键属性。
                 属性名称是未使用实体类型名称或架构名称限定的简单名称。
              </param>
    </member>
    <member name="M:System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})">
      <summary>
              使用实体集名称和 <see cref="T:System.Data.EntityKey" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 集合初始化 <see cref="T:System.Data.EntityKeyMember" /> 类的新实例。
            </summary>
      <param name="qualifiedEntitySetName">
                一个 <see cref="T:System.String" />，它是由实体容器名称限定的实体集名称。
              </param>
      <param name="entityKeyValues">
                用来初始化键的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象的 <see cref="T:System.Data.EntityKeyMember" /> 集合。
              </param>
    </member>
    <member name="M:System.Data.EntityKey.#ctor(System.String,System.String,System.Object)">
      <summary>
              使用实体集名称和特定实体键对初始化 <see cref="T:System.Data.EntityKey" /> 类的新实例。
            </summary>
      <param name="qualifiedEntitySetName">
                一个 <see cref="T:System.String" />，它是由实体容器名称限定的实体集名称。
              </param>
      <param name="keyName">
                表示键名称的 <see cref="T:System.String" />。
              </param>
      <param name="keyValue">
                表示键值的 <see cref="T:System.Object" />。
              </param>
    </member>
    <member name="M:System.Data.EntityKey.Equals(System.Data.EntityKey)">
      <summary>
              返回一个值，该值指示此实例是否与指定的 <see cref="T:System.Data.EntityKey" /> 相等。
            </summary>
      <param name="other">
                要与此实例比较的 <see cref="T:System.Data.EntityKey" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果此实例和 <paramref name="other" /> 具有相等的值; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.EntityKey.Equals(System.Object)">
      <summary>
              返回一个值，该值指示此实例是否与指定的对象相等。
            </summary>
      <param name="obj">
                要与此实例比较的 <see cref="T:System.Object" />。
              </param>
      <returns>
              <see langword="true" /> 如果此实例和 <paramref name="obj" /> 具有相等的值; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.EntityKey.GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)">
      <summary>
              从给定的元数据工作区获取此实体键的实体集。
            </summary>
      <param name="metadataWorkspace">
                包含实体的元数据工作区。
              </param>
      <returns>
              实体键的 <see cref="T:System.Data.Metadata.Edm.EntitySet" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  未能在指定的元数据工作区找到实体集。
                </exception>
    </member>
    <member name="M:System.Data.EntityKey.GetHashCode">
      <summary>
              用作当前哈希函数 <see cref="T:System.Data.EntityKey" /> 对象。
              <see cref="M:System.Data.EntityKey.GetHashCode" /> 是适用于哈希算法和哈希表之类的数据结构。
            </summary>
      <returns>
              当前 <see cref="T:System.Data.EntityKey" /> 的哈希代码。
            </returns>
    </member>
    <member name="M:System.Data.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>
              用于反序列化 <see cref="T:System.Data.EntityKey" /> 的帮助器方法。
            </summary>
      <param name="context">
                说明给定序列化流的源和目标，并提供另一个调用方定义的上下文。
              </param>
    </member>
    <member name="M:System.Data.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)">
      <summary>
              用于反序列化 <see cref="T:System.Data.EntityKey" /> 的帮助器方法。
            </summary>
      <param name="context">
                说明给定序列化流的源和目标，并提供另一个调用方定义的上下文。
              </param>
    </member>
    <member name="M:System.Data.EntityKey.op_Equality(System.Data.EntityKey,System.Data.EntityKey)">
      <summary>
              比较两个 <see cref="T:System.Data.EntityKey" /> 对象。
            </summary>
      <param name="key1">
                要比较的 <see cref="T:System.Data.EntityKey" />。
              </param>
      <param name="key2">
                要比较的 <see cref="T:System.Data.EntityKey" />。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="key1" /> 和 <paramref name="key2" /> 的值为相等; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.EntityKey.op_Inequality(System.Data.EntityKey,System.Data.EntityKey)">
      <summary>
              比较两个 <see cref="T:System.Data.EntityKey" /> 对象。
            </summary>
      <param name="key1">
                要比较的 <see cref="T:System.Data.EntityKey" />。
              </param>
      <param name="key2">
                要比较的 <see cref="T:System.Data.EntityKey" />。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="key1" /> 和 <paramref name="key2" /> 值不相等; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.EntityKeyMember.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.EntityKeyMember" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.EntityKeyMember.#ctor(System.String,System.Object)">
      <summary>
              使用指定实体键对初始化 <see cref="T:System.Data.EntityKeyMember" /> 类的新实例。
            </summary>
      <param name="keyName">
                密钥的名称。
              </param>
      <param name="keyValue">
                键值。
              </param>
    </member>
    <member name="M:System.Data.EntityKeyMember.ToString">
      <summary>
              返回实体键的字符串表示。
            </summary>
      <returns>
              实体键的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Data.EntitySqlException.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.EntitySqlException" /> 的新实例。
            </summary>
    </member>
    <member name="M:System.Data.EntitySqlException.#ctor(System.String)">
      <summary>
              使用指定的错误消息初始化 <see cref="T:System.Data.EntitySqlException" /> 的新实例。
            </summary>
      <param name="message">
                描述错误的消息。
              </param>
    </member>
    <member name="M:System.Data.EntitySqlException.#ctor(System.String,System.Exception)">
      <summary>
              初始化 <see cref="T:System.Data.EntitySqlException" /> 类的新实例，该类使用指定的错误消息和对作为此异常原因的内部异常的引用。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="innerException">
                导致当前异常的异常或 <see langword="null" /> 引用 (<see langword="Nothing" /> 在 Visual Basic 中) 如果未不指定任何内部异常。
              </param>
    </member>
    <member name="M:System.Data.EntitySqlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              使用关于异常的信息设置 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。
            </summary>
      <param name="info">
                <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它保存关于所引发异常的序列化对象数据。
              </param>
      <param name="context">
                <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="info" /> 参数是 <see langword="null" /> 引用 (<see langword="Nothing" /> 在 Visual Basic 中)。
                </exception>
    </member>
    <member name="M:System.Data.IExtendedDataRecord.GetDataReader(System.Int32)">
      <summary>
              以 <see cref="T:System.Data.Common.DbDataReader" /> 对象的形式返回嵌套的读取器。
            </summary>
      <param name="i">
                列的序号。
              </param>
      <returns>
              采用 <see cref="T:System.Data.Common.DbDataReader" /> 对象形式的嵌套读取器。
            </returns>
    </member>
    <member name="M:System.Data.IExtendedDataRecord.GetDataRecord(System.Int32)">
      <summary>
              使用指定的索引获取<see cref="T:System.Data.Common.DbDataRecord" /> 对象。
            </summary>
      <param name="i">
                行的索引。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Common.DbDataRecord" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.InvalidCommandTreeException.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.Data.InvalidCommandTreeException" /> 类，具有默认消息。
            </summary>
    </member>
    <member name="M:System.Data.InvalidCommandTreeException.#ctor(System.String)">
      <summary>
              使用指定的消息初始化 <see cref="T:System.Data.InvalidCommandTreeException" /> 类的新实例。
            </summary>
      <param name="message">
                异常消息。
              </param>
    </member>
    <member name="M:System.Data.InvalidCommandTreeException.#ctor(System.String,System.Exception)">
      <summary>
              新实例初始化 <see cref="T:System.Data.InvalidCommandTreeException" /> 使用指定的消息和内部异常的类。
            </summary>
      <param name="message">
                异常消息。
              </param>
      <param name="innerException">
                导致此 <see cref="T:System.Data.InvalidCommandTreeException" /> 的异常。
              </param>
    </member>
    <member name="M:System.Data.Mapping.EntityViewContainer.#ctor">
      <summary>
              初始化 <see langword="EntityViewContainer" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Mapping.EntityViewContainer.GetViewAt(System.Int32)">
      <summary>
              返回包含视图和其密钥的指定索引处的键/值对。
            </summary>
      <param name="index">
                视图的索引。
              </param>
      <returns>
              处的键/值对 <paramref name="index" />, ，其中包含在视图和它的键。
            </returns>
    </member>
    <member name="M:System.Data.Mapping.EntityViewGenerationAttribute.#ctor(System.Type)">
      <summary>
              初始化 <see cref="T:System.Data.Mapping.EntityViewGenerationAttribute" /> 类的新实例。
            </summary>
      <param name="viewGenerationType">
                视图的类型。
              </param>
    </member>
    <member name="M:System.Data.Mapping.StorageMappingItemCollection.#ctor(System.Data.Metadata.Edm.EdmItemCollection,System.Data.Metadata.Edm.StoreItemCollection,System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>
              新实例初始化 <see cref="T:System.Data.Mapping.StorageMappingItemCollection" /> 类使用指定 <see cref="T:System.Data.Metadata.Edm.EdmItemCollection" />, ，<see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> 和 XML 读取器。
            </summary>
      <param name="edmCollection">
                此映射要使用的 <see cref="T:System.Data.Metadata.Edm.EdmItemCollection" />。
              </param>
      <param name="storeCollection">
                此映射要使用的 <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />。
              </param>
      <param name="xmlReaders">
                此映射是使用 XML 读取器。
              </param>
    </member>
    <member name="M:System.Data.Mapping.StorageMappingItemCollection.#ctor(System.Data.Metadata.Edm.EdmItemCollection,System.Data.Metadata.Edm.StoreItemCollection,System.String[])">
      <summary>
              新实例初始化 <see cref="T:System.Data.Mapping.StorageMappingItemCollection" /> 类使用指定 <see cref="T:System.Data.Metadata.Edm.EdmItemCollection" />, ，<see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> 和字符串，它指示元数据文件路径的集合。
            </summary>
      <param name="edmCollection">
                此映射要使用的 <see cref="T:System.Data.Metadata.Edm.EdmItemCollection" />。
              </param>
      <param name="storeCollection">
                此映射要使用的 <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />。
              </param>
      <param name="filePaths">
                此映射是使用文件路径。
              </param>
    </member>
    <member name="M:System.Data.MappingException.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.MappingException" /> 的新实例。
            </summary>
    </member>
    <member name="M:System.Data.MappingException.#ctor(System.String)">
      <summary>
              使用指定的错误消息初始化 <see cref="T:System.Data.MappingException" /> 的新实例。
            </summary>
      <param name="message">
                描述错误的消息。
              </param>
    </member>
    <member name="M:System.Data.MappingException.#ctor(System.String,System.Exception)">
      <summary>
              初始化 <see cref="T:System.Data.MappingException" /> 的新实例，该类使用指定的错误消息和对内部异常的引用。
            </summary>
      <param name="message">
                描述错误的消息。
              </param>
      <param name="innerException">
                导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。
              </param>
    </member>
    <member name="M:System.Data.Metadata.Edm.AssociationSetEnd.ToString">
      <summary>
              返回的名称 <see langword="End" /> 角色的 <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" />。
            </summary>
      <returns>
              名称 <see langword="End" /> 角色的 <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" />。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.Documentation.ToString">
      <summary>
              返回此 <see cref="T:System.Data.Metadata.Edm.Documentation" /> 的摘要。
            </summary>
      <returns>
              此 <see cref="T:System.Data.Metadata.Edm.Documentation" /> 的摘要。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EdmItemCollection.#ctor(System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>
              新实例初始化 <see cref="T:System.Data.Metadata.Edm.EdmItemCollection" /> 使用概念架构定义语言 (CSDL) 文件所在的 XMLReader 对象的集合类。
            </summary>
      <param name="xmlReaders">
                概念性架构定义语言 (CSDL) 文件所在的 XMLReader 对象的集合。
              </param>
    </member>
    <member name="M:System.Data.Metadata.Edm.EdmItemCollection.#ctor(System.String[])">
      <summary>
              使用概念性架构定义语言 (CSDL) 文件所在的路径初始化 <see cref="T:System.Data.Metadata.Edm.EdmItemCollection" /> 类的新实例。
            </summary>
      <param name="filePaths">
                概念性架构定义语言 (CSDL) 文件所在的路径。
              </param>
    </member>
    <member name="M:System.Data.Metadata.Edm.EdmItemCollection.GetPrimitiveTypes">
      <summary>
              返回一个由 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 对象构成的集合。
            </summary>
      <returns>
              一个表示的集合的 ReadOnlyCollection 对象 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EdmItemCollection.GetPrimitiveTypes(System.Double)">
      <summary>
              返回的集合 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 具有指定概念模型版本的对象。
            </summary>
      <param name="edmVersion">
                概念模型版本中。
              </param>
      <returns>
              一个表示的集合的 ReadOnlyCollection 对象 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EdmMember.ToString">
      <summary>
              返回此成员的名称。
            </summary>
      <returns>
              此成员的名称。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EdmSchemaError.ToString">
      <summary>
              返回错误消息。
            </summary>
      <returns>
              错误消息。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EdmType.GetCollectionType">
      <summary>
              返回其元素类型属于此类型的 <see cref="T:System.Data.Metadata.Edm.CollectionType" /> 的实例。
            </summary>
      <returns>
              其元素类型属于此类型的 <see cref="T:System.Data.Metadata.Edm.CollectionType" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EdmType.ToString">
      <summary>
              返回此类型的全名。
            </summary>
      <returns>
              此类型的全名。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EntityContainer.GetEntitySetByName(System.String,System.Boolean)">
      <summary>
              使用实体集的指定名称返回一个 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 对象。
            </summary>
      <param name="name">
                要搜索的实体集的名称。
              </param>
      <param name="ignoreCase">
                <see langword="true" /> 若要执行不区分大小写的搜索;否则为 <see langword="false" />。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 对象，表示具有指定名称的实体集。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EntityContainer.GetRelationshipSetByName(System.String,System.Boolean)">
      <summary>
              使用关系集的指定名称返回一个 <see cref="T:System.Data.Metadata.Edm.RelationshipSet" /> 对象。
            </summary>
      <param name="name">
                要搜索的关系集的名称。
              </param>
      <param name="ignoreCase">
                <see langword="true" /> 若要执行不区分大小写的搜索;否则为 <see langword="false" />。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.RelationshipSet" /> 对象，表示具有指定名称的关系集。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EntityContainer.ToString">
      <summary>
              返回此 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 的名称。
            </summary>
      <returns>
              此 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 的名称。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EntityContainer.TryGetEntitySetByName(System.String,System.Boolean,System.Data.Metadata.Edm.EntitySet@)">
      <summary>
              使用实体集的指定名称返回一个 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 对象。
            </summary>
      <param name="name">
                要搜索的实体集的名称。
              </param>
      <param name="ignoreCase">
                <see langword="true" /> 若要执行不区分大小写的搜索;否则为 <see langword="false" />。
              </param>
      <param name="entitySet">
                它在此方法返回时会包含一个 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 对象。
                 如果不存在实体集，此输出参数将包含 null。
              </param>
      <returns>
              <see langword="true" /> 如果没有符合搜索条件; 一个实体集否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EntityContainer.TryGetRelationshipSetByName(System.String,System.Boolean,System.Data.Metadata.Edm.RelationshipSet@)">
      <summary>
              使用关系集的指定名称返回一个 <see cref="T:System.Data.Metadata.Edm.RelationshipSet" /> 对象。
            </summary>
      <param name="name">
                要搜索的关系集的名称。
              </param>
      <param name="ignoreCase">
                <see langword="true" /> 若要执行不区分大小写的搜索;否则为 <see langword="false" />。
              </param>
      <param name="relationshipSet">
                它在此方法返回时会包含一个 <see cref="T:System.Data.Metadata.Edm.RelationshipSet" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果没有符合搜索条件; 的关系集否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EntitySetBase.ToString">
      <summary>
              返回当前实体集或关系集的名称。
            </summary>
      <returns>
              当前实体集或关系集的名称。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EntityType.GetReferenceType">
      <summary>
              返回一个引用此 <see cref="T:System.Data.Metadata.Edm.RefType" /> 的 <see cref="T:System.Data.Metadata.Edm.EntityType" /> 对象。
            </summary>
      <returns>
              一个引用此 <see cref="T:System.Data.Metadata.Edm.RefType" /> 的 <see cref="T:System.Data.Metadata.Edm.EntityType" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EnumMember.ToString">
      <summary>
               重写 System.Object.ToString 以提供更好地为此类型的字符串表示形式。
            </summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.Facet.ToString">
      <summary>
              返回此 <see cref="T:System.Data.Metadata.Edm.Facet" /> 的名称。
            </summary>
      <returns>
              此 <see cref="T:System.Data.Metadata.Edm.Facet" /> 的名称。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.FacetDescription.ToString">
      <summary>
              返回此方面的名称。
            </summary>
      <returns>
              此方面的名称。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.FunctionParameter.ToString">
      <summary>
              返回此 <see cref="T:System.Data.Metadata.Edm.FunctionParameter" /> 的名称。
            </summary>
      <returns>
              此 <see cref="T:System.Data.Metadata.Edm.FunctionParameter" /> 的名称。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetEntityContainer(System.String)">
      <summary>
              使用指定的实体容器名称返回一个 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 对象。
            </summary>
      <param name="name">
                实体容器的名称。
              </param>
      <returns>
              如果不存在实体容器，此方法将返回 null；否则它将返回第一个实体容器。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetEntityContainer(System.String,System.Boolean)">
      <summary>
              使用指定的实体容器名称返回一个 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 对象。
            </summary>
      <param name="name">
                实体容器的名称。
              </param>
      <param name="ignoreCase">
                <see langword="true" /> 若要执行不区分大小写的搜索;否则为 <see langword="false" />。
              </param>
      <returns>
              如果不存在实体容器，此方法将返回 null；否则它将返回第一个实体容器。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetFunctions(System.Collections.Generic.Dictionary{System.String,System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Metadata.Edm.EdmFunction}},System.String,System.Boolean)">
      <summary>
              使用指定的名称从此项集合中返回所有函数重载。
            </summary>
      <param name="functionCollection">
                一个函数字典。
              </param>
      <param name="functionName">
                函数的全名。
              </param>
      <param name="ignoreCase">
                <see langword="true" /> 若要执行不区分大小写的搜索;否则为 <see langword="false" />。
              </param>
      <returns>
              一个 ReadOnlyCollection 类型的集合，其中包含具有指定名称的所有函数。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetFunctions(System.String)">
      <summary>
              使用指定的名称从此项集合中返回所有函数重载。
            </summary>
      <param name="functionName">
                函数的全名。
              </param>
      <returns>
              一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的集合，其中包含具有指定名称的所有函数。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetFunctions(System.String,System.Boolean)">
      <summary>
              使用指定的名称从此项集合中返回所有函数重载。
            </summary>
      <param name="functionName">
                函数的全名。
              </param>
      <param name="ignoreCase">
                <see langword="true" /> 若要执行不区分大小写的搜索;否则为 <see langword="false" />。
              </param>
      <returns>
              一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的集合，其中包含具有指定名称的所有函数。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetItem``1(System.String)">
      <summary>
              使用指定的标识返回一个强类型的 <see cref="T:System.Data.Metadata.Edm.GlobalItem" /> 对象。
            </summary>
      <param name="identity">
                项的标识。
              </param>
      <typeparam name="T">
                由方法返回的类型。
              </typeparam>
      <returns>
              由标识指定的项。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetItem``1(System.String,System.Boolean)">
      <summary>
              通过使用指定的标识进行区分大小写或不区分大小写的搜索，返回一个强类型的 <see cref="T:System.Data.Metadata.Edm.GlobalItem" /> 对象。
            </summary>
      <param name="identity">
                项的标识。
              </param>
      <param name="ignoreCase">
                <see langword="true" /> 若要执行不区分大小写的搜索;否则为 <see langword="false" />。
              </param>
      <typeparam name="T">
                由方法返回的类型。
              </typeparam>
      <returns>
              由标识指定的项。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetItems``1">
      <summary>
              从此项集合中返回属于指定类型的所有项。
            </summary>
      <typeparam name="T">
                由方法返回的类型。
              </typeparam>
      <returns>
              一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的集合，其中包含属于指定类型的所有项。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetType(System.String,System.String)">
      <summary>
              使用指定的类型名称和命名空间名称从此项集合中返回一个 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象。
            </summary>
      <param name="name">
                类型的名称。
              </param>
      <param name="namespaceName">
                类型的命名空间。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象，表示此项集合中与指定的类型名称和命名空间名称匹配的类型。
               如果不存在匹配的类型，此方法将返回 null。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetType(System.String,System.String,System.Boolean)">
      <summary>
              使用指定的类型名称和命名空间名称从此项集合中返回一个 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象。
            </summary>
      <param name="name">
                类型的名称。
              </param>
      <param name="namespaceName">
                类型的命名空间。
              </param>
      <param name="ignoreCase">
                <see langword="true" /> 若要执行不区分大小写的搜索;否则为 <see langword="false" />。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象，表示此项集合中与指定的类型名称和命名空间名称匹配的类型。
               如果不存在匹配的类型，此方法将返回 null。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.TryGetEntityContainer(System.String,System.Boolean,System.Data.Metadata.Edm.EntityContainer@)">
      <summary>
              使用指定的实体容器名称返回一个 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 对象。
               如果不存在实体容器，此输出参数将包含 null；否则，它将包含第一个实体容器。
            </summary>
      <param name="name">
                实体容器的名称。
              </param>
      <param name="ignoreCase">
                <see langword="true" /> 若要执行不区分大小写的搜索;否则为 <see langword="false" />。
              </param>
      <param name="entityContainer">
                它在此方法返回时会包含一个 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 对象。
                 如果不存在实体容器，此输出参数将包含 null；否则，它将包含第一个实体容器。
              </param>
      <returns>
              <see langword="true" /> 如果没有符合搜索条件; 一个实体容器否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.TryGetEntityContainer(System.String,System.Data.Metadata.Edm.EntityContainer@)">
      <summary>
              使用指定的实体容器名称返回一个 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 对象。
               如果不存在实体容器，该输出参数将包含 null；否则，它将包含第一个实体容器。
            </summary>
      <param name="name">
                实体容器的名称。
              </param>
      <param name="entityContainer">
                它在此方法返回时会包含一个 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 对象。
                 如果不存在实体容器，此输出参数将包含 null；否则，它将包含第一个实体容器。
              </param>
      <returns>
              <see langword="true" /> 如果没有符合搜索条件; 一个实体容器否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.TryGetItem``1(System.String,``0@)">
      <summary>
              使用指定的标识从此项集合中返回一个强类型的 <see cref="T:System.Data.Metadata.Edm.GlobalItem" /> 对象。
            </summary>
      <param name="identity">
                项的标识。
              </param>
      <param name="item">
                在此方法返回时，此输出参数会包含一个 <see cref="T:System.Data.Metadata.Edm.GlobalItem" /> 对象。
                 如果项集合中不存在具有指定标识的全局项，此输出参数将包含 null。
              </param>
      <typeparam name="T">
                由方法返回的类型。
              </typeparam>
      <returns>
              <see langword="true" /> 如果没有与搜索条件中; 匹配的项否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.TryGetItem``1(System.String,System.Boolean,``0@)">
      <summary>
              使用指定的标识从此项集合中返回一个强类型的 <see cref="T:System.Data.Metadata.Edm.GlobalItem" /> 对象。
            </summary>
      <param name="identity">
                项的标识。
              </param>
      <param name="ignoreCase">
                <see langword="true" /> 若要执行不区分大小写的搜索;否则为 <see langword="false" />。
              </param>
      <param name="item">
                在此方法返回时，此输出参数会包含一个 <see cref="T:System.Data.Metadata.Edm.GlobalItem" /> 对象。
                 如果项集合中不存在具有指定标识的全局项，此输出参数将包含 null。
              </param>
      <typeparam name="T">
                由方法返回的类型。
              </typeparam>
      <returns>
              <see langword="true" /> 如果没有与搜索条件中; 匹配的项否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.TryGetType(System.String,System.String,System.Boolean,System.Data.Metadata.Edm.EdmType@)">
      <summary>
              使用指定的类型名称和命名空间名称从此项集合中返回一个 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象。
            </summary>
      <param name="name">
                类型的名称。
              </param>
      <param name="namespaceName">
                类型的命名空间。
              </param>
      <param name="ignoreCase">
                <see langword="true" /> 若要执行不区分大小写的搜索;否则为 <see langword="false" />。
              </param>
      <param name="type">
                在此方法返回时，此输出参数会包含一个 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象。
                 如果此项集合中不存在具有指定的名称和命名空间名称的类型，此输出参数将包含 null。
              </param>
      <returns>
              <see langword="true" /> 如果不存在匹配搜索条件; 类型否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.TryGetType(System.String,System.String,System.Data.Metadata.Edm.EdmType@)">
      <summary>
              使用指定的类型名称和命名空间名称从此项集合中返回一个 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象。
            </summary>
      <param name="name">
                类型的名称。
              </param>
      <param name="namespaceName">
                类型的命名空间。
              </param>
      <param name="type">
                在此方法返回时，此输出参数会包含一个 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象。
                 如果此项集合中不存在具有指定的名称和命名空间名称的类型，此输出参数将包含 null。
              </param>
      <returns>
              <see langword="true" /> 如果不存在匹配搜索条件; 类型否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataItem.GetBuiltInType(System.Data.Metadata.Edm.BuiltInTypeKind)">
      <summary>
              返回概念模型内置类型之一相匹配的 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 值。
            </summary>
      <param name="builtInTypeKind">
                <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 值之一。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象，表示 EDM 中的内置类型。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataItem.GetGeneralFacetDescriptions">
      <summary>
              返回有关指定类型的常规方面的说明列表。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 对象，表示有关指定类型的常规方面的说明列表。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>
              新实例初始化 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> 类使用指定的路径和程序集。
            </summary>
      <param name="paths">
                工作区元数据路径。
              </param>
      <param name="assembliesToConsider">
                用于构造工作区中的程序集的名称。
              </param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.ClearCache">
      <summary>
              清除所有的元数据缓存条目。
            </summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.CreateEntitySqlParser">
      <summary>
              创建 <see cref="T:System.Data.Common.EntitySql.EntitySqlParser" /> 配置为使用 <see cref="F:System.Data.Metadata.Edm.DataSpace.CSpace" /> 数据空间。
            </summary>
      <returns>
              创建的分析器对象中。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.CreateQueryCommandTree(System.Data.Common.CommandTrees.DbExpression)">
      <summary>
              创建一个新 <see cref="T:System.Data.Common.CommandTrees.DbQueryCommandTree" /> 绑定到指定的查询表达式在基于此元数据工作区中。
            </summary>
      <param name="query">
                一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，它定义查询。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Common.CommandTrees.DbQueryCommandTree" /> 使用指定的表达式按原样 <see cref="P:System.Data.Common.CommandTrees.DbQueryCommandTree.Query" /> 属性。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="query" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="query" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="query" />
                </exception>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetEdmSpaceType(System.Data.Metadata.Edm.EnumType)">
      <summary>
              返回 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 对象，表示 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 由该参数提供的类型匹配 <paramref name="objectSpaceType" />。
            </summary>
      <param name="objectSpaceType">
                一个在对象空间中提供类型的 <see cref="T:System.Data.Metadata.Edm.EnumlType" />。
              </param>
      <returns>
              一个表示 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 的 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象。
               如果不存在匹配的类型，此方法将返回 null。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetEdmSpaceType(System.Data.Metadata.Edm.StructuralType)">
      <summary>
              返回 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 对象，表示 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 由该参数提供的类型匹配 <paramref name="objectSpaceType" />。
            </summary>
      <param name="objectSpaceType">
                一个在对象空间中提供类型的 <see cref="T:System.Data.Metadata.Edm.StructuralType" />。
              </param>
      <returns>
              一个表示 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 的 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象。
               如果不存在匹配的类型，此方法将返回 null。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetEntityContainer(System.String,System.Boolean,System.Data.Metadata.Edm.DataSpace)">
      <summary>
              使用指定的实体容器名称和数据模型返回一个 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 对象。
            </summary>
      <param name="name">
                实体容器的名称。
              </param>
      <param name="ignoreCase">
                <see langword="true" /> 若要执行不区分大小写的搜索;否则为 <see langword="false" />。
              </param>
      <param name="dataSpace">
                在其搜索实体容器的概念模型。
              </param>
      <returns>
              如果不存在实体容器，此方法将返回 null；否则它将返回第一个实体容器。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetEntityContainer(System.String,System.Data.Metadata.Edm.DataSpace)">
      <summary>
              使用指定的实体容器名称和数据模型返回一个 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 对象。
            </summary>
      <param name="name">
                实体容器的名称。
              </param>
      <param name="dataSpace">
                在其搜索实体容器的概念模型。
              </param>
      <returns>
              如果不存在实体容器，此方法将返回 null；否则它将返回第一个实体容器。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetFunctions(System.String,System.String,System.Data.Metadata.Edm.DataSpace)">
      <summary>
              使用指定的名称、命名空间名称和数据模型返回所有函数重载。
            </summary>
      <param name="name">
                函数名。
              </param>
      <param name="namespaceName">
                函数的命名空间。
              </param>
      <param name="dataSpace">
                概念模型函数要搜索顺序。
              </param>
      <returns>
              一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的集合，其中包含给定命名空间和数据模型中与指定名称匹配的所有函数。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetFunctions(System.String,System.String,System.Data.Metadata.Edm.DataSpace,System.Boolean)">
      <summary>
              使用指定的名称、命名空间名称和数据模型返回所有函数重载。
            </summary>
      <param name="name">
                函数名。
              </param>
      <param name="namespaceName">
                函数的命名空间。
              </param>
      <param name="dataSpace">
                概念模型函数要搜索顺序。
              </param>
      <param name="ignoreCase">
                <see langword="true" /> 若要执行不区分大小写的搜索;否则为 <see langword="false" />。
              </param>
      <returns>
              一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的集合，其中包含给定命名空间和数据模型中与指定名称匹配的所有函数。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetItem``1(System.String,System.Boolean,System.Data.Metadata.Edm.DataSpace)">
      <summary>
              使用指定的标识和数据模型返回一个项。
            </summary>
      <param name="identity">
                项的标识。
              </param>
      <param name="ignoreCase">
                <see langword="true" /> 若要执行不区分大小写的搜索;否则为 <see langword="false" />。
              </param>
      <param name="dataSpace">
                在其搜索该项目的概念模型。
              </param>
      <typeparam name="T">
                由方法返回的类型。
              </typeparam>
      <returns>
              指定的数据模型中与给定标识匹配的项。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetItem``1(System.String,System.Data.Metadata.Edm.DataSpace)">
      <summary>
              使用指定的标识和数据模型返回一个项。
            </summary>
      <param name="identity">
                项的标识。
              </param>
      <param name="dataSpace">
                在其中搜索项的概念模型。
              </param>
      <typeparam name="T">
                由方法返回的类型。
              </typeparam>
      <returns>
              指定的数据模型中与给定标识匹配的项。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetItemCollection(System.Data.Metadata.Edm.DataSpace)">
      <summary>
              获取 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> 项。
            </summary>
      <param name="dataSpace">
                <see cref="T:System.Data.Metadata.Edm.DataSpace" /> 要从中检索项。
              </param>
      <returns>
              <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> 项。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetItems(System.Data.Metadata.Edm.DataSpace)">
      <summary>
              获取指定数据模型中的所有项。
            </summary>
      <param name="dataSpace">
                为其需要的项的列表的概念模型。
              </param>
      <returns>
              一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的集合，其中包含指定数据模型中的所有项。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetItems``1(System.Data.Metadata.Edm.DataSpace)">
      <summary>
              获取指定数据模型中的所有项。
            </summary>
      <param name="dataSpace">
                为其需要的项的列表的概念模型。
              </param>
      <typeparam name="T">
                由方法返回的类型。
              </typeparam>
      <returns>
              一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的集合，其中包含指定数据模型中的所有项。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetObjectSpaceType(System.Data.Metadata.Edm.EnumType)">
      <summary>
              返回 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 对象，表示对象空间类型由该参数提供的类型相匹配 <paramref name="edmSpaceType" />。
            </summary>
      <param name="edmSpaceType">
                一个表示 <see cref="T:System.Data.Metadata.Edm.EnumType" /> 的 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象。
              </param>
      <returns>
              一个表示对象空间类型的 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 对象。
               如果不存在匹配的类型，此方法将返回 null。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetObjectSpaceType(System.Data.Metadata.Edm.StructuralType)">
      <summary>
              返回 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 对象，表示对象空间类型由该参数提供的类型相匹配 <paramref name="edmSpaceType" />。
            </summary>
      <param name="edmSpaceType">
                一个表示 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 的 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象。
              </param>
      <returns>
              一个表示对象空间类型的 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 对象。
               如果不存在匹配的类型，此方法将返回 null。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetPrimitiveTypes(System.Data.Metadata.Edm.DataSpace)">
      <summary>
              返回指定数据模型中的基元类型列表。
            </summary>
      <param name="dataSpace">
                需要获取其基元类型列表的数据模型。
              </param>
      <returns>
              一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的集合，其中包含指定数据模型中的所有基元类型。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetRelevantMembersForUpdate(System.Data.Metadata.Edm.EntitySetBase,System.Data.Metadata.Edm.EntityTypeBase,System.Boolean)">
      <summary>
               返回成员的给定 <see cref="T:System.Data.Metadata.Edm.EntitySet" />/<see cref="T:System.Data.Metadata.Edm.EntityType" /> 用于修改实体时需要的原始值。
            </summary>
      <param name="entitySet">
                <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 属于 C 间距。
              </param>
      <param name="entityType">
                <see cref="T:System.Data.Metadata.Edm.EntityType" /> ，参与给定 <see cref="T:System.Data.Metadata.Edm.EntitySet" />。
              </param>
      <param name="partialUpdateSupported">
                <see langword="true" /> 如果可能部分; 更新实体否则为 <see langword="false" />。
              </param>
      <returns>
              <see cref="T:System.Data.Metadata.Edm.EdmMember" />S 为其原始值是必需的。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetRequiredOriginalValueMembers(System.Data.Metadata.Edm.EntitySetBase,System.Data.Metadata.Edm.EntityTypeBase)">
      <summary>
              从实体集和实体类型获取原始值成员。
            </summary>
      <param name="entitySet">
                实体集要从其中检索原始值。
              </param>
      <param name="entityType">
                要检索原始值的实体类型。
              </param>
      <returns>
              从实体集和实体类型获取原始值成员。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetType(System.String,System.String,System.Boolean,System.Data.Metadata.Edm.DataSpace)">
      <summary>
              使用指定的类型名称、命名空间名称和数据模型返回一个 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象。
            </summary>
      <param name="name">
                类型的名称。
              </param>
      <param name="namespaceName">
                类型的命名空间。
              </param>
      <param name="ignoreCase">
                <see langword="true" /> 若要执行不区分大小写的搜索;否则为 <see langword="false" />。
              </param>
      <param name="dataSpace">
                在其搜索该类型的概念模型。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetType(System.String,System.String,System.Data.Metadata.Edm.DataSpace)">
      <summary>
              使用指定的类型名称、命名空间名称和数据模型返回一个 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象。
            </summary>
      <param name="name">
                类型的名称。
              </param>
      <param name="namespaceName">
                类型的命名空间。
              </param>
      <param name="dataSpace">
                在其搜索该类型的概念模型。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象，表示指定的数据模型中与给定的类型名称和命名空间名称匹配的类型。
               如果不存在匹配的类型，此方法将返回 null。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.LoadFromAssembly(System.Reflection.Assembly)">
      <summary>
              加载给定程序集中的元数据。
            </summary>
      <param name="assembly">
                将加载其元数据的程序集。
              </param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.LoadFromAssembly(System.Reflection.Assembly,System.Action{System.String})">
      <summary>
              加载给定程序集中的元数据。
            </summary>
      <param name="assembly">
                将加载其元数据的程序集。
              </param>
      <param name="logLoadMessage">
                用于加载消息日志记录的委托。
              </param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.RegisterItemCollection(System.Data.Metadata.Edm.ItemCollection)">
      <summary>
              在每个关联的数据模型中注册项集合。
            </summary>
      <param name="collection">
                需要填充的输出参数集合。
              </param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetEdmSpaceType(System.Data.Metadata.Edm.EnumType,System.Data.Metadata.Edm.EnumType@)">
      <summary>
              返回 <see cref="T:System.Data.Metadata.Edm.EnumType" /> 通过输出参数的对象 <paramref name="edmSpaceType" /> ，它表示 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 由该参数提供的类型匹配 <paramref name="objectSpaceType" />。
            </summary>
      <param name="objectSpaceType">
                一个表示对象空间类型的 <see cref="T:System.Data.Metadata.Edm.EnumType" /> 对象。
              </param>
      <param name="edmSpaceType">
                此方法返回时，包含 <see cref="T:System.Data.Metadata.Edm.EnumType" /> 对象，表示 <see cref="T:System.Data.Metadata.Edm.EdmType" />。
                 此参数未经初始化即被传递。
              </param>
      <returns>
              <see langword="true" /> 如果成功， <see langword="false" /> 失败。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetEdmSpaceType(System.Data.Metadata.Edm.StructuralType,System.Data.Metadata.Edm.StructuralType@)">
      <summary>
              返回 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 通过输出参数的对象 <paramref name="edmSpaceType" /> ，它表示 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 由该参数提供的类型匹配 <paramref name="objectSpaceType" />。
            </summary>
      <param name="objectSpaceType">
                一个表示对象空间类型的 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 对象。
              </param>
      <param name="edmSpaceType">
                此方法返回时，包含 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 对象，表示 <see cref="T:System.Data.Metadata.Edm.EdmType" />。
                 此参数未经初始化即被传递。
              </param>
      <returns>
              <see langword="true" /> 如果不存在匹配搜索条件; 类型否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetEntityContainer(System.String,System.Boolean,System.Data.Metadata.Edm.DataSpace,System.Data.Metadata.Edm.EntityContainer@)">
      <summary>
              使用指定的实体容器名称和数据模型返回一个 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 对象。
            </summary>
      <param name="name">
                实体容器的名称。
              </param>
      <param name="ignoreCase">
                <see langword="true" /> 若要执行不区分大小写的搜索;否则为 <see langword="false" />。
              </param>
      <param name="dataSpace">
                在其搜索实体容器的概念模型。
              </param>
      <param name="entityContainer">
                它在此方法返回时会包含一个 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 对象。
                 如果不存在实体容器，此输出参数将包含 null；否则，它将返回第一个实体容器。
                 此参数未经初始化即被传递。
              </param>
      <returns>
              <see langword="true" /> 如果没有符合搜索条件; 一个实体容器否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetEntityContainer(System.String,System.Data.Metadata.Edm.DataSpace,System.Data.Metadata.Edm.EntityContainer@)">
      <summary>
              使用指定的实体容器名称和数据模型返回一个 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 对象。
            </summary>
      <param name="name">
                实体容器的名称。
              </param>
      <param name="dataSpace">
                在其搜索实体容器的概念模型。
              </param>
      <param name="entityContainer">
                它在此方法返回时会包含一个 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 对象。
                 如果不存在实体容器，此输出参数将包含 null；否则，它将返回第一个实体容器。
                 此参数未经初始化即被传递。
              </param>
      <returns>
              <see langword="true" /> 如果没有符合搜索条件; 一个实体容器否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetItem``1(System.String,System.Boolean,System.Data.Metadata.Edm.DataSpace,``0@)">
      <summary>
              使用指定的标识和数据模型返回一个项。
            </summary>
      <param name="identity">
                在其搜索该项目的概念模型。
              </param>
      <param name="ignoreCase">
                <see langword="true" /> 若要执行不区分大小写的搜索;否则为 <see langword="false" />。
              </param>
      <param name="dataSpace">
                在其搜索该项目的概念模型。
              </param>
      <param name="item">
                它在此方法返回时会包含一个 <see cref="T:System.Data.Metadata.Edm.GlobalIem" /> 对象。
                 此参数未经初始化即被传递。
              </param>
      <typeparam name="T">
                由方法返回的类型。
              </typeparam>
      <returns>
              <see langword="true" /> 如果没有与搜索条件中; 匹配的项否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetItem``1(System.String,System.Data.Metadata.Edm.DataSpace,``0@)">
      <summary>
              使用指定的标识和数据模型返回一个项。
            </summary>
      <param name="identity">
                在其搜索该项目的概念模型。
              </param>
      <param name="space">
                在其搜索该项目的概念模型。
              </param>
      <param name="item">
                它在此方法返回时会包含一个 <see cref="T:System.Data.Metadata.Edm.GlobalIem" /> 对象。
                 此参数未经初始化即被传递。
              </param>
      <typeparam name="T">
                由方法返回的类型。
              </typeparam>
      <returns>
              <see langword="true" /> 如果没有与搜索条件中; 匹配的项否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetItemCollection(System.Data.Metadata.Edm.DataSpace,System.Data.Metadata.Edm.ItemCollection@)">
      <summary>
              测试检索 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />。
            </summary>
      <param name="dataSpace">
                <see cref="T:System.Data.Metadata.Edm.DataSpace" /> 从其中尝试检索 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />。
              </param>
      <param name="collection">
                此方法返回时，包含的项集合。
                 此参数未经初始化即被传递。
              </param>
      <returns>
              <see langword="true" /> 如果检索成功;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetObjectSpaceType(System.Data.Metadata.Edm.EnumType,System.Data.Metadata.Edm.EnumType@)">
      <summary>
              返回 <see cref="T:System.Data.Metadata.Edm.EnumType" /> 通过输出参数的对象 <paramref name="objectSpaceType" /> ，它表示与匹配的类型 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 由该参数提供 <paramref name="edmSpaceType" />。
            </summary>
      <param name="edmSpaceType">
                一个表示 <see cref="T:System.Data.Metadata.Edm.EnumType" /> 的 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象。
              </param>
      <param name="objectSpaceType">
                此方法返回时，包含 <see cref="T:System.Data.Metadata.Edm.EnumType" /> 对象，表示对象空间类型。
                 此参数未经初始化即被传递。
              </param>
      <returns>
              <see langword="true" /> 如果不存在匹配搜索条件; 类型否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetObjectSpaceType(System.Data.Metadata.Edm.StructuralType,System.Data.Metadata.Edm.StructuralType@)">
      <summary>
              返回 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 通过输出参数的对象 <paramref name="objectSpaceType" /> ，它表示与匹配的类型 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 由该参数提供 <paramref name="edmSpaceType" />。
            </summary>
      <param name="edmSpaceType">
                一个表示 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 的 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象。
              </param>
      <param name="objectSpaceType">
                此方法返回时，包含 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 对象，表示对象空间类型。
                 此参数未经初始化即被传递。
              </param>
      <returns>
              <see langword="true" /> 如果不存在匹配搜索条件; 类型否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetType(System.String,System.String,System.Boolean,System.Data.Metadata.Edm.DataSpace,System.Data.Metadata.Edm.EdmType@)">
      <summary>
              使用指定的类型名称、命名空间名称和数据模型返回一个 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象。
            </summary>
      <param name="name">
                类型的名称。
              </param>
      <param name="namespaceName">
                类型的命名空间。
              </param>
      <param name="ignoreCase">
                <see langword="true" /> 若要执行不区分大小写的搜索;否则为 <see langword="false" />。
              </param>
      <param name="dataSpace">
                在其搜索该类型的概念模型。
              </param>
      <param name="type">
                它在此方法返回时会包含一个 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象。
                 此参数未经初始化即被传递。
              </param>
      <returns>
              <see langword="true" /> 如果不存在匹配搜索条件; 类型否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetType(System.String,System.String,System.Data.Metadata.Edm.DataSpace,System.Data.Metadata.Edm.EdmType@)">
      <summary>
              使用指定的类型名称、命名空间名称和数据模型返回一个 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象。
            </summary>
      <param name="name">
                类型的名称。
              </param>
      <param name="namespaceName">
                类型的命名空间。
              </param>
      <param name="dataSpace">
                在其搜索该类型的概念模型。
              </param>
      <param name="type">
                它在此方法返回时会包含一个 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象。
                 此参数未经初始化即被传递。
              </param>
      <returns>
              <see langword="true" /> 如果不存在匹配搜索条件; 类型否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.NavigationProperty.GetDependentProperties">
      <summary>
              获取一个导航属性，引用约束的依赖端上的外键属性。
            </summary>
      <returns>
              外键属性的集合。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Metadata.Edm.ObjectItemCollection" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.GetClrType(System.Data.Metadata.Edm.EnumType)">
      <summary>
               该方法返回指定 OSpace 类型参数的基础 CLR 类型。
               如果参数的数据空间不是 OSpace，将引发 ArgumentException。
            </summary>
      <param name="objectSpaceType">
                要查找的 OSpace 类型。
              </param>
      <returns>
              OSpace 参数的 CLR 类型。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.GetClrType(System.Data.Metadata.Edm.StructuralType)">
      <summary>
              返回对应的 CLR 类型 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 由 objectSpaceType 参数提供。
            </summary>
      <param name="objectSpaceType">
                一个表示对象空间类型的 <see cref="T:System.Data.Metadata.Edm.StructuralType" />。
              </param>
      <returns>
              OSpace 参数的 CLR 类型。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.GetItems``1">
      <summary>
              从此项集合中返回属于指定类型的所有项。
            </summary>
      <typeparam name="T">
                由方法返回的类型。
              </typeparam>
      <returns>
              类型的集合 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 其中包含指定类型的所有项。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.GetPrimitiveTypes">
      <summary>
              返回的基元类型对象的集合。
            </summary>
      <returns>
              基元类型对象的集合。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly)">
      <summary>
              加载给定程序集中的元数据。
            </summary>
      <param name="assembly">
                将加载其元数据的程序集。
              </param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly,System.Data.Metadata.Edm.EdmItemCollection)">
      <summary>
              从指定的程序集加载元数据。
            </summary>
      <param name="assembly">
                将加载其元数据的程序集。
              </param>
      <param name="edmItemCollection">
                O 空间元数据 EDM 元数据源。
              </param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly,System.Data.Metadata.Edm.EdmItemCollection,System.Action{System.String})">
      <summary>
              加载给定程序集中的元数据。
            </summary>
      <param name="assembly">
                将加载其元数据的程序集。
              </param>
      <param name="edmItemCollection">
                O 空间元数据 EDM 元数据源。
              </param>
      <param name="logLoadMessage">
                消息发送到哪个日志委托。
              </param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.TryGetClrType(System.Data.Metadata.Edm.EnumType,System.Type@)">
      <summary>
              返回指定 OSpace 枚举类型参数的基础 CLR 类型。
               如果参数的数据空间不是 OSpace，该方法返回 false，并将输出参数设置为 null。
            </summary>
      <param name="objectSpaceType">
                要查找的 OSpace 枚举类型
              </param>
      <param name="clrType">
                CLR 枚举类型的 OSpace 参数
              </param>
      <returns>
              成功，true false 失败
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.TryGetClrType(System.Data.Metadata.Edm.StructuralType,System.Type@)">
      <summary>
              返回对应的 CLR 类型 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 由 objectSpaceType 参数提供。
            </summary>
      <param name="objectSpaceType">
                一个表示对象空间类型的 <see cref="T:System.Data.Metadata.Edm.StructuralType" />。
              </param>
      <param name="clrType">
                CLR 类型。
              </param>
      <returns>
              <see langword="true" /> 如果不存在匹配搜索条件; 类型否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.PrimitiveType.GetEdmPrimitiveType">
      <summary>
              返回与此 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 等效的 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />。
            </summary>
      <returns>
              一个与此 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 等效的 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.PrimitiveType.GetEdmPrimitiveType(System.Data.Metadata.Edm.PrimitiveTypeKind)">
      <summary>
              返回等效 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 的 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />。
            </summary>
      <param name="primitiveTypeKind">
                一个 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 类型的值。
              </param>
      <returns>
              <see cref="T:System.Data.Metadata.Edm.EdmType" /> 等同于指定的对象 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.PrimitiveType.GetEdmPrimitiveTypes">
      <summary>
              返回基元类型的列表。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的集合，其中包含基元类型的列表。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Contains(System.String)">
      <summary>
              确定集合中是否包含具有指定标识的项。
            </summary>
      <param name="identity">
                项的标识。
              </param>
      <returns>
              <see langword="true" /> 如果集合包含的项，要在其中搜索;否则为 <see langword="false" />。
               默认值为 false。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Dispose">
      <summary>
              释放此枚举数。
            </summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.MoveNext">
      <summary>
              在 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator" /> 类型的集合中移至下一个成员。
            </summary>
      <returns>
              <see langword="true" /> 如果枚举数移类型集合中 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.EnumeratortaCollection" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Reset">
      <summary>
              将枚举数定位在 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合中的第一个位置之前。
            </summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.GetEnumerator">
      <summary>
              返回一个可循环访问此集合的枚举数。
            </summary>
      <returns>
              一个可用于循环访问此 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator" /> 的 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection" />。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.GetValue(System.String,System.Boolean)">
      <summary>
              使用指定的标识从此集合中检索一个项。
            </summary>
      <param name="identity">
                要搜索的项的标识。
              </param>
      <param name="ignoreCase">
                <see langword="true" /> 若要执行不区分大小写的搜索;否则为 <see langword="false" />。
              </param>
      <returns>
              此集合中的一个项。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.IndexOf(`0)">
      <summary>
              返回指定的值在此集合中的索引。
            </summary>
      <param name="value">
                要搜寻的值。
              </param>
      <returns>
              指定的值在此集合中的索引。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.TryGetValue(System.String,System.Boolean,`0@)">
      <summary>
              使用指定的标识从此集合中检索一个项。
            </summary>
      <param name="identity">
                要搜索的项的标识。
              </param>
      <param name="ignoreCase">
                <see langword="true" /> 若要执行不区分大小写的搜索;否则为 <see langword="false" />。
              </param>
      <param name="item">
                在此方法返回时，此输出参数会包含集合中的一个项。
                 如果不存在匹配的项，此输出参数将包含 null。
              </param>
      <returns>
              <see langword="true" /> 如果没有与搜索条件中; 匹配的项否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReferentialConstraint.ToString">
      <summary>
              返回 <see cref="P:System.Data.Metadata.Edm.ReferentialConstraint.FromRole" /> 和 <see cref="P:System.Data.Metadata.Edm.ReferentialConstraint.ToRole" /> 的名称组合。
            </summary>
      <returns>
              <see cref="P:System.Data.Metadata.Edm.ReferentialConstraint.FromRole" /> 和 <see cref="P:System.Data.Metadata.Edm.ReferentialConstraint.ToRole" /> 的名称组合。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.RelationshipEndMember.GetEntityType">
      <summary>
              在关联 EndMember 的 EntityType 的访问。
            </summary>
      <returns>
              在关联 EndMember 的 EntityType。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.StoreItemCollection.#ctor(System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>
              新实例初始化 <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> 类使用指定的 XMLReader。
            </summary>
      <param name="xmlReaders">
                XMLReader 用于创建元数据。
              </param>
    </member>
    <member name="M:System.Data.Metadata.Edm.StoreItemCollection.#ctor(System.String[])">
      <summary>
              新实例初始化 <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> 类使用指定的文件路径。
            </summary>
      <param name="filePaths">
                用于创建元数据的文件路径。
              </param>
    </member>
    <member name="M:System.Data.Metadata.Edm.StoreItemCollection.GetPrimitiveTypes">
      <summary>
              返回一个由 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 对象构成的集合。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 对象表示的集合 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateBinaryTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Boolean)">
      <summary>
              创建一个使用指定方面值描述二进制类型的 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 对象。
            </summary>
      <param name="primitiveType">
                要为其创建 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 对象的 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />。
              </param>
      <param name="isFixedLength">
                <see langword="true" />将二进制类型的长度设置为固定;否则为<see langword="false" />。
              </param>
      <returns>
              一个使用指定方面值描述二进制类型的 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateBinaryTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Boolean,System.Int32)">
      <summary>
              创建一个使用指定方面值描述二进制类型的 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 对象。
            </summary>
      <param name="primitiveType">
                要为其创建 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 对象的 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />。
              </param>
      <param name="isFixedLength">
                <see langword="true" /> 若要将二进制类型的长度设置为固定的;否则为 <see langword="false" />。
              </param>
      <param name="maxLength">
                二进制类型的最大长度。
              </param>
      <returns>
              一个使用指定方面值描述二进制类型的 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateDateTimeOffsetTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>
              创建 <see cref="T:System.Data.Metadata.Edm.DateTimeOffsetTypeUsage" /> 类型参数所描述的对象。
            </summary>
      <param name="primitiveType">
                简单类型定义的偏移量的度量单位。
              </param>
      <param name="precision">
                粒度度 <see cref="T:System." />一秒的小数部分中的 DateTimeOffset 基于的受支持的小数位数。
                 例如，精度为 3 表示支持的精度为毫秒。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.DateTimeOffsetTypeUsage" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateDateTimeTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>
              创建 <see cref="T:System.Data.Metadata.Edm.DateTimeTypeUsage" /> 类型参数所描述的对象。
            </summary>
      <param name="primitiveType">
                定义的度量单位的简单类型 <see cref="T:System." />DateTime 对象。
              </param>
      <param name="precision">
                粒度度 <see cref="T:System." />一秒的小数部分中的 DateTimeOffset 基于的受支持的小数位数。
                 例如，精度为 3 表示支持的精度为毫秒。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.DateTimeTypeUsage" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateDecimalTypeUsage(System.Data.Metadata.Edm.PrimitiveType)">
      <summary>
              创建一个用无限精度和小数位数方面值描述十进制类型的 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 对象。
            </summary>
      <param name="primitiveType">
                要为其创建 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 对象的 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />。
              </param>
      <returns>
              一个使用无限精度和小数位数方面值描述十进制类型的 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateDecimalTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Byte,System.Byte)">
      <summary>
              创建一个使用指定方面值描述十进制类型的 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 对象。
            </summary>
      <param name="primitiveType">
                要为其创建 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 对象的 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />。
              </param>
      <param name="precision">
                类型为 decimal 类型的精度 <see cref="T:System.Byte" />。
              </param>
      <param name="scale">
                类型为 decimal 类型的小数位数 <see cref="T:System.Byte" />。
              </param>
      <returns>
              一个使用指定方面值描述十进制类型的 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateDefaultTypeUsage(System.Data.Metadata.Edm.EdmType)">
      <summary>
              创建 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 与指定的概念模型类型的对象。
            </summary>
      <param name="edmType">
                要为其创建 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象的 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />。
              </param>
      <returns>
              一个具有指定 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 的默认方面值的 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateStringTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Boolean,System.Boolean)">
      <summary>
              创建 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 要使用指定的方面值描述字符串类型的对象和无限 <see langword="MaxLength" />。
            </summary>
      <param name="primitiveType">
                要为其创建 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 对象的 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />。
              </param>
      <param name="isUnicode">
                <see langword="true" /> 若要设置的字符编码为 Unicode; string 类型的标准否则为 <see langword="false" />。
              </param>
      <param name="isFixedLength">
                <see langword="true" /> 若要将字符串类型的长度设置为固定的;否则为 <see langword="false" />
              </param>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 使用指定的方面值描述字符串类型的对象和无限 <see langword="MaxLength" />。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateStringTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Boolean,System.Boolean,System.Int32)">
      <summary>
              创建一个使用指定方面值描述字符串类型的 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 对象。
            </summary>
      <param name="primitiveType">
                要为其创建 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 对象的 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />。
              </param>
      <param name="isUnicode">
                <see langword="true" /> 若要设置的字符编码为 Unicode; string 类型的标准否则为 <see langword="false" />。
              </param>
      <param name="isFixedLength">
                <see langword="true" /> 若要设置的字符编码为 Unicode; string 类型的标准否则为 <see langword="false" />。
              </param>
      <param name="maxLength">
                <see langword="true" /> 若要将字符串类型的长度设置为固定的;否则为 <see langword="false" />。
              </param>
      <returns>
              一个使用指定方面值描述字符串类型的 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateTimeTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>
              创建 <see cref="T:System.Data.Metadata.Edm.TimeTypeUsage" /> 类型参数所描述的对象。
            </summary>
      <param name="primitiveType">
                定义的度量单位的简单类型 <see cref="T:System." />DateTime 对象。
              </param>
      <param name="precision">
                粒度度 <see cref="T:System." />一秒的小数部分中的 DateTimeOffset 基于的受支持的小数位数。
                 例如，精度为 3 表示支持的精度为毫秒。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.TimeTypeUsage" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.IsSubtypeOf(System.Data.Metadata.Edm.TypeUsage)">
      <summary>
              检查此 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 是否为指定 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 的子类型。
            </summary>
      <param name="typeUsage">
                要检查的 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果此 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 是指定的子类型 <see cref="T:System.Data.Metadata.Edm.TypeUsage" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.ToString">
      <summary>
              返回由此 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 描述的类型的全名。
            </summary>
      <returns>
              此描述的类型的全名 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 作为字符串。
            </returns>
    </member>
    <member name="M:System.Data.MetadataException.#ctor">
      <summary>
              使用默认消息初始化 <see cref="T:System.Data.MetadataException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.MetadataException.#ctor(System.String)">
      <summary>
              使用指定的消息初始化 <see cref="T:System.Data.MetadataException" /> 类的新实例。
            </summary>
      <param name="message">
                异常消息。
              </param>
    </member>
    <member name="M:System.Data.MetadataException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的消息和内部异常初始化 <see cref="T:System.Data.MetadataException" /> 类的新实例。
            </summary>
      <param name="message">
                异常消息。
              </param>
      <param name="innerException">
                导致此 <see cref="T:System.Data.MetadataException" /> 的异常。
              </param>
    </member>
    <member name="M:System.Data.ObjectNotFoundException.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.ObjectNotFoundException" /> 的新实例。
            </summary>
    </member>
    <member name="M:System.Data.ObjectNotFoundException.#ctor(System.String)">
      <summary>
              使用指定的错误消息初始化 <see cref="T:System.Data.ObjectNotFoundException" /> 的新实例。
            </summary>
      <param name="message">
                描述错误的消息。
              </param>
    </member>
    <member name="M:System.Data.ObjectNotFoundException.#ctor(System.String,System.Exception)">
      <summary>
              初始化 <see cref="T:System.Data.ObjectNotFoundException" /> 类的新实例，该类使用指定的错误消息和对内部异常的引用。
            </summary>
      <param name="message">
                描述错误的消息。
              </param>
      <param name="innerException">
                导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。
              </param>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})">
      <summary>
              创建一个表示已编译的 LINQ to Entities 查询的新委托。
            </summary>
      <param name="query">
                要编译的 lambda 表达式。
              </param>
      <typeparam name="TArg0">
                一种类型派生自 <see cref="T:System.Data.Objects.ObjectContext" />。
              </typeparam>
      <typeparam name="TArg1">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg1 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg2">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg2 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg3">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg3 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg4">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg4 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg5">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg5 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg6">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg6 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg7">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg7 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg8">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg8 " />必须是基元类型。
              </typeparam>
      <typeparam name="TResult">
                类型 <paramref name="T" /> 查询返回的结果执行的委托所返回 <see cref="M:System.Data.Objects.CompiledQuery.Compile``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})" /> 方法。
              </typeparam>
      <returns>
              <see cref="T:System.Func`10" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。
            </returns>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})">
      <summary>
              创建一个表示已编译的 LINQ to Entities 查询的新委托。
            </summary>
      <param name="query">
                要编译的 lambda 表达式。
              </param>
      <typeparam name="TArg0">
                一种类型派生自 <see cref="T:System.Data.Objects.ObjectContext" />。
              </typeparam>
      <typeparam name="TArg1">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg1 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg2">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg2 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg3">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg3 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg4">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg4 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg5">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg5 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg6">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg6 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg7">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg7 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg8">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg8 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg9">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg9 " />必须是基元类型。
              </typeparam>
      <typeparam name="TResult">
                类型 <paramref name="T" /> 查询返回的结果执行的委托所返回 <see cref="M:System.Data.Objects.CompiledQuery.Compile``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})" /> 方法。
              </typeparam>
      <returns>
              <see cref="T:System.Func`11" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。
            </returns>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})">
      <summary>
              创建一个表示已编译的 LINQ to Entities 查询的新委托。
            </summary>
      <param name="query">
                要编译的 lambda 表达式。
              </param>
      <typeparam name="TArg0">
                一种类型派生自 <see cref="T:System.Data.Objects.ObjectContext" />。
              </typeparam>
      <typeparam name="TArg1">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg1 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg2">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg2 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg3">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg3 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg4">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg4 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg5">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg5 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg6">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg6 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg7">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg7 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg8">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg8 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg9">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg9 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg10">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg10 " />必须是基元类型。
              </typeparam>
      <typeparam name="TResult">
                类型 <paramref name="T" /> 查询返回的结果执行的委托所返回 <see cref="M:System.Data.Objects.CompiledQuery.Compile``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})" /> 方法。
              </typeparam>
      <returns>
              <see cref="T:System.Func`12" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。
            </returns>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})">
      <summary>
              创建一个表示已编译的 LINQ to Entities 查询的新委托。
            </summary>
      <param name="query">
                要编译的 lambda 表达式。
              </param>
      <typeparam name="TArg0">
                一种类型派生自 <see cref="T:System.Data.Objects.ObjectContext" />。
              </typeparam>
      <typeparam name="TArg1">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg1 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg2">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg2 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg3">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg3 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg4">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg4 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg5">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg5 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg6">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg6 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg7">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg7 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg8">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg8 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg9">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg9 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg10">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg10 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg11">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg11 " />必须是基元类型。
              </typeparam>
      <typeparam name="TResult">
                类型 <paramref name="T" /> 查询返回的结果执行的委托所返回 <see cref="M:System.Data.Objects.CompiledQuery.Compile``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})" /> 方法。
              </typeparam>
      <returns>
              <see cref="T:System.Func`13" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。
            </returns>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})">
      <summary>
              创建一个表示已编译的 LINQ to Entities 查询的新委托。
            </summary>
      <param name="query">
                要编译的 lambda 表达式。
              </param>
      <typeparam name="TArg0">
                一种类型派生自 <see cref="T:System.Data.Objects.ObjectContext" />。
              </typeparam>
      <typeparam name="TArg1">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg1 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg2">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg2 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg3">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg3 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg4">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg4 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg5">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg5 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg6">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg6 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg7">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg7 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg8">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg8 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg9">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg9 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg10">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg10 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg11">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg11 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg12">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg12 " />必须是基元类型。
              </typeparam>
      <typeparam name="TResult">
                类型 <paramref name="T" /> 查询返回的结果执行的委托所返回 <see cref="M:System.Data.Objects.CompiledQuery.Compile``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})" /> 方法。
              </typeparam>
      <returns>
              <see cref="T:System.Func`14" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。
            </returns>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})">
      <summary>
              创建一个表示已编译的 LINQ to Entities 查询的新委托。
            </summary>
      <param name="query">
                要编译的 lambda 表达式。
              </param>
      <typeparam name="TArg0">
                一种类型派生自 <see cref="T:System.Data.Objects.ObjectContext" />。
              </typeparam>
      <typeparam name="TArg1">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg1 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg2">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg2 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg3">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg3 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg4">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg4 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg5">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg5 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg6">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg6 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg7">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg7 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg8">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg8 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg9">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg9 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg10">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg10 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg11">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg11 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg12">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg12 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg13">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg13 " />必须是基元类型。
              </typeparam>
      <typeparam name="TResult">
                类型 <paramref name="T" /> 查询返回的结果执行的委托所返回 <see cref="M:System.Data.Objects.CompiledQuery.Compile``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})" /> 方法。
              </typeparam>
      <returns>
              <see cref="T:System.Func`15" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。
            </returns>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})">
      <summary>
              创建一个表示已编译的 LINQ to Entities 查询的新委托。
            </summary>
      <param name="query">
                要编译的 lambda 表达式。
              </param>
      <typeparam name="TArg0">
                一种类型派生自 <see cref="T:System.Data.Objects.ObjectContext" />。
              </typeparam>
      <typeparam name="TArg1">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg1 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg2">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg2 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg3">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg3 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg4">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg4 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg5">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg5 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg6">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg6 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg7">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg7 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg8">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg8 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg9">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg9 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg10">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg10 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg11">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg11 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg12">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg12 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg13">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg13 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg14">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg14 " />必须是基元类型。
              </typeparam>
      <typeparam name="TResult">
                类型 <paramref name="T" /> 查询返回的结果执行的委托所返回 <see cref="M:System.Data.Objects.CompiledQuery.Compile``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})" /> 方法。
              </typeparam>
      <returns>
              <see cref="T:System.Func`16" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。
            </returns>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``17(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16}})">
      <summary>
              创建一个表示已编译的 LINQ to Entities 查询的新委托。
            </summary>
      <param name="query">
                要编译的 lambda 表达式。
              </param>
      <typeparam name="TArg0">
                一种类型派生自 <see cref="T:System.Data.Objects.ObjectContext" />。
              </typeparam>
      <typeparam name="TArg1">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg1 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg2">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg2 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg3">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg3 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg4">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg4 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg5">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg5 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg6">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg6 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg7">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg7 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg8">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg8 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg9">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg9 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg10">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg10 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg11">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg11 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg12">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg12 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg13">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg13 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg14">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg14 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg15">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg15 " />必须是基元类型。
              </typeparam>
      <typeparam name="TResult">
                类型 <paramref name="T" /> 查询返回的结果执行的委托所返回 <see cref="M:System.Data.Objects.CompiledQuery.Compile``17(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16}})" /> 方法。
              </typeparam>
      <returns>
              <see cref="T:System.Func`17" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。
            </returns>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
              创建一个表示已编译的 LINQ to Entities 查询的新委托。
            </summary>
      <param name="query">
                要编译的 lambda 表达式。
              </param>
      <typeparam name="TArg0">
                一种类型派生自 <see cref="T:System.Data.Objects.ObjectContext" />。
              </typeparam>
      <typeparam name="TResult">
                类型 <paramref name="T" /> 查询返回的结果执行的委托所返回 <see cref="M:System.Data.Objects.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法。
              </typeparam>
      <returns>
              <see cref="T:System.Func`2" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。
            </returns>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>
              创建一个表示已编译的 LINQ to Entities 查询的新委托。
            </summary>
      <param name="query">
                要编译的 lambda 表达式。
              </param>
      <typeparam name="TArg0">
                一种类型派生自 <see cref="T:System.Data.Objects.ObjectContext" />。
              </typeparam>
      <typeparam name="TArg1">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg1" />必须是基元类型。
              </typeparam>
      <typeparam name="TResult">
                类型 <paramref name="T" /> 查询返回的结果执行的委托所返回 <see cref="M:System.Data.Objects.CompiledQuery.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})" /> 方法。
              </typeparam>
      <returns>
              <see cref="T:System.Func`3" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。
            </returns>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
      <summary>
              创建一个表示已编译的 LINQ to Entities 查询的新委托。
            </summary>
      <param name="query">
                要编译的 lambda 表达式。
              </param>
      <typeparam name="TArg0">
                一种类型派生自 <see cref="T:System.Data.Objects.ObjectContext" />。
              </typeparam>
      <typeparam name="TArg1">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg1 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg2">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg2 " />必须是基元类型。
              </typeparam>
      <typeparam name="TResult">
                类型 <paramref name="T" /> 查询返回的结果执行的委托所返回 <see cref="M:System.Data.Objects.CompiledQuery.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})" /> 方法。
              </typeparam>
      <returns>
              <see cref="T:System.Func`4" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。
            </returns>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
      <summary>
              创建一个表示已编译的 LINQ to Entities 查询的新委托。
            </summary>
      <param name="query">
                要编译的 lambda 表达式。
              </param>
      <typeparam name="TArg0">
                一种类型派生自 <see cref="T:System.Data.Objects.ObjectContext" />。
              </typeparam>
      <typeparam name="TArg1">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg1 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg2">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg2 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg3">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg3 " />必须是基元类型。
              </typeparam>
      <typeparam name="TResult">
                类型 <paramref name="T" /> 查询返回的结果执行的委托所返回 <see cref="M:System.Data.Objects.CompiledQuery.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})" />  方法。
              </typeparam>
      <returns>
              <see cref="T:System.Func`5" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。
            </returns>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})">
      <summary>
              创建一个表示已编译的 LINQ to Entities 查询的新委托。
            </summary>
      <param name="query">
                要编译的 lambda 表达式。
              </param>
      <typeparam name="TArg0">
                一种类型派生自 <see cref="T:System.Data.Objects.ObjectContext" />。
              </typeparam>
      <typeparam name="TArg1">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg1 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg2">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg2 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg3">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg3 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg4">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg4 " />必须是基元类型。
              </typeparam>
      <typeparam name="TResult">
                类型 <paramref name="T" /> 查询返回的结果执行的委托所返回 <see cref="M:System.Data.Objects.CompiledQuery.Compile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})" /> 方法。
              </typeparam>
      <returns>
              <see cref="T:System.Func`6" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。
            </returns>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})">
      <summary>
              创建一个表示已编译的 LINQ to Entities 查询的新委托。
            </summary>
      <param name="query">
                要编译的 lambda 表达式。
              </param>
      <typeparam name="TArg0">
                一种类型派生自 <see cref="T:System.Data.Objects.ObjectContext" />。
              </typeparam>
      <typeparam name="TArg1">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg1 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg2">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg2 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg3">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg3 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg4">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg4 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg5">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg5 " />必须是基元类型。
              </typeparam>
      <typeparam name="TResult">
                类型 <paramref name="T" /> 查询返回的结果执行的委托所返回 <see cref="M:System.Data.Objects.CompiledQuery.Compile``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})" /> 方法。
              </typeparam>
      <returns>
              <see cref="T:System.Func`7" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。
            </returns>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})">
      <summary>
              创建一个表示已编译的 LINQ to Entities 查询的新委托。
            </summary>
      <param name="query">
                要编译的 lambda 表达式。
              </param>
      <typeparam name="TArg0">
                一种类型派生自 <see cref="T:System.Data.Objects.ObjectContext" />。
              </typeparam>
      <typeparam name="TArg1">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg1 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg2">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg2 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg3">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg3 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg4">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg4 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg5">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg5 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg6">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg6 " />必须是基元类型。
              </typeparam>
      <typeparam name="TResult">
                类型 <paramref name="T" /> 查询返回的结果执行的委托所返回 <see cref="M:System.Data.Objects.CompiledQuery.Compile``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})" /> 方法。
              </typeparam>
      <returns>
              <see cref="T:System.Func`8" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。
            </returns>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
      <summary>
              创建一个表示已编译的 LINQ to Entities 查询的新委托。
            </summary>
      <param name="query">
                要编译的 lambda 表达式。
              </param>
      <typeparam name="TArg0">
                一种类型派生自 <see cref="T:System.Data.Objects.ObjectContext" />。
              </typeparam>
      <typeparam name="TArg1">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg1 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg2">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg2 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg3">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg3 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg4">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg4 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg5">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg5 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg6">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg6 " />必须是基元类型。
              </typeparam>
      <typeparam name="TArg7">
                表示在执行该委托返回时通过传递此方法的参数的类型。
                <paramref name="TArg7 " />必须是基元类型。
              </typeparam>
      <typeparam name="TResult">
                类型 <paramref name="T" /> 查询返回的结果执行的委托所返回 <see cref="M:System.Data.Objects.CompiledQuery.Compile``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})" /> 方法。
              </typeparam>
      <returns>
              <see cref="T:System.Func`9" />，这是一个表示已编译的 LINQ to Entities 查询的泛型委托。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.ComplexObject.#ctor">
      <summary>
              创建 <see cref="T:System.Data.Objects.DataClasses.ComplexObject" /> 的实例。
            </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanged(System.String)">
      <summary>
              通知更改跟踪器，某个复杂对象的属性已更改。
            </summary>
      <param name="property">
                已更改的属性的名称。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="property" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanging(System.String)">
      <summary>
              通知更改跟踪器，对复杂对象的属性更改挂起。
            </summary>
      <param name="property">
                更改的属性的名称。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="property" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmComplexPropertyAttribute.#ctor">
      <summary>
              创建 <see cref="T:System.Data.Objects.DataClasses.EdmComplexPropertyAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmComplexTypeAttribute.#ctor">
      <summary>
              创建 <see cref="T:System.Data.Objects.DataClasses.EdmComplexTypeAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmEntityTypeAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Objects.DataClasses.EdmEntityTypeAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmEnumTypeAttribute.#ctor">
      <summary>
               初始化 EdmEnumTypeAttribute 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmFunctionAttribute.#ctor(System.String,System.String)">
      <summary>
              初始化 <see cref="T:System.Data.Objects.DataClasses.EdmFunctionAttribute" /> 类的新实例。
            </summary>
      <param name="namespaceName">
                映射到函数的命名空间。
              </param>
      <param name="functionName">
                映射到函数的名称。
              </param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmRelationshipAttribute.#ctor(System.String,System.String,System.String,System.Data.Metadata.Edm.RelationshipMultiplicity,System.Type,System.String,System.Data.Metadata.Edm.RelationshipMultiplicity,System.Type)">
      <summary>
              创建 <see cref="T:System.Data.Objects.DataClasses.EdmRelationshipAttribute" /> 类的实例。
            </summary>
      <param name="relationshipNamespaceName">
                此实体所参与的关联的命名空间名称。
              </param>
      <param name="relationshipName">
                此实体所参与的关系的名称。
              </param>
      <param name="role1Name">
                关联一端的类型的角色名称。
              </param>
      <param name="role1Multiplicity">
                <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" /> 的值，指示在关联一端的重数，例如一重或多重。
              </param>
      <param name="role1Type">
                关联一端的实体类型。
              </param>
      <param name="role2Name">
                关联另一端的类型的角色名称。
              </param>
      <param name="role2Multiplicity">
                <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" /> 的值，指示在关联另一端的重数，例如一重或多重。
              </param>
      <param name="role2Type">
                关联另一端的实体类型。
              </param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmRelationshipAttribute.#ctor(System.String,System.String,System.String,System.Data.Metadata.Edm.RelationshipMultiplicity,System.Type,System.String,System.Data.Metadata.Edm.RelationshipMultiplicity,System.Type,System.Boolean)">
      <summary>
              初始化 <see cref="T:System.Data.Objects.DataClasses.EdmRelationshipAttribute" /> 类的新实例。
            </summary>
      <param name="relationshipNamespaceName">
                此实体所参与的关联的命名空间名称。
              </param>
      <param name="relationshipName">
                此实体所参与的关系的名称。
              </param>
      <param name="role1Name">
                关联一端的类型的角色名称。
              </param>
      <param name="role1Multiplicity">
                <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" /> 的值，指示在关联一端的重数，例如一重或多重。
              </param>
      <param name="role1Type">
                关联一端的实体类型。
              </param>
      <param name="role2Name">
                关联另一端的类型的角色名称。
              </param>
      <param name="role2Multiplicity">
                <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" /> 的值，指示在关联另一端的重数，例如一重或多重。
              </param>
      <param name="role2Type">
                关联另一端的实体类型。
              </param>
      <param name="isForeignKey">
                一个值，该值指示关系是否基于外键的值。
              </param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.#ctor(System.String,System.String,System.String)">
      <summary>
              初始化 <see cref="T:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute" /> 类的新实例。
            </summary>
      <param name="relationshipNamespaceName">
                关系属性的命名空间名称。
              </param>
      <param name="relationshipName">
                关系的名称。
                 关系名称不由命名空间限定。
              </param>
      <param name="targetRoleName">
                关系另一端的角色名称。
              </param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmScalarPropertyAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Objects.DataClasses.EdmScalarPropertyAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmSchemaAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Objects.DataClasses.EdmSchemaAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmSchemaAttribute.#ctor(System.String)">
      <summary>
              使用对程序集引用的每个模型都唯一的值初始化 <see cref="T:System.Data.Objects.DataClasses.EdmSchemaAttribute" /> 类的新实例。
            </summary>
      <param name="assemblyGuid">
                一个字符串，表示程序集中模型的唯一 GUID 值。
              </param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Add(`0)">
      <summary>
              将对象添加到集合。
            </summary>
      <param name="entity">
                添加到集合的对象。
                <paramref name="entity" /> 必须实现 <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="entity " />是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Attach(`0)">
      <summary>
              定义对象上下文中两个附加对象之间的关系。
            </summary>
      <param name="entity">
                附加的对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  当 <paramref name="entity" /> 是 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  当 <paramref name="entity" /> 不能与源对象相关。
                   这会在概念性架构中的关联不支持两种类型间的关系时发生。
                
                  - 或 -
                
                  任一对象时 <see langword="null" /> 或者不处于 <see cref="F:System.Data.EntityState.Unchanged" /> 或 <see cref="F:System.Data.EntityState.Modified" /> 状态。
                </exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Attach(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              定义对象上下文中对象和相关对象集合之间的关系。
            </summary>
      <param name="entities">
                对象上下文中与源对象相关的对象集合。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="entities" /> 集合是 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  源对象或中的对象 <paramref name="entities" /> 集合是 <see langword="null" /> 或者不处于 <see cref="F:System.Data.EntityState.Unchanged" /> 或 <see cref="F:System.Data.EntityState.Modified" /> 状态。
                
                  - 或 -
                
                  关系不能基于 EDM 元数据定义。
                   这会在概念性架构中的关联不支持两种类型间的关系时发生。
                </exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Clear">
      <summary>
              从集合中移除所有实体。
            </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Contains(`0)">
      <summary>
              确定特定对象是否存在于集合中。
            </summary>
      <param name="entity">
                要在 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 中定位的对象。
              </param>
      <returns>
              如果在 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 中找到对象，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.CopyTo(`0[],System.Int32)">
      <summary>
              将集合中的所有内容复制到数组，从目标数组的指定索引处开始。
            </summary>
      <param name="array">
                要复制到的数组。
              </param>
      <param name="arrayIndex">
                数组中开始复制的位置的索引（从零开始）。
              </param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.CreateSourceQuery">
      <summary>
              返回一个对象查询，执行该查询时返回的对象集合与当前集合包含的对象相同。
            </summary>
      <returns>
              表示实体集合的 <see cref="T:System.Data.Objects.ObjectQuery`1" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  当对象处于 <see cref="F:System.Data.EntityState.Added" /> 状态时。
                
                  - 或 -
                
                  当对象处于 <see cref="F:System.Data.EntityState.Detached" /> 状态并且 <see cref="T:System.Data.Objects.MergeOption" /> 不为 <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> 时。
                </exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.GetEnumerator">
      <summary>
              返回一个枚举器，用于循环访问集合中的对象。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.IEnumerator" />，循环访问 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 缓存的值集。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Load(System.Data.Objects.MergeOption)">
      <summary>
              使用指定的合并选项将相关对象加载到集合中。
            </summary>
      <param name="mergeOption">
                指定此集合中的对象应如何与从以前针对相同 <see cref="T:System.Data.Objects.ObjectContext" /> 的查询中返回的对象合并。
              </param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.OnCollectionDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>
              内部用于反序列化实体对象。
            </summary>
      <param name="context">
                流上下文。
              </param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>
              内部用于序列化实体对象。
            </summary>
      <param name="context">
                流上下文。
              </param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Remove(`0)">
      <summary>
              从集合移除对象，并标记要删除的关系。
            </summary>
      <param name="entity">
                要从集合中移除的对象。
              </param>
      <returns>
              <see langword="true" /> 如果成功移除了该项;否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="entity" /> 对象为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name=" entity " />对象未附加到同一个对象上下文。
                
                  - 或 -
                
                  <paramref name="entity " />对象不具有有效关系管理器。
                </exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              返回一个枚举器，用于循环访问 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 缓存的值集。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.IEnumerator" />，循环访问 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 缓存的值集。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#GetList">
      <summary>
              返回 <see cref="T:System.Collections.IList" /> 形式的集合用于数据绑定。
            </summary>
      <returns>
              实体对象的 <see cref="T:System.Collections.IList" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityObject.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Objects.DataClasses.EntityObject" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityObject.ReportPropertyChanged(System.String)">
      <summary>
              通知更改跟踪器，属性已更改。
            </summary>
      <param name="property">
                已更改的属性的名称。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="property" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityObject.ReportPropertyChanging(System.String)">
      <summary>
              通知更改跟踪器，属性更改挂起。
            </summary>
      <param name="property">
                更改的属性的名称。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="property" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityObject.System#Data#Objects#DataClasses#IEntityWithChangeTracker#SetChangeTracker(System.Data.Objects.DataClasses.IEntityChangeTracker)">
      <summary>
              指定用于报告属性更改的 <see cref="T:System.Data.Objects.DataClasses.IEntityChangeTracker" /> 的实例。
            </summary>
      <param name="changeTracker">
                对用于报告属性更改的更改跟踪器的引用。
              </param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.#ctor">
      <summary>
              创建 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> 的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.Attach(`0)">
      <summary>
              在对象上下文中创建两个对象之间的多对一或一对一关系。
            </summary>
      <param name="entity">
                附加的对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  当 <paramref name="entity" /> 是 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  当 <paramref name="entity" /> 不能与当前相关端相关。
                   这会在概念性架构中的关联不支持两种类型间的关系时发生。
                </exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.CreateSourceQuery">
      <summary>
              创建一个返回相关对象的等效对象查询。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Objects.ObjectQuery`1" />，其返回相关对象。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  当对象处于 <see cref="F:System.Data.EntityState.Added" /> 状态时。
                
                  - 或 -
                
                  当对象处于 <see cref="F:System.Data.EntityState.Detached" /> 状态并且 <see cref="P:System.Data.Objects.ObjectQuery.MergeOption" /> 不为 <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> 时。
                </exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.Load(System.Data.Objects.MergeOption)">
      <summary>
              使用指定的合并选项为此 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> 加载相关对象。
            </summary>
      <param name="mergeOption">
                指定当 <see cref="T:System.Data.Objects.ObjectContext" /> 中已存在该对象时，应如何返回它。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  根源 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> 是 <see langword="null" />。
                
                  - 或 -
                
                  查询返回一个以上的相关端。
                
                  - 或 -
                
                  查询返回零个相关端，而预期应该有一个相关端。
                </exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.OnRefDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>
              此方法在内部用于序列化相关的实体对象。
            </summary>
      <param name="context">
                序列化的流。
              </param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>
              此方法在内部用于序列化相关的实体对象。
            </summary>
      <param name="context">
                序列化的流。
              </param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanged(System.String,System.Object,System.String)">
      <summary>
              通知更改跟踪器，某个复杂类型的属性已更改。
            </summary>
      <param name="entityMemberName">
                已更改的实体类型的复杂属性的名称。
              </param>
      <param name="complexObject">
                包含已更改属性的复杂类型。
              </param>
      <param name="complexObjectMemberName">
                复杂类型上更改的属性的名称。
              </param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanging(System.String,System.Object,System.String)">
      <summary>
              通知更改跟踪器，复杂属性更改挂起。
            </summary>
      <param name="entityMemberName">
                要更改的顶级实体属性的名称。
              </param>
      <param name="complexObject">
                包含要更改的属性的复杂类型。
              </param>
      <param name="complexObjectMemberName">
                复杂类型上要更改的属性的名称。
              </param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanged(System.String)">
      <summary>
              通知更改跟踪器，某个实体类型的属性已更改。
            </summary>
      <param name="entityMemberName">
                已更改的属性名。
              </param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanging(System.String)">
      <summary>
              通知更改跟踪器即将更改某个实体类型的属性。
            </summary>
      <param name="entityMemberName">
                要更改的属性的名称。
              </param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IEntityWithChangeTracker.SetChangeTracker(System.Data.Objects.DataClasses.IEntityChangeTracker)">
      <summary>
              获取或设置用于报告更改的 <see cref="T:System.Data.Objects.DataClasses.IEntityChangeTracker" />。
            </summary>
      <param name="changeTracker">
                用于报告更改的 <see cref="T:System.Data.Objects.DataClasses.IEntityChangeTracker" />。
              </param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Add(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>
              将对象添加到相关端。
            </summary>
      <param name="entity">
                添加到集合的对象。
                <paramref name="entity" />必须实现<see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" />。
              </param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Add(System.Object)">
      <summary>
              将对象添加到相关端。
            </summary>
      <param name="entity">
                添加到集合的对象。
              </param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Attach(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>
              定义两个附加对象之间的关系。
            </summary>
      <param name="entity">
                附加的对象。
                <paramref name="entity" /> 必须实现 <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" />。
              </param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Attach(System.Object)">
      <summary>
              定义两个附加对象之间的关系。
            </summary>
      <param name="entity">
                附加的对象。
              </param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.CreateSourceQuery">
      <summary>
              返回一个 <see cref="T:System.Collections.IEnumerable" />，它表示属于相关端的对象。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.IEnumerable" />，它表示属于相关端的对象。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.GetEnumerator">
      <summary>
              返回一个 <see cref="T:System.Collections.IEnumerator" />，它循环访问相关对象的集合。
            </summary>
      <returns>
              <see cref="T:System.Collections.IEnumerator" /> ，它循环访问相关对象的集合。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Load">
      <summary>
              使用默认合并选项将一个或多个相关对象加载到此相关端中。
            </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Load(System.Data.Objects.MergeOption)">
      <summary>
              使用指定合并选项将一个或多个相关对象加载到相关端中。
            </summary>
      <param name="mergeOption">
                将对象合并到现有 <see cref="T:System.Data.Objects.MergeOption" /> 时使用的 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />。
              </param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Remove(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>
              从相关端的对象的集合中移除一个对象。
            </summary>
      <param name="entity">
                要从集合中移除的对象。
                <paramref name="entity" /> 必须实现 <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" />。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="entity" /> 已成功删除 <see langword="false" /> 如果 <paramref name="entity" /> 不是属于 <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Remove(System.Object)">
      <summary>
              从相关端的对象的集合中移除一个对象。
            </summary>
      <param name="entity">
                要从集合中移除的对象。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="entity" /> 已成功删除; <see langword="false" /> 如果 <paramref name="entity" /> 不是属于 <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.GetEnumerator">
      <summary>
              返回一个 <see cref="T:System.Collections.IEnumerator" />，它循环访问相关对象的集合。
            </summary>
      <returns>
              <see cref="T:System.Collections.IEnumerator" /> ，它循环访问相关对象的集合。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.Load">
      <summary>
              在派生类中重写时，使用默认合并选项将一个或多个相关对象加载到相关端中。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  使用 <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> 查询来检索源对象并且 <see cref="T:System.Data.Objects.MergeOption" /> 不是 <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> 或相关对象已经加载时。
                
                  - 或 -
                
                  源对象未附加到 <see cref="T:System.Data.Objects.ObjectContext" /> 时。
                
                  - 或 -
                
                  正在跟踪源对象但其处于 <see cref="F:System.Data.EntityState.Added" /> 或 <see cref="F:System.Data.EntityState.Deleted" /> 状态，或者用于 <see cref="T:System.Data.Objects.MergeOption" /> 的 <see cref="M:System.Data.Objects.DataClasses.RelatedEnd.Load" /> 为 <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> 时。
                </exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.Load(System.Data.Objects.MergeOption)">
      <summary>
              在派生类中重写时，将使用指定合并选项从相关端加载一个对象或多个对象。
            </summary>
      <param name="mergeOption">
                将对象合并到现有 <see cref="T:System.Data.Objects.MergeOption" /> 时使用的 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  使用 <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> 查询来检索源对象并且 <see cref="T:System.Data.Objects.MergeOption" /> 不是 <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> 或相关对象已经加载时。
                
                  - 或 -
                
                  源对象未附加到 <see cref="T:System.Data.Objects.ObjectContext" /> 时。
                
                  - 或 -
                
                  正在跟踪源对象但其处于 <see cref="F:System.Data.EntityState.Added" /> 或 <see cref="F:System.Data.EntityState.Deleted" /> 状态，或者用于 <see cref="T:System.Data.Objects.MergeOption" /> 的 <see cref="M:System.Data.Objects.DataClasses.RelatedEnd.Load" /> 为 <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> 时。
                </exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>
              内部使用，用于反序列化实体对象与 <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> 实例。
            </summary>
      <param name="context">
                序列化的流。
              </param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Add(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>
              将对象添加到相关端。
            </summary>
      <param name="entity">
                添加到集合的对象。
                 此对象必须实现 <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" /> 接口。
              </param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Add(System.Object)">
      <summary>
              将对象添加到相关端。
            </summary>
      <param name="entity">
                要添加到相关端的实体实例。
              </param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Attach(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>
              将对象附加到相关端。
            </summary>
      <param name="entity">
                附加的对象。
              </param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Attach(System.Object)">
      <summary>
              将对象附加到相关端。
            </summary>
      <param name="entity">
                要将附加到相关端的实体实例。
              </param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#CreateSourceQuery">
      <summary>
              返回一个 <see cref="T:System.Collections.IEnumerable" />，它表示属于相关端的对象。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.IEnumerable" />，它表示属于相关端的对象。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Remove(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>
              从相关端的集合中移除一个对象。
            </summary>
      <param name="entity">
                要从集合中移除的实体实例。
              </param>
      <returns>
              一个值，该值指示是否已删除的对象。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Remove(System.Object)">
      <summary>
              如果该对象属于相关端，请从相关端移除一个对象。
            </summary>
      <param name="entity">
                要从相关端中删除的实体实例。
              </param>
      <returns>
              <see langword="true" /> 如果成功删除该实体;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.Create(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>
              创建一个新的 <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> 对象。
            </summary>
      <param name="owner">
                对调用此方法的实体的引用。
              </param>
      <returns>
              请求的 <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.GetAllRelatedEnds">
      <summary>
              返回关系管理器管理的所有相关端的枚举。
            </summary>
      <returns>
              <see cref="T:System.Collections.Generic.IEnumerable`1" /> 实现的对象的 <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd" />。
               如果尚未填充关系，则返回空枚举。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.GetRelatedCollection``1(System.String,System.String)">
      <summary>
              获取具有指定关系名称和目标角色名称的相关对象的 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />。
            </summary>
      <param name="relationshipName">
                要浏览的关系的名称。
                 关系名称不由命名空间限定。
              </param>
      <param name="targetRoleName">
                要浏览的目标角色的名称。
                 指示在关系中浏览的方向。
              </param>
      <typeparam name="TTargetEntity">
                返回的 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 的类型。
              </typeparam>
      <returns>
              相关对象的 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  指定角色返回 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> 而不是 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />。
                </exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.GetRelatedEnd(System.String,System.String)">
      <summary>
              为关系中的指定目标角色返回正确类型的 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 或 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />。
            </summary>
      <param name="relationshipName">
                在其中的关系名称 <paramref name="targetRoleName" /> 定义。
                 关系名称不由命名空间限定。
              </param>
      <param name="targetRoleName">
                要用于检索的另一端的目标角色 <paramref name="relationshipName" />。
              </param>
      <returns>
              已检索的表示 <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd" /> 或 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 的 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="relationshipName" /> 或 <paramref name="targetRoleName" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  源类型不匹配所有者类型。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="targetRoleName" /> 无效。
                
                  - 或 -
                
                  无法在元数据中找到关系类型。
                </exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.GetRelatedReference``1(System.String,System.String)">
      <summary>
              通过使用关系名称和目标角色名称的指定组合，获取相关对象的 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />。
            </summary>
      <param name="relationshipName">
                要浏览的关系的名称。
                 关系名称不由命名空间限定。
              </param>
      <param name="targetRoleName">
                要浏览的目标角色的名称。
                 指示在关系中浏览的方向。
              </param>
      <typeparam name="TTargetEntity">
                返回的 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> 的类型。
              </typeparam>
      <returns>
              相关对象的 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  指定角色返回 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 而不是 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />。
                </exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.InitializeRelatedCollection``1(System.String,System.String,System.Data.Objects.DataClasses.EntityCollection{``0})">
      <summary>
              初始化使用默认构造函数创建的现有 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />。
            </summary>
      <param name="relationshipName">
                关系名。
              </param>
      <param name="targetRoleName">
                相关端的角色名称。
              </param>
      <param name="entityCollection">
                要初始化的 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />。
              </param>
      <typeparam name="TTargetEntity">
                正在初始化的 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 的类型。
              </typeparam>
      <exception cref="T:System.InvalidOperationException">
                  提供的 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 已经初始化时。
                
                  - 或 -
                
                  关系管理器已经附加到 <see cref="T:System.Data.Objects.ObjectContext" /> 时。
                
                  - 或 -
                
                  关系管理器已经包含具有此名称和目标角色的关系时。
                </exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.InitializeRelatedReference``1(System.String,System.String,System.Data.Objects.DataClasses.EntityReference{``0})">
      <summary>
              初始化使用默认构造函数创建的现有 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />。
            </summary>
      <param name="relationshipName">
                关系名。
              </param>
      <param name="targetRoleName">
                相关端的角色名称。
              </param>
      <param name="entityReference">
                要初始化的 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />。
              </param>
      <typeparam name="TTargetEntity">
                正在初始化的 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> 的类型。
              </typeparam>
      <exception cref="T:System.InvalidOperationException">
                  提供的 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> 已经初始化时。
                
                  - 或 -
                
                  关系管理器已经附加到 <see cref="T:System.Data.Objects.ObjectContext" /> 时。
                
                  - 或 -
                
                  关系管理器已经包含具有此名称和目标角色的关系时。
                </exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>
              内部使用，用于反序列化实体对象与 <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> 实例。
            </summary>
      <param name="context">
                序列化的流。
              </param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>
              由对象服务调用，用来准备 <see cref="T:System.Data.EntityKey" /> 以序列化关系进行二进制序列化。
            </summary>
      <param name="context">
                说明给定序列化流的源和目标，并提供另一个调用方定义的上下文。
              </param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Objects.DataClasses.StructuralObject" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.BinaryEquals(System.Byte[],System.Byte[])">
      <summary>
              确定指定的字节数组是否包含相同的值。
            </summary>
      <param name="first">
                第一个字节数组值进行比较。
              </param>
      <param name="second">
                要比较的第二个字节数组。
              </param>
      <returns>
              <see langword="true" /> 如果两个数组的长度相同，并且包含相同的字节值或两个数组都 <see langword="null" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.DefaultDateTimeValue">
      <summary>
              返回数据源支持的最小日期时间值。
            </summary>
      <returns>
              一个 <see cref="T:System.DateTime" /> 值，表示数据源支持的最小日期时间值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.GetValidValue(System.Byte[])">
      <summary>
              返回当前字节值的副本。
            </summary>
      <param name="currentValue">
                当前字节数组值。
              </param>
      <returns>
              当前副本 <see cref="T:System.Byte" /> 值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.GetValidValue``1(``0,System.String,System.Boolean,System.Boolean)">
      <summary>
              返回指定属性的复杂类型。
            </summary>
      <param name="currentValue">
                一个从复杂对象继承的复杂对象。
              </param>
      <param name="property">
                复杂属性的名称，该复杂属性为复杂对象。
              </param>
      <param name="isNullable">
                指示类型是否允许 Null 值。
              </param>
      <param name="isInitialized">
                指示类型是否已初始化。
              </param>
      <typeparam name="T">
                正在请求的复杂对象的类型。
              </typeparam>
      <returns>
              属性的复杂类型对象。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.OnPropertyChanged(System.String)">
      <summary>
              引发 <see cref="E:System.Data.Objects.DataClasses.StructuralObject.PropertyChanged" /> 事件。
            </summary>
      <param name="property">
                已更改的属性的名称。
              </param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.OnPropertyChanging(System.String)">
      <summary>
              引发 <see cref="E:System.Data.Objects.DataClasses.StructuralObject.PropertyChanging" /> 事件。
            </summary>
      <param name="property">
                更改的属性的名称。
              </param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.ReportPropertyChanged(System.String)">
      <summary>
              引发事件，用于报告属性更改发生。
            </summary>
      <param name="property">
                已更改的属性的名称。
              </param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.ReportPropertyChanging(System.String)">
      <summary>
              引发事件，用于报告属性更改处于挂起状态。
            </summary>
      <param name="property">
                更改的属性的名称。
              </param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Boolean)">
      <summary>
              确保 <see cref="T:System.Boolean" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                布尔值。
              </param>
      <returns>
              <see cref="T:System.Boolean" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Boolean,System.String)">
      <summary>
              确保 <see cref="T:System.Boolean" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                布尔值。
              </param>
      <param name="propertyName">
                正在验证的属性的名称。
              </param>
      <returns>
              <see cref="T:System.Boolean" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte)">
      <summary>
              确保 <see cref="T:System.Byte" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                正在验证的值。
              </param>
      <returns>
              <see cref="T:System.Byte" /> 设置的值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte,System.String)">
      <summary>
              确保 <see cref="T:System.Byte" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                <see cref="T:System.Byte" /> 值。
              </param>
      <param name="propertyName">
                正在验证的属性的名称。
              </param>
      <returns>
              一个 <see cref="T:System.Byte" /> 它被设置。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte[],System.Boolean)">
      <summary>
              确保 <see cref="T:System.Byte[]" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                所设置的值。
              </param>
      <param name="isNullable">
                指示属性是否可以为 null。
              </param>
      <returns>
              一个 <see cref="T:System.Byte" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte[],System.Boolean,System.String)">
      <summary>
              确保 <see cref="T:System.Byte[]" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                值传递到属性 setter。
              </param>
      <param name="isNullable">
                该标志指明如果此属性允许为 null。
              </param>
      <param name="propertyName">
                正在验证的属性的名称。
              </param>
      <returns>
              <see cref="T:System.Byte" /> 所验证的值。
            </returns>
      <exception cref="T:System.Data.ConstraintException">
                  如果值为 null 作为不可为 null 值。
                </exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Spatial.DbGeography,System.Boolean)">
      <summary>
              验证该属性不为 null，并且它为时引发。
            </summary>
      <param name="value">
                <see cref="T:System.Data.Spatial.DbGeography" /> 要检查的值。
              </param>
      <param name="isNullable">
                该标志指明如果此属性允许为 null。
              </param>
      <returns>
              <see cref="T:System.Data.Spatial.DbGeography" /> 设置值。
            </returns>
      <exception cref="T:System.Data.ConstraintException">
                  值为 null 的不可为 null 的属性。
                </exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Spatial.DbGeography,System.Boolean,System.String)">
      <summary>
              验证该属性不为 null，并且它为时引发。
            </summary>
      <param name="value">
                <see cref="T:System.Data.Spatial.DbGeography" /> 要检查的值。
              </param>
      <param name="isNullable">
                该标志指明如果此属性允许为 null。
              </param>
      <param name="propertyName">
                正在验证的属性名称。
              </param>
      <returns>
              <see cref="T:System.Data.Spatial.DbGeography" /> 设置值。
            </returns>
      <exception cref="T:System.Data.ConstraintException">
                  值为 null 的不可为 null 的属性。
                </exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Spatial.DbGeometry,System.Boolean)">
      <summary>
              验证该属性不为 null，并且它为时引发。
            </summary>
      <param name="value">
                <see cref="T:System.Data.Spatial.DbGeometry" /> 要检查的值。
              </param>
      <param name="isNullable">
                该标志指明如果此属性允许为 null。
              </param>
      <returns>
              <see cref="T:System.Data.Spatial.DbGeometry" /> 设置值。
            </returns>
      <exception cref="T:System.Data.ConstraintException">
                  值为 null 的不可为 null 的属性。
                </exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Spatial.DbGeometry,System.Boolean,System.String)">
      <summary>
              验证该属性不为 null，并且它为时引发。
            </summary>
      <param name="value">
                <see cref="T:System.Data.Spatial.DbGeometry" /> 要检查的值。
              </param>
      <param name="isNullable">
                该标志指明如果此属性允许为 null。
              </param>
      <param name="propertyName">
                正在验证的属性的名称。
              </param>
      <returns>
              <see cref="T:System.Data.Spatial.DbGeometry" /> 设置值。
            </returns>
      <exception cref="T:System.Data.ConstraintException">
                  值为 null 的不可为 null 的属性。
                </exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTime)">
      <summary>
              确保 <see cref="T:System.DateTime" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                <see cref="T:System.DateTime" /> 值。
              </param>
      <returns>
              <see cref="T:System.DateTime" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTime,System.String)">
      <summary>
              确保 <see cref="T:System.DateTime" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                <see cref="T:System.DateTime" /> 值。
              </param>
      <param name="propertyName">
                正在验证的属性的名称。
              </param>
      <returns>
              <see cref="T:System.DateTime" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTimeOffset)">
      <summary>
              确保 <see cref="T:System.DateTimeOffset" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                <see cref="T:System.DateTimeOffset" /> 值。
              </param>
      <returns>
              一个 <see cref="T:System.DateTimeOffset" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTimeOffset,System.String)">
      <summary>
              确保 <see cref="T:System.DateTimeOffset" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                <see cref="T:System.DateTimeOffset" /> 值。
              </param>
      <param name="propertyName">
                正在验证的属性的名称。
              </param>
      <returns>
              <see cref="T:System.DateTimeOffset" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Decimal)">
      <summary>
              确保 <see cref="T:System.Decimal" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                <see cref="T:System.Decimal" /> 值。
              </param>
      <returns>
              <see cref="T:System.Decimal" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Decimal,System.String)">
      <summary>
              确保 <see cref="T:System.Decimal" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                <see cref="T:System.Decimal" /> 值。
              </param>
      <param name="propertyName">
                正在验证的属性的名称。
              </param>
      <returns>
              <see cref="T:System.Decimal" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Double)">
      <summary>
              确保 <see cref="T:System.Double" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                <see cref="T:System.Double" /> 值。
              </param>
      <returns>
              <see cref="T:System.Double" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Double,System.String)">
      <summary>
              确保 <see cref="T:System.Double" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                <see cref="T:System.Double" /> 值。
              </param>
      <param name="propertyName">
                正在验证的属性的名称。
              </param>
      <returns>
              <see cref="T:System.Double" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Guid)">
      <summary>
              确保 <see cref="T:System.Guid" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                <see cref="T:System.Guid" /> 值。
              </param>
      <returns>
              <see cref="T:System.Guid" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Guid,System.String)">
      <summary>
              确保 <see cref="T:System.Guid" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                <see cref="T:System.Guid" /> 值。
              </param>
      <param name="propertyName">
                正在验证的属性名称。
              </param>
      <returns>
              <see cref="T:System.Guid" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Int16)">
      <summary>
              确保 <see cref="T:System.Int16" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                <see cref="T:System.Int16" /> 值。
              </param>
      <returns>
              <see cref="T:System.Int16" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Int16,System.String)">
      <summary>
              确保 <see cref="T:System.Int16" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                <see cref="T:System.Int16" /> 值。
              </param>
      <param name="propertyName">
                正在验证的属性的名称。
              </param>
      <returns>
              <see cref="T:System.Int16" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Int32)">
      <summary>
              确保 <see cref="T:System.Int32" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                <see cref="T:System.Int32" /> 值。
              </param>
      <returns>
              <see cref="T:System.Int32" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Int32,System.String)">
      <summary>
              确保 <see cref="T:System.Int32" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                <see cref="T:System.Int32" /> 值。
              </param>
      <param name="propertyName">
                正在验证的属性的名称。
              </param>
      <returns>
              <see cref="T:System.Int32" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Int64)">
      <summary>
              确保 <see cref="T:System.Int64" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                <see cref="T:System.Int64" /> 值。
              </param>
      <returns>
              <see cref="T:System.Int64" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Int64,System.String)">
      <summary>
              确保 <see cref="T:System.Int64" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                <see cref="T:System.Int64" /> 值。
              </param>
      <param name="propertyName">
                正在验证的属性的名称。
              </param>
      <returns>
              <see cref="T:System.Int64" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Boolean})">
      <summary>
              确保 <see cref="T:System.Boolean" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                可以为 null <see cref="T:System.Boolean" /> 值。
              </param>
      <returns>
              可以为 null <see cref="T:System.Boolean" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Boolean},System.String)">
      <summary>
              确保 <see cref="T:System.Boolean" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                可以为 null <see cref="T:System.Boolean" /> 值。
              </param>
      <param name="propertyName">
                正在验证的属性的名称。
              </param>
      <returns>
              可以为 null <see cref="T:System.Boolean" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Byte})">
      <summary>
              确保 <see cref="T:System.Byte" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                可以为 null <see cref="T:System.Byte" /> 值。
              </param>
      <returns>
              可以为 null <see cref="T:System.Byte" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Byte},System.String)">
      <summary>
              确保 <see cref="T:System.Byte" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                可以为 null <see cref="T:System.Byte" /> 值。
              </param>
      <param name="propertyName">
                正在验证的属性的名称。
              </param>
      <returns>
              可以为 null <see cref="T:System.Byte" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTime})">
      <summary>
              确保 <see cref="T:System.DateTime" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                可以为 null <see cref="T:System.DateTime" /> 值。
              </param>
      <returns>
              可以为 null <see cref="T:System.DateTime" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTime},System.String)">
      <summary>
              确保 <see cref="T:System.DateTime" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                可以为 null <see cref="T:System.DateTime" /> 值。
              </param>
      <param name="propertyName">
                正在验证的属性的名称。
              </param>
      <returns>
              可以为 null <see cref="T:System.DateTime" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTimeOffset})">
      <summary>
              确保 <see cref="T:System.DateTimeOffset" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                可以为 null <see cref="T:System.DateTimeOffset" /> 值。
              </param>
      <returns>
              可以为 null <see cref="T:System.DateTimeOffset" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTimeOffset},System.String)">
      <summary>
              确保 <see cref="T:System.DateTimeOffset" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                <see cref="T:System.DateTimeOffset" /> 值。
              </param>
      <param name="propertyName">
                正在验证的属性的名称。
              </param>
      <returns>
              <see cref="T:System.DateTimeOffset" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Decimal})">
      <summary>
              确保 <see cref="T:System.Decimal" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                可以为 null <see cref="T:System.Decimal" /> 值。
              </param>
      <returns>
              可以为 null <see cref="T:System.Decimal" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Decimal},System.String)">
      <summary>
              确保 <see cref="T:System.Decimal" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                可以为 null <see cref="T:System.Decimal" /> 值。
              </param>
      <param name="propertyName">
                正在验证的属性的名称。
              </param>
      <returns>
              可以为 null <see cref="T:System.Decimal" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Double})">
      <summary>
              确保 <see cref="T:System.Double" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                可以为 null <see cref="T:System.Double" /> 值。
              </param>
      <returns>
              可以为 null <see cref="T:System.Double" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Double},System.String)">
      <summary>
              确保 <see cref="T:System.Double" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                可以为 null <see cref="T:System.Double" /> 值。
              </param>
      <param name="propertyName">
                正在验证的属性的名称。
              </param>
      <returns>
              可以为 null <see cref="T:System.Double" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Guid})">
      <summary>
              确保 <see cref="T:System.Guid" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                可以为 null <see cref="T:System.Guid" /> 值。
              </param>
      <returns>
              可以为 null <see cref="T:System.Guid" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Guid},System.String)">
      <summary>
              确保 <see cref="T:System.Guid" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                可以为 null <see cref="T:System.Guid" /> 值。
              </param>
      <param name="propertyName">
                正在验证的属性的名称。
              </param>
      <returns>
              可以为 null <see cref="T:System.Guid" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int16})">
      <summary>
              确保 <see cref="T:System.Int16" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                可以为 null <see cref="T:System.Int16" /> 值。
              </param>
      <returns>
              可以为 null <see cref="T:System.Int16" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int16},System.String)">
      <summary>
              确保 <see cref="T:System.Int16" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                可以为 null <see cref="T:System.Int16" /> 值。
              </param>
      <param name="propertyName">
                正在验证的属性的名称。
              </param>
      <returns>
              可以为 null <see cref="T:System.Int16" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int32})">
      <summary>
              确保 <see cref="T:System.Int32" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                可以为 null <see cref="T:System.Int32" /> 值。
              </param>
      <returns>
              可以为 null <see cref="T:System.Int32" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int32},System.String)">
      <summary>
              确保 <see cref="T:System.Int32" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                可以为 null <see cref="T:System.Int32" /> 值。
              </param>
      <param name="propertyName">
                正在验证的属性的名称。
              </param>
      <returns>
              可以为 null <see cref="T:System.Int32" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int64})">
      <summary>
              确保 <see cref="T:System.Int64" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                可以为 null <see cref="T:System.Int64" /> 值。
              </param>
      <returns>
              可以为 null <see cref="T:System.Int64" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int64},System.String)">
      <summary>
              确保 <see cref="T:System.Int64" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                可以为 null <see cref="T:System.Int64" /> 值。
              </param>
      <param name="propertyName">
                正在验证的属性的名称。
              </param>
      <returns>
              可以为 null <see cref="T:System.Int64" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.SByte})">
      <summary>
              确保 <see cref="T:System.SByte" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                可以为 null <see cref="T:System.SByte" /> 值。
              </param>
      <returns>
              可以为 null <see cref="T:System.SByte" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.SByte},System.String)">
      <summary>
              确保 <see cref="T:System.SByte" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                可以为 null <see cref="T:System.SByte" /> 值。
              </param>
      <param name="propertyName">
                正在验证的属性的名称。
              </param>
      <returns>
              可以为 null <see cref="T:System.SByte" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Single})">
      <summary>
              确保 <see cref="T:System.Single" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                可以为 null <see cref="T:System.Single" /> 值。
              </param>
      <returns>
              可以为 null <see cref="T:System.Single" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Single},System.String)">
      <summary>
              确保 <see cref="T:System.Single" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                可以为 null <see cref="T:System.Single" /> 值。
              </param>
      <param name="propertyName">
                正在验证的属性的名称。
              </param>
      <returns>
              可以为 null <see cref="T:System.Single" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.TimeSpan})">
      <summary>
              确保 <see cref="T:System.TimeSpan" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                可以为 null <see cref="T:System.TimeSpan" /> 值。
              </param>
      <returns>
              可以为 null <see cref="T:System.TimeSpan" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.TimeSpan},System.String)">
      <summary>
              确保 <see cref="T:System.TimeSpan" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                可以为 null <see cref="T:System.TimeSpan" /> 值。
              </param>
      <param name="propertyName">
                正在验证的属性的名称。
              </param>
      <returns>
              可以为 null <see cref="T:System.TimeSpan" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt16})">
      <summary>
              确保所设置的属性的 UInt16 值无效。
            </summary>
      <param name="value">
                可以为 null 的 UInt16 值。
              </param>
      <returns>
              可以为 null 的 UInt16 值进行设置。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt16},System.String)">
      <summary>
              确保所设置的属性的 UInt16 值无效。
            </summary>
      <param name="value">
                可以为 null 的 UInt16 值。
              </param>
      <param name="propertyName">
                正在验证的属性的名称。
              </param>
      <returns>
              可以为 null 的 UInt16 值进行设置。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt32})">
      <summary>
              确保所设置的属性的 UInt32 值无效。
            </summary>
      <param name="value">
                可以为 null 的 UInt32 值。
              </param>
      <returns>
              可以为 null 的 UInt32 值进行设置。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt32},System.String)">
      <summary>
              确保所设置的属性的 UInt32 值无效。
            </summary>
      <param name="value">
                可以为 null 的 UInt32 值。
              </param>
      <param name="propertyName">
                正在验证的属性的名称。
              </param>
      <returns>
              可以为 null 的 UInt32 值进行设置。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt64})">
      <summary>
              确保 <see cref="T:System.UInt64" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                可以为 null 的 UInt64 值。
              </param>
      <returns>
              可以为 null 的 UInt64 值进行设置。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt64},System.String)">
      <summary>
              确保 <see cref="T:System.UInt64" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                可以为 null 的 UInt64 值。
              </param>
      <param name="propertyName">
                正在验证的属性的名称。
              </param>
      <returns>
              可以为 null 的 UInt64 值进行设置。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.SByte)">
      <summary>
              确保 <see cref="T:System.SByte" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                <see cref="T:System.SByte" /> 值。
              </param>
      <returns>
              <see cref="T:System.SByte" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.SByte,System.String)">
      <summary>
              确保 <see cref="T:System.SByte" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                <see cref="T:System.SByte" /> 值。
              </param>
      <param name="propertyName">
                正在验证的属性的名称。
              </param>
      <returns>
              <see cref="T:System.SByte" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Single)">
      <summary>
              确保所设置的属性的单个值无效。
            </summary>
      <param name="value">
                <see cref="T:System.Single" /> 值。
              </param>
      <returns>
              <see cref="T:System.Single" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Single,System.String)">
      <summary>
              确保所设置的属性的单个值无效。
            </summary>
      <param name="value">
                <see cref="T:System.Single" /> 值。
              </param>
      <param name="propertyName">
                正在验证的属性的名称。
              </param>
      <returns>
              <see cref="T:System.Single" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.String,System.Boolean)">
      <summary>
              验证该属性不为 null，并且它为时引发。
            </summary>
      <param name="value">
                要检查的字符串值。
              </param>
      <param name="isNullable">
                该标志指明如果此属性允许为 null。
              </param>
      <returns>
              经验证 <see cref="T:System.String" /> 值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.String,System.Boolean,System.String)">
      <summary>
              验证该属性不为 null，并且它为时引发。
            </summary>
      <param name="value">
                要检查的字符串值。
              </param>
      <param name="isNullable">
                该标志指明如果此属性允许为 null。
              </param>
      <param name="propertyName">
                正在验证的属性的名称。
              </param>
      <returns>
              验证的属性。
            </returns>
      <exception cref="T:System.Data.ConstraintException">
                  字符串值是不可为 null 的字符串为 null。
                </exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.TimeSpan)">
      <summary>
              确保 <see cref="T:System.TimeSpan" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                <see cref="T:System.TimeSpan" /> 值。
              </param>
      <returns>
              <see cref="T:System.TimeSpan" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.TimeSpan,System.String)">
      <summary>
              确保 <see cref="T:System.TimeSpan" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                <see cref="T:System.TimeSpan" /> 值。
              </param>
      <param name="propertyName">
                正在验证的属性的名称。
              </param>
      <returns>
              <see cref="T:System.TimeSpan" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt16)">
      <summary>
              确保 <see cref="T:System.UInt16" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                <see cref="T:System.UInt16" /> 值。
              </param>
      <returns>
              <see cref="T:System.UInt16" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt16,System.String)">
      <summary>
              确保 <see cref="T:System.UInt16" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                <see cref="T:System.UInt16" /> 值。
              </param>
      <param name="propertyName">
                正在验证的属性的名称。
              </param>
      <returns>
              <see cref="T:System.UInt16" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt32)">
      <summary>
              确保 <see cref="T:System.UInt32" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                <see cref="T:System.UInt32" /> 值。
              </param>
      <returns>
              <see cref="T:System.UInt32" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt32,System.String)">
      <summary>
              确保 <see cref="T:System.UInt32" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                <see cref="T:System.UInt32" /> 值。
              </param>
      <param name="propertyName">
                正在验证的属性的名称。
              </param>
      <returns>
              <see cref="T:System.UInt32" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt64)">
      <summary>
              确保 <see cref="T:System.UInt64" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                <see cref="T:System.UInt64" /> 值。
              </param>
      <returns>
              <see cref="T:System.UInt64" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt64,System.String)">
      <summary>
              确保 <see cref="T:System.UInt64" /> 值所设置的属性才有效。
            </summary>
      <param name="value">
                <see cref="T:System.UInt64" /> 值。
              </param>
      <param name="propertyName">
                正在验证的属性的名称。
              </param>
      <returns>
              <see cref="T:System.UInt64" /> 设置值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue``1(``0,``0,System.String)">
      <summary>
              设置指定属性的复杂对象。
            </summary>
      <param name="oldValue">
                属性的原始复杂对象（如果有）。
              </param>
      <param name="newValue">
                设置的复杂对象。
              </param>
      <param name="property">
                正在设置为复杂对象的复杂属性。
              </param>
      <typeparam name="T">
                要替换的对象类型。
              </typeparam>
      <returns>
              复杂类型派生的复杂对象。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.VerifyComplexObjectIsNotNull``1(``0,System.String)">
      <summary>
              验证复杂对象是否不是 <see langword="null" />。
            </summary>
      <param name="complexObject">
                正在检验的复杂对象。
              </param>
      <param name="propertyName">
                与之关联的父对象上的复杂属性 <paramref name="complexObject" />。
              </param>
      <typeparam name="TComplex">
                正在验证的复杂对象的类型。
              </typeparam>
      <returns>
              正在验证的复杂对象。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetBoolean(System.Int32)">
      <summary>
              检索布尔值形式的字段值。
            </summary>
      <param name="ordinal">
                字段的序号。
              </param>
      <returns>
              布尔值形式的字段值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetByte(System.Int32)">
      <summary>
              检索 <see langword="byte" /> 形式的字段值。
            </summary>
      <param name="ordinal">
                字段的序号。
              </param>
      <returns>
              <see langword="byte" /> 形式的字段值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>
              检索形式的字段值 <see langword="byte" /> 数组。
            </summary>
      <param name="ordinal">
                字段的序号。
              </param>
      <param name="dataIndex">
                开始复制数据的位置的索引。
              </param>
      <param name="buffer">
                将数据复制到其中的目标缓冲区。
              </param>
      <param name="bufferIndex">
                目标缓冲区中开始复制的位置的索引。
              </param>
      <param name="length">
                要复制的字节数。
              </param>
      <returns>
              已复制的字节数。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetChar(System.Int32)">
      <summary>
              检索 <see langword="char" /> 形式的字段值。
            </summary>
      <param name="ordinal">
                字段的序号。
              </param>
      <returns>
              <see langword="char" /> 形式的字段值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>
              检索形式的字段值 <see langword="char" /> 数组。
            </summary>
      <param name="ordinal">
                字段的序号。
              </param>
      <param name="dataIndex">
                开始复制数据的位置的索引。
              </param>
      <param name="buffer">
                将数据复制到其中的目标缓冲区。
              </param>
      <param name="bufferIndex">
                目标缓冲区中开始复制的位置的索引。
              </param>
      <param name="length">
                要复制的字符数。
              </param>
      <returns>
              复制的字符数。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDataReader(System.Int32)">
      <summary>
              检索 <see cref="T:System.Common.DbDataReader" /> 形式的字段值。
            </summary>
      <param name="i">
                字段的序号。
              </param>
      <returns>
              <see cref="T:System.Data.Common.DbDataReader" /> 形式的字段值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDataRecord(System.Int32)">
      <summary>
              检索 <see cref="T:System.Data.Common.DbDataRecord" /> 形式的字段值。
            </summary>
      <param name="ordinal">
                字段的序号。
              </param>
      <returns>
              <see cref="T:System.Data.Common.DbDataRecord" /> 形式的字段值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDataTypeName(System.Int32)">
      <summary>
              检索字段数据类型的名称。
            </summary>
      <param name="ordinal">
                字段的序号。
              </param>
      <returns>
              字段数据类型的名称。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDateTime(System.Int32)">
      <summary>
              检索 <see cref="T:System.DateTime" /> 形式的字段值。
            </summary>
      <param name="ordinal">
                字段的序号。
              </param>
      <returns>
              <see cref="T:System.DateTime" /> 形式的字段值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDbDataReader(System.Int32)">
      <summary>
              检索形式的字段值 <see cref="T:System.Common.DbDataReader" />
            </summary>
      <param name="ordinal">
                字段的序号。
              </param>
      <returns>
              <see cref="T:System.Data.Common.DbDataReader" /> 形式的字段值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDecimal(System.Int32)">
      <summary>
              检索 <see langword="decimal" /> 形式的字段值。
            </summary>
      <param name="ordinal">
                字段的序号。
              </param>
      <returns>
              <see langword="decimal" /> 形式的字段值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDouble(System.Int32)">
      <summary>
              检索 <see langword="double" /> 形式的字段值。
            </summary>
      <param name="ordinal">
                字段的序号。
              </param>
      <returns>
              <see langword="double" /> 形式的字段值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetFieldType(System.Int32)">
      <summary>
              检索字段的类型。
            </summary>
      <param name="ordinal">
                字段的序号。
              </param>
      <returns>
              字段类型。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetFloat(System.Int32)">
      <summary>
              检索 <see langword="float" /> 形式的字段值。
            </summary>
      <param name="ordinal">
                字段的序号。
              </param>
      <returns>
              <see langword="float" /> 形式的字段值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetGuid(System.Int32)">
      <summary>
              检索 <see cref="T:System.Guid" /> 形式的字段值。
            </summary>
      <param name="ordinal">
                字段的序号。
              </param>
      <returns>
              <see cref="T:System.Guid" /> 形式的字段值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetInt16(System.Int32)">
      <summary>
              检索 <see cref="T:System.Int16" /> 形式的字段值。
            </summary>
      <param name="ordinal">
                字段的序号。
              </param>
      <returns>
              <see cref="T:System.Int16" /> 形式的字段值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetInt32(System.Int32)">
      <summary>
              检索 <see cref="T:System.Int32" /> 形式的字段值。
            </summary>
      <param name="ordinal">
                字段的序号。
              </param>
      <returns>
              <see cref="T:System.Int32" /> 形式的字段值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetInt64(System.Int32)">
      <summary>
              检索 <see cref="T:System.Int64" /> 形式的字段值。
            </summary>
      <param name="ordinal">
                字段的序号。
              </param>
      <returns>
              <see cref="T:System.Int64" /> 形式的字段值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetName(System.Int32)">
      <summary>
              检索字段的名称。
            </summary>
      <param name="ordinal">
                字段的序号。
              </param>
      <returns>
              字段的名称。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetOrdinal(System.String)">
      <summary>
              使用字段的名称来检索字段的序号。
            </summary>
      <param name="name">
                字段的名称。
              </param>
      <returns>
              字段的序号。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetRecordValue(System.Int32)">
      <summary>
              检索字段的值。
            </summary>
      <param name="ordinal">
                字段的序号。
              </param>
      <returns>
              字段值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetString(System.Int32)">
      <summary>
              检索字符串形式的字段值。
            </summary>
      <param name="ordinal">
                字段的序号。
              </param>
      <returns>
              字段值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetValue(System.Int32)">
      <summary>
              检索字段的值。
            </summary>
      <param name="ordinal">
                字段的序号。
              </param>
      <returns>
              字段值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetValues(System.Object[])">
      <summary>
              使用来填充数组的对象的当前记录的字段值。
            </summary>
      <param name="values">
                用于存储字段值的对象数组。
              </param>
      <returns>
              返回的字段值的数目。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.IsDBNull(System.Int32)">
      <summary>
              返回指定的字段是否设置为 <see cref="T:System.DBNull" />。
            </summary>
      <param name="ordinal">
                字段的序号。
              </param>
      <returns>
              <see langword="true" /> 如果该字段设置为 <see cref="T:System.DBNull" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetBoolean(System.Int32,System.Boolean)">
      <summary>
              设置记录中一个字段的值。
            </summary>
      <param name="ordinal">
                字段的序号。
              </param>
      <param name="value">
                字段的值。
              </param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetByte(System.Int32,System.Byte)">
      <summary>
              设置记录中一个字段的值。
            </summary>
      <param name="ordinal">
                字段的序号。
              </param>
      <param name="value">
                字段的值。
              </param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetChar(System.Int32,System.Char)">
      <summary>
              设置记录中一个字段的值。
            </summary>
      <param name="ordinal">
                字段的序号。
              </param>
      <param name="value">
                字段的值。
              </param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetDataRecord(System.Int32,System.Data.IDataRecord)">
      <summary>
              设置记录中一个字段的值。
            </summary>
      <param name="ordinal">
                字段的序号。
              </param>
      <param name="value">
                字段的值。
              </param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetDateTime(System.Int32,System.DateTime)">
      <summary>
              设置记录中一个字段的值。
            </summary>
      <param name="ordinal">
                字段的序号。
              </param>
      <param name="value">
                字段的值。
              </param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetDBNull(System.Int32)">
      <summary>
              将一个字段设置为 <see cref="T:System.DBNull" /> 值。
            </summary>
      <param name="ordinal">
                字段的序号。
              </param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetDecimal(System.Int32,System.Decimal)">
      <summary>
              设置记录中一个字段的值。
            </summary>
      <param name="ordinal">
                字段的序号。
              </param>
      <param name="value">
                字段的值。
              </param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetDouble(System.Int32,System.Double)">
      <summary>
              设置记录中一个字段的值。
            </summary>
      <param name="ordinal">
                字段的序号。
              </param>
      <param name="value">
                字段的值。
              </param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetFloat(System.Int32,System.Single)">
      <summary>
              设置记录中一个字段的值。
            </summary>
      <param name="ordinal">
                字段的序号。
              </param>
      <param name="value">
                字段的值。
              </param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetGuid(System.Int32,System.Guid)">
      <summary>
              设置记录中一个字段的值。
            </summary>
      <param name="ordinal">
                字段的序号。
              </param>
      <param name="value">
                字段的值。
              </param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetInt16(System.Int32,System.Int16)">
      <summary>
              设置记录中一个字段的值。
            </summary>
      <param name="ordinal">
                字段的序号。
              </param>
      <param name="value">
                字段的值。
              </param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetInt32(System.Int32,System.Int32)">
      <summary>
              设置记录中一个字段的值。
            </summary>
      <param name="ordinal">
                字段的序号。
              </param>
      <param name="value">
                字段的值。
              </param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetInt64(System.Int32,System.Int64)">
      <summary>
              设置记录中一个字段的值。
            </summary>
      <param name="ordinal">
                字段的序号。
              </param>
      <param name="value">
                字段的值。
              </param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetRecordValue(System.Int32,System.Object)">
      <summary>
              设置记录中一个字段的值。
            </summary>
      <param name="ordinal">
                字段的序号。
              </param>
      <param name="value">
                字段的值。
              </param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetString(System.Int32,System.String)">
      <summary>
              设置记录中一个字段的值。
            </summary>
      <param name="ordinal">
                字段的序号。
              </param>
      <param name="value">
                字段的值。
              </param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetValue(System.Int32,System.Object)">
      <summary>
              设置记录中一个字段的值。
            </summary>
      <param name="ordinal">
                字段的序号。
              </param>
      <param name="value">
                字段的值。
              </param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetValues(System.Object[])">
      <summary>
              设置记录中的字段值。
            </summary>
      <param name="values">
                字段的值。
              </param>
      <returns>
              已设置的字段数。
            </returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.System#Data#IDataRecord#GetData(System.Int32)">
      <summary>
              检索 <see cref="T:System.Data.IDataReader" /> 形式的字段值。
            </summary>
      <param name="ordinal">
                字段的序号。
              </param>
      <returns>
              <see cref="T:System.Data.IDataReader" /> 形式的字段值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddDays(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>
              调用规范 <see langword="AddDays" /> 函数。
               璝惠规范 <see langword="AddDays" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="dateValue">
                有效的日期。
              </param>
      <param name="addValue">
                若要添加到天数 <paramref name="dateValue" />。
              </param>
      <returns>
              <paramref name="dateValue" /> 按递增 <paramref name="addValue" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>
              调用规范 <see langword="AddDays" /> 函数。
               璝惠规范 <see langword="AddDays" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="dateValue">
                有效的日期时间偏移量。
              </param>
      <param name="addValue">
                若要添加到天数 <paramref name="dateValue" />。
              </param>
      <returns>
              <paramref name="dateValue" /> 按递增 <paramref name="addValue" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddHours(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>
              调用规范 <see langword="AddHours" /> 函数。
               璝惠规范 <see langword="AddHours" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="timeValue">
                有效的日期。
              </param>
      <param name="addValue">
                要添加的小时数 <paramref name="timeValue" />。
              </param>
      <returns>
              <paramref name="timeValue" /> 按递增 <paramref name="addValue" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>
              调用规范 <see langword="AddHours" /> 函数。
               璝惠规范 <see langword="AddHours" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="timeValue">
                有效的日期时间偏移量。
              </param>
      <param name="addValue">
                要添加的小时数 <paramref name="timeValue" />。
              </param>
      <returns>
              <paramref name="timeValue" /> 按递增 <paramref name="addValue" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddHours(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>
              调用规范 <see langword="AddHours" /> 函数。
               璝惠规范 <see langword="AddHours" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="timeValue">
                一个有效的时间跨度。
              </param>
      <param name="addValue">
                要添加的小时数 <paramref name="timeValue" />。
              </param>
      <returns>
              <paramref name="timeValue" /> 按递增 <paramref name="addValue" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>
              调用规范 <see langword="AddMicroseconds" /> 函数。
               璝惠规范 <see langword="AddMicroseconds" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="timeValue">
                有效的日期。
              </param>
      <param name="addValue">
                若要添加到的微秒数 <paramref name="timeValue" />。
              </param>
      <returns>
              <paramref name="timeValue" /> 按递增 <paramref name="addValue" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>
              调用规范 <see langword="AddMicroseconds" /> 函数。
               璝惠规范 <see langword="AddMicroseconds" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="timeValue">
                有效的日期时间偏移量。
              </param>
      <param name="addValue">
                若要添加到的微秒数 <paramref name="timeValue" />。
              </param>
      <returns>
              <paramref name="timeValue" /> 按递增 <paramref name="addValue" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>
              调用规范 <see langword="AddMicroseconds" /> 函数。
               璝惠规范 <see langword="AddMicroseconds" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="timeValue">
                一个有效的时间跨度。
              </param>
      <param name="addValue">
                若要添加到的微秒数 <paramref name="timeValue" />。
              </param>
      <returns>
              <paramref name="timeValue" /> 按递增 <paramref name="addValue" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>
              调用规范 <see langword="AddMilliseconds" /> 函数。
               璝惠规范 <see langword="AddMilliseconds" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="timeValue">
                有效的日期。
              </param>
      <param name="addValue">
                要添加的毫秒数 <paramref name="timeValue" />。
              </param>
      <returns>
              <paramref name="timeValue" /> 按递增 <paramref name="addValue" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>
              调用规范 <see langword="AddMilliseconds" /> 函数。
               璝惠规范 <see langword="AddMilliseconds" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="timeValue">
                有效的日期时间偏移量。
              </param>
      <param name="addValue">
                要添加的毫秒数 <paramref name="timeValue" />。
              </param>
      <returns>
              <paramref name="timeValue" /> 按递增 <paramref name="addValue" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>
              调用规范 <see langword="AddMilliseconds" /> 函数。
               璝惠规范 <see langword="AddMilliseconds" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="timeValue">
                一个有效的时间跨度。
              </param>
      <param name="addValue">
                要添加的毫秒数 <paramref name="timeValue" />。
              </param>
      <returns>
              <paramref name="timeValue" /> 按递增 <paramref name="addValue" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMinutes(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>
              调用规范 <see langword="AddMinutes" /> 函数。
               璝惠规范 <see langword="AddMinutes" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="timeValue">
                有效的日期。
              </param>
      <param name="addValue">
                要添加的分钟数 <paramref name="timeValue" />。
              </param>
      <returns>
              <paramref name="timeValue" /> 按递增 <paramref name="addValue" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>
              调用规范<see langword="AddMinutes" />函数。
               璝惠规范<see langword="AddMinutes" />函数中，请参阅日期和时间规范函数。
            </summary>
      <param name="timeValue">
                有效的日期时间的偏移量。
              </param>
      <param name="addValue">
                要添加的分钟数<paramref name="timeValue" />。
              </param>
      <returns>
              <paramref name="timeValue" />按递增<paramref name="addValue" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>
              调用规范 <see langword="AddMinutes" /> 函数。
               璝惠规范 <see langword="AddMinutes" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="timeValue">
                一个有效的时间跨度。
              </param>
      <param name="addValue">
                要添加的分钟数 <paramref name="timeValue" />。
              </param>
      <returns>
              <paramref name="timeValue" /> 按递增 <paramref name="addValue" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMonths(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>
              调用规范 <see langword="AddMonths" /> 函数。
               璝惠规范 <see langword="AddMonths" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="dateValue">
                有效的日期。
              </param>
      <param name="addValue">
                要添加的月数 <paramref name="dateValue" />。
              </param>
      <returns>
              <paramref name="dateValue" /> 按递增 <paramref name="addValue" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>
              调用规范 <see langword="AddMonths" /> 函数。
               璝惠规范 <see langword="AddMonths" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="dateValue">
                有效的日期时间偏移量。
              </param>
      <param name="addValue">
                要添加的月数 <paramref name="dateValue" />。
              </param>
      <returns>
              <paramref name="dateValue" /> 按递增 <paramref name="addValue" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>
              调用规范 <see langword="AddNanoseconds" /> 函数。
               璝惠规范 <see langword="AddNanoseconds" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="timeValue">
                有效的日期。
              </param>
      <param name="addValue">
                将添加到的毫微秒数 <paramref name="timeValue" />。
              </param>
      <returns>
              <paramref name="timeValue" /> 按递增 <paramref name="addValue" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>
              调用规范 <see langword="AddNanoseconds" /> 函数。
               璝惠规范 <see langword="AddNanoseconds" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="timeValue">
                有效的日期时间偏移量。
              </param>
      <param name="addValue">
                将添加到的毫微秒数 <paramref name="timeValue" />。
              </param>
      <returns>
              <paramref name="timeValue" /> 按递增 <paramref name="addValue" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>
              调用规范 <see langword="AddNanoseconds" /> 函数。
               璝惠规范 <see langword="AddNanoseconds" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="timeValue">
                一个有效的时间跨度。
              </param>
      <param name="addValue">
                将添加到的毫微秒数 <paramref name="timeValue" />。
              </param>
      <returns>
              <paramref name="timeValue" /> 按递增 <paramref name="addValue" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddSeconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>
              调用规范 <see langword="AddSeconds" /> 函数。
               璝惠规范 <see langword="AddSeconds" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="timeValue">
                有效的日期。
              </param>
      <param name="addValue">
                若要添加到的秒数 <paramref name="timeValue" />。
              </param>
      <returns>
              <paramref name="timeValue" /> 按递增 <paramref name="addValue" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>
              调用规范 <see langword="AddSeconds" /> 函数。
               璝惠规范 <see langword="AddSeconds" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="timeValue">
                有效的日期时间偏移量。
              </param>
      <param name="addValue">
                若要添加到的秒数 <paramref name="timeValue" />。
              </param>
      <returns>
              <paramref name="timeValue" /> 按递增 <paramref name="addValue" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>
              调用规范 <see langword="AddSeconds" /> 函数。
               璝惠规范 <see langword="AddSeconds" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="timeValue">
                一个有效的时间跨度。
              </param>
      <param name="addValue">
                若要添加到的秒数 <paramref name="timeValue" />。
              </param>
      <returns>
              <paramref name="timeValue" /> 按递增 <paramref name="addValue" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddYears(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>
              调用规范 <see langword="AddYears" /> 函数。
               璝惠规范 <see langword="AddYears" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="dateValue">
                有效的日期。
              </param>
      <param name="addValue">
                若要添加到的年数 <paramref name="dateValue" />。
              </param>
      <returns>
              <paramref name="dateValue" /> 按递增 <paramref name="addValue" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>
              调用规范 <see langword="AddYears" /> 函数。
               璝惠规范 <see langword="AddYears" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="dateValue">
                有效的日期时间偏移量。
              </param>
      <param name="addValue">
                若要添加到的年数 <paramref name="dateValue" />。
              </param>
      <returns>
              <paramref name="dateValue" /> 按递增 <paramref name="addValue" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AsNonUnicode(System.String)">
      <summary>
              LINQ to Entities 运算符，它将输入的字符串视为非 unicode 字符串。
               此方法仅适用于 LINQ to Entities 查询。
            </summary>
      <param name="value">
                输入的字符串。
              </param>
      <returns>
              一个非 unicode 字符串。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AsUnicode(System.String)">
      <summary>
              LINQ to Entities 运算符，以确保输入的字符串视为一个 unicode 字符串。
               此方法仅适用于 LINQ to Entities 查询。
            </summary>
      <param name="value">
                输入的字符串。
              </param>
      <returns>
              一个 unicode 字符串。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.CreateDateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>
              调用规范 <see langword="CreateDateTime" /> 函数。
               璝惠规范 <see langword="CreateDateTime" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="year">
                新日期的年份部分。
              </param>
      <param name="month">
                新日期的月份部分。
              </param>
      <param name="day">
                新日期的天部分。
              </param>
      <param name="hour">
                新日期的小时部分。
              </param>
      <param name="minute">
                新日期的分钟部分。
              </param>
      <param name="second">
                新日期的秒部分。
                 请注意，您可以使用此参数指定的秒小数部分。
              </param>
      <returns>
              新的日期。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.CreateDateTimeOffset(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>
              调用规范 <see langword="CreateDateTimeOffset" /> 函数。
               璝惠规范 <see langword="CreateDateTimeOffset" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="year">
                新日期的年份部分。
              </param>
      <param name="month">
                新日期的月份部分。
              </param>
      <param name="day">
                新日期的天部分。
              </param>
      <param name="hour">
                新日期的小时部分。
              </param>
      <param name="minute">
                新的日期的分钟部分。
              </param>
      <param name="second">
                新日期的秒部分。
                 请注意，您可以使用此参数指定的秒小数部分。
              </param>
      <param name="timeZoneOffset">
                时区偏移量的新的日期部分。
              </param>
      <returns>
              新的日期。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.CreateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>
              调用规范 <see langword="CreateTime" /> 函数。
               璝惠规范 <see langword="CreateTime" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="hour">
                跨度新时间的小时部分。
              </param>
      <param name="minute">
                跨度新时间的分钟部分。
              </param>
      <param name="second">
                跨度新时间的秒部分。
                 请注意，您可以使用此参数指定的秒小数部分。
              </param>
      <returns>
              新的时间跨度。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffDays(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
              调用规范 <see langword="DiffDays" /> 函数。
               璝惠规范 <see langword="DiffDays" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="dateValue1">
                有效的日期。
              </param>
      <param name="dateValue2">
                有效的日期。
              </param>
      <returns>
              之间的天数 <paramref name="dateValue1" /> 和 <paramref name="dateValue2" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>
              调用规范 <see langword="DiffDays" /> 函数。
               璝惠规范 <see langword="DiffDays" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="dateValue1">
                有效的日期时间偏移量。
              </param>
      <param name="dateValue2">
                有效的日期时间偏移量。
              </param>
      <returns>
              之间的天数 <paramref name="dateValue1" /> 和 <paramref name="dateValue2" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffHours(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
              调用规范 <see langword="DiffHours" /> 函数。
               璝惠规范 <see langword="DiffHours" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="timeValue1">
                有效的日期。
              </param>
      <param name="timeValue2">
                有效的日期。
              </param>
      <returns>
              之间的小时数 <paramref name="timeValue1" /> 和 <paramref name="timeValue2" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>
              调用规范 <see langword="DiffHours" /> 函数。
               璝惠规范 <see langword="DiffHours" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="timeValue1">
                有效的日期时间偏移量。
              </param>
      <param name="timeValue2">
                有效的日期时间偏移量。
              </param>
      <returns>
              之间的小时数 <paramref name="timeValue1" /> 和 <paramref name="timeValue2" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffHours(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>
              调用规范 <see langword="DiffHours" /> 函数。
               璝惠规范 <see langword="DiffHours" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="timeValue1">
                一个有效的时间跨度。
              </param>
      <param name="timeValue2">
                一个有效的时间跨度。
              </param>
      <returns>
              之间的小时数 <paramref name="timeValue1" /> 和 <paramref name="timeValue2" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
              调用规范 <see langword="DiffMicroseconds" /> 函数。
               璝惠规范 <see langword="DiffMicroseconds" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="timeValue1">
                有效的日期。
              </param>
      <param name="timeValue2">
                有效的日期。
              </param>
      <returns>
              之间的微秒数 <paramref name="timeValue1" /> 和 <paramref name="timeValue2" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>
              调用规范 <see langword="DiffMicroseconds" /> 函数。
               璝惠规范 <see langword="DiffMicroseconds" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="timeValue1">
                有效的日期时间偏移量。
              </param>
      <param name="timeValue2">
                有效的日期时间偏移量。
              </param>
      <returns>
              之间的微秒数 <paramref name="timeValue1" /> 和 <paramref name="timeValue2" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>
              调用规范 <see langword="DiffMicroseconds" /> 函数。
               璝惠规范 <see langword="DiffMicroseconds" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="timeValue1">
                一个有效的时间跨度。
              </param>
      <param name="timeValue2">
                一个有效的时间跨度。
              </param>
      <returns>
              之间的微秒数 <paramref name="timeValue1" /> 和 <paramref name="timeValue2" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
              调用规范 <see langword="DiffMilliseconds" /> 函数。
               璝惠规范 <see langword="DiffMilliseconds" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="timeValue1">
                有效的日期。
              </param>
      <param name="timeValue2">
                有效的日期。
              </param>
      <returns>
              之间的毫秒数 <paramref name="timeValue1" /> 和 <paramref name="timeValue2" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>
              调用规范 <see langword="DiffMilliseconds" /> 函数。
               璝惠规范 <see langword="DiffMilliseconds" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="timeValue1">
                有效的日期时间偏移量。
              </param>
      <param name="timeValue2">
                有效的日期时间偏移量。
              </param>
      <returns>
              之间的毫秒数 <paramref name="timeValue1" /> 和 <paramref name="timeValue2" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>
              调用规范 <see langword="DiffMilliseconds" /> 函数。
               璝惠规范 <see langword="DiffMilliseconds" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="timeValue1">
                一个有效的时间跨度。
              </param>
      <param name="timeValue2">
                一个有效的时间跨度。
              </param>
      <returns>
              之间的毫秒数 <paramref name="timeValue1" /> 和 <paramref name="timeValue2" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
              调用规范 <see langword="DiffMinutes" /> 函数。
               璝惠规范 <see langword="DiffMinutes" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="timeValue1">
                有效的日期。
              </param>
      <param name="timeValue2">
                有效的日期。
              </param>
      <returns>
              之间的分钟数 <paramref name="timeValue1" /> 和 <paramref name="timeValue2" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>
              调用规范 <see langword="DiffMinutes" /> 函数。
               璝惠规范 <see langword="DiffMinutes" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="timeValue1">
                有效的日期时间偏移量。
              </param>
      <param name="timeValue2">
                有效的日期时间偏移量。
              </param>
      <returns>
              之间的分钟数 <paramref name="timeValue1" /> 和 <paramref name="timeValue2" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>
              调用规范 <see langword="DiffMinutes" /> 函数。
               璝惠规范 <see langword="DiffMinutes" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="timeValue1">
                一个有效的时间跨度。
              </param>
      <param name="timeValue2">
                一个有效的时间跨度。
              </param>
      <returns>
              之间的分钟数 <paramref name="timeValue1" /> 和 <paramref name="timeValue2" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMonths(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
              调用规范 <see langword="DiffMonths" /> 函数。
               璝惠规范 <see langword="DiffMonths" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="dateValue1">
                有效的日期。
              </param>
      <param name="dateValue2">
                有效的日期。
              </param>
      <returns>
              之间的月数 <paramref name="dateValue1" /> 和 <paramref name="dateValue2" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>
              调用规范 <see langword="DiffMonths" /> 函数。
               璝惠规范 <see langword="DiffMonths" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="dateValue1">
                有效的日期时间偏移量。
              </param>
      <param name="dateValue2">
                有效的日期时间偏移量。
              </param>
      <returns>
              之间的月数 <paramref name="dateValue1" /> 和 <paramref name="dateValue2" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
              调用规范 <see langword="DiffNanoseconds" /> 函数。
               璝惠规范 <see langword="DiffNanoseconds" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="timeValue1">
                有效的日期。
              </param>
      <param name="timeValue2">
                有效的日期。
              </param>
      <returns>
              之间的毫微秒数 <paramref name="timeValue1" /> 和 <paramref name="timeValue2" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>
              调用规范 <see langword="DiffNanoseconds" /> 函数。
               璝惠规范 <see langword="DiffNanoseconds" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="timeValue1">
                有效的日期时间偏移量。
              </param>
      <param name="timeValue2">
                有效的日期时间偏移量。
              </param>
      <returns>
              之间的毫微秒数 <paramref name="timeValue1" /> 和 <paramref name="timeValue2" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>
              调用规范 <see langword="DiffNanoseconds" /> 函数。
               璝惠规范 <see langword="DiffNanoseconds" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="timeValue1">
                有效的日期。
              </param>
      <param name="timeValue2">
                有效的日期。
              </param>
      <returns>
              之间的毫微秒数 <paramref name="timeValue1" /> 和 <paramref name="timeValue2" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
              调用规范 <see langword="DiffSeconds" /> 函数。
               璝惠规范 <see langword="DiffSeconds" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="timeValue1">
                有效的日期。
              </param>
      <param name="timeValue2">
                有效的日期。
              </param>
      <returns>
              之间的秒数 <paramref name="timeValue1" /> 和 <paramref name="timeValue2" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>
              调用规范 <see langword="DiffSeconds" /> 函数。
               璝惠规范 <see langword="DiffSeconds" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="timeValue1">
                有效的日期时间偏移量。
              </param>
      <param name="timeValue2">
                有效的日期时间偏移量。
              </param>
      <returns>
              之间的秒数 <paramref name="timeValue1" /> 和 <paramref name="timeValue2" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>
              调用规范 <see langword="DiffSeconds" /> 函数。
               璝惠规范 <see langword="DiffSeconds" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="timeValue1">
                一个有效的时间跨度。
              </param>
      <param name="timeValue2">
                一个有效的时间跨度。
              </param>
      <returns>
              之间的秒数 <paramref name="timeValue1" /> 和 <paramref name="timeValue2" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffYears(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
              调用规范 <see langword="DiffYears" /> 函数。
               璝惠规范 <see langword="DiffYears" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="dateValue1">
                有效的日期。
              </param>
      <param name="dateValue2">
                有效的日期。
              </param>
      <returns>
              之间的年份数 <paramref name="dateValue1" /> 和 <paramref name="dateValue2" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>
              调用规范 <see langword="DiffYears" /> 函数。
               璝惠规范 <see langword="DiffYears" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="dateValue1">
                有效的日期时间偏移量。
              </param>
      <param name="dateValue2">
                有效的日期时间偏移量。
              </param>
      <returns>
              之间的年份数 <paramref name="dateValue1" /> 和 <paramref name="dateValue2" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.GetTotalOffsetMinutes(System.Nullable{System.DateTimeOffset})">
      <summary>
              调用规范 <see langword="GetTotalOffsetMinutes" /> 函数。
               璝惠规范 <see langword="GetTotalOffsetMinutes" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="dateTimeOffsetArgument">
                有效的日期时间偏移量。
              </param>
      <returns>
              数分钟 <paramref name="dateTimeOffsetArgument" /> 相对于 GMT 偏移量。
               此值通常介于 +780 到 -780 之间（+ 或 - 13 小时）。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Left(System.String,System.Nullable{System.Int64})">
      <summary>
              调用规范 <see langword="Left" /> 函数。
               璝惠规范 <see langword="Left" /> 函数中，请参阅 字符串规范函数。
            </summary>
      <param name="stringArgument">
                有效字符串表达式。
              </param>
      <param name="length">
                要返回的字符数。
              </param>
      <returns>
              最左侧 <paramref name="length" /> 的字符数 <paramref name="stringArgument" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Reverse(System.String)">
      <summary>
              调用规范 <see langword="Reverse" /> 函数。
               璝惠规范 <see langword="Reverse" /> 函数中，请参阅 字符串规范函数。
            </summary>
      <param name="stringArgument">
                一个有效的字符串。
              </param>
      <returns>
              输入的字符串的字符顺序反转。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Right(System.String,System.Nullable{System.Int64})">
      <summary>
              调用规范 <see langword="Right" /> 函数。
               璝惠规范 <see langword="Right" /> 函数中，请参阅 字符串规范函数。
            </summary>
      <param name="stringArgument">
                有效字符串表达式。
              </param>
      <param name="length">
                要返回的字符数。
              </param>
      <returns>
              最右边 <paramref name="length" /> 的字符数 <paramref name="stringArgument" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
              调用规范 <see langword="StDev" /> 函数。
               璝惠规范 <see langword="StDev" /> 函数中，请参阅 规范函数。
            </summary>
      <param name="collection">
                一组数字值。
              </param>
      <returns>
              输入集合中的统计标准偏差。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
              调用规范 <see langword="StDev" /> 函数。
               璝惠规范 <see langword="StDev" /> 函数中，请参阅 规范函数。
            </summary>
      <param name="collection">
                一组数字值。
              </param>
      <returns>
              输入集合中的统计标准偏差。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
              调用规范 <see langword="StDev" /> 函数。
               璝惠规范 <see langword="StDev" /> 函数中，请参阅 规范函数。
            </summary>
      <param name="collection">
                一组数字值。
              </param>
      <returns>
              输入集合中的统计标准偏差。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
              调用规范 <see langword="StDev" /> 函数。
               璝惠规范 <see langword="StDev" /> 函数中，请参阅 规范函数。
            </summary>
      <param name="collection">
                一组数字值。
              </param>
      <returns>
              输入集合中的统计标准偏差。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>
              调用规范 <see langword="StDev" /> 函数。
               璝惠规范 <see langword="StDev" /> 函数中，请参阅 规范函数。
            </summary>
      <param name="collection">
                一组数字值。
              </param>
      <returns>
              输入集合中的统计标准偏差。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>
              调用规范 <see langword="StDev" /> 函数。
               璝惠规范 <see langword="StDev" /> 函数中，请参阅 规范函数。
            </summary>
      <param name="collection">
                一组数字值。
              </param>
      <returns>
              输入集合中的统计标准偏差。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>
              调用规范 <see langword="StDev" /> 函数。
               璝惠规范 <see langword="StDev" /> 函数中，请参阅 规范函数。
            </summary>
      <param name="collection">
                一组数字值。
              </param>
      <returns>
              输入集合中的统计标准偏差。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>
              调用规范 <see langword="StDev" /> 函数。
               璝惠规范 <see langword="StDev" /> 函数中，请参阅 规范函数。
            </summary>
      <param name="collection">
                一组数字值。
              </param>
      <returns>
              输入集合中的统计标准偏差。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
              调用规范 <see langword="StDevP" /> 函数。
               璝惠规范 <see langword="StDevP" /> 函数中，请参阅 规范函数。
            </summary>
      <param name="collection">
                一组数字值。
              </param>
      <returns>
              输入集合中的总体统计标准偏差。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
              调用规范 <see langword="StDevP" /> 函数。
               璝惠规范 <see langword="StDevP" /> 函数中，请参阅 规范函数。
            </summary>
      <param name="collection">
                一组数字值。
              </param>
      <returns>
              输入集合中的总体统计标准偏差。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
              调用规范 <see langword="StDevP" /> 函数。
               璝惠规范 <see langword="StDevP" /> 函数中，请参阅 规范函数。
            </summary>
      <param name="collection">
                一组数字值。
              </param>
      <returns>
              输入集合中的总体统计标准偏差。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
              调用规范 <see langword="StDevP" /> 函数。
               璝惠规范 <see langword="StDevP" /> 函数中，请参阅 规范函数。
            </summary>
      <param name="collection">
                一组数字值。
              </param>
      <returns>
              输入集合中的总体统计标准偏差。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>
              调用规范 <see langword="StDevP" /> 函数。
               璝惠规范 <see langword="StDevP" /> 函数中，请参阅 规范函数。
            </summary>
      <param name="collection">
                一组数字值。
              </param>
      <returns>
              输入集合中的总体统计标准偏差。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>
              调用规范 <see langword="StDevP" /> 函数。
               璝惠规范 <see langword="StDevP" /> 函数中，请参阅 规范函数。
            </summary>
      <param name="collection">
                一组数字值。
              </param>
      <returns>
              输入集合中的总体统计标准偏差。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>
              调用规范 <see langword="StDevP" /> 函数。
               璝惠规范 <see langword="StDevP" /> 函数中，请参阅 规范函数。
            </summary>
      <param name="collection">
                一组数字值。
              </param>
      <returns>
              输入集合中的总体统计标准偏差。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>
              调用规范 <see langword="StDevP" /> 函数。
               璝惠规范 <see langword="StDevP" /> 函数中，请参阅 规范函数。
            </summary>
      <param name="collection">
                一组数字值。
              </param>
      <returns>
              输入集合中的总体统计标准偏差。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Truncate(System.Nullable{System.Decimal},System.Nullable{System.Int32})">
      <summary>
              调用规范 <see langword="Truncate" /> 函数。
               璝惠规范 <see langword="Truncate" /> 函数中，请参阅数学规范函数。
            </summary>
      <param name="value">
                要截断的数字。
              </param>
      <param name="digits">
                长度或精度，以将截断为。
              </param>
      <returns>
              <paramref name="value" /> 截断的长度或精度指定为 <paramref name="digits" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Truncate(System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>
              调用规范 <see langword="Truncate" /> 函数。
               璝惠规范 <see langword="Truncate" /> 函数中，请参阅数学规范函数。
            </summary>
      <param name="value">
                要截断的数字。
              </param>
      <param name="digits">
                长度或精度，以将截断为。
              </param>
      <returns>
              <paramref name="value" /> 截断的长度或精度指定为 <paramref name="digits" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.TruncateTime(System.Nullable{System.DateTime})">
      <summary>
              调用规范 <see langword="TruncateTime" /> 函数。
               璝惠规范 <see langword="TruncateTime" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="dateValue">
                要截断的日期。
              </param>
      <returns>
              输入的日期与时间部分被清除。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.TruncateTime(System.Nullable{System.DateTimeOffset})">
      <summary>
              调用规范 <see langword="TruncateTime" /> 函数。
               璝惠规范 <see langword="TruncateTime" /> 函数中，请参阅 日期和时间规范函数。
            </summary>
      <param name="dateValue">
                要截断的日期时间偏移量。
              </param>
      <returns>
              输入的日期与时间部分被清除。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
              调用规范 <see langword="Var" /> 函数。
               璝惠规范 <see langword="Var" /> 函数中，请参阅 规范函数。
            </summary>
      <param name="collection">
                值将为其计算方差集。
              </param>
      <returns>
              指定集合中的所有值的方差。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
              调用规范 <see langword="Var" /> 函数。
               璝惠规范 <see langword="Var" /> 函数中，请参阅 规范函数。
            </summary>
      <param name="collection">
                值将为其计算方差集。
              </param>
      <returns>
              指定集合中的所有值的方差。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
              调用规范 <see langword="Var" /> 函数。
               璝惠规范 <see langword="Var" /> 函数中，请参阅 规范函数。
            </summary>
      <param name="collection">
                值将为其计算方差集。
              </param>
      <returns>
              指定集合中的所有值的方差。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
              调用规范 <see langword="Var" /> 函数。
               璝惠规范 <see langword="Var" /> 函数中，请参阅 规范函数。
            </summary>
      <param name="collection">
                值将为其计算方差集。
              </param>
      <returns>
              指定集合中的所有值的方差。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>
              调用规范 <see langword="Var" /> 函数。
               璝惠规范 <see langword="Var" /> 函数中，请参阅 规范函数。
            </summary>
      <param name="collection">
                值将为其计算方差集。
              </param>
      <returns>
              指定集合中的所有值的方差。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>
              调用规范 <see langword="Var" /> 函数。
               璝惠规范 <see langword="Var" /> 函数中，请参阅 规范函数。
            </summary>
      <param name="collection">
                值将为其计算方差集。
              </param>
      <returns>
              指定集合中的所有值的方差。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>
              调用规范 <see langword="Var" /> 函数。
               璝惠规范 <see langword="Var" /> 函数中，请参阅 规范函数。
            </summary>
      <param name="collection">
                值将为其计算方差集。
              </param>
      <returns>
              指定集合中的所有值的方差。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>
              调用规范 <see langword="Var" /> 函数。
               璝惠规范 <see langword="Var" /> 函数中，请参阅 规范函数。
            </summary>
      <param name="collection">
                值将为其计算方差集。
              </param>
      <returns>
              指定集合中的所有值的方差。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
              调用规范 <see langword="VarP" /> 函数。
               璝惠规范 <see langword="VarP" /> 函数中，请参阅 规范函数。
            </summary>
      <param name="collection">
                值将为其计算方差集。
              </param>
      <returns>
              指定集合中的总体统计方差。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
              调用规范 <see langword="VarP" /> 函数。
               璝惠规范 <see langword="VarP" /> 函数中，请参阅 规范函数。
            </summary>
      <param name="collection">
                值将为其计算方差集。
              </param>
      <returns>
              指定集合中的总体统计方差。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
              调用规范 <see langword="VarP" /> 函数。
               璝惠规范 <see langword="VarP" /> 函数中，请参阅 规范函数。
            </summary>
      <param name="collection">
                值将为其计算方差集。
              </param>
      <returns>
              指定集合中的总体统计方差。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
              调用规范 <see langword="VarP" /> 函数。
               璝惠规范 <see langword="VarP" /> 函数中，请参阅 规范函数。
            </summary>
      <param name="collection">
                值将为其计算方差集。
              </param>
      <returns>
              指定集合中的总体统计方差。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>
              调用规范 <see langword="VarP" /> 函数。
               璝惠规范 <see langword="VarP" /> 函数中，请参阅 规范函数。
            </summary>
      <param name="collection">
                值将为其计算方差集。
              </param>
      <returns>
              指定集合中的总体统计方差。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>
              调用规范 <see langword="VarP" /> 函数。
               璝惠规范 <see langword="VarP" /> 函数中，请参阅 规范函数。
            </summary>
      <param name="collection">
                值将为其计算方差集。
              </param>
      <returns>
              指定集合中的总体统计方差。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>
              调用规范 <see langword="VarP" /> 函数。
               璝惠规范 <see langword="VarP" /> 函数中，请参阅 规范函数。
            </summary>
      <param name="collection">
                值将为其计算方差集。
              </param>
      <returns>
              指定集合中的总体统计方差。
            </returns>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>
              调用规范 <see langword="VarP" /> 函数。
               璝惠规范 <see langword="VarP" /> 函数中，请参阅 规范函数。
            </summary>
      <param name="collection">
                值将为其计算方差集。
              </param>
      <returns>
              指定集合中的总体统计方差。
            </returns>
    </member>
    <member name="M:System.Data.Objects.IObjectSet`1.AddObject(`0)">
      <summary>
              通知对象集必须一个对象，表示新实体添加到集中。
            </summary>
      <param name="entity">
                要添加到集的新对象。
              </param>
    </member>
    <member name="M:System.Data.Objects.IObjectSet`1.Attach(`0)">
      <summary>
              通知对象集表示现有实体的对象，必须添加到集中。
            </summary>
      <param name="entity">
                要添加到集中的现有对象。
              </param>
    </member>
    <member name="M:System.Data.Objects.IObjectSet`1.DeleteObject(`0)">
      <summary>
              通知必须从集中删除的一个对象，表示现有实体对象集。
            </summary>
      <param name="entity">
                要从集中删除的现有对象。
              </param>
    </member>
    <member name="M:System.Data.Objects.IObjectSet`1.Detach(`0)">
      <summary>
              通知对象集，必须从集中分离表示现有实体的对象。
            </summary>
      <param name="entity">
                要从集中分离的对象。
              </param>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.#ctor(System.Data.EntityClient.EntityConnection)">
      <summary>
              使用给定的连接初始化 <see cref="T:System.Data.Objects.ObjectContext" /> 类的新实例。
               在构造过程中，从 <see cref="T:System.Data.EntityClient.EntityConnection" /> 对象提取元数据工作区。
            </summary>
      <param name="connection">
                一种包含对模型和数据源连接的引用的 <see cref="T:System.Data.EntityClient.EntityConnection" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="connection" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="connection" /> 无效。
                
                  - 或 -
                
                  元数据工作区无效。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.#ctor(System.Data.EntityClient.EntityConnection,System.String)">
      <summary>
              使用给定连接和实体容器名称初始化 <see cref="T:System.Data.Objects.ObjectContext" /> 类的新实例。
            </summary>
      <param name="connection">
                一种包含对模型和数据源连接的引用的 <see cref="T:System.Data.EntityClient.EntityConnection" />。
              </param>
      <param name="defaultContainerName">
                默认实体容器的名称。
                 当 <paramref name="defaultContainerName" /> 设置通过这种方法，则该属性为只读的。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="connection" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="connection" />, ，<paramref name="defaultContainerName" />, ，或元数据工作区无效。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.#ctor(System.String)">
      <summary>
              使用给定连接字符串和默认实体容器名称初始化 <see cref="T:System.Data.Objects.ObjectContext" /> 类的新实例。
            </summary>
      <param name="connectionString">
                连接字符串，该连接字符串还提供对元数据信息的访问。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="connectionString" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="connectionString" /> 无效。
                
                  - 或 -
                
                  元数据工作区无效。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.#ctor(System.String,System.String)">
      <summary>
              使用给定连接字符串和实体容器名称初始化 <see cref="T:System.Data.Objects.ObjectContext" /> 类的新实例。
            </summary>
      <param name="connectionString">
                连接字符串，该连接字符串还提供对元数据信息的访问。
              </param>
      <param name="defaultContainerName">
                默认实体容器的名称。
                 当 <paramref name="defaultContainerName" /> 设置通过这种方法，则该属性为只读的。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="connectionString" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="connectionString" />, ，<paramref name="defaultContainerName" />, ，或元数据工作区无效。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.AcceptAllChanges">
      <summary>
              接受在对象上下文中对对象所做的所有更改。
            </summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.AddObject(System.String,System.Object)">
      <summary>
              将对象添加到对象上下文。
            </summary>
      <param name="entitySetName">
                表示实体集名称，可以选择通过实体容器名称对它进行限定。
              </param>
      <param name="entity">
                要添加的 <see cref="T:System.Object" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="entity" /> 参数为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="entitySetName" /> 不符合。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ApplyCurrentValues``1(System.String,``0)">
      <summary>
              将标量值从提供的对象复制到 <see cref="T:System.Data.Objects.ObjectContext" /> 中具有相同键的对象中。
            </summary>
      <param name="entitySetName">
                对象所属实体集的名称。
              </param>
      <param name="currentEntity">
                其属性更新将应用于原始对象的已分离对象。
                 实体键 <paramref name="currentEntity" /> 必须匹配 <see cref="P:System.Data.Objects.ObjectStateEntry.EntityKey" /> 属性中的条目 <see cref="T:System.Data.Objects.ObjectContext" />。
              </param>
      <typeparam name="TEntity">
                对象的实体类型。
              </typeparam>
      <returns>
              更新后的对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="entitySetName" /> 或 <paramref name="current" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 从 <paramref name="entitySetName" /> 不符 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 对象的 <see cref="T:System.Data.EntityKey" />。
                
                  - 或 -
                
                  对象未处于 <see cref="T:System.Data.Objects.ObjectStateManager" /> 或处于 <see cref="F:System.Data.EntityState.Detached" /> 状态。
                
                  - 或 - 
                
                  所提供的对象的实体键无效。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="entitySetName" /> 是一个空字符串。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ApplyOriginalValues``1(System.String,``0)">
      <summary>
              将标量值从提供的对象复制到 <see cref="T:System.Data.Objects.ObjectContext" /> 中具有相同键的对象的原始值集中。
            </summary>
      <param name="entitySetName">
                对象所属实体集的名称。
              </param>
      <param name="originalEntity">
                具有要应用于对象的原始值的已分离的对象。
                 实体键 <paramref name="originalEntity" /> 必须匹配 <see cref="P:System.Data.Objects.ObjectStateEntry.EntityKey" /> 属性中的条目 <see cref="T:System.Data.Objects.ObjectContext" />。
              </param>
      <typeparam name="TEntity">
                实体对象的类型。
              </typeparam>
      <returns>
              更新后的对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="entitySetName" /> 或 <paramref name="original" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 从 <paramref name="entitySetName" /> 不符 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 对象的 <see cref="T:System.Data.EntityKey" />。
                
                  - 或 -
                
                  <see cref="T:System.Data.Objects.ObjectStateEntry" /> 中找不到该对象 <see cref="T:System.Data.Objects.ObjectStateManager" />。
                   - 或 -
                
                  该对象就处于 <see cref="F:System.Data.EntityState.Added" /> 或 <see cref="F:System.Data.EntityState.Detached" /> 状态。
                
                  - 或 - 
                
                  所提供的对象的实体键无效或有属性更改。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="entitySetName" /> 是一个空字符串。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ApplyPropertyChanges(System.String,System.Object)">
      <summary>
              将已分离对象的属性更改应用于已附加到对象上下文的对象。
            </summary>
      <param name="entitySetName">
                对象所属实体集的名称。
              </param>
      <param name="changed">
                其属性更新将应用于原始对象的已分离对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  当 <paramref name="entitySetName" /> 是 <see langword="null" /> 或空字符串。
                
                  - 或 -
                
                  当 <paramref name="changed" /> 是 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  当 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 从 <paramref name="entitySetName" /> 不符 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 对象的 <see cref="T:System.Data.EntityKey" />。
                
                  - 或 -
                
                  当实体处于 <see cref="F:System.Data.EntityState.Modified" /> 或 <see cref="F:System.Data.EntityState.Unchanged" /> 之外的状态时。
                
                  - 或 - 
                
                  原始对象未附加到上下文。
                </exception>
      <exception cref="T:System.ArgumentException">
                  时的一种 <paramref name="changed" /> 对象不是与原始对象相同的类型。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Attach(System.Data.Objects.DataClasses.IEntityWithKey)">
      <summary>
              在对象具有实体键时将对象或对象图附加到对象上下文。
            </summary>
      <param name="entity">
                要附加的对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="entity" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  无效的实体键。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.AttachTo(System.String,System.Object)">
      <summary>
              将特定实体集中的对象或对象图附加到对象上下文。
            </summary>
      <param name="entitySetName">
                表示实体集名称，可以选择通过实体容器名称对它进行限定。
              </param>
      <param name="entity">
                要附加的 <see cref="T:System.Object" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="entity" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  无效的实体集。
                
                  - 或 -
                
                  对象具有临时键。
                
                  - 或 -
                
                  对象具有 <see cref="T:System.Data.EntityKey" /> 且 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 与作为方法参数传入的实体集不匹配。
                
                  - 或 -
                
                  对象没有 <see cref="T:System.Data.EntityKey" />，且未提供任何实体集。
                
                  - 或 -
                
                  对象图中的任何对象都具有临时 <see cref="T:System.Data.EntityKey" />。
                
                  - 或 -
                
                  对象图中的任何对象都具有无效的 <see cref="T:System.Data.EntityKey" />（例如，键中的值与对象中的值不匹配）。
                
                  - 或 -
                
                  找不到的实体集，从给定 <paramref name="entitySetName" /> 名称和实体容器名称。
                
                  - 或 -
                
                  对象图中的任何对象都已存在于另一个状态管理器中。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateDatabase">
      <summary>
              使用当前数据源连接和中的元数据来创建数据库 <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />。
            </summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateDatabaseScript">
      <summary>
              为元数据中生成数据定义语言 (DDL) 脚本创建架构对象 （表、 主键、 外键） <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />。
              <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> 用于加载存储架构定义语言 (SSDL) 文件中的元数据。
            </summary>
      <returns>
              创建架构对象的元数据的 DDL 脚本 <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateEntityKey(System.String,System.Object)">
      <summary>
              为特定对象创建实体键，如果实体键已存在，则返回该键。
            </summary>
      <param name="entitySetName">
                实体对象所属实体集的完全限定名称。
              </param>
      <param name="entity">
                要为其检索实体键的对象。
              </param>
      <returns>
              对象的 <see cref="T:System.Data.EntityKey" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  当两个参数是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  当 <paramref name="entitySetName" /> 为空时。
                
                  - 或 - 
                
                  时的一种 <paramref name="entity" /> 对象不存在实体集中。
                
                  - 或 -
                
                  当 <paramref name="entitySetName" /> 不是完全限定名称。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  当无法根据提供的参数成功构造实体键时。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateObject``1">
      <summary>
              创建并返回所请求类型的实例。
            </summary>
      <typeparam name="T">
                要返回对象的类型。
              </typeparam>
      <returns>
              所请求类型的实例 <paramref name="T" />, ，或启用的派生类型的实例 <paramref name="T" /> 与实体框架一起使用。
               返回的对象是所请求类型的实例或派生类型可支持请求的类型与实体框架一起使用的实例。
            </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateObjectSet``1">
      <summary>
              创建一个新 <see cref="T:System.Data.Objects.ObjectSet`1" /> 用于查询、 添加、 修改和删除指定的实体类型的对象的实例。
            </summary>
      <typeparam name="TEntity">
                所请求的实体类型 <see cref="T:System.Data.Objects.ObjectSet`1" />。
              </typeparam>
      <returns>
              新的 <see cref="T:System.Data.Objects.ObjectSet`1" /> 实例。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.Data.Objects.ObjectContext.DefaultContainerName" /> 上未设置属性 <see cref="T:System.Data.Objects.ObjectContext" />。
                
                  - 或 -
                
                  指定的类型属于多个实体集。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateObjectSet``1(System.String)">
      <summary>
              创建一个新 <see cref="T:System.Data.Objects.ObjectSet`1" /> 用于查询、 添加、 修改和删除指定类型的对象和指定的实体集名称的实例。
            </summary>
      <param name="entitySetName">
                设置为其已返回的实体名称 <see cref="T:System.Data.Objects.ObjectSet`1" />。
                 该字符串必须由默认容器名称限定，如果 <see cref="P:System.Data.Objects.ObjectContext.DefaultContainerName" /> 上未设置属性 <see cref="T:System.Data.Objects.ObjectContext" />。
              </param>
      <typeparam name="TEntity">
                所请求的实体类型 <see cref="T:System.Data.Objects.ObjectSet`1" />。
              </typeparam>
      <returns>
              新的 <see cref="T:System.Data.Objects.ObjectSet`1" /> 实例。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 从 <paramref name="entitySetName" /> 不符 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 对象的 <see cref="T:System.Data.EntityKey" />。
                
                  - 或 -
                
                  <see cref="P:System.Data.Objects.ObjectContext.DefaultContainerName" /> 上未设置属性 <see cref="T:System.Data.Objects.ObjectContext" /> 作为的一部分未限定的名称和 <paramref name="entitySetName" /> 参数。
                
                  - 或 -
                
                  指定的类型属于多个实体集。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateProxyTypes(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>
              生成可用于与实体框架提供的枚举中每种类型的等效类型。
            </summary>
      <param name="types">
                枚举 <see cref="T:System.Type" /> 表示映射到概念模型的自定义数据类的对象。
              </param>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateQuery``1(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>
              使用指定查询字符串在当前对象上下文中创建 <see cref="T:System.Data.Objects.ObjectQuery`1" />。
            </summary>
      <param name="queryString">
                要执行的查询字符串。
              </param>
      <param name="parameters">
                要传递给查询的参数。
              </param>
      <typeparam name="T">
                返回的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 的实体类型。
              </typeparam>
      <returns>
              具有指定类型的 <see cref="T:System.Data.Objects.ObjectQuery`1" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="queryString" /> 或 <paramref name="parameters" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.DatabaseExists">
      <summary>
              检查数据源上是否存在指定为当前数据源连接中的数据库的数据库。
            </summary>
      <returns>
              <see langword="true" /> 如果数据库存在。
            </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.DeleteDatabase">
      <summary>
              删除指定为当前数据源连接中的数据库的数据库。
            </summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.DeleteObject(System.Object)">
      <summary>
              标记对象以备删除。
            </summary>
      <param name="entity">
                指定待删除实体的对象。
                 该对象可以为任何状态（<see cref="F:System.Data.EntityState.Detached" /> 除外）。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="entity" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="entity" /> 不存在。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Detach(System.Object)">
      <summary>
              从对象上下文移除对象。
            </summary>
      <param name="entity">
                要分离的对象。
                 仅 <paramref name="entity" /> 被删除; 如果有任何相关的对象由同一个跟踪 <see cref="T:System.Data.Objects.ObjectStateManager" />, ，那些将不会自动分离。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="entity" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="entity" /> 不是与此关联 <see cref="T:System.Data.Objects.ObjectContext" /> (例如，是新创建和不与任何上下文关联，或通过某些其他上下文中，获取或已分离)。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.DetectChanges">
      <summary>
              确保 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 中进行跟踪的所有对象的更改同步更改 <see cref="T:System.Data.Objects.ObjectStateManager" />。
            </summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Dispose">
      <summary>
              释放对象上下文使用的资源。
            </summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Dispose(System.Boolean)">
      <summary>
              释放对象上下文使用的资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteFunction(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>
              执行存储的过程或函数，它在数据源中定义并且表示在概念模型中;将丢弃从函数; 返回任何结果并返回由该执行受影响的行数。
            </summary>
      <param name="functionName">
                存储的过程或函数的名称。
                 名称可以包含容器名称，如 &lt;Container Name&gt;.&lt;Function Name&gt;。
                 如果默认容器名称已知，则只需要函数名称。
              </param>
      <param name="parameters">
                一个 <see cref="T:System.Data.Objects.ObjectParameter" /> 对象数组。
              </param>
      <returns>
              受影响的行数。
            </returns>
      <exception cref="T:System.ArgumentException">
                  <paramref name="function" /> 为 null 或空 
                
                  - 或 -
                
                  <paramref name="function" /> 未找到。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  实体读取器不支持此 <paramref name="function" />。
                
                  - 或 -
                
                  读取器上没有的类型不匹配和 <paramref name="function" />。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Objects.MergeOption,System.Data.Objects.ObjectParameter[])">
      <summary>
              执行给定存储的过程或函数，它是在数据源中定义并且表示在概念模型中，使用指定的参数和合并选项。
               返回类型化 <see cref="T:System.Data.Objects.ObjectResult`1" />。
            </summary>
      <param name="functionName">
                存储的过程或函数的名称。
                 名称可以包含容器名称，如 &lt;Container Name&gt;.&lt;Function Name&gt;。
                 如果默认容器名称已知，则只需要函数名称。
              </param>
      <param name="mergeOption">
                要在执行查询时使用的 <see cref="T:System.Data.Objects.MergeOption" />。
              </param>
      <param name="parameters">
                一个 <see cref="T:System.Data.Objects.ObjectParameter" /> 对象数组。
              </param>
      <typeparam name="TElement">
                对数据源执行函数时，将返回 <see cref="T:System.Data.Objects.ObjectResult`1" /> 的实体类型。
                 该类型必须实现 <see cref="T:System.Data.Objects.DataClasses.IEntityWithChangeTracker" />。
              </typeparam>
      <returns>
              存储过程返回的数据的 <see cref="T:System.Data.Objects.ObjectResult`1" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  <paramref name="function" /> 为 null 或空 
                
                  - 或 -
                
                  <paramref name="function" /> 未找到。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  实体读取器不支持此 <paramref name="function" />。
                
                  - 或 -
                
                  读取器上没有的类型不匹配和 <paramref name="function" />。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>
              执行存储的过程或函数，用于在数据源中定义并映射在概念模型中，使用指定的参数。
               返回类型化 <see cref="T:System.Data.Objects.ObjectResult`1" />。
            </summary>
      <param name="functionName">
                存储的过程或函数的名称。
                 名称可以包含容器名称，如 &lt;Container Name&gt;.&lt;Function Name&gt;。
                 如果默认容器名称已知，则只需要函数名称。
              </param>
      <param name="parameters">
                一个 <see cref="T:System.Data.Objects.ObjectParameter" /> 对象数组。
              </param>
      <typeparam name="TElement">
                对数据源执行函数时，将返回 <see cref="T:System.Data.Objects.ObjectResult`1" /> 的实体类型。
                 该类型必须实现 <see cref="T:System.Data.Objects.DataClasses.IEntityWithChangeTracker" />。
              </typeparam>
      <returns>
              存储过程返回的数据的 <see cref="T:System.Data.Objects.ObjectResult`1" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  <paramref name="function" /> 为 null 或空 
                
                  - 或 -
                
                  <paramref name="function" /> 未找到。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  实体读取器不支持此 <paramref name="function" />。
                
                  - 或 -
                
                  读取器上没有的类型不匹配和 <paramref name="function" />。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteStoreCommand(System.String,System.Object[])">
      <summary>
              执行任意命令直接对数据源使用的现有连接。
            </summary>
      <param name="commandText">
                要在数据源的本机语言执行的命令。
              </param>
      <param name="parameters">
                要传递给此命令的参数数组。
              </param>
      <returns>
              受影响的行数。
            </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.Object[])">
      <summary>
              执行对数据源返回类型化结果的一系列直接查询。
            </summary>
      <param name="commandText">
                要在数据源的本机语言执行的命令。
              </param>
      <param name="parameters">
                要传递给此命令的参数数组。
              </param>
      <typeparam name="TResult">
                返回的数据的类型。
              </typeparam>
      <returns>
              类型的对象的枚举 <paramref name="TResult" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.String,System.Data.Objects.MergeOption,System.Object[])">
      <summary>
              直接对数据源执行查询并返回类型化结果的序列。
               指定的实体集和合并选项，以便可以将查询结果作为实体进行跟踪。
            </summary>
      <param name="commandText">
                要在数据源的本机语言执行的命令。
              </param>
      <param name="entitySetName">
                实体集 <paramref name="TResult" /> 类型。
                 如果未提供实体集名称，结果不会进行跟踪。
              </param>
      <param name="mergeOption">
                要在执行查询时使用的 <see cref="T:System.Data.Objects.MergeOption" />。
                 默认值为 <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />。
              </param>
      <param name="parameters">
                要传递给此命令的参数数组。
              </param>
      <typeparam name="TResult">
                返回的数据实体类型。
              </typeparam>
      <returns>
              类型的对象的枚举 <paramref name="TResult" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.GetKnownProxyTypes">
      <summary>
              返回所有现有的代理类型。
            </summary>
      <returns>
              <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的所有现有的代理类型。
            </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.GetObjectByKey(System.Data.EntityKey)">
      <summary>
              返回具有指定实体键的对象。
            </summary>
      <param name="key">
                要查找的对象的键。
              </param>
      <returns>
              一个 <see cref="T:System.Object" />，它是实体类型的实例。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="key" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Data.ObjectNotFoundException">
                  在 <see cref="T:System.Data.Objects.ObjectStateManager" /> 和数据源中都未找到对象。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.GetObjectType(System.Type)">
      <summary>
              返回与指定类型的代理对象关联的 POCO 实体的实体类型。
            </summary>
      <param name="type">
                <see cref="T:System.Type" /> 代理对象。
              </param>
      <returns>
              <see cref="T:System.Type" /> 的关联的 POCO 实体。
            </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.LoadProperty(System.Object,System.String)">
      <summary>
              显式加载与所提供的对象通过指定的导航属性并使用默认合并选项相关的对象。
            </summary>
      <param name="entity">
                为其加载相关的对象的实体。
              </param>
      <param name="navigationProperty">
                返回要加载的相关的对象的导航属性的名称。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="entity" /> 处于 <see cref="F:System.Data.EntityState.Detached" />, ，<see cref="F:System.Data.EntityState.Added," /> 或 <see cref="F:System.Data.EntityState.Deleted" /> 状态，
                
                  - 或 -
                
                  <paramref name="entity" /> 附加到另一个实例的 <see cref="T:System.Data.Objects.ObjectContext" />。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.LoadProperty(System.Object,System.String,System.Data.Objects.MergeOption)">
      <summary>
              显式加载与所提供的对象通过指定的导航属性并使用指定的合并选项的对象。
            </summary>
      <param name="entity">
                为其加载相关的对象的实体。
              </param>
      <param name="navigationProperty">
                返回要加载的相关的对象的导航属性的名称。
              </param>
      <param name="mergeOption">
                <see cref="T:System.Data.Objects.MergeOption" /> 加载相关的对象时要使用的值。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="entity" /> 处于 <see cref="F:System.Data.EntityState.Detached" />, ，<see cref="F:System.Data.EntityState.Added," /> 或 <see cref="F:System.Data.EntityState.Deleted" /> 状态，
                
                  - 或 -
                
                  <paramref name="entity" /> 附加到另一个实例的 <see cref="T:System.Data.Objects.ObjectContext" />。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>
              显式加载通过指定的 LINQ 查询以及使用默认合并选项与所提供的对象相关的对象。
            </summary>
      <param name="entity">
                为其加载相关的对象的源对象。
              </param>
      <param name="selector">
                用于定义要加载的相关的对象的 LINQ 表达式。
              </param>
      <typeparam name="T">
                所提供的对象的类型。
              </typeparam>
      <exception cref="T:System.ArgumentException">
                  <paramref name="selector" /> 未提供有效的输入的参数。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="selector" /> 为 null。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="entity" /> 处于 <see cref="F:System.Data.EntityState.Detached" />, ，<see cref="F:System.Data.EntityState.Added," /> 或 <see cref="F:System.Data.EntityState.Deleted" /> 状态，
                
                  - 或 -
                
                  <paramref name="entity" /> 附加到另一个实例的 <see cref="T:System.Data.Objects.ObjectContext" />。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.Objects.MergeOption)">
      <summary>
              显式加载指定的 LINQ 查询并通过指定的合并选项与所提供的对象相关的对象。
            </summary>
      <param name="entity">
                为其加载相关的对象的源对象。
              </param>
      <param name="selector">
                用于定义要加载的相关的对象的 LINQ 表达式。
              </param>
      <param name="mergeOption">
                <see cref="T:System.Data.Objects.MergeOption" /> 加载相关的对象时要使用的值。
              </param>
      <typeparam name="T">
                所提供的对象的类型。
              </typeparam>
      <exception cref="T:System.ArgumentException">
                  <paramref name="selector" /> 未提供有效的输入的参数。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="selector" /> 为 null。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="entity" /> 处于 <see cref="F:System.Data.EntityState.Detached" />, ，<see cref="F:System.Data.EntityState.Added," /> 或 <see cref="F:System.Data.EntityState.Deleted" /> 状态，
                
                  - 或 -
                
                  <paramref name="entity" /> 附加到另一个实例的 <see cref="T:System.Data.Objects.ObjectContext" />。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Refresh(System.Data.Objects.RefreshMode,System.Collections.IEnumerable)">
      <summary>
              使用数据源中的数据更新对象上下文中的对象集合。
            </summary>
      <param name="refreshMode">
                一个 <see cref="T:System.Data.Objects.RefreshMode" /> 值，指示是否使用数据源中的属性值重写对象上下文中的属性更改。
              </param>
      <param name="collection">
                要刷新的对象的 <see cref="T:System.Collections.IEnumerable" /> 集合。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="collection" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="refreshMode" /> 无效。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="collection" /> 为空。
                
                  - 或 - 
                
                  对象未附加到上下文。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Refresh(System.Data.Objects.RefreshMode,System.Object)">
      <summary>
              使用数据源中的数据更新对象上下文中的对象。
            </summary>
      <param name="refreshMode">
                <see cref="T:System.Data.Objects.RefreshMode" /> 值之一，它指定用于刷新 <see cref="T:System.Data.Objects.ObjectStateManager" /> 的模式。
              </param>
      <param name="entity">
                要刷新的对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="collection" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="refreshMode" /> 无效。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="collection" /> 为空。
                
                  - 或 - 
                
                  对象未附加到上下文。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.SaveChanges">
      <summary>
              将所有更新保存到数据源并重置对象上下文中的更改跟踪。
            </summary>
      <returns>
              在调用 <see cref="F:System.Data.EntityState.Added" /> 时处于 <see cref="F:System.Data.EntityState.Modified" />、<see cref="F:System.Data.EntityState.Deleted" /> 或 <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> 状态的对象数。
            </returns>
      <exception cref="T:System.Data.OptimisticConcurrencyException">
                  在数据源中发生了开放式并发冲突。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.SaveChanges(System.Boolean)">
      <summary>
              将所有更新保存到数据源并可选择重置对象上下文中的更改跟踪。
            </summary>
      <param name="acceptChangesDuringSave">
                客户端事务支持需要此参数。
                 如果 <see langword="true" />, 后, 重置更改跟踪的所有对象 <see cref="M:System.Data.Objects.ObjectContext.SaveChanges(System.Boolean)" /> 完成。
                 如果 <see langword="false" />, ，必须调用 <see cref="M:System.Data.Objects.ObjectContext.AcceptAllChanges" /> 方法之后 <see cref="M:System.Data.Objects.ObjectContext.SaveChanges(System.Boolean)" />。
              </param>
      <returns>
              在调用 <see cref="F:System.Data.EntityState.Added" /> 时处于 <see cref="F:System.Data.EntityState.Modified" />、<see cref="F:System.Data.EntityState.Deleted" /> 或 <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> 状态的对象数。
            </returns>
      <exception cref="T:System.Data.OptimisticConcurrencyException">
                  发生了开放式并发冲突。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.SaveChanges(System.Data.Objects.SaveOptions)">
      <summary>
              将为具有指定的数据源的所有更新都保存 <see cref="T:System.Data.Objects.SaveOptions" />。
            </summary>
      <param name="options">
                一个 <see cref="T:System.Data.Objects.SaveOptions" /> 值，该值确定操作的行为。
              </param>
      <returns>
              在调用 <see cref="F:System.Data.EntityState.Added" /> 时处于 <see cref="F:System.Data.EntityState.Modified" />、<see cref="F:System.Data.EntityState.Deleted" /> 或 <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> 状态的对象数。
            </returns>
      <exception cref="T:System.Data.OptimisticConcurrencyException">
                  发生了开放式并发冲突。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader)">
      <summary>
              将转换 <see cref="T:System.Data.Common.DbDataReader" /> ，其中包含指向请求的实体类型的对象的实体数据行。
            </summary>
      <param name="reader">
                <see cref="T:System.Data.Common.DbDataReader" /> 其中包含要转换为实体对象的实体数据。
              </param>
      <typeparam name="TResult">
                中的数据的实体类型 <see cref="T:System.Data.Common.DbDataReader" />。
              </typeparam>
      <returns>
              类型的对象的枚举 <paramref name="TResult" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  当 <paramref name="reader" /> 是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader,System.String,System.Data.Objects.MergeOption)">
      <summary>
              将转换 <see cref="T:System.Data.Common.DbDataReader" /> ，其中包含对在特定实体集中，并使用指定的合并选项的请求的实体类型的对象的实体数据行。
            </summary>
      <param name="reader">
                <see cref="T:System.Data.Common.DbDataReader" /> 其中包含要转换为实体对象的实体数据。
              </param>
      <param name="entitySetName">
                实体集 <paramref name="TResult" /> 类型。
              </param>
      <param name="mergeOption">
                <see cref="T:System.Data.Objects.MergeOption" /> 为了使用翻译后的对象将添加到对象上下文。
                 默认值为 <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />。
              </param>
      <typeparam name="TResult">
                中的数据的实体类型 <see cref="T:System.Data.Common.DbDataReader" />。
              </typeparam>
      <returns>
              类型的对象的枚举 <paramref name="TResult" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  当 <paramref name="reader" /> 是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  当提供 <paramref name="mergeOption" /> 不是有效 <see cref="T:System.Data.Objects.MergeOption" /> 值。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  当提供 <paramref name="entitySetName" /> 不是有效的实体将被 <paramref name="TResult" /> 类型。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.TryGetObjectByKey(System.Data.EntityKey,System.Object@)">
      <summary>
              返回具有指定实体键的对象。
            </summary>
      <param name="key">
                要查找的对象的键。
              </param>
      <param name="value">
                在此方法返回时包含对象。
              </param>
      <returns>
              <see langword="true" /> 如果成功检索该对象。
              <see langword="false" /> 如果 <paramref name="key" /> 是临时的该连接是 <see langword="null" />, ，或 <paramref name="value" /> 是 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  不兼容的元数据 <paramref name="key" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectParameter.#ctor(System.String,System.Object)">
      <summary>
              使用指定的名称和值初始化 <see cref="T:System.Data.Objects.ObjectParameter" /> 类的新实例。
            </summary>
      <param name="name">
                参数名称。
                 此名称不应包含“@”参数标记（它用在 Entity SQL 语句中），只能为实际名称。
                 表达式的第一个字符必须为字母。
                 表达式中的所有后续字符都必须为字母、数字或下划线 (_) 字符。
              </param>
      <param name="value">
                参数的初始值（及固有类型）。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  如果任一自变量的值为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  如果名称自变量的值无效。
                   参数名称必须以字母开头，并且只能包含字母、数字和下划线。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectParameter.#ctor(System.String,System.Type)">
      <summary>
              使用指定的名称和类型初始化 <see cref="T:System.Data.Objects.ObjectParameter" /> 类的新实例。
            </summary>
      <param name="name">
                参数名称。
                 此名称不应包含“@”参数标记（它用在 Entity SQL 语句中），只能为实际名称。
                 表达式的第一个字符必须为字母。
                 表达式中的所有后续字符都必须为字母、数字或下划线 (_) 字符。
              </param>
      <param name="type">
                参数的公共语言运行库 (CLR) 类型。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  如果任一自变量的值为 null。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  如果名称自变量的值无效。
                   参数名称必须以字母开头，并且只能包含字母、数字和下划线。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.Add(System.Data.Objects.ObjectParameter)">
      <summary>
              将指定的 <see cref="T:System.Data.Objects.ObjectParameter" /> 添加到集合。
            </summary>
      <param name="parameter">
                要添加到集合的参数。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name=" parameter" /> 参数是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="parameter" /> 参数集合中已存在。
                   此行为与允许重复项的大多数集合的行为不同。
                
                  - 或 -
                
                  与同名的另一个参数 <paramref name="parameter" /> 参数集合中已存在。
                   注意，查找是区分大小写的。
                   此行为与大多数集合的行为不同，更类似于 <see cref="T:System.Collections.Generic.Dictionary" /> 的行为。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  一种 <paramref name="parameter" /> 无效。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.Clear">
      <summary>
              删除集合中的所有 <see cref="T:System.Data.Objects.ObjectParameter" /> 实例。
            </summary>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.Contains(System.Data.Objects.ObjectParameter)">
      <summary>
              按引用检查集合中是否存在指定的 <see cref="T:System.Data.Objects.ObjectParameter" />。
            </summary>
      <param name="parameter">
                要在集合中查找的 <see cref="T:System.Data.Objects.ObjectParameter" />。
              </param>
      <returns>
              返回 <see langword="true" /> 参数对象是否在集合中找到; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="parameter" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.Contains(System.String)">
      <summary>
              确定集合中是否存在具有指定名称的 <see cref="T:System.Data.Objects.ObjectParameter" />。
            </summary>
      <param name="name">
                要在集合中查找的参数的名称。
                 此名称不应包含“@”参数标记（它用在 Entity SQL 语句中），只能为实际名称。
              </param>
      <returns>
              返回 <see langword="true" /> 如果具有指定名称的参数是在集合中找到; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="name" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.CopyTo(System.Data.Objects.ObjectParameter[],System.Int32)">
      <summary>
              允许将集合中的参数复制到提供的数组中（从指定索引处的对象开始）。
            </summary>
      <param name="array">
                要将参数复制到其中的数组。
              </param>
      <param name="index">
                数组中开始复制参数的位置的索引。
              </param>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.Remove(System.Data.Objects.ObjectParameter)">
      <summary>
              按引用从集合中移除 <see cref="T:System.Data.Objects.ObjectParameter" /> 的实例（如果集合中存在该实例）。
            </summary>
      <param name="parameter">
                要从集合中移除的对象。
              </param>
      <returns>
              返回 <see langword="true" /> 如果参数对象找到并从集合中移除; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="parameter" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.System#Collections#Generic#IEnumerable{System#Data#Objects#ObjectParameter}#GetEnumerator">
      <summary>
              返回集合上的类型化枚举器。
            </summary>
      <returns>
              类型为 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 的 <see cref="T:System.Data.Objects.ObjectParameter" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              返回集合上的非类型化枚举器。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.IEnumerator" /> 实例。
            </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery.Execute(System.Data.Objects.MergeOption)">
      <summary>
              使用指定合并选项执行非类型化对象查询。
            </summary>
      <param name="mergeOption">
                要在执行查询时使用的 <see cref="T:System.Data.Objects.MergeOption" />。
                 默认值为 <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Objects.ObjectResult`1" />，它包含查询返回的实体对象的集合。
            </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery.GetResultType">
      <summary>
              返回有关查询的结果类型的信息。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 值，它包含有关查询的结果类型的信息。
            </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              返回循环访问集合的枚举数。
            </summary>
      <returns>
              可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery.System#ComponentModel#IListSource#GetList">
      <summary>
              返回 <see cref="T:System.Collections.IList" /> 形式的集合用于数据绑定。
            </summary>
      <returns>
              实体对象的 <see cref="T:System.Collections.IList" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery.ToTraceString">
      <summary>
              返回对数据源执行的命令。
            </summary>
      <returns>
              一个 <see langword="string" /> ，表示对数据源执行查询的命令。
            </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext)">
      <summary>
              以指定的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 命令为初始查询来创建新的 Entity SQL 实例。
            </summary>
      <param name="commandText">
                
                  Entity SQL 查询。
              </param>
      <param name="context">
                对其执行查询的 <see cref="T:System.Data.Objects.ObjectContext" />。
              </param>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext,System.Data.Objects.MergeOption)">
      <summary>
              使用指定的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 命令（作为初始查询）和指定的合并选项创建新的 Entity SQL 实例。
            </summary>
      <param name="commandText">
                
                  Entity SQL 查询。
              </param>
      <param name="context">
                对其执行查询的 <see cref="T:System.Data.Objects.ObjectContext" />。
              </param>
      <param name="mergeOption">
                指定此查询所检索的实体应如何与以前对同一 <see cref="T:System.Data.Objects.ObjectContext" /> 的查询所返回的实体合并。
              </param>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Distinct">
      <summary>
              将查询限制为唯一结果。
            </summary>
      <returns>
              一个新的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 实例，等效于应用了 SELECT DISTINCT 的原始实例。
            </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Except(System.Data.Objects.ObjectQuery{`0})">
      <summary>
              通过根据另一个对象查询的结果排除结果的方式限制查询结果。
            </summary>
      <param name="query">
                一个 <see cref="T:System.Data.Objects.ObjectQuery`1" />，表示要从查询中排除的结果。
              </param>
      <returns>
              新的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 实例，等效于根据指定的 <paramref name="query" /> 应用了 EXCEPT 的原始实例。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="query" /> 参数为 <see langword="null" /> 或空字符串。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Execute(System.Data.Objects.MergeOption)">
      <summary>
              使用指定的合并选项执行对象查询。
            </summary>
      <param name="mergeOption">
                要在执行查询时使用的 <see cref="T:System.Data.Objects.MergeOption" />。
                 默认值为 <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Objects.ObjectResult`1" />，它包含查询返回的实体对象的集合。
            </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.GroupBy(System.String,System.String,System.Data.Objects.ObjectParameter[])">
      <summary>
              按指定的条件对查询结果进行分组。
            </summary>
      <param name="keys">
                作为结果分组依据的键列。
              </param>
      <param name="projection">
                用于定义投影的所选属性的列表。
              </param>
      <param name="parameters">
                此方法中使用的零个或多个参数。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 类型的新 <see cref="T:System.Data.Common.DbDataRecord" /> 实例，等效于应用了 GROUP BY 的原始实例。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="query" /> 参数为 <see langword="null" /> 或空字符串。
                
                  - 或 -
                
                  <paramref name="projection" /> 参数为 <see langword="null" /> 或空字符串。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Include(System.String)">
      <summary>
              指定要包括在查询结果中的相关对象。
            </summary>
      <param name="path">
                要在查询结果中返回的相关对象的列表（以点分隔）。
              </param>
      <returns>
              一个新的 <see cref="T:System.Data.Objects.ObjectQuery`1" />，它具有定义的查询路径。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="path" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="path" /> 为 <see langword="empty" />。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Intersect(System.Data.Objects.ObjectQuery{`0})">
      <summary>
              通过仅包含另一个对象查询中存在的结果的方式限制查询结果。
            </summary>
      <param name="query">
                一个 <see cref="T:System.Data.Objects.ObjectQuery`1" />，表示要包括在查询中的结果。
              </param>
      <returns>
              一个新的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 实例，等效于根据指定的 <paramref name="query" /> 应用了 INTERSECT 的原始实例。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="query" /> 参数为 <see langword="null" /> 或空字符串。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.OfType``1">
      <summary>
              将查询限制为仅包括特定类型的结果。
            </summary>
      <typeparam name="TResultType">
                使用应用筛选器执行查询时，<see cref="T:System.Data.Objects.ObjectResult`1" /> 的类型返回。
              </typeparam>
      <returns>
              一个新的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 实例，等效于应用了 OFTYPE 的原始实例。
            </returns>
      <exception cref="T:System.Data.EntitySqlException">
                  指定的类型无效。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.OrderBy(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>
              按指定条件对查询结果进行排序。
            </summary>
      <param name="keys">
                作为结果排序依据的键列。
              </param>
      <param name="parameters">
                此方法中使用的零个或多个参数。
              </param>
      <returns>
              一个新的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 实例，等效于应用了 ORDER BY 的原始实例。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="keys" /> 或 <paramref name="parameters" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="key" /> 是一个空字符串。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Select(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>
              将查询结果限制为仅包含在指定投影中定义的属性。
            </summary>
      <param name="projection">
                用于定义投影的所选属性的列表。
              </param>
      <param name="parameters">
                此方法中使用的零个或多个参数。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 类型的新 <see cref="T:System.Data.Common.DbDataRecord" /> 实例，等效于应用了 SELECT 的原始实例。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="projection" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="parameters" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="projection" /> 是一个空字符串。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>
              将查询结果限制为仅包含投影中指定的属性。
            </summary>
      <param name="projection">
                投影列表。
              </param>
      <param name="parameters">
                在分析时应在作用域内的一组可选查询参数。
              </param>
      <typeparam name="TResultType">
                由 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 方法返回的 <see cref="M:System.Data.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Objects.ObjectParameter[])" /> 的类型。
              </typeparam>
      <returns>
              一个类型与特定投影兼容的新 <see cref="T:System.Data.Objects.ObjectQuery`1" />。
               返回的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 等效于应用了 SELECT VALUE 的原始实例。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="projection" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="parameters" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="projection" /> 是一个空字符串。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Skip(System.String,System.String,System.Data.Objects.ObjectParameter[])">
      <summary>
              按指定条件对查询结果进行排序并跳过指定数目的结果。
            </summary>
      <param name="keys">
                作为结果排序依据的键列。
              </param>
      <param name="count">
                要跳过的结果数。
                 它可以是常量或参数引用。
              </param>
      <param name="parameters">
                在分析时应在作用域内的一组可选查询参数。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 实例，等效于同时应用了 ORDER BY 和 SKIP 的原始实例。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  任何参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="keys" /> 是一个空字符串。
                
                  - 或 -
                
                  <paramref name="count" /> 是一个空字符串。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
              返回一个循环访问查询结果的枚举器。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 对象，可用于循环访问结果。
            </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Top(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>
              将查询结果限制为指定的项数。
            </summary>
      <param name="count">
                字符串形式的结果项数。
              </param>
      <param name="parameters">
                在分析时应在作用域内的一组可选查询参数。
              </param>
      <returns>
              一个新的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 实例，等效于应用了 TOP 的原始实例。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="count" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="count" /> 是一个空字符串。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Union(System.Data.Objects.ObjectQuery{`0})">
      <summary>
              将查询结果与另一个对象查询的结果进行组合（不包括重复项）。
            </summary>
      <param name="query">
                一个 <see cref="T:System.Data.Objects.ObjectQuery`1" />，表示要添加的结果。
              </param>
      <returns>
              一个新的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 实例，等效于应用了 UNION 来添加指定 <paramref name="query" /> 的结果的原始实例。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="query" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.UnionAll(System.Data.Objects.ObjectQuery{`0})">
      <summary>
              将查询结果与另一个对象查询的结果进行组合（包括所有重复项）。
            </summary>
      <param name="query">
                一个 <see cref="T:System.Data.Objects.ObjectQuery`1" />，表示要添加的结果。
              </param>
      <returns>
              一个新的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 实例，等效于应用了 UNION ALL 来添加指定 <paramref name="query" /> 的结果的原始实例。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="query" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Where(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>
              将查询限制为包含与指定筛选条件匹配的结果。
            </summary>
      <param name="predicate">
                筛选谓词。
              </param>
      <param name="parameters">
                此方法中使用的零个或多个参数。
              </param>
      <returns>
              一个新的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 实例，等效于应用了 WHERE 的原始实例。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="predicate" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="parameters" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="predicate" /> 是一个空字符串。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectResult.Dispose">
      <summary>
              执行与释放 (free)、释放 (release) 或重置资源关联的任务。
            </summary>
    </member>
    <member name="M:System.Data.Objects.ObjectResult.GetNextResult``1">
      <summary>
              获取存储过程的下一个结果集。
            </summary>
      <typeparam name="TElement">
                元素的类型。
              </typeparam>
      <returns>
              枚举的值的下一个结果 ObjectResult 设置。
               为 null，如果没有更多，或者如果 ObjectResult 不是存储的过程调用的结果。
            </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectResult.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              返回一个循环访问查询结果的枚举器。
            </summary>
      <returns>
              一个循环访问查询结果的枚举器。
            </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectResult.System#ComponentModel#IListSource#GetList">
      <summary>
              以数据绑定所用的格式返回结果。
            </summary>
      <returns>
              实体对象的 <see cref="T:System.Collections.IList" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectResult`1.Dispose">
      <summary>
              执行与释放 (free)、释放 (release) 或重置资源关联的任务。
            </summary>
    </member>
    <member name="M:System.Data.Objects.ObjectResult`1.GetEnumerator">
      <summary>
              返回一个循环访问查询结果的枚举器。
            </summary>
      <returns>
              一个循环访问查询结果的枚举器。
            </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.AddObject(`0)">
      <summary>
              将对象添加到对象上下文中的当前实体集。
            </summary>
      <param name="entity">
                要添加的对象。
              </param>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.ApplyCurrentValues(`0)">
      <summary>
              将标量值从提供的对象复制到 <see cref="T:System.Data.Objects.ObjectContext" /> 中具有相同键的对象中。
            </summary>
      <param name="currentEntity">
                其属性更新将应用于原始对象的已分离对象。
                 实体键 <paramref name="currentEntity" /> 必须匹配 <see cref="P:System.Data.Objects.ObjectStateEntry.EntityKey" /> 属性中的条目 <see cref="T:System.Data.Objects.ObjectContext" />。
              </param>
      <returns>
              更新后的对象。
            </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.ApplyOriginalValues(`0)">
      <summary>
              集 <see cref="P:System.Data.Objects.ObjectStateEntry.OriginalValues" /> 属性 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 以匹配提供的对象的属性值。
            </summary>
      <param name="originalEntity">
                其属性更新将应用于原始对象的已分离对象。
                 实体键 <paramref name="originalEntity" /> 必须匹配 <see cref="P:System.Data.Objects.ObjectStateEntry.EntityKey" /> 属性中的条目 <see cref="T:System.Data.Objects.ObjectContext" />。
              </param>
      <returns>
              更新后的对象。
            </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.Attach(`0)">
      <summary>
              将对象或对象图附加到对象上下文中的当前实体集。
            </summary>
      <param name="entity">
                要附加的对象。
              </param>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.CreateObject">
      <summary>
              创建新的实体类型对象。
            </summary>
      <returns>
              新的实体类型对象或对应于实体类型的代理类型的实例。
            </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.CreateObject``1">
      <summary>
              创建指定类型的实例。
            </summary>
      <typeparam name="T">
                要返回对象的类型。
              </typeparam>
      <returns>
              所请求类型的实例 <paramref name="T" />, ，或实例的类型相对应的代理类型 <paramref name="T" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.DeleteObject(`0)">
      <summary>
              标记对象以备删除。
            </summary>
      <param name="entity">
                一个表示要删除的实体的对象。
                 该对象可以为任何状态（<see cref="F:System.Data.EntityState.Detached" /> 除外）。
              </param>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.Detach(`0)">
      <summary>
              从对象上下文移除对象。
            </summary>
      <param name="entity">
                要分离的对象。
                 仅 <paramref name="entity" /> 被删除; 如果有任何相关的对象由同一个跟踪 <see cref="T:System.Data.Objects.ObjectStateManager" />, ，那些将不会自动分离。
              </param>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.AcceptChanges">
      <summary>
              接受当前值作为原始值。
            </summary>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.ApplyCurrentValues(System.Object)">
      <summary>
              设置要与提供的对象的属性值匹配的项的当前值。
            </summary>
      <param name="currentEntity">
                已更新值应用于对象的已分离的对象。
                <paramref name="currentEntity" /> 也可以是对象的实体键。
              </param>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.ApplyOriginalValues(System.Object)">
      <summary>
              设置要与提供的对象的属性值匹配的项的原始值。
            </summary>
      <param name="originalEntity">
                具有要应用于对象的原始值的已分离的对象。
                <paramref name="originalEntity" /> 也可以是对象的实体键。
              </param>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.ChangeState(System.Data.EntityState)">
      <summary>
              将项的状态更改为指定 <see cref="T:System.Data.EntityState" /> 值。
            </summary>
      <param name="state">
                <see cref="T:System.Data.EntityState" /> 要为设置值 <see cref="P:System.Data.Objects.ObjectStateEntry.State" /> 的项的属性。
              </param>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.Delete">
      <summary>
              将实体标记为已删除。
            </summary>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.GetModifiedProperties">
      <summary>
              返回自上次以来已更改的对象的属性的名称 <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> 调用。
            </summary>
      <returns>
              <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的名称作为字符串的集合。
            </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.GetUpdatableOriginalValues">
      <summary>
              获取与此相关联的对象的原始值的更新版本 <see cref="T:System.Data.Objects.ObjectStateEntry" />。
            </summary>
      <returns>
              可更新原始数据的值的对象。
            </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.IsPropertyChanged(System.String)">
      <summary>
              使用 DetectChanges 来确定具有给定名称的属性的当前值是从其原始值不同。
               请注意，这可能是不同于其标记为已修改，因为尚未更改的属性仍将标记为已修改的属性。
            </summary>
      <param name="propertyName">
                属性的名称。
              </param>
      <returns>
              <see langword="true" /> 如果该属性已更改;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.RejectPropertyChanges(System.String)">
      <summary>
              拒绝对具有给定名称的属性，因为该属性是上一次加载、 附加、 保存，或更改已被接受的任何更改。
               存储的属性的原始值，将不再标记属性，为已修改。
            </summary>
      <param name="propertyName">
                要更改的属性的名称。
              </param>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.SetModified">
      <summary>
              设置状态的对象或关系来修改。
            </summary>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.SetModifiedProperty(System.String)">
      <summary>
              将指定属性标记为已修改。
            </summary>
      <param name="propertyName">
                属性的名称。
              </param>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.System#Data#Objects#DataClasses#IEntityChangeTracker#EntityComplexMemberChanged(System.String,System.Object,System.String)">
      <summary>
              通知状态管理器，复杂属性已更改。
            </summary>
      <param name="entityMemberName">
                要更改的顶级对象属性的名称。
              </param>
      <param name="complexObject">
                包含要更改的属性的复杂对象。
              </param>
      <param name="complexObjectMemberName">
                复杂对象上要更改的属性的名称。
              </param>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.System#Data#Objects#DataClasses#IEntityChangeTracker#EntityComplexMemberChanging(System.String,System.Object,System.String)">
      <summary>
              通知状态管理器，复杂属性有挂起的更改。
            </summary>
      <param name="entityMemberName">
                复杂属性的名称。
              </param>
      <param name="complexObject">
                包含要更改的属性的复杂对象。
              </param>
      <param name="complexObjectMemberName">
                复杂对象上要更改的属性的名称。
              </param>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.System#Data#Objects#DataClasses#IEntityChangeTracker#EntityMemberChanged(System.String)">
      <summary>
              通知状态管理器，属性已更改。
            </summary>
      <param name="entityMemberName">
                已更改的实体属性的名称。
              </param>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.System#Data#Objects#DataClasses#IEntityChangeTracker#EntityMemberChanging(System.String)">
      <summary>
              通知状态管理器，属性有挂起的更改。
            </summary>
      <param name="entityMemberName">
                要更改的实体属性的名称。
              </param>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.#ctor(System.Data.Metadata.Edm.MetadataWorkspace)">
      <summary>
              初始化 <see cref="T:System.Data.Objects.ObjectStateManager" /> 类的新实例。
            </summary>
      <param name="metadataWorkspace">
                提供映射和元数据信息的 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />。
              </param>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.ChangeObjectState(System.Object,System.Data.EntityState)">
      <summary>
              将特定对象的 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 状态更改为指定的 <paramref name="entityState" />。
            </summary>
      <param name="entity">
                必须更改状态的对象。
              </param>
      <param name="entityState">
                对象的新状态。
              </param>
      <returns>
              所提供的 <paramref name="entity" /> 的 <see cref="T:System.Data.Objects.ObjectStateEntry" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  当 <paramref name="entity" /> 是 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  当对象未分离，并在状态管理器中没有条目。
                
                  - 或 -
                
                  当您尝试的状态更改为 <see cref="F:System.Data.EntityState.Detached" /> 从任何其他 <see cref="T:System.Data.EntityState." />
                
                  - 或 - 
                
                  当 <paramref name="state" /> 不是有效 <see cref="T:System.Data.EntityState" /> 值。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.ChangeRelationshipState(System.Object,System.Object,System.String,System.Data.EntityState)">
      <summary>
              更改两个实体对象之间的指定关系的状态，根据两个相关对象和导航属性的名称来指定关系。
            </summary>
      <param name="sourceEntity">
                位于关系一端的对象实例或源实体的 <see cref="T:System.Data.EntityKey" />。
              </param>
      <param name="targetEntity">
                位于关系另一端的对象实例或目标实体的 <see cref="T:System.Data.EntityKey" />。
              </param>
      <param name="navigationProperty">
                返回指定 <paramref name="target" /> 的 <paramref name="source" /> 的导航属性名称。
              </param>
      <param name="relationshipState">
                请求的所指定关系的 <see cref="T:System.Data.EntityState" />。
              </param>
      <returns>
              已更改的关系的 <see cref="T:System.Data.Objects.ObjectStateEntry" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  当 <paramref name="source" /> 或 <paramref name="target" /> 是 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  在尝试更改关系的状态为状态以外时 <see cref="F:System.Data.EntityState.Deleted" /> 或 <see cref="F:System.Data.EntityState.Detached" /> 时既 <paramref name="source" /> 或 <paramref name="target" /> 处于 <see cref="F:System.Data.EntityState.Deleted" /> 状态。
                
                  - 或 - 
                
                  当您尝试更改关系的状态为状态以外 <see cref="F:System.Data.EntityState.Added" /> 或 <see cref="F:System.Data.EntityState.Detached" /> 时既 <paramref name="source" /> 或 <paramref name="target" /> 处于 <see cref="F:System.Data.EntityState.Added" /> 状态。
                
                  - 或 -
                
                  当 <paramref name="state" /> 不是有效 <see cref="T:System.Data.EntityState" /> 值。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.ChangeRelationshipState(System.Object,System.Object,System.String,System.String,System.Data.EntityState)">
      <summary>
              更改两个实体对象之间的指定关系的状态，根据两个相关对象和关系属性来指定关系。
            </summary>
      <param name="sourceEntity">
                位于关系一端的对象实例或源实体的 <see cref="T:System.Data.EntityKey" />。
              </param>
      <param name="targetEntity">
                位于关系另一端的对象实例或目标实体的 <see cref="T:System.Data.EntityKey" />。
              </param>
      <param name="relationshipName">
                关系的名称。
              </param>
      <param name="targetRoleName">
                关系的 <paramref name="target" /> 端的角色名称。
              </param>
      <param name="relationshipState">
                请求的所指定关系的 <see cref="T:System.Data.EntityState" />。
              </param>
      <returns>
              已更改的关系的 <see cref="T:System.Data.Objects.ObjectStateEntry" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  当 <paramref name="source" /> 或 <paramref name="target" /> 是 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  当您尝试更改关系的状态为状态以外 <see cref="F:System.Data.EntityState.Deleted" /> 或 <see cref="F:System.Data.EntityState.Detached" /> 时既 <paramref name="source" /> 或 <paramref name="target" /> 处于 <see cref="F:System.Data.EntityState.Deleted" /> 状态。
                
                  - 或 - 
                
                  当您尝试更改关系的状态为状态以外 <see cref="F:System.Data.EntityState.Added" /> 或 <see cref="F:System.Data.EntityState.Detached" /> 时既 <paramref name="source" /> 或 <paramref name="target" /> 处于 <see cref="F:System.Data.EntityState.Added" /> 状态。
                
                  - 或 -
                
                  当 <paramref name="state" /> 不是有效 <see cref="T:System.Data.EntityState" /> 值。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.ChangeRelationshipState``1(``0,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.EntityState)">
      <summary>
              更改两个实体对象之间的指定关系的状态，根据两个相关对象和用于定义导航属性的 LINQ 表达式来指定关系。
            </summary>
      <param name="sourceEntity">
                位于关系一端的对象实例或源实体的 <see cref="T:System.Data.EntityKey" />。
              </param>
      <param name="targetEntity">
                位于关系另一端的对象实例或目标实体的 <see cref="T:System.Data.EntityKey" />。
              </param>
      <param name="navigationPropertySelector">
                一个 LINQ 表示式，用于选择返回指定 <paramref name="source" /> 的 <paramref name="target" /> 的导航属性。
              </param>
      <param name="relationshipState">
                请求的所指定关系的 <see cref="T:System.Data.EntityState" />。
              </param>
      <typeparam name="TEntity">
                <paramref name="source" /> 对象的实体类型。
              </typeparam>
      <returns>
              已更改的关系的 <see cref="T:System.Data.Objects.ObjectStateEntry" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  当 <paramref name="source" />, ，<paramref name="target" />, ，或 <paramref name="selector" /> 是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="selector" /> 格式不正确或者不能返回导航属性。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  当您尝试更改关系的状态为状态以外 <see cref="F:System.Data.EntityState.Deleted" /> 或 <see cref="F:System.Data.EntityState.Detached" /> 时既 <paramref name="source" /> 或 <paramref name="target" /> 处于 <see cref="F:System.Data.EntityState.Deleted" /> 状态。
                
                  - 或 - 
                
                  当您尝试更改关系的状态为状态以外 <see cref="F:System.Data.EntityState.Added" /> 或 <see cref="F:System.Data.EntityState.Detached" /> 时既 <paramref name="source" /> 或 <paramref name="target" /> 处于 <see cref="F:System.Data.EntityState.Added" /> 状态。
                
                  - 或 -
                
                  当 <paramref name="state" /> 不是有效 <see cref="T:System.Data.EntityState" /> 值。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.GetObjectStateEntries(System.Data.EntityState)">
      <summary>
              返回具有给定状态的对象或关系的 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 对象的集合。
            </summary>
      <param name="state">
                用于筛选返回的 <see cref="T:System.Data.EntityState" /> 对象的 <see cref="T:System.Data.Objects.ObjectStateEntry" />。
              </param>
      <returns>
              具有给定 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 的 <see cref="T:System.Data.EntityState" /> 对象的集合。
            </returns>
      <exception cref="T:System.ArgumentException">
                  当 <paramref name="state" /> 是 <see cref="F:System.Data.EntityState.Detached" />。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.GetObjectStateEntry(System.Data.EntityKey)">
      <summary>
              返回具有指定键的对象或关系项的 <see cref="T:System.Data.Objects.ObjectStateEntry" />。
            </summary>
      <param name="key">
                <see cref="T:System.Data.EntityKey" />。
              </param>
      <returns>
              对应于给定 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 的 <see cref="T:System.Data.EntityKey" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  当 <paramref name="key" /> 是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  当指定 <paramref name="key" /> 不能在状态管理器中找到。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="T:System.Data.EntityKey" /> 中不存在具有指定 <see cref="T:System.Data.Objects.ObjectStateManager" /> 的实体。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.GetObjectStateEntry(System.Object)">
      <summary>
              返回指定对象的 <see cref="T:System.Data.Objects.ObjectStateEntry" />。
            </summary>
      <param name="entity">
                检索到的 <see cref="T:System.Object" /> 所属的 <see cref="T:System.Data.Objects.ObjectStateEntry" />。
              </param>
      <returns>
              对应于给定 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 的 <see cref="T:System.Object" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="T:System.Object" /> 中不存在具有指定 <see cref="T:System.Data.Objects.ObjectStateManager" /> 的实体。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.GetRelationshipManager(System.Object)">
      <summary>
              返回指定对象所使用的 <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />。
            </summary>
      <param name="entity">
                要为其返回 <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> 的对象。
              </param>
      <returns>
              所指定对象的 <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  当 <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> 不能返回为指定 <paramref name="entity" />。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.TryGetObjectStateEntry(System.Data.EntityKey,System.Data.Objects.ObjectStateEntry@)">
      <summary>
              尝试检索具有指定 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 的对象或关系的对应 <see cref="T:System.Data.EntityKey" />。
            </summary>
      <param name="key">
                给定的 <see cref="T:System.Data.EntityKey" />。
              </param>
      <param name="entry">
                此方法返回时，包含给定 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 的 <see cref="T:System.Data.EntityKey" />。此参数传递时未经初始化。
              </param>
      <returns>
              一个布尔值，如果对给定的 <see cref="T:System.Data.EntityKey" /> 具有对应的 <see cref="T:System.Data.Objects.ObjectStateEntry" />，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  一个 <see langword="null" /> (<see langword="Nothing" /> 在 Visual Basic 中) 为提供值 <paramref name="key" />。
                </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.TryGetObjectStateEntry(System.Object,System.Data.Objects.ObjectStateEntry@)">
      <summary>
              尝试检索指定的 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 的对应 <see cref="T:System.Object" />。
            </summary>
      <param name="entity">
                检索到的 <see cref="T:System.Object" /> 所属的 <see cref="T:System.Data.Objects.ObjectStateEntry" />。
              </param>
      <param name="entry">
                此方法返回时，包含给定 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 的 <see cref="T:System.Data.EntityKey" />。此参数传递时未经初始化。
              </param>
      <returns>
              一个布尔值，如果对给定的对象具有对应的 <see cref="T:System.Data.Objects.ObjectStateEntry" />，则该值为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.TryGetRelationshipManager(System.Object,System.Data.Objects.DataClasses.RelationshipManager@)">
      <summary>
              返回指定对象所使用的 <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />。
            </summary>
      <param name="entity">
                要为其返回 <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> 的对象。
              </param>
      <param name="relationshipManager">
                此方法返回时，将包含 <paramref name="entity" /> 的 <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />。
              </param>
      <returns>
              如果为所提供的 <paramref name="entity" /> 返回 <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> 实例，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.ProxyDataContractResolver.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Objects.ProxyDataContractResolver" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Objects.ProxyDataContractResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)">
      <summary>
              反序列化过程中，将任意 <see langword="xsi:type" /> 信息映射到 persistence-ignorant 对象的实际类型。
            </summary>
      <param name="typeName">
                要映射的 <see langword="xsi:type" /> 信息。
              </param>
      <param name="typeNamespace">
                <see langword="xsi:type" /> 的命名空间。
              </param>
      <param name="declaredType">
                声明的类型。
              </param>
      <param name="knownTypeResolver">
                <see cref="T:System.Data.Objects.ProxyDataContractResolver" /> 的一个实例。
              </param>
      <returns>
              返回将 <see langword="xsi:type" /> 映射到的类型。
               如果未找到与 <see langword="xsi:type" /> 匹配的已知类型，则返回 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.ProxyDataContractResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)">
      <summary>
              序列化期间，将映射到的实际类型 <see langword="xsi:type" /> 信息。
            </summary>
      <param name="dataContractType">
                持久性未知对象的实际类型。
              </param>
      <param name="declaredType">
                声明的类型。
              </param>
      <param name="knownTypeResolver">
                <see cref="T:System.Data.Objects.ProxyDataContractResolver" /> 的一个实例。
              </param>
      <param name="typeName">
                此方法返回时，包含一份 <see langword="xsi:type" /> 声明。
              </param>
      <param name="typeNamespace">
                此方法返回时，包含使用的命名空间的列表。
              </param>
      <returns>
              <see langword="true" /> 如果已解析该类型;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Acos(System.Nullable{System.Decimal})">
      <summary>
              数学函数，返回的角度以弧度表示，其余弦是指定的数字值。
               此角度称为反余弦值。
            </summary>
      <param name="arg1">
                角度的余弦值。
              </param>
      <returns>
              以弧度计量的角度。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Acos(System.Nullable{System.Double})">
      <summary>
              数学函数，返回的角度以弧度表示，其余弦是指定的数字值。
               此角度称为反余弦值。
            </summary>
      <param name="arg1">
                角度的余弦值。
              </param>
      <returns>
              角度 （以弧度为单位，由输入的余弦值定义）。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Ascii(System.String)">
      <summary>
              返回字符表达式的最左侧字符的 ASCII 代码值。
            </summary>
      <param name="arg">
                一个有效的字符串。
              </param>
      <returns>
              在输入字符串中的第一个字符的 ASCII 代码。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Asin(System.Nullable{System.Decimal})">
      <summary>
              数学函数，返回的角度以弧度表示，其正弦是指定的数字值。
               此角度称为反正弦值。
            </summary>
      <param name="arg">
                角度的正弦值。
              </param>
      <returns>
              以弧度计量的角度。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Asin(System.Nullable{System.Double})">
      <summary>
              数学函数，返回的角度以弧度表示，其正弦是指定的数字值。
               此角度称为反正弦值。
            </summary>
      <param name="arg">
                角度的正弦值。
              </param>
      <returns>
              以弧度计量的角度。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Atan(System.Nullable{System.Decimal})">
      <summary>
              数学函数，返回的角度以弧度表示，其正切为指定的数字值。
               此角度称为反正切值。
            </summary>
      <param name="arg">
                角度的正切值。
              </param>
      <returns>
              以弧度计量的角度。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Atan(System.Nullable{System.Double})">
      <summary>
              数学函数，返回的角度以弧度表示，其正切为指定的数字值。
               此角度称为反正切值。
            </summary>
      <param name="arg">
                角度的正切值。
              </param>
      <returns>
              以弧度计量的角度。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Atan2(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>
              其中返回以弧度表示，位于正 x 轴和原点到点 （x，y） 的射线之间的正角 x 和 y 是两个指定的数字值。
               第一个参数传递给函数的 y 值，第二个参数是 x 值。
            </summary>
      <param name="arg1">
                点的 y 坐标。
              </param>
      <param name="arg2">
                点的 x 坐标。
              </param>
      <returns>
              以弧度计量的角度。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Atan2(System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>
              其中返回以弧度表示，位于正 x 轴和原点到点 （x，y） 的射线之间的正角 x 和 y 是两个指定的数字值。
               第一个参数传递给函数的 y 值，第二个参数是 x 值。
            </summary>
      <param name="arg1">
                点的 y 坐标。
              </param>
      <param name="arg2">
                点的 x 坐标。
              </param>
      <returns>
              以弧度计量的角度。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Char(System.Nullable{System.Int32})">
      <summary>
              返回指定的整数 ASCII 值相对应的字符。
            </summary>
      <param name="arg">
                ASCII 码。
              </param>
      <returns>
              为指定的 ASCII 值相对应的字符。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.Byte[],System.Byte[])">
      <summary>
              返回一个表达式中找到另一个表达式中的起始位置。
            </summary>
      <param name="toSearch">
                要搜索的字符串表达式。
              </param>
      <param name="target">
                要找的字符串表达式。
              </param>
      <returns>
              起始位置 <paramref name="target" /> 如果在找到 <paramref name="toSearch" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.Byte[],System.Byte[],System.Nullable{System.Int32})">
      <summary>
              返回一个表达式中找到另一个表达式中的起始位置。
            </summary>
      <param name="toSearch">
                要搜索的字符串表达式。
              </param>
      <param name="target">
                要找的字符串表达式。
              </param>
      <param name="startLocation">
                中的字符位置 <paramref name="toSearch" /> 搜索开始处。
              </param>
      <returns>
              起始位置 <paramref name="target" /> 如果在找到 <paramref name="toSearch" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.Byte[],System.Byte[],System.Nullable{System.Int64})">
      <summary>
              返回一个表达式中找到另一个表达式中的起始位置。
            </summary>
      <param name="toSearch">
                要搜索的字符串表达式。
              </param>
      <param name="target">
                要找的字符串表达式。
              </param>
      <param name="startLocation">
                中的字符位置 <paramref name="toSearch" /> 搜索开始处。
              </param>
      <returns>
              起始位置 <paramref name="target" /> 如果在找到 <paramref name="toSearch" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.String,System.String)">
      <summary>
              返回一个表达式中找到另一个表达式中的起始位置。
            </summary>
      <param name="toSearch">
                要搜索的字符串表达式。
              </param>
      <param name="target">
                要找的字符串表达式。
              </param>
      <returns>
              起始位置 <paramref name="target" /> 如果在找到 <paramref name="toSearch" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.String,System.String,System.Nullable{System.Int32})">
      <summary>
              返回一个表达式中找到另一个表达式中的起始位置。
            </summary>
      <param name="toSearch">
                要搜索的字符串表达式。
              </param>
      <param name="target">
                要找的字符串表达式。
              </param>
      <param name="startLocation">
                中的字符位置 <paramref name="toSearch" /> 搜索开始处。
              </param>
      <returns>
              起始位置 <paramref name="target" /> 如果在找到 <paramref name="toSearch" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.String,System.String,System.Nullable{System.Int64})">
      <summary>
              返回一个表达式中找到另一个表达式中的起始位置。
            </summary>
      <param name="toSearch">
                要搜索的字符串表达式。
              </param>
      <param name="target">
                要找的字符串表达式。
              </param>
      <param name="startLocation">
                中的字符位置 <paramref name="toSearch" /> 搜索开始处。
              </param>
      <returns>
              一个 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.Int64" /> 该值的起始位置 <paramref name="target" /> 如果在找到 <paramref name="toSearch" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Byte[])">
      <summary>
              返回基于输入参数计算出的校验和值。
            </summary>
      <param name="arg1">
                为其计算校验和中的字符数组。
              </param>
      <returns>
              基于输入的值计算出的校验和。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Byte[],System.Byte[])">
      <summary>
              返回基于输入参数计算出的校验和值。
            </summary>
      <param name="arg1">
                为其计算校验和中的字符数组。
              </param>
      <param name="arg2">
                为其计算校验和中的字符数组。
              </param>
      <returns>
              基于输入的值计算出的校验和。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Byte[],System.Byte[],System.Byte[])">
      <summary>
              返回基于输入参数计算出的校验和值。
            </summary>
      <param name="arg1">
                为其计算校验和中的字符数组。
              </param>
      <param name="arg2">
                为其计算校验和中的字符数组。
              </param>
      <param name="arg3">
                为其计算校验和中的字符数组。
              </param>
      <returns>
              基于输入的值计算出的校验和。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Boolean})">
      <summary>
              返回基于输入参数计算出的校验和值。
            </summary>
      <param name="arg1">
                为其计算校验和值。
              </param>
      <returns>
              基于输入的值计算出的校验和。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
      <summary>
              返回基于输入参数计算出的校验和值。
            </summary>
      <param name="arg1">
                为其计算校验和值。
              </param>
      <param name="arg2">
                为其计算校验和值。
              </param>
      <returns>
              基于输入的值计算出的校验和。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
      <summary>
              返回基于输入参数计算出的校验和值。
            </summary>
      <param name="arg1">
                为其计算校验和值。
              </param>
      <param name="arg2">
                为其计算校验和值。
              </param>
      <param name="arg3">
                为其计算校验和值。
              </param>
      <returns>
              基于输入的值计算出的校验和。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTime})">
      <summary>
              返回基于输入参数计算出的校验和值。
            </summary>
      <param name="arg1">
                为其计算校验和值。
              </param>
      <returns>
              基于输入的值计算出的校验和。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
              返回基于输入参数计算出的校验和值。
            </summary>
      <param name="arg1">
                为其计算校验和值。
              </param>
      <param name="arg2">
                为其计算校验和值。
              </param>
      <returns>
              基于输入的值计算出的校验和。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
              返回基于输入参数计算出的校验和值。
            </summary>
      <param name="arg1">
                为其计算校验和值。
              </param>
      <param name="arg2">
                为其计算校验和值。
              </param>
      <param name="arg3">
                为其计算校验和值。
              </param>
      <returns>
              基于输入的值计算出的校验和。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTimeOffset})">
      <summary>
              返回基于输入参数计算出的校验和值。
            </summary>
      <param name="arg1">
                为其计算校验和值。
              </param>
      <returns>
              基于输入的值计算出的校验和。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>
              返回基于输入参数计算出的校验和值。
            </summary>
      <param name="arg1">
                为其计算校验和值。
              </param>
      <param name="arg2">
                为其计算校验和值。
              </param>
      <returns>
              基于输入的值计算出的校验和。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>
              返回基于输入参数计算出的校验和值。
            </summary>
      <param name="arg1">
                为其计算校验和值。
              </param>
      <param name="arg2">
                为其计算校验和值。
              </param>
      <param name="arg3">
                为其计算校验和值。
              </param>
      <returns>
              基于输入的值计算出的校验和。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Decimal})">
      <summary>
              返回基于输入参数计算出的校验和值。
            </summary>
      <param name="arg1">
                为其计算校验和值。
              </param>
      <returns>
              基于输入的值计算出的校验和。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>
              返回基于输入参数计算出的校验和值。
            </summary>
      <param name="arg1">
                为其计算校验和值。
              </param>
      <param name="arg2">
                为其计算校验和值。
              </param>
      <returns>
              基于输入的值计算出的校验和。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>
              返回基于输入参数计算出的校验和值。
            </summary>
      <param name="arg1">
                为其计算校验和值。
              </param>
      <param name="arg2">
                为其计算校验和值。
              </param>
      <param name="arg3">
                为其计算校验和值。
              </param>
      <returns>
              基于输入的值计算出的校验和。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Double})">
      <summary>
              返回基于输入参数计算出的校验和值。
            </summary>
      <param name="arg1">
                为其计算校验和值。
              </param>
      <returns>
              基于输入的值计算出的校验和。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>
              返回基于输入参数计算出的校验和值。
            </summary>
      <param name="arg1">
                为其计算校验和值。
              </param>
      <param name="arg2">
                为其计算校验和值。
              </param>
      <returns>
              基于输入的值计算出的校验和。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>
              返回基于输入参数计算出的校验和值。
            </summary>
      <param name="arg1">
                为其计算校验和值。
              </param>
      <param name="arg2">
                为其计算校验和值。
              </param>
      <param name="arg3">
                为其计算校验和值。
              </param>
      <returns>
              基于输入的值计算出的校验和。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Guid})">
      <summary>
              返回基于输入参数计算出的校验和值。
            </summary>
      <param name="arg1">
                为其计算校验和值。
              </param>
      <returns>
              基于输入的值计算出的校验和。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Guid},System.Nullable{System.Guid})">
      <summary>
              返回基于输入参数计算出的校验和值。
            </summary>
      <param name="arg1">
                为其计算校验和值。
              </param>
      <param name="arg2">
                为其计算校验和值。
              </param>
      <returns>
              基于输入的值计算出的校验和。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid})">
      <summary>
              返回基于输入参数计算出的校验和值。
            </summary>
      <param name="arg1">
                为其计算校验和值。
              </param>
      <param name="arg2">
                为其计算校验和值。
              </param>
      <param name="arg3">
                为其计算校验和值。
              </param>
      <returns>
              基于输入的值计算出的校验和。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.TimeSpan})">
      <summary>
              返回基于输入参数计算出的校验和值。
            </summary>
      <param name="arg1">
                为其计算校验和值。
              </param>
      <returns>
              基于输入的值计算出的校验和。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>
              返回基于输入参数计算出的校验和值。
            </summary>
      <param name="arg1">
                为其计算校验和值。
              </param>
      <param name="arg2">
                为其计算校验和值。
              </param>
      <returns>
              基于输入的值计算出的校验和。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>
              返回基于输入参数计算出的校验和值。
            </summary>
      <param name="arg1">
                为其计算校验和值。
              </param>
      <param name="arg2">
                为其计算校验和值。
              </param>
      <param name="arg3">
                为其计算校验和值。
              </param>
      <returns>
              基于输入的值计算出的校验和。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.String)">
      <summary>
              返回基于输入参数计算出的校验和值。
            </summary>
      <param name="arg1">
                为其计算校验和值。
              </param>
      <returns>
              基于输入的值计算出的校验和。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.String,System.String)">
      <summary>
              返回基于输入参数计算出的校验和值。
            </summary>
      <param name="arg1">
                为其计算校验和值。
              </param>
      <param name="arg2">
                为其计算校验和值。
              </param>
      <returns>
              基于输入的值计算出的校验和。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.String,System.String,System.String)">
      <summary>
              返回基于输入参数计算出的校验和值。
            </summary>
      <param name="arg1">
                为其计算校验和值。
              </param>
      <param name="arg2">
                为其计算校验和值。
              </param>
      <param name="arg3">
                为其计算校验和值。
              </param>
      <returns>
              基于输入的值计算出的校验和。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.ChecksumAggregate(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
              返回集合中各值的校验和。
               空值将被忽略。
            </summary>
      <param name="arg">
                对其计算出的校验和的值的集合。
              </param>
      <returns>
              校验和计算从输入集合。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.ChecksumAggregate(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>
              返回集合中各值的校验和。
               空值将被忽略。
            </summary>
      <param name="arg">
                对其计算出的校验和的值的集合。
              </param>
      <returns>
              校验和计算从输入集合。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Cos(System.Nullable{System.Decimal})">
      <summary>
              以弧度为单位，指定表达式中返回指定角度的三角余弦。
            </summary>
      <param name="arg">
                以弧度计量的角度。
              </param>
      <returns>
              指定角度的三角余弦值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Cos(System.Nullable{System.Double})">
      <summary>
              以弧度为单位，指定表达式中返回指定角度的三角余弦。
            </summary>
      <param name="arg">
                以弧度计量的角度。
              </param>
      <returns>
              指定角度的三角余弦值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Cot(System.Nullable{System.Decimal})">
      <summary>
              数学函数，返回以弧度表示的指定角度的三角余切值。
            </summary>
      <param name="arg">
                以弧度计量的角度。
              </param>
      <returns>
              指定角度的三角余切。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Cot(System.Nullable{System.Double})">
      <summary>
              数学函数，返回以弧度表示的指定角度的三角余切值。
            </summary>
      <param name="arg">
                以弧度计量的角度。
              </param>
      <returns>
              指定角度的三角余切。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CurrentTimestamp">
      <summary>
              返回当前日期和时间。
            </summary>
      <returns>
              当前日期和时间。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CurrentUser">
      <summary>
              返回当前用户的名称。
            </summary>
      <returns>
              当前用户的名称。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Byte[])">
      <summary>
              返回用于表示任何表达式的字节数。
            </summary>
      <param name="arg">
                要检查其长度的值。
              </param>
      <returns>
              输入值中的字节数。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.Boolean})">
      <summary>
              返回用于表示任何表达式的字节数。
            </summary>
      <param name="arg">
                要检查其数据长度的值。
              </param>
      <returns>
              输入值中的字节数。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.DateTime})">
      <summary>
              返回用于表示任何表达式的字节数。
            </summary>
      <param name="arg">
                要检查其数据长度的值。
              </param>
      <returns>
              输入值中的字节数。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.DateTimeOffset})">
      <summary>
              返回用于表示任何表达式的字节数。
            </summary>
      <param name="arg">
                要检查其数据长度的值。
              </param>
      <returns>
              输入值中的字节数。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.Decimal})">
      <summary>
              返回用于表示任何表达式的字节数。
            </summary>
      <param name="arg">
                要检查其数据长度的值。
              </param>
      <returns>
              输入值中的字节数。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.Double})">
      <summary>
              返回用于表示任何表达式的字节数。
            </summary>
      <param name="arg">
                要检查其数据长度的值。
              </param>
      <returns>
              输入值中的字节数。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.Guid})">
      <summary>
              返回用于表示任何表达式的字节数。
            </summary>
      <param name="arg">
                要检查其数据长度的值。
              </param>
      <returns>
              输入值中的字节数。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.TimeSpan})">
      <summary>
              返回用于表示任何表达式的字节数。
            </summary>
      <param name="arg">
                要检查其数据长度的值。
              </param>
      <returns>
              输入值中的字节数。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.String)">
      <summary>
              返回用于表示任何表达式的字节数。
            </summary>
      <param name="arg">
                要检查其数据长度的值。
              </param>
      <returns>
              输入值中的字节数。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateAdd(System.String,System.Nullable{System.Double},System.Nullable{System.DateTime})">
      <summary>
              返回一个新 <see langword="datetime" /> 值根据给指定日期添加时间间隔。
            </summary>
      <param name="datePartArg">
                要递增的日期部分。
              </param>
      <param name="number">
                用于增加日期按照指定的量的值。
              </param>
      <param name="date">
                要递增的日期。
              </param>
      <returns>
              新的日期。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateAdd(System.String,System.Nullable{System.Double},System.Nullable{System.DateTimeOffset})">
      <summary>
              返回一个新的日期值根据给指定日期添加时间间隔。
            </summary>
      <param name="datePartArg">
                要递增的日期部分。
              </param>
      <param name="number">
                用于增加日期按照指定的量的值。
              </param>
      <param name="dateTimeOffsetArg">
                要递增的日期。
              </param>
      <returns>
              新时间点，表示为日期和时间，相对于协调世界时 (UTC)。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateAdd(System.String,System.Nullable{System.Double},System.Nullable{System.TimeSpan})">
      <summary>
              返回新基于添加到指定的时间跨度的时间间隔的时间跨度值。
            </summary>
      <param name="datePartArg">
                要递增的日期部分。
              </param>
      <param name="number">
                用于增加日期按照指定的量的值。
              </param>
      <param name="time">
                要递增的时间范围。
              </param>
      <returns>
              新的时间跨度。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateAdd(System.String,System.Nullable{System.Double},System.String)">
      <summary>
              返回一个新 <see langword="datetime" /> 值根据给指定日期添加时间间隔。
            </summary>
      <param name="datePartArg">
                要递增的日期部分。
              </param>
      <param name="number">
                用于增加日期按照指定的量的值。
              </param>
      <param name="date">
                要递增的日期。
              </param>
      <returns>
              一个 <see cref="T:System.Nullable`1" /> 的 <see cref="T:System.DateTime" /> 值，该值是新的日期。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
              返回指定的开始日期和结束日期之间所跨的指定日期部分边界的计数。
            </summary>
      <param name="datePartArg">
                用于计算不同的时间间隔数的日期部分。
              </param>
      <param name="startDate">
                第一个日期。
              </param>
      <param name="endDate">
                第二个日期。
              </param>
      <returns>
              两个日期之间的时间间隔数。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTimeOffset})">
      <summary>
              返回指定的开始日期和结束日期之间所跨的指定日期部分边界的计数。
            </summary>
      <param name="datePartArg">
                用于计算不同的时间间隔数的日期部分。
              </param>
      <param name="startDate">
                第一个日期。
              </param>
      <param name="endDate">
                第二个日期。
              </param>
      <returns>
              两个日期之间的时间间隔数。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTime},System.Nullable{System.TimeSpan})">
      <summary>
              返回指定的开始日期和结束日期之间所跨的指定日期部分边界的计数。
            </summary>
      <param name="datePartArg">
                用于计算不同的时间间隔数的日期部分。
              </param>
      <param name="startDate">
                第一个日期。
              </param>
      <param name="endDate">
                第二个日期。
              </param>
      <returns>
              两个日期之间的时间间隔数。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTime},System.String)">
      <summary>
              返回指定的开始日期和结束日期之间所跨的指定日期部分边界的计数。
            </summary>
      <param name="datePartArg">
                用于计算不同的时间间隔数的日期部分。
              </param>
      <param name="startDate">
                第一个日期。
              </param>
      <param name="endDate">
                第二个日期。
              </param>
      <returns>
              两个日期之间的时间间隔数。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTime})">
      <summary>
              返回指定的开始日期和结束日期之间所跨的指定日期部分边界的计数。
            </summary>
      <param name="datePartArg">
                用于计算不同的时间间隔数的日期部分。
              </param>
      <param name="startDate">
                第一个日期。
              </param>
      <param name="endDate">
                第二个日期。
              </param>
      <returns>
              两个日期之间的时间间隔数。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>
              返回指定的开始日期和结束日期之间所跨的指定日期部分边界的计数。
            </summary>
      <param name="datePartArg">
                用于计算不同的时间间隔数的日期部分。
              </param>
      <param name="startDate">
                第一个日期。
              </param>
      <param name="endDate">
                第二个日期。
              </param>
      <returns>
              两个日期之间的时间间隔数。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.TimeSpan})">
      <summary>
              返回指定的开始日期和结束日期之间所跨的指定日期部分边界的计数。
            </summary>
      <param name="datePartArg">
                用于计算不同的时间间隔数的日期部分。
              </param>
      <param name="startDate">
                第一个日期。
              </param>
      <param name="endDate">
                第二个日期。
              </param>
      <returns>
              两个日期之间的时间间隔数。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTimeOffset},System.String)">
      <summary>
              返回指定的开始日期和结束日期之间所跨的指定日期部分边界的计数。
            </summary>
      <param name="datePartArg">
                用于计算不同的时间间隔数的日期部分。
              </param>
      <param name="startDate">
                第一个日期。
              </param>
      <param name="endDate">
                第二个日期。
              </param>
      <returns>
              两个日期之间的时间间隔数。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.TimeSpan},System.Nullable{System.DateTime})">
      <summary>
              返回指定的开始日期和结束日期之间所跨的指定日期部分边界的计数。
            </summary>
      <param name="datePartArg">
                用于计算不同的时间间隔数的日期部分。
              </param>
      <param name="startDate">
                第一个日期。
              </param>
      <param name="endDate">
                第二个日期。
              </param>
      <returns>
              两个日期之间的时间间隔数。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.TimeSpan},System.Nullable{System.DateTimeOffset})">
      <summary>
              返回指定的开始日期和结束日期之间所跨的指定日期部分边界的计数。
            </summary>
      <param name="datePartArg">
                用于计算不同的时间间隔数的日期部分。
              </param>
      <param name="startDate">
                第一个日期。
              </param>
      <param name="endDate">
                第二个日期。
              </param>
      <returns>
              两个日期之间的时间间隔数。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>
              返回指定的开始日期和结束日期之间所跨的指定日期部分边界的计数。
            </summary>
      <param name="datePartArg">
                用于计算不同的时间间隔数的日期部分。
              </param>
      <param name="startDate">
                第一个日期。
              </param>
      <param name="endDate">
                第二个日期。
              </param>
      <returns>
              两个日期之间的时间间隔数。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.TimeSpan},System.String)">
      <summary>
              返回指定的开始日期和结束日期之间所跨的指定日期部分边界的计数。
            </summary>
      <param name="datePartArg">
                用于计算不同的时间间隔数的日期部分。
              </param>
      <param name="startDate">
                第一个日期。
              </param>
      <param name="endDate">
                第二个日期。
              </param>
      <returns>
              两个日期之间的时间间隔数。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.String,System.Nullable{System.DateTime})">
      <summary>
              返回指定的开始日期和结束日期之间所跨的指定日期部分边界的计数。
            </summary>
      <param name="datePartArg">
                用于计算不同的时间间隔数的日期部分。
              </param>
      <param name="startDate">
                第一个日期。
              </param>
      <param name="endDate">
                第二个日期。
              </param>
      <returns>
              两个日期之间的时间间隔数。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.String,System.Nullable{System.DateTimeOffset})">
      <summary>
              返回指定的开始日期和结束日期之间所跨的指定日期部分边界的计数。
            </summary>
      <param name="datePartArg">
                用于计算不同的时间间隔数的日期部分。
              </param>
      <param name="startDate">
                第一个日期。
              </param>
      <param name="endDate">
                第二个日期。
              </param>
      <returns>
              两个日期之间的时间间隔数。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.String,System.Nullable{System.TimeSpan})">
      <summary>
              返回指定的开始日期和结束日期之间所跨的指定日期部分边界的计数。
            </summary>
      <param name="datePartArg">
                用于计算不同的时间间隔数的日期部分。
              </param>
      <param name="startDate">
                第一个日期。
              </param>
      <param name="endDate">
                第二个日期。
              </param>
      <returns>
              指定两个日期之间的时间间隔数的值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.String,System.String)">
      <summary>
              返回指定的开始日期和结束日期之间所跨的指定日期部分边界的计数。
            </summary>
      <param name="datePartArg">
                用于计算不同的时间间隔数的日期部分。
              </param>
      <param name="startDate">
                第一个日期。
              </param>
      <param name="endDate">
                第二个日期。
              </param>
      <returns>
              两个日期之间的时间间隔数。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateName(System.String,System.Nullable{System.DateTime})">
      <summary>
              返回表示指定日期的指定日期部分的字符串。
            </summary>
      <param name="datePartArg">
                用于计算不同的时间间隔数的日期部分。
              </param>
      <param name="date">
                日期。
              </param>
      <returns>
              指定日期的指定的部分。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateName(System.String,System.Nullable{System.DateTimeOffset})">
      <summary>
              返回表示指定日期的指定日期部分的字符串。
            </summary>
      <param name="datePartArg">
                用于计算不同的时间间隔数的日期部分。
              </param>
      <param name="date">
                日期。
              </param>
      <returns>
              指定日期的指定的部分。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateName(System.String,System.Nullable{System.TimeSpan})">
      <summary>
              返回表示指定日期的指定日期部分的字符串。
            </summary>
      <param name="datePartArg">
                用于计算不同的时间间隔数的日期部分。
              </param>
      <param name="date">
                日期。
              </param>
      <returns>
              指定日期的指定的部分。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateName(System.String,System.String)">
      <summary>
              返回表示指定日期的指定日期部分的字符串。
            </summary>
      <param name="datePartArg">
                用于计算不同的时间间隔数的日期部分。
              </param>
      <param name="date">
                日期。
              </param>
      <returns>
              指定日期的指定的部分。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DatePart(System.String,System.Nullable{System.DateTime})">
      <summary>
              返回表示指定日期的指定日期部分的整数。
            </summary>
      <param name="datePartArg">
                要返回的值的日期部分。
              </param>
      <param name="date">
                日期。
              </param>
      <returns>
              指定日期的指定日期部分。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DatePart(System.String,System.Nullable{System.DateTimeOffset})">
      <summary>
              返回表示指定日期的指定日期部分的整数。
            </summary>
      <param name="datePartArg">
                要返回的值的日期部分。
              </param>
      <param name="date">
                日期。
              </param>
      <returns>
              指定日期的指定日期部分。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DatePart(System.String,System.Nullable{System.TimeSpan})">
      <summary>
              返回表示指定日期的指定日期部分的整数。
            </summary>
      <param name="datePartArg">
                要返回的值的日期部分。
              </param>
      <param name="date">
                日期。
              </param>
      <returns>
              指定日期的指定日期部分。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DatePart(System.String,System.String)">
      <summary>
              返回表示指定日期的指定日期部分的整数。
            </summary>
      <param name="datePartArg">
                要返回的值的日期部分。
              </param>
      <param name="date">
                日期。
              </param>
      <returns>
              指定日期的指定日期部分。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Degrees(System.Nullable{System.Decimal})">
      <summary>
              返回以度为单位指定以弧度表示的角的相应角度。
            </summary>
      <param name="arg1">
                以弧度计量的角度。
              </param>
      <returns>
              指定的角度转换成度为单位。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Degrees(System.Nullable{System.Double})">
      <summary>
              返回以度为单位指定以弧度表示的角的相应角度。
            </summary>
      <param name="arg1">
                以弧度计量的角度。
              </param>
      <returns>
              指定的角度转换成度为单位。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Degrees(System.Nullable{System.Int32})">
      <summary>
              返回以度为单位指定以弧度表示的角的相应角度。
            </summary>
      <param name="arg1">
                以弧度计量的角度。
              </param>
      <returns>
              指定的角度转换成度为单位。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Degrees(System.Nullable{System.Int64})">
      <summary>
              返回以度为单位指定以弧度表示的角的相应角度。
            </summary>
      <param name="arg1">
                以弧度计量的角度。
              </param>
      <returns>
              指定的角度转换成度为单位。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Difference(System.String,System.String)">
      <summary>
              返回一个整数值，该值指示两个字符表达式的 SOUNDEX 值之间的差异。
            </summary>
      <param name="string1">
                第一个字符串。
              </param>
      <param name="string2">
                第二个字符串。
              </param>
      <returns>
              这两个字符串之间的 SOUNDEX 差异。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Exp(System.Nullable{System.Decimal})">
      <summary>
              返回指定的浮点表达式的指数值。
            </summary>
      <param name="arg">
                输入的值。
              </param>
      <returns>
              常量 e 使用的输入值次幂。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Exp(System.Nullable{System.Double})">
      <summary>
              返回指定的浮点表达式的指数值。
            </summary>
      <param name="arg">
                输入的值。
              </param>
      <returns>
              常量 e 使用的输入值次幂。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.GetDate">
      <summary>
              返回当前数据库系统时间戳作为 datetime 值，而无需数据库时区偏移量。
               此值派生自在其运行的 SQL Server 实例的计算机的操作系统。
            </summary>
      <returns>
              当前数据库时间戳。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.GetUtcDate">
      <summary>
              为日期时间值返回当前数据库系统时间戳。
               不包括数据库时区偏移量。
               此值表示当前 UTC 时间 （协调世界时）。
               此值派生自在其运行的 SQL Server 实例的计算机的操作系统。
            </summary>
      <returns>
              当前数据库 UTC 时间戳。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.HostName">
      <summary>
              返回工作站名称。
            </summary>
      <returns>
              这台工作站的名称。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.IsDate(System.String)">
      <summary>
              指示输入的值是否是有效的日期或时间。
            </summary>
      <param name="arg">
                所测试的值。
              </param>
      <returns>
              如果输入的表达式是有效的日期或时间值的 datetime 或 smalldatetime 数据类型; 则为 1否则为 0。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.IsNumeric(System.String)">
      <summary>
              指示输入的值是否为有效的数值类型。
            </summary>
      <param name="arg">
                一个字符串表达式。
              </param>
      <returns>
              如果输入的表达式是有效的 numeric 数据类型; 则为 1否则为 0。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Log(System.Nullable{System.Decimal})">
      <summary>
              返回指定的输入值的自然对数。
            </summary>
      <param name="arg">
                一个数值表达式。
              </param>
      <returns>
              输入值的自然对数。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Log(System.Nullable{System.Double})">
      <summary>
              返回指定的输入值的自然对数。
            </summary>
      <param name="arg">
                一个数值表达式。
              </param>
      <returns>
              输入值的自然对数。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Log10(System.Nullable{System.Decimal})">
      <summary>
              返回指定的输入值的以 10 为基数的对数。
            </summary>
      <param name="arg">
                一个数值表达式。
              </param>
      <returns>
              输入值以 10 为基数的对数。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Log10(System.Nullable{System.Double})">
      <summary>
              返回指定的输入值的以 10 为基数的对数。
            </summary>
      <param name="arg">
                一个数值表达式。
              </param>
      <returns>
              输入值以 10 为基数的对数。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.NChar(System.Nullable{System.Int32})">
      <summary>
              根据 Unicode 标准的定义，则返回具有指定的整数代码的 Unicode 字符。
            </summary>
      <param name="arg">
                字符代码。
              </param>
      <returns>
              对应于所输入的字符代码的字符。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.PatIndex(System.String,System.String)">
      <summary>
              返回一种模式的第一个匹配项的起始位置中指定的表达式或为零，如果未找到该模式，在所有有效的文本和字符数据类型上。
            </summary>
      <param name="stringPattern">
                要搜索的字符串模式。
              </param>
      <param name="target">
                要搜索的字符串。
              </param>
      <returns>
              其中找到该字符串模式的起始字符位置。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Pi">
      <summary>
              返回 pi 的常量值。
            </summary>
      <returns>
              Pi 的数字值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.QuoteName(System.String)">
      <summary>
              返回带有分隔符的 Unicode 字符串添加以使输入的字符串有效的 Microsoft SQL Server 分隔标识符。
            </summary>
      <param name="stringArg">
                用引号引起来的字符表达式将添加到。
              </param>
      <returns>
              添加有方括号原始字符串。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.QuoteName(System.String,System.String)">
      <summary>
              返回带有分隔符的 Unicode 字符串添加以使输入的字符串有效的 Microsoft SQL Server 分隔标识符。
            </summary>
      <param name="stringArg">
                用引号引起来的字符表达式将添加到。
              </param>
      <param name="quoteCharacter">
                要用作分隔符的单字符字符串。
                 它可以是单引号 （'）、 左或右方括号 ([]) 或双引号 （"）。
                 如果未指定 quote_character，则使用方括号。
              </param>
      <returns>
              使用指定的原始字符串引号添加字符。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Radians(System.Nullable{System.Decimal})">
      <summary>
              返回对应于以度为单位指定角度的弧度度量值。
            </summary>
      <param name="arg">
                测量的角度，以度为单位。
              </param>
      <returns>
              指定角度的弧度度量值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Radians(System.Nullable{System.Double})">
      <summary>
              返回对应于以度为单位指定角度的弧度度量值。
            </summary>
      <param name="arg">
                测量的角度，以度为单位。
              </param>
      <returns>
              指定角度的弧度度量值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Radians(System.Nullable{System.Int32})">
      <summary>
              返回对应于以度为单位指定角度的弧度度量值。
            </summary>
      <param name="arg">
                以度为单位测量的角度
              </param>
      <returns>
              指定角度的弧度度量值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Radians(System.Nullable{System.Int64})">
      <summary>
              返回对应于以度为单位指定角度的弧度度量值。
            </summary>
      <param name="arg">
                以度为单位测量的角度
              </param>
      <returns>
              指定角度的弧度度量值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Rand">
      <summary>
              返回伪随机浮点值介于 0 和 1，排他。
            </summary>
      <returns>
              伪随机值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Rand(System.Nullable{System.Int32})">
      <summary>
              返回伪随机浮点值介于 0 和 1，排他。
            </summary>
      <param name="seed">
                种子值中。
                 如果未指定 <paramref name="seed" />，则 SQL Server 数据库引擎将随机分配种子值。
                 对于指定的种子值，返回的结果始终相同。
              </param>
      <returns>
              伪随机值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Replicate(System.String,System.Nullable{System.Int32})">
      <summary>
              将一个字符串值重复指定的次数。
            </summary>
      <param name="target">
                一个有效的字符串。
              </param>
      <param name="count">
                指定多少次重复的值 <paramref name="target" />。
              </param>
      <returns>
              目标字符串重复指定次数 <paramref name="count" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sign(System.Nullable{System.Decimal})">
      <summary>
              返回指定表达式的正号 (+1)、零 (0) 或负号 (-1)。
            </summary>
      <param name="arg">
                一个数值表达式。
              </param>
      <returns>
              输入表达式的符号。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sign(System.Nullable{System.Double})">
      <summary>
              返回指定表达式的正号 (+1)、零 (0) 或负号 (-1)。
            </summary>
      <param name="arg">
                一个数值表达式。
              </param>
      <returns>
              输入表达式的符号。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sign(System.Nullable{System.Int32})">
      <summary>
              返回指定表达式的正号 (+1)、零 (0) 或负号 (-1)。
            </summary>
      <param name="arg">
                一个数值表达式。
              </param>
      <returns>
              输入表达式的符号。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sign(System.Nullable{System.Int64})">
      <summary>
              返回指定表达式的正号 (+1)、零 (0) 或负号 (-1)。
            </summary>
      <param name="arg">
                一个数值表达式。
              </param>
      <returns>
              输入表达式的符号。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sin(System.Nullable{System.Decimal})">
      <summary>
              返回指定角度的三角正弦值。
            </summary>
      <param name="arg">
                以弧度计量的角度。
              </param>
      <returns>
              输入表达式的三角正弦值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sin(System.Nullable{System.Double})">
      <summary>
              返回指定角度的三角正弦值。
            </summary>
      <param name="arg">
                以弧度计量的角度。
              </param>
      <returns>
              输入表达式的三角正弦值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.SoundCode(System.String)">
      <summary>
              将字母数字字符串转换为一个四字符代码 (SOUNDEX) 以查找发音相似的词或名称。
            </summary>
      <param name="arg">
                一个有效的字符串。
              </param>
      <returns>
              输入字符串的 SOUNDEX 代码。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Space(System.Nullable{System.Int32})">
      <summary>
              返回重复空格组成的字符串。
            </summary>
      <param name="arg1">
                空格数。
                 如果为负数，则返回空的字符串。
              </param>
      <returns>
              一个字符串，包含指定数量的空格。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Square(System.Nullable{System.Decimal})">
      <summary>
              返回指定数字的平方。
            </summary>
      <param name="arg1">
                一个数值表达式。
              </param>
      <returns>
              输入值的平方。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Square(System.Nullable{System.Double})">
      <summary>
              返回指定数字的平方。
            </summary>
      <param name="arg1">
                一个数值表达式。
              </param>
      <returns>
              输入值的平方。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.SquareRoot(System.Nullable{System.Decimal})">
      <summary>
              返回指定数字的平方根。
            </summary>
      <param name="arg">
                一个数值表达式。
              </param>
      <returns>
              输入值的平方根。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.SquareRoot(System.Nullable{System.Double})">
      <summary>
              返回指定数字的平方根。
            </summary>
      <param name="arg">
                一个数值表达式。
              </param>
      <returns>
              输入值的平方根。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Decimal})">
      <summary>
              返回的字符数据转换从数值数据。
            </summary>
      <param name="number">
                一个数值表达式。
              </param>
      <returns>
              输入的表达式转换为字符串。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Decimal},System.Nullable{System.Int32})">
      <summary>
              返回的字符数据转换从数值数据。
            </summary>
      <param name="number">
                一个数值表达式。
              </param>
      <param name="length">
                字符串的总长度。
                 它包括小数点、符号、数字以及空格。
                 默认值为 10。
              </param>
      <returns>
              输入的表达式转换为字符串。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Nullable{System.Int32})">
      <summary>
              返回的字符数据转换从数值数据。
            </summary>
      <param name="number">
                一个数值表达式。
              </param>
      <param name="length">
                字符串的总长度。
                 它包括小数点、符号、数字以及空格。
                 默认值为 10。
              </param>
      <param name="decimalArg">
                小数点右侧位数的数。
                <paramref name="decimal" /> 必须小于或等于 16。
                 如果<paramref name=" decimal" /> 超过 16，则将结果截断至小数点右侧 16 个位置。
              </param>
      <returns>
              输入的表达式转换为字符串。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Double})">
      <summary>
              返回的字符数据转换从数值数据。
            </summary>
      <param name="number">
                一个数值表达式。
              </param>
      <returns>
              输入的数值表达式转换为字符串。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>
              返回的字符数据转换从数值数据。
            </summary>
      <param name="number">
                一个数值表达式。
              </param>
      <param name="length">
                字符串的总长度。
                 它包括小数点、符号、数字以及空格。
                 默认值为 10。
              </param>
      <returns>
              输入的数值表达式转换为字符串。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Double},System.Nullable{System.Int32},System.Nullable{System.Int32})">
      <summary>
              返回的字符数据转换从数值数据。
            </summary>
      <param name="number">
                一个数值表达式。
              </param>
      <param name="length">
                字符串的总长度。
                 它包括小数点、符号、数字以及空格。
                 默认值为 10。
              </param>
      <param name="decimalArg">
                小数点右侧位数的数。
                <paramref name="decimal" /> 必须小于或等于 16。
                 如果<paramref name=" decimal" /> 超过 16，则将结果截断至小数点右侧 16 个位置。
              </param>
      <returns>
              输入的数值表达式转换为字符串。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Stuff(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
      <summary>
              将字符串插入到另一个字符串。
               它将删除指定的长度的目标字符串的开始位置中的字符，然后将第二个字符串插入目标字符串的开始位置。
            </summary>
      <param name="stringInput">
                目标字符串。
              </param>
      <param name="start">
                中的字符位置 <paramref name="stringinput" /> 替换字符串是要插入的位置。
              </param>
      <param name="length">
                要删除的字符数 <paramref name="stringInput" />。
                 如果 <paramref name="length" /> 长于 <paramref name="stringInput" />, ，则最多删除到最后一个字符在 <paramref name="stringReplacement" />。
              </param>
      <param name="stringReplacement">
                要插入到的子字符串 <paramref name="stringInput" />。
              </param>
      <returns>
              包含的两个字符串的字符串。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Tan(System.Nullable{System.Decimal})">
      <summary>
              返回输入表达式的三角正切值。
            </summary>
      <param name="arg">
                以弧度计量的角度。
              </param>
      <returns>
              输入的角度的正切值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Tan(System.Nullable{System.Double})">
      <summary>
              返回输入表达式的三角正切值。
            </summary>
      <param name="arg">
                以弧度计量的角度。
              </param>
      <returns>
              输入的角度的正切值。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Unicode(System.String)">
      <summary>
              如 Unicode 标准所定义，返回输入表达式的第一个字符的整数值。
            </summary>
      <param name="arg">
                一个有效的字符串。
              </param>
      <returns>
              在输入字符串中的第一个字符的字符代码。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.UserName">
      <summary>
              返回数据库用户名对应于指定的标识号。
            </summary>
      <returns>
              用户名。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.UserName(System.Nullable{System.Int32})">
      <summary>
              返回数据库用户名对应于指定的标识号。
            </summary>
      <param name="arg">
                用户 id。
              </param>
      <returns>
              用户名。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.AsTextZM(System.Data.Spatial.DbGeography)">
      <summary>
              返回地域实例增加任何 Z （标高） 和 M （度量） 值的实例的开放地理空间联盟 (OGC) 熟知文本 (WKT) 表示。
            </summary>
      <param name="geographyValue">
                地理位置值中。
              </param>
      <returns>
              地域实例的开放地理空间联盟 (OGC) 熟知文本 (WKT) 表示形式。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.AsTextZM(System.Data.Spatial.DbGeometry)">
      <summary>
              返回地域实例增加任何 Z （标高） 和 M （度量） 值的实例的开放地理空间联盟 (OGC) 熟知文本 (WKT) 表示。
            </summary>
      <param name="geometryValue">
                几何值中。
              </param>
      <returns>
              几何图形实例的开放地理空间联盟 (OGC) 熟知文本 (WKT) 表示形式。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.BufferWithTolerance(System.Data.Spatial.DbGeography,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean})">
      <summary>
              返回表示所有点值，从 geography 实例的距离小于或等于指定值的并集的功能，允许指定的容差的几何对象。
            </summary>
      <param name="geographyValue">
                地理位置值中。
              </param>
      <param name="distance">
                距离。
              </param>
      <param name="tolerance">
                指定的容差。
              </param>
      <param name="relative">
                指定容差值相对值还是绝对值。
              </param>
      <returns>
              从地域实例的距离是小于或等于指定值的所有点值的联合
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.BufferWithTolerance(System.Data.Spatial.DbGeometry,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean})">
      <summary>
              返回表示所有点值从一个几何图形实例的距离小于或等于指定值的联合的功能，允许指定的容差的几何对象。
            </summary>
      <param name="geometryValue">
                几何值中。
              </param>
      <param name="distance">
                距离。
              </param>
      <param name="tolerance">
                指定的容差。
              </param>
      <param name="relative">
                指定容差值相对值还是绝对值。
              </param>
      <returns>
              从一个几何图形实例的距离是小于或等于指定值的所有点值的联合
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.EnvelopeAngle(System.Data.Spatial.DbGeography)">
      <summary>
              返回由 EnvelopeCenter() 返回的点与以度为单位的 geography 实例中点之间的最大角度。
            </summary>
      <param name="geographyValue">
                地理位置值中。
              </param>
      <returns>
              返回 EnvelopeCenter() 的点之间的最大角度。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.EnvelopeCenter(System.Data.Spatial.DbGeography)">
      <summary>
              返回可用作地域实例的边框圆的中心点。
            </summary>
      <param name="geographyValue">
                地理位置值中。
              </param>
      <returns>
              一个 SqlGeography 值，指定的一个边框圆的中心位置。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.Filter(System.Data.Spatial.DbGeography,System.Data.Spatial.DbGeography)">
      <summary>
              提供了一个快速、 仅索引相交方法，以确定一个地域实例存在相交的另一个 SqlGeography 实例，假定索引是否可用。
            </summary>
      <param name="geographyValue">
                地理位置值中。
              </param>
      <param name="geographyOther">
                要针对在其调用筛选器的实例进行比较的另一个地域实例。
              </param>
      <returns>
              <see langword="True" /> 如果地域实例存在相交的可能另一个 SqlGeography 实例;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.Filter(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>
              提供了一个快速、 仅索引相交方法，以确定一个地域实例存在相交的另一个 SqlGeometry 实例，假定索引是否可用。
            </summary>
      <param name="geometryValue">
                几何值中。
              </param>
      <param name="geometryOther">
                要针对在其调用筛选器的实例进行比较的另一个地域实例。
              </param>
      <returns>
              <see langword="True" /> 如果地域实例存在相交的可能另一个 SqlGeography 实例;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.InstanceOf(System.Data.Spatial.DbGeography,System.String)">
      <summary>
              测试 SqlGeography 实例是否与指定的类型相同。
            </summary>
      <param name="geographyValue">
                地理位置值中。
              </param>
      <param name="geometryTypeName">
                一个字符串，指定一种公开的 12 类型地理类型层次结构中。
              </param>
      <returns>
              一个字符串，指定一种公开的 12 类型地理类型层次结构中。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.InstanceOf(System.Data.Spatial.DbGeometry,System.String)">
      <summary>
              测试 SqlGeometry 实例是否与指定的类型相同。
            </summary>
      <param name="geometryValue">
                几何值中。
              </param>
      <param name="geometryTypeName">
                一个字符串，指定一种公开的 12 类型地理类型层次结构中。
              </param>
      <returns>
              一个字符串，指定一种公开的 12 类型地理类型层次结构中。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.MakeValid(System.Data.Spatial.DbGeometry)">
      <summary>
              将无效的几何图形实例转换为一个几何图形实例，具有有效开放地理空间联盟 (OGC) 类型。
            </summary>
      <param name="geometryValue">
                几何值中。
              </param>
      <returns>
              已转换的几何实例中。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.NumRings(System.Data.Spatial.DbGeography)">
      <summary>
              返回多边形实例中的总环数。
            </summary>
      <param name="geographyValue">
                地理位置值中。
              </param>
      <returns>
              总环数。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.PointGeography(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>
              构造地域实例表示 Point 实例的 x 和 y 值以及空间引用 ID (SRID)。
            </summary>
      <param name="latitude">
                所生成的 Point 的 x 坐标。
              </param>
      <param name="longitude">
                所生成的 Point 的 y 坐标值
              </param>
      <param name="spatialReferenceId">
                Geography 实例的 SRID。
              </param>
      <returns>
              构造的地理实例中。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.PointGeometry(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>
              构造几何图形实例表示 Point 实例的 x 和 y 值以及空间引用 ID (SRID)。
            </summary>
      <param name="xCoordinate">
                所生成的 Point 的 x 坐标。
              </param>
      <param name="yCoordinate">
                所生成的 Point 的 y 坐标值
              </param>
      <param name="spatialReferenceId">
                Geography 实例的 SRID。
              </param>
      <returns>
              构建的几何图形实例中。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.Reduce(System.Data.Spatial.DbGeography,System.Nullable{System.Double})">
      <summary>
              返回给定的地域实例通过运行的实例具有给定公差的 Douglas-peucker 算法来生成的近似值。
            </summary>
      <param name="geographyValue">
                地理位置值中。
              </param>
      <param name="tolerance">
                要输入到 Douglas-peucker 算法的公差。
                 公差必须为正数。
              </param>
      <returns>
              返回 <see cref="T:System.Data.Spatial.DbGeography" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.Reduce(System.Data.Spatial.DbGeometry,System.Nullable{System.Double})">
      <summary>
              返回给定的地域实例通过运行的实例具有给定公差的 Douglas-peucker 算法来生成的近似值。
            </summary>
      <param name="geometryValue">
                几何值中。
              </param>
      <param name="tolerance">
                要输入到 Douglas-peucker 算法的公差。
                 公差必须为正数。
              </param>
      <returns>
              返回 <see cref="T:System.Data.Spatial.DbGeometry" />。
            </returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlSpatialFunctions.RingN(System.Data.Spatial.DbGeography,System.Nullable{System.Int32})">
      <summary>
              返回 SqlGeography 实例的指定的环︰ 1 ≤ n ≤ numrings （)。
            </summary>
      <param name="geographyValue">
                地理位置值中。
              </param>
      <param name="index">
                一个介于 1 和 polygon 实例中的环数之间的 int 表达式。
              </param>
      <returns>
              表示由 n 指定的环 SqlGeography 对象。
            </returns>
    </member>
    <member name="M:System.Data.OptimisticConcurrencyException.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.OptimisticConcurrencyException" /> 的新实例。
            </summary>
    </member>
    <member name="M:System.Data.OptimisticConcurrencyException.#ctor(System.String)">
      <summary>
              使用指定的错误消息初始化 <see cref="T:System.Data.OptimisticConcurrencyException" /> 的新实例。
            </summary>
      <param name="message">
                描述错误的消息。
              </param>
    </member>
    <member name="M:System.Data.OptimisticConcurrencyException.#ctor(System.String,System.Exception)">
      <summary>
              初始化 <see cref="T:System.Data.OptimisticConcurrencyException" /> 的新实例，该类使用指定的错误消息和对内部异常的引用。
            </summary>
      <param name="message">
                描述错误的消息。
              </param>
      <param name="innerException">
                导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。
              </param>
    </member>
    <member name="M:System.Data.OptimisticConcurrencyException.#ctor(System.String,System.Exception,System.Collections.Generic.IEnumerable{System.Data.Objects.ObjectStateEntry})">
      <summary>
              初始化 <see cref="T:System.Data.OptimisticConcurrencyException" /> 的新实例，该类使用指定的错误消息、对内部异常的引用，以及 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 对象的可枚举集合。
            </summary>
      <param name="message">
                描述错误的消息。
              </param>
      <param name="innerException">
                导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。
              </param>
      <param name="stateEntries">
                <see cref="T:System.Data.Objects.ObjectStateEntry" /> 对象的可枚举集合。
              </param>
    </member>
    <member name="M:System.Data.PropertyConstraintException.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.Data.PropertyConstraintException" /> 类，具有默认消息。
            </summary>
    </member>
    <member name="M:System.Data.PropertyConstraintException.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Data.PropertyConstraintException" /> 类提供的消息。
            </summary>
      <param name="message">
                本地化的错误消息。
              </param>
    </member>
    <member name="M:System.Data.PropertyConstraintException.#ctor(System.String,System.Exception)">
      <summary>
              新实例初始化 <see cref="T:System.Data.PropertyConstraintException" /> 类提供消息和内部异常。
            </summary>
      <param name="message">
                本地化的错误消息。
              </param>
      <param name="innerException">
                内部异常。
              </param>
    </member>
    <member name="M:System.Data.PropertyConstraintException.#ctor(System.String,System.String)">
      <summary>
              初始化 <see cref="T:System.Data.PropertyConstraintException" /> 类的新实例。
            </summary>
      <param name="message">
                本地化的错误消息。
              </param>
      <param name="propertyName">
                属性的名称。
              </param>
    </member>
    <member name="M:System.Data.PropertyConstraintException.#ctor(System.String,System.String,System.Exception)">
      <summary>
              初始化 <see cref="T:System.Data.PropertyConstraintException" /> 类的新实例。
            </summary>
      <param name="message">
                本地化的错误消息。
              </param>
      <param name="propertyName">
                属性的名称。
              </param>
      <param name="innerException">
                内部异常。
              </param>
    </member>
    <member name="M:System.Data.PropertyConstraintException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              使用关于异常的信息设置 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。
            </summary>
      <param name="info">
                <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它保存关于所引发异常的序列化对象数据。
              </param>
      <param name="context">
                序列化上下文。
              </param>
    </member>
    <member name="M:System.Data.ProviderIncompatibleException.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.ProviderIncompatibleException" /> 的新实例。
            </summary>
    </member>
    <member name="M:System.Data.ProviderIncompatibleException.#ctor(System.String)">
      <summary>
              使用指定的错误消息初始化 <see cref="T:System.Data.ProviderIncompatibleException" /> 的新实例。
            </summary>
      <param name="message">
                描述错误的消息。
              </param>
    </member>
    <member name="M:System.Data.ProviderIncompatibleException.#ctor(System.String,System.Exception)">
      <summary>
              初始化一个使用指定错误消息的 <see cref="T:System.Data.ProviderIncompatibleException" /> 的新实例。
            </summary>
      <param name="message">
                描述错误的消息。
              </param>
      <param name="innerException">
                导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。
              </param>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.AsBinary">
      <summary>
               将生成此 DbGeography 值的众所周知的二进制表示形式。
            </summary>
      <returns>
              此 DbGeography 值人所熟知二进制表示形式。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.AsGml">
      <summary>
               将生成此 DbGeography 值的地理标记语言 (GML) 表示。
            </summary>
      <returns>
              包含的 GML 表示形式此 DbGeography 值的字符串。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.AsText">
      <summary>
               生成的已知文本表示形式此 DbGeography 值。
                仅包含经度和纬度点。
            </summary>
      <returns>
              包含的已知文本表示形式此 DbGeography 值的字符串。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.Buffer(System.Nullable{System.Double})">
      <summary>
              返回一个表示从地域实例的距离是小于或等于指定值的所有点的并集的地理位置对象。
            </summary>
      <param name="distance">
                距离。
              </param>
      <returns>
              表示所有点的并集的地理位置对象
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.Difference(System.Data.Spatial.DbGeography)">
      <summary>
               计算此 DbGeography 值和另一个的 DbGeography 值的差。
            </summary>
      <param name="other">
                应为其计算与此值的差异的地理位置值。
              </param>
      <returns>
              一个新的 DbGeography 值，表示此地理位置值之间的差异和 <paramref name="other" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="other" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.Disjoint(System.Data.Spatial.DbGeography)">
      <summary>
               确定此 DbGeography 是否将从指定的 DbGeography 参数空间上不相联。
            </summary>
      <param name="other">
                地理位置值，它应与 disjointness 此地理位置值进行比较。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="other" /> 脱节此地理位置值; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="other" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.Distance(System.Data.Spatial.DbGeography)">
      <summary>
               计算此 DbGeography 值中最近的点与另一个 DbGeography 值之间的距离。
            </summary>
      <param name="other">
                地理位置值应为其计算此值之间的距离。
              </param>
      <returns>
              一个 double 值，指定此地理位置值最接近的两个点之间的距离和 <paramref name="other" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="other" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.ElementAt(System.Int32)">
      <summary>
               如果此 DbGeography 值的元素从特定位置，它表示地理集合。
               &lt; 参数名称 ="index"&gt; geography 该值应从中提取元素内的位置。 &lt; / param &gt;&lt; 返回 &gt; 中指定的位置，它表示集合的其他地理位置的值; 如果此地理位置值中的元素否则为 <see langword="null" />。 &lt; / 返回 &gt;
            </summary>
      <param name="index">
                索引。
              </param>
      <returns>
              此 DbGeography 值从特定位置的元素
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.FromBinary(System.Byte[])">
      <summary>
               创建一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 值基于指定的熟知二进制值。
            </summary>
      <param name="wellKnownBinary">
                一个字节数组，其中包含的众所周知的二进制表示形式的地理位置值。
              </param>
      <returns>
              新的 DbGeography 值按照众所周知的二进制值，默认地理坐标系统标识符 (SRID) 的定义 (<see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />)。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="wellKnownBinary" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.FromBinary(System.Byte[],System.Int32)">
      <summary>
               创建一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 值基于指定已知二进制值和坐标系的标识符 (SRID)。
            </summary>
      <param name="wellKnownBinary">
                一个字节数组，其中包含的众所周知的二进制表示形式的地理位置值。
              </param>
      <param name="coordinateSystemId">
                新的 DbGeography 值应使用的坐标系的标识符。
              </param>
      <returns>
              一个新 DbGeography 值进行了定义通过众所周知的二进制值，指定的坐标系统标识符。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="wellKnownBinary" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.FromGml(System.String)">
      <summary>
               创建一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 值基于指定的地理标记语言 (GML) 值。
            </summary>
      <param name="geographyMarkup">
                一个字符串，包含地理位置值的地理标记语言 (GML) 表示。
              </param>
      <returns>
              新的 DbGeography 值与默认地理坐标系统标识符 (SRID) 的 GML 值定义 (<see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />)。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geographyMarkup" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.FromGml(System.String,System.Int32)">
      <summary>
               创建一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 值基于指定地理标记语言 (GML) 值和坐标系的标识符 (SRID)。
            </summary>
      <param name="geographyMarkup">
                一个字符串，包含地理位置值的地理标记语言 (GML) 表示。
              </param>
      <param name="coordinateSystemId">
                新的 DbGeography 值应使用的坐标系的标识符。
              </param>
      <returns>
              一个新 DbGeography 值进行了定义 GML 值与指定的坐标系统标识符。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geographyMarkup" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.FromText(System.String)">
      <summary>
               创建一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 值基于指定的已知文本值。
            </summary>
      <param name="wellKnownText">
                一个字符串，包含的已知文本表示形式的地理位置值。
              </param>
      <returns>
              新的 DbGeography 值与默认地理坐标系统标识符 (SRID) 的已知文本值定义 (<see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />)。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="wellKnownText" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.FromText(System.String,System.Int32)">
      <summary>
               创建一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 值基于指定的已知文本值和坐标系统标识符 (SRID)。
            </summary>
      <param name="wellKnownText">
                一个字符串，包含的已知文本表示形式的地理位置值。
              </param>
      <param name="coordinateSystemId">
                新的 DbGeography 值应使用的坐标系的标识符。
              </param>
      <returns>
              一个新 DbGeography 值进行了定义的已知文本值与指定的坐标系统标识符。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="wellKnownText" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.GeographyCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>
               创建一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 集合值基于指定已知二进制值和坐标系的标识符 (SRID)。
            </summary>
      <param name="geographyCollectionWellKnownBinary">
                一个字节数组，其中包含的众所周知的二进制表示形式的地理位置值。
              </param>
      <param name="coordinateSystemId">
                新的 DbGeography 值应使用的坐标系的标识符。
              </param>
      <returns>
              一个新 DbGeography 值进行了定义通过众所周知的二进制值，指定的坐标系统标识符。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geographyCollectionWellKnownBinary" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.GeographyCollectionFromText(System.String,System.Int32)">
      <summary>
               创建一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 集合值基于指定的已知文本值和坐标系统标识符 (SRID)。
            </summary>
      <param name="geographyCollectionWellKnownText">
                一个字符串，包含的已知文本表示形式的地理位置值。
              </param>
      <param name="coordinateSystemId">
                新的 DbGeography 值应使用的坐标系的标识符。
              </param>
      <returns>
              一个新 DbGeography 值进行了定义的已知文本值与指定的坐标系统标识符。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geographyCollectionWellKnownText" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.Intersection(System.Data.Spatial.DbGeography)">
      <summary>
               计算此 DbGeography 值和另一个的 DbGeography 值的交集。
            </summary>
      <param name="other">
                应为其计算与此值的交集的地理位置值。
              </param>
      <returns>
              一个新的 DbGeography 值，表示此地理位置值之间的交集和 <paramref name="other" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="other" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.Intersects(System.Data.Spatial.DbGeography)">
      <summary>
               确定此 DbGeography 值是否与指定的 DbGeography 参数空间上相交。
            </summary>
      <param name="other">
                地理位置值，它应与交集此地理位置值进行比较。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="other" /> 相交此地理位置值; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="other" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.LineFromBinary(System.Byte[],System.Int32)">
      <summary>
               创建一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 行基于指定已知二进制值和坐标系的标识符 (SRID) 值。
            </summary>
      <param name="lineWellKnownBinary">
                一个字节数组，其中包含的众所周知的二进制表示形式的地理位置值。
              </param>
      <param name="coordinateSystemId">
                新的 DbGeography 值应使用的坐标系的标识符。
              </param>
      <returns>
              一个新 DbGeography 值进行了定义通过众所周知的二进制值，指定的坐标系统标识符。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="lineWellKnownBinary" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.LineFromText(System.String,System.Int32)">
      <summary>
               创建一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 行基于指定的已知文本值和坐标系统标识符 (SRID) 值。
            </summary>
      <param name="lineWellKnownText">
                一个字符串，包含的已知文本表示形式的地理位置值。
              </param>
      <param name="coordinateSystemId">
                新的 DbGeography 值应使用的坐标系的标识符。
              </param>
      <returns>
              一个新 DbGeography 值进行了定义的已知文本值与指定的坐标系统标识符。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="lineWellKnownText" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.MultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>
              返回基于二进制值的多行值。
            </summary>
      <param name="multiLineWellKnownBinary">
                已知的二进制值。
              </param>
      <param name="coordinateSystemId">
                坐标系统标识符。
              </param>
      <returns>
              基于二进制值的多行值。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.MultiLineFromText(System.String,System.Int32)">
      <summary>
              从已知文本值返回多行值。
            </summary>
      <param name="multiLineWellKnownText">
                已知文本。
              </param>
      <param name="coordinateSystemId">
                坐标系统标识符。
              </param>
      <returns>
              来自已知文本值的多行值。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.MultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>
              从已知二进制值返回多点值。
            </summary>
      <param name="multiPointWellKnownBinary">
                已知的二进制值。
              </param>
      <param name="coordinateSystemId">
                坐标系统标识符。
              </param>
      <returns>
              已知二进制值的多点值。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.MultiPointFromText(System.String,System.Int32)">
      <summary>
              从已知文本值返回多点值。
            </summary>
      <param name="multiPointWellKnownText">
                已知文本值。
              </param>
      <param name="coordinateSystemId">
                坐标系统标识符。
              </param>
      <returns>
              来自已知文本值的多点值。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.MultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>
              从已知二进制值返回多个多边形值。
            </summary>
      <param name="multiPolygonWellKnownBinary">
                多多边形已知二进制值。
              </param>
      <param name="coordinateSystemId">
                坐标系统标识符。
              </param>
      <returns>
              来自已知的二进制值的多个多边形值。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.MultiPolygonFromText(System.String,System.Int32)">
      <summary>
              从已知文本值返回多个多边形值。
            </summary>
      <param name="multiPolygonWellKnownText">
                多个多边形已知文本值。
              </param>
      <param name="coordinateSystemId">
                坐标系统标识符。
              </param>
      <returns>
              已知文本值中的多个多边形值。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.PointAt(System.Int32)">
      <summary>
               如果此 DbGeography 值的元素从特定位置，它表示 linestring 或线性环。
               &lt; 参数名称 ="index"&gt; geography 该值应从中提取元素内的位置。 &lt; / param &gt;&lt; 返回 &gt; 中指定的位置，则在 linestring 或线性环; 它表示此地理位置值中的元素否则为 <see langword="null" />。 &lt; / 返回 &gt;
            </summary>
      <param name="index">
                索引。
              </param>
      <returns>
              此 DbGeography 值从特定位置的元素
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.PointFromBinary(System.Byte[],System.Int32)">
      <summary>
               创建一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 点基于指定已知二进制值和坐标系的标识符 (SRID) 值。
            </summary>
      <param name="pointWellKnownBinary">
                一个字节数组，其中包含的众所周知的二进制表示形式的地理位置值。
              </param>
      <param name="coordinateSystemId">
                新的 DbGeography 值应使用的坐标系的标识符。
              </param>
      <returns>
              一个新 DbGeography 值进行了定义通过众所周知的二进制值，指定的坐标系统标识符。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="pointWellKnownBinary" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.PointFromText(System.String,System.Int32)">
      <summary>
               创建一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 点基于指定的已知文本值和坐标系统标识符 (SRID) 值。
            </summary>
      <param name="pointWellKnownText">
                一个字符串，包含的已知文本表示形式的地理位置值。
              </param>
      <param name="coordinateSystemId">
                新的 DbGeography 值应使用的坐标系的标识符。
              </param>
      <returns>
              一个新 DbGeography 值进行了定义的已知文本值与指定的坐标系统标识符。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="pointWellKnownText" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.PolygonFromBinary(System.Byte[],System.Int32)">
      <summary>
               创建一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 多边形值基于指定已知二进制值和坐标系的标识符 (SRID)。
            </summary>
      <param name="polygonWellKnownBinary">
                一个字节数组，其中包含的众所周知的二进制表示形式的地理位置值。
              </param>
      <param name="coordinateSystemId">
                新的 DbGeography 值应使用的坐标系的标识符。
              </param>
      <returns>
              一个新 DbGeography 值进行了定义通过众所周知的二进制值，指定的坐标系统标识符。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="polygonWellKnownBinary" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.PolygonFromText(System.String,System.Int32)">
      <summary>
               创建一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 多边形值基于指定的已知文本值和坐标系统标识符 (SRID)。
            </summary>
      <param name="polygonWellKnownText">
                一个字符串，包含的已知文本表示形式的地理位置值。
              </param>
      <param name="coordinateSystemId">
                新的 DbGeography 值应使用的坐标系的标识符。
              </param>
      <returns>
              一个新 DbGeography 值进行了定义的已知文本值与指定的坐标系统标识符。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="polygonWellKnownText" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.SpatialEquals(System.Data.Spatial.DbGeography)">
      <summary>
               确定此 DbGeography 是否等于指定的 DbGeography 参数空间上。
            </summary>
      <param name="other">
                地理位置值，它应与此地理位置值的相等性比较。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="other" /> 空间上与此地理位置值相等; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="other" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.SymmetricDifference(System.Data.Spatial.DbGeography)">
      <summary>
               计算此 DbGeography 值和另一个的 DbGeography 值的余集。
            </summary>
      <param name="other">
                应为其计算与此值的余集的地理位置值。
              </param>
      <returns>
              一个新的 DbGeography 值，表示此地理位置值之间的余集和 <paramref name="other" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="other" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.ToString">
      <summary>
               返回的字符串表示形式的地理位置值。
            </summary>
      <returns>
              地理位置值的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeography.Union(System.Data.Spatial.DbGeography)">
      <summary>
               计算此 DbGeography 值和另一个的 DbGeography 值的并集。
            </summary>
      <param name="other">
                应为其计算此值与联合地理位置值。
              </param>
      <returns>
              一个新的 DbGeography 值，表示此地理位置值之间的联合和 <paramref name="other" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="other" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeographyWellKnownValue.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Spatial.DbGeographyWellKnownValue" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.AsBinary">
      <summary>
               将生成此 DbGeometry 值的众所周知的二进制表示形式。
            </summary>
      <returns>
              此 DbGeometry 值人所熟知二进制表示形式。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.AsGml">
      <summary>
               将生成此 DbGeometry 值的地理标记语言 (GML) 表示。
            </summary>
      <returns>
              包含的 GML 表示形式此 DbGeometry 值的字符串。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.AsText">
      <summary>
               生成的已知文本表示形式此 DbGeometry 值。
                包括仅 X 和 Y 坐标点。
            </summary>
      <returns>
              包含的已知文本表示形式此 DbGeometry 值的字符串。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.Buffer(System.Nullable{System.Double})">
      <summary>
              返回一个表示从一个几何图形实例的距离是小于或等于指定值的所有点的并集的几何对象。
            </summary>
      <param name="distance">
                距离。
              </param>
      <returns>
              一个表示所有点的并集的几何对象。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.Contains(System.Data.Spatial.DbGeometry)">
      <summary>
               确定是否此 DbGeometry 值在空间上包含指定的 DbGeometry 参数。
            </summary>
      <param name="other">
                几何值，它应与包含此几何值进行比较。
              </param>
      <returns>
              <see langword="true" /> 如果此几何值包含 <paramref name="other" />; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="other" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.Crosses(System.Data.Spatial.DbGeometry)">
      <summary>
               确定此 DbGeometry 值是否存在空间超过指定的 DbGeometry 参数。
            </summary>
      <param name="other">
                几何值，它应与此几何值进行比较。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="other" /> 超过此几何值; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="other" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.Difference(System.Data.Spatial.DbGeometry)">
      <summary>
               计算此 DbGeometry 值与另一个 DbGeometry 值之间的差异。
            </summary>
      <param name="other">
                几何值应为其计算与此值的差异。
              </param>
      <returns>
              新的 DbGeometry 值，表示此几何图形值之间的差异和 <paramref name="other" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="other" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.Disjoint(System.Data.Spatial.DbGeometry)">
      <summary>
               确定此 DbGeometry 是否将从指定的 DbGeometry 参数空间上不相联。
            </summary>
      <param name="other">
                几何值，它应与 disjointness 此几何值进行比较。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="other" /> 脱节此几何值; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="other" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.Distance(System.Data.Spatial.DbGeometry)">
      <summary>
               计算此 DbGeometry 值中最近的点与另一个 DbGeometry 值之间的距离。
            </summary>
      <param name="other">
                几何值应为其计算此值之间的距离。
              </param>
      <returns>
              一个 double 值，指定此几何值最接近的两个点之间的距离和 <paramref name="other" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="other" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.ElementAt(System.Int32)">
      <summary>
               如果此 DbGeometry 值的元素从特定位置，它表示几何图形集合。
               &lt; 参数名称 ="index"&gt; 此几何值应从中提取元素内的位置。 &lt; / param &gt;&lt; 返回 &gt; 中指定的位置，它表示集合的其他几何值; 如果此几何值中的元素否则为 <see langword="null" />。 &lt; / 返回 &gt;
            </summary>
      <param name="index">
                索引。
              </param>
      <returns>
              此 DbGeometry 值从特定位置的元素。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.FromBinary(System.Byte[])">
      <summary>
               创建一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值基于指定的熟知二进制值。
            </summary>
      <param name="wellKnownBinary">
                一个字节数组，其中包含的众所周知的二进制表示形式的几何值。
              </param>
      <returns>
              新的 DbGeometry 值按照众所周知的二进制值，则使用默认几何坐标系标识符的定义 (<see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />)。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="wellKnownBinary" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.FromBinary(System.Byte[],System.Int32)">
      <summary>
               创建一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值基于指定已知二进制值和坐标系的标识符 (SRID)。
            </summary>
      <param name="wellKnownBinary">
                一个字节数组，其中包含的众所周知的二进制表示形式的几何值。
              </param>
      <param name="coordinateSystemId">
                新的 DbGeometry 值应使用的坐标系的标识符。
              </param>
      <returns>
              一个新 DbGeometry 值进行了定义通过众所周知的二进制值，指定的坐标系统标识符。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="wellKnownBinary" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.FromGml(System.String)">
      <summary>
               创建一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值基于指定的地理标记语言 (GML) 值。
            </summary>
      <param name="geometryMarkup">
                一个字符串，包含地理标记语言 (GML) 表示的几何值。
              </param>
      <returns>
              新的 DbGeometry 值与默认几何坐标系标识符 (SRID) 的 GML 值定义 (<see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />)。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryMarkup" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.FromGml(System.String,System.Int32)">
      <summary>
               创建一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值基于指定地理标记语言 (GML) 值和坐标系的标识符 (SRID)。
            </summary>
      <param name="geometryMarkup">
                一个字符串，包含地理标记语言 (GML) 表示的几何值。
              </param>
      <param name="coordinateSystemId">
                新的 DbGeometry 值应使用的坐标系的标识符。
              </param>
      <returns>
              一个新 DbGeometry 值进行了定义 GML 值与指定的坐标系统标识符。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryMarkup" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.FromText(System.String)">
      <summary>
               创建一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值基于指定的已知文本值。
            </summary>
      <param name="wellKnownText">
                一个字符串，包含的已知文本表示形式的几何值。
              </param>
      <returns>
              新的 DbGeometry 值与默认几何坐标系标识符 (SRID) 的已知文本值定义 (<see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />)。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="wellKnownText" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.FromText(System.String,System.Int32)">
      <summary>
               创建一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值基于指定的已知文本值和坐标系统标识符 (SRID)。
            </summary>
      <param name="wellKnownText">
                一个字符串，包含的已知文本表示形式的几何值。
              </param>
      <param name="coordinateSystemId">
                新的 DbGeometry 值应使用的坐标系的标识符。
              </param>
      <returns>
              一个新 DbGeometry 值进行了定义的已知文本值与指定的坐标系统标识符。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="wellKnownText" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.GeometryCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>
               创建一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 集合值基于指定已知二进制值和坐标系的标识符 (SRID)。
            </summary>
      <param name="geometryCollectionWellKnownBinary">
                一个字节数组，其中包含的众所周知的二进制表示形式的几何值。
              </param>
      <param name="coordinateSystemId">
                新的 DbGeometry 值应使用的坐标系的标识符。
              </param>
      <returns>
              一个新 DbGeometry 值进行了定义通过众所周知的二进制值，指定的坐标系统标识符。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryCollectionWellKnownBinary" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.GeometryCollectionFromText(System.String,System.Int32)">
      <summary>
               创建一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 集合值基于指定的已知文本值和坐标系统标识符 (SRID)。
            </summary>
      <param name="geometryCollectionWellKnownText">
                一个字符串，包含的已知文本表示形式的几何值。
              </param>
      <param name="coordinateSystemId">
                新的 DbGeometry 值应使用的坐标系的标识符。
              </param>
      <returns>
              一个新 DbGeometry 值进行了定义的已知文本值与指定的坐标系统标识符。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryCollectionWellKnownText" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.InteriorRingAt(System.Int32)">
      <summary>
               返回一个内环从此 DbGeometry 值的特定位置，则在它表示多边形。
               &lt; 参数名称 ="index"&gt; 此几何值应从中提取的内环内的位置。 &lt; / param &gt;&lt; 返回 &gt; 中指定的位置，则在它表示多边形; 此几何值中的内环否则为 <see langword="null" />。 &lt; / 返回 &gt;
            </summary>
      <param name="index">
                索引。
              </param>
      <returns>
              从此 DbGeometry 值位于特定位置作为内环。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.Intersection(System.Data.Spatial.DbGeometry)">
      <summary>
               计算此 DbGeometry 值和另一个 DbGeometry 值的交集。
            </summary>
      <param name="other">
                应为其计算与此值的交集的几何值。
              </param>
      <returns>
              一个新的 DbGeometry 值，表示此几何图形值之间的交集和 <paramref name="other" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="other" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.Intersects(System.Data.Spatial.DbGeometry)">
      <summary>
               确定此 DbGeometry 值是否与指定的 DbGeometry 参数空间上相交。
            </summary>
      <param name="other">
                几何值，它应与交集此几何值进行比较。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="other" /> 相交此几何值; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="other" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.LineFromBinary(System.Byte[],System.Int32)">
      <summary>
               创建一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 行基于指定已知二进制值和坐标系的标识符 (SRID) 值。
            </summary>
      <param name="lineWellKnownBinary">
                一个字节数组，其中包含的众所周知的二进制表示形式的几何值。
              </param>
      <param name="coordinateSystemId">
                新的 DbGeometry 值应使用的坐标系的标识符。
              </param>
      <returns>
              一个新 DbGeometry 值进行了定义通过众所周知的二进制值，指定的坐标系统标识符。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="lineWellKnownBinary" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.LineFromText(System.String,System.Int32)">
      <summary>
               创建一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 行基于指定的已知文本值和坐标系统标识符 (SRID) 值。
            </summary>
      <param name="lineWellKnownText">
                一个字符串，包含的已知文本表示形式的几何值。
              </param>
      <param name="coordinateSystemId">
                新的 DbGeometry 值应使用的坐标系的标识符。
              </param>
      <returns>
              一个新 DbGeometry 值进行了定义的已知文本值与指定的坐标系统标识符。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="lineWellKnownText" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.MultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>
              返回基于二进制值的多行值。
            </summary>
      <param name="multiLineWellKnownBinary">
                已知的二进制值。
              </param>
      <param name="coordinateSystemId">
                坐标系统标识符。
              </param>
      <returns>
              基于二进制值的多行值。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.MultiLineFromText(System.String,System.Int32)">
      <summary>
              从已知文本值返回多行值。
            </summary>
      <param name="multiLineWellKnownText">
                已知文本。
              </param>
      <param name="coordinateSystemId">
                坐标系统标识符。
              </param>
      <returns>
              来自已知文本值的多行值。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.MultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>
              从已知二进制值返回多点值。
            </summary>
      <param name="multiPointWellKnownBinary">
                已知的二进制值。
              </param>
      <param name="coordinateSystemId">
                坐标系统标识符。
              </param>
      <returns>
              已知二进制值的多点值。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.MultiPointFromText(System.String,System.Int32)">
      <summary>
              从已知文本值返回多点值。
            </summary>
      <param name="multiPointWellKnownText">
                已知文本值。
              </param>
      <param name="coordinateSystemId">
                坐标系统标识符。
              </param>
      <returns>
              来自已知文本值的多点值。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.MultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>
              从已知二进制值返回多个多边形值。
            </summary>
      <param name="multiPolygonWellKnownBinary">
                多个多边形已知文本值。
              </param>
      <param name="coordinateSystemId">
                坐标系统标识符。
              </param>
      <returns>
              来自已知文本值的多点值。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.MultiPolygonFromText(System.String,System.Int32)">
      <summary>
              从已知二进制值返回多个多边形值。
            </summary>
      <param name="multiPolygonWellKnownText">
                多个多边形已知文本值。
              </param>
      <param name="coordinateSystemId">
                坐标系统标识符。
              </param>
      <returns>
              来自已知的二进制值的多个多边形值。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.Overlaps(System.Data.Spatial.DbGeometry)">
      <summary>
               确定此 DbGeometry 值是否与指定的 DbGeometry 参数空间上重叠。
            </summary>
      <param name="other">
                几何值，它应与重叠此几何值进行比较。
              </param>
      <returns>
              <see langword="true" /> 如果此几何值重叠 <paramref name="other" />; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="other" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.PointAt(System.Int32)">
      <summary>
               如果此 DbGeometry 值的元素从特定位置，它表示 linestring 或线性环。
               &lt; 参数名称 ="index"&gt; 此几何值应从中提取元素内的位置。 &lt; / param &gt;&lt; 返回 &gt; 中指定的位置，则在 linestring 或线性环; 它表示此几何图形值中的元素否则为 <see langword="null" />。 &lt; / 返回 &gt;
            </summary>
      <param name="index">
                索引。
              </param>
      <returns>
              此 DbGeometry 值从特定位置的元素。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.PointFromBinary(System.Byte[],System.Int32)">
      <summary>
               创建一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 点基于指定已知二进制值和坐标系的标识符 (SRID) 值。
            </summary>
      <param name="pointWellKnownBinary">
                一个字节数组，其中包含的众所周知的二进制表示形式的几何值。
              </param>
      <param name="coordinateSystemId">
                新的 DbGeometry 值应使用的坐标系的标识符。
              </param>
      <returns>
              一个新 DbGeometry 值进行了定义通过众所周知的二进制值，指定的坐标系统标识符。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="pointWellKnownBinary" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.PointFromText(System.String,System.Int32)">
      <summary>
               创建一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 点基于指定的已知文本值和坐标系统标识符 (SRID) 值。
            </summary>
      <param name="pointWellKnownText">
                一个字符串，包含的已知文本表示形式的几何值。
              </param>
      <param name="coordinateSystemId">
                新的 DbGeometry 值应使用的坐标系的标识符。
              </param>
      <returns>
              一个新 DbGeometry 值进行了定义的已知文本值与指定的坐标系统标识符。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="pointWellKnownText" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.PolygonFromBinary(System.Byte[],System.Int32)">
      <summary>
               创建一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 多边形值基于指定已知二进制值和坐标系的标识符 (SRID)。
            </summary>
      <param name="polygonWellKnownBinary">
                一个字节数组，其中包含的众所周知的二进制表示形式的几何值。
              </param>
      <param name="coordinateSystemId">
                新的 DbGeometry 值应使用的坐标系的标识符。
              </param>
      <returns>
              一个新 DbGeometry 值进行了定义通过众所周知的二进制值，指定的坐标系统标识符。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="polygonWellKnownBinary" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.PolygonFromText(System.String,System.Int32)">
      <summary>
               创建一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 多边形值基于指定的已知文本值和坐标系统标识符 (SRID)。
            </summary>
      <param name="polygonWellKnownText">
                一个字符串，包含的已知文本表示形式的几何值。
              </param>
      <param name="coordinateSystemId">
                新的 DbGeometry 值应使用的坐标系的标识符。
              </param>
      <returns>
              一个新 DbGeometry 值进行了定义的已知文本值与指定的坐标系统标识符。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="polygonWellKnownText" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.Relate(System.Data.Spatial.DbGeometry,System.String)">
      <summary>
               确定是否此 DbGeometry 值空间上与指定的 DbGeometry 参数根据给定的维扩展 9 交集的模型 (DE 9IM) 交集模式。
            </summary>
      <param name="other">
                几何值，它应与关系此几何值进行比较。
              </param>
      <param name="matrix">
                一个字符串，包含的文本表示形式定义该关系的 (DE 9IM) 交集模式。
              </param>
      <returns>
              <see langword="true" /> 如果此几何值与 <paramref name="other" /> 根据指定的交集模式矩阵; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="other" />
                  <paramref name="matrix" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.SpatialEquals(System.Data.Spatial.DbGeometry)">
      <summary>
               确定此 DbGeometry 是否等于指定的 DbGeometry 参数空间上。
            </summary>
      <param name="other">
                几何值，它应与此几何值的相等性比较。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="other" /> 空间上与此几何值相等; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="other" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.SymmetricDifference(System.Data.Spatial.DbGeometry)">
      <summary>
               计算此 DbGeometry 值与另一个 DbGeometry 值之间的余集。
            </summary>
      <param name="other">
                应为其计算与此值的余集的几何值。
              </param>
      <returns>
              一个新的 DbGeometry 值，表示此几何图形值之间的余集和 <paramref name="other" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="other" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.ToString">
      <summary>
               返回的字符串表示形式的几何值。
            </summary>
      <returns>
              几何值的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.Touches(System.Data.Spatial.DbGeometry)">
      <summary>
               确定此 DbGeometry 值是否存在空间涉及指定的 DbGeometry 参数。
            </summary>
      <param name="other">
                几何值，它应与此几何值进行比较。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="other" /> 接触此几何值; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="other" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.Union(System.Data.Spatial.DbGeometry)">
      <summary>
               计算此 DbGeometry 值和另一个的 DbGeometry 值的并集。
            </summary>
      <param name="other">
                几何值应为其计算与此值的并集。
              </param>
      <returns>
              一个新的 DbGeometry 值，表示此几何图形值之间的联合和 <paramref name="other" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="other" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometry.Within(System.Data.Spatial.DbGeometry)">
      <summary>
               确定此 DbGeometry 值空间上是否在指定的 DbGeometry 参数。
            </summary>
      <param name="other">
                几何值，它应与包含此几何值进行比较。
              </param>
      <returns>
              <see langword="true" /> 如果此几何值内 <paramref name="other" />; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="other" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbGeometryWellKnownValue.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Spatial.DbGeometryWellKnownValue" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialDataReader.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Spatial.DbSpatialDataReader" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialDataReader.GetGeography(System.Int32)">
      <summary>
               当在派生类型中实现，读取的一个实例 <see cref="T:System.Data.Spatial.DbGeography" /> 从指定的列序号处的列。
            </summary>
      <param name="ordinal">
                包含地理位置值列的序号
              </param>
      <returns>
              在指定的列值的 DbGeography 实例
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialDataReader.GetGeometry(System.Int32)">
      <summary>
               当在派生类型中实现，读取的一个实例 <see cref="T:System.Data.Spatial.DbGeometry" /> 从指定的列序号处的列。
            </summary>
      <param name="ordinal">
                数据的第几个记录中包含特定于提供程序几何图形数据的列
              </param>
      <returns>
              在指定的列值的 DbGeometry 实例
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Spatial.DbSpatialServices" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.AsBinary(System.Data.Spatial.DbGeography)">
      <summary>
              获取的人所熟知的二进制表示形式给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值。
            </summary>
      <param name="geographyValue">
                应为其生成的人所熟知的二进制文件地理位置值。
              </param>
      <returns>
              人所熟知的二进制表示形式给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geographyValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geographyValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.AsBinary(System.Data.Spatial.DbGeometry)">
      <summary>
              获取的人所熟知的二进制表示形式给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值。
            </summary>
      <param name="geometryValue">
                几何值应为其生成的人所熟知的二进制文件。
              </param>
      <returns>
              人所熟知的二进制表示形式给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.AsGml(System.Data.Spatial.DbGeography)">
      <summary>
              生成的地理标记语言 (GML) 表示形式这 <see cref="T:System.Data.Spatial.DbGeography" /> 值。
            </summary>
      <param name="geographyValue">
                应为其生成 GML 地理位置值。
              </param>
      <returns>
              包含的 GML 表示形式此 DbGeography 值的字符串。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geographyValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geographyValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.AsGml(System.Data.Spatial.DbGeometry)">
      <summary>
              生成的地理标记语言 (GML) 表示形式这 <see cref="T:System.Data.Spatial.DbGeometry" /> 值。
            </summary>
      <param name="geometryValue">
                应为其生成 GML 几何值。
              </param>
      <returns>
              包含的 GML 表示形式此 DbGeometry 值的字符串。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.AsText(System.Data.Spatial.DbGeography)">
      <summary>
              获取已知文本表示形式给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值。
               此值应包括的经度和纬度的点。
            </summary>
      <param name="geographyValue">
                应为其生成的已知文本地理位置值。
              </param>
      <returns>
              包含的已知文本表示形式的字符串 <paramref name="geographyValue" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geographyValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geographyValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.AsText(System.Data.Spatial.DbGeometry)">
      <summary>
              获取已知文本表示形式给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值，包括仅 X 和 Y 坐标点。
            </summary>
      <param name="geometryValue">
                应为其生成的已知文本几何值。
              </param>
      <returns>
              包含的已知文本表示形式的字符串 <paramref name="geometryValue" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.AsTextIncludingElevationAndMeasure(System.Data.Spatial.DbGeography)">
      <summary>
              返回的文本表示形式 <see cref="T:System.Data.Spatial.DbSpatialServices" /> 与标高和度量值。
            </summary>
      <param name="geographyValue">
                地理位置值中。
              </param>
      <returns>
              文本表示形式 <see cref="T:System.Data.Spatial.DbSpatialServices" />。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.AsTextIncludingElevationAndMeasure(System.Data.Spatial.DbGeometry)">
      <summary>
              返回的文本表示形式 <see cref="T:System.Data.Spatial.DbSpatialServices" /> 与标高和度量值。
            </summary>
      <param name="geometryValue">
                几何值中。
              </param>
      <returns>
              文本表示形式 <see cref="T:System.Data.Spatial.DbSpatialServices" /> 与标高和度量值。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Buffer(System.Data.Spatial.DbGeography,System.Double)">
      <summary>
              创建一个地理位置值，表示所有点较低或等于 <paramref name="distance" /> 从给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值。
            </summary>
      <param name="geographyValue">
                地理位置值中。
              </param>
      <param name="distance">
                一个双精度值，指定与距离 <paramref name="geographyValue" /> 到缓冲区。
              </param>
      <returns>
              一个新的 DbGeography 值，表示所有点小于或等于 <paramref name="distance" /> 从 <paramref name="geographyValue" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geographyValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geographyValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Buffer(System.Data.Spatial.DbGeometry,System.Double)">
      <summary>
              创建一个几何值，表示所有点较低或等于 <paramref name="distance" /> 从给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值。
            </summary>
      <param name="geometryValue">
                几何值中。
              </param>
      <param name="distance">
                一个双精度值，指定与距离 <paramref name="geometryValue" /> 到缓冲区。
              </param>
      <returns>
              一个新的 DbGeometry 值，表示所有点小于或等于 <paramref name="distance" /> 从 <paramref name="geometryValue" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Contains(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>
              确定是否有一个 <see cref="T:System.Data.Spatial.DbGeometry" /> 值在空间上包含其他。
            </summary>
      <param name="geometryValue">
                第一个的几何值。
              </param>
      <param name="otherGeometry">
                第二个几何值。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="geometryValue" /> 包含 <paramref name="otherGeometry" />; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                  <paramref name="otherGeometry" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                  <paramref name="otherGeometry" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.CreateGeography(System.Data.Spatial.DbSpatialServices,System.Object)">
      <summary>
               此方法旨在用于通过派生实现的 <see cref="M:System.Data.Spatial.DbSpatialServices.GeographyFromProviderValue(System.Object)" /> 后适合验证指定的提供程序值，以确保它是适合与派生的实现一起使用。
            </summary>
      <param name="spatialServices">
                空间的服务实例返回 <see cref="T:System.Data.Spatial.DbGeography" /> 值将取决于其实现的空间功能。
              </param>
      <param name="providerValue">
                提供程序值。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 实例，其中包含指定 <paramref name="providerValue" /> 并使用指定 <paramref name="spatialServices" /> 作为其空间的实现。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="spatialServices" />
                  <paramref name="providerValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.CreateGeometry(System.Data.Spatial.DbSpatialServices,System.Object)">
      <summary>
              此方法旨在用于通过派生实现的 <see cref="M:System.Data.Spatial.DbSpatialServices.GeometryFromProviderValue(System.Object)" /> 后适合验证指定的提供程序值，以确保它是适合与派生的实现一起使用。
            </summary>
      <param name="spatialServices">
                空间的服务实例返回 <see cref="T:System.Data.Spatial.DbGeometry" /> 值将取决于其实现的空间功能。
              </param>
      <param name="providerValue">
                一个提供程序的值。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 实例，其中包含指定 <paramref name="providerValue" /> 并使用指定 <paramref name="spatialServices" /> 作为其空间的实现。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="spatialServices" />
                  <paramref name="providerValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.CreateProviderValue(System.Data.Spatial.DbGeographyWellKnownValue)">
      <summary>
              创建一个提供程序特有的值与基于指定此空间服务实现兼容的已知 <see cref="T:System.Data.Spatial.DbGeography" /> 表示形式。
            </summary>
      <param name="wellKnownValue">
                一个实例 <see cref="T:System.Data.Spatial.DbGeographyWellKnownValue" /> ，包含地理位置值的人所熟知表示。
              </param>
      <returns>
              一个提供程序特定值对中包含的信息进行编码， <paramref name="wellKnownValue" /> 方式与此空间服务实现兼容。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="wellKnownValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.CreateProviderValue(System.Data.Spatial.DbGeometryWellKnownValue)">
      <summary>
              创建一个提供程序特有的值与基于指定此空间服务实现兼容的已知 <see cref="T:System.Data.Spatial.DbGeometry" /> 表示形式。
            </summary>
      <param name="wellKnownValue">
                一个实例 <see cref="T:System.Data.Spatial.DbGeometryWellKnownValue" /> ，其中包含的已知值的表示形式几何图形。
              </param>
      <returns>
              一个提供程序特定值对中包含的信息进行编码， <paramref name="wellKnownValue" /> 方式与此空间服务实现兼容。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="wellKnownValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.CreateWellKnownValue(System.Data.Spatial.DbGeography)">
      <summary>
              创建的一个实例 <see cref="T:System.Data.Spatial.DbGeographyWellKnownValue" /> ，表示指定 <see cref="T:System.Data.Spatial.DbGeography" /> 值使用一个或两个标准的人所熟知空间格式。
            </summary>
      <param name="geographyValue">
                地理位置值中。
              </param>
      <returns>
              人所熟知的表示形式 <paramref name="geographyValue" />, ，为新 <see cref="T:System.Data.Spatial.DbGeographyWellKnownValue" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geographyValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geographyValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.CreateWellKnownValue(System.Data.Spatial.DbGeometry)">
      <summary>
              创建的一个实例 <see cref="T:System.Data.Spatial.DbGeometryWellKnownValue" /> ，表示指定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值使用一个或两个标准的人所熟知空间格式。
            </summary>
      <param name="geometryValue">
                几何值中。
              </param>
      <returns>
              人所熟知的表示形式 <paramref name="geometryValue" />, ，为新 <see cref="T:System.Data.Spatial.DbGeometryWellKnownValue" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Crosses(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>
              确定是否两个给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 空间上跨值。
            </summary>
      <param name="geometryValue">
                第一个的几何值。
              </param>
      <param name="otherGeometry">
                第二个几何值。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="geometryValue" /> 跨越 <paramref name="otherGeometry" />; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                  <paramref name="otherGeometry" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                  <paramref name="otherGeometry" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Difference(System.Data.Spatial.DbGeography,System.Data.Spatial.DbGeography)">
      <summary>
              计算两个差异 <see cref="T:System.Data.Spatial.DbGeography" /> 值。
            </summary>
      <param name="geographyValue">
                第一个的地理位置值。
              </param>
      <param name="otherGeography">
                第二个地理位置值。
              </param>
      <returns>
              一个新的 DbGeography 值，表示之间的差异 <paramref name="geographyValue" /> 和 <paramref name="otherGeography" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geographyValue" />
                  <paramref name="otherGeography" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geographyValue" />
                  <paramref name="otherGeography" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Difference(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>
              计算两个区域之间的差 <see cref="T:System.Data.Spatial.DbGeometry" /> 值。
            </summary>
      <param name="geometryValue">
                第一个的几何值。
              </param>
      <param name="otherGeometry">
                第二个几何值。
              </param>
      <returns>
              一个新的 DbGeometry 值之间的差价 <paramref name="geometryValue" /> 和 <paramref name="otherGeometry" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                  <paramref name="otherGeometry" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                  <paramref name="otherGeometry" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Disjoint(System.Data.Spatial.DbGeography,System.Data.Spatial.DbGeography)">
      <summary>
              确定是否两个给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值是空间上不相联。
            </summary>
      <param name="geographyValue">
                第一个要比较 disjointness 地理位置值。
              </param>
      <param name="otherGeography">
                要比较 disjointness 第二个地理位置值。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="geographyValue" /> 不相交 <paramref name="otherGeography" />; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geographyValue" />
                  <paramref name="otherGeography" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geographyValue" />
                  <paramref name="otherGeography" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Disjoint(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>
              确定是否两个给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值是空间上不相联。
            </summary>
      <param name="geometryValue">
                第一个要比较 disjointness 几何值。
              </param>
      <param name="otherGeometry">
                要比较 disjointness 第二个几何值。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="geometryValue" /> 不相交 <paramref name="otherGeometry" />; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                  <paramref name="otherGeometry" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                  <paramref name="otherGeometry" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Distance(System.Data.Spatial.DbGeography,System.Data.Spatial.DbGeography)">
      <summary>
              计算两个最近的点之间的距离 <see cref="T:System.Data.Spatial.DbGeography" /> 值。
            </summary>
      <param name="geographyValue">
                第一个的地理位置值。
              </param>
      <param name="otherGeography">
                第二个地理位置值。
              </param>
      <returns>
              一个 double 值，指定最接近的两个点之间的距离 <paramref name="geographyValue" /> 和 <paramref name="otherGeography" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geographyValue" />
                  <paramref name="otherGeography" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geographyValue" />
                  <paramref name="otherGeography" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Distance(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>
              计算两个最近的点之间的距离 <see cref="T:System.Data.Spatial.DbGeometry" /> 值。
            </summary>
      <param name="geometryValue">
                第一个的几何值。
              </param>
      <param name="otherGeometry">
                第二个几何值。
              </param>
      <returns>
              一个 double 值，指定最接近的两个点之间的距离 <paramref name="geometryValue" /> 和 <paramref name="otherGeometry" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                  <paramref name="otherGeometry" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                  <paramref name="otherGeometry" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.ElementAt(System.Data.Spatial.DbGeography,System.Int32)">
      <summary>
              返回一个元素的给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值，则在它表示地理集合。
            </summary>
      <param name="geographyValue">
                地理位置值，不需要表示地理集合。
              </param>
      <param name="index">
                应从中提取元素的地理位置值中的位置。
              </param>
      <returns>
              中的元素 <paramref name="geographyValue" /> 位于 <paramref name="index" />, ，如果它表示集合的其他地理位置的值; 否则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geographyValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geographyValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.ElementAt(System.Data.Spatial.DbGeometry,System.Int32)">
      <summary>
              返回一个元素的给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值，则在它表示几何图形集合。
            </summary>
      <param name="geometryValue">
                几何值，不需要表示几何图形集合。
              </param>
      <param name="index">
                应从中提取元素的几何图形值中的位置。
              </param>
      <returns>
              中的元素 <paramref name="geometryValue" /> 位于 <paramref name="index" />, ，如果它表示集合的其他几何值; 否则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>
              创建一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 集合值基于指定的已知二进制值和坐标系的标识符 (SRID)。
            </summary>
      <param name="geographyCollectionWellKnownBinary">
                一个字节数组，其中包含的人所熟知的二进制表示形式的地理位置值。
              </param>
      <param name="coordinateSystemId">
                坐标系的标识符的新 <see cref="T:System.Data.Spatial.DbGeography" /> 值应使用。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 值与指定的坐标系统标识符 (SRID) 的人所熟知二进制值定义 (<see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />)。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geographyCollectionWellKnownBinary" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyCollectionFromText(System.String,System.Int32)">
      <summary>
              创建一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 集合值基于指定的已知文本值和坐标系统标识符 (SRID)。
            </summary>
      <param name="geographyCollectionWellKnownText">
                一个字符串，包含地理位置值的已知文本表示。
              </param>
      <param name="coordinateSystemId">
                坐标系的标识符的新 <see cref="T:System.Data.Spatial.DbGeography" /> 值应使用。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 值与指定的坐标系统标识符 (SRID) 的已知文本值定义 (<see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />)。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geographyCollectionWellKnownText" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyFromBinary(System.Byte[])">
      <summary>
              创建一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 值基于指定的人所熟知二进制值。
            </summary>
      <param name="wellKnownBinary">
                一个字节数组，其中包含的人所熟知的二进制表示形式的地理位置值。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 值使用默认的人所熟知二进制值定义 <see cref="T:System.Data.Spatial.DbGeography" /> 坐标系统标识符 (SRID) (<see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />)。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="wellKnownBinary" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyFromBinary(System.Byte[],System.Int32)">
      <summary>
              创建一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 值基于指定的已知二进制值和坐标系的标识符 (SRID)。
            </summary>
      <param name="wellKnownBinary">
                一个字节数组，其中包含的人所熟知的二进制表示形式的地理位置值。
              </param>
      <param name="coordinateSystemId">
                坐标系的标识符的新 <see cref="T:System.Data.Spatial.DbGeography" /> 值应使用。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 值与指定的坐标系统标识符 (SRID) 的人所熟知二进制值定义 (<see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />)。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="wellKnownBinary" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyFromGml(System.String)">
      <summary>
              创建一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 值基于指定的地理标记语言 (GML) 值。
            </summary>
      <param name="geographyMarkup">
                一个字符串，包含地理位置值的几何标记语言 (GML) 表示。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 值使用默认的 GML 值定义 <see cref="T:System.Data.Spatial.DbGeography" /> 坐标系统标识符 (SRID) (<see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />)。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geographyMarkup" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyFromGml(System.String,System.Int32)">
      <summary>
              创建一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 值基于指定地理标记语言 (GML) 值和坐标系的标识符 (SRID)。
            </summary>
      <param name="geographyMarkup">
                一个字符串，包含地理位置值的几何标记语言 (GML) 表示。
              </param>
      <param name="coordinateSystemId">
                坐标系的标识符的新 <see cref="T:System.Data.Spatial.DbGeography" /> 值应使用。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 值与指定的坐标系统标识符 (SRID) 的 GML 值定义。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geographyMarkup" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyFromProviderValue(System.Object)">
      <summary>
              创建一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 值根据与此空间服务实现兼容的提供程序特有的值。
            </summary>
      <param name="providerValue">
                提供程序特有的值，此空间服务实现是能够解释为地理位置值。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 值作为后盾此空间服务实现和指定的提供程序值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="providerValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="providerValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyFromText(System.String)">
      <summary>
              创建一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 值基于指定的已知文本值。
            </summary>
      <param name="wellKnownText">
                一个字符串，包含地理位置值的已知文本表示。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 值使用默认的已知文本值定义 <see cref="T:System.Data.Spatial.DbGeography" /> 坐标系统标识符 (SRID) (<see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />)。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="wellKnownText" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyFromText(System.String,System.Int32)">
      <summary>
              创建一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 值基于指定的已知文本值和坐标系统标识符 (SRID)。
            </summary>
      <param name="wellKnownText">
                一个字符串，包含地理位置值的已知文本表示。
              </param>
      <param name="coordinateSystemId">
                坐标系的标识符的新 <see cref="T:System.Data.Spatial.DbGeography" /> 值应使用。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 值与指定的坐标系统标识符 (SRID) 的已知文本值定义 (<see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />)。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="wellKnownText" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyLineFromBinary(System.Byte[],System.Int32)">
      <summary>
              创建一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 行基于指定的已知二进制值和坐标系的标识符 (SRID) 值。
            </summary>
      <param name="lineWellKnownBinary">
                一个字节数组，其中包含的人所熟知的二进制表示形式的地理位置值。
              </param>
      <param name="coordinateSystemId">
                坐标系的标识符的新 <see cref="T:System.Data.Spatial.DbGeography" /> 值应使用。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 值与指定的坐标系统标识符 (SRID) 的人所熟知二进制值定义 (<see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />)。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="lineWellKnownBinary" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyLineFromText(System.String,System.Int32)">
      <summary>
              创建一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 行基于指定的已知文本值和坐标系统标识符 (SRID) 值。
            </summary>
      <param name="lineWellKnownText">
                一个字符串，包含地理位置值的已知文本表示。
              </param>
      <param name="coordinateSystemId">
                坐标系的标识符的新 <see cref="T:System.Data.Spatial.DbGeography" /> 值应使用。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 值与指定的坐标系统标识符 (SRID) 的已知文本值定义 (<see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />)。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="lineWellKnownText" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyMultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>
              基于指定的已知二进制值和坐标系统标识符创建一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 多行值。
            </summary>
      <param name="multiLineWellKnownBinary">
                已知的二进制值。
              </param>
      <param name="coordinateSystemId">
                坐标系统标识符。
              </param>
      <returns>
              新的 <see cref="T:System.Data.Spatial.DbGeography" /> 多行值。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyMultiLineFromText(System.String,System.Int32)">
      <summary>
              基于指定的已知文本值和坐标系统标识符，创建一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 多行值。
            </summary>
      <param name="multiLineWellKnownText">
                已知文本值。
              </param>
      <param name="coordinateSystemId">
                坐标系统标识符。
              </param>
      <returns>
              一个新的 <see cref="T:System.Data.Spatial.DbGeography" /> 多行值。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyMultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>
              基于指定的已知二进制值和坐标系统标识符创建一个新的 <see cref="T:System.Data.Spatial.DbGeography" /> 多点值。
            </summary>
      <param name="multiPointWellKnownBinary">
                已知的二进制值。
              </param>
      <param name="coordinateSystemId">
                坐标系统标识符。
              </param>
      <returns>
              一个新的 <see cref="T:System.Data.Spatial.DbGeography" /> 多点值。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyMultiPointFromText(System.String,System.Int32)">
      <summary>
              基于指定的已知文本值和坐标系统标识符，创建新的 <see cref="T:System.Data.Spatial.DbGeography" /> 多点值。
            </summary>
      <param name="multiPointWellKnownText">
                已知文本值。
              </param>
      <param name="coordinateSystemId">
                坐标系统标识符。
              </param>
      <returns>
              一个新的 <see cref="T:System.Data.Spatial.DbGeography" /> 多点值。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyMultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>
              基于指定的已知二进制值和坐标系统标识符创建一个新的 <see cref="T:System.Data.Spatial.DbGeography" /> 多多边形值。
            </summary>
      <param name="multiPolygonWellKnownBinary">
                已知的二进制值。
              </param>
      <param name="coordinateSystemId">
                坐标系统标识符。
              </param>
      <returns>
              一个新的 <see cref="T:System.Data.Spatial.DbGeography" /> 多多边形值。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyMultiPolygonFromText(System.String,System.Int32)">
      <summary>
              基于指定的已知文本值和坐标系统标识符，创建一个新的 <see cref="T:System.Data.Spatial.DbGeography" /> 多多边形值。
            </summary>
      <param name="multiPolygonWellKnownText">
                已知文本值。
              </param>
      <param name="coordinateSystemId">
                坐标系统标识符。
              </param>
      <returns>
              一个新的 <see cref="T:System.Data.Spatial.DbGeography" /> 多多边形值。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyPointFromBinary(System.Byte[],System.Int32)">
      <summary>
              创建一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 点基于指定的已知二进制值和坐标系的标识符 (SRID) 值。
            </summary>
      <param name="pointWellKnownBinary">
                一个字节数组，其中包含的人所熟知的二进制表示形式的地理位置值。
              </param>
      <param name="coordinateSystemId">
                坐标系的标识符的新 <see cref="T:System.Data.Spatial.DbGeography" /> 值应使用。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 值与指定的坐标系统标识符 (SRID) 的人所熟知二进制值定义 (<see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />)。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="pointWellKnownBinary" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyPointFromText(System.String,System.Int32)">
      <summary>
              创建一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 点基于指定的已知文本值和坐标系统标识符 (SRID) 值。
            </summary>
      <param name="pointWellKnownText">
                一个字符串，包含地理位置值的已知文本表示。
              </param>
      <param name="coordinateSystemId">
                坐标系的标识符的新 <see cref="T:System.Data.Spatial.DbGeography" /> 值应使用。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 值与指定的坐标系统标识符 (SRID) 的已知文本值定义 (<see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />)。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="pointWellKnownText" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>
              创建一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 多边形值基于指定的已知二进制值和坐标系的标识符 (SRID)。
            </summary>
      <param name="polygonWellKnownBinary">
                一个字节数组，其中包含的人所熟知的二进制表示形式的地理位置值。
              </param>
      <param name="coordinateSystemId">
                坐标系的标识符的新 <see cref="T:System.Data.Spatial.DbGeography" /> 值应使用。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 值与指定的坐标系统标识符 (SRID) 的人所熟知二进制值定义 (<see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />)。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="polygonWellKnownBinary" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeographyPolygonFromText(System.String,System.Int32)">
      <summary>
              创建一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 多边形值基于指定的已知文本值和坐标系统标识符 (SRID)。
            </summary>
      <param name="polygonWellKnownText">
                一个字符串，包含地理位置值的已知文本表示。
              </param>
      <param name="coordinateSystemId">
                坐标系的标识符的新 <see cref="T:System.Data.Spatial.DbGeography" /> 值应使用。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 值与指定的坐标系统标识符 (SRID) 的已知文本值定义 (<see cref="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId" />)。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="polygonWellKnownText" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>
              创建一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 集合值基于指定的已知二进制值和坐标系的标识符 (SRID)。
            </summary>
      <param name="geometryCollectionWellKnownBinary">
                一个字节数组，其中包含的人所熟知的二进制表示形式的几何值。
              </param>
      <param name="coordinateSystemId">
                坐标系的标识符的新 <see cref="T:System.Data.Spatial.DbGeometry" />值应使用。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值与指定的坐标系统标识符 (SRID) 的人所熟知二进制值定义 (<see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />)。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryCollectionWellKnownBinary" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryCollectionFromText(System.String,System.Int32)">
      <summary>
              创建一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 集合值基于指定的已知文本值和坐标系统标识符 (SRID)。
            </summary>
      <param name="geometryCollectionWellKnownText">
                一个字符串，包含的已知文本表示形式的几何值。
              </param>
      <param name="coordinateSystemId">
                坐标系的标识符的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值应使用。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值与指定的坐标系统标识符 (SRID) 的已知文本值定义 (<see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />)。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryCollectionWellKnownText" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryFromBinary(System.Byte[])">
      <summary>
              创建一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值基于指定的人所熟知二进制值。
            </summary>
      <param name="wellKnownBinary">
                一个字节数组，其中包含的人所熟知的二进制表示形式的几何值。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值使用默认的人所熟知二进制值定义 <see cref="T:System.Data.Spatial.DbGeometry" /> 坐标系统标识符 (SRID) (<see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />)。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="wellKnownBinary" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryFromBinary(System.Byte[],System.Int32)">
      <summary>
              创建一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值基于指定的已知二进制值和坐标系的标识符 (SRID)。
            </summary>
      <param name="wellKnownBinary">
                一个字节数组，其中包含的人所熟知的二进制表示形式的几何值。
              </param>
      <param name="coordinateSystemId">
                坐标系的标识符的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值应使用。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值与指定的坐标系统标识符 (SRID) 的人所熟知二进制值定义 (<see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />)。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="wellKnownBinary" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryFromGml(System.String)">
      <summary>
              创建一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值基于指定的地理标记语言 (GML) 值。
            </summary>
      <param name="geometryMarkup">
                一个字符串，包含地理标记语言 (GML) 表示的几何值。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值使用默认的 GML 值定义 <see cref="T:System.Data.Spatial.DbGeometry" /> 坐标系统标识符 (SRID) (<see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />)。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryMarkup" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryFromGml(System.String,System.Int32)">
      <summary>
              创建一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值基于指定地理标记语言 (GML) 值和坐标系的标识符 (SRID)。
            </summary>
      <param name="geometryMarkup">
                一个字符串，包含地理标记语言 (GML) 表示的几何值。
              </param>
      <param name="coordinateSystemId">
                坐标系的标识符的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值应使用。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值与指定的坐标系统标识符 (SRID) 的 GML 值定义。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryMarkup" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryFromProviderValue(System.Object)">
      <summary>
              创建一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值根据与此空间服务实现兼容的提供程序特有的值。
            </summary>
      <param name="providerValue">
                提供程序特有的值，此空间服务实现是能够解释为几何值。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值作为后盾此空间服务实现和指定的提供程序值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="providerValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="providerValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryFromText(System.String)">
      <summary>
              创建一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值基于指定的已知文本值。
            </summary>
      <param name="wellKnownText">
                一个字符串，包含的已知文本表示形式的几何值。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值使用默认的已知文本值定义 <see cref="T:System.Data.Spatial.DbGeometry" /> 坐标系统标识符 (SRID) (<see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />)。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="wellKnownText" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryFromText(System.String,System.Int32)">
      <summary>
              创建一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值基于指定的已知文本值和坐标系统标识符 (SRID)。
            </summary>
      <param name="wellKnownText">
                一个字符串，包含的已知文本表示形式的几何值。
              </param>
      <param name="coordinateSystemId">
                坐标系的标识符的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值应使用。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值与指定的坐标系统标识符 (SRID) 的已知文本值定义 (<see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />)。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="wellKnownText" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryLineFromBinary(System.Byte[],System.Int32)">
      <summary>
              创建一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 行基于指定的已知二进制值和坐标系的标识符 (SRID) 值。
            </summary>
      <param name="lineWellKnownBinary">
                一个字节数组，其中包含的人所熟知的二进制表示形式的几何值。
              </param>
      <param name="coordinateSystemId">
                坐标系的标识符的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值应使用。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值与指定的坐标系统标识符 (SRID) 的人所熟知二进制值定义 (<see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />)。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="lineWellKnownBinary" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryLineFromText(System.String,System.Int32)">
      <summary>
              创建一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 行基于指定的已知文本值和坐标系统标识符 (SRID) 值。
            </summary>
      <param name="lineWellKnownText">
                一个字符串，包含的已知文本表示形式的几何值。
              </param>
      <param name="coordinateSystemId">
                坐标系的标识符的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值应使用。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值与指定的坐标系统标识符 (SRID) 的已知文本值定义 (<see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />)。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="lineWellKnownText" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryMultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>
              基于指定的已知二进制值和坐标系统标识符创建一个新的 <see cref="T:System.Data.Spatial.DbGeometry" /> 多行值。
            </summary>
      <param name="multiLineWellKnownBinary">
                已知的二进制值。
              </param>
      <param name="coordinateSystemId">
                坐标系统标识符。
              </param>
      <returns>
              新的 <see cref="T:System.Data.Spatial.DbGeometry" /> 多行值。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryMultiLineFromText(System.String,System.Int32)">
      <summary>
              基于指定的已知文本值和坐标系统标识符，创建一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 多行值。
            </summary>
      <param name="multiLineWellKnownText">
                已知文本值。
              </param>
      <param name="coordinateSystemId">
                坐标系统标识符。
              </param>
      <returns>
              一个新的 <see cref="T:System.Data.Spatial.DbGeometry" /> 多行值。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryMultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>
              基于指定的已知二进制值和坐标系统标识符创建一个新的 <see cref="T:System.Data.Spatial.DbGeometry" /> 多点值。
            </summary>
      <param name="multiPointWellKnownBinary">
                已知的二进制值。
              </param>
      <param name="coordinateSystemId">
                坐标系统标识符。
              </param>
      <returns>
              一个新的 <see cref="T:System.Data.Spatial.DbGeometry" /> 多点值。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryMultiPointFromText(System.String,System.Int32)">
      <summary>
              基于指定的已知文本值和坐标系统标识符，创建新的 <see cref="T:System.Data.Spatial.DbGeometry" /> 多点值。
            </summary>
      <param name="multiPointWellKnownText">
                已知文本值。
              </param>
      <param name="coordinateSystemId">
                坐标系统标识符。
              </param>
      <returns>
              一个新的 <see cref="T:System.Data.Spatial.DbGeometry" /> 多点值。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryMultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>
              基于指定的已知二进制值和坐标系统标识符创建一个新的 <see cref="T:System.Data.Spatial.DbGeometry" /> 多多边形值。
            </summary>
      <param name="multiPolygonWellKnownBinary">
                已知的二进制值。
              </param>
      <param name="coordinateSystemId">
                坐标系统标识符。
              </param>
      <returns>
              一个新的 <see cref="T:System.Data.Spatial.DbGeometry" /> 多多边形值。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryMultiPolygonFromText(System.String,System.Int32)">
      <summary>
              基于指定的已知文本值和坐标系统标识符，创建一个新的 <see cref="T:System.Data.Spatial.DbGeometry" /> 多多边形值。
            </summary>
      <param name="multiPolygonKnownText">
                已知文本值。
              </param>
      <param name="coordinateSystemId">
                坐标系统标识符。
              </param>
      <returns>
              一个新的 <see cref="T:System.Data.Spatial.DbGeometry" /> 多多边形值。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryPointFromBinary(System.Byte[],System.Int32)">
      <summary>
              创建一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 点基于指定的已知二进制值和坐标系的标识符 (SRID) 值。
            </summary>
      <param name="pointWellKnownBinary">
                一个字节数组，其中包含的人所熟知的二进制表示形式的几何值。
              </param>
      <param name="coordinateSystemId">
                坐标系的标识符的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值应使用。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值与指定的坐标系统标识符 (SRID) 的人所熟知二进制值定义 (<see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />)。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="pointWellKnownBinary" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryPointFromText(System.String,System.Int32)">
      <summary>
              创建一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 点基于指定的已知文本值和坐标系统标识符 (SRID) 值。
            </summary>
      <param name="pointWellKnownText">
                一个字符串，包含的已知文本表示形式的几何值。
              </param>
      <param name="coordinateSystemId">
                坐标系的标识符的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值应使用。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值与指定的坐标系统标识符 (SRID) 的已知文本值定义 (<see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />)。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="pointWellKnownText" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>
              创建一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 多边形值基于指定的已知二进制值和坐标系的标识符 (SRID)。
            </summary>
      <param name="polygonWellKnownBinary">
                一个字节数组，其中包含的人所熟知的二进制表示形式的几何值。
              </param>
      <param name="coordinateSystemId">
                坐标系的标识符的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值应使用。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值与指定的坐标系统标识符 (SRID) 的人所熟知二进制值定义 (<see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />)。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="polygonWellKnownBinary" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GeometryPolygonFromText(System.String,System.Int32)">
      <summary>
              创建一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 多边形值基于指定的已知文本值和坐标系统标识符 (SRID)。
            </summary>
      <param name="polygonWellKnownText">
                一个字符串，包含的已知文本表示形式的几何值。
              </param>
      <param name="coordinateSystemId">
                坐标系的标识符的新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值应使用。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值与指定的坐标系统标识符 (SRID) 的已知文本值定义 (<see cref="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId" />)。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="polygonWellKnownText" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="coordinateSystemId" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetArea(System.Data.Spatial.DbGeography)">
      <summary>
               返回一个可以为 null 的 double 值，该值指示的区域给定 <see cref="T:System.Data.Spatial.DbGeography" /> 如果的值不代表一个面可以为 null 的值。
            </summary>
      <param name="geographyValue">
                地理位置值，不需要表示曲面。
              </param>
      <returns>
              可以为 null 的双精度值，该值指示的区域给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geographyValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geographyValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetArea(System.Data.Spatial.DbGeometry)">
      <summary>
              返回一个可以为 null 的 double 值，该值指示的区域给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 如果的值不代表一个面可以为 null 的值。
            </summary>
      <param name="geometryValue">
                几何值，不需要表示曲面。
              </param>
      <returns>
              可以为 null 的双精度值，该值指示的区域给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetBoundary(System.Data.Spatial.DbGeometry)">
      <summary>
              返回一个可以为 null 的 double 值，该值指示的边界给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值。
            </summary>
      <param name="geometryValue">
                几何值中。
              </param>
      <returns>
              边界给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetCentroid(System.Data.Spatial.DbGeometry)">
      <summary>
               返回 <see cref="T:System.Data.Spatial.DbGeometry" /> 值，该值表示给定 DbGeometry 值，如果值不代表一个面可以为 null 的形心。
            </summary>
      <param name="geometryValue">
                几何值，不需要表示曲面。
              </param>
      <returns>
              形心 <paramref name="geometryValue" />, ，如果它表示面; 否则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetConvexHull(System.Data.Spatial.DbGeometry)">
      <summary>
              返回一个可以为 null 的 double 值，该值指示的凸包给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值。
            </summary>
      <param name="geometryValue">
                几何值中。
              </param>
      <returns>
              凸包的给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetCoordinateSystemId(System.Data.Spatial.DbGeography)">
      <summary>
              返回的坐标系统标识符给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值。
            </summary>
      <param name="geographyValue">
                地理位置值中。
              </param>
      <returns>
              坐标系统标识符给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetCoordinateSystemId(System.Data.Spatial.DbGeometry)">
      <summary>
              返回的坐标系统标识符给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值。
            </summary>
      <param name="geometryValue">
                几何值中。
              </param>
      <returns>
              坐标系统标识符给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetDimension(System.Data.Spatial.DbGeography)">
      <summary>
              获取维度的给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值或者值为集合的最大元素的维度。
            </summary>
      <param name="geographyValue">
                维度值应为其检索地理位置值。
              </param>
      <returns>
              维度的 <paramref name="geographyValue" />, ，或最大元素维度，如果 <see cref="T:System.Data.Spatial.DbGeography" /> 是一个集合。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geographyValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geographyValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetDimension(System.Data.Spatial.DbGeometry)">
      <summary>
              获取维度的给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值或者值为集合的最大元素的维度。
            </summary>
      <param name="geometryValue">
                几何值应为其检索维度值。
              </param>
      <returns>
              维度的 <paramref name="geometryValue" />, ，或最大元素维度，如果 <see cref="T:System.Data.Spatial.DbGeometry" /> 是一个集合。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetElementCount(System.Data.Spatial.DbGeography)">
      <summary>
               返回中的元素数给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值，则在它表示地理集合。
            </summary>
      <param name="geographyValue">
                地理位置值，不需要表示地理集合。
              </param>
      <returns>
              中的元素数 <paramref name="geographyValue" />, ，如果它表示集合的其他地理位置的值; 否则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geographyValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geographyValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetElementCount(System.Data.Spatial.DbGeometry)">
      <summary>
              返回中的元素数给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值，则在它表示几何图形集合。
            </summary>
      <param name="geometryValue">
                几何值，不需要表示几何图形集合。
              </param>
      <returns>
              中的元素数 <paramref name="geometryValue" />, ，如果它表示集合的其他几何值; 否则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetElevation(System.Data.Spatial.DbGeography)">
      <summary>
               返回导致提升 （Z 坐标） 的给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值，则在它表示一个点。
            </summary>
      <param name="geographyValue">
                地理位置值，不需要表示的点。
              </param>
      <returns>
              提升 （Z 坐标） 的 <paramref name="geographyValue" />, ，如果它表示的点; 否则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geographyValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geographyValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetElevation(System.Data.Spatial.DbGeometry)">
      <summary>
              返回导致提升 (Z) 的给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值，则在它表示一个点。
            </summary>
      <param name="geometryValue">
                几何值，不需要表示的点。
              </param>
      <returns>
              提升 (Z) <paramref name="geometryValue" />, ，如果它表示的点; 否则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetEndPoint(System.Data.Spatial.DbGeography)">
      <summary>
               返回 <see cref="T:System.Data.Spatial.DbGeography" /> 表示给定的 DbGeography 值可能为 null 的值不代表一条曲线的终点的值。
            </summary>
      <param name="geographyValue">
                地理位置值，不需要表示一条曲线。
              </param>
      <returns>
              终结点 <paramref name="geographyValue" />, ，如果它表示曲线; 否则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geographyValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geographyValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetEndPoint(System.Data.Spatial.DbGeometry)">
      <summary>
              返回 <see cref="T:System.Data.Spatial.DbGeometry" /> 表示给定的 DbGeometry 值可能为 null 的值不代表一条曲线的终点的值。
            </summary>
      <param name="geometryValue">
                几何值，不需要表示一条曲线。
              </param>
      <returns>
              终结点 <paramref name="geometryValue" />, ，如果它表示曲线; 否则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetEnvelope(System.Data.Spatial.DbGeometry)">
      <summary>
              获取信封 （最小值边界框） 的给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值，表示为几何值。
            </summary>
      <param name="geometryValue">
                应为其检索信封值的几何值。
              </param>
      <returns>
              将信封 <paramref name="geometryValue" />, ，作为 <see cref="T:System.Data.Spatial.DbGeometry" /> 值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetExteriorRing(System.Data.Spatial.DbGeometry)">
      <summary>
              返回 <see cref="T:System.Data.Spatial.DbGeometry" /> 值，该值表示给定的 DbGeometry 值可能为 null，如果值不表示多边形的外环。
            </summary>
      <param name="geometryValue">
                几何值，不需要表示多边形。
              </param>
      <returns>
              在上表示的外环的 DbGeometry 值 <paramref name="geometryValue" />, ，如果它表示多边形; 否则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetInteriorRingCount(System.Data.Spatial.DbGeometry)">
      <summary>
               返回数的内部环在给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值，则在它表示多边形。
            </summary>
      <param name="geometryValue">
                几何值，不需要表示多边形。
              </param>
      <returns>
              中的元素数 <paramref name="geometryValue" />, ，如果它表示多边形; 否则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetIsClosed(System.Data.Spatial.DbGeography)">
      <summary>
               返回一个可以为 null 的布尔值，是否给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值为已关闭，则可能为 null 的值不代表一条曲线如果。
            </summary>
      <param name="geographyValue">
                地理位置值，不需要表示一条曲线。
              </param>
      <returns>
              <see langword="true" /> 如果给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值已关闭，否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geographyValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geographyValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetIsClosed(System.Data.Spatial.DbGeometry)">
      <summary>
              返回一个可以为 null 的布尔值，是否给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值为已关闭，则可能为 null 的值不代表一条曲线如果。
            </summary>
      <param name="geometryValue">
                几何值，不需要表示一条曲线。
              </param>
      <returns>
              <see langword="true" /> 如果给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值已关闭，否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetIsEmpty(System.Data.Spatial.DbGeography)">
      <summary>
              返回一个可以为 null 的布尔值，指示给定的 <see cref="T:System.Data.Spatial.DbGeography" /> 值是否为空。
            </summary>
      <param name="geographyValue">
                地理值。
              </param>
      <returns>
              如果给定的 <see cref="T:System.Data.Spatial.DbGeography" /> 值为空，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetIsEmpty(System.Data.Spatial.DbGeometry)">
      <summary>
              返回一个可以为 null 的布尔值，指示给定的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值是否为空。
            </summary>
      <param name="geometryValue">
                几何值。
              </param>
      <returns>
              如果给定的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值为空，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetIsRing(System.Data.Spatial.DbGeometry)">
      <summary>
              返回一个可以为 null 的布尔值，是否给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值是采用环，它可能的值不代表一条曲线的情况下为 null。
            </summary>
      <param name="geometryValue">
                几何值，不需要表示一条曲线。
              </param>
      <returns>
              <see langword="true" /> 如果给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值是一个环; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetIsSimple(System.Data.Spatial.DbGeometry)">
      <summary>
              返回一个可以为 null 的布尔值，是否给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值很简单。
            </summary>
      <param name="geometryValue">
                几何值中。
              </param>
      <returns>
              <see langword="true" /> 如果给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值将简单; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetIsValid(System.Data.Spatial.DbGeometry)">
      <summary>
              返回一个可以为 null 的布尔值，是否给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值是否有效。
            </summary>
      <param name="geometryValue">
                几何值中。
              </param>
      <returns>
              <see langword="true" /> 如果给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值是有效的; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetLatitude(System.Data.Spatial.DbGeography)">
      <summary>
               返回的纬度坐标给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值，则在它表示一个点。
            </summary>
      <param name="geographyValue">
                地理位置值，不需要表示的点。
              </param>
      <returns>
              纬度坐标给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geographyValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geographyValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetLength(System.Data.Spatial.DbGeography)">
      <summary>
              返回一个可以为 null 的 double 值，该值指示的长度给定 <see cref="T:System.Data.Spatial.DbGeography" /> 可能的值不代表一条曲线的情况下为 null 的值。
            </summary>
      <param name="geographyValue">
                地理位置值，不需要表示一条曲线。
              </param>
      <returns>
              长度给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geographyValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geographyValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetLength(System.Data.Spatial.DbGeometry)">
      <summary>
              返回一个可以为 null 的 double 值，该值指示的长度给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 可能的值不代表一条曲线的情况下为 null 的值。
            </summary>
      <param name="geometryValue">
                几何值，不需要表示一条曲线。
              </param>
      <returns>
              长度给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetLongitude(System.Data.Spatial.DbGeography)">
      <summary>
              返回的经度坐标给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值，则在它表示一个点。
            </summary>
      <param name="geographyValue">
                地理位置值，不需要表示的点。
              </param>
      <returns>
              经度坐标给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geographyValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geographyValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetMeasure(System.Data.Spatial.DbGeography)">
      <summary>
              返回的 M （度量） 坐标给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值，则在它表示一个点。
            </summary>
      <param name="geographyValue">
                地理位置值，不需要表示的点。
              </param>
      <returns>
              M （度量） 协调的给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geographyValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geographyValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetMeasure(System.Data.Spatial.DbGeometry)">
      <summary>
              返回的 M （度量） 坐标给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值，则在它表示一个点。
            </summary>
      <param name="geometryValue">
                几何值，不需要表示的点。
              </param>
      <returns>
              M （度量） 协调的给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetPointCount(System.Data.Spatial.DbGeography)">
      <summary>
              返回数中的点给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值，则在它表示 linestring 或线性环。
            </summary>
      <param name="geographyValue">
                地理位置值，不需要表示 linestring 或线性环。
              </param>
      <returns>
              中点的数量给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geographyValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geographyValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetPointCount(System.Data.Spatial.DbGeometry)">
      <summary>
              如果点数表示 linestring 或线性环，则返回给定的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值中的点数。
            </summary>
      <param name="geometryValue">
                几何值，它不需要表示 linestring 或线性环。
              </param>
      <returns>
              给定的 <see cref="T:System.Data.Spatial.DbGeometry" /> 值中的点数。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  geometryValue
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetPointOnSurface(System.Data.Spatial.DbGeometry)">
      <summary>
              返回 <see cref="T:System.Data.Spatial.DbGeometry" /> 值，该值表示给定的 DbGeometry 值可能为 null 的值不代表曲面的图面上的点。
            </summary>
      <param name="geometryValue">
                几何值，不需要表示曲面。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Spatial.DbGeometry" /> 值，该值表示给定 DbGeometry 值的图面上的点。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetSpatialTypeName(System.Data.Spatial.DbGeography)">
      <summary>
              返回一个值，该值指示空间类型名称给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值。
            </summary>
      <param name="geographyValue">
                地理位置值中。
              </param>
      <returns>
              空间类型名称的给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetSpatialTypeName(System.Data.Spatial.DbGeometry)">
      <summary>
              返回一个值，该值指示给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值的空间类型名称。
            </summary>
      <param name="geometryValue">
                几何值。
              </param>
      <returns>
              给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值的空间类型名称。
            </returns>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetStartPoint(System.Data.Spatial.DbGeography)">
      <summary>
              返回 <see cref="T:System.Data.Spatial.DbGeography" /> 值，该值表示给定的 DbGeography 值可能为 null 的值不代表一条曲线的起始点。
            </summary>
      <param name="geographyValue">
                地理位置值，不需要表示一条曲线。
              </param>
      <returns>
              起始点给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geographyValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geographyValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetStartPoint(System.Data.Spatial.DbGeometry)">
      <summary>
              返回 <see cref="T:System.Data.Spatial.DbGeometry" /> 值，该值表示给定的 DbGeometry 值可能为 null 的值不代表一条曲线的起始点。
            </summary>
      <param name="geometryValue">
                几何值，不需要表示一条曲线。
              </param>
      <returns>
              起始点给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetXCoordinate(System.Data.Spatial.DbGeometry)">
      <summary>
              返回的 X 坐标值给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值，则在它表示一个点。
            </summary>
      <param name="geometryValue">
                几何值，不需要表示的点。
              </param>
      <returns>
              X 坐标给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.GetYCoordinate(System.Data.Spatial.DbGeometry)">
      <summary>
              返回的 Y 坐标值给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值，则在它表示一个点。
            </summary>
      <param name="geometryValue">
                几何值，不需要表示的点。
              </param>
      <returns>
              Y 坐标给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.InteriorRingAt(System.Data.Spatial.DbGeometry,System.Int32)">
      <summary>
              返回从一个内的环给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值，则在它表示多边形。
            </summary>
      <param name="geometryValue">
                几何值，不需要表示多边形。
              </param>
      <param name="index">
                应从中提取元素的几何图形值中的位置。
              </param>
      <returns>
              内部环位于 <paramref name="geometryValue" /> 位于 <paramref name="index" />, ，如果它表示多边形; 否则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Intersection(System.Data.Spatial.DbGeography,System.Data.Spatial.DbGeography)">
      <summary>
              计算两个交集 <see cref="T:System.Data.Spatial.DbGeography" /> 值。
            </summary>
      <param name="geographyValue">
                第一个的地理位置值。
              </param>
      <param name="otherGeography">
                第二个地理位置值。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 值，该值表示之间的交集 <paramref name="geographyValue" /> 和 <paramref name="otherGeography" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geographyValue" />
                  <paramref name="otherGeography" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geographyValue" />
                  <paramref name="otherGeography" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Intersection(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>
              计算两个交集 <see cref="T:System.Data.Spatial.DbGeometry" /> 值。
            </summary>
      <param name="geometryValue">
                第一个的几何值。
              </param>
      <param name="otherGeometry">
                第二个几何值。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值，该值表示之间的交集 <paramref name="geometryValue" /> 和 <paramref name="otherGeometry" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                  <paramref name="otherGeometry" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                  <paramref name="otherGeometry" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Intersects(System.Data.Spatial.DbGeography,System.Data.Spatial.DbGeography)">
      <summary>
              确定是否两个给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值空间上相交。
            </summary>
      <param name="geographyValue">
                要比较的交集的第一个地理位置值。
              </param>
      <param name="otherGeography">
                要比较的交集的第二个地理位置值。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="geographyValue" /> 相交 <paramref name="otherGeography" />; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geographyValue" />
                  <paramref name="otherGeography" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geographyValue" />
                  <paramref name="otherGeography" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Intersects(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>
              确定是否两个给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值空间上相交。
            </summary>
      <param name="geometryValue">
                要比较的交集的第一个几何图形值。
              </param>
      <param name="otherGeometry">
                要比较的交集的第二个几何值。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="geometryValue" /> 相交 <paramref name="otherGeometry" />; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                  <paramref name="otherGeometry" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                  <paramref name="otherGeometry" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Overlaps(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>
              确定是否两个给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值空间上重叠。
            </summary>
      <param name="geometryValue">
                第一个的几何值。
              </param>
      <param name="otherGeometry">
                第二个几何值。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="geometryValue" /> 重叠 <paramref name="otherGeometry" />; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                  <paramref name="otherGeometry" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                  <paramref name="otherGeometry" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.PointAt(System.Data.Spatial.DbGeography,System.Int32)">
      <summary>
              返回一个点元素的给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值，则在它表示 linestring 或线性环。
            </summary>
      <param name="geographyValue">
                地理位置值，不需要表示 linestring 或线性环。
              </param>
      <param name="index">
                应从中提取元素的地理位置值中的位置。
              </param>
      <returns>
              中的点 <paramref name="geographyValue" /> 位于 <paramref name="index" />, ，如果它是表示 linestring 或线性环; 否则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geographyValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geographyValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.PointAt(System.Data.Spatial.DbGeometry,System.Int32)">
      <summary>
              返回一个点元素的给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值，则在它表示 linestring 或线性环。
            </summary>
      <param name="geometryValue">
                几何值，它不需要表示 linestring 或线性环。
              </param>
      <param name="index">
                应从中提取元素的几何图形值中的位置。
              </param>
      <returns>
              中的点 <paramref name="geometryValue" /> 位于 <paramref name="index" />, ，如果它是表示 linestring 或线性环; 否则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Relate(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry,System.String)">
      <summary>
              确定是否两个给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值是否存在空间关系根据给定的维扩展 9 交集的模型 (DE 9IM) 交集模式。
            </summary>
      <param name="geometryValue">
                第一个的几何值。
              </param>
      <param name="otherGeometry">
                几何值，它应与关系的第一个几何图形值进行比较。
              </param>
      <param name="matrix">
                一个字符串，包含的文本表示形式定义该关系的 (DE 9IM) 交集模式。
              </param>
      <returns>
              <see langword="true" /> 如果此 <paramref name="geometryValue" /> 值与 <paramref name="otherGeometry" /> 根据指定的交集模式矩阵; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                  <paramref name="otherGeometry" />
                  <paramref name="matrix" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                  <paramref name="otherGeometry" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.SpatialEquals(System.Data.Spatial.DbGeography,System.Data.Spatial.DbGeography)">
      <summary>
              确定是否两个给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值是否存在空间相等。
            </summary>
      <param name="geographyValue">
                要比较相等的第一个地理位置值。
              </param>
      <param name="otherGeography">
                要比较相等的第二个地理位置值。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="geographyValue" /> 空间上等同于 <paramref name="otherGeography" />; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geographyValue" />
                  <paramref name="otherGeography" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geographyValue" />
                  <paramref name="otherGeography" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.SpatialEquals(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>
              确定是否两个给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值是否存在空间相等。
            </summary>
      <param name="geometryValue">
                要比较相等的第一个几何图形值。
              </param>
      <param name="otherGeometry">
                要比较相等的第二个几何值。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="geometryValue" /> 空间上等同于 <paramref name="otherGeometry" />; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                  <paramref name="otherGeometry" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                  <paramref name="otherGeometry" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.SymmetricDifference(System.Data.Spatial.DbGeography,System.Data.Spatial.DbGeography)">
      <summary>
              计算两个的余集 <see cref="T:System.Data.Spatial.DbGeography" /> 值。
            </summary>
      <param name="geographyValue">
                第一个的地理位置值。
              </param>
      <param name="otherGeography">
                第二个地理位置值。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 值，该值表示个的余集 <paramref name="geographyValue" /> 和 <paramref name="otherGeography" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geographyValue" />
                  <paramref name="otherGeography" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geographyValue" />
                  <paramref name="otherGeography" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.SymmetricDifference(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>
              计算两个区域之间的余集 <see cref="T:System.Data.Spatial.DbGeometry" /> 值。
            </summary>
      <param name="geometryValue">
                第一个的几何值。
              </param>
      <param name="otherGeometry">
                第二个几何值。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值，该值表示之间的余集 <paramref name="geometryValue" /> 和 <paramref name="otherGeometry" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                  <paramref name="otherGeometry" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                  <paramref name="otherGeometry" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Touches(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>
              确定是否两个给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值空间上接触。
            </summary>
      <param name="geometryValue">
                第一个的几何值。
              </param>
      <param name="otherGeometry">
                第二个几何值。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="geometryValue" /> 接触 <paramref name="otherGeometry" />; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                  <paramref name="otherGeometry" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                  <paramref name="otherGeometry" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Union(System.Data.Spatial.DbGeography,System.Data.Spatial.DbGeography)">
      <summary>
              计算两个联合 <see cref="T:System.Data.Spatial.DbGeography" /> 值。
            </summary>
      <param name="geographyValue">
                第一个的地理位置值。
              </param>
      <param name="otherGeography">
                第二个地理位置值。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Spatial.DbGeography" /> 值，该值表示的联合 <paramref name="geographyValue" /> 和 <paramref name="otherGeography" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geographyValue" />
                  <paramref name="otherGeography" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geographyValue" />
                  <paramref name="otherGeography" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Union(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>
              计算两个联合 <see cref="T:System.Data.Spatial.DbGeometry" /> 值。
            </summary>
      <param name="geometryValue">
                第一个的几何值。
              </param>
      <param name="otherGeometry">
                第二个几何值。
              </param>
      <returns>
              一个新 <see cref="T:System.Data.Spatial.DbGeometry" /> 值，该值表示的联合 <paramref name="geometryValue" /> 和 <paramref name="otherGeometry" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                  <paramref name="otherGeometry" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                  <paramref name="otherGeometry" />
                </exception>
    </member>
    <member name="M:System.Data.Spatial.DbSpatialServices.Within(System.Data.Spatial.DbGeometry,System.Data.Spatial.DbGeometry)">
      <summary>
              确定是否有一个 <see cref="T:System.Data.Spatial.DbGeometry" /> 值在空间上包含在另。
            </summary>
      <param name="geometryValue">
                第一个的几何值。
              </param>
      <param name="otherGeometry">
                第二个几何值。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="geometryValue" /> 位于 <paramref name="otherGeometry" />; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="geometryValue" />
                  <paramref name="otherGeometry" />
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="geometryValue" />
                  <paramref name="otherGeometry" />
                </exception>
    </member>
    <member name="M:System.Data.UpdateException.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.UpdateException" /> 的新实例。
            </summary>
    </member>
    <member name="M:System.Data.UpdateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              使用序列化数据初始化 <see cref="T:System.Data.UpdateException" /> 的新实例。
            </summary>
      <param name="info">
                <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它保存关于所引发异常的序列化对象数据。
              </param>
      <param name="context">
                <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。
              </param>
    </member>
    <member name="M:System.Data.UpdateException.#ctor(System.String)">
      <summary>
              使用指定的错误消息初始化 <see cref="T:System.Data.UpdateException" /> 的新实例。
            </summary>
      <param name="message">
                描述错误的消息。
              </param>
    </member>
    <member name="M:System.Data.UpdateException.#ctor(System.String,System.Exception)">
      <summary>
              初始化 <see cref="T:System.Data.UpdateException" /> 类的新实例，该类使用指定的错误消息和对作为此异常原因的内部异常的引用。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="innerException">
                导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。
              </param>
    </member>
    <member name="M:System.Data.UpdateException.#ctor(System.String,System.Exception,System.Collections.Generic.IEnumerable{System.Data.Objects.ObjectStateEntry})">
      <summary>
              初始化 <see cref="T:System.Data.UpdateException" /> 类的新实例，该类使用指定的错误消息、对内部异常的引用，以及 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 对象的可枚举集合。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="innerException">
                导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。
              </param>
      <param name="stateEntries">
                <see cref="T:System.Data.Objects.ObjectStateEntry" /> 对象的集合。
              </param>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbAggregate.Arguments">
      <summary>
              获取对此 <see cref="T:System.Data.Common.CommandTrees.DbAggregate" /> 定义参数的表达式列表。
            </summary>
      <returns>
              对此 <see cref="T:System.Data.Common.CommandTrees.DbAggregate" /> 定义参数的表达式列表。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbAggregate.ResultType">
      <summary>
              获取此 <see cref="T:System.Data.Common.CommandTrees.DbAggregate" /> 的结果类型。
            </summary>
      <returns>
              此 <see cref="T:System.Data.Common.CommandTrees.DbAggregate" /> 的结果类型。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbApplyExpression.Apply">
      <summary>
              获取 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />，它指定对输入集中的每个元素调用的函数。
            </summary>
      <returns>
              <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />，指定对输入集中的每个元素调用的函数。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbApplyExpression.Input">
      <summary>
              获取用于指定输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。
            </summary>
      <returns>
              用于指定输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbArithmeticExpression.Arguments">
      <summary>
              获取用于定义当前参数的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 元素列表。
            </summary>
      <returns>
              固定大小的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 元素列表。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbBinaryExpression.Left">
      <summary>
              获取或设置定义左边参数的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。
            </summary>
      <returns>
              定义左边参数的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  表达式是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  表达式与 <see cref="T:System.Data.Common.CommandTrees.DbBinaryExpression" /> 的命令目录树不关联，
                
                  或它的结果类型不等同于或不能提升为左边自变量所要求的类型。
                </exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbBinaryExpression.Right">
      <summary>
              获取或设置定义右边参数的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。
            </summary>
      <returns>
              定义右边参数的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  表达式是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  表达式与 <see cref="T:System.Data.Common.CommandTrees.DbBinaryExpression" /> 的命令目录树不关联，
                
                  或它的结果类型不等同于或不能提升为右边自变量所要求的类型。
                </exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbCaseExpression.Else">
      <summary>
              获取或设置 <see langword="Else" /> 此子句 <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />。
            </summary>
      <returns>
              <see langword="Else" /> 此子句 <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  表达式是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  表达式与 <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" /> 的命令目录树不关联，
                
                  或它的结果类型不等同于或不能提升为 <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" /> 的结果类型。
                </exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbCaseExpression.Then">
      <summary>
              获取 <see langword="Then" /> 此子句 <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />。
            </summary>
      <returns>
              <see langword="Then" /> 此子句 <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbCaseExpression.When">
      <summary>
              获取 <see langword="When" /> 此子句 <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />。
            </summary>
      <returns>
              <see langword="When" /> 此子句 <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbCommandTree.Parameters">
      <summary>
              获取在此 <see cref="T:System.Data.Common.CommandTrees.DbCommandTree" /> 中可以引用的每个参数的名称和相应类型。
            </summary>
      <returns>
              在此 <see cref="T:System.Data.Common.CommandTrees.DbCommandTree" /> 中可以引用的每个参数的名称和相应类型。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbConstantExpression.Value">
      <summary>
              获取常量值。
            </summary>
      <returns>
              常量值。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbCrossJoinExpression.Inputs">
      <summary>
              获取 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> 列表，该列表提供可联接的输入集。
            </summary>
      <returns>
              提供可联接的输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> 列表。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbDeleteCommandTree.Predicate">
      <summary>
              获取一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，它指定用于确定目标集合中应删除的成员的谓词。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，指定用于确定目标集合中应删除的成员的谓词。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbExpression.ExpressionKind">
      <summary>
              获取表达式的类型，类型指示该表达式的运算。
            </summary>
      <returns>
              表达式的类型，指示该表达式的运算。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbExpression.ResultType">
      <summary>
              获取表达式的结果类型的类型元数据。
            </summary>
      <returns>
              表达式的结果类型的类型元数据。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbExpressionBinding.Expression">
      <summary>
              获取或设置用于定义输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。
            </summary>
      <returns>
              用于定义输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  表达式是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  表达式与绑定的命令目录树不关联，或它的结果类型不等同于或不能提升为当前属性值的结果类型。
                </exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbExpressionBinding.Variable">
      <summary>
              获取 <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" /> 引用元素变量。
            </summary>
      <returns>
              变量引用。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbExpressionBinding.VariableName">
      <summary>
              获取指定给元素变量的名称。
            </summary>
      <returns>
              指定给元素变量的名称。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbExpressionBinding.VariableType">
      <summary>
              获取元素变量的类型元数据。
            </summary>
      <returns>
              元素变量的类型元数据。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbFilterExpression.Input">
      <summary>
              获取用于指定输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。
            </summary>
      <returns>
              用于指定输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbFilterExpression.Predicate">
      <summary>
              获取或设置 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，它指定用于筛选输入集的谓词。
            </summary>
      <returns>
              指定用于筛选输入集的谓词的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  表达式是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  表达式不是关联的命令目录树 <see cref="T:System.Data.Common.CommandTrees.DbFilterExpression" />, ，或者它的结果类型不是 <see langword="Boolean" /> 类型。
                </exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbFunctionAggregate.Distinct">
      <summary>
              获取一个值，该值指示此聚合是否为非重复聚合。
            </summary>
      <returns>
              <see langword="true" /> 如果聚合为非重复聚合;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbFunctionAggregate.Function">
      <summary>
              获取指定要调用的聚合函数的方法元数据。
            </summary>
      <returns>
              指定要调用的聚合函数的方法元数据。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbFunctionCommandTree.EdmFunction">
      <summary>
              获取表示正在调用的函数的 <see cref="T:System.Data.Metadata.Edm.EdmFunction" />。
            </summary>
      <returns>
              表示正在调用的函数的 <see cref="T:System.Data.Metadata.Edm.EdmFunction" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbFunctionCommandTree.ResultType">
      <summary>
              获取函数的第一个结果集的预期结果类型。
            </summary>
      <returns>
              函数的第一个结果集的预期结果类型。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbFunctionExpression.Arguments">
      <summary>
              获取 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 列表，该列表提供函数的参数。
            </summary>
      <returns>
              提供函数的参数的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 列表。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbFunctionExpression.Function">
      <summary>
              获取要调用的函数的元数据。
            </summary>
      <returns>
              要调用的函数的元数据。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupByExpression.Aggregates">
      <summary>
              获取 <see cref="T:System.Data.Common.CommandTrees.DbAggregate" /> 列表，该列表提供可应用的聚合函数。
            </summary>
      <returns>
              提供可应用的聚合函数的 <see cref="T:System.Data.Common.CommandTrees.DbAggregate" /> 列表。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupByExpression.Input">
      <summary>
              获取 <see cref="T:System.Data.Common.CommandTrees.DbGroupExpressionBinding" />，它指定输入集，并提供对集元素和组元素变量的访问。
            </summary>
      <returns>
              指定输入集并提供对集元素和组元素变量的访问的 <see cref="T:System.Data.Common.CommandTrees.DbGroupExpressionBinding" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupByExpression.Keys">
      <summary>
              获取 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 列表，该列表提供分组键。
            </summary>
      <returns>
              提供分组键的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 列表。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupExpressionBinding.Expression">
      <summary>
              获取或设置用于定义输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。
            </summary>
      <returns>
              用于定义输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  表达式是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  表达式与 <see cref="T:System.Data.Common.CommandTrees.DbGroupExpressionBinding" /> 的命令目录树不关联，或它的结果类型不等同于或不能提升为当前属性值的结果类型。
                </exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupExpressionBinding.GroupAggregate">
      <summary>
              获取 <see cref="T:System.Data.Common.CommandTrees.DbGroupAggregate" /> 表示组中的元素的集合。
            </summary>
      <returns>
              组中的元素。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupExpressionBinding.GroupVariable">
      <summary>
              获取 <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" /> 引用组元素变量。
            </summary>
      <returns>
              对组元素变量的引用。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupExpressionBinding.GroupVariableName">
      <summary>
              获取指定给组元素变量的名称。
            </summary>
      <returns>
              指定给组元素变量的名称。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupExpressionBinding.GroupVariableType">
      <summary>
              获取组元素变量的类型元数据。
            </summary>
      <returns>
              组元素变量的类型元数据。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupExpressionBinding.Variable">
      <summary>
              获取 <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" /> 引用元素变量。
            </summary>
      <returns>
              对元素变量的引用。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupExpressionBinding.VariableName">
      <summary>
              获取指定给元素变量的名称。
            </summary>
      <returns>
              指定给元素变量的名称。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupExpressionBinding.VariableType">
      <summary>
              获取元素变量的类型元数据。
            </summary>
      <returns>
              元素变量的类型元数据。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbInsertCommandTree.Returning">
      <summary>
              获取一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，它指定要基于修改的行返回的结果投影。
            </summary>
      <returns>
              <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，指定要基于修改的行返回的结果投影。
              <see langword="null" /> 指示此命令应返回任何结果。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbInsertCommandTree.SetClauses">
      <summary>
              获取定义插入操作的插入 Set 子句的列表。
            </summary>
      <returns>
              定义插入操作的插入 Set 子句的列表。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbIsOfExpression.OfType">
      <summary>
              获取自变量的类型元数据将与其进行比较的类型元数据。
            </summary>
      <returns>
              自变量的类型元数据将与其进行比较的类型元数据。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbJoinExpression.JoinCondition">
      <summary>
              获取或设置要应用的联接条件。
            </summary>
      <returns>
              要应用的联接条件。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  表达式是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  表达式不是关联的命令目录树 <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" />, ，或者它的结果类型不是 <see langword="Boolean" /> 类型。
                </exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbJoinExpression.Left">
      <summary>
              获取提供左输入的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。
            </summary>
      <returns>
              提供左输入的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbJoinExpression.Right">
      <summary>
              获取提供右输入的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。
            </summary>
      <returns>
              提供右输入的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLambda.Body">
      <summary>
              获取 lambda 表达式的主体。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 表示的 lambda 函数的正文。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLambda.Variables">
      <summary>
              获取 lambda 表达式的参数。
            </summary>
      <returns>
              以 DbVariableReferenceExpression 对象形式表示的 lambda 函数参数的列表。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLambdaExpression.Arguments">
      <summary>
              获取 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 提供 Lambda 函数将应用于的参数的列表。
            </summary>
      <returns>
              <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 列表。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLambdaExpression.Lambda">
      <summary>
              获取 <see cref="T:System.Data.Common.CommandTrees.DbLambda" /> 表示应用此表达式的 Lambda 函数。
            </summary>
      <returns>
              <see cref="T:System.Data.Common.CommandTrees.DbLambda" /> 表示应用此表达式的 Lambda 函数。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLikeExpression.Argument">
      <summary>
              获取或设置一个表达式，它指定要针对给定模式进行比较的字符串。
            </summary>
      <returns>
              一个表达式，它指定要针对给定模式进行比较的字符串。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  表达式是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  表达式与 <see cref="T:System.Data.Common.CommandTrees.DbLikeExpression" /> 的命令目录树不关联，或它的结果类型不是字符串类型。
                </exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLikeExpression.Escape">
      <summary>
              获取或设置一个表达式，它提供用于比较的可选的转义字符串。
            </summary>
      <returns>
              一个表达式，它提供用于比较的可选的转义字符串。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  表达式是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  表达式与 <see cref="T:System.Data.Common.CommandTrees.DbLikeExpression" /> 的命令目录树不关联，或它的结果类型不是字符串类型。
                </exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLikeExpression.Pattern">
      <summary>
              获取或设置一个表达式，它指定比较给定字符串时所针对的模式。
            </summary>
      <returns>
              一个表达式，它指定比较给定字符串时所针对的模式。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  表达式是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  表达式与 <see cref="T:System.Data.Common.CommandTrees.DbLikeExpression" /> 的命令目录树不关联，或它的结果类型不是字符串类型。
                </exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLimitExpression.Argument">
      <summary>
              获取或设置指定输入集合的表达式。
            </summary>
      <returns>
              一个指定输入集合的表达式。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  表达式是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  表达式与 <see cref="T:System.Data.Common.CommandTrees.DbLimitExpression" /> 的命令目录树不关联，或它的结果类型不是集合类型。
                </exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLimitExpression.Limit">
      <summary>
              获取或设置指定从输入集合中返回的元素数限制的表达式。
            </summary>
      <returns>
              一个指定从输入集合中返回的元素数限制的表达式。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  表达式是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  表达式与 <see cref="T:System.Data.Common.CommandTrees.DbLimitExpression" /> 的命令目录树不关联、不是 <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" /> 或 <see cref="T:System.Data.Common.CommandTrees.DbParameterReferenceExpression" /> 之一，或它的结果类型不等同于或不能提升为 64 位的 Integer 类型。
                </exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLimitExpression.WithTies">
      <summary>
              获取限制操作是否将包括绑定结果。
               与 <see cref="P:System.Data.Common.CommandTrees.DbLimitExpression.Limit" /> 值指定的结果相比，包括绑定结果时可能会生成更多的结果。
            </summary>
      <returns>
              <see langword="true" /> 如果限制操作将包括，绑定结果;否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbModificationCommandTree.Target">
      <summary>
              获取为数据操作语言 (DML) 操作指定目标表的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。
            </summary>
      <returns>
              为 DML 操作指定目标表的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbNewInstanceExpression.Arguments">
      <summary>
              获取一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 列表，该列表可为新实例提供属性/列值或集元素。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 列表，它可以为新实例提供属性/列值或集元素。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbOfTypeExpression.OfType">
      <summary>
              获取应从集自变量中检索的元素类型的元数据。
            </summary>
      <returns>
              应从集自变量中检索的元素类型的元数据。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbParameterReferenceExpression.ParameterName">
      <summary>
              获取所引用的参数的名称。
            </summary>
      <returns>
              所引用的参数的名称。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbProjectExpression.Input">
      <summary>
              获取用于指定输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。
            </summary>
      <returns>
              用于指定输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbProjectExpression.Projection">
      <summary>
              获取或设置定义投影的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。
            </summary>
      <returns>
              定义投影的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  表达式是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  表达式与 <see cref="T:System.Data.Common.CommandTrees.DbProjectExpression" /> 的命令目录树不关联，或它的结果集不等同于或不能提升为当前投影的引用类型。
                </exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbPropertyExpression.Instance">
      <summary>
              获取或设置一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，它用于定义应从中检索属性的实例。
            </summary>
      <returns>
              用于定义应从中检索属性的实例的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  表达式是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  表达式与 <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression" /> 的命令目录树不关联，或它的结果类型不等同于或不能提升为定义该属性的类型。
                </exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbPropertyExpression.Property">
      <summary>
              获取要检索的属性的属性元数据。
            </summary>
      <returns>
              要检索的属性的属性元数据。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbQuantifierExpression.Input">
      <summary>
              获取用于指定输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。
            </summary>
      <returns>
              用于指定输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbQuantifierExpression.Predicate">
      <summary>
              获取或设置 <see langword="Boolean" /> 应为输入集中的每个元素计算的谓词。
            </summary>
      <returns>
              <see langword="Boolean" /> 应为输入集中的每个元素计算的谓词。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  表达式是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  表达式与 <see cref="T:System.Data.Common.CommandTrees.DbQuantifierExpression" /> 的命令目录树不关联，
                
                  或它的结果类型不是 <see langword="Boolean" /> 类型。
                </exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbQueryCommandTree.Query">
      <summary>
              获取 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 定义查询操作逻辑。
            </summary>
      <returns>
              一个定义查询操作逻辑的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  表达式是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  表达式与另一个命令目录树关联。
                </exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbRefExpression.EntitySet">
      <summary>
              获取包含该实例的实体集的元数据。
            </summary>
      <returns>
              包含该实例的实体集的元数据。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression.NavigateFrom">
      <summary>
              获取要从其开始导航的关系 End 的元数据。
            </summary>
      <returns>
              要从其开始导航的关系 End 的元数据。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression.NavigateTo">
      <summary>
              获取要导航到的关系 End 的元数据。
            </summary>
      <returns>
              要导航到的关系 End 的元数据。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression.NavigationSource">
      <summary>
              获取或设置一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，它用于指定导航的起始点，并且必须是对某个实体实例的引用。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，指定应从其开始导航的源关系 End 的实例。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  表达式是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  表达式与 <see cref="T:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression" /> 的命令目录树不关联，或它的结果集不等同于或不能提升为 <see cref="P:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression.NavigateFrom" /> 属性的引用类型。
                </exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression.Relationship">
      <summary>
              获取要导航的关系的元数据。
            </summary>
      <returns>
              要导航的关系的元数据。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbScanExpression.Target">
      <summary>
              获取所引用的实体集或关系集的元数据。
            </summary>
      <returns>
              所引用的实体集或关系集的元数据。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSetClause.Property">
      <summary>
              获取一个指定应更新的属性的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。
            </summary>
      <returns>
              一个指定应更新的属性的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSetClause.Value">
      <summary>
              获取一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，它指定用于更新属性的新值。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，指定用于更新属性的新值。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSkipExpression.Count">
      <summary>
              获取或设置指定要在输入集合中跳过的元素数的表达式。
            </summary>
      <returns>
              一个表达式，指定要在输入集合中跳过的元素数。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  表达式是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  表达式与 <see cref="T:System.Data.Common.CommandTrees.DbSkipExpression" /> 的命令目录树不关联；表达式既不是 <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" /> 也不是 <see cref="T:System.Data.Common.CommandTrees.DbParameterReferenceExpression" />；
                
                   或者表达式的结果类型不等同于或不能提升为 64 位的 Integer 类型。
                </exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSkipExpression.Input">
      <summary>
              获取用于指定输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。
            </summary>
      <returns>
              用于指定输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSkipExpression.SortOrder">
      <summary>
              获取一个定义排序顺序的 <see cref="T:System.Data.Common.CommandTrees.DbSortClause" /> 列表。
            </summary>
      <returns>
              一个定义排序顺序的 <see cref="T:System.Data.Common.CommandTrees.DbSortClause" /> 列表。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSortClause.Ascending">
      <summary>
              获取一个布尔值，该值指示此排序关键字是否按升序排序。
            </summary>
      <returns>
              <see langword="true" /> 如果此排序关键字使用升序排序顺序;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSortClause.Collation">
      <summary>
              获取一个字符串值，该值指定此排序关键字的排序规则。
            </summary>
      <returns>
              一个字符串值，指定此排序关键字的排序规则。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSortClause.Expression">
      <summary>
              获取或设置为此排序关键字提供值的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。
            </summary>
      <returns>
              为此排序关键字提供值的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSortExpression.Input">
      <summary>
              获取用于指定输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。
            </summary>
      <returns>
              用于指定输入集的 <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSortExpression.SortOrder">
      <summary>
              获取一个定义排序顺序的 <see cref="T:System.Data.Common.CommandTrees.DbSortClause" /> 列表。
            </summary>
      <returns>
              一个定义排序顺序的 <see cref="T:System.Data.Common.CommandTrees.DbSortClause" /> 列表。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbUnaryExpression.Argument">
      <summary>
              获取或设置定义参数的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。
            </summary>
      <returns>
              定义参数的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  表达式是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  表达式与 <see cref="T:System.Data.Common.CommandTrees.DbUnaryExpression" /> 的命令目录树不关联，或它的结果类型不等同于或不能提升为该参数所需的类型。
                </exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbUpdateCommandTree.Predicate">
      <summary>
              获取一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，它指定用于确定目标集合中应更新的成员的谓词。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，指定用于确定目标集合中应更新的成员的谓词。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbUpdateCommandTree.Returning">
      <summary>
              获取一个 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />，它指定要基于修改的行返回的结果投影。
            </summary>
      <returns>
              <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> ，指定要基于，修改的行返回的结果投影。
              <see langword="null" /> 指示此命令应返回任何结果。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbUpdateCommandTree.SetClauses">
      <summary>
              获取定义更新操作的更新 Set 子句列表。
            </summary>
      <returns>
              定义更新操作的更新 Set 子句列表。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbVariableReferenceExpression.VariableName">
      <summary>
              获取所引用的变量的名称。
            </summary>
      <returns>
              所引用的变量的名称。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.False">
      <summary>
              获取 <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" /> 布尔值 <see langword="false" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" /> 布尔值 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.True">
      <summary>
              获取 <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" /> 布尔值 <see langword="true" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" /> 布尔值 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.Data.Common.DataRecordInfo.FieldMetadata">
      <summary>
              获取此 <see cref="T:System.Data.Common.FieldMetadata" /> 对象的 <see cref="P:System.Data.IExtendedDataRecord.DataRecordInfo" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Common.FieldMetadata" /> 对象。
            </returns>
    </member>
    <member name="P:System.Data.Common.DataRecordInfo.RecordType">
      <summary>
              获取此对象的类型信息作为 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 对象。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 值。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbProviderManifest.NamespaceName">
      <summary>
              获取此提供程序清单使用的命名空间。
            </summary>
      <returns>
              使用此提供程序清单的命名空间。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbXmlEnabledProviderManifest.NamespaceName">
      <summary>
              获取此提供程序清单支持的命名空间名称。
            </summary>
      <returns>
              此提供程序清单支持的命名空间名称。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbXmlEnabledProviderManifest.StoreTypeNameToEdmPrimitiveType">
      <summary>
              获取指定的存储类型名称的最佳映射等效 Entity Data Model (EDM) 类型。
            </summary>
      <returns>
              指定的存储类型名称的最佳映射等效 EDM 类型。
            </returns>
    </member>
    <member name="P:System.Data.Common.DbXmlEnabledProviderManifest.StoreTypeNameToStorePrimitiveType">
      <summary>
              获取指定的存储类型名称的最佳映射等效存储基元类型。
            </summary>
      <returns>
              指定的存储类型名称的最佳映射等效存储基元类型。
            </returns>
    </member>
    <member name="P:System.Data.Common.EntityRecordInfo.EntityKey">
      <summary>
              获取 <see cref="T:System.Data.EntityKey" /> 的实体。
            </summary>
      <returns>
              实体键。
            </returns>
    </member>
    <member name="P:System.Data.Common.EntitySql.FunctionDefinition.EndPosition">
      <summary>
               函数定义 eSQL 查询文本中的结束位置。
            </summary>
    </member>
    <member name="P:System.Data.Common.EntitySql.FunctionDefinition.Lambda">
      <summary>
               函数体和参数。
            </summary>
    </member>
    <member name="P:System.Data.Common.EntitySql.FunctionDefinition.Name">
      <summary>
               函数名称。
            </summary>
    </member>
    <member name="P:System.Data.Common.EntitySql.FunctionDefinition.StartPosition">
      <summary>
               中的开始位置的函数定义 eSQL 查询文本。
            </summary>
    </member>
    <member name="P:System.Data.Common.EntitySql.ParseResult.CommandTree">
      <summary>
               在分析期间生成命令树。
            </summary>
    </member>
    <member name="P:System.Data.Common.EntitySql.ParseResult.FunctionDefinitions">
      <summary>
               列表的 <see cref="T:System.Data.Common.EntitySql.FunctionDefinition" /> 描述查询内联函数定义的对象。
            </summary>
    </member>
    <member name="P:System.Data.Common.FieldMetadata.FieldType">
      <summary>
              获取此 <see cref="T:System.Data.Common.FieldMetadata" /> 对象的字段类型。
            </summary>
      <returns>
              此字段的类型 <see cref="T:System.Data.Common.FieldMetadata" /> 对象。
            </returns>
    </member>
    <member name="P:System.Data.Common.FieldMetadata.Ordinal">
      <summary>
              获取此 <see cref="T:System.Data.Common.FieldMetadata" /> 对象的序号。
            </summary>
      <returns>
              表示序号值的整数。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityCommand.CommandText">
      <summary>
              获取或设置指定要执行的命令或存储过程的 Entity SQL 语句。
            </summary>
      <returns>
              用于指定要执行的命令或存储的过程的 Entity SQL 语句。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityCommand.CommandTimeout">
      <summary>
              获取或设置超时前要等待的时间长度。
            </summary>
      <returns>
              等待命令执行所需的时间（以秒为单位）。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityCommand.CommandTree">
      <summary>
              获取或设置的命令目录树来执行;只有其中一个命令目录树或命令文本可以设置，不这两个。
            </summary>
      <returns>
              要执行的命令树。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityCommand.CommandType">
      <summary>
              获取或设置一个值，该值指示如何解释 <see cref="P:System.Data.EntityClient.EntityCommand.CommandText" /> 属性。
            </summary>
      <returns>
              <see cref="T:System.Data.CommandType" /> 枚举值之一。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityCommand.Connection">
      <summary>
              获取或设置 <see cref="T:System.Data.EntityClient.EntityConnection" /> 使用 <see cref="T:System.Data.EntityClient.EntityCommand" />。
            </summary>
      <returns>
              使用实体命令的连接。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityCommand.DesignTimeVisible">
      <summary>
              获取或设置一个值，该值指示命令对象在 Windows 窗体设计器控件中是否应该可见。
            </summary>
      <returns>
              <see langword="true" /> 如果命令对象应会显示在 Windows 窗体设计器控件，则否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityCommand.EnablePlanCaching">
      <summary>
              获取或设置一个值，该值指示是否启用查询计划缓存。
            </summary>
      <returns>
              <see langword="true" /> 如果启用了查询计划缓存;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityCommand.Parameters">
      <summary>
              获取实体 SQL 语句或存储的过程的参数。
            </summary>
      <returns>
              Entity SQL 语句或存储过程的参数。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityCommand.Transaction">
      <summary>
              获取或设置在其中事务 <see cref="T:System.Data.SqlClient.SqlCommand" /> 执行。
            </summary>
      <returns>
              在其中事务 <see cref="T:System.Data.SqlClient.SqlCommand" /> 执行。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityCommand.UpdatedRowSource">
      <summary>
              获取或设置如何将命令结果应用于正在更新的行。
            </summary>
      <returns>
              <see cref="T:System.Data.UpdateRowSource" /> 值之一。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnection.ConnectionString">
      <summary>
              获取或设置 <see cref="T:System.Data.EntityClient.EntityConnection" /> 连接字符串。
            </summary>
      <returns>
              建立与数据源的初始连接所需的连接字符串。
               默认值为一个空字符串。
               连接关闭时，将返回当前设置的值。
               如果未设置任何值，则将返回一个空字符串。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  用户尝试在初始化 <see cref="P:System.Data.EntityClient.EntityConnection.ConnectionString" /> 的 <see cref="EntityConnection" /> 后设置 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> 属性。
                   在通过重载（此重载将 <see cref="MetadataWorkspace" /> 作为参数）构造 <see cref="EntityConnection" /> 实例，或者打开 <see cref="MetadataWorkspace" /> 实例时，初始化 <see cref="T:System.Data.EntityClient.EntityConnection" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  提供的连接字符串关键字无效，或未提供所需的连接字符串关键字。
                </exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnection.ConnectionTimeout">
      <summary>
              获取从尝试建立连接到结束尝试并生成错误需要等待的秒数。
            </summary>
      <returns>
              等待连接打开所需的时间（以秒为单位）。
               默认值为基础数据提供程序的默认超时值。
            </returns>
      <exception cref="T:System.ArgumentException">
                  设置的值小于 0。
                </exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnection.Database">
      <summary>
              获取当前数据库或将在连接打开后使用的数据库的名称。
            </summary>
      <returns>
              值 <see langword="Database" /> 的基础数据提供程序的属性。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  基础数据提供程序未知。
                </exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnection.DataSource">
      <summary>
              获取要连接到的数据源的名称或网络地址。
            </summary>
      <returns>
              数据源的名称。
               默认值为一个空字符串。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  基础数据提供程序未知。
                </exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnection.ServerVersion">
      <summary>
              获取一个字符串，该字符串包含客户端连接到的数据源的版本。
            </summary>
      <returns>
              提供程序连接字符串中包含的数据源的版本。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  连接已关闭。
                </exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnection.State">
      <summary>
              如果 <see cref="T:System.Data.ConnectionState" /> 打开，则获取基础提供程序的 <see cref="T:System.Data.EntityClient.EntityConnection" /> 属性。
               否则返回 <see cref="F:System.Data.ConnectionState.Closed" />。
            </summary>
      <returns>
              当且仅当 <see cref="F:System.Data.ConnectionState.Open" /> 的内部状态和基础提供程序 <see cref="T:System.Data.EntityClient.EntityConnection" /> 处于打开状态时，<see cref="T:System.Data.ConnectionState" />。
               如果 <see cref="T:System.Data.EntityClient.EntityConnection" /> 处于打开状态，但提供程序的 <see cref="T:System.Data.ConnectionState" /> 处于关闭状态，则该属性返回 <see cref="F:System.Data.ConnectionState.Broken" />。
               否则，它将返回 <see cref="F:System.Data.ConnectionState.Closed" />。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnection.StoreConnection">
      <summary>
              提供对 <see cref="T:System.Data.EntityClient.EntityConnection" /> 对象使用的基础数据源连接的访问。
            </summary>
      <returns>
              数据源连接的 <see cref="T:System.Data.Common.DbConnection" />。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnectionStringBuilder.IsFixedSize">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> 是否具有固定大小。
            </summary>
      <returns>
              返回 <see langword="true" /> 每种情况，因为 <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> 提供固定大小的关键字/值对的集合。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnectionStringBuilder.Item(System.String)">
      <summary>
              获取或设置与指定的键关联的值。
               在 C# 中，此属性为索引器。
            </summary>
      <param name="keyword">
                要获取或设置的项的键。
              </param>
      <returns>
              与指定的键相关联的值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="keyword" /> 为空引用 (<see langword="Nothing" /> 中 Visual Basic)。
                </exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
                  可用键中不存在尝试添加的键。
                </exception>
      <exception cref="T:System.FormatException">
                  连接字符串中包含无效的值（具体而言，需要使用布尔值或数值，但字符串中并未提供）。
                </exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnectionStringBuilder.Keys">
      <summary>
              获取包含 <see cref="T:System.Collections.ICollection" /> 中的键的 <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> 中的键。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnectionStringBuilder.Metadata">
      <summary>
              获取或设置连接字符串中的元数据位置。
            </summary>
      <returns>
              获取或设置连接字符串中的元数据位置。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnectionStringBuilder.Name">
      <summary>
              获取或设置配置文件中定义的节名称。
            </summary>
      <returns>
              配置文件中的节名称。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnectionStringBuilder.Provider">
      <summary>
              获取或设置连接字符串中的基础 .NET Framework 数据提供程序的名称。
            </summary>
      <returns>
              基础的固定名称 .NET Framework 数据提供程序。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnectionStringBuilder.ProviderConnectionString">
      <summary>
              获取或设置提供程序特定的内部连接字符串。
            </summary>
      <returns>
              提供程序特定的内部连接字符串。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.DataRecordInfo">
      <summary>
              获取此 <see cref="T:System.Data.Common.DataRecordInfo" /> 的 <see cref="T:System.Data.IExtendedDataRecord" />。
            </summary>
      <returns>
              数据记录的信息。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.Depth">
      <summary>
              获取一个值，该值指示当前行的嵌套深度。
            </summary>
      <returns>
              当前行的嵌套深度。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.FieldCount">
      <summary>
              获取当前行中的列数。
            </summary>
      <returns>
              当前行中的列数。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.HasRows">
      <summary>
              获取一个值，该值指示此 <see cref="T:System.Data.EntityClient.EntityDataReader" /> 是否包含一个或多个行。
            </summary>
      <returns>
              <see langword="true" /> 如果 <see cref="T:System.Data.EntityClient.EntityDataReader" /> 包含一个或多个行; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.IsClosed">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Data.EntityClient.EntityDataReader" /> 是否已关闭。
            </summary>
      <returns>
              <see langword="true" /> 如果 <see cref="T:System.Data.EntityClient.EntityDataReader" /> 关闭; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.Item(System.Int32)">
      <summary>
              以 <see cref="T:System.Object" /> 实例的形式获取指定列的值。
            </summary>
      <param name="ordinal">
                从零开始的列序号
              </param>
      <returns>
              指定列的值。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.Item(System.String)">
      <summary>
              以 <see cref="T:System.Object" /> 实例的形式获取指定列的值。
            </summary>
      <param name="name">
                列的名称。
              </param>
      <returns>
              指定列的值。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.RecordsAffected">
      <summary>
              获取通过执行 SQL 语句更改、插入或删除的行数。
            </summary>
      <returns>
              更改、插入或删除的行数。
               如果是 SELECT 语句，则返回 -1；如果未影响任何行或语句失败，则返回 0。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.VisibleFieldCount">
      <summary>
              获取 <see cref="T:System.Data.EntityClient.EntityDataReader" /> 中未隐藏的字段的数目。
            </summary>
      <returns>
              未隐藏的字段的数目。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.DbType">
      <summary>
              获取或设置参数的 <see cref="T:System.Data.DbType" />。
            </summary>
      <returns>
              <see cref="T:System.Data.DbType" /> 值之一。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.Direction">
      <summary>
              获取或设置参数的方向。
            </summary>
      <returns>
              <see cref="T:System.Data.ParameterDirection" /> 值之一。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.EdmType">
      <summary>
              获取或设置参数，表示为一个 EdmType 的类型。
            </summary>
      <returns>
              表示为一个 EdmType 的参数的类型。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.IsNullable">
      <summary>
              获取或设置一个值，该值指示参数是否接受 null 值。
            </summary>
      <returns>
              <see langword="true" /> 如果接受 null 值;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.ParameterName">
      <summary>
              获取或设置实体参数的名称。
            </summary>
      <returns>
              实体参数的名称。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.Precision">
      <summary>
              获取或设置用来表示的数字个数 <see cref="P:System.Data.EntityClient.EntityParameter.Value" /> 属性。
            </summary>
      <returns>
              用来表示值的数字个数。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.Scale">
      <summary>
              获取或设置所解析的 <see cref="P:System.Data.EntityClient.EntityParameter.Value" /> 的小数位数。
            </summary>
      <returns>
              值是解析的小数位数。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.Size">
      <summary>
              获取或设置列中数据的最大大小。
            </summary>
      <returns>
              列中数据的最大大小。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.SourceColumn">
      <summary>
              获取或设置映射到的源列的名称 <see cref="T:System.Data.DataSet" /> ，并且用于加载或返回 <see cref="P:System.Data.EntityClient.EntityParameter.Value" />。
            </summary>
      <returns>
              源列的名称映射到数据集，用于加载或返回的值。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.SourceColumnNullMapping">
      <summary>
              获取或设置一个值，该值指示源列是否为 null。
            </summary>
      <returns>
              <see langword="true" /> 如果源列可以为 null;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.SourceVersion">
      <summary>
              获取或设置 <see cref="T:System.Data.DataRowVersion" /> 加载的值时使用。
            </summary>
      <returns>
              <see cref="T:System.Data.DataRowVersion" /> 值之一。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.Value">
      <summary>
              获取或设置参数的值。
            </summary>
      <returns>
              参数的值。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameterCollection.Count">
      <summary>
              获取一个包含 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 中的元素数的整数。
            </summary>
      <returns>
              以整数形式表示的 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 中的元素数。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameterCollection.IsFixedSize">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 是否具有固定大小。
            </summary>
      <returns>
              返回 <see langword="true" /> 如果 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 具有固定大小; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameterCollection.IsReadOnly">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 是否为只读。
            </summary>
      <returns>
              返回 <see langword="true" /> 如果 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> ; 否则为读取 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameterCollection.IsSynchronized">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 是否已同步。
            </summary>
      <returns>
              返回 <see langword="true" /> 如果 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 同步; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameterCollection.Item(System.Int32)">
      <summary>
              获取位于指定索引处的 <see cref="T:System.Data.EntityClient.EntityParameter" />。
            </summary>
      <param name="index">
                要检索的参数的索引（从零开始）。
              </param>
      <returns>
              位于指定索引处的 <see cref="T:System.Data.EntityClient.EntityParameter" />。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  指定的索引不存在。
                </exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameterCollection.Item(System.String)">
      <summary>
              获取具有指定名称的 <see cref="T:System.Data.EntityClient.EntityParameter" />。
            </summary>
      <param name="parameterName">
                要检索的参数的名称。
              </param>
      <returns>
              具有指定名称的 <see cref="T:System.Data.EntityClient.EntityParameter" />。
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
                  指定的名称不存在。
                </exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameterCollection.SyncRoot">
      <summary>
              获取可用于同步对 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 的访问的对象。
            </summary>
      <returns>
              可用于同步对 <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> 的访问的对象。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityTransaction.Connection">
      <summary>
              获取此 <see cref="T:System.Data.EntityClient.EntityConnection" /> 的 <see cref="T:System.Data.EntityClient.EntityTransaction" />。
            </summary>
      <returns>
              一个指向基础数据源的 <see cref="T:System.Data.EntityClient.EntityConnection" />。
            </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityTransaction.IsolationLevel">
      <summary>
              获取此 <see cref="T:System.Data.EntityClient.EntityTransaction" /> 的隔离级别。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.IsolationLevel" /> 枚举值，表示基础事务的隔离级别。
            </returns>
    </member>
    <member name="P:System.Data.EntityKey.EntityContainerName">
      <summary>
              获取或设置实体容器的名称。
            </summary>
      <returns>
              一个 <see cref="T:System.String" /> 值，表示 <see cref="T:System.Data.EntityKey" /> 所属实体的实体容器的名称。
            </returns>
    </member>
    <member name="P:System.Data.EntityKey.EntityKeyValues">
      <summary>
              获取或设置与此相关的键值 <see cref="T:System.Data.EntityKey" />。
            </summary>
      <returns>
              此 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的键值的 <see cref="T:System.Data.EntityKey" />。
            </returns>
    </member>
    <member name="P:System.Data.EntityKey.EntitySetName">
      <summary>
              获取或设置实体集的名称。
            </summary>
      <returns>
              一个 <see cref="T:System.String" /> 值，表示 <see cref="T:System.Data.EntityKey" /> 所属实体的实体集的名称。
            </returns>
    </member>
    <member name="P:System.Data.EntityKey.IsTemporary">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Data.EntityKey" /> 是否是临时的。
            </summary>
      <returns>
              <see langword="true" /> 如果 <see cref="T:System.Data.EntityKey" /> 临时; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.EntityKeyMember.Key">
      <summary>
              获取或设置实体键的名称。
            </summary>
      <returns>
              密钥名称。
            </returns>
    </member>
    <member name="P:System.Data.EntityKeyMember.Value">
      <summary>
              获取或设置实体键的值。
            </summary>
      <returns>
              键值。
            </returns>
    </member>
    <member name="P:System.Data.EntitySqlException.Column">
      <summary>
              获取发生错误的大致列号。
            </summary>
      <returns>
              一个整数，描述发生错误的列号。
            </returns>
    </member>
    <member name="P:System.Data.EntitySqlException.ErrorContext">
      <summary>
              获取发生错误的大致上下文（如果有）。
            </summary>
      <returns>
              一个字符串，描述发生错误的大致上下文（如果有）。
            </returns>
    </member>
    <member name="P:System.Data.EntitySqlException.ErrorDescription">
      <summary>
              获取错误说明。
            </summary>
      <returns>
              描述错误的字符串。
            </returns>
    </member>
    <member name="P:System.Data.EntitySqlException.Line">
      <summary>
              获取发生错误的大致行号。
            </summary>
      <returns>
              一个整数，描述发生错误的行号。
            </returns>
    </member>
    <member name="P:System.Data.IExtendedDataRecord.DataRecordInfo">
      <summary>
              获取此 <see cref="T:System.Data.Common.DataRecordInfo" /> 的 <see cref="T:System.Data.IExtendedDataRecord" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Common.DataRecordInfo" /> 对象。
            </returns>
    </member>
    <member name="P:System.Data.Mapping.EntityViewContainer.EdmEntityContainerName">
      <summary>
              获取或设置 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 的名称。
            </summary>
      <returns>
              容器名称。
            </returns>
    </member>
    <member name="P:System.Data.Mapping.EntityViewContainer.HashOverAllExtentViews">
      <summary>
              视图的哈希值。
            </summary>
      <returns>
              哈希值。
            </returns>
    </member>
    <member name="P:System.Data.Mapping.EntityViewContainer.HashOverMappingClosure">
      <summary>
              哈希值。
            </summary>
      <returns>
              哈希值。
            </returns>
    </member>
    <member name="P:System.Data.Mapping.EntityViewContainer.StoreEntityContainerName">
      <summary>
              获取或设置存储架构中的 <see cref="T:System.Data.Metadata.Edm.EntityContainer" />。
            </summary>
      <returns>
              容器名称。
            </returns>
    </member>
    <member name="P:System.Data.Mapping.EntityViewContainer.ViewCount">
      <summary>
              获取或设置视图计数。
            </summary>
      <returns>
              视图计数。
            </returns>
    </member>
    <member name="P:System.Data.Mapping.EntityViewGenerationAttribute.ViewGenerationType">
      <summary>
              获取视图的 T:System.Type。
            </summary>
      <returns>
              视图的 T:System.Type。
            </returns>
    </member>
    <member name="P:System.Data.Mapping.StorageMappingItemCollection.MappingVersion">
      <summary>
              获取此版本 <see cref="T:System.Data.Mapping.StorageMappingItemCollection" /> 表示。
            </summary>
      <returns>
              此版本 <see cref="T:System.Data.Mapping.StorageMappingItemCollection" /> 表示。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationEndMember.BuiltInTypeKind">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.AssociationEndMember" /> 的内置类型种类。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.AssociationEndMember" /> 的内置类型种类。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSet.AssociationSetEnds">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.AssociationSet" /> 的 End。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含此 <see cref="T:System.Data.Metadata.Edm.AssociationSet" /> 的 End。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSet.BuiltInTypeKind">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.AssociationSet" /> 的内置类型种类。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.AssociationSet" /> 的内置类型种类。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSet.ElementType">
      <summary>
              获取与此 <see cref="T:System.Data.Metadata.Edm.AssociationSet" /> 有关的关联。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.AssociationType" /> 对象，表示与此 <see cref="T:System.Data.Metadata.Edm.AssociationSet" /> 有关的关联。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSetEnd.BuiltInTypeKind">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" /> 的内置类型种类。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" /> 的内置类型种类。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSetEnd.CorrespondingAssociationEndMember">
      <summary>
              获取 <see langword="End" /> 成员此 <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" /> 对象对应于。
            </summary>
      <returns>
              <see cref="T:System.Data.Metadata.Edm.AssociationEndMember" /> 对象，表示 <see langword="End" /> 成员此 <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" /> 对象对应于。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSetEnd.EntitySet">
      <summary>
              获取此引用的实体集 <see langword="End" /> 角色。
            </summary>
      <returns>
              <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 对象，表示此引用的实体集 <see langword="End" /> 角色。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSetEnd.Name">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" /> 的 End 名称。
            </summary>
      <returns>
              此 <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" /> 的 End 名称。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSetEnd.ParentAssociationSet">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" /> 的父关联集。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.AssociationSet" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" /> 的父关联集。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSetEnd.Role">
      <summary>
              获取名称 <see langword="End" /> 角色的 <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" />。
            </summary>
      <returns>
              名称 <see langword="End" /> 角色的 <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" />。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationType.AssociationEndMembers">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.AssociationType" /> 的 End 列表。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含此 <see cref="T:System.Data.Metadata.Edm.AssociationType" /> 的 End 列表。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationType.BuiltInTypeKind">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.AssociationType" /> 的内置类型种类。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.AssociationType" /> 的内置类型种类。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationType.IsForeignKey">
      <summary>
              获取指定列是否为外键的布尔属性值。
            </summary>
      <returns>
              一个布尔值，指定列是否为外键。
               如果 <see langword="true" />, ，列是外键。
               如果 <see langword="false" /> （默认值），列不是外键。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationType.ReferentialConstraints">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.AssociationType" /> 的约束列表。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含此 <see cref="T:System.Data.Metadata.Edm.AssociationType" /> 的约束列表。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.CollectionType.BuiltInTypeKind">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.CollectionType" /> 的内置类型种类。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.CollectionType" /> 的内置类型种类。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.CollectionType.TypeUsage">
      <summary>
              获取 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 类的一个实例，其中包含此当前 <see cref="T:System.Data.Metadata.Edm.CollectionType" /> 对象所包括的元素的类型以及该类型的各个方面。
            </summary>
      <returns>
              <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 类的一个实例，其中包含此当前 <see cref="T:System.Data.Metadata.Edm.CollectionType" /> 对象所包括的元素的类型以及该类型的各个方面。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ComplexType.BuiltInTypeKind">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.ComplexType" /> 的内置类型种类。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.ComplexType" /> 的内置类型种类。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ComplexType.Properties">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.ComplexType" /> 的属性列表。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含此 <see cref="T:System.Data.Metadata.Edm.ComplexType" /> 的属性列表。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.Documentation.BuiltInTypeKind">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.Documentation" /> 的内置类型种类。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.Documentation" /> 的内置类型种类。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.Documentation.IsEmpty">
      <summary>
              获取一个值，该值指示此 <see cref="T:System.Data.Metadata.Edm.Documentation" /> 对象是否只包含一个 null（即空的）<see cref="P:System.Data.Metadata.Edm.Documentation.Summary" /> 和一个 <see cref="P:System.Data.Metadata.Edm.Documentation.Longdescription" />。
            </summary>
      <returns>
              <see langword="true" /> 如果此 <see cref="T:System.Data.Metadata.Edm.Documentation" /> 对象包含仅 null 或空 <see cref="P:System.Data.Metadata.Edm.Documentation.Summary" /> 和 <see cref="P:System.Data.Metadata.Edm.Documentation.LongDescription" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.Documentation.LongDescription">
      <summary>
              获取有关此 <see cref="T:System.Data.Metadata.Edm.Documentation" /> 的详细说明。
            </summary>
      <returns>
              有关此 <see cref="T:System.Data.Metadata.Edm.Documentation" /> 的详细说明。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.Documentation.Summary">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.Documentation" /> 的摘要。
            </summary>
      <returns>
              此 <see cref="T:System.Data.Metadata.Edm.Documentation" /> 的摘要。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmError.Message">
      <summary>
              获取错误消息。
            </summary>
      <returns>
              错误消息。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmFunction.BuiltInTypeKind">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.EdmFunction" /> 的内置类型种类。
            </summary>
      <returns>
              枚举的枚举值之一 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 枚举。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmFunction.CommandTextAttribute">
      <summary>
              获取查询中使用数据库管理系统或存储模型的语言。
            </summary>
      <returns>
              中包含的查询或更新语句的数据库管理系统或存储模型所使用的语法的字符串值 <see cref="T:System.Data.Metadata.Edm.EdmFunction" />。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmFunction.FullName">
      <summary>
              返回此类型的完整名称 （命名空间加上名称）。
            </summary>
      <returns>
              类型的全名。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmFunction.IsComposableAttribute">
      <summary>
              获取或设置是否此实例只能映射到一个函数或存储过程。
            </summary>
      <returns>
              <see langword="true" /> 如果此实例映射到函数; <see langword="false" /> 如果此实例映射到存储过程。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmFunction.Parameters">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.EdmFunction" /> 的参数。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含此 <see cref="T:System.Data.Metadata.Edm.EdmFunction" /> 的参数。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmFunction.ReturnParameter">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.EdmFunction" /> 的返回参数。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.FunctionParameter" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.EdmFunction" /> 的返回参数。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmFunction.ReturnParameters">
      <summary>
              获取的返回参数 <see cref="T:System.Data.Metadata.Edm.EdmFunction" />。
            </summary>
      <returns>
              类型的集合 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> ，它表示的返回参数 <see cref="T:System.Data.Metadata.Edm.EdmFunction" />。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmItemCollection.EdmVersion">
      <summary>
              获取此集合的概念模型版本。
            </summary>
      <returns>
              此集合概念模型版本。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmMember.DeclaringType">
      <summary>
              获取已对其声明此成员的类型。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 对象，表示已对其声明此成员的类型。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmMember.Name">
      <summary>
              获取此成员的名称。
            </summary>
      <returns>
              此成员的名称。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmMember.TypeUsage">
      <summary>
              获取既包含此成员的类型又包含该类型的各个方面的 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 类实例。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 对象，其中既包含此成员的类型又包含该类型的各个方面。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmProperty.BuiltInTypeKind">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.EdmProperty" /> 的内置类型种类。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.EdmProperty" /> 的内置类型种类。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmProperty.DefaultValue">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.EdmProperty" /> 的默认值。
            </summary>
      <returns>
              此 <see cref="T:System.Data.Metadata.Edm.EdmProperty" /> 的默认值。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmProperty.Nullable">
      <summary>
              获取一个值，该值指示此 <see cref="T:System.Data.Metadata.Edm.EdmProperty" /> 的值是否可以为 null。
            </summary>
      <returns>
              <see langword="true" /> 如果此 <see cref="T:System.Data.Metadata.Edm.EdmProperty" /> 可以具有 null 值; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmSchemaError.Column">
      <summary>
              获取发生错误的列。
            </summary>
      <returns>
              发生错误的列。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmSchemaError.ErrorCode">
      <summary>
              获取错误代码。
            </summary>
      <returns>
              错误代码。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmSchemaError.Line">
      <summary>
              获取发生错误的行号。
            </summary>
      <returns>
              发生错误的行号。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmSchemaError.SchemaLocation">
      <summary>
              获取包含错误的架构的位置。
               此字符串还包括位于末尾的架构的名称。
            </summary>
      <returns>
              包含错误的架构所在的位置。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmSchemaError.SchemaName">
      <summary>
              获取包含错误的架构的名称。
            </summary>
      <returns>
              包含错误的架构的名称。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmSchemaError.Severity">
      <summary>
              获取错误的严重级别。
            </summary>
      <returns>
              <see cref="T:System.Data.Metadata.Edm.EdmSchemaErrorSeverity" /> 值之一。
               默认值为 <see cref="F:System.Data.Metadata.Edm.EdmSchemaErrorSeverity.Warning" />。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmSchemaError.StackTrace">
      <summary>
              获取发生错误时的堆栈跟踪的字符串表示形式。
            </summary>
      <returns>
              发生错误时的堆栈跟踪的字符串表示形式。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmType.Abstract">
      <summary>
              获取一个值，该值指示此类型是否为抽象的。
            </summary>
      <returns>
              <see langword="true" /> 如果此类型是抽象的;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmType.BaseType">
      <summary>
              获取此类型的基类型。
            </summary>
      <returns>
              此类型的基类型。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmType.FullName">
      <summary>
              获取此类型的全名。
            </summary>
      <returns>
              此类型的全名。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmType.Name">
      <summary>
              获取此类型的名称。
            </summary>
      <returns>
              此类型的名称。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmType.NamespaceName">
      <summary>
              获取此类型的命名空间。
            </summary>
      <returns>
              此类型的命名空间。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntityContainer.BaseEntitySets">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 包括的实体集和关联集的列表。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 对象，其中包含此 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 包括的实体集和关联集的列表。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntityContainer.BuiltInTypeKind">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 的内置类型种类。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 的内置类型种类。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntityContainer.FunctionImports">
      <summary>
              指定 <see cref="T:System.Data.Metadata.Edm.EdmFunction" /> 元素的集合。
               每个函数包含存在于数据库或等效的存储过程的详细信息 CommandText 中映射到实体及其属性。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> ，其中包含 <see cref="T:System.Data.Metadata.Edm.EdmFunction" /> 元素。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntityContainer.Name">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 的名称。
            </summary>
      <returns>
              此 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 的名称。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntitySet.BuiltInTypeKind">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 的内置类型种类。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 的内置类型种类。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntitySet.ElementType">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 的实体类型。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.EntityType" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 的实体类型。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntitySetBase.BuiltInTypeKind">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.EntitySetBase" /> 的内置类型种类。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.EntitySetBase" /> 的内置类型种类。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntitySetBase.ElementType">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.EntityTypeBase" /> 的实体类型。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.EntityTypeBase" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.EntityTypeBase" /> 的实体类型。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntitySetBase.EntityContainer">
      <summary>
              获取当前实体集或关系集的实体容器。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 对象，表示当前实体集或关系集的实体容器。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntitySetBase.Name">
      <summary>
              获取当前实体集或关系集的名称。
            </summary>
      <returns>
              当前实体集或关系集的名称。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntityType.BuiltInTypeKind">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.EntityType" /> 的内置类型种类。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.EntityType" /> 的内置类型种类。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntityType.NavigationProperties">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.EntityType" /> 的导航属性。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含此 <see cref="T:System.Data.Metadata.Edm.EntityType" /> 的导航属性列表。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntityType.Properties">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.EntityType" /> 的属性列表。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含此 <see cref="T:System.Data.Metadata.Edm.EntityType" /> 的属性列表。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntityTypeBase.KeyMembers">
      <summary>
              获取当前实体或关系类型的所有键成员的列表。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 对象，表示当前实体或关系类型的键成员的列表。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EnumMember.BuiltInTypeKind">
      <summary>
               获取此类型的种类。
            </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EnumMember.Name">
      <summary>
               获取此枚举成员的名称。
            </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EnumMember.Value">
      <summary>
               获取此枚举成员的值。
            </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EnumType.BuiltInTypeKind">
      <summary>
               返回类型的类型 
            </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EnumType.IsFlags">
      <summary>
               获取一个值，该值指示是否为标志定义枚举类型 （即可将其视为位域） 
            </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EnumType.Members">
      <summary>
               获取此枚举类型的枚举成员的集合。
            </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EnumType.UnderlyingType">
      <summary>
               获取此枚举类型的基础类型。
            </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.Facet.BuiltInTypeKind">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.Facet" /> 的内置类型种类。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.Facet" /> 的内置类型种类。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.Facet.Description">
      <summary>
              获取有关此 <see cref="T:System.Data.Metadata.Edm.Facet" /> 的说明。
            </summary>
      <returns>
              <see cref="T:System.Data.Metadata.Edm.FacetDescription" /> 对象，表示有关此 <see cref="T:System.Data.Metadata.Edm.Facet" /> 的说明。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.Facet.FacetType">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.Facet" /> 的类型。
            </summary>
      <returns>
              <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.Facet" /> 的类型。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.Facet.IsUnbounded">
      <summary>
              获取一个值，该值指示是否未绑定方面的值。
            </summary>
      <returns>
              <see langword="true" /> 如果方面的值是不受限制;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.Facet.Name">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.Facet" /> 的名称。
            </summary>
      <returns>
              此 <see cref="T:System.Data.Metadata.Edm.Facet" /> 的名称。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.Facet.Value">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.Facet" /> 的值。
            </summary>
      <returns>
              此 <see cref="T:System.Data.Metadata.Edm.Facet" /> 的值。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FacetDescription.DefaultValue">
      <summary>
              获取具有此方面说明的方面的默认值。
            </summary>
      <returns>
              具有此方面说明的方面的默认值。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FacetDescription.FacetName">
      <summary>
              获取此方面的名称。
            </summary>
      <returns>
              此方面的名称。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FacetDescription.FacetType">
      <summary>
              获取此方面的类型。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象，表示此方面的类型。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FacetDescription.IsConstant">
      <summary>
              获取一个值，该值指示此方面的值是否为常量。
            </summary>
      <returns>
              <see langword="true" /> 如果此方面为常量;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FacetDescription.IsRequired">
      <summary>
              获取一个值，该值指示此方面是否为必需的方面。
            </summary>
      <returns>
              <see langword="true" /> 如果此方面是必需的方面;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FacetDescription.MaxValue">
      <summary>
              获取此方面的最大值。
            </summary>
      <returns>
              此方面的最大值。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FacetDescription.MinValue">
      <summary>
              获取此方面的最小值。
            </summary>
      <returns>
              此方面的最小值。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FunctionParameter.BuiltInTypeKind">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.FunctionParameter" /> 的内置类型种类。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.FunctionParameter" /> 的内置类型种类。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FunctionParameter.DeclaringFunction">
      <summary>
              获取或设置已对其声明此参数的 <see cref="T:System.Data.Metadata.Edm.EdmFunction" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.EdmFunction" /> 对象，表示已对其声明此参数的函数。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FunctionParameter.Mode">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.FunctionParameter" /> 的模式。
            </summary>
      <returns>
              <see cref="T:System.Data.Metadata.Edm.ParameterMode" /> 值之一。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FunctionParameter.Name">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.FunctionParameter" /> 的名称。
            </summary>
      <returns>
              此 <see cref="T:System.Data.Metadata.Edm.FunctionParameter" /> 的名称。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FunctionParameter.TypeUsage">
      <summary>
              获取既包含该参数的类型又包含该类型的各个方面的 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 类实例。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 对象，其中既包含该参数的类型又包含该类型的各个方面。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ItemCollection.DataSpace">
      <summary>
              获取与此项集合关联的数据模型。
            </summary>
      <returns>
              与此项集合关联的数据模型。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.MetadataItem.BuiltInTypeKind">
      <summary>
              获取此类型的内置类型种类。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此类型的内置类型种类。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.MetadataItem.Documentation">
      <summary>
              获取或设置与此类型关联的文档。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.Documentation" /> 对象，表示介绍此类型的文档。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.MetadataItem.MetadataProperties">
      <summary>
              获取当前类型的属性列表。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含当前类型的属性列表。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.MetadataProperty.BuiltInTypeKind">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.MetadataProperty" /> 的内置类型种类。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.MetadataProperty" /> 的内置类型种类。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.MetadataProperty.Name">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.MetadataProperty" /> 的名称。
            </summary>
      <returns>
              此 <see cref="T:System.Data.Metadata.Edm.MetadataProperty" /> 的名称。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.MetadataProperty.PropertyKind">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.PropertyKind" /> 的值。
            </summary>
      <returns>
              此 <see cref="T:System.Data.Metadata.Edm.PropertyKind" /> 的值。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.MetadataProperty.TypeUsage">
      <summary>
              获取既包含此 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 的类型又包含该类型的各个方面的 <see cref="T:System.Data.Metadata.Edm.MetadataProperty" /> 类实例。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 对象，其中既包含此 <see cref="T:System.Data.Metadata.Edm.MetadataProperty" /> 的类型又包含该类型的各个方面。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.MetadataProperty.Value">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.MetadataProperty" /> 的值。
            </summary>
      <returns>
              此 <see cref="T:System.Data.Metadata.Edm.MetadataProperty" /> 的值。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.NavigationProperty.BuiltInTypeKind">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.NavigationProperty" /> 的内置类型种类。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.NavigationProperty" /> 的内置类型种类。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.NavigationProperty.FromEndMember">
      <summary>
              获取此导航中的“源”关系 End 成员。
            </summary>
      <returns>
              此导航中的“源”关系 End 成员。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.NavigationProperty.RelationshipType">
      <summary>
              获取此导航属性操作的关系类型。
            </summary>
      <returns>
              此导航属性操作的关系类型。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.NavigationProperty.ToEndMember">
      <summary>
              获取此导航的“目标”关系 End 成员。
            </summary>
      <returns>
              此导航的“目标”关系 End 成员。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.PrimitiveType.BuiltInTypeKind">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 的内置类型种类。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 的内置类型种类。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.PrimitiveType.ClrEquivalentType">
      <summary>
              返回与此 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 等效的公共语言运行库 (CLR) 类型。
               请注意，<see cref="P:System.Data.Metadata.Edm.PrimitiveType.ClrEquivalentType" /> 属性始终返回不可以为 null 的类型值。
            </summary>
      <returns>
              一个 <see cref="T:System.Type" /> 对象，表示与此 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 等效的公共语言运行库 (CLR) 类型。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.PrimitiveType.FacetDescriptions">
      <summary>
              获取有关此 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 各方面的说明列表。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的集合，其中包含有关此 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 各方面的说明列表。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.PrimitiveType.PrimitiveTypeKind">
      <summary>
              获取一个 <see cref="T:System.Data.Metadata.Edm.PrimitiveTypeKind" /> 枚举值，该值指示此 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 的基元类型。
            </summary>
      <returns>
              一个指示此 <see cref="T:System.Data.Metadata.Edm.PrimitiveTypeKind" /> 的基元类型的 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 枚举值。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Current">
      <summary>
              获取位于当前位置的成员。
            </summary>
      <returns>
              位于当前位置的成员。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>
              获取位于当前位置的成员。
            </summary>
      <returns>
              位于当前位置的成员。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.IsReadOnly">
      <summary>
              获取一个值，该值指示此集合是否是只读的。
            </summary>
      <returns>
              <see langword="true" /> 如果此集合是只读的;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Item(System.String)">
      <summary>
              使用指定的标识从此集合中获取一个项。
            </summary>
      <param name="identity">
                要搜索的项的标识。
              </param>
      <returns>
              此集合中的一个项。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReferentialConstraint.BuiltInTypeKind">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" /> 的内置类型种类。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" /> 的内置类型种类。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReferentialConstraint.FromProperties">
      <summary>
              获取定义此 <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" /> 时使用的“源角色”的属性列表。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含定义此 <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" /> 时使用的“源角色”的属性列表。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReferentialConstraint.FromRole">
      <summary>
              获取参与此 <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" /> 的“源角色”。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.RelationshipEndMember" /> 对象，表示参与此 <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" /> 的“源角色”。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReferentialConstraint.ToProperties">
      <summary>
              获取定义此 <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" /> 时使用的“目标角色”的属性列表。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含定义此 <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" /> 时使用的“目标角色”的属性列表。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReferentialConstraint.ToRole">
      <summary>
              获取参与此 <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" /> 的“目标角色”。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.RelationshipEndMember" /> 对象，表示参与此 <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" /> 的“目标角色”。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.RefType.BuiltInTypeKind">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.RefType" /> 的内置类型种类。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.RefType" /> 的内置类型种类。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.RefType.ElementType">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.RefType" /> 引用的实体类型。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.EntityTypeBase" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.RefType" /> 引用的实体类型。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.RelationshipEndMember.DeleteBehavior">
      <summary>
              获取此关系 End 成员的操作行为。
            </summary>
      <returns>
              <see cref="T:System.Data.Metadata.Edm.OperationAction" /> 值之一。
               默认值为 <see cref="P:System.Data.Metadata.Edm.OperationAction.None" />。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.RelationshipEndMember.RelationshipMultiplicity">
      <summary>
              获取此关系 End 成员的重数。
            </summary>
      <returns>
              <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" /> 值之一。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.RelationshipSet.BuiltInTypeKind">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.RelationshipSet" /> 的内置类型种类。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.RelationshipSet" /> 的内置类型种类。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.RelationshipSet.ElementType">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.RelationshipSet" /> 的关系类型。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.RelationshipType" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.RelationshipSet" /> 的关系类型。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.RelationshipType.RelationshipEndMembers">
      <summary>
              获取此关系类型的 End 列表。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含此关系类型的 End 列表。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.RowType.BuiltInTypeKind">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.RowType" /> 的内置类型种类。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.RowType" /> 的内置类型种类。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.RowType.Properties">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.RowType" /> 的属性列表。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含此 <see cref="T:System.Data.Metadata.Edm.RowType" /> 的属性列表。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.StoreItemCollection.StoreSchemaVersion">
      <summary>
              为此集合中获取的存储架构的版本。
            </summary>
      <returns>
              此集合的存储架构的版本。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.StructuralType.Members">
      <summary>
              获取此类型的成员列表。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含此类型的一组成员。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.TypeUsage.BuiltInTypeKind">
      <summary>
              获取此 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 的内置类型种类。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> 对象，表示此 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 的内置类型种类。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.TypeUsage.EdmType">
      <summary>
              获取由此 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 描述的类型信息。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 对象，表示由此 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 描述的类型信息。
            </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.TypeUsage.Facets">
      <summary>
              获取由此 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 描述的类型的方面列表。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类型的集合，其中包含由此 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 描述的类型的方面列表。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmFunctionAttribute.FunctionName">
      <summary>
              映射到函数的名称。
            </summary>
      <returns>
              映射到函数的名称。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmFunctionAttribute.NamespaceName">
      <summary>
              映射到函数的命名空间。
            </summary>
      <returns>
              映射到函数的命名空间。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.IsForeignKey">
      <summary>
              获取一个布尔值，该值指示该关系基于外键的值。
            </summary>
      <returns>
              <see langword="true" /> 如果该关系基于外键的值;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.RelationshipName">
      <summary>
              关系的名称。
            </summary>
      <returns>
              一个 <see cref="T:System.String" />，表示此 <see cref="T:System.Data.Objects.DataClasses.EdmRelationshipAttribute" /> 定义的关系的名称。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.RelationshipNamespaceName">
      <summary>
              关系的命名空间。
            </summary>
      <returns>
              表示关系命名空间的 <see cref="T:System.String" />。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role1Multiplicity">
      <summary>
              关系一端的重数。
            </summary>
      <returns>
              指示重数的 <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" /> 值。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role1Name">
      <summary>
              关系一端的角色名称。
            </summary>
      <returns>
              表示角色名称的 <see cref="T:System.String" />。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role1Type">
      <summary>
              关系一端的实体类型。
            </summary>
      <returns>
              表示关联此端对象类型的 <see cref="T:System.Type" />。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role2Multiplicity">
      <summary>
              关系另一端的重数。
            </summary>
      <returns>
              指示重数的 <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" /> 值。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role2Name">
      <summary>
              关系另一端的角色名称。
            </summary>
      <returns>
              表示角色名称的 <see cref="T:System.String" />。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role2Type">
      <summary>
              关系另一端的实体类型。
            </summary>
      <returns>
              表示关联另一端对象类型的 <see cref="T:System.Type" />。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.RelationshipName">
      <summary>
              获取非限定的关系名称。
            </summary>
      <returns>
              关系名。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.RelationshipNamespaceName">
      <summary>
              导航属性的命名空间名称。
            </summary>
      <returns>
              表示命名空间名称的 <see cref="T:System.String" />。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.TargetRoleName">
      <summary>
              获取关系另一端的角色名称。
            </summary>
      <returns>
              目标角色名称由指定 <see langword="Role" /> 的其他属性 <see langword="End" /> 概念模型中定义此关系的关联中的元素。
               有关详细信息，请参阅 关联元素 (CSDL)。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmScalarPropertyAttribute.EntityKeyProperty">
      <summary>
              获取或设置一个值，该值指示属性是否为实体键的一部分。
            </summary>
      <returns>
              一个指示属性是否为实体键的一部分的值。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmScalarPropertyAttribute.IsNullable">
      <summary>
              获取或设置一个值，指示属性是否可以具有 <see langword="null" /> 值。
            </summary>
      <returns>
              一个值，指示属性是否可以具有 <see langword="null" /> 值。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmTypeAttribute.Name">
      <summary>
              概念性架构中类型的名称，该类型映射到此属性所应用于的类。
            </summary>
      <returns>
              表示名称的 <see cref="T:System.String" />。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmTypeAttribute.NamespaceName">
      <summary>
              概念性架构中映射到此类型的实体对象类型或复杂类型的命名空间名称。
            </summary>
      <returns>
              表示命名空间名称的 <see cref="T:System.String" />。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityCollection`1.Count">
      <summary>
              获取集合中包含的对象数。
            </summary>
      <returns>
              <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 中包含的元素数。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityCollection`1.IsReadOnly">
      <summary>
              获取一个值，该值指示 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 是否为只读。
            </summary>
      <returns>
              始终返回 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>
              获取一个值，该值指示相关实体集合是否包含集合对象。
            </summary>
      <returns>
              此属性始终返回 <see langword="false" /> 因为 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 包含对象而不是集合。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityObject.EntityKey">
      <summary>
              获取或设置此对象的键。
            </summary>
      <returns>
              此对象的 <see cref="T:System.Data.EntityKey" />。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityObject.EntityState">
      <summary>
              获取对象的实体状态。
            </summary>
      <returns>
              此对象的 <see cref="T:System.Data.EntityState" />。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityObject.System#Data#Objects#DataClasses#IEntityWithRelationships#RelationshipManager">
      <summary>
              获取此对象使用的关系管理器。
            </summary>
      <returns>
              此对象使用的 <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityReference.EntityKey">
      <summary>
              返回相关对象的键。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.EntityKey" />，表示相关对象的键。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityReference`1.Value">
      <summary>
              获取或设置此 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> 返回的相关对象。
            </summary>
      <returns>
              此 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> 返回的对象。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityState">
      <summary>
              获取所跟踪对象的当前状态。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.EntityState" />，表示所跟踪对象的状态。
            
              有关详细信息，请参阅 标识解析、 状态管理和更改跟踪 和 跟踪 POCO 实体中的更改。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IEntityWithKey.EntityKey">
      <summary>
              为实现此接口的实体类型的实例获取或设置 <see cref="T:System.Data.EntityKey" />。
            </summary>
      <returns>
              <see cref="T:System.Data.EntityKey" /> 为实现此接口的实体类型的实例。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IEntityWithRelationships.RelationshipManager">
      <summary>
              返回关系管理器，该管理器管理实体类型的实例的关系。
            </summary>
      <returns>
              此实体的 <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IRelatedEnd.IsLoaded">
      <summary>
              获取一个值，该值指示是否已加载所有相关对象。
            </summary>
      <returns>
              <see langword="true" /> 如果相关的端包含数据库; 中的所有相关的实体否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IRelatedEnd.RelationshipName">
      <summary>
              获取此相关端所参与的关系的名称。
            </summary>
      <returns>
              此 <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd" /> 所参与的关系的名称。
               关系名称不由命名空间限定。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IRelatedEnd.RelationshipSet">
      <summary>
              返回对相关端的元数据的引用。
            </summary>
      <returns>
              包含关系一端的元数据的 <see cref="T:System.Data.Metadata.Edm.RelationshipSet" /> 对象。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IRelatedEnd.SourceRoleName">
      <summary>
              获取关系的源端的角色名称。
            </summary>
      <returns>
              关系的源端的角色名称。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IRelatedEnd.TargetRoleName">
      <summary>
              获取关系的目标端的角色名称。
            </summary>
      <returns>
              角色名称的关系的目标端。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded">
      <summary>
              获取一个值，该值指示是否已加载所有相关对象。
            </summary>
      <returns>
              <see langword="true" /> 如果相关的端包含数据库; 中的所有相关的对象否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.RelatedEnd.RelationshipName">
      <summary>
              获取此相关端所参与的关系的名称。
            </summary>
      <returns>
              此 <see cref="T:System.Data.Objects.DataClasses.RelatedEnd" /> 所参与的关系的名称。
               关系名称不由命名空间限定。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.RelatedEnd.RelationshipSet">
      <summary>
              对相关端中获取的元数据的引用。
            </summary>
      <returns>
              包含关系一端的元数据的 <see cref="T:System.Data.Metadata.Edm.RelationshipSet" /> 对象。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.RelatedEnd.SourceRoleName">
      <summary>
              获取关系的源端的角色名称。
            </summary>
      <returns>
              表示角色名称的 <see cref="T:System.String" />。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.RelatedEnd.TargetRoleName">
      <summary>
              获取关系的目标端的角色名称。
            </summary>
      <returns>
              表示角色名称的 <see cref="T:System.String" />。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DbUpdatableDataRecord.DataRecordInfo">
      <summary>
              获取数据记录信息。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Common.DataRecordInfo" /> 对象。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DbUpdatableDataRecord.FieldCount">
      <summary>
              在记录中获取的字段的数目。
            </summary>
      <returns>
              整数值字段数。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DbUpdatableDataRecord.Item(System.Int32)">
      <summary>
              返回具有给定的字段序号的值。
            </summary>
      <param name="ordinal">
                字段的序号。
              </param>
      <returns>
              具有给定的字段序号的值。
            </returns>
    </member>
    <member name="P:System.Data.Objects.DbUpdatableDataRecord.Item(System.String)">
      <summary>
              获取具有给定的字段名称的值。
            </summary>
      <param name="name">
                字段的名称。
              </param>
      <returns>
              字段值。
            </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.CommandTimeout">
      <summary>
              获取或设置所有对象上下文操作的超时值（以秒为单位）。
               一个 <see langword="null" /> 值表示将使用基础提供程序的默认值。
            </summary>
      <returns>
              作为超时值的 <see cref="T:System.Int32" /> 值（以秒为单位）。
            </returns>
      <exception cref="T:System.ArgumentException">
                  超时值小于 0。
                </exception>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.Connection">
      <summary>
              获取对象上下文使用的连接。
            </summary>
      <returns>
              一个作为连接的 <see cref="T:System.Data.Common.DbConnection" /> 对象
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  当 <see cref="T:System.Data.Objects.ObjectContext" /> 释放实例。
                </exception>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.ContextOptions">
      <summary>
              获取 <see cref="T:System.Data.Objects.ObjectContextOptions" /> 实例，它包含会影响的行为的选项 <see cref="T:System.Data.Objects.ObjectContext" />。
            </summary>
      <returns>
              <see cref="T:System.Data.Objects.ObjectContextOptions" /> 实例，它包含会影响的行为的选项 <see cref="T:System.Data.Objects.ObjectContext" />。
            </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.DefaultContainerName">
      <summary>
              获取或设置默认容器名称。
            </summary>
      <returns>
              作为默认容器名称的 <see cref="T:System.String" />。
            </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.MetadataWorkspace">
      <summary>
              获取对象上下文使用的元数据工作区。
            </summary>
      <returns>
              与此 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> 关联的 <see cref="T:System.Data.Objects.ObjectContext" /> 对象。
            </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.ObjectStateManager">
      <summary>
              获取对象上下文用于跟踪对象更改的对象状态管理器。
            </summary>
      <returns>
              此 <see cref="T:System.Data.Objects.ObjectStateManager" /> 使用的 <see cref="T:System.Data.Objects.ObjectContext" />。
            </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.QueryProvider">
      <summary>
              获取与此对象上下文关联的 LINQ 查询提供程序。
            </summary>
      <returns>
              <see cref="T:System.Linq.IQueryProvider" /> 使用此对象上下文实例。
            </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectContextOptions.LazyLoadingEnabled">
      <summary>
              获取或设置一个布尔值，确定在访问导航属性时是否自动加载相关的对象。
            </summary>
      <returns>
              <see langword="true" /> 如果启用了延迟加载;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectContextOptions.ProxyCreationEnabled">
      <summary>
              获取或设置一个布尔值，确定是否为持久性未知的自定义数据类创建代理实例。
            </summary>
      <returns>
              <see langword="true" /> 如果创建代理;否则为 <see langword="false" />。
               默认值为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectContextOptions.UseConsistentNullReferenceBehavior">
      <summary>
              获取或设置一个布尔值，确定是否使用 NullReference 行为一致。
            </summary>
      <returns>
              <see langword="true" /> 如果应使用一致的 NullReference 行为;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectContextOptions.UseCSharpNullComparisonBehavior">
      <summary>
              获取或设置一个布尔值，确定是否使用 C# NullComparison 行为。
            </summary>
      <returns>
              <see langword="true" /> 如果应使用 C# NullComparison 行为;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectContextOptions.UseLegacyPreserveChangesBehavior">
      <summary>
              获取或设置一个布尔值，确定是否使用旧的 PreserveChanges 行为。
            </summary>
      <returns>
              <see langword="true" /> 如果应使用旧的 PreserveChanges 行为;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectMaterializedEventArgs.Entity">
      <summary>
              获取已创建的实体对象。
            </summary>
      <returns>
              已创建的实体对象。
            </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectParameter.Name">
      <summary>
              获取参数名称，该名称只能通过构造函数进行设置。
            </summary>
      <returns>
              参数名称，它只能通过构造函数进行设置。
            </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectParameter.ParameterType">
      <summary>
              获取参数类型。
            </summary>
      <returns>
              参数的 <see cref="T:System.Type" />。
            </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectParameter.Value">
      <summary>
              获取或设置参数值。
            </summary>
      <returns>
              参数值。
            </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectParameterCollection.Count">
      <summary>
              获取集合中当前存在的参数的数量。
            </summary>
      <returns>
              集合中当前存在的 <see cref="T:System.Data.Objects.ObjectParameter" /> 对象的数量。
            </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectParameterCollection.Item(System.String)">
      <summary>
              提供一个索引器，供调用方按名称检索参数。
            </summary>
      <param name="name">
                要查找的参数的名称。
                 此名称不应包含“@”参数标记（它用在 Entity SQL 语句中），只能为实际名称。
              </param>
      <returns>
              <see cref="T:System.Data.Objects.ObjectParameter" /> 实例。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  在集合中未找到具有指定名称的参数。
                </exception>
    </member>
    <member name="P:System.Data.Objects.ObjectParameterCollection.System#Collections#Generic#ICollection{System#Data#Objects#ObjectParameter}#IsReadOnly">
      <summary>
              获取一个值，该值指示集合是只读的还是可修改的。
            </summary>
      <returns>
              一个布尔值，则 <see langword="true" /> 如果该集合为只读的和 <see langword="false" /> 可修改的集合。
            </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.CommandText">
      <summary>
              返回查询的命令文本。
            </summary>
      <returns>
              一个 <see langword="string" /> 值。
            </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.Context">
      <summary>
              获取与此对象查询相关联的对象上下文。
            </summary>
      <returns>
              与此 <see cref="T:System.Data.Objects.ObjectContext" /> 实例关联的 <see cref="T:System.Data.Objects.ObjectQuery`1" />。
            </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.EnablePlanCaching">
      <summary>
              获取或设置一个值，该值指示是否应缓存查询计划。
            </summary>
      <returns>
              一个指示是否应缓存查询计划的值。
            </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.MergeOption">
      <summary>
              获取或设置从查询返回的对象添加到对象上下文的方式。
            </summary>
      <returns>
              查询 <see cref="T:System.Data.Objects.MergeOption" />。
            </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.Parameters">
      <summary>
              获取此对象查询的参数集合。
            </summary>
      <returns>
              此 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 的参数集合。
            </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>
              获取一个值，该值指示查询返回的集合是否包含集合对象。
            </summary>
      <returns>
              一个布尔值。
            </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.System#Linq#IQueryable#ElementType">
      <summary>
              获取此查询实例的结果元素类型。
            </summary>
      <returns>
              一个 <see cref="T:System.Type" />，即此查询实例的结果元素类型。
            </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.System#Linq#IQueryable#Expression">
      <summary>
              获取描述此查询的表达式。
            </summary>
      <returns>
              描述此查询的 LINQ <see cref="T:System.Linq.Expressions.Expression" />。
            </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.System#Linq#IQueryable#Provider">
      <summary>
              获取与此查询实例关联的 LINQ <see cref="T:System.Linq.IQueryProvider" />。
            </summary>
      <returns>
              与此查询实例关联的 <see cref="T:System.Linq.IQueryProvider" />。
            </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery`1.Name">
      <summary>
              获取或设置此对象查询的名称。
            </summary>
      <returns>
              一个 <see langword="string" /> 是此名称的值 <see cref="T:System.Data.Objects.ObjectQuery`1" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  在集上指定的值无效。
                </exception>
    </member>
    <member name="P:System.Data.Objects.ObjectResult.ElementType">
      <summary>
              当在派生类中重写时获取的泛型类型 <see cref="T:System.Data.Objects.ObjectResult`1" />。
            </summary>
      <returns>
              泛型类型 <see cref="T:System.Data.Objects.ObjectResult`1" />。
            </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectResult.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>
              获取一个值，该值指示查询返回的集合是否包含集合对象。
            </summary>
      <returns>
              <see langword="true" /> 如果查询返回的集合包含集合对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectResult`1.ElementType">
      <summary>
              获取 <see cref="T:System.Data.Objects.ObjectResult`1" /> 的类型。
            </summary>
      <returns>
              一个 <see cref="T:System.Type" />，它是 <see cref="T:System.Data.Objects.ObjectResult`1" /> 的类型。
            </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectSet`1.EntitySet">
      <summary>
              获取表示此实体集的元数据 <see cref="T:System.Data.Objects.ObjectSet`1" /> 实例。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 对象。
            </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.CurrentValues">
      <summary>
              获取与此 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 关联的对象或关系的当前属性值。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.Objects.CurrentValueRecord" />，它包含与此 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 关联的对象或关系的当前值。
            </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.Entity">
      <summary>
              获取实体对象。
            </summary>
      <returns>
              实体对象中。
            </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.EntityKey">
      <summary>
              获取或设置实体键。
            </summary>
      <returns>
              实体键。
            </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.EntitySet">
      <summary>
              获取 <see cref="T:System.Data.Metadata.Edm.EntitySetBase" /> 对象或关系。
            </summary>
      <returns>
              <see cref="T:System.Data.Metadata.Edm.EntitySetBase" /> 对象或关系。
            </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.IsRelationship">
      <summary>
              获取一个值，该值指示是否 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 表示的关系。
            </summary>
      <returns>
              <see langword="true" /> 如果 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 表示关系; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.ObjectStateManager">
      <summary>
              获取 <see cref="T:System.Data.Objects.ObjectStateManager" /> 的 <see cref="T:System.Data.Objects.ObjectStateEntry" />。
            </summary>
      <returns>
              <see cref="T:System.Data.Objects.ObjectStateManager" /> 的 <see cref="T:System.Data.Objects.ObjectStateEntry" />。
            </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.OriginalValues">
      <summary>
              获取对象或关系的原始值的只读版本。
            </summary>
      <returns>
              关系的原始值的只读版本集项或实体。
            </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.RelationshipManager">
      <summary>
              获取 <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> 中表示的项的对象的实例。
            </summary>
      <returns>
              <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> 对象。
            </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.State">
      <summary>
              获取或设置的状态 <see cref="T:System.Data.Objects.ObjectStateEntry" />。
            </summary>
      <returns>
              <see cref="T:System.Data.Objects.ObjectStateEntry" /> 的状态。
            </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.System#Data#Objects#DataClasses#IEntityChangeTracker#EntityState">
      <summary>
              获取 <see cref="T:System.Data.EntityState" /> 的 <see cref="T:System.Data.Objects.ObjectStateEntry" />。
            </summary>
      <returns>
              <see cref="T:System.Data.EntityState" /> 的 <see cref="T:System.Data.Objects.ObjectStateEntry" />。
            </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateManager.MetadataWorkspace">
      <summary>
              获取与此状态管理器关联的 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />。
            </summary>
      <returns>
              与此 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> 关联的 <see cref="T:System.Data.Objects.ObjectStateManager" />。
            </returns>
    </member>
    <member name="P:System.Data.PropertyConstraintException.PropertyName">
      <summary>
              获取违反了约束的属性的名称。
            </summary>
      <returns>
              违反了约束的属性的名称。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.Area">
      <summary>
               获取可以为 null 的双精度值，该值指示此 DbGeography 值，该值可能为 null，如果此值不表示曲面的区域。
            </summary>
      <returns>
              可以为 null 的双精度值，该值指示此 DbGeography 值的区域。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.CoordinateSystemId">
      <summary>
              获取关联的坐标系的标识符。
            </summary>
      <returns>
              关联的坐标系的标识符。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.DefaultCoordinateSystemId">
      <summary>
               对于地理位置值 (WGS 84) 获取默认坐标系统 id (SRID)。
            </summary>
      <returns>
              默认坐标系统 id (SRID) 的地理位置值 (WGS 84)。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.Dimension">
      <summary>
               获取维度的给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值或者值为集合的最大元素的维度。
            </summary>
      <returns>
              维度的给定 <see cref="T:System.Data.Spatial.DbGeography" /> 值。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.ElementCount">
      <summary>
               如果它表示地理集合中此 DbGeography 值时，获取元素的数目。
               &lt; &gt; 元素的数目以值形式返回此地理位置，它表示集合的其他地理位置的值; 如果否则为 <see langword="null" />。 &lt; / 返回 &gt;
            </summary>
      <returns>
              在此 DbGeography 值中的元素数目。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.Elevation">
      <summary>
               获取此 DbGeography 值时，提升 （Z 坐标），如果它表示的点。
               &lt; 返回 &gt; 该值地理位置的提升 （Z 坐标） 值表示点; 如果否则为 <see langword="null" />。 &lt; / 返回 &gt;
            </summary>
      <returns>
              此 DbGeography 值提升 （Z 坐标）。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.EndPoint">
      <summary>
               获取表示此值，该值可能为 null，如果此 DbGeography 值不表示一条曲线的起始点的 DbGeography 值。
            </summary>
      <returns>
              表示该值的起始点的 DbGeography 值。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.IsClosed">
      <summary>
               获取一个可以为 null 的布尔值，该值指示是否关闭此 DbGeography 值，则可能为 null 是否此值不表示一条曲线。
            </summary>
      <returns>
              <see langword="True" /> 如果关闭此 DbGeography 值;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.IsEmpty">
      <summary>
              获取可以为 null 的布尔值，该值指示此 DbGeography 值是否为空。
            </summary>
      <returns>
              <see langword="True" /> 如果此 DbGeography 值为空，则为否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.Latitude">
      <summary>
               获取纬度坐标系中的此 DbGeography 值，则在它表示一个点。
               此地理位置值，则在它表示点; &lt; 返回 &gt; 纬度坐标值否则为 <see langword="null" />。 &lt; / 返回 &gt;
            </summary>
      <returns>
              此 DbGeography 值纬度坐标。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.Length">
      <summary>
               获取可以为 null 的双精度值，该值指示此 DbGeography 值，该值可能为 null，如果此值不表示一条曲线的长度。
            </summary>
      <returns>
              可以为 null 的双精度值，该值指示此 DbGeography 值的长度。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.Longitude">
      <summary>
               获取经度坐标系中的此 DbGeography 值，则在它表示一个点。
               此地理位置值，则在它表示点; &lt; 返回 &gt; 经度坐标值否则为 <see langword="null" />。 &lt; / 返回 &gt;
            </summary>
      <returns>
              此 DbGeography 值经度坐标。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.Measure">
      <summary>
               获取 M （度量） 坐标系中的此 DbGeography 值，则在它表示一个点。
               此地理位置值，则在它表示点; &lt; 返回 &gt; M （度量） 坐标值否则为 <see langword="null" />。 &lt; / 返回 &gt;
            </summary>
      <returns>
              此 DbGeography 值 M （度量） 坐标。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.PointCount">
      <summary>
               如果它表示 linestring 或线性环中此 DbGeography 值时，获取的点的数量。
               &lt; &gt; 元素的数目以值形式返回此地理位置，如果它是表示 linestring 或线性环;否则为 <see langword="null" />。 &lt; / 返回 &gt;
            </summary>
      <returns>
              在此 DbGeography 值中的点的数目。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.ProviderValue">
      <summary>
               获取此构造它基础提供程序所特有的 DbGeography 值的表示形式。
            </summary>
      <returns>
              此 DbGeography 值的表示形式。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.SpatialTypeName">
      <summary>
              获取 DBGeography 的空间类型名称。
            </summary>
      <returns>
              DBGeography 空间类型名称。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.StartPoint">
      <summary>
               获取表示此值，该值可能为 null，如果此 DbGeography 值不表示一条曲线的起始点的 DbGeography 值。
            </summary>
      <returns>
              表示该值的起始点的 DbGeography 值。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeography.WellKnownValue">
      <summary>
               获取或设置数据协定序列化众所周知的表示形式此 DbGeography 值。
            </summary>
      <returns>
              数据协定序列化众所周知的表示形式此 DbGeography 值。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeographyWellKnownValue.CoordinateSystemId">
      <summary>
               获取或设置此值的坐标系统标识符 (SRID)。
            </summary>
    </member>
    <member name="P:System.Data.Spatial.DbGeographyWellKnownValue.WellKnownBinary">
      <summary>
               获取或设置此值的众所周知的二进制表示形式。
            </summary>
    </member>
    <member name="P:System.Data.Spatial.DbGeographyWellKnownValue.WellKnownText">
      <summary>
               获取或设置此值的已知文本表示。
            </summary>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.Area">
      <summary>
               获取可以为 null 的双精度值，该值指示此 DbGeometry 值，该值可能为 null，如果此值不表示曲面的区域。
            </summary>
      <returns>
              可以为 null 的双精度值，该值指示此 DbGeometry 值的区域。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.Boundary">
      <summary>
              获取 DbGeometry 对象的边界。
            </summary>
      <returns>
              DbGeometry 对象的边界。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.Centroid">
      <summary>
               获取表示此 DbGeometry 值，该值可能为 null，如果此值不表示曲面的形心的 DbGeometry 值。
            </summary>
      <returns>
              表示此 DbGeometry 值的形心的 DbGeometry 值。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.ConvexHull">
      <summary>
               另一个 DbGeometry 值的形式获取此 DbGeometry 值的凸包。
            </summary>
      <returns>
              此 DbGeometry 值与另一个 DbGeometry 值凸包。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.CoordinateSystemId">
      <summary>
              获取 DbGeometry 对象的坐标系统标识符。
            </summary>
      <returns>
              DbGeometry 对象的坐标系统标识符。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.DefaultCoordinateSystemId">
      <summary>
               获取为几何值默认坐标系统 id (SRID)。
            </summary>
      <returns>
              默认坐标系统 id (SRID) 的几何值。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.Dimension">
      <summary>
               获取维度的给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值或者值为一个集合，其最大元素的维度。
            </summary>
      <returns>
              维度的给定 <see cref="T:System.Data.Spatial.DbGeometry" /> 值。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.ElementCount">
      <summary>
               如果它表示几何图形集合中此 DbGeometry 值时，获取元素的数目。
               &lt; &gt; 元素的数目以值形式返回此几何图形，它表示集合的其他几何值; 如果否则为 <see langword="null" />。 &lt; / 返回 &gt;
            </summary>
      <returns>
              在此 DbGeometry 值中的元素数目。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.Elevation">
      <summary>
               获取此 DbGeometry 值时，提升 （Z 坐标），如果它表示的点。
               &lt; 返回 &gt; 提升 （Z 坐标） 的此几何值，则在它表示点;否则为 <see langword="null" />。 &lt; / 返回 &gt;
            </summary>
      <returns>
              此 DbGeometry 值提升 （Z 坐标）。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.EndPoint">
      <summary>
               获取表示此值，该值可能为 null，如果此 DbGeometry 值不表示一条曲线的起始点的 DbGeometry 值。
            </summary>
      <returns>
              表示该值的起始点的 DbGeometry 值。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.Envelope">
      <summary>
               几何值的形式获取此 DbGeometry 值时，将信封 （最小值边界框）。
            </summary>
      <returns>
              此 DbGeometry 值信封 （最小值边界框）。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.ExteriorRing">
      <summary>
               获取表示此 DbGeometry 值，该值可能为 null，如果此值不表示多边形的外环的 DbGeometry 值。
            </summary>
      <returns>
              表示此 DbGeometry 值的外环的 DbGeometry 值。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.InteriorRingCount">
      <summary>
               如果它表示多边形该值 DbGeometry 中获取内环的数。
               &lt; 返回 &gt; 元素的数目中此几何值，则在它表示多边形;否则为 <see langword="null" />。 &lt; / 返回 &gt;
            </summary>
      <returns>
              在此 DbGeometry 值环内部的数目。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.IsClosed">
      <summary>
               获取一个可以为 null 的布尔值，该值指示是否关闭此 DbGeometry 值，则可能为 null 是否此值不表示一条曲线。
            </summary>
      <returns>
              <see langword="True" /> 如果关闭此 DbGeometry 值;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.IsEmpty">
      <summary>
              获取一个可以为 null 的布尔值，该值指示此 DbGeometry 值是否为空，则可能为 null 是否此值不表示一条曲线。
            </summary>
      <returns>
              <see langword="True" /> 如果此 DbGeometry 值为空，则为否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.IsRing">
      <summary>
               获取一个可以为 null 的布尔值，该值指示此 DbGeometry 值是否为环，它可能为 null，如果此值不表示一条曲线。
            </summary>
      <returns>
              <see langword="True" /> 如果此 DbGeometry 值为一个环。否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.IsSimple">
      <summary>
              获取可以为 null 的布尔值，该值指示此 DbGeometry 值很简单。
            </summary>
      <returns>
              <see langword="True" /> 如果此 DbGeometry 值为简单;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.IsValid">
      <summary>
              获取一个可以为 null 的布尔值，该值指示此 DbGeometry 值是否有效。
            </summary>
      <returns>
              <see langword="True" /> 如果此 DbGeometry 值为有效，则为否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.Length">
      <summary>
               获取可以为 null 的双精度值，该值指示此 DbGeometry 值，该值可能为 null，如果此值不表示一条曲线的长度。
            </summary>
      <returns>
              此 DbGeometry 值的长度。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.Measure">
      <summary>
               获取此 DbGeometry 值时，该度量值 （M 坐标），则在它表示一个点。
               &lt; 返回 &gt; 度量值 （M 坐标） 此几何值，则在它表示点; 一个值否则为 <see langword="null" />。 &lt; / 返回 &gt;
            </summary>
      <returns>
              此 DbGeometry 值度量 （M 坐标）。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.PointCount">
      <summary>
               如果它表示 linestring 或线性环该值 DbGeometry 中获取的点的数量。
               &lt; 返回 &gt; 元素的数目中此几何值，但如果它是表示 linestring 或线性环;否则为 <see langword="null" />。 &lt; / 返回 &gt;
            </summary>
      <returns>
              在此 DbGeometry 值中的点的数目。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.PointOnSurface">
      <summary>
               获取此 DbGeometry 值，该值可能为 null，如果此值不表示曲面的图面上的一个点。
            </summary>
      <returns>
              此 DbGeometry 值的一个点图面上。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.ProviderValue">
      <summary>
               获取此构造它基础提供程序所特有的 DbGeometry 值的表示形式。
            </summary>
      <returns>
              此值表示形式 DbGeometry。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.SpatialTypeName">
      <summary>
              获取此 DbGeometry 值的空间类型名表示形式。
            </summary>
      <returns>
              此 DbGeometry 值的空间类型名表示形式。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.StartPoint">
      <summary>
               获取表示此值，该值可能为 null，如果此 DbGeometry 值不表示一条曲线的起始点的 DbGeometry 值。
            </summary>
      <returns>
              表示该值的起始点的 DbGeometry 值。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.WellKnownValue">
      <summary>
               获取或设置数据协定序列化众所周知的表示形式此 DbGeometry 值。
            </summary>
      <returns>
              数据协定序列化众所周知的表示形式此 DbGeometry 值。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.XCoordinate">
      <summary>
               如果它表示一个点，请获取该值 DbGeometry 的 X 坐标。
               此几何值，则在它表示点; &lt; 返回 &gt; 的 X 坐标值否则为 <see langword="null" />。 &lt; / 返回 &gt;
            </summary>
      <returns>
              此 DbGeometry 值的 X 坐标。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometry.YCoordinate">
      <summary>
               如果它表示一个点，请获取该值 DbGeometry 的 Y 坐标。
               此几何值，则在它表示点; &lt; 返回 &gt; 的 Y 坐标值否则为 <see langword="null" />。 &lt; / 返回 &gt;
            </summary>
      <returns>
              此 DbGeometry 值 Y 坐标。
            </returns>
    </member>
    <member name="P:System.Data.Spatial.DbGeometryWellKnownValue.CoordinateSystemId">
      <summary>
               获取或设置此值的坐标系统标识符 (SRID)。
            </summary>
    </member>
    <member name="P:System.Data.Spatial.DbGeometryWellKnownValue.WellKnownBinary">
      <summary>
               获取或设置此值的众所周知的二进制表示形式。
            </summary>
    </member>
    <member name="P:System.Data.Spatial.DbGeometryWellKnownValue.WellKnownText">
      <summary>
               获取或设置此值的已知文本表示。
            </summary>
    </member>
    <member name="P:System.Data.Spatial.DbSpatialServices.Default">
      <summary>
              获取默认服务为 <see cref="T:System.Data.Spatial.DbSpatialServices" />。
            </summary>
      <returns>
              默认服务。
            </returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlProviderServices.SingletonInstance">
      <summary>
              获取的单一实例 <see cref="T:System.Data.SqlClient.SqlProviderServices" />。
            </summary>
      <returns>
              返回 <see cref="T:System.Data.SqlClient.SqlProviderServices" />。
            </returns>
    </member>
    <member name="P:System.Data.UpdateException.StateEntries">
      <summary>
              获取此 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 的 <see cref="T:System.Data.UpdateException" /> 对象。
            </summary>
      <returns>
              <see cref="T:System.Data.Objects.ObjectStateEntry" /> 对象的集合，由单个实体和 0 个或更多关系，或者 0 个实体和 1 个或更多关系组成。
            </returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbAggregate">
      <summary>
              实现中的聚合所需的基本功能 <see langword="GroupBy" /> 子句。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbAndExpression">
      <summary>
              表示两个的逻辑 AND <see langword="Boolean" /> 参数。
               此类不能被继承。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbApplyExpression">
      <summary>
              表示一个应用运算，它是对指定输入集中的每个元素的指定函数调用。
               无法继承此类。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbArithmeticExpression">
      <summary>
              表示应用于数值参数的算术运算。
               加法、减法、乘法、除法、取模和求反都属于算术运算。
               此类不能被继承。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbBinaryExpression">
      <summary>
              为接受两个表达式操作数的表达式实现所需的基本功能。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbCaseExpression">
      <summary>
              表示 <see langword="When" />, ，<see langword="Then" />, ，和 <see langword="Else" /> 子句 <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />。
               此类不能被继承。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbCastExpression">
      <summary>
              表示单个参数向指定类型的类型转换。
               无法继承此类。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbCommandTree">
      <summary>
              不可变的类，用于查询、 Insert、 Update、 Delete 和函数调用命令目录树类型实现的基本功能。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbComparisonExpression">
      <summary>
              表示应用于两个参数的比较运算。
               相等、大于、大于或等于、小于、小于或等于以及不等都属于比较运算。
               无法继承此类。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbConstantExpression">
      <summary>
              表示不同类型的常量（文本）。
               无法继承此类。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbCrossJoinExpression">
      <summary>
              表示给定集合参数之间的无条件联接运算。
               无法继承此类。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbDeleteCommandTree">
      <summary>
              表示一项以命令目录树形式表示的单行删除操作。
               无法继承此类。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbDerefExpression">
      <summary>
              表示基于指定的引用检索实体的表达式。
               无法继承此类。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbDistinctExpression">
      <summary>
              从指定的集参数中删除重复的元素。
               无法继承此类。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbElementExpression">
      <summary>
              表示指定集参数到单一实例的转换。
               无法继承此类。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbEntityRefExpression">
      <summary>
              表示从基础实体实例提取引用的表达式。
               无法继承此类。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbExceptExpression">
      <summary>
              表示左右操作数之间的集减法运算。
               无法继承此类。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbExpression">
      <summary>
              表示所有表达式的基类型。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbExpressionBinding">
      <summary>
              表示到关系表达式（例如 <see cref="T:System.Data.Common.CommandTrees.DbFilterExpression" />、<see cref="T:System.Data.Common.CommandTrees.DbProjectExpression" /> 和 <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" />）的输入集。
               此类不能被继承。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbExpressionKind">
      <summary>
              包含每个表达式类用来表示它所代表的运算的值。
               可以检索 <see cref="P:System.Data.Common.CommandTrees.DbExpression.ExpressionKind" /> 的 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 属性来确定该表达式所代表的运算。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.All">
      <summary>
              <see langword="true" />-有关的所有表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.And">
      <summary>
              逻辑与表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Any">
      <summary>
              <see langword="true" />-有关的任何表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Case">
      <summary>
              条件 Case 语句表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Cast">
      <summary>
              多态类型转换表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Constant">
      <summary>
              常量值表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.CrossApply">
      <summary>
              交叉应用表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.CrossJoin">
      <summary>
              交叉联接表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Deref">
      <summary>
              取消引用表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Distinct">
      <summary>
              重复删除表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Divide">
      <summary>
              除法表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Element">
      <summary>
              集到单独转换表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.EntityRef">
      <summary>
              实体引用值检索表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Equals">
      <summary>
              相等表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Except">
      <summary>
              集减法表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Filter">
      <summary>
              限制表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.FullOuterJoin">
      <summary>
              完全外部联接表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Function">
      <summary>
              独立函数表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.GreaterThan">
      <summary>
              大于表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.GreaterThanOrEquals">
      <summary>
              大于或等于表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.GroupBy">
      <summary>
              分组表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.InnerJoin">
      <summary>
              内部联接表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Intersect">
      <summary>
              交集表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.IsEmpty">
      <summary>
              空集确定表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.IsNull">
      <summary>
              Null 确定表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.IsOf">
      <summary>
              类型比较（指定的类型或子类型）表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.IsOfOnly">
      <summary>
              类型比较（仅限指定的类型）表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Lambda">
      <summary>
              Lambda 函数表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.LeftOuterJoin">
      <summary>
              左外部联接表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.LessThan">
      <summary>
              小于表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.LessThanOrEquals">
      <summary>
              小于或等于表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Like">
      <summary>
              字符串比较表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Limit">
      <summary>
              结果计数限制 (TOP n)。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Minus">
      <summary>
              减法表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Modulo">
      <summary>
              取模表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Multiply">
      <summary>
              乘法表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.NewInstance">
      <summary>
              实例、行和集构造表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Not">
      <summary>
              逻辑非表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.NotEquals">
      <summary>
              不等表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Null">
      <summary>
              Null 表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.OfType">
      <summary>
              按类型（或子类型）的集成员表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.OfTypeOnly">
      <summary>
              按确切类型的集成员表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Or">
      <summary>
              逻辑或表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.OuterApply">
      <summary>
              外部应用表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.ParameterReference">
      <summary>
              引用参数表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Plus">
      <summary>
              加法表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Project">
      <summary>
              投影表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Property">
      <summary>
              静态或实例属性检索表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Ref">
      <summary>
              引用表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.RefKey">
      <summary>
              引用键值检索表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.RelationshipNavigation">
      <summary>
              关系（组合或关联）导航表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Scan">
      <summary>
              实体集或关系集扫描表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Skip">
      <summary>
              跳过有序集合中的元素。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Sort">
      <summary>
              排序表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Treat">
      <summary>
              类型转换表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.UnaryMinus">
      <summary>
              求反表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.UnionAll">
      <summary>
              并集（包含重复项）表达式。
            </summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.VariableReference">
      <summary>
              引用变量表达式。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbExpressionVisitor">
      <summary>
              定义不返回结果值的访问者应实现的基本功能。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbExpressionVisitor`1">
      <summary>
              定义返回特定类型结果值的访问者应实现的基本功能。
            </summary>
      <typeparam name="TResultType">
                visitor         
              </typeparam>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbFilterExpression">
      <summary>
              表示用于筛选输入集的谓词。
               它生成满足该谓词的元素集。
               无法继承此类。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbFunctionAggregate">
      <summary>
              支持标准聚合函数，例如 MIN、MAX、AVG、SUM 等等。
               此类不能被继承。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbFunctionCommandTree">
      <summary>
              表示对数据库函数的调用。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbFunctionExpression">
      <summary>
              表示对函数的调用。
               此类不能被继承。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbGroupAggregate">
      <summary>
              表示撰写一组元素的集合。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbGroupByExpression">
      <summary>
              表示分组运算。
               分组运算是根据指定的键表达式将输入集中的元素分组，后接指定聚合函数的应用。
               无法继承此类。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbGroupExpressionBinding">
      <summary>
              定义输入集到 <see cref="T:System.Data.Common.CommandTrees.DbGroupByExpression" /> 的绑定。
               无法继承此类。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbInsertCommandTree">
      <summary>
              表示一项以命令目录树形式表示的单行插入操作。
               此类不能被继承。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbIntersectExpression">
      <summary>
              表示左右操作数之间的交集运算。
               无法继承此类。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbIsEmptyExpression">
      <summary>
              表示一个应用于单集参数的空集确定。
               无法继承此类。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbIsNullExpression">
      <summary>
              表示应用于单个参数的 null 确定。
               无法继承此类。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbIsOfExpression">
      <summary>
              表示单个参数针对指定类型的类型比较。
               此类不能被继承。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbJoinExpression">
      <summary>
              表示在指定的联接条件下，在给定的集合参数之间进行的内部、左外部或完全外部联接运算。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbLambda">
      <summary>
               表示可以调用以生成一个 Lambda 函数 <see cref="T:System.Data.Common.CommandTrees.DbLambdaExpression" />。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbLambdaExpression">
      <summary>
              允许应用到表示的参数的 lambda 函数 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 对象。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbLikeExpression">
      <summary>
              表示针对指定的模式与可选的转义字符串进行的字符串比较。
               此类不能被继承。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbLimitExpression">
      <summary>
              表示将参数集合中的元素数限制为指定的限值。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbModificationClause">
      <summary>
              在插入或更新修改操作中指定单个子句。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbModificationCommandTree">
      <summary>
              表示一项以命令目录树形式表示的数据操作语言 (DML) 操作。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbNewInstanceExpression">
      <summary>
              表示给定类型（包括集类型和记录类型）的新实例的构造。
               无法继承此类。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbNotExpression">
      <summary>
              表示逻辑不是单个 <see langword="Boolean" /> 参数。
               此类不能被继承。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbNullExpression">
      <summary>
              表示对类型化 null 文本的引用。
               此类不能被继承。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbOfTypeExpression">
      <summary>
              表示从给定的集参数中检索属于指定类型的元素。
               无法继承此类。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbOrExpression">
      <summary>
              表示两个的逻辑 OR <see langword="Boolean" /> 参数。
               此类不能被继承。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbParameterReferenceExpression">
      <summary>
              表示对在包含此表达式的命令目录树上声明的参数的引用。
               无法继承此类。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbProjectExpression">
      <summary>
              表示给定输入集在指定表达式上的投影。
               此类不能被继承。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbPropertyExpression">
      <summary>
              提供用于检索实例属性的方法和属性。
               无法继承此类。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbQuantifierExpression">
      <summary>
              表示对指定输入集中的元素执行的指定类型的限定符操作。
               无法继承此类。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbQueryCommandTree">
      <summary>
              表示一项以命令目录树形式表示的查询操作。
               此类不能被继承。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbRefExpression">
      <summary>
              表示对实体集中的特定实例的强类型引用。
               此类不能被继承。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbRefKeyExpression">
      <summary>
              表示从基础引用值中检索键值（以其结构化形式）。
               此类不能被继承。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression">
      <summary>
              表示关系的导航。
               无法继承此类。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbScanExpression">
      <summary>
              表示一项对 <see cref="P:System.Data.Common.CommandTrees.DbScanExpression.Target" /> 属性指示的实体集或关系集进行扫描的操作。
               此类不能被继承。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbSetClause">
      <summary>
              指定用于设置属性值的修改操作中的子句。
               无法继承此类。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbSkipExpression">
      <summary>
              跳过指定的数量的对输入集中的元素。
              <see cref="T:System.Data.Common.CommandTrees.DbSkipExpression" /> 可以后才能使用已排序输入的集合所指定的排序键。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbSortClause">
      <summary>
              指定可在 <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" /> 中用作排序顺序的一部分的排序关键字。
               无法继承此类。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbSortExpression">
      <summary>
              表示一项基于给定的排序关键字应用于指定输入集中的元素的排序操作。
               此类不能被继承。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbTreatExpression">
      <summary>
              表示一项应用于多态参数的类型转换操作。
               无法继承此类。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbUnaryExpression">
      <summary>
              为接受单个表达式参数的表达式实现所需的基本功能。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbUnionAllExpression">
      <summary>
              表示左右操作数之间的 set 联合（不移除重复项）运算。
               无法继承此类。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbUpdateCommandTree">
      <summary>
              表示一项以命令目录树形式表示的单行更行操作。
               无法继承此类。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression">
      <summary>
              表示对当前处于范围内的某个变量的引用。
               无法继承此类。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DefaultExpressionVisitor">
      <summary>
               从给定的根表达式访问表达式树的每个元素。
               如果更改了任何元素，该树重建回根目录并返回新的根表达式;否则将返回原始根表达式。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder">
      <summary>
               提供一个用于构造 <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 的 API，并且允许该 API 作为针对表达式类型本身的扩展方法来访问。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions">
      <summary>
               提供一个 API 来构造 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />s 调用规范 EDM 函数，并允许该 API 作为取决于表达式类型本身的扩展方法进行访问。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.ExpressionBuilder.Row">
      <summary>
              提供一种调用的构造函数类似方法 <see cref="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewRow(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}})" />。
            </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions">
      <summary>
              提供一个 API 来构造 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />调用空间相关规范的 EDM 函数，并在适当的位置的 s 允许 API 作为取决于表达式类型本身的扩展方法进行访问。
            </summary>
    </member>
    <member name="T:System.Data.Common.DataRecordInfo">
      <summary>
              提供对 <see cref="T:System.Data.Common.DbDataRecord" /> 的结构化类型相关信息和列信息的访问。
            </summary>
    </member>
    <member name="T:System.Data.Common.DbCommandDefinition">
      <summary>
              定义可缓存的命令计划。
            </summary>
    </member>
    <member name="T:System.Data.Common.DbProviderManifest">
      <summary>
               CLR 类型的所有类型的元数据接口 
            </summary>
    </member>
    <member name="T:System.Data.Common.DbProviderServices">
      <summary>
               用于生成命令定义; 工厂使用此对象类型作为参数传递给该提供程序工厂; 上的 IServiceProvider.GetService 方法 
            </summary>
    </member>
    <member name="T:System.Data.Common.DbXmlEnabledProviderManifest">
      <summary>
              表示基于 XML 定义实现 <see cref="T:System.Data.Common.DbProviderManifest" /> 的基类。
               您可以使用 <see cref="T:System.Data.Common.DbXmlEnabledProviderManifest" /> 类在运行时获取特定于提供程序的信息。
            </summary>
    </member>
    <member name="T:System.Data.Common.EntityRecordInfo">
      <summary>
              提供对实体元数据的访问。
            </summary>
    </member>
    <member name="T:System.Data.Common.EntitySql.EntitySqlParser">
      <summary>
              表示公共实体 SQL 分析器类。
            </summary>
    </member>
    <member name="T:System.Data.Common.EntitySql.FunctionDefinition">
      <summary>
               Entity SQL 查询内联函数定义中，作为的一部分返回 <see cref="T:System.Data.Common.EntitySql.ParseResult" />。
            </summary>
    </member>
    <member name="T:System.Data.Common.EntitySql.ParseResult">
      <summary>
               实体 SQL 分析器结果信息。
            </summary>
    </member>
    <member name="T:System.Data.Common.FieldMetadata">
      <summary>
              为 <see cref="T:System.Data.Common.DataRecordInfo" /> 对象提供对字段元数据的访问。
            </summary>
    </member>
    <member name="T:System.Data.EntityClient.EntityCommand">
      <summary>
              表示概念层的命令。
            </summary>
    </member>
    <member name="T:System.Data.EntityClient.EntityConnection">
      <summary>
              包含对概念模型和数据源连接的引用。
               此类不能被继承。
            </summary>
    </member>
    <member name="T:System.Data.EntityClient.EntityConnectionStringBuilder">
      <summary>
              为创建和管理供 EntityClient 使用的连接字符串的内容提供了一种简单的方法。
            </summary>
    </member>
    <member name="T:System.Data.EntityClient.EntityDataReader">
      <summary>
              从数据源中读取行的只进流。
            </summary>
    </member>
    <member name="T:System.Data.EntityClient.EntityParameter">
      <summary>
              表示在 EntityCommand 中使用的参数。
            </summary>
    </member>
    <member name="T:System.Data.EntityClient.EntityParameterCollection">
      <summary>
              表示一个与 <see cref="T:System.Data.EntityClient.EntityCommand" /> 关联的参数集合。
            </summary>
    </member>
    <member name="T:System.Data.EntityClient.EntityProviderFactory">
      <summary>
              表示一组方法，这些方法用于创建数据源类的提供程序实现的实例。
            </summary>
    </member>
    <member name="T:System.Data.EntityClient.EntityTransaction">
      <summary>
              指定 <see cref="P:System.Data.EntityClient.EntityCommand" /> 的事务。
            </summary>
    </member>
    <member name="T:System.Data.EntityCommandCompilationException">
      <summary>
              表示命令编译过程中发生的错误；当无法生成命令树来表示命名文本时。
            </summary>
    </member>
    <member name="T:System.Data.EntityCommandExecutionException">
      <summary>
              表示当基础存储提供程序未能执行指定的命令时发生的错误。
               此异常通常包装一个提供程序特定的异常。
            </summary>
    </member>
    <member name="T:System.Data.EntityException">
      <summary>
              表示与实体框架相关的错误中发生的 <see langword="EntityClient" /> 命名空间。
              <see langword="EntityException" /> 是引发的所有实体框架异常的基类 <see langword="EntityClient" />。
            </summary>
    </member>
    <member name="T:System.Data.EntityKey">
      <summary>
              提供对作为实体类型实例的对象的持久引用。
            </summary>
    </member>
    <member name="T:System.Data.EntityKeyMember">
      <summary>
              表示作为 <see cref="T:System.Data.EntityKey" /> 一部分的键名称和值对。
            </summary>
    </member>
    <member name="T:System.Data.EntitySqlException">
      <summary>
              表示分析 Entity SQL 命令文本时出现的错误。
               违反语法或语义规则时，引发此异常。
            </summary>
    </member>
    <member name="T:System.Data.EntityState">
      <summary>
              实体对象的状态。
            </summary>
    </member>
    <member name="F:System.Data.EntityState.Detached">
      <summary>
              该对象存在但未被跟踪。
               实体在创建之后且添加到对象上下文之前处于此状态。
               通过调用 <see cref="M:System.Data.Objects.ObjectContext.Detach(System.Object)" /> 方法从上下文中移除实体后，或者使用 <see cref="F:System.Data.Objects.MergeOption.NoTracking" /><see cref="T:System.Data.Objects.MergeOption" /> 加载实体后，该实体也会处于此状态。
               没有与处于 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 状态的对象关联的 <see cref="F:System.Data.EntityState.Detached" /> 实体。
            </summary>
    </member>
    <member name="F:System.Data.EntityState.Unchanged">
      <summary>
              自附加到上下文中后，或自上次调用 <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> 方法后，该对象尚未修改。
            </summary>
    </member>
    <member name="F:System.Data.EntityState.Added">
      <summary>
              该对象是已添加到对象上下文的新对象，但尚未调用 <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> 方法。
               在保存更改后，对象状态更改为 <see cref="F:System.Data.EntityState.Unchanged" />。
               处于 <see cref="F:System.Data.EntityState.Added" /> 状态的对象在 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 中没有原始值。
            </summary>
    </member>
    <member name="F:System.Data.EntityState.Deleted">
      <summary>
              已从对象上下文中删除该对象。
               在保存更改后，对象状态更改为 <see cref="F:System.Data.EntityState.Detached" />。
            </summary>
    </member>
    <member name="F:System.Data.EntityState.Modified">
      <summary>
              对象上的一个标量属性已修改，但尚未调用 <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> 方法。
               在没有更改跟踪代理的 POCO 实体中，如果调用 <see cref="F:System.Data.EntityState.Modified" /> 方法，则已修改属性的状态将更改为 <see cref="M:System.Data.Objects.ObjectContext.DetectChanges" />。
               在保存更改后，对象状态更改为 <see cref="F:System.Data.EntityState.Unchanged" />。
            </summary>
    </member>
    <member name="T:System.Data.IExtendedDataRecord">
      <summary>
              为 <see cref="T:System.Data.Common.DbDataRecord" /> 提供对 <see cref="T:System.Data.Common.DbDataReader" /> 的每行中的列值的访问。
            </summary>
    </member>
    <member name="T:System.Data.InvalidCommandTreeException">
      <summary>
              引发来指示命令目录树无效的异常。
               此当前不会引发异常任意位置对实体框架中。
            </summary>
    </member>
    <member name="T:System.Data.Mapping.EntityViewContainer">
      <summary>
              在设计时创建的、用于存储生成的视图的类型的基类。
            </summary>
    </member>
    <member name="T:System.Data.Mapping.EntityViewGenerationAttribute">
      <summary>
              此属性用于标记包含生成的视图类型的程序集。
            </summary>
    </member>
    <member name="T:System.Data.Mapping.MappingItemCollection">
      <summary>
              设计用来存储映射信息的 <see cref="T:System.Data.Metadata.Edm.ItemCollection" /> 对象的集合。
            </summary>
    </member>
    <member name="T:System.Data.Mapping.StorageMappingItemCollection">
      <summary>
              表示存储映射（CS 映射）空间中的项的集合。
            </summary>
    </member>
    <member name="T:System.Data.MappingException">
      <summary>
              当映射相关服务请求失败时引发的异常。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.AssociationEndMember">
      <summary>
              表示 <see langword="End" /> 概念模型中的关联。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.AssociationSet">
      <summary>
              表示在概念模型中设置的关联。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.AssociationSetEnd">
      <summary>
              表示 <see langword="End" /> 关联在概念模型中设置。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.AssociationType">
      <summary>
              表示概念模型中的关联。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.BuiltInTypeKind">
      <summary>
              表示一个枚举，指定概念模型中的所有内置类型的列表。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.AssociationEndMember">
      <summary>
              一个指示 <see cref="T:System.Data.Metadata.Edm.AssociationEndMember" /> 类型的枚举成员。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.AssociationSetEnd">
      <summary>
              一个指示 <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" /> 类型的枚举成员。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.AssociationSet">
      <summary>
              一个指示 <see cref="T:System.Data.Metadata.Edm.AssociationSet" /> 类型的枚举成员。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.AssociationType">
      <summary>
              一个指示 <see cref="T:System.Data.Metadata.Edm.AssociationType" /> 类型的枚举成员。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EntitySetBase">
      <summary>
              一个指示 <see cref="T:System.Data.Metadata.Edm.EntitySetBase" /> 类型的枚举成员。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EntityTypeBase">
      <summary>
              一个指示 <see cref="T:System.Data.Metadata.Edm.EntityTypeBase" /> 类型的枚举成员。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.CollectionType">
      <summary>
              一个指示 <see cref="T:System.Data.Metadata.Edm.CollectionType" /> 类型的枚举成员。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.CollectionKind">
      <summary>
              一个指示 <see cref="T:System.Data.Metadata.Edm.CollectionKind" /> 类型的枚举成员。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.ComplexType">
      <summary>
              一个指示 <see cref="T:System.Data.Metadata.Edm.ComplexType" /> 类型的枚举成员。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.Documentation">
      <summary>
              一个指示 <see cref="T:System.Data.Metadata.Edm.Documentation" /> 类型的枚举成员。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.OperationAction">
      <summary>
              一个指示 <see cref="T:System.Data.Metadata.Edm.OperationAction" /> 类型的枚举成员。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EdmType">
      <summary>
              一个指示 <see cref="T:System.Data.Metadata.Edm.EdmType" /> 类型的枚举成员。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EntityContainer">
      <summary>
              一个指示 <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 类型的枚举成员。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EntitySet">
      <summary>
              一个指示 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 类型的枚举成员。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EntityType">
      <summary>
              一个指示 <see cref="T:System.Data.Metadata.Edm.EntityType" /> 类型的枚举成员。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EnumType">
      <summary>
              一个指示 <see cref="T:System.Data.Metadata.Edm.EnumType" /> 类型的枚举成员。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EnumMember">
      <summary>
              一个指示 <see cref="T:System.Data.Metadata.EdmEnumMember" /> 类型的枚举成员。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.Facet">
      <summary>
              一个指示 <see cref="T:System.Data.Metadata.Edm.Facet" /> 类型的枚举成员。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EdmFunction">
      <summary>
              一个指示 <see cref="T:System.Data.Metadata.Edm.EdmFunction" /> 类型的枚举成员。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.FunctionParameter">
      <summary>
              一个指示 <see cref="T:System.Data.Metadata.Edm.FunctionParameter" /> 类型的枚举成员。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.GlobalItem">
      <summary>
              一个指示 <see cref="T:System.Data.Metadata.Edm.GlobalItem" /> 类型的枚举成员。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.MetadataProperty">
      <summary>
              一个指示 <see cref="T:System.Data.Metadata.Edm.MetadataProperty" /> 类型的枚举成员。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.NavigationProperty">
      <summary>
              一个指示 <see cref="T:System.Data.Metadata.Edm.NavigationProperty" /> 类型的枚举成员。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.MetadataItem">
      <summary>
              一个指示 <see cref="T:System.Data.Metadata.Edm.MetadataItem" /> 类型的枚举成员。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EdmMember">
      <summary>
              一个指示 <see cref="T:System.Data.Metadata.Edm.EdmMember" /> 类型的枚举成员。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.ParameterMode">
      <summary>
              一个指示 <see cref="T:System.Data.Metadata.Edm.ParameterMode" /> 类型的枚举成员。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.PrimitiveType">
      <summary>
              一个指示 <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> 类型的枚举成员。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.PrimitiveTypeKind">
      <summary>
              一个指示 <see cref="T:System.Data.Metadata.Edm.PrimitiveTypeKind" /> 类型的枚举成员。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EdmProperty">
      <summary>
              一个指示 <see cref="T:System.Data.Metadata.Edm.EdmProperty" /> 类型的枚举成员。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.ProviderManifest">
      <summary>
              一个指示 <see cref="T:System.Data.Metadata.Edm.ProviderManifest" /> 类型的枚举成员。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.ReferentialConstraint">
      <summary>
              一个指示 <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" /> 类型的枚举成员。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.RefType">
      <summary>
              一个指示 <see cref="T:System.Data.Metadata.Edm.RefType" /> 类型的枚举成员。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.RelationshipEndMember">
      <summary>
              一个指示 <see cref="T:System.Data.Metadata.Edm.RelationshipEndMember" /> 类型的枚举成员。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.RelationshipMultiplicity">
      <summary>
              一个指示 <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" /> 类型的枚举成员。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.RelationshipSet">
      <summary>
              一个指示 <see cref="T:System.Data.Metadata.Edm.RelationshipSet" /> 类型的枚举成员。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.RelationshipType">
      <summary>
              一个指示 <see cref="T:System.Data.Metadata.Edm.RelationshipType" /> 类型的枚举成员。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.RowType">
      <summary>
              一个指示 <see cref="T:System.Data.Metadata.Edm.RowType" /> 类型的枚举成员。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.SimpleType">
      <summary>
              一个指示 <see cref="T:System.Data.Metadata.Edm.SimpleType" /> 类型的枚举成员。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.StructuralType">
      <summary>
              一个指示 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 类型的枚举成员。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.TypeUsage">
      <summary>
              一个指示 <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> 类型的枚举成员。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.CollectionKind">
      <summary>
              表示一个枚举，该枚举指定应用于概念性架构定义语言 (CSDL) 文件中的属性的集合类型。
               该集合类型可以应用于任何类型的属性。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.CollectionKind.None">
      <summary>
              该属性不是集合。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.CollectionKind.Bag">
      <summary>
              该集合具有包语义。
               项未经过排序，而且可以接受重复项。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.CollectionKind.List">
      <summary>
              该集合具有列表语义。
               各个项之间的顺序是确定的，而且可以接受重复项。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.CollectionType">
      <summary>
              表示特定类型的实例的集合。
               不能显式定义 <see cref="T:System.Data.Metadata.Edm.CollectionType" /> 概念模型中。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.ComplexType">
      <summary>
              表示概念性模型中的复杂类型。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.ConcurrencyMode">
      <summary>
              概念模型中指定的属性的并发选项。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ConcurrencyMode.None">
      <summary>
              执行写入操作时从不验证属性。
               这是默认的并发模式。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ConcurrencyMode.Fixed">
      <summary>
              执行写入操作时始终验证属性。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.DataSpace">
      <summary>
              指定 Entity Framework 中的模型的默认名称。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.DataSpace.OSpace">
      <summary>
              表示对象模型的默认名称。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.DataSpace.CSpace">
      <summary>
              表示概念性模型的默认名称。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.DataSpace.SSpace">
      <summary>
              表示存储模型的默认名称。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.DataSpace.OCSpace">
      <summary>
              表示对象模型与概念性模型之间的映射的默认名称。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.DataSpace.CSSpace">
      <summary>
              表示概念性模型与存储模型之间的映射的默认名称。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.Documentation">
      <summary>
              表示与概念模型结构关联的文档。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.EdmError">
      <summary>
              封装了泛型概念模型错误的错误信息。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.EdmFunction">
      <summary>
              表示有关可能的 Entity SQL 查询语言编写的查询从调用的函数的信息。
               这些函数可能是由存储提供程序公开的内置函数，也可能是特定数据库中由用户定义的函数。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.EdmItemCollection">
      <summary>
              加载有关概念性模型的元数据。
              EdmItemCollection 用于加载概念性架构定义语言 (CSDL) 文件中的元数据。
               此类派生自 <see cref="T:System.Data.Metadata.Edm.ItemCollection" /> 类。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.EdmMember">
      <summary>
              表示可在任意 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 中声明的成员。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.EdmProperty">
      <summary>
              表示为一个属性 <see cref="T:System.Data.Metadata.Edm.EntityType" /> 概念模型中。
              <see cref="T:System.Data.Metadata.Edm.EdmProperty" /> 类派生自 <see cref="T:System.Data.Metadata.Edm.EdmMember" /> 类，可提供此 <see cref="P:System.Data.Metadata.Edm.EdmProperty.Default" /> 的类型的 <see cref="P:System.Data.Metadata.Edm.EdmProperty.Nullable" /> 和 <see cref="T:System.Data.Metadata.Edm.EdmProperty" /> 方面。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.EdmSchemaError">
      <summary>
              封装有关概念模型架构错误的详细的信息。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.EdmSchemaErrorSeverity">
      <summary>
              指定错误的严重级别。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.EdmSchemaErrorSeverity.Warning">
      <summary>
              一个警告，指示架构中存在某些问题，但仍然可以使用。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.EdmSchemaErrorSeverity.Error">
      <summary>
              一个错误，指示发生了严重问题，无法使用架构。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.EdmType">
      <summary>
              表示概念性模型中的所有类型的基类。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.EntityContainer">
      <summary>
              表示在概念模型实体容器。
              <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> 是实体集和关联集的逻辑分组。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.EntitySet">
      <summary>
              表示概念模型中的实体集。
              <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 的 <see cref="T:System.Data.Metadata.Edm.EntityType" /> 包含 <see cref="T:System.Data.Metadata.Edm.EntityType" /> 或其任何子类型的实例。
               可以使用同一个 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 定义多个 <see cref="T:System.Data.Metadata.Edm.EntityType" />。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.EntitySetBase">
      <summary>
              <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 和 <see cref="T:System.Data.Metadata.Edm.RelationshipSet" /> 的基类。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.EntityType">
      <summary>
              表示特定类型的数据，如客户实体或概念模型中的 order 实体。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.EntityTypeBase">
      <summary>
              <see cref="T:System.Data.Metadata.Edm.EntityType" /> 和 <see cref="T:System.Data.Metadata.Edm.RelationshipType" /> 的基类型。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.EnumMember">
      <summary>
               表示枚举成员。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.EnumType">
      <summary>
               表示一个枚举类型。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.Facet">
      <summary>
              提供有关成员的其他信息。
               在 ADO.NET 元数据类型层次结构，方面提供有关通过声明的类型成员的附加信息的成员。 </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.FacetDescription">
      <summary>
              指定对方面的说明。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.FunctionParameter">
      <summary>
              描述 <see cref="T:System.Data.Metadata.Edm.EdmFunction" /> 的参数。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.GlobalItem">
      <summary>
              表示所有概念模型类型和实体容器的基项的类。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.ItemCollection">
      <summary>
              <see cref="T:System.Data.Metadata.Edm.ObjectItemCollection" />、<see cref="T:System.Data.Metadata.Edm.EdmItemCollection" /> 和 <see cref="T:System.Data.Mapping.StorageMappingItemCollection" /> 类的基类。
              <see cref="T:System.Data.Metadata.Edm.ItemCollection" /> 类是一个抽象类，可提供用于加载和保存内存中的元数据的核心 API。
               此类派生自 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 类。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.MetadataItem">
      <summary>
              表示 ADO.NET 元数据类型层次结构中所有元数据的项基类。 </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.MetadataProperty">
      <summary>
              表示 ADO.NET 元数据层次结构中的项的元数据属性。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.MetadataWorkspace">
      <summary>
              表示 ADO.NET 为从各种源检索元数据提供支持的元数据运行时服务组件。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.NavigationProperty">
      <summary>
              表示从一种实体类型到概念模型中的另一个实体类型的导航。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.ObjectItemCollection">
      <summary>
              用于表示对象层的项集合的类。
               集合的大多数实际维护的实现都是通过 ItemCollection 完成的。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.OperationAction">
      <summary>
              指定可能的操作的列表时父 <see langword="End" /> 的 <see cref="T:System.Data.Metadata.Edm.RelationshipType" /> 被删除。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.OperationAction.None">
      <summary>
              只有一个父 <see langword="End" /> 可以删除。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.OperationAction.Cascade">
      <summary>
              当父 <see langword="End" /> 被删除，其关联的子 end 也将被删除。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.OperationAction.Restrict">
      <summary>
              父 <see langword="End" /> 如果它具有一个或多个关联的子 end 不能删除。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.ParameterMode">
      <summary>
              指定参数的方向。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterMode.In">
      <summary>
              一个输入参数。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterMode.Out">
      <summary>
              一个输出参数。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterMode.InOut">
      <summary>
              同时为输入参数和输出参数。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterMode.ReturnValue">
      <summary>
              该方法的一个返回值。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.ParameterTypeSemantics">
      <summary>
              指定用于解析函数重载的类型语义。
               在提供程序清单文件中，每个存储提供程序都必须使用这些枚举标志来定义每个函数。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterTypeSemantics.AllowImplicitConversion">
      <summary>
              一个标志，指示在给定参数类型和形参类型之间进行隐式转换。
               这是默认的转换类型。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterTypeSemantics.AllowImplicitPromotion">
      <summary>
              一个标志，指示在给定参数类型和形参类型之间进行类型提升。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterTypeSemantics.ExactMatchOnly">
      <summary>
              一个标志，指示只能使用完全等同。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.PrimitiveType">
      <summary>
              描述 .NET Framework 基元类型、 概念模型基元类型和存储提供程序特定的基元类型。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.PrimitiveTypeKind">
      <summary>
              指定由 EDM 定义的基元类型。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Binary">
      <summary>
              二进制类型。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Boolean">
      <summary>
              布尔值的类型。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Byte">
      <summary>
              Byte 类型。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.DateTime">
      <summary>
              DateTime 类型。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Decimal">
      <summary>
              Decimal 类型。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Double">
      <summary>
              双精度类型。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Guid">
      <summary>
              Guid 类型。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Single">
      <summary>
              Single 类型。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.SByte">
      <summary>
              SByte 类型。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Int16">
      <summary>
              Int16 类型。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Int32">
      <summary>
              Int32 类型。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Int64">
      <summary>
              Int64 类型。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.String">
      <summary>
              String 类型。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Time">
      <summary>
              时间类型。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.DateTimeOffset">
      <summary>
              DateTimeOffset 类型。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Geometry">
      <summary>
              Geometry 类型中。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Geography">
      <summary>
              Geography 类型中。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeometryPoint">
      <summary>
              几何点类型。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeometryLineString">
      <summary>
              几何行字符串类型。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeometryPolygon">
      <summary>
              几何 polygon 类型。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeometryMultiPoint">
      <summary>
              几何多点类型。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeometryMultiLineString">
      <summary>
              几何多行字符串类型。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeometryMultiPolygon">
      <summary>
              几何的多个多边形类型。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeometryCollection">
      <summary>
              几何集合类型中。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeographyPoint">
      <summary>
              地理点类型。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeographyLineString">
      <summary>
              地理行字符串类型。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeographyPolygon">
      <summary>
              地理 polygon 类型。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeographyMultiPoint">
      <summary>
              地理的多个点类型。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeographyMultiLineString">
      <summary>
              地理的多行字符串类型。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeographyMultiPolygon">
      <summary>
              地理的多个多边形类型。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.GeographyCollection">
      <summary>
              地理集合类型中。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.PropertyKind">
      <summary>
              概念模型中指定项属性的类型。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PropertyKind.System">
      <summary>
              一个指示项属性为 System 的枚举成员。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PropertyKind.Extended">
      <summary>
              一个指示项属性为 Extended 的枚举成员。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1">
      <summary>
              通过提供具有高级查找功能的只读集合表示 ADO.NET 元数据层次结构中的成员集合。
               此类派生自 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection" /> 类。 </summary>
      <typeparam name="T">
                集合中的元素类型。
              </typeparam>
    </member>
    <member name="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator">
      <summary>
              支持对 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 集合执行简单迭代。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.ReferentialConstraint">
      <summary>
              描述概念模型中的关系的引用约束。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.RefType">
      <summary>
              提供实体的地址，供使用该实体的操作使用。
               不能定义 <see cref="T:System.Data.Metadata.Edm.RefType" /> 在概念模型架构中显式。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.RelationshipEndMember">
      <summary>
              定义 <see langword="End" /> 成员 <see cref="T:System.Data.Metadata.Edm.RelationshipType" />。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.RelationshipMultiplicity">
      <summary>
              表示重数信息有关 <see langword="End" /> 的关系类型。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne">
      <summary>
              下限为 0，上限为 1。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.RelationshipMultiplicity.One">
      <summary>
              下限为 1，上限也为 1。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.RelationshipMultiplicity.Many">
      <summary>
              下限为 0，上限为 null。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.RelationshipSet">
      <summary>
              表示在概念模型中设置的关系。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.RelationshipType">
      <summary>
              表示概念性模型中的关系的基类。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.RowType">
      <summary>
              描述一个行，例如查询的结果。
               此类派生自 <see cref="T:System.Data.Metadata.Edm.StructuralType" /> 类。
               行类型的结构取决于查询中提取的数据库列。
              <see cref="T:System.Data.Metadata.Edm.RowType" /> 中会很有用 概念模型函数。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.SimpleType">
      <summary>
              基类，用于描述概念模型中的基元类型。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.StoreGeneratedPattern">
      <summary>
              表示一个枚举，指定三个选项，用于指示是否在存储架构定义语言 (SSDL) (.ssdl) 列都需要在过程的值插入和更新操作。
              
                ADO.NET 读取列的值并将其存储在内存中缓存。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.StoreGeneratedPattern.None">
      <summary>
              一个值，指示它不是服务器生成的属性。
               这是默认值。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.StoreGeneratedPattern.Identity">
      <summary>
              执行插入时生成一个值，但在执行更新时保持不变。
            </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.StoreGeneratedPattern.Computed">
      <summary>
              执行插入和更新时都将生成一个值。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.StoreItemCollection">
      <summary>
              加载有关存储（数据库）模型的元数据。
              <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> 用于加载存储架构定义语言 (SSDL) 文件中的元数据。
               此类派生自 <see cref="T:System.Data.Metadata.Edm.ItemCollection" /> 类。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.StructuralType">
      <summary>
              概念模型中具有成员的所有类型的基类型。
            </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.TypeUsage">
      <summary>
              描述一个类型以及该类型的一组方面。
            </summary>
    </member>
    <member name="T:System.Data.MetadataException">
      <summary>
              当元数据相关服务请求失败时引发的异常。
            </summary>
    </member>
    <member name="T:System.Data.ObjectNotFoundException">
      <summary>
              当对象不存在时引发的异常。
            </summary>
    </member>
    <member name="T:System.Data.Objects.CompiledQuery">
      <summary>
              表示一个缓存的 LINQ to Entities 查询。
            </summary>
    </member>
    <member name="T:System.Data.Objects.CurrentValueRecord">
      <summary>
              提供对对象数据的当前值的访问。
            </summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.ComplexObject">
      <summary>
              复杂类型的基类。
            </summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmComplexPropertyAttribute">
      <summary>
              一个属性 (Attribute)，指示该属性 (property) 表示复杂属性 (property)。
            </summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmComplexTypeAttribute">
      <summary>
              一个属性，指示类表示复杂类型。
            </summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmEntityTypeAttribute">
      <summary>
              一个属性，指示类表示实体类型。
            </summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmEnumTypeAttribute">
      <summary>
               此属性表示枚举类型。
            </summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmFunctionAttribute">
      <summary>
              一个特性，应用于一种方法时，该值指示该方法是在概念模型或存储模型中的函数的代理。
            </summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmPropertyAttribute">
      <summary>
              属性 (Attribute) 的基类，这些属性 (Attribute) 定义对象层中的类型属性 (Property) 如何映射到概念性模型中的实体类型或复杂类型的属性 (Property)。
            </summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmRelationshipAttribute">
      <summary>
              定义两个实体类型之间的基于概念性模型中关联的关系。
            </summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute">
      <summary>
              一个属性 (Attribute)，指示属性 (property) 表示导航属性 (property)。
            </summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmScalarPropertyAttribute">
      <summary>
              一个属性 (Attribute)，指示属性 (property) 表示标量属性 (property)。
            </summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmSchemaAttribute">
      <summary>
              一个属性，该属性指示程序集包含映射到概念性模型中的实体类型的类。
            </summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmTypeAttribute">
      <summary>
              属性的基类，这些属性定义对象层中的类型如何映射到概念性模型中的实体类型和复杂类型。
            </summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EntityCollection`1">
      <summary>
              表示关系“多”端的对象集合。
            </summary>
      <typeparam name="TEntity">
                集合的实体类型。
              </typeparam>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EntityObject">
      <summary>
              Entity Data Model 工具生成的实体类型的基类。
            </summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EntityReference">
      <summary>
              为 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> 实现非通用功能的基类。
            </summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EntityReference`1">
      <summary>
              表示重数为零或一的关联的相关端。
            </summary>
      <typeparam name="TEntity">
                引用的实体类型。
              </typeparam>
    </member>
    <member name="T:System.Data.Objects.DataClasses.IEntityChangeTracker">
      <summary>
              定义对象服务用于跟踪对象属性更改的功能。
            </summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.IEntityWithChangeTracker">
      <summary>
              定义实现更改跟踪的实体类型。
            </summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.IEntityWithKey">
      <summary>
              定义公开实体键的实体类型。
            </summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.IEntityWithRelationships">
      <summary>
              定义一个与一个或更多其他实体类型具有关系的实体类型。
            </summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.IRelatedEnd">
      <summary>
              定义关系的端。
            </summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.RelatedEnd">
      <summary>
              表示实现个相关端的常见功能的基类。
            </summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.RelationshipKind">
      <summary>
              枚举两个或更多实体之间的关系的类型。
            </summary>
    </member>
    <member name="F:System.Data.Objects.DataClasses.RelationshipKind.Association">
      <summary>
              通过概念模型中的关联定义了关系。
               有关详细信息，请参阅 关联元素 (CSDL)。
            </summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.RelationshipManager">
      <summary>
              用于跟踪对象上下文中对象之间的关系。
            </summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.StructuralObject">
      <summary>
              表示一个类，包含对 date 对象共同的方法需求。
            </summary>
    </member>
    <member name="T:System.Data.Objects.DbUpdatableDataRecord">
      <summary>
              提供对对象数据的原始值的访问。
              <see cref="T:System.Data.Objects.DbUpdatableDataRecord" /> 实现允许对对象的原始值进行更新的方法。
            </summary>
    </member>
    <member name="T:System.Data.Objects.EntityFunctions">
      <summary>
              提供公共语言运行时 (CLR) 方法公开概念模型中的 LINQ to Entities 查询的规范函数。
               有关规范函数的信息，请参见规范函数。
            </summary>
    </member>
    <member name="T:System.Data.Objects.IObjectSet`1">
      <summary>
              提供允许对一组数据对象进行修改的功能。
            </summary>
      <typeparam name="TEntity">
                从查询返回的实体对象的类型。
              </typeparam>
    </member>
    <member name="T:System.Data.Objects.MergeOption">
      <summary>
              指定加载到对象上下文中的对象与对象上下文中的已有对象的合并方式。
            </summary>
    </member>
    <member name="F:System.Data.Objects.MergeOption.AppendOnly">
      <summary>
              将对象上下文中不存在的对象附加到上下文。
               如果某个对象已存在于上下文中，则不会使用数据源值覆盖该对象的属性在对应项中的当前值和原始值。
               该对象对应的项的状态以及该对象在对应项中的属性的状态不会更改。
              <see cref="F:System.Data.Objects.MergeOption.AppendOnly" /> 为默认合并选项。
            </summary>
    </member>
    <member name="F:System.Data.Objects.MergeOption.OverwriteChanges">
      <summary>
              将对象上下文中不存在的对象附加到上下文。
               如果某个对象已存在于上下文中，则不会使用数据源值覆盖该对象的属性在相应项中的当前值和原始值。
               该对象的对应项的状态设置为 <see cref="F:System.Data.EntityState.Unchanged" />，并且不会将任何属性标记为已修改。
            </summary>
    </member>
    <member name="F:System.Data.Objects.MergeOption.PreserveChanges">
      <summary>
              将对象上下文中不存在的对象附加到上下文。
            </summary>
    </member>
    <member name="F:System.Data.Objects.MergeOption.NoTracking">
      <summary>
              对象保持为 <see cref="F:System.Data.EntityState.Detached" /> 状态，也不在 <see cref="T:System.Data.Objects.ObjectStateManager" /> 中进行跟踪。
               但是， Entity Framework-生成的实体和具有代理的 POCO 实体维护到对象上下文，以方便加载相关对象的引用。
            </summary>
    </member>
    <member name="T:System.Data.Objects.ObjectContext">
      <summary>
              提供以对象形式查询和使用实体数据的功能。
            </summary>
    </member>
    <member name="T:System.Data.Objects.ObjectContextOptions">
      <summary>
              定义用于影响行为的选项 <see cref="T:System.Data.Objects.ObjectContext" />。
            </summary>
    </member>
    <member name="T:System.Data.Objects.ObjectMaterializedEventArgs">
      <summary>
              包含的数据 <see cref="E:System.Data.Objects.ObjectContext.ObjectMaterialized" /> 事件。
            </summary>
    </member>
    <member name="T:System.Data.Objects.ObjectMaterializedEventHandler">
      <summary>
              表示将处理的方法 <see cref="E:System.Data.Objects.ObjectContext.ObjectMaterialized" /> 事件 <see cref="T:System.Data.Objects.ObjectContext" />。
            </summary>
      <param name="sender">
                <see cref="T:System.Data.Objects.ObjectContext" /> 触发了事件的实例。
              </param>
      <param name="e">
                包含事件数据的 <see cref="T:System.Data.Objects.ObjectMaterializedEventArgs" /> 对象。
              </param>
    </member>
    <member name="T:System.Data.Objects.ObjectParameter">
      <summary>
              表示传递给对象查询的查询参数。
            </summary>
    </member>
    <member name="T:System.Data.Objects.ObjectParameterCollection">
      <summary>
              将查询参数表示为 <see cref="T:System.Data.Objects.ObjectParameter" /> 中定义的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 对象。
            </summary>
    </member>
    <member name="T:System.Data.Objects.ObjectQuery">
      <summary>
              实现使用 LINQ to Entities 和 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 对概念模型执行查询的通用功能。
            </summary>
    </member>
    <member name="T:System.Data.Objects.ObjectQuery`1">
      <summary>
              表示在给定对象上下文中对概念模型的类型化查询。
            </summary>
      <typeparam name="T">
                查询的实体类型。
              </typeparam>
    </member>
    <member name="T:System.Data.Objects.ObjectResult">
      <summary>
              表示一个类，该类实现 IEnumerable 和 IDisposable。
               此类的实例返回自 ObjectQuery.Execute 方法。
            </summary>
    </member>
    <member name="T:System.Data.Objects.ObjectResult`1">
      <summary>
              以对象的可枚举集合形式表示 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 的结果。
            </summary>
      <typeparam name="T">
                结果的实体类型。
              </typeparam>
    </member>
    <member name="T:System.Data.Objects.ObjectSet`1">
      <summary>
              表示用于执行创建、读取、更新和删除操作的类型化实体集。
            </summary>
      <typeparam name="TEntity">
                实体类型。
              </typeparam>
    </member>
    <member name="T:System.Data.Objects.ObjectStateEntry">
      <summary>
              表示实体、实体存根或关系。
            </summary>
    </member>
    <member name="T:System.Data.Objects.ObjectStateManager">
      <summary>
              维护实体类型实例和关系实例的对象状态和标识管理。
            </summary>
    </member>
    <member name="T:System.Data.Objects.OriginalValueRecord">
      <summary>
              提供对对象数据的原始值的访问。
            </summary>
    </member>
    <member name="T:System.Data.Objects.ProxyDataContractResolver">
      <summary>
              此类有助于将为 persistence-ignorant 数据类创建的代理类型解析为持久性未知对象的实际类型。
            </summary>
    </member>
    <member name="T:System.Data.Objects.RefreshMode">
      <summary>
              指定是保留对由对象服务跟踪的对象所做的属性更改，还是使用数据源中的属性值替换这些更改。
            </summary>
    </member>
    <member name="F:System.Data.Objects.RefreshMode.ClientWins">
      <summary>
              不使用数据源中的值替换在对象上下文中对对象所做的属性更改。
               在下一次调用 <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> 时，这些更改会发送到数据源。
            </summary>
    </member>
    <member name="F:System.Data.Objects.RefreshMode.StoreWins">
      <summary>
              使用数据源中的值替换在对象上下文中对对象所做的属性更改。
            </summary>
    </member>
    <member name="T:System.Data.Objects.SaveOptions">
      <summary>
              指定的对象上下文的行为时 <see cref="M:System.Data.Objects.ObjectContext.SaveChanges(System.Data.Objects.SaveOptions)" /> 调用方法。
            </summary>
    </member>
    <member name="F:System.Data.Objects.SaveOptions.None">
      <summary>
              而无需保存更改 <see cref="M:System.Data.Objects.ObjectContext.DetectChanges" /> 或 <see cref="M:System.Data.Objects.ObjectContext.AcceptAllChangesAfterSave" /> 所调用方法。
            </summary>
    </member>
    <member name="F:System.Data.Objects.SaveOptions.AcceptAllChangesAfterSave">
      <summary>
              保存更改后， <see cref="M:System.Data.Objects.ObjectContext.AcceptAllChangesAfterSave" /> 调用方法时，它将重置中的更改跟踪 <see cref="T:System.Data.Objects.ObjectStateManager" />。
            </summary>
    </member>
    <member name="F:System.Data.Objects.SaveOptions.DetectChangesBeforeSave">
      <summary>
              在保存更改之前， <see cref="M:System.Data.Objects.ObjectContext.DetectChanges" /> 调用方法来同步附加到对象上下文中的数据的对象的属性值 <see cref="T:System.Data.Objects.ObjectStateManager" />。
            </summary>
    </member>
    <member name="T:System.Data.Objects.SqlClient.SqlFunctions">
      <summary>
              提供公共语言运行时 (CLR) 方法的调用中的 LINQ to Entities 查询的数据库中的函数。
            </summary>
    </member>
    <member name="T:System.Data.Objects.SqlClient.SqlSpatialFunctions">
      <summary>
              表示 SQL 空间函数用于 SQL 客户端。
            </summary>
    </member>
    <member name="T:System.Data.OptimisticConcurrencyException">
      <summary>
              开放式并发冲突发生时引发的异常。
            </summary>
    </member>
    <member name="T:System.Data.PropertyConstraintException">
      <summary>
              属性的约束异常类。
               请注意，此类具有状态-所以如果您更改甚至其内部结构，它可以是一项重大更改。
            </summary>
    </member>
    <member name="T:System.Data.ProviderIncompatibleException">
      <summary>
              基础数据提供程序与 Entity Framework 不兼容时引发的异常。
            </summary>
    </member>
    <member name="T:System.Data.Spatial.DbGeography">
      <summary>
              表示大地测量 （圆形地球） 坐标系中的数据。
            </summary>
    </member>
    <member name="T:System.Data.Spatial.DbGeographyWellKnownValue">
      <summary>
               数据协定序列化表示形式 <see cref="T:System.Data.Spatial.DbGeography" /> 值。
            </summary>
    </member>
    <member name="T:System.Data.Spatial.DbGeometry">
      <summary>
              定义几何形状的对象提供基类。
            </summary>
    </member>
    <member name="T:System.Data.Spatial.DbGeometryWellKnownValue">
      <summary>
               数据协定序列化表示形式 <see cref="T:System.Data.Spatial.DbGeometry" /> 值。
            </summary>
    </member>
    <member name="T:System.Data.Spatial.DbSpatialDataReader">
      <summary>
               地理空间信息 (几何/Geography) 类型的独立于提供程序服务 API 支持。
            </summary>
    </member>
    <member name="T:System.Data.Spatial.DbSpatialServices">
      <summary>
              表示地理空间信息 (几何/Geography) 类型支持独立于提供程序服务 API。
            </summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlProviderServices">
      <summary>
              SQL Server 的 SqlClient 提供程序 DbProviderServices 实现。
            </summary>
    </member>
    <member name="T:System.Data.UpdateException">
      <summary>
              对对象实例的修改无法保持到数据源时引发的异常。
            </summary>
    </member>
  </members>
</doc>