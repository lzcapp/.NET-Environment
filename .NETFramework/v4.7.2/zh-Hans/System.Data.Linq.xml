<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Data.Linq</name>
  </assembly>
  <members>
    <member name="E:System.Data.Linq.EntitySet`1.ListChanged">
      <summary>
              列表中的内容发生更改时发生。
            </summary>
    </member>
    <member name="F:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.Arguments">
      <summary>
              快速具体化器捕获内部状态。
            </summary>
    </member>
    <member name="F:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.BufferReader">
      <summary>
              表示以只进的方式读取数据行的读取器。
            </summary>
    </member>
    <member name="F:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.DataReader">
      <summary>
              表示一个数据读取器。
            </summary>
    </member>
    <member name="F:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.Globals">
      <summary>
              快速具体化器捕获内部状态。
            </summary>
    </member>
    <member name="F:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.Locals">
      <summary>
              快速具体化器捕获内部状态。
            </summary>
    </member>
    <member name="F:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.Ordinals">
      <summary>
              表示一个数据读取器的列序号。
            </summary>
    </member>
    <member name="M:System.Data.Linq.Binary.#ctor(System.Byte[])">
      <summary>
              初始化 <see cref="T:System.Data.Linq.Binary" /> 类的新实例。
            </summary>
      <param name="value">
                表示二进制数据的字节。
              </param>
    </member>
    <member name="M:System.Data.Linq.Binary.Equals(System.Data.Linq.Binary)">
      <summary>
              确定两个二进制对象是否相等。
            </summary>
      <param name="other">
                <see cref="T:System.Object" /> 与之比较当前对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个二进制对象相等，则否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Linq.Binary.Equals(System.Object)">
      <summary>
              确定指定的 <see cref="T:System.Object" /> 是否等同于当前的 <see cref="T:System.Object" />。
            </summary>
      <param name="obj">
                要与当前的 <see cref="T:System.Object" /> 进行比较的 <see cref="T:System.Object" />。
              </param>
      <returns>
              <see langword="true" /> 如果两个二进制对象相等，则否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Linq.Binary.GetHashCode">
      <summary>
              用作特定类型的哈希函数。
            </summary>
      <returns>
              当前的二进制对象哈希代码。
            </returns>
    </member>
    <member name="M:System.Data.Linq.Binary.op_Equality(System.Data.Linq.Binary,System.Data.Linq.Binary)">
      <summary>
              描述两个二进制对象之间的相等性关系。
            </summary>
      <param name="binary1">
                第一个二进制对象。
              </param>
      <param name="binary2">
                第二个二进制对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个二进制对象相等，则否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Linq.Binary.op_Implicit(System.Byte[])~System.Data.Linq.Binary">
      <summary>
              允许将隐式强制转换为字节数组 <see cref="T:System.Data.Linq.Binary" /> 编程语言中的类型。
            </summary>
      <param name="value">
                要转换的一个实例的字节数组 <see cref="T:System.Data.Linq.Binary" /> 类型。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Linq.Binary" /> 类包含强制转换后的值。
            </returns>
    </member>
    <member name="M:System.Data.Linq.Binary.op_Inequality(System.Data.Linq.Binary,System.Data.Linq.Binary)">
      <summary>
              描述两个二进制对象之间的不相等关系。
            </summary>
      <param name="binary1">
                第一个二进制对象。
              </param>
      <param name="binary2">
                第二个二进制对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个二进制对象是否不相等;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Linq.Binary.ToArray">
      <summary>
              返回表示当前二进制对象的字节数组。
            </summary>
      <returns>
              包含当前二进制对象的值的字节数组。
            </returns>
    </member>
    <member name="M:System.Data.Linq.Binary.ToString">
      <summary>
              返回 <see cref="T:System.String" /> ，表示当前二进制对象。
            </summary>
      <returns>
              一个 <see cref="T:System.String" /> ，表示当前二进制对象。
            </returns>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.Clear">
      <summary>
              从集合中移除所有冲突。
            </summary>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.Contains(System.Data.Linq.ObjectChangeConflict)">
      <summary>
              指定给定的冲突是否为集合的成员。
            </summary>
      <param name="item">
                指定的冲突。
              </param>
      <returns>
              如果指定的冲突是集合的成员，则返回 true。
            </returns>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.CopyTo(System.Data.Linq.ObjectChangeConflict[],System.Int32)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />。
            </summary>
      <param name="array">
                要复制到的数组。
              </param>
      <param name="arrayIndex">
                数组索引开始复制的位置。
              </param>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.GetEnumerator">
      <summary>
              返回集合的枚举数。
            </summary>
      <returns>
              集合的枚举数。
            </returns>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.Remove(System.Data.Linq.ObjectChangeConflict)">
      <summary>
              指定是否从集合中移除指定的冲突。
            </summary>
      <param name="item">
                要移除的冲突。
              </param>
      <returns>
              返回 true if <see cref="T:System.Data.Linq.ObjectChangeConflict" /> 从集合中移除。
            </returns>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.ResolveAll(System.Data.Linq.RefreshMode)">
      <summary>
              通过使用指定的策略解决在集合中的所有冲突。
            </summary>
      <param name="mode">
                中的可用选项之一 <see cref="T:System.Data.Linq.RefreshMode" />。
              </param>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.ResolveAll(System.Data.Linq.RefreshMode,System.Boolean)">
      <summary>
              通过使用指定的策略解决在集合中的所有冲突。
            </summary>
      <param name="mode">
                使用要解决此冲突的策略。
              </param>
      <param name="autoResolveDeletes">
                如果为 true，则自动解决冲突而导致的已修改的对象已不再在数据库中。
              </param>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.System#Collections#Generic#ICollection{System#Data#Linq#ObjectChangeConflict}#Add(System.Data.Linq.ObjectChangeConflict)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)" />。
            </summary>
      <param name="item">
                要添加的项。
              </param>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
              将集合复制到一个数组。
            </summary>
      <param name="array">
                该数组的名称。
              </param>
      <param name="index">
                数组的索引。
              </param>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Collections.IEnumerable.GetEnumerator" />。
            </summary>
      <returns>
              用于循环访问集合的枚举器。
            </returns>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictException.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Linq.ChangeConflictException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictException.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Data.Linq.ChangeConflictException" /> 类，并指定一条消息，说明异常。
            </summary>
      <param name="message">
                要引发异常时公开的消息。
              </param>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictException.#ctor(System.String,System.Exception)">
      <summary>
              新实例初始化 <see cref="T:System.Data.Linq.ChangeConflictException" /> 类中，指定一条消息，说明该异常，并指定导致此异常的异常。
            </summary>
      <param name="message">
                要引发异常时公开的消息。
              </param>
      <param name="innerException">
                指定在其中的异常 <see cref="T:System.Data.Linq.ChangeConflictException" /> 是一个结果。
              </param>
    </member>
    <member name="M:System.Data.Linq.ChangeSet.ToString">
      <summary>
              返回表示当前 <see cref="T:System.Data.Linq.ChangeSet" /> 的字符串。
            </summary>
      <returns>
              表示当前 <see cref="T:System.Data.Linq.ChangeSet" /> 的字符串。
            </returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})">
      <summary>
              编译查询。
            </summary>
      <param name="query">
                要编译的查询表达式。
              </param>
      <typeparam name="TArg0">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg1">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg2">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg3">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg4">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg5">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg6">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg7">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg8">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TResult">
                一种 <see langword="T" /> 中 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 执行的委托所返回时返回 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法。
              </typeparam>
      <returns>
              一个表示已编译的查询的泛型委托。
            </returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})">
      <summary>
              编译查询。
            </summary>
      <param name="query">
                要编译的查询表达式。
              </param>
      <typeparam name="TArg0">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg1">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg2">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg3">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg4">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg5">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg6">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg7">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg8">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg9">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TResult">
                一种 <see langword="T" /> 中 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 执行的委托所返回时返回 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法。
              </typeparam>
      <returns>
              一个表示已编译的查询的泛型委托。
            </returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})">
      <summary>
              编译查询。
            </summary>
      <param name="query">
                要编译的查询表达式。
              </param>
      <typeparam name="TArg0">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg1">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg2">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg3">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg4">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg5">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg6">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg7">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg8">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg9">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg10">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TResult">
                一种 <see langword="T" /> 中 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 执行的委托所返回时返回 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法。
              </typeparam>
      <returns>
              一个表示已编译的查询的泛型委托。
            </returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})">
      <summary>
              编译查询。
            </summary>
      <param name="query">
                要编译的查询表达式。
              </param>
      <typeparam name="TArg0">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg1">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg2">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg3">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg4">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg5">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg6">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg7">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg8">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg9">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg10">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg11">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TResult">
                一种 <see langword="T" /> 中 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 执行的委托所返回时返回 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法。
              </typeparam>
      <returns>
              一个表示已编译的查询的泛型委托。
            </returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})">
      <summary>
              编译查询。
            </summary>
      <param name="query">
                要编译的查询表达式。
              </param>
      <typeparam name="TArg0">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg1">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg2">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg3">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg4">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg5">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg6">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg7">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg8">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg9">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg10">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg11">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg12">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TResult">
                一种 <see langword="T" /> 中 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 执行的委托所返回时返回 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法。
              </typeparam>
      <returns>
              一个表示已编译的查询的泛型委托。
            </returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})">
      <summary>
              编译查询。
            </summary>
      <param name="query">
                要编译的查询表达式。
              </param>
      <typeparam name="TArg0">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg1">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg2">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg3">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg4">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg5">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg6">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg7">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg8">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg9">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg10">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg11">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg12">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg13">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TResult">
                一种 <see langword="T" /> 中 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 执行的委托所返回时返回 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法。
              </typeparam>
      <returns>
              一个表示已编译的查询的泛型委托。
            </returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})">
      <summary>
              编译查询。
            </summary>
      <param name="query">
                要编译的查询表达式。
              </param>
      <typeparam name="TArg0">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg1">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg2">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg3">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg4">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg5">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg6">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg7">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg8">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg9">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg10">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg11">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg12">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg13">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg14">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TResult">
                一种 <see langword="T" /> 中 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 执行的委托所返回时返回 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法。
              </typeparam>
      <returns>
              一个表示已编译的查询的泛型委托。
            </returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``17(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16}})">
      <summary>
              编译查询。
            </summary>
      <param name="query">
                要编译的查询表达式。
              </param>
      <typeparam name="TArg0">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg1">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg2">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg3">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg4">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg5">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg6">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg7">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg8">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg9">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg10">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg11">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg12">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg13">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg14">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg15">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TResult">
                一种 <see langword="T" /> 中 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 执行的委托所返回时返回 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法。
              </typeparam>
      <returns>
              一个表示已编译的查询的泛型委托。
            </returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
              编译查询。
            </summary>
      <param name="query">
                要编译的查询表达式。
              </param>
      <typeparam name="TArg0">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TResult">
                一种 <see langword="T" /> 中 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 执行的委托所返回时返回 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法。
              </typeparam>
      <returns>
              一个表示已编译的查询的泛型委托。
            </returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>
              编译查询。
            </summary>
      <param name="query">
                要编译的查询表达式。
              </param>
      <typeparam name="TArg0">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg1">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TResult">
                一种 <see langword="T" /> 中 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 执行的委托所返回时返回 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法。
              </typeparam>
      <returns>
              一个表示已编译的查询的泛型委托。
            </returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
      <summary>
              编译查询。
            </summary>
      <param name="query">
                要编译的查询表达式。
              </param>
      <typeparam name="TArg0">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg1">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg2">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TResult">
                一种 <see langword="T" /> 中 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 执行的委托所返回时返回 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法。
              </typeparam>
      <returns>
              一个表示已编译的查询的泛型委托。
            </returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
      <summary>
              编译查询。
            </summary>
      <param name="query">
                要编译的查询表达式。
              </param>
      <typeparam name="TArg0">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg1">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg2">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg3">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TResult">
                一种 <see langword="T" /> 中 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 执行的委托所返回时返回 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法。
              </typeparam>
      <returns>
              一个表示已编译的查询的泛型委托。
            </returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})">
      <summary>
              编译查询。
            </summary>
      <param name="query">
                要编译的查询表达式。
              </param>
      <typeparam name="TArg0">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg1">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg2">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg3">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg4">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TResult">
                一种 <see langword="T" /> 中 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 执行的委托所返回时返回 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法。
              </typeparam>
      <returns>
              一个表示已编译的查询的泛型委托。
            </returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})">
      <summary>
              编译查询。
            </summary>
      <param name="query">
                要编译的查询表达式。
              </param>
      <typeparam name="TArg0">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg1">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg2">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg3">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg4">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg5">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TResult">
                一种 <see langword="T" /> 中 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 执行的委托所返回时返回 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法。
              </typeparam>
      <returns>
              一个表示已编译的查询的泛型委托。
            </returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})">
      <summary>
              编译查询。
            </summary>
      <param name="query">
                要编译的查询表达式。
              </param>
      <typeparam name="TArg0">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg1">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg2">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg3">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg4">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg5">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg6">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TResult">
                一种 <see langword="T" /> 中 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 执行的委托所返回时返回 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法。
              </typeparam>
      <returns>
              一个表示已编译的查询的泛型委托。
            </returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
      <summary>
              编译查询。
            </summary>
      <param name="query">
                要编译的查询表达式。
              </param>
      <typeparam name="TArg0">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg1">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg2">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg3">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg4">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg5">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg6">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TArg7">
                表示在执行由 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法返回的委托时必须传入的参数的类型。
              </typeparam>
      <typeparam name="TResult">
                一种 <see langword="T" /> 中 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 执行的委托所返回时返回 <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 方法。
              </typeparam>
      <returns>
              一个表示已编译的查询的泛型委托。
            </returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection)">
      <summary>
              新实例初始化 <see cref="T:System.Data.Linq.DataContext" /> 类通过引用使用的连接 .NET Framework。
            </summary>
      <param name="connection">
                使用的连接 .NET Framework。
              </param>
    </member>
    <member name="M:System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection,System.Data.Linq.Mapping.MappingSource)">
      <summary>
              新实例初始化 <see cref="T:System.Data.Linq.DataContext" /> 类通过引用的连接和映射源。
            </summary>
      <param name="connection">
                使用.NET Framework 的连接。
              </param>
      <param name="mapping">
                用于映射的源。
              </param>
    </member>
    <member name="M:System.Data.Linq.DataContext.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Data.Linq.DataContext" /> 类通过引用文件源。
            </summary>
      <param name="fileOrServerOrConnection">
                此参数可以是任何下列选项之一︰
              
                SQL Server Express 数据库所在的文件的名称。
              
                数据库所在的服务器的名称。
                 在这种情况下提供程序的用户使用的默认数据库。
              
                完整的连接字符串。
                
                  LINQ to SQL 只需将字符串传递给提供程序而无需修改。
              </param>
    </member>
    <member name="M:System.Data.Linq.DataContext.#ctor(System.String,System.Data.Linq.Mapping.MappingSource)">
      <summary>
              新实例初始化 <see cref="T:System.Data.Linq.DataContext" /> 类通过引用文件源和映射源。
            </summary>
      <param name="fileOrServerOrConnection">
                此参数可以是任何下列选项之一︰
              
                SQL Server Express 数据库所在的文件的名称。
              
                数据库所在的服务器的名称。
                 在这种情况下提供程序的用户使用的默认数据库。
              
                完整的连接字符串。
                
                  LINQ to SQL 只需将字符串传递给提供程序而无需修改。
              </param>
      <param name="mapping">
                用于映射的源。
              </param>
    </member>
    <member name="M:System.Data.Linq.DataContext.CreateDatabase">
      <summary>
              在服务器上创建一个数据库。
            </summary>
    </member>
    <member name="M:System.Data.Linq.DataContext.CreateMethodCallQuery``1(System.Object,System.Reflection.MethodInfo,System.Object[])">
      <summary>
              执行与指定的 CLR 方法相关联的数据库表值函数。
            </summary>
      <param name="instance">
                 方法调用 （当前对象） 的实例。
              </param>
      <param name="methodInfo">
                <see cref="T:System.Reflection.MethodInfo" /> 标识对应于一个数据库方法的 CLR 方法。
              </param>
      <param name="parameters">
                要传递给命令的参数数组。
              </param>
      <typeparam name="TResult">
                返回集合中元素的类型。
              </typeparam>
      <returns>
              数据库查询所返回的结果值的集合。
            </returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.DatabaseExists">
      <summary>
              确定是否可以打开关联的数据库。
            </summary>
      <returns>
              <see langword="true" /> 如果可以打开指定的数据库;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.DeleteDatabase">
      <summary>
              删除关联的数据库。
            </summary>
    </member>
    <member name="M:System.Data.Linq.DataContext.Dispose">
      <summary>
              释放 <see cref="T:System.Data.Linq.DataContext" /> 类的当前实例所使用的所有资源。
            </summary>
    </member>
    <member name="M:System.Data.Linq.DataContext.Dispose(System.Boolean)">
      <summary>
              释放使用的非托管的资源 <see cref="T:System.Data.Linq.DataContext" /> 类，还可以释放托管的资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteCommand(System.String,System.Object[])">
      <summary>
              在数据库上直接执行 SQL 命令。
            </summary>
      <param name="command">
                要执行的 SQL 命令。
              </param>
      <param name="parameters">
                要传递给命令的参数数组。
                 请注意以下行为︰
              
                如果数组中的对象数少于命令字符串中标识的最大数目时，将引发异常。
              
                如果数组包含的命令字符串中未引用的对象，不引发异常。
              
                如果任一参数为 null，它将转换为 <see langword="DBNull.Value" />。
              </param>
      <returns>
              执行命令修改的行数。
            </returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteDynamicDelete(System.Object)">
      <summary>
              执行时，在删除重写方法，以向 LINQ to SQL 的任务生成和执行动态 SQL 来执行删除操作。
            </summary>
      <param name="entity">
                要删除的实体。
              </param>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteDynamicInsert(System.Object)">
      <summary>
              执行时，在插入重写方法，以向 LINQ to SQL 的任务生成和执行动态 SQL 来执行插入操作。
            </summary>
      <param name="entity">
                要插入的实体。
              </param>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteDynamicUpdate(System.Object)">
      <summary>
              执行时，在更新重写方法，以向 LINQ to SQL 生成和执行动态 SQL 来执行更新操作的任务。
            </summary>
      <param name="entity">
                要更新的实体。
              </param>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteMethodCall(System.Object,System.Reflection.MethodInfo,System.Object[])">
      <summary>
              执行数据库存储的过程或标量函数与指定的 CLR 方法相关联。
            </summary>
      <param name="instance">
                 方法调用 （当前对象） 的实例。
              </param>
      <param name="methodInfo">
                标识对应于一个数据库方法的 CLR 方法。
              </param>
      <param name="parameters">
                要传递给命令的参数数组。
              </param>
      <returns>
              执行指定的方法的结果 （返回值和输出参数）。
            </returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteQuery(System.Type,System.String,System.Object[])">
      <summary>
              直接对数据库执行 SQL 查询。
            </summary>
      <param name="elementType">
                一种 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 要返回。
              
                用于匹配的字段对查询结果中的列或属性的对象中的算法工作方式如下︰
              
                如果字段或属性映射到特定的列名称，该列名会出现在结果集中。
              
                如果未映射的字段或属性，在结果集中应具有与同名的字段或属性的列。
              
                通过首先查找区分大小写匹配来执行比较。
                 如果未找到此匹配项，不区分大小写的匹配项则会继续搜索。
              
                该查询必须返回所有跟踪的字段和属性的对象 （不包括基于延迟加载的那些） 以下所有条件都都为真时︰
              
                <paramref name="T" /> 为显式跟踪的实体由 <see cref="T:System.Data.Linq.DataContext" />。
              
                <see cref="P:System.Data.Linq.DataContext.ObjectTrackingEnabled" /> 为 <see langword="true" />。
              
                实体具有一个主键。
              
                否则会引发异常。
              </param>
      <param name="query">
                要执行的 SQL 查询。
              </param>
      <param name="parameters">
                要传递给命令的参数数组。
                 请注意以下行为︰
              
                如果数组中的对象数少于命令字符串中标识的最大数目时，将引发异常。
              
                如果数组包含的命令字符串中未引用的对象，不引发异常。
              
                如果参数是 <see langword="null" />, ，它将转换为 <see langword="DBNull.Value" />。
              </param>
      <returns>
              <see cref="T:System.Collections.Generic.IEnumerable`1" /> 由查询返回的对象的集合。
            </returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])">
      <summary>
              在数据库上直接执行 SQL 查询并返回对象。
            </summary>
      <param name="query">
                要执行的 SQL 查询。
              </param>
      <param name="parameters">
                要传递给命令的参数数组。
                 请注意以下行为︰
              
                如果数组中的对象数少于命令字符串中标识的最大数目时，将引发异常。
              
                如果数组包含的命令字符串中未引用的对象，不引发异常。
              
                如果参数为 null，它将转换为 <see langword="DBNull.Value" />。
              </param>
      <typeparam name="TResult">
                返回集合中元素的类型。
              </typeparam>
      <returns>
              由查询返回的对象的集合。
            </returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.GetChangeSet">
      <summary>
              获取已修改的对象跟踪的 <see cref="T:System.Data.Linq.DataContext" />。
            </summary>
      <returns>
              作为三个只读集合返回的对象集。
            </returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.GetCommand(System.Linq.IQueryable)">
      <summary>
              获取有关生成的 SQL 命令的信息 LINQ to SQL。
            </summary>
      <param name="query">
                其 SQL 命令的信息的查询是要从中检索。
              </param>
      <returns>
              请求的命令信息对象。
            </returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.GetTable(System.Type)">
      <summary>
              返回的类型由某种特定类型的对象的集合 <paramref name="type" /> 参数。
            </summary>
      <param name="type">
                要返回的对象的类型。
              </param>
      <returns>
              定义的对象的集合 <paramref name="type" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.GetTable``1">
      <summary>
              返回的类型由某种特定类型的对象的集合 <paramref name="TEntity" /> 参数。
            </summary>
      <typeparam name="TEntity">
                要返回的对象的类型。
              </typeparam>
      <returns>
              定义的对象的集合 <paramref name="TEntity" /> 参数。
            </returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Collections.IEnumerable)">
      <summary>
              刷新按指定模式的实体对象的集合。
            </summary>
      <param name="mode">
                一个值，指定如何开放式并发冲突的处理。
              </param>
      <param name="entities">
                要刷新的实体的集合。
              </param>
    </member>
    <member name="M:System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object)">
      <summary>
              刷新实体对象根据指定的模式。
            </summary>
      <param name="mode">
                一个值，指定如何开放式并发冲突的处理。
              </param>
      <param name="entity">
                要刷新的对象。
              </param>
    </member>
    <member name="M:System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object[])">
      <summary>
              刷新按指定模式的实体对象的数组。
            </summary>
      <param name="mode">
                一个值，指定如何开放式并发冲突的处理。
              </param>
      <param name="entities">
                要刷新的实体对象的数组。
              </param>
    </member>
    <member name="M:System.Data.Linq.DataContext.SubmitChanges">
      <summary>
              计算组的已修改的对象来插入、 更新或删除，并执行相应的命令，以实现对数据库的更改。
            </summary>
    </member>
    <member name="M:System.Data.Linq.DataContext.SubmitChanges(System.Data.Linq.ConflictMode)">
      <summary>
              发送对所做的更改检索到基础数据库对象和指定要提交失败时要采取的操作。
            </summary>
      <param name="failureMode">
                要提交失败时要采取的操作。
                 有效的参数如下所示︰
              
                <see cref="F:System.Data.Linq.ConflictMode.FailOnFirstConflict" />
              
                <see cref="F:System.Data.Linq.ConflictMode.ContinueOnConflict" />
              </param>
    </member>
    <member name="M:System.Data.Linq.DataContext.Translate(System.Data.Common.DbDataReader)">
      <summary>
              将转换现有 <see cref="T:System.Data.Common.DbDataReader" /> 的对象。
            </summary>
      <param name="reader">
                要转换的 <see cref="T:System.Data.IDataReader" />。
              </param>
      <returns>
              该转换返回的对象的列表。
            </returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.Translate(System.Type,System.Data.Common.DbDataReader)">
      <summary>
              将转换现有 <see cref="T:System.Data.Common.DbDataReader" /> 的对象。
            </summary>
      <param name="elementType">
                一种 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 要返回。
              
                在结果中的字段匹配的列和对象中的属性的算法工作方式如下︰
              
                如果字段或属性映射到特定的列名称，该列名会出现在结果集中。
              
                如果未映射的字段或属性，在结果集中应具有与同名的字段或属性的列。
              
                通过首先查找区分大小写匹配来执行比较。
                 如果未找到匹配项，则会继续搜索不区分大小写的匹配项。
              
                该查询必须返回所有跟踪的字段和属性的对象 （不包括基于延迟加载的那些） 以下所有条件都都为真时︰
              
                <paramref name="T" /> 为显式跟踪的实体由 <see cref="T:System.Data.Linq.DataContext" />。
              
                <see cref="P:System.Data.Linq.DataContext.ObjectTrackingEnabled" /> 为 <see langword="true" />。
              
                实体具有一个主键。
              
                否则会引发异常。
              </param>
      <param name="reader">
                要转换的 <see cref="T:System.Data.IDataReader" />。
              </param>
      <returns>
              该转换返回的对象的列表。
            </returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.Translate``1(System.Data.Common.DbDataReader)">
      <summary>
              将转换现有 <see cref="T:System.Data.Common.DbDataReader" /> 的对象。
            </summary>
      <param name="reader">
                要转换的 <see cref="T:System.Data.IDataReader" />。
              </param>
      <typeparam name="TResult">
                一种 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 要返回。
              </typeparam>
      <returns>
              该转换返回的对象的集合。
            </returns>
    </member>
    <member name="M:System.Data.Linq.DataLoadOptions.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Linq.DataLoadOptions" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)">
      <summary>
              筛选为特定关系检索到的对象。
            </summary>
      <param name="expression">
                标识要用于特定的一到多字段或属性的查询。
                 注意以下事项：
              
                如果表达式不开头的字段或属性，表示的一种一对多关系，则将引发异常。
              
                如果有效的运算符以外的运算符出现在表达式中，将引发异常。
                 有效的运算符如下所示︰
              
                Where
              
                OrderBy
              
                ThenBy
              
                OrderByDescending
              
                ThenByDescending
              
                Take
              </param>
    </member>
    <member name="M:System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>
              筛选为特定关系检索的对象。
            </summary>
      <param name="expression">
                标识要用于特定的一到多字段或属性的查询。
                 注意以下事项：
              
                如果表达式不开头的字段或属性，表示的一种一对多关系，则将引发异常。
              
                如果有效的运算符以外的运算符出现在表达式中，将引发异常。
                 有效的运算符如下所示︰
              
                Where
              
                OrderBy
              
                ThenBy
              
                OrderByDescending
              
                ThenByDescending
              
                Take
              </param>
      <typeparam name="T">
                要查询的类型。
              
                如果未映射类型，则将引发异常。
              </typeparam>
    </member>
    <member name="M:System.Data.Linq.DataLoadOptions.LoadWith(System.Linq.Expressions.LambdaExpression)">
      <summary>
              检索指定使用 lambda 表达式与主目标相关的数据。
            </summary>
      <param name="expression">
                一个 lambda 表达式，标识相关的材料。
              </param>
    </member>
    <member name="M:System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>
              指定的子对象。 若要检索时的查询提交的对象类型为 t。
            </summary>
      <param name="expression">
                标识要检索属性的字段。
              
                如果表达式不标识字段或属性表示一对一或一对多的关系，则将引发异常。
              </param>
      <typeparam name="T">
                查询的对象的类型。
              
                如果此类型是未映射，则将引发异常。
              </typeparam>
    </member>
    <member name="M:System.Data.Linq.DBConvert.ChangeType(System.Object,System.Type)">
      <summary>
              指定的值更改为指定的类型。
            </summary>
      <param name="value">
                要转换的对象。
              </param>
      <param name="type">
                对象要转换为的类型。
              </param>
      <returns>
              一个包含指定类型的转换后的值的对象。
            </returns>
    </member>
    <member name="M:System.Data.Linq.DBConvert.ChangeType``1(System.Object)">
      <summary>
              指定的值更改为当前的类型。
            </summary>
      <param name="value">
                要转换的对象。
              </param>
      <typeparam name="T">
                要将更改为的类型。
              </typeparam>
      <returns>
              包含转换后的值指定类型的对象。
            </returns>
    </member>
    <member name="M:System.Data.Linq.DuplicateKeyException.#ctor(System.Object)">
      <summary>
              初始化 <see cref="T:System.Data.Linq.DuplicateKeyException" /> 类的新实例。
            </summary>
      <param name="duplicate">
                导致异常引发重复键。
              </param>
    </member>
    <member name="M:System.Data.Linq.DuplicateKeyException.#ctor(System.Object,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Data.Linq.DuplicateKeyException" /> 类通过引用重复键，并提供一条错误消息。
            </summary>
      <param name="duplicate">
                导致异常引发重复键。
              </param>
      <param name="message">
                显示当引发异常的消息。
              </param>
    </member>
    <member name="M:System.Data.Linq.DuplicateKeyException.#ctor(System.Object,System.String,System.Exception)">
      <summary>
              新实例初始化 <see cref="T:System.Data.Linq.DuplicateKeyException" /> 类通过引用重复键、 提供错误消息，并指定导致引发此异常的异常。
            </summary>
      <param name="duplicate">
                导致异常引发重复键。
              </param>
      <param name="message">
                显示当引发异常的消息。
              </param>
      <param name="innerException">
                前一个异常导致 <see cref="T:System.Data.Linq.DuplicateKeyException" /> 将引发异常。
              </param>
    </member>
    <member name="M:System.Data.Linq.EntityRef`1.#ctor(`0)">
      <summary>
              新实例初始化 <see cref="T:System.Data.Linq.EntityRef`1" /> 通过指定目标实体类。
            </summary>
      <param name="entity">
                目标实体。
              </param>
    </member>
    <member name="M:System.Data.Linq.EntityRef`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              新实例初始化 <see cref="T:System.Data.Linq.EntityRef`1" /> 类通过指定源。
            </summary>
      <param name="source">
                引用源。
              </param>
    </member>
    <member name="M:System.Data.Linq.EntityRef`1.#ctor(System.Data.Linq.EntityRef{`0})">
      <summary>
              新实例初始化 <see cref="T:System.Data.Linq.EntityRef`1" /> 通过引用目标实体类。
            </summary>
      <param name="entityRef">
                目标实体。
              </param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Linq.EntitySet`1" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.#ctor(System.Action{`0},System.Action{`0})">
      <summary>
              新实例初始化 <see cref="T:System.Data.Linq.EntitySet`1" /> 类时提供的处理程序添加和移除操作。
            </summary>
      <param name="onAdd">
                委托的 <see cref="M:System.Data.Linq.EntitySet`1.Add(`0)" />。
              </param>
      <param name="onRemove">
                委托的 <see cref="M:System.Data.Linq.EntitySet`1.Remove(`0)" />。
              </param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Add(`0)">
      <summary>
              添加实体。
            </summary>
      <param name="entity">
                要添加的实体。
              </param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              添加实体的集合。
            </summary>
      <param name="collection">
                要添加的集合。
              </param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Assign(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              将分配 <see cref="T:System.Data.Linq.EntitySet`1" /> 集合与另一个 <see cref="T:System.Data.Linq.EntitySet`1" /> 集合。
            </summary>
      <param name="entitySource">
                要分配的集合。
              </param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Clear">
      <summary>
              移除所有项。
            </summary>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Contains(`0)">
      <summary>
              指定是否 <see cref="T:System.Data.Linq.EntitySet`1" /> 包含特定实体。
            </summary>
      <param name="entity">
                实体。
              </param>
      <returns>
              <see langword="true" /> 如果 <see cref="T:System.Data.Linq.EntitySet`1" /> 包含该实体; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.CopyTo(`0[],System.Int32)">
      <summary>
              副本 <see cref="T:System.Data.Linq.EntitySet`1" /> 到一个数组。
            </summary>
      <param name="array">
                要复制到的数组。
              </param>
      <param name="arrayIndex">
                数组中的起始索引。
              </param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.GetEnumerator">
      <summary>
              返回循环访问集合的枚举数。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.Generic.IEnumerator`1" />。
            </returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.GetNewBindingList">
      <summary>
              创建用于绑定到数据源的新列表。
            </summary>
      <returns>
              一个新 <see cref="T:System.ComponentModel.IBindingList" /> 用于绑定到数据源。
            </returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.IndexOf(`0)">
      <summary>
              返回的实体的索引。
            </summary>
      <param name="entity">
                要返回其索引实体。
              </param>
      <returns>
              表示索引的整数。
            </returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Insert(System.Int32,`0)">
      <summary>
              在索引位置处插入一个实体。
            </summary>
      <param name="index">
                表示要插入实体的位置的索引。
              </param>
      <param name="entity">
                要插入的实体。
              </param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Load">
      <summary>
              加载 <see cref="T:System.Data.Linq.EntitySet`1" />。
            </summary>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Remove(`0)">
      <summary>
              删除实体。
            </summary>
      <param name="entity">
                要删除的实体。
              </param>
      <returns>
              <see langword="true" /> 如果成功删除该实体;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.RemoveAt(System.Int32)">
      <summary>
              移除指定索引处的实体。
            </summary>
      <param name="index">
                要删除的实体的索引。
              </param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.SetSource(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              设置的源 <see cref="T:System.Data.Linq.EntitySet`1" />。
            </summary>
      <param name="entitySource">
                根源 <see cref="T:System.Data.Linq.EntitySet`1" />。
              </param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />。
            </summary>
      <param name="array">
                集合中的元素复制到数组。
              </param>
      <param name="index">
                开始复制的数组索引开始。
              </param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Collections.IEnumerable.GetEnumerator" />。
            </summary>
      <returns>
              <see cref="T:System.Collections.IEnumerator" /> 可用于循环访问集合的对象。
            </returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IList#Add(System.Object)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Collections.IList.Add(System.Object)" />。
            </summary>
      <param name="value">
                要添加到列表中的对象。
              </param>
      <returns>
              新元素的插入位置。
            </returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IList#Contains(System.Object)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Collections.IList.Contains(System.Object)" />。
            </summary>
      <param name="value">
                要在列表中查找的对象。
              </param>
      <returns>
              <see langword="true" /> 如果 <see cref="T:System.Object" /> 中找到 <see cref="T:System.Collections.IList" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Collections.IList.IndexOf(System.Object)" />。
            </summary>
      <param name="value">
                要在列表中查找的对象。
              </param>
      <returns>
              如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。
            </returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />。
            </summary>
      <param name="index">
                在列表中对象的索引。
              </param>
      <param name="value">
                要插入到列表中的对象。
              </param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IList#Remove(System.Object)">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Collections.IList.Remove(System.Object)" />。
            </summary>
      <param name="value">
                要从列表中移除的对象。
              </param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#ComponentModel#IListSource#GetList">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.IListSource.GetList" />。
            </summary>
      <returns>
              <see cref="T:System.Collections.IList" /> 可绑定到数据源从对象。
            </returns>
    </member>
    <member name="M:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException.#ctor">
      <summary>
              使用由系统提供的用来描述错误的消息初始化 <see cref="T:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException.#ctor(System.String)">
      <summary>
              使用指定的描述错误的消息初始化 <see cref="T:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException" /> 类的新实例。
            </summary>
      <param name="message">
                描述该异常的消息。
                 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。
              </param>
    </member>
    <member name="M:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException" /> 类的新实例。
            </summary>
      <param name="message">
                描述该异常的消息。
                 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。
              </param>
      <param name="innerException">
                导致当前异常的异常。
                 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。
              </param>
    </member>
    <member name="M:System.Data.Linq.IExecuteResult.GetParameterValue(System.Int32)">
      <summary>
              提供对访问 nth 输出参数。
            </summary>
      <param name="parameterIndex">
                要检索的参数的索引。
              </param>
      <returns>
              一个包含指定的参数的值的对象。
            </returns>
    </member>
    <member name="M:System.Data.Linq.IMultipleResults.GetResult``1">
      <summary>
              为指定类型的序列中检索下一个结果。
            </summary>
      <typeparam name="TElement">
                要返回的序列的类型。
              </typeparam>
      <returns>
              一个枚举，用于循环访问结果。
            </returns>
    </member>
    <member name="M:System.Data.Linq.ITable.Attach(System.Object)">
      <summary>
              将附加到实体 <see cref="T:System.Data.Linq.DataContext" /> 中未修改的状态。
            </summary>
      <param name="entity">
                要附加的实体。
              </param>
    </member>
    <member name="M:System.Data.Linq.ITable.Attach(System.Object,System.Boolean)">
      <summary>
              附加到集合中的所有实体 <see cref="T:System.Data.Linq.DataContext" /> 中修改或未修改的状态。
            </summary>
      <param name="entity">
                实体的集合。
              </param>
      <param name="asModified">
                <see langword="true" /> 若要为已修改状态附加这些实体。
              </param>
    </member>
    <member name="M:System.Data.Linq.ITable.Attach(System.Object,System.Object)">
      <summary>
              将附加到实体 <see cref="T:System.Data.Linq.DataContext" /> 以通过指定的实体和其原始状态修改或未修改状态。
            </summary>
      <param name="entity">
                要附加的实体。
              </param>
      <param name="original">
                与包含原始值的数据成员相同的实体类型的实例。
              </param>
    </member>
    <member name="M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable)">
      <summary>
              附加到集合中的所有实体 <see cref="T:System.Data.Linq.DataContext" /> 中修改或未修改的状态。
            </summary>
      <param name="entities">
                实体的集合。
              </param>
    </member>
    <member name="M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable,System.Boolean)">
      <summary>
              附加到集合中的所有实体 <see cref="T:System.Data.Linq.DataContext" /> 中修改或未修改的状态。
            </summary>
      <param name="entities">
                实体的集合。
              </param>
      <param name="asModified">
                <see langword="true" /> 若要为已修改状态附加这些实体。
              </param>
    </member>
    <member name="M:System.Data.Linq.ITable.DeleteAllOnSubmit(System.Collections.IEnumerable)">
      <summary>
              将集合中的所有实体 <see langword="pending delete" /> 状态。
            </summary>
      <param name="entities">
                从中移除所有项的集合。
              </param>
    </member>
    <member name="M:System.Data.Linq.ITable.DeleteOnSubmit(System.Object)">
      <summary>
              将实体放到此表中 <see langword="pending delete" /> 状态。
            </summary>
      <param name="entity">
                要删除的实体。
              </param>
    </member>
    <member name="M:System.Data.Linq.ITable.GetModifiedMembers(System.Object)">
      <summary>
              返回一个包含其当前值和原始值的已修改成员的数组。
            </summary>
      <param name="entity">
                从其获取数组的实体。
              </param>
    </member>
    <member name="M:System.Data.Linq.ITable.GetOriginalEntityState(System.Object)">
      <summary>
              检索原始值。
            </summary>
      <param name="entity">
                其原始值要检索的实体。
              </param>
      <returns>
              一份原始实体。
               值为 null，如果未跟踪传入的实体。
               断开连接的实体发送回的客户端必须以前附加 <see cref="T:System.Data.Linq.DataContext" /> 可以开始跟踪其状态。
               新附加的实体的"原始状态"将建立基于客户端提供的值。
               数据上下文不会跟踪断开连接的实体的状态。
            </returns>
    </member>
    <member name="M:System.Data.Linq.ITable.InsertAllOnSubmit(System.Collections.IEnumerable)">
      <summary>
              添加到集合中的所有实体 <see cref="T:System.Data.Linq.DataContext" /> 中 <see langword="pending insert" /> 状态。
            </summary>
      <param name="entities">
                要添加的实体。
              </param>
    </member>
    <member name="M:System.Data.Linq.ITable.InsertOnSubmit(System.Object)">
      <summary>
              将在实体添加 <see langword="pending insert" /> 状态对此表。
            </summary>
      <param name="entity">
                要添加的实体。
              </param>
    </member>
    <member name="M:System.Data.Linq.ITable`1.Attach(`0)">
      <summary>
              重写时，将断开连接或"分离"的实体附加到新 <see cref="T:System.Data.Linq.DataContext" /> 进行开放式并发检查需要原始值时。
            </summary>
      <param name="entity">
                要添加的对象。
              </param>
    </member>
    <member name="M:System.Data.Linq.ITable`1.DeleteOnSubmit(`0)">
      <summary>
              重写时，将实体放到此表中 <see langword="pending delete" /> 状态。
            </summary>
      <param name="entity">
                要删除的对象。
              </param>
    </member>
    <member name="M:System.Data.Linq.ITable`1.InsertOnSubmit(`0)">
      <summary>
              重写时，将在实体添加 <see langword="pending insert" /> 到此状态 <see cref="T:System.Data.Linq.ITable`1" />。
            </summary>
      <param name="entity">
                要插入的对象。
              </param>
    </member>
    <member name="M:System.Data.Linq.Link`1.#ctor(`0)">
      <summary>
              新实例初始化 <see cref="T:System.Data.Linq.Link`1" /> 通过引用属性的值的结构。
            </summary>
      <param name="value">
                属性的值。
              </param>
    </member>
    <member name="M:System.Data.Linq.Link`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              新实例初始化 <see cref="T:System.Data.Linq.Link`1" /> 通过引用源的结构。
            </summary>
      <param name="source">
                源集合中。
              </param>
    </member>
    <member name="M:System.Data.Linq.Link`1.#ctor(System.Data.Linq.Link{`0})">
      <summary>
              新实例初始化 <see cref="T:System.Data.Linq.Link`1" /> 通过从另一个复制的内部状态结构 <see cref="T:System.Data.Linq.Link`1" /> 实例。
            </summary>
      <param name="link">
                <see cref="T:System.Data.Linq.Link`1" /> 从中进行复制的实例。
              </param>
    </member>
    <member name="M:System.Data.Linq.Mapping.AssociationAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Linq.Mapping.AssociationAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.AttributeMappingSource.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Linq.Mapping.AttributeMappingSource" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.ColumnAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Linq.Mapping.ColumnAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.DataAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Linq.Mapping.DataAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.DatabaseAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Linq.Mapping.DatabaseAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.FunctionAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Linq.Mapping.FunctionAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.InheritanceMappingAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Linq.Mapping.InheritanceMappingAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MappingSource.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Linq.Mapping.MappingSource" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MappingSource.CreateModel(System.Type)">
      <summary>
              创建新的映射模型。
            </summary>
      <param name="dataContextType">
                一种 <see cref="T:System.Data.Linq.DataContext" /> 基于映射。
              </param>
      <returns>
              元模型创建以匹配当前映射方案。
            </returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MappingSource.GetModel(System.Type)">
      <summary>
              返回的映射模型。
            </summary>
      <param name="dataContextType">
                一种 <see cref="T:System.Data.Linq.DataContext" /> 要返回的模型。
              </param>
      <returns>
              与此映射源关联的映射模型。
            </returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Linq.Mapping.MetaAccessor" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor.GetBoxedValue(System.Object)">
      <summary>
              在其上设置一个值或从其获取一个值，指定的对象。
            </summary>
      <param name="instance">
                从中获取的值或对其设置值的实例。
              </param>
      <returns>
              此实例的已装箱的值。
            </returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor.HasAssignedValue(System.Object)">
      <summary>
              指定此实例是否具有分配的值。
            </summary>
      <param name="instance">
                在要查看的实例。
              </param>
      <returns>
              <see langword="true" /> 如果实例当前没有为它赋值;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor.HasLoadedValue(System.Object)">
      <summary>
              指定此实例是否具有从延迟源加载的值。
            </summary>
      <param name="instance">
                在要查看的实例。
              </param>
      <returns>
              <see langword="true" /> 如果该实例当前具有从延迟的源; 加载的值否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor.HasValue(System.Object)">
      <summary>
              指定此实例是否具有加载或已分配的值。
            </summary>
      <param name="instance">
                在要查看的实例。
              </param>
      <returns>
              <see langword="true" /> 如果实例当前没有加载或已分配的值;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor.SetBoxedValue(System.Object@,System.Object)">
      <summary>
              为对象设置的值。
            </summary>
      <param name="instance">
                要将值设置到其中实例。
              </param>
      <param name="value">
                要设置的值。
              </param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor`2.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Linq.Mapping.MetaAccessor`2" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor`2.GetBoxedValue(System.Object)">
      <summary>
              在其上设置一个值或从其获取一个值，指定的对象。
            </summary>
      <param name="instance">
                从中获取的值或对其设置值的实例。
              </param>
      <returns>
              此实例的已装箱的值。
            </returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor`2.GetValue(`0)">
      <summary>
              指定的强类型化的值。
            </summary>
      <param name="instance">
                从中获取值的实例。
              </param>
      <returns>
              此实例的值。
            </returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor`2.SetBoxedValue(System.Object@,System.Object)">
      <summary>
              指定要对其设置装箱的值的实例。
            </summary>
      <param name="instance">
                到要设置的已装箱的值的实例。
              </param>
      <param name="value">
                要设置的值。
              </param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor`2.SetValue(`0@,`1)">
      <summary>
              指定要对其设置的强类型化的值的实例。
            </summary>
      <param name="instance">
                要将值设置到其中实例。
              </param>
      <param name="value">
                要设置的强类型化的值。
              </param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAssociation.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Linq.Mapping.MetaAssociation" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaDataMember.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Linq.Mapping.MetaDataMember" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaDataMember.IsDeclaredBy(System.Data.Linq.Mapping.MetaType)">
      <summary>
              指定是否由指定的类型声明此成员。
            </summary>
      <param name="type">
                要检查的类型。
              </param>
      <returns>
              <see langword="true" /> 如果该成员声明由指定的类型;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaFunction.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Linq.Mapping.MetaFunction" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaModel.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Linq.Mapping.MetaModel" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaModel.GetFunction(System.Reflection.MethodInfo)">
      <summary>
              获取 <see cref="T:System.Data.Linq.Mapping.MetaFunction" /> 对应于对数据库函数。
            </summary>
      <param name="method">
                在定义的方法 <see cref="T:System.Data.Linq.DataContext" /> 或从属表示数据库函数的类。
              </param>
      <returns>
              元功能，它对应于一个数据库函数。
            </returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaModel.GetFunctions">
      <summary>
              获取所有函数的枚举。
            </summary>
      <returns>
              一个枚举，可用于循环访问所有函数。
            </returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaModel.GetMetaType(System.Type)">
      <summary>
              发现 <see cref="T:System.Data.Linq.Mapping.MetaType" /> 指定 <see cref="T:System.Type" />。
            </summary>
      <param name="type">
                要为其类型 <see cref="T:System.Data.Linq.Mapping.MetaType" /> 查找。
              </param>
      <returns>
              是元类型对应于指定的类型。
            </returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaModel.GetTable(System.Type)">
      <summary>
              获取 <see cref="T:System.Data.Linq.Mapping.MetaTable" /> 关联与指定 <see cref="T:System.Type" />。
            </summary>
      <param name="rowType">
                公共语言运行时 (CLR) 的行类型。
              </param>
      <returns>
              与指定的行类型相关联元表。
            </returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaModel.GetTables">
      <summary>
              获取所有表的枚举。
            </summary>
      <returns>
              一个枚举器可用于循环访问表。
            </returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaParameter.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Linq.Mapping.MetaParameter" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaTable.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Linq.Mapping.MetaTable" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaType.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Linq.Mapping.MetaType" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaType.GetDataMember(System.Reflection.MemberInfo)">
      <summary>
              获取 <see cref="T:System.Data.Linq.Mapping.MetaDataMember" /> 指定成员相关联。
            </summary>
      <param name="member">
                为其成员关联 <see cref="T:System.Data.Linq.Mapping.MetaDataMember" /> 查找。
              </param>
      <returns>
              <see cref="T:System.Data.Linq.Mapping.MetaDataMember" /> 是否与指定成员相关联; 否则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaType.GetInheritanceType(System.Type)">
      <summary>
              获取 <see cref="T:System.Data.Linq.Mapping.MetaType" /> 继承子类型。
            </summary>
      <param name="type">
                子类型。
              </param>
      <returns>
              <see cref="T:System.Data.Linq.Mapping.MetaType" /> 继承子类型。
            </returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaType.GetTypeForInheritanceCode(System.Object)">
      <summary>
              获取与指定的继承代码相关联的元类型。
            </summary>
      <param name="code">
                继承代码。
              </param>
      <returns>
              使用指定的继承代码关联的元类型。
            </returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.ParameterAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Linq.Mapping.ParameterAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.ProviderAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Linq.Mapping.ProviderAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.ProviderAttribute.#ctor(System.Type)">
      <summary>
              初始化 <see cref="T:System.Data.Linq.Mapping.ProviderAttribute" /> 类的新实例。
            </summary>
      <param name="type">
                提供程序类型来创建 <see cref="T:System.Data.Linq.Mapping.ProviderAttribute" />。
              </param>
    </member>
    <member name="M:System.Data.Linq.Mapping.ResultTypeAttribute.#ctor(System.Type)">
      <summary>
              初始化 <see cref="T:System.Data.Linq.Mapping.ResultTypeAttribute" /> 类的新实例。
            </summary>
      <param name="type">
                由具有不同结果类型的函数返回的结果的类型。
              </param>
    </member>
    <member name="M:System.Data.Linq.Mapping.TableAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Linq.Mapping.TableAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.XmlMappingSource.FromReader(System.Xml.XmlReader)">
      <summary>
              从 XML 读取器创建映射源。
            </summary>
      <param name="reader">
                XML 读取器。
              </param>
      <returns>
              新的 XML 映射源、 作为类型 <see cref="T:System.Data.Linq.Mapping.XmlMappingSource" />。
            </returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.XmlMappingSource.FromStream(System.IO.Stream)">
      <summary>
              从流中的 XML 创建映射源。
            </summary>
      <param name="stream">
                XML 流。
              </param>
      <returns>
              新的 XML 映射源、 作为类型 <see cref="T:System.Data.Linq.Mapping.XmlMappingSource" />。
            </returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.XmlMappingSource.FromUrl(System.String)">
      <summary>
              创建一个映射源从从 URL 加载 XML。
            </summary>
      <param name="url">
                指向 XML 的 URL。
              </param>
      <returns>
              新的 XML 映射源、 作为类型 <see cref="T:System.Data.Linq.Mapping.XmlMappingSource" />。
            </returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.XmlMappingSource.FromXml(System.String)">
      <summary>
              创建一个映射源从 XML 字符串。
            </summary>
      <param name="xml">
                包含 XML 的字符串。
              </param>
      <returns>
              新的 XML 映射源、 作为类型 <see cref="T:System.Data.Linq.Mapping.XmlMappingSource" />。
            </returns>
    </member>
    <member name="M:System.Data.Linq.MemberChangeConflict.Resolve(System.Data.Linq.RefreshMode)">
      <summary>
              使用 <see cref="T:System.Data.Linq.RefreshMode" /> 参数，以自动为指定要将当前值设置为发生冲突的成员的值。
            </summary>
      <param name="refreshMode">
                请参阅 <see cref="T:System.Data.Linq.RefreshMode" />。
              </param>
    </member>
    <member name="M:System.Data.Linq.MemberChangeConflict.Resolve(System.Object)">
      <summary>
              指定要将当前值设置为发生冲突的成员的值。
            </summary>
      <param name="value">
                要设置为当前值的值。
              </param>
    </member>
    <member name="M:System.Data.Linq.ObjectChangeConflict.Resolve">
      <summary>
              通过保留当前值并重置基线原始值，以匹配的较新的数据库值解决成员冲突。
            </summary>
    </member>
    <member name="M:System.Data.Linq.ObjectChangeConflict.Resolve(System.Data.Linq.RefreshMode)">
      <summary>
              使用指定的解决成员冲突 <see cref="T:System.Data.Linq.RefreshMode" />。
            </summary>
      <param name="refreshMode">
                从相应的选项 <see cref="T:System.Data.Linq.RefreshMode" />。
              </param>
    </member>
    <member name="M:System.Data.Linq.ObjectChangeConflict.Resolve(System.Data.Linq.RefreshMode,System.Boolean)">
      <summary>
              解决成员冲突保留当前值和重置基线的原始值。
            </summary>
      <param name="refreshMode">
                从相应的选项 <see cref="T:System.Data.Linq.RefreshMode" />。
              </param>
      <param name="autoResolveDeletes">
                当 <see langword="true" />, 、 自动解决冲突的修改后的对象已不再在数据库中产生的。
              </param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.Convert``1(System.Collections.IEnumerable)">
      <summary>
              更改指定序列中每个元素的类型。
            </summary>
      <param name="source">
                一个包含要转换的元素的序列。
              </param>
      <typeparam name="TOutput">
                要转换的元素的类型。
              </typeparam>
      <returns>
              一个包含的类型转换的元素的序列。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.CreateGroup``2(``0,System.Collections.Generic.IEnumerable{``1})">
      <summary>
              从指定的键和值的集合创建一个组。
            </summary>
      <param name="key">
                组的密钥。
              </param>
      <param name="items">
                组的值。
              </param>
      <typeparam name="TKey">
                组的键的类型。
              </typeparam>
      <typeparam name="TElement">
                组中的值的类型。
              </typeparam>
      <returns>
              具有指定的键和值的指定的集合的组。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.CreateOrderedEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              从指定的值集合中创建一个有序的序列。
            </summary>
      <param name="items">
                要放入的有序序列的值。
              </param>
      <typeparam name="TElement">
                有序序列中的值的类型。
              </typeparam>
      <returns>
              有序的序列，其中包含指定的值。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.ErrorAssignmentToNull(System.Type)">
      <summary>
              返回一个异常，指示 <see langword="null" /> 值已尝试分配给不可为 null 值的类型。
            </summary>
      <param name="type">
                为类型 <see langword="null" /> 值已尝试过要分配。
              </param>
      <returns>
              异常类型的值，该值指示 <see langword="null" /> 值尝试分配给不可为 null 值的类型。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.ExecuteSubQuery(System.Int32,System.Object[])">
      <summary>
              当在派生类中重写，将执行查询。
            </summary>
      <param name="iSubQuery">
                查询的索引。
              </param>
      <param name="args">
                向查询参数。
              </param>
      <returns>
              来自执行查询的结果。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.GetLinkSource``1(System.Int32,System.Int32,System.Object[])">
      <summary>
              当在派生类中重写时创建新的延迟的源。
            </summary>
      <param name="globalLink">
                链接的索引。
              </param>
      <param name="localFactory">
                工厂的索引。
              </param>
      <param name="keyValues">
                延迟源键值。
              </param>
      <typeparam name="T">
                结果元素的类型。
              </typeparam>
      <returns>
              可枚举的延迟的源。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.GetNestedLinkSource``1(System.Int32,System.Int32,System.Object)">
      <summary>
              当在派生类中重写时创建新的延迟的源。
            </summary>
      <param name="globalLink">
                链接的索引。
              </param>
      <param name="localFactory">
                工厂的索引。
              </param>
      <param name="instance">
                延迟源实例。
              </param>
      <typeparam name="T">
                结果元素的类型。
              </typeparam>
      <returns>
              可枚举的延迟的源。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.InsertLookup(System.Int32,System.Object)">
      <summary>
              当在派生类中重写，则将值插入到一种数据结构。
            </summary>
      <param name="globalMetaType">
                索引 <see cref="T:System.Data.Linq.Mapping.MetaType" />。
              </param>
      <param name="instance">
                要插入的数据结构的对象。
              </param>
      <returns>
              已插入到数据结构的值。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.Read">
      <summary>
              当在派生类中重写，将读取器推进到下一个记录。
            </summary>
      <returns>
              <see langword="true" /> 如果有多个行;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.SendEntityMaterialized(System.Int32,System.Object)">
      <summary>
              当在派生类中重写时，将调用所表示的方法 <see cref="P:System.Data.Linq.Mapping.MetaType.OnLoadedMethod" />。
            </summary>
      <param name="globalMetaType">
                索引 <see cref="T:System.Data.Linq.Mapping.MetaType" />。
              </param>
      <param name="instance">
                要传递给调用的方法的参数。
              </param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Sql2000Provider.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Linq.SqlClient.Sql2000Provider" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Sql2005Provider.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Linq.SqlClient.Sql2005Provider" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Sql2008Provider.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Linq.SqlClient.Sql2008Provider" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlHelpers.GetStringContainsPattern(System.String,System.Char)">
      <summary>
              创建一个搜索模式字符串，其中指定的文本可以具有其他文本之前和其后面。
            </summary>
      <param name="text">
                要搜索的模式字符串中插入的字符串。
              </param>
      <param name="escape">
                要使用通配符字符进行转义的字符。
              </param>
      <returns>
              一个包含指定的字符串和 %字符之前和之后的搜索模式字符串。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlHelpers.GetStringEndsWithPattern(System.String,System.Char)">
      <summary>
              创建一个搜索模式字符串，指定的文本可以在它之前，但不是遵循它其他文本。
            </summary>
      <param name="text">
                要搜索的模式字符串中插入的字符串。
              </param>
      <param name="escape">
                要使用通配符字符进行转义的字符。
              </param>
      <returns>
              一个包含 %字符及其后面的指定字符串的搜索模式字符串。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlHelpers.GetStringStartsWithPattern(System.String,System.Char)">
      <summary>
              创建一个搜索模式字符串，其中指定的文本可以具有其他文本之后但不是在此之前它。
            </summary>
      <param name="text">
                要搜索的模式字符串中插入的字符串。
              </param>
      <param name="escape">
                要使用通配符字符进行转义的字符。
              </param>
      <returns>
              包含指定的字符串 %字符后跟一个搜索模式字符串。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlHelpers.TranslateVBLikePattern(System.String,System.Char)">
      <summary>
              将转换的搜索模式 Visual Basic <see langword="Like" /> 运算符的搜索模式 SQL Server <see langword="LIKE" /> 运算符。  
            </summary>
      <param name="pattern">
                
                  Visual Basic <see langword="Like" /> 搜索模式，用于将翻译为 SQL Server <see langword="LIKE" /> 搜索模式。  
              </param>
      <param name="escape">
                要使用 SQL 的特殊字符或转义符本身进行转义的字符。
              </param>
      <returns>
              搜索模式 SQL Server <see langword="LIKE" /> 对应于指定的运算符 Visual Basic <see langword="Like" /> 搜索模式。  
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffDay(System.DateTime,System.DateTime)">
      <summary>
              计算两个不可为 null 的日期之间的日期边界的数目。
            </summary>
      <param name="startDate">
                时间段的开始日期。
              </param>
      <param name="endDate">
                时间段的结束日期。
              </param>
      <returns>
              两个指定日期之间的日期边界数。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffDay(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>
              计算两个不可为 null 的日期之间的日期边界的数目。
            </summary>
      <param name="startDate">
                时间段的开始日期。
              </param>
      <param name="endDate">
                时间段的结束日期。
              </param>
      <returns>
              两个指定日期之间的日期边界数。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffDay(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
              计算两个可以为 null 的日期之间的日期边界的数目。
            </summary>
      <param name="startDate">
                时间段的开始日期。
              </param>
      <param name="endDate">
                时间段的结束日期。
              </param>
      <returns>
              当这两个参数都不 <see langword="null" />, ，返回两个指定日期之间的日期边界的数目。
               当一个或两个参数都 <see langword="null" />, ，返回 <see langword="null" /> 值。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffDay(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>
              计算两个可以为 null 的日期之间的日期边界的数目。
            </summary>
      <param name="startDate">
                时间段的开始日期。
              </param>
      <param name="endDate">
                时间段的结束日期。
              </param>
      <returns>
              当这两个参数都不 <see langword="null" />, ，返回两个指定日期之间的日期边界的数目。
               当一个或两个参数都 <see langword="null" />, ，返回 <see langword="null" /> 值。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffHour(System.DateTime,System.DateTime)">
      <summary>
              计算两个不可为 null 的日期之间的小时边界的数目。
            </summary>
      <param name="startDate">
                时间段的开始日期。
              </param>
      <param name="endDate">
                时间段的结束日期。
              </param>
      <returns>
              两个指定日期之间的小时边界数。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffHour(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>
              计算两个不可为 null 的日期之间的小时边界的数目。
            </summary>
      <param name="startDate">
                时间段的开始日期。
              </param>
      <param name="endDate">
                时间段的结束日期。
              </param>
      <returns>
              两个指定日期之间的小时边界数。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffHour(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
              计算两个可以为 null 的日期之间的小时边界的数目。
            </summary>
      <param name="startDate">
                时间段的开始日期。
              </param>
      <param name="endDate">
                时间段的结束日期。
              </param>
      <returns>
              当这两个参数都不 <see langword="null" />, ，返回两个指定日期之间的小时边界的数目。
               当一个或两个参数都 <see langword="null" />, ，返回 <see langword="null" /> 值。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffHour(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>
              计算两个可以为 null 的日期之间的小时边界的数目。
            </summary>
      <param name="startDate">
                时间段的开始日期。
              </param>
      <param name="endDate">
                时间段的结束日期。
              </param>
      <returns>
              当这两个参数都不 <see langword="null" />, ，返回两个指定日期之间的小时边界的数目。
               当一个或两个参数都 <see langword="null" />, ，返回 <see langword="null" /> 返回值。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMicrosecond(System.DateTime,System.DateTime)">
      <summary>
              计算两个不可为 null 的日期之间的微秒边界的数目。
            </summary>
      <param name="startDate">
                时间段的开始日期。
              </param>
      <param name="endDate">
                时间段的结束日期。
              </param>
      <returns>
              两个指定日期之间的微秒边界数。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMicrosecond(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>
              计算两个不可为 null 的日期之间的微秒边界的数目。
            </summary>
      <param name="startDate">
                时间段的开始日期。
              </param>
      <param name="endDate">
                时间段的结束日期。
              </param>
      <returns>
              两个指定日期之间的微秒边界数。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMicrosecond(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
              计算两个可以为 null 的日期之间的微秒边界的数目。
            </summary>
      <param name="startDate">
                时间段的开始日期。
              </param>
      <param name="endDate">
                时间段的结束日期。
              </param>
      <returns>
              当这两个参数都不 <see langword="null" />, ，返回两个指定日期之间的微秒边界的数目。
               当一个或两个参数都 <see langword="null" />, ，返回 <see langword="null" /> 值。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMicrosecond(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>
              计算两个可以为 null 的日期之间的微秒边界的数目。
            </summary>
      <param name="startDate">
                时间段的开始日期。
              </param>
      <param name="endDate">
                时间段的结束日期。
              </param>
      <returns>
              当这两个参数都不 <see langword="null" />, ，返回两个指定日期之间的微秒边界的数目。
               当一个或两个参数都 <see langword="null" />, ，返回 <see langword="null" /> 值。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMillisecond(System.DateTime,System.DateTime)">
      <summary>
              计算两个不可为 null 的日期之间的毫秒边界的数目。
            </summary>
      <param name="startDate">
                时间段的开始日期。
              </param>
      <param name="endDate">
                时间段的结束日期。
              </param>
      <returns>
              两个指定日期之间的毫秒边界数。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMillisecond(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>
              计算两个不可为 null 的日期之间的毫秒边界的数目。
            </summary>
      <param name="startDate">
                时间段的开始日期。
              </param>
      <param name="endDate">
                时间段的结束日期。
              </param>
      <returns>
              两个指定日期之间的毫秒边界数。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMillisecond(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
              计算两个可以为 null 的日期之间的毫秒边界的数目。
            </summary>
      <param name="startDate">
                时间段的开始日期。
              </param>
      <param name="endDate">
                时间段的结束日期。
              </param>
      <returns>
              当这两个参数都不 <see langword="null" />, ，返回两个指定日期之间的毫秒边界的数目。
               当一个或两个参数都 <see langword="null" />, ，返回 <see langword="null" /> 值。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMillisecond(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>
              计算两个可以为 null 的日期之间的毫秒边界的数目。
            </summary>
      <param name="startDate">
                时间段的开始日期。
              </param>
      <param name="endDate">
                时间段的结束日期。
              </param>
      <returns>
              当这两个参数都不 <see langword="null" />, ，返回两个指定日期之间的毫秒边界的数目。
               当一个或两个参数都 <see langword="null" />, ，返回 <see langword="null" /> 值。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMinute(System.DateTime,System.DateTime)">
      <summary>
              计算两个不可为 null 的日期之间的分钟边界的数目。
            </summary>
      <param name="startDate">
                时间段的开始日期。
              </param>
      <param name="endDate">
                时间段的结束日期。
              </param>
      <returns>
              两个指定日期之间的分钟边界数。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMinute(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>
              计算两个不可为 null 的日期之间的分钟边界的数目。
            </summary>
      <param name="startDate">
                时间段的开始日期。
              </param>
      <param name="endDate">
                时间段的结束日期。
              </param>
      <returns>
              两个指定日期之间的分钟边界数。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMinute(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
              计算两个可以为 null 的日期之间的分钟边界的数目。
            </summary>
      <param name="startDate">
                时间段的开始日期。
              </param>
      <param name="endDate">
                时间段的结束日期。
              </param>
      <returns>
              当这两个参数都不 <see langword="null" />, ，返回两个指定日期之间的分钟边界的数目。
               当一个或两个参数都 <see langword="null" />, ，返回 <see langword="null" /> 值。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMinute(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>
              计算两个可以为 null 的日期之间的分钟边界的数目。
            </summary>
      <param name="startDate">
                时间段的开始日期。
              </param>
      <param name="endDate">
                时间段的结束日期。
              </param>
      <returns>
              当这两个参数都不 <see langword="null" />, ，返回两个指定日期之间的分钟边界的数目。
               当一个或两个参数都 <see langword="null" />, ，返回 <see langword="null" /> 值。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMonth(System.DateTime,System.DateTime)">
      <summary>
              计算两个不可为 null 的日期之间的月份边界的数目。
            </summary>
      <param name="startDate">
                时间段的开始日期。
              </param>
      <param name="endDate">
                时间段的结束日期。
              </param>
      <returns>
              两个指定日期之间的月份边界数。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMonth(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>
              计算两个不可为 null 的日期之间的月份边界的数目。
            </summary>
      <param name="startDate">
                时间段的开始日期。
              </param>
      <param name="endDate">
                时间段的结束日期。
              </param>
      <returns>
              两个指定日期之间的月份边界数。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMonth(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
              计算两个可以为 null 的日期之间的月份边界的数目。
            </summary>
      <param name="startDate">
                时间段的开始日期。
              </param>
      <param name="endDate">
                时间段的结束日期。
              </param>
      <returns>
              当这两个参数都不 <see langword="null" />, ，返回两个指定日期之间的月份边界的数目。
               当一个或两个参数都 <see langword="null" />, ，返回 <see langword="null" /> 值。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMonth(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>
              计算两个可以为 null 的日期之间的月份边界的数目。
            </summary>
      <param name="startDate">
                时间段的开始日期。
              </param>
      <param name="endDate">
                时间段的结束日期。
              </param>
      <returns>
              当这两个参数都不 <see langword="null" />, ，返回两个指定日期之间的月份边界的数目。
               当一个或两个参数都 <see langword="null" />, ，返回 <see langword="null" /> 值。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffNanosecond(System.DateTime,System.DateTime)">
      <summary>
              计算两个不可为 null 的日期之间的毫微秒边界的数目。
            </summary>
      <param name="startDate">
                时间段的开始日期。
              </param>
      <param name="endDate">
                时间段的结束日期。
              </param>
      <returns>
              两个指定日期之间的毫微秒边界数。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffNanosecond(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>
              计算两个不可为 null 的日期之间的毫微秒边界的数目。
            </summary>
      <param name="startDate">
                时间段的开始日期。
              </param>
      <param name="endDate">
                时间段的结束日期。
              </param>
      <returns>
              两个指定日期之间的毫微秒边界数。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffNanosecond(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
              计算两个可以为 null 的日期之间的毫微秒边界的数目。
            </summary>
      <param name="startDate">
                时间段的开始日期。
              </param>
      <param name="endDate">
                时间段的结束日期。
              </param>
      <returns>
              当这两个参数都不 <see langword="null" />, ，返回两个指定日期之间的毫微秒边界数。
               当一个或两个参数都 <see langword="null" />, ，返回 <see langword="null" /> 值。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffNanosecond(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>
              计算两个可以为 null 的日期之间的毫微秒边界的数目。
            </summary>
      <param name="startDate">
                时间段的开始日期。
              </param>
      <param name="endDate">
                时间段的结束日期。
              </param>
      <returns>
              当这两个参数都不 <see langword="null" />, ，返回两个指定日期之间的毫微秒边界数。
               当一个或两个参数都 <see langword="null" />, ，返回 <see langword="null" /> 值。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffSecond(System.DateTime,System.DateTime)">
      <summary>
              计算两个不可为 null 的日期之间的第二个边界的数目。
            </summary>
      <param name="startDate">
                时间段的开始日期。
              </param>
      <param name="endDate">
                时间段的结束日期。
              </param>
      <returns>
              两个指定日期之间的第二个边界的数目。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffSecond(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>
              计算两个不可为 null 的日期之间的第二个边界的数目。
            </summary>
      <param name="startDate">
                时间段的开始日期。
              </param>
      <param name="endDate">
                时间段的结束日期。
              </param>
      <returns>
              两个指定日期之间的第二个边界的数目。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffSecond(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
              计算两个可以为 null 的日期之间的第二个边界的数目。
            </summary>
      <param name="startDate">
                时间段的开始日期。
              </param>
      <param name="endDate">
                时间段的结束日期。
              </param>
      <returns>
              当这两个参数都不 <see langword="null" />, ，返回两个指定日期之间的第二个边界的数目。
               当一个或两个参数都 <see langword="null" />, ，返回 <see langword="null" /> 值。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffSecond(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>
              计算两个可以为 null 的日期之间的第二个边界的数目。
            </summary>
      <param name="startDate">
                时间段的开始日期。
              </param>
      <param name="endDate">
                时间段的结束日期。
              </param>
      <returns>
              当这两个参数都不 <see langword="null" />, ，返回两个指定日期之间的第二个边界的数目。
               当一个或两个参数都 <see langword="null" />, ，返回 <see langword="null" /> 值。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffYear(System.DateTime,System.DateTime)">
      <summary>
              计算两个不可为 null 的日期之间的年份边界的数目。
            </summary>
      <param name="startDate">
                时间段的开始日期。
              </param>
      <param name="endDate">
                时间段的结束日期。
              </param>
      <returns>
              两个指定日期之间的年份边界数。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffYear(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>
              计算两个不可为 null 的日期之间的年份边界的数目。
            </summary>
      <param name="startDate">
                时间段的开始日期。
              </param>
      <param name="endDate">
                时间段的结束日期。
              </param>
      <returns>
              两个指定日期之间的年份边界数。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffYear(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
              计算两个可以为 null 的日期之间的年份边界的数目。
            </summary>
      <param name="startDate">
                时间段的开始日期。
              </param>
      <param name="endDate">
                时间段的结束日期。
              </param>
      <returns>
              当这两个参数都不 <see langword="null" />, ，返回两个指定日期之间的年份边界的数目。
               当一个或两个参数都 <see langword="null" />, ，返回 <see langword="null" /> 值。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffYear(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>
              计算两个可以为 null 的日期之间的年份边界的数目。
            </summary>
      <param name="startDate">
                时间段的开始日期。
              </param>
      <param name="endDate">
                时间段的结束日期。
              </param>
      <returns>
              当这两个参数都不 <see langword="null" />, ，返回两个指定日期之间的年份边界的数目。
               当一个或两个参数都 <see langword="null" />, ，返回 <see langword="null" /> 值。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.Like(System.String,System.String)">
      <summary>
              确定特定字符串是否与指定模式相匹配。
               此方法目前仅支持的 LINQ to SQL 查询。
            </summary>
      <param name="matchExpression">
                要搜索其匹配项的字符串。
              </param>
      <param name="pattern">
                该模式中，其中可能包含通配符，以匹配在 <paramref name="matchExpression" />。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="matchExpression" /> 与模式匹配; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.Like(System.String,System.String,System.Char)">
      <summary>
              确定特定字符串是否与指定模式相匹配。
               此方法目前仅支持的 LINQ to SQL 查询。
            </summary>
      <param name="matchExpression">
                要搜索其匹配项的字符串。
              </param>
      <param name="pattern">
                该模式中，其中可能包含通配符，以匹配在 <paramref name="matchExpression" />。
              </param>
      <param name="escapeCharacter">
                为常规字符而不是通配符，应解释要放在通配符，以指示之前的字符。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="matchExpression" /> 与模式匹配; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlProvider.#ctor">
      <summary>
              初始化 <see cref="T:System.Data.Linq.SqlClient.SqlProvider" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlProvider.Dispose">
      <summary>
              释放托管的引用，并关闭打开的连接 <see cref="T:System.Data.Linq.SqlClient.SqlProvider" />。
            </summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlProvider.Dispose(System.Boolean)">
      <summary>
              根据需要释放托管的引用，并关闭打开的连接 <see cref="T:System.Data.Linq.SqlClient.SqlProvider" />。
            </summary>
      <param name="disposing">
                <see langword="true" /> 若要释放托管的引用，并关闭连接;否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.Data.Linq.Table`1.Attach(`0)">
      <summary>
              将断开连接或"分离"的实体附加到新 <see cref="T:System.Data.Linq.DataContext" /> 进行开放式并发检查需要原始值时。
            </summary>
      <param name="entity">
                要附加的实体的原始值。
              </param>
    </member>
    <member name="M:System.Data.Linq.Table`1.Attach(`0,`0)">
      <summary>
              将附加到实体 <see cref="T:System.Data.Linq.DataContext" /> 以通过指定的实体和其原始状态修改或未修改状态。
            </summary>
      <param name="entity">
                要附加的实体。
              </param>
      <param name="original">
                与包含原始值的数据成员相同的实体类型的实例。
              </param>
    </member>
    <member name="M:System.Data.Linq.Table`1.Attach(`0,System.Boolean)">
      <summary>
              将附加到实体 <see cref="T:System.Data.Linq.DataContext" /> 中修改或未修改的状态。
            </summary>
      <param name="entity">
                要附加的实体。
              </param>
      <param name="asModified">
                <see langword="true" /> 若要将该实体附加为已修改; <see langword="false" /> 附加作为实体未经修改的形式。
              </param>
    </member>
    <member name="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              附加到集合中的所有实体 <see cref="T:System.Data.Linq.DataContext" /> 中修改或未修改的状态。
            </summary>
      <param name="entities">
                实体的集合。
              </param>
      <typeparam name="TSubEntity">
                要附加的实体类型。
              </typeparam>
      <typeparam name="TEntity">
                表中数据的类型。
              </typeparam>
    </member>
    <member name="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
      <summary>
              附加到集合中的所有实体 <see cref="T:System.Data.Linq.DataContext" /> 中修改或未修改的状态。
            </summary>
      <param name="entities">
                实体的集合。
              </param>
      <param name="asModified">
                <see langword="true" /> 如果对象具有时间戳或 RowVersion 成员; <see langword="false" /> 如果已使用原始值进行开放式并发检查。
              </param>
      <typeparam name="TSubEntity">
                要附加的实体类型。
              </typeparam>
      <typeparam name="TEntity">
                表中数据的类型。
              </typeparam>
    </member>
    <member name="M:System.Data.Linq.Table`1.DeleteAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              将集合中的所有实体 <see langword="pending delete" /> 状态。
            </summary>
      <param name="entities">
                要删除的实体。
              </param>
      <typeparam name="TSubEntity">
                要删除的元素的类型。
              </typeparam>
    </member>
    <member name="M:System.Data.Linq.Table`1.DeleteOnSubmit(`0)">
      <summary>
              将实体放到此表中 <see langword="pending delete" /> 状态。
            </summary>
      <param name="entity">
                要删除的实体。
              </param>
    </member>
    <member name="M:System.Data.Linq.Table`1.GetEnumerator">
      <summary>
              获取循环的枚举器遍历该集合。
            </summary>
      <returns>
              用于循环访问集合的枚举数。
            </returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.GetModifiedMembers(`0)">
      <summary>
              返回一个包含其当前值和原始值的已修改成员的数组。
            </summary>
      <param name="entity">
                从其获取数组的实体。
              </param>
      <returns>
              已修改成员包含其当前值和原始值的数组。
            </returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.GetNewBindingList">
      <summary>
              创建用于绑定到数据源的新列表。
            </summary>
      <returns>
              一个新 <see cref="T:System.ComponentModel.IBindingList" /> 用于绑定到数据源。
            </returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.GetOriginalEntityState(`0)">
      <summary>
              返回 <see cref="T:System.Data.Linq.Table`1" /> 实例，它包含该实体的原始状态。
            </summary>
      <param name="entity">
                其原始状态要返回的实体。
              </param>
      <returns>
              一个 <see cref="T:System.Data.Linq.Table`1" /> 实例，它包含该实体的原始状态。
            </returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.InsertAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              添加到集合中的所有实体 <see cref="T:System.Data.Linq.DataContext" /> 中 <see langword="pending insert" /> 状态。
            </summary>
      <param name="entities">
                要添加的实体。
              </param>
      <typeparam name="TSubEntity">
                要插入的元素的类型。
              </typeparam>
      <typeparam name="TEntity">
                表中数据的类型。
              </typeparam>
    </member>
    <member name="M:System.Data.Linq.Table`1.InsertOnSubmit(`0)">
      <summary>
              将在实体添加 <see langword="pending insert" /> 到此状态 <see cref="T:System.Data.Linq.Table`1" />。
            </summary>
      <param name="entity">
                要添加的实体。
              </param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Collections#Generic#IEnumerable{TEntity}#GetEnumerator">
      <summary>
              返回一个循环访问集合的枚举器。
            </summary>
      <returns>
              用于循环访问集合的枚举数。
            </returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              返回一个循环访问集合的枚举器。
            </summary>
      <returns>
              用于循环访问集合的枚举数。
            </returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#ComponentModel#IListSource#GetList">
      <summary>
              返回 <see cref="T:System.Collections.IList" /> 可绑定到数据源从对象以便为没有实现 <see cref="T:System.Collections.IList" /> 本身。
            </summary>
      <returns>
              <see cref="T:System.Collections.IList" /> 可以绑定到数据源。
            </returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object)">
      <summary>
              将附加到实体 <see cref="T:System.Data.Linq.DataContext" /> 中未修改的状态。
            </summary>
      <param name="entity">
                要附加的实体。
              </param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Boolean)">
      <summary>
              附加到集合中的所有实体 <see cref="T:System.Data.Linq.DataContext" /> 中修改或未修改的状态。
            </summary>
      <param name="entity">
                要附加的实体。
              </param>
      <param name="asModified">
                <see langword="true" /> 若要将该实体附加为已修改; <see langword="false" /> 附加作为实体未经修改的形式。
              </param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Object)">
      <summary>
              将附加到实体 <see cref="T:System.Data.Linq.DataContext" /> 以通过指定的实体和其原始状态修改或未修改状态。
            </summary>
      <param name="entity">
                要附加的实体。
              </param>
      <param name="original">
                与包含原始值的数据成员相同的实体类型的实例。
              </param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable)">
      <summary>
              附加到集合中的所有实体 <see cref="T:System.Data.Linq.DataContext" /> 中修改或未修改的状态。
            </summary>
      <param name="entities">
                要附加的实体的集合。
              </param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable,System.Boolean)">
      <summary>
              附加到集合中的所有实体 <see cref="T:System.Data.Linq.DataContext" /> 中修改或未修改的状态。
            </summary>
      <param name="entities">
                要附加的实体集合。
              </param>
      <param name="asModified">
                <see langword="true" /> 若要将实体附加为已修改; <see langword="false" /> 以附加作为实体未经修改的形式。
              </param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteAllOnSubmit(System.Collections.IEnumerable)">
      <summary>
              将集合中的所有实体 <see langword="pending delete" /> 状态。
            </summary>
      <param name="entities">
                要移除的实体。
              </param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteOnSubmit(System.Object)">
      <summary>
              将实体放到此表中 <see langword="pending delete" /> 状态。
            </summary>
      <param name="entity">
                要删除的实体。
              </param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetModifiedMembers(System.Object)">
      <summary>
              返回一个包含其当前值和原始值的已修改成员的数组。
            </summary>
      <param name="entity">
                从其获取已修改的成员的实体。
              </param>
      <returns>
              已修改成员的数组。
            </returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetOriginalEntityState(System.Object)">
      <summary>
              检索给定实体的原始值。
            </summary>
      <param name="entity">
                其原始状态要访问的实体。
              </param>
      <returns>
              一份原始实体。
            </returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertAllOnSubmit(System.Collections.IEnumerable)">
      <summary>
              添加到集合中的所有实体 <see cref="T:System.Data.Linq.DataContext" /> 中 <see langword="pending insert" /> 状态。
            </summary>
      <param name="entities">
                要添加的实体的集合。
              </param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertOnSubmit(System.Object)">
      <summary>
              将在实体添加 <see langword="pending insert" /> 状态对此表。
            </summary>
      <param name="entity">
                要添加的实体。
              </param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
      <summary>
              构造 <see cref="T:System.Linq.IQueryable" /> 可以评估所表示的指定的表达式目录树查询的对象。
            </summary>
      <param name="expression">
                从其执行评估查询表达式。
              </param>
      <returns>
              <see cref="T:System.Linq.IQueryable" /> ，它可计算指定的表达式目录树所表示的查询。
            </returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>
              构造 <see cref="T:System.Linq.IQueryable`1" /> 可以评估所表示的指定的表达式目录树查询的对象。
            </summary>
      <param name="expression">
                从其执行评估查询表达式。
              </param>
      <typeparam name="TResult">
                表中数据的类型。
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IQueryable`1" /> ，它可计算指定的表达式目录树所表示的查询。
            </returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
      <summary>
              执行指定的表达式树所表示的查询。
            </summary>
      <param name="expression">
                要执行的查询表达式。
              </param>
      <returns>
              执行指定的查询所得到的值。
            </returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
      <summary>
              执行指定的表达式树所表示的强类型查询。
            </summary>
      <param name="expression">
                要执行的查询表达式。
              </param>
      <typeparam name="TResult">
                表中数据的类型。
              </typeparam>
      <returns>
              执行指定的查询所得到的值。
            </returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.ToString">
      <summary>
              返回一个字符串，表示表。
            </summary>
      <returns>
              表的字符串表示形式。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Binary.Length">
      <summary>
              获取二进制对象的长度。
            </summary>
      <returns>
              一个整数，表示长度。
            </returns>
    </member>
    <member name="P:System.Data.Linq.ChangeConflictCollection.Count">
      <summary>
              返回集合中的冲突数。
            </summary>
      <returns>
              整数
            </returns>
    </member>
    <member name="P:System.Data.Linq.ChangeConflictCollection.Item(System.Int32)">
      <summary>
              在冲突中返回的项。
            </summary>
      <param name="index">
                在发生冲突的项的集合中编制索引。
              </param>
      <returns>
              <see cref="T:System.Data.Linq.ObjectChangeConflict" /> 表示发生冲突的项。
            </returns>
    </member>
    <member name="P:System.Data.Linq.ChangeConflictCollection.System#Collections#Generic#ICollection{System#Data#Linq#ObjectChangeConflict}#IsReadOnly">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />。
            </summary>
      <returns>
              返回 <see langword="true" /> 如果该集合为只读的。
            </returns>
    </member>
    <member name="P:System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.Collections.ICollection.IsSynchronized" />。
            </summary>
      <returns>
              返回 <see langword="true" /> 如果同步对集合的访问 （线程安全）。
            </returns>
    </member>
    <member name="P:System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#SyncRoot">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.Collections.ICollection.IsSynchronized" />。
            </summary>
      <returns>
              返回可用于同步对集合的访问的对象。
            </returns>
    </member>
    <member name="P:System.Data.Linq.ChangeSet.Deletes">
      <summary>
              获取已从删除的实体的列表 <see cref="T:System.Data.Linq.ChangeSet" />。
            </summary>
      <returns>
              <see cref="T:System.Collections.IList" /> 的已删除的实体。
            </returns>
    </member>
    <member name="P:System.Data.Linq.ChangeSet.Inserts">
      <summary>
              获取已插入的实体的列表 <see cref="T:System.Data.Linq.ChangeSet" />。
            </summary>
      <returns>
              <see cref="T:System.Collections.IList" /> 插入实体。
            </returns>
    </member>
    <member name="P:System.Data.Linq.ChangeSet.Updates">
      <summary>
              获取列表中已得到更新的实体 <see cref="T:System.Data.Linq.ChangeSet" />。
            </summary>
      <returns>
              <see cref="T:System.Collections.IList" /> 更新实体。
            </returns>
    </member>
    <member name="P:System.Data.Linq.CompiledQuery.Expression">
      <summary>
              返回 lambda 表达式形式的查询。
            </summary>
      <returns>
              Lambda 表达式表示该查询。
            </returns>
    </member>
    <member name="P:System.Data.Linq.DataContext.ChangeConflicts">
      <summary>
              获取导致并发冲突的对象的集合时 <see cref="M:System.Data.Linq.DataContext.SubmitChanges" /> 调用。
            </summary>
      <returns>
              导致并发冲突的对象的集合。
            </returns>
    </member>
    <member name="P:System.Data.Linq.DataContext.CommandTimeout">
      <summary>
              获取或设置一个值，会增加将否则为超时的默认超时期限内的查询的超时期限。
            </summary>
      <returns>
              一个整数值可提高查询的默认超时期限内将否则为超时的超时期限。
            </returns>
    </member>
    <member name="P:System.Data.Linq.DataContext.Connection">
      <summary>
              获取由框架使用的连接。
            </summary>
      <returns>
              由框架使用的连接。
            </returns>
    </member>
    <member name="P:System.Data.Linq.DataContext.DeferredLoadingEnabled">
      <summary>
              获取或设置一个值，该值指示是否要延迟加载的一对多关系还是一对一关系的关系。
            </summary>
      <returns>
              <see langword="true" /> 如果已启用延迟的加载;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.DataContext.LoadOptions">
      <summary>
              获取或设置 <see cref="T:System.Data.Linq.DataLoadOptions" /> 与此相关 <see cref="T:System.Data.Linq.DataContext" />。
            </summary>
      <returns>
              预提取加载相关数据的选项。
            </returns>
    </member>
    <member name="P:System.Data.Linq.DataContext.Log">
      <summary>
              获取或设置要编写 SQL 查询或命令的目标。
            </summary>
      <returns>
              <see cref="T:System.IO.TextReader" /> 要用于写入该命令。
            </returns>
    </member>
    <member name="P:System.Data.Linq.DataContext.Mapping">
      <summary>
              获取 <see cref="T:System.Data.Linq.Mapping.MetaModel" /> 映射所基于的。
            </summary>
      <returns>
              数据库和域对象之间的映射。
            </returns>
    </member>
    <member name="P:System.Data.Linq.DataContext.ObjectTrackingEnabled">
      <summary>
              获取或设置一个值，该值指示是否启用跟踪的对象。
            </summary>
      <returns>
              <see langword="true" /> 如果启用跟踪的对象;否则为 <see langword="false" />。
               默认值为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.DataContext.Transaction">
      <summary>
              获取或设置为本地事务 .NET Framework 要用于访问数据库。
            </summary>
      <returns>
              使用的事务对象 <see cref="T:System.Data.Linq.DataContext" /> 时执行查询和命令。
            </returns>
    </member>
    <member name="P:System.Data.Linq.DuplicateKeyException.Object">
      <summary>
              获取导致异常的对象。
            </summary>
      <returns>
              导致该异常的对象。
            </returns>
    </member>
    <member name="P:System.Data.Linq.EntityRef`1.Entity">
      <summary>
              获取或设置目标实体。
            </summary>
      <returns>
              目标实体。
            </returns>
    </member>
    <member name="P:System.Data.Linq.EntityRef`1.HasLoadedOrAssignedValue">
      <summary>
              获取一个值，该值指示是否已加载或分配目标。
            </summary>
      <returns>
              <see langword="True" /> 如果已加载或分配目标。
            </returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.Count">
      <summary>
              获取中的实体数 <see cref="T:System.Data.Linq.EntitySet`1" /> 集合。
            </summary>
      <returns>
              一个整数，表示的实体数。
            </returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.HasLoadedOrAssignedValues">
      <summary>
              指定是否 <see cref="T:System.Data.Linq.EntitySet`1" /> 已加载或分配一个值。
            </summary>
      <returns>
              返回 true if <see cref="T:System.Data.Linq.EntitySet`1" /> 已加载或分配值。
            </returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.IsDeferred">
      <summary>
              指定是否这 <see cref="T:System.Data.Linq.EntitySet`1" /> 尚未执行的延迟查询。
            </summary>
      <returns>
              <see langword="true" /> 如果尚未执行延迟的查询;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.Item(System.Int32)">
      <summary>
              获取或设置指定索引处的元素。
            </summary>
      <param name="index">
                元素的索引。
              </param>
      <returns>
              <see cref="T:System.Data.Linq.EntitySet`1" /> 表示的项。
            </returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#Collections#Generic#ICollection{TEntity}#IsReadOnly">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />。
            </summary>
      <returns>
              如果该集合为只读，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#Collections#ICollection#IsSynchronized">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.Collections.ICollection.IsSynchronized" />。
            </summary>
      <returns>
              如果对集合的访问是同步的（线程安全），则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#Collections#ICollection#SyncRoot">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.Collections.ICollection.SyncRoot" />。
            </summary>
      <returns>
              可用于同步集合访问的对象。
            </returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#Collections#IList#IsFixedSize">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.Collections.IList.IsFixedSize" />。
            </summary>
      <returns>
              <see langword="true" /> 如果集合具有固定的大小，则否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#Collections#IList#IsReadOnly">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.Collections.IList.IsReadOnly" />。
            </summary>
      <returns>
              如果该集合为只读，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#Collections#IList#Item(System.Int32)">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.Collections.IList.Item(System.Int32)" />。
            </summary>
      <param name="index">
                若要设置或获取的元素位置的索引。
              </param>
      <returns>
              指定索引处的元素。
            </returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />。
            </summary>
      <returns>
              <see langword="true" /> 如果集合是一套 <see cref="T:System.Collections.IList" /> 对象; 否则为 <see langword="false" />;
            </returns>
    </member>
    <member name="P:System.Data.Linq.IExecuteResult.ReturnValue">
      <summary>
              获取返回值或执行查询的结果。
            </summary>
      <returns>
              值或执行查询的结果。
            </returns>
    </member>
    <member name="P:System.Data.Linq.IFunctionResult.ReturnValue">
      <summary>
              获取函数的返回值。
            </summary>
      <returns>
              由该函数返回的值。
            </returns>
    </member>
    <member name="P:System.Data.Linq.ITable.Context">
      <summary>
              获取 <see cref="T:System.Data.Linq.DataContext" /> ，已用于检索此 <see cref="T:System.Data.Linq.ITable" />。
            </summary>
      <returns>
              <see cref="T:System.Data.Linq.DataContext" /> 用于检索 <see cref="T:System.Data.Linq.ITable" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.ITable.IsReadOnly">
      <summary>
              该值指示是否实体类型包含在此 <see cref="T:System.Data.Linq.ITable" /> 实例都有一个主键。
            </summary>
      <returns>
              返回 <see langword="true" /> 如果实体类型不具有主键; 否则为 false。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Link`1.HasLoadedOrAssignedValue">
      <summary>
              指定是否 <see cref="T:System.Data.Linq.Link`1" /> 已加载或分配一个值。
            </summary>
      <returns>
              <see langword="true" /> 如果 <see cref="T:System.Data.Linq.Link`1" /> 已加载或分配一个值; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Link`1.HasValue">
      <summary>
              获取一个值，指定源是否有值。
            </summary>
      <returns>
              返回 <see langword="true" /> 如果源有一个分配的或已加载的值 （包括 null）。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Link`1.Value">
      <summary>
              获取或设置值分配到或加载的 <see cref="T:System.Data.Linq.Link`1" />。
            </summary>
      <returns>
              此延迟的属性的值。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.AssociationAttribute.DeleteOnNull">
      <summary>
              当放置在其外键成员可为所有非空值的 1:1 关联，删除该对象时该关联设置为 null。
            </summary>
      <returns>
              将设置为 <see langword="True" /> 删除该对象。
               默认值为 <see langword="False" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.AssociationAttribute.DeleteRule">
      <summary>
              获取或设置删除关联的行为。
            </summary>
      <returns>
              表示规则的字符串。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.AssociationAttribute.IsForeignKey">
      <summary>
              获取或设置为表示数据库关系的关联中的外键的成员。
            </summary>
      <returns>
              默认值 = <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.AssociationAttribute.IsUnique">
      <summary>
              获取或设置指示外键的唯一性约束。
            </summary>
      <returns>
              默认值 = <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.AssociationAttribute.OtherKey">
      <summary>
              获取或在关联另一端上的键值设置的目标实体类的一个或多个成员。
            </summary>
      <returns>
              默认为相关的类的 Id。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.AssociationAttribute.ThisKey">
      <summary>
              获取或设置此实体类的成员表示关联此端上的键值。
            </summary>
      <returns>
              默认值为包含类的 Id。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.AutoSync">
      <summary>
              获取或设置 <see cref="T:System.Data.Linq.Mapping.AutoSync" /> 枚举。
            </summary>
      <returns>
              <see cref="T:System.Data.Linq.Mapping.AutoSync" /> 值。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.CanBeNull">
      <summary>
              获取或设置是否列可以包含 null 值。
            </summary>
      <returns>
              默认值 = <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.DbType">
      <summary>
              获取或设置数据库列的类型。
            </summary>
      <returns>
              请参阅“备注”。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.Expression">
      <summary>
              获取或设置指示列在数据库中计算所得的列。
            </summary>
      <returns>
              默认值为空。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.IsDbGenerated">
      <summary>
              获取或设置是否列包含数据库自动生成的值。
            </summary>
      <returns>
              默认值 = <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.IsDiscriminator">
      <summary>
              获取或设置是否列包含的鉴别器值 LINQ to SQL 继承层次结构。
            </summary>
      <returns>
              默认值 = <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.IsPrimaryKey">
      <summary>
              获取或设置指示是否此类成员表示的部分或全部表的主键的列。
            </summary>
      <returns>
              默认值 = <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.IsVersion">
      <summary>
              获取或设置是否该成员的列类型为数据库时间戳或版本号编号。
            </summary>
      <returns>
              默认值 = <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck">
      <summary>
              获取或设置如何 LINQ to SQL 实现开放式并发冲突的检测。
            </summary>
      <returns>
              默认值 = <see cref="F:System.Data.Linq.Mapping.UpdateCheck.Always" />, ，除非 <see cref="P:System.Data.Linq.Mapping.ColumnAttribute.IsVersion" /> 是 <see langword="true" /> 成员。
            
              其他值都是 <see cref="F:System.Data.Linq.Mapping.UpdateCheck.Never" /> 和 <see cref="F:System.Data.Linq.Mapping.UpdateCheck.WhenChanged" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.DataAttribute.Name">
      <summary>
              获取或设置列的名称。
            </summary>
      <returns>
              名称。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.DataAttribute.Storage">
      <summary>
              获取或设置一个私有存储字段以保存来自某一列的值。
            </summary>
      <returns>
              存储字段的名称。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.DatabaseAttribute.Name">
      <summary>
              获取或设置数据库的名称。
            </summary>
      <returns>
              名称。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.FunctionAttribute.IsComposable">
      <summary>
              获取或设置是否一种方法映射的函数或存储过程。
            </summary>
      <returns>
              <see langword="true" /> 如果一个函数; <see langword="false" /> 如果存储过程。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.FunctionAttribute.Name">
      <summary>
              获取或设置函数的名称。
            </summary>
      <returns>
              函数或存储的过程的名称。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.InheritanceMappingAttribute.Code">
      <summary>
              获取或设置映射的继承层次结构中的鉴别器代码值。
            </summary>
      <returns>
              必须为用户指定。
               没有默认值。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.InheritanceMappingAttribute.IsDefault">
      <summary>
              获取或设置是否鉴别器值与指定的值不匹配时，实例化此类型的对象。
            </summary>
      <returns>
              默认值 = <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.InheritanceMappingAttribute.Type">
      <summary>
              获取或设置层次结构中的类的类型。
            </summary>
      <returns>
              必须为用户指定。
               没有默认值。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAccessor.Type">
      <summary>
              获取该取值函数访问的成员的类型。
            </summary>
      <returns>
              成员的类型。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAccessor`2.Type">
      <summary>
              获取该取值函数访问的成员的类型。
            </summary>
      <returns>
              成员类型。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.DeleteOnNull">
      <summary>
              获取是否应当删除该对象，当该关联设置为 null。
            </summary>
      <returns>
              如果 <see langword="true" />, ，该对象就会删除该关联设置为 null。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.DeleteRule">
      <summary>
              删除子时获取的行为。
            </summary>
      <returns>
              表示该规则的字符串或 <see langword="null" /> 如果在删除不指定任何操作。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.IsForeignKey">
      <summary>
              获取其他类型是否为此类型的父级。
            </summary>
      <returns>
              返回 <see langword="true" /> 另一种类型为此类型的父级。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.IsMany">
      <summary>
              获取指示关联表示一种一对多关系。
            </summary>
      <returns>
              返回 <see langword="true" /> 如果关联表示一个对多关系。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.IsNullable">
      <summary>
              获取指示是否关联可为 null。
            </summary>
      <returns>
              返回 <see langword="true" /> 如果关联可为 null。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.IsUnique">
      <summary>
              获取指示关联唯一。
            </summary>
      <returns>
              返回 <see langword="true" /> 如果关联是唯一的。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.OtherKey">
      <summary>
              获取表示关联另一端的值成员的列表。
            </summary>
      <returns>
              返回一个表示关联另一端上的值的集合。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.OtherKeyIsPrimaryKey">
      <summary>
              获取是否 <see cref="P:System.Data.Linq.Mapping.MetaAssociation.OtherKey" /> 构成另一种类型的标识。
            </summary>
      <returns>
              <see langword="true" /> 如果 <see cref="P:System.Data.Linq.Mapping.MetaAssociation.OtherKey" /> 构成另一种类型的标识 （主键）。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.OtherMember">
      <summary>
              在此关联中表示的反向关联另一端上获取的成员。
            </summary>
      <returns>
              在另一侧成员。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.OtherType">
      <summary>
              获取关联的另一端的类型。
            </summary>
      <returns>
              类型。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.ThisKey">
      <summary>
              获取表示关联此端上的值的成员的列表。
            </summary>
      <returns>
              一个集合。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.ThisKeyIsPrimaryKey">
      <summary>
              获取是否 <see cref="P:System.Data.Linq.Mapping.MetaAssociation.ThisKey" /> 构成这种类型的标识。
            </summary>
      <returns>
              <see langword="true" /> 如果 <see cref="P:System.Data.Linq.Mapping.MetaAssociation.ThisKey" /> 窗体关联的标识 （主键）。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.ThisMember">
      <summary>
              表示关联此端上获取的成员。
            </summary>
      <returns>
              成员。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.Association">
      <summary>
              获取 <see cref="T:System.Data.Linq.Mapping.MetaAssociation" /> 对应于此成员。
            </summary>
      <returns>
              相应 <see cref="T:System.Data.Linq.Mapping.MetaAssociation" /> 如果存在; 否则为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.AutoSync">
      <summary>
              获取此成员在执行插入的读回行为和更新操作。
            </summary>
      <returns>
              <see cref="T:System.Data.Linq.Mapping.AutoSync" /> 枚举。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.CanBeNull">
      <summary>
              获取指示此成员的值可以分配 <see langword="null" /> 值。
            </summary>
      <returns>
              <see langword="true" /> 如果此成员可以将分配给 <see langword="null" /> 值; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.DbType">
      <summary>
              获取相应的数据库列的类型。
            </summary>
      <returns>
              字符串形式的数据库列的类型。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.DeclaringType">
      <summary>
              获取 <see cref="T:System.Data.Linq.Mapping.MetaType" /> ，其中包含此数据成员。
            </summary>
      <returns>
              元类型，其中包含当前成员。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.DeferredSourceAccessor">
      <summary>
              获取用于获取和设置此成员的延迟的源的访问器。
            </summary>
      <returns>
              用于访问此成员的延迟的源的访问器。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.DeferredValueAccessor">
      <summary>
              获取用于获取和设置此成员的延迟的值 （而不导致提取） 的访问器。
            </summary>
      <returns>
              用于访问此成员的延迟的值的访问器。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.Expression">
      <summary>
              获取定义计算的列的表达式。
            </summary>
      <returns>
              一个字符串形式的表达式计算所得的列。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsAssociation">
      <summary>
              获取指示此成员定义的关联关系。
            </summary>
      <returns>
              <see langword="true" /> 如果此成员定义的关联关系;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsDbGenerated">
      <summary>
              获取指示此成员会自动生成的数据库。
            </summary>
      <returns>
              <see langword="true" /> 如果此成员自动生成的数据库;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsDeferred">
      <summary>
              获取指示默认行为加载基于延迟此成员。
            </summary>
      <returns>
              <see langword="true" /> 如果此成员的默认设置; 基于延迟加载否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsDiscriminator">
      <summary>
              获取指示此成员表示继承鉴别器值。
            </summary>
      <returns>
              <see langword="true" /> 如果此成员表示继承的鉴别器;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsPersistent">
      <summary>
              获取指示此成员映射到列 （或约束）。
            </summary>
      <returns>
              <see langword="true" /> 如果此成员映射到列 （或约束） 中;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsPrimaryKey">
      <summary>
              获取指示此成员是类型的标识的一部分。
            </summary>
      <returns>
              <see langword="true" /> 如果此成员是类型的标识; 的一部分否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsVersion">
      <summary>
              获取指示此成员表示的行版本或时间戳值。
            </summary>
      <returns>
              <see langword="true" /> 如果此成员是表示行版本或时间戳;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.LoadMethod">
      <summary>
              获取 <see cref="T:System.Data.Linq.DataContext" /> 用于执行加载操作的方法。
            </summary>
      <returns>
              Load 方法作为 <see cref="T:System.Reflection.MethodInfo" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.MappedName">
      <summary>
              在数据库中获取的列 （或约束） 的名称。
            </summary>
      <returns>
              作为字符串列 （或约束） 的名称。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.Member">
      <summary>
              获取基础 <see cref="T:System.Reflection.MemberInfo" />。
            </summary>
      <returns>
              成员属性和元数据信息。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.MemberAccessor">
      <summary>
              获取用于获取或设置此成员的值的取值函数。
            </summary>
      <returns>
              访问器。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.Name">
      <summary>
              获取该成员，相同的名称 <see cref="T:System.Reflection.MemberInfo" /> 名称。
            </summary>
      <returns>
              名称，等同于 <see cref="T:System.Reflection.MemberInfo" /> 名称。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.Ordinal">
      <summary>
              获取此成员的查询结果的默认布局中的序号位置。
            </summary>
      <returns>
              序号位置。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.StorageAccessor">
      <summary>
              获取用于获取或设置此成员的存储值的取值函数。
            </summary>
      <returns>
              此成员的存储值访问器。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.StorageMember">
      <summary>
              获取有关此成员中存储的数据的成员。
            </summary>
      <returns>
              存储成员。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.Type">
      <summary>
              获取此成员的类型。
            </summary>
      <returns>
              当前成员的类型。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.UpdateCheck">
      <summary>
              获取此成员的开放式并发检查策略。
            </summary>
      <returns>
              <see cref="T:System.Data.Linq.Mapping.UpdateCheck" /> 枚举。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.HasMultipleResults">
      <summary>
              获取指示存储的过程具有多个结果类型。
            </summary>
      <returns>
              <see langword="true" /> 如果存储的过程具有多个结果类型。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.IsComposable">
      <summary>
              获取是否可以在查询内编写函数。
            </summary>
      <returns>
              <see langword="true" /> 如果在查询中，可以编写函数。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.MappedName">
      <summary>
              获取数据库函数或过程的名称。
            </summary>
      <returns>
              一个表示数据库函数或过程的名称的字符串。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.Method">
      <summary>
              获取基础上下文方法。
            </summary>
      <returns>
              一个 <see cref="T:System.Reflection.MethodInfo" /> 对应多大的基础上下文方法的对象。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.Model">
      <summary>
              获取 <see cref="T:System.Data.Linq.Mapping.MetaModel" /> ，其中包含此函数。
            </summary>
      <returns>
              <see cref="T:System.Data.Linq.Mapping.MetaModel" /> 对象，其中包含此函数。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.Name">
      <summary>
              获取该方法的名称。
            </summary>
      <returns>
              一个 <see langword="string" /> ，它表示该方法的名称。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.Parameters">
      <summary>
              获取函数参数的枚举。
            </summary>
      <returns>
              参数的集合。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.ResultRowTypes">
      <summary>
              获取行类型的可能结果的枚举。
            </summary>
      <returns>
              可能的类型的集合。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.ReturnParameter">
      <summary>
              获取返回的参数。
            </summary>
      <returns>
              <see cref="T:System.Data.Linq.Mapping.MetaParameter" /> 对应的返回参数。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaModel.ContextType">
      <summary>
              获取的类型 <see cref="T:System.Data.Linq.DataContext" /> 此模型所描述的类型。
            </summary>
      <returns>
              数据上下文类型。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaModel.DatabaseName">
      <summary>
              获取数据库的名称。
            </summary>
      <returns>
              一个字符串形式的数据库名称。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaModel.MappingSource">
      <summary>
              获取生成此模型的映射源。
            </summary>
      <returns>
              原始的映射源。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaModel.ProviderType">
      <summary>
              获取或设置提供程序类型。
            </summary>
      <returns>
              提供程序类型。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaParameter.DbType">
      <summary>
              获取参数的数据库类型。
            </summary>
      <returns>
              作为字符串参数的数据库类型。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaParameter.MappedName">
      <summary>
              获取参数的名称中的数据库功能。
            </summary>
      <returns>
              一个字符串形式的名称。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaParameter.Name">
      <summary>
              获取参数的名称。
            </summary>
      <returns>
              作为字符串参数的名称。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaParameter.Parameter">
      <summary>
              获取基础的方法参数。
            </summary>
      <returns>
              基础的方法参数。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaParameter.ParameterType">
      <summary>
              获取参数的公共语言运行时 (CLR) 类型。
            </summary>
      <returns>
              类型。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaTable.DeleteMethod">
      <summary>
              获取 <see cref="T:System.Data.Linq.DataContext" /> 方法，用来执行删除操作。
            </summary>
      <returns>
              <see cref="T:System.Reflection.MethodInfo" /> 对应于用于删除操作的方法。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaTable.InsertMethod">
      <summary>
              获取 <see cref="T:System.Data.Linq.DataContext" /> 方法，用来执行插入操作。
            </summary>
      <returns>
              <see cref="T:System.Reflection.MethodInfo" /> ，对应于用于插入操作的方法。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaTable.Model">
      <summary>
              获取包含此 <see cref="T:System.Data.Linq.Mapping.MetaModel" /> 的 <see cref="T:System.Data.Linq.Mapping.MetaTable" />。
            </summary>
      <returns>
              <see cref="T:System.Data.Linq.Mapping.MetaModel" /> 包括此 MetaTable。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaTable.RowType">
      <summary>
              获取 <see cref="T:System.Data.Linq.Mapping.MetaType" /> 描述表中的行的类型。
            </summary>
      <returns>
              表中的行的类型。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaTable.TableName">
      <summary>
              获取由数据库定义的表的名称。
            </summary>
      <returns>
              一个 <see langword="string" /> 表示的表的名称。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaTable.UpdateMethod">
      <summary>
              获取 <see cref="T:System.Data.Linq.DataContext" /> 方法，用来执行更新操作。
            </summary>
      <returns>
              <see cref="T:System.Reflection.MethodInfo" /> 对应于用于更新操作的方法。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.Associations">
      <summary>
              获取所有关联的枚举。
            </summary>
      <returns>
              关联的集合。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.CanInstantiate">
      <summary>
              获取是否可以将基础类型实例化为查询的结果。
            </summary>
      <returns>
              <see langword="true" /> 如果查询; 因此可以实例化的基础类型否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.DataMembers">
      <summary>
              获取所有数据成员 （字段和属性） 的枚举。
            </summary>
      <returns>
              数据成员的集合。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.DBGeneratedIdentityMember">
      <summary>
              获取表示自动生成的标识列的成员。
            </summary>
      <returns>
              表示自动生成的标识列的成员或 <see langword="null" /> 如果没有自动生成的标识列。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.DerivedTypes">
      <summary>
              继承层次结构中获取的直接派生类型的枚举。
            </summary>
      <returns>
              元类型的枚举。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.Discriminator">
      <summary>
              获取表示继承的鉴别器列的成员。
            </summary>
      <returns>
              表示继承的鉴别器列中，该成员或 <see langword="null" /> 如果不存在。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.HasAnyLoadMethod">
      <summary>
              获取一个值，该值指示是否当前 <see cref="T:System.Data.Linq.Mapping.MetaType" /> 或任何其基类型具有 OnLoaded 方法。
            </summary>
      <returns>
              <see langword="true" /> 如果元类型或任何基元类型具有 OnLoaded 方法; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.HasAnyValidateMethod">
      <summary>
              获取一个值，该值指示是否<see cref="T:System.Data.Linq.Mapping.MetaType" />或任何基类型具有OnValidate方法。
            </summary>
      <returns>
              <see langword="true" />如果元类型或任何基元类型具有OnValidate方法; 否则为<see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.HasInheritance">
      <summary>
              获取一个值，该值指示类型是否为映射的继承层次结构的一部分。
            </summary>
      <returns>
              <see langword="true" /> 如果该类型为映射的继承层次结构; 的一部分否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.HasInheritanceCode">
      <summary>
              获取一个值，该值指示此类型是否定义的继承代码。
            </summary>
      <returns>
              <see langword="true" /> 如果此类型定义的继承代码;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.HasUpdateCheck">
      <summary>
              获取一个值，该值指示该类型是否具有任何持久性成员可能需要一个测试存在开放式并发冲突。
            </summary>
      <returns>
              <see langword="true" /> 如果该类型具有与任何持久性成员 <see cref="T:System.Data.Linq.Mapping.UpdateCheck" /> 以外的其他策略 <see cref="F:System.Data.Linq.Mapping.UpdateCheck.Never" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.IdentityMembers">
      <summary>
              获取定义该类型的唯一标识的所有数据成员的枚举。
            </summary>
      <returns>
              定义该类型的唯一标识的成员的枚举。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.InheritanceBase">
      <summary>
              继承层次结构中获取基元类型。
            </summary>
      <returns>
              基元类型的当前继承层次结构。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.InheritanceCode">
      <summary>
              获取一个值，该值指示此类型是否定义的继承代码。
            </summary>
      <returns>
              <see langword="true" /> 如果此类型定义的继承代码;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.InheritanceDefault">
      <summary>
              获取一个值，该值指示是否将此类型用作继承层次结构的默认值。
            </summary>
      <returns>
              继承映射中的默认类型的元数据。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.InheritanceRoot">
      <summary>
              获取在继承层次结构的根类型。
            </summary>
      <returns>
              根类型中。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.InheritanceTypes">
      <summary>
              获取由继承层次结构定义的所有类型的集合。
            </summary>
      <returns>
              当前的继承层次结构中的元类型的集合。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.IsEntity">
      <summary>
              获取一个值，该值指示是否 <see cref="T:System.Data.Linq.Mapping.MetaType" /> 是实体类型。
            </summary>
      <returns>
              <see langword="true" /> 如果 <see cref="T:System.Data.Linq.Mapping.MetaType" /> 是实体类型; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.IsInheritanceDefault">
      <summary>
              获取一个值，该值指示是否将此类型用作继承层次结构的默认值。
            </summary>
      <returns>
              <see langword="true" /> 如果此类型用作默认值为继承层次结构;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.Model">
      <summary>
              获取包含此 <see cref="T:System.Data.Linq.Mapping.MetaModel" /> 的 <see cref="T:System.Data.Linq.Mapping.MetaType" />。
            </summary>
      <returns>
              包含元模型。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.Name">
      <summary>
              获取 <see cref="T:System.Data.Linq.Mapping.MetaType" /> 的名称。
            </summary>
      <returns>
              当前的基元类型的名称。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.OnLoadedMethod">
      <summary>
              获取有关的信息 OnLoaded 包含由此元类型方法。
            </summary>
      <returns>
              说明 OnLoaded 作为此元类型方法。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.OnValidateMethod">
      <summary>
              获取有关的信息 OnValidate 包含由此元类型方法。
            </summary>
      <returns>
              说明 OnValidate 作为此元类型方法。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.PersistentDataMembers">
      <summary>
              获取所有持久性数据成员的集合。
            </summary>
      <returns>
              当前的类型中的所有元数据成员的集合。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.Table">
      <summary>
              获取 <see cref="T:System.Data.Linq.Mapping.MetaTable" /> ，使用此 <see cref="T:System.Data.Linq.Mapping.MetaType" /> 行定义。
            </summary>
      <returns>
              一个元表定义行使用当前的基元类型。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.Type">
      <summary>
              获取基础的公共语言运行时 (CLR) 类型。
            </summary>
      <returns>
              关联的 CLR 类型。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.VersionMember">
      <summary>
              获取此的行版本或时间戳列 <see cref="T:System.Data.Linq.Mapping.MetaType" />。
            </summary>
      <returns>
              表示此基元类型的行版本或时间戳列的元数据成员或 <see langword="null" /> 如果不存在。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ParameterAttribute.DbType">
      <summary>
              获取或设置特定于提供程序数据库的参数的类型。
            </summary>
      <returns>
              字符串形式的类型。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ParameterAttribute.Name">
      <summary>
              获取或设置参数的名称。
            </summary>
      <returns>
              一个字符串形式的名称。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ProviderAttribute.Type">
      <summary>
              获取用于构造提供程序的类型 <see cref="T:System.Data.Linq.Mapping.ProviderAttribute" />。
            </summary>
      <returns>
              提供程序的类型。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ResultTypeAttribute.Type">
      <summary>
              获取具有不同结果类型的函数的有效的或预期的类型映射。
            </summary>
      <returns>
              结果的类型 (<see cref="T:System.Type" />)。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.TableAttribute.Name">
      <summary>
              获取或设置表或视图的名称。
            </summary>
      <returns>
              默认情况下，值为类的名称相同。
            </returns>
    </member>
    <member name="P:System.Data.Linq.MemberChangeConflict.CurrentValue">
      <summary>
              获取发生冲突的成员的当前值。
            </summary>
      <returns>
              发生冲突的对象。
            </returns>
    </member>
    <member name="P:System.Data.Linq.MemberChangeConflict.DatabaseValue">
      <summary>
              获取发生冲突的成员的数据库值。
            </summary>
      <returns>
              发生冲突的对象的值。
            </returns>
    </member>
    <member name="P:System.Data.Linq.MemberChangeConflict.IsModified">
      <summary>
              获取一个值，该值指示是否由于读取或刷新最后一个数据库已更改的成员数据。
            </summary>
      <returns>
              <see langword="True" /> 如果已更改的成员数据。
            </returns>
    </member>
    <member name="P:System.Data.Linq.MemberChangeConflict.IsResolved">
      <summary>
              获取一个值，该值指示是否已解决冲突。
            </summary>
      <returns>
              <see langword="True" /> 如果该冲突已得到解决。
            </returns>
    </member>
    <member name="P:System.Data.Linq.MemberChangeConflict.Member">
      <summary>
              获取该成员相关的元数据信息发生冲突。
            </summary>
      <returns>
              有关发生冲突的成员的信息。
            </returns>
    </member>
    <member name="P:System.Data.Linq.MemberChangeConflict.OriginalValue">
      <summary>
              获取发生冲突的成员的原始值。
            </summary>
      <returns>
              发生冲突的成员的原始值。
            </returns>
    </member>
    <member name="P:System.Data.Linq.ModifiedMemberInfo.CurrentValue">
      <summary>
              获取对已修改成员的当前值。
            </summary>
      <returns>
              成员的值。
            </returns>
    </member>
    <member name="P:System.Data.Linq.ModifiedMemberInfo.Member">
      <summary>
              获取对已修改成员的成员信息。
            </summary>
      <returns>
              有关发生冲突的成员的信息。
            </returns>
    </member>
    <member name="P:System.Data.Linq.ModifiedMemberInfo.OriginalValue">
      <summary>
              获取对已修改成员的原始值。
            </summary>
      <returns>
              修改后的成员的原始值。
            </returns>
    </member>
    <member name="P:System.Data.Linq.ObjectChangeConflict.IsDeleted">
      <summary>
              获取一个值，该值指示是否已从数据库中删除发生冲突的对象。
            </summary>
      <returns>
              <see langword="True" /> 如果该对象已被删除。
            </returns>
    </member>
    <member name="P:System.Data.Linq.ObjectChangeConflict.IsResolved">
      <summary>
              获取一个值，该值指示是否已解决了此对象的冲突。
            </summary>
      <returns>
              <see langword="True" /> 如果冲突都已解决。
            </returns>
    </member>
    <member name="P:System.Data.Linq.ObjectChangeConflict.MemberConflicts">
      <summary>
              获取导致更新失败的所有成员冲突的集合。
            </summary>
      <returns>
              成员冲突的集合。
            </returns>
    </member>
    <member name="P:System.Data.Linq.ObjectChangeConflict.Object">
      <summary>
              在冲突中获取的对象。
            </summary>
      <returns>
              发生冲突的对象。
            </returns>
    </member>
    <member name="P:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.CanDeferLoad">
      <summary>
              当在派生类中重写，获取一个值，该值指示是否启用延迟的加载。
            </summary>
      <returns>
              <see langword="true" /> 如果已启用延迟的加载;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Table`1.Context">
      <summary>
              获取 <see cref="T:System.Data.Linq.DataContext" /> ，已用于检索此 <see cref="T:System.Data.Linq.Table`1" />。
            </summary>
      <returns>
              已使用此表中检索数据上下文。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Table`1.IsReadOnly">
      <summary>
              获取一个值，该值指示的实体的类型是否包含在此 <see cref="T:System.Data.Linq.Table`1" /> 实例都有一个主键。
            </summary>
      <returns>
              <see langword="true" /> 如果实体类型不具有主键;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Table`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>
              获取一个值，该值指示集合是否为一套 <see cref="T:System.Collections.IList" /> 对象。
            </summary>
      <returns>
              <see langword="true" /> 如果集合是一套 <see cref="T:System.Collections.IList" /> 对象; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Table`1.System#Linq#IQueryable#ElementType">
      <summary>
              获取与此对象关联的表达式树执行时返回的元素的类型。
            </summary>
      <returns>
              执行与此对象关联的表达式树时返回的元素的类型。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Expression">
      <summary>
              获取与此实例相关联的表达式目录树 <see cref="T:System.Linq.IQueryable" />。
            </summary>
      <returns>
              <see cref="T:System.Linq.Expressions.Expression" /> 的此实例与该键相关联 <see cref="T:System.Linq.IQueryable" />。
            </returns>
    </member>
    <member name="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Provider">
      <summary>
              获取与此数据源相关联的查询提供程序。
            </summary>
      <returns>
              <see cref="T:System.Linq.IQueryProvider" /> 此数据源与该键相关联。
            </returns>
    </member>
    <member name="T:System.Data.Linq.Binary">
      <summary>
              表示不可变的二进制数据块。
            </summary>
    </member>
    <member name="T:System.Data.Linq.ChangeAction">
      <summary>
              描述的更改的更改提交到数据库时，实体将具有的类型。
            </summary>
    </member>
    <member name="F:System.Data.Linq.ChangeAction.None">
      <summary>
              无法提交该实体。
            </summary>
    </member>
    <member name="F:System.Data.Linq.ChangeAction.Delete">
      <summary>
              将删除此实体。
            </summary>
    </member>
    <member name="F:System.Data.Linq.ChangeAction.Insert">
      <summary>
              将插入该实体。
            </summary>
    </member>
    <member name="F:System.Data.Linq.ChangeAction.Update">
      <summary>
              将更新该实体。
            </summary>
    </member>
    <member name="T:System.Data.Linq.ChangeConflictCollection">
      <summary>
              返回在并发冲突中涉及的对象集合。
            </summary>
    </member>
    <member name="T:System.Data.Linq.ChangeConflictException">
      <summary>
              引发时更新失败，因为数据库值后进行了更新客户端上次读取它们。
            </summary>
    </member>
    <member name="T:System.Data.Linq.ChangeSet">
      <summary>
              提供一个容器，以保存更改。
            </summary>
    </member>
    <member name="T:System.Data.Linq.CompiledQuery">
      <summary>
              用于编译查询，并对查询进行缓存以供重复使用。
            </summary>
    </member>
    <member name="T:System.Data.Linq.ConflictMode">
      <summary>
              指定应何时报告并发冲突。
            </summary>
    </member>
    <member name="F:System.Data.Linq.ConflictMode.FailOnFirstConflict">
      <summary>
              指定尝试更新数据库应立即在检测到的第一个并发冲突错误时才停止。
            </summary>
    </member>
    <member name="F:System.Data.Linq.ConflictMode.ContinueOnConflict">
      <summary>
              指定，应尝试对数据库的所有更新，并应累计并在过程结束时返回并发冲突。
            </summary>
    </member>
    <member name="T:System.Data.Linq.DataContext">
      <summary>
              表示主入口点 LINQ to SQL 框架。
            </summary>
    </member>
    <member name="T:System.Data.Linq.DataLoadOptions">
      <summary>
              提供用于立即加载和筛选相关数据。
            </summary>
    </member>
    <member name="T:System.Data.Linq.DBConvert">
      <summary>
              内部使用，以将一个类型转换为另一个。
            </summary>
    </member>
    <member name="T:System.Data.Linq.DuplicateKeyException">
      <summary>
              当尝试使用已被使用的密钥将对象添加到标识缓存时引发。
            </summary>
    </member>
    <member name="T:System.Data.Linq.EntityRef`1">
      <summary>
              提供的单一实例中的一种一对多关系一端的延迟加载和关系维护 LINQ to SQL 应用程序。
            </summary>
      <typeparam name="TEntity">
                目标实体的类型。
              </typeparam>
    </member>
    <member name="T:System.Data.Linq.EntitySet`1">
      <summary>
              为 LINQ to SQL 应用程序中的一对多和一对一关系中的集合提供延迟加载和关系维护。 </summary>
      <typeparam name="TEntity">
                目标实体的数据类型。
              </typeparam>
    </member>
    <member name="T:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException">
      <summary>
              表示尝试在已加载实体时更改外键时出现的错误。
            </summary>
    </member>
    <member name="T:System.Data.Linq.IExecuteResult">
      <summary>
              提供访问权限的返回值或执行查询的结果。
            </summary>
    </member>
    <member name="T:System.Data.Linq.IFunctionResult">
      <summary>
              提供对函数的返回值的访问。
            </summary>
    </member>
    <member name="T:System.Data.Linq.IMultipleResults">
      <summary>
              表示映射的函数或变量的查询的结果返回序列。
            </summary>
    </member>
    <member name="T:System.Data.Linq.ISingleResult`1">
      <summary>
              表示具有单个返回序列的映射函数的结果。
            </summary>
      <typeparam name="T">
                返回序列中元素的类型。
              </typeparam>
    </member>
    <member name="T:System.Data.Linq.ITable">
      <summary>
              用于弱类型化的查询方案。
            </summary>
    </member>
    <member name="T:System.Data.Linq.ITable`1">
      <summary>
              表示基础数据库中的特定类型的表。
            </summary>
    </member>
    <member name="T:System.Data.Linq.Link`1">
      <summary>
              用于启用延迟的加载的个别属性 (类似于 <see cref="T:System.Data.Linq.EntityRef`1" />)。
            </summary>
      <typeparam name="T">
                延迟的源中的元素的类型。
              </typeparam>
    </member>
    <member name="T:System.Data.Linq.Mapping.AssociationAttribute">
      <summary>
              指定一个属性来表示数据库的关联，如外键关系。
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.AttributeMappingSource">
      <summary>
              使用上下文属性来创建的映射模型映射源。
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.AutoSync">
      <summary>
              指示运行时如何在执行 insert 或 update 操作后检索值。
            </summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.AutoSync.Default">
      <summary>
              自动选择的值。
            </summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.AutoSync.Always">
      <summary>
              始终返回的值。
            </summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.AutoSync.Never">
      <summary>
              永远不会返回的值。
            </summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.AutoSync.OnInsert">
      <summary>
              仅在插入操作后返回的值。
            </summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.AutoSync.OnUpdate">
      <summary>
              仅在更新操作后返回的值。
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.ColumnAttribute">
      <summary>
              将一个类与数据库表中的列相关联。
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.DataAttribute">
      <summary>
              提供成员以描述列中数据的特性。
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.DatabaseAttribute">
      <summary>
              指定的类表示的数据库的某些属性。
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.FunctionAttribute">
      <summary>
              将一种方法与存储的过程或用户定义函数在数据库中的相关联。
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.InheritanceMappingAttribute">
      <summary>
              映射继承层次结构中的 LINQ to SQL 应用程序。
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.MappingSource">
      <summary>
              表示映射信息的源。
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaAccessor">
      <summary>
              表示指向成员的访问器。
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaAccessor`2">
      <summary>
              强类型的版本 <see cref="T:System.Data.Linq.Mapping.MetaAccessor" /> 类。
            </summary>
      <typeparam name="TEntity">
                源的类型。
              </typeparam>
      <typeparam name="TMember">
                该源的成员的类型。
              </typeparam>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaAssociation">
      <summary>
              表示两个实体类型之间的关联关系。
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaDataMember">
      <summary>
              表示到数据库表的列之间的字段或域对象的属性映射。
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaFunction">
      <summary>
              表示上下文方法和数据库函数之间的映射。
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaModel">
      <summary>
              一种抽象，表示数据库和域对象之间的映射。
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaParameter">
      <summary>
              表示方法参数和数据库函数参数之间的映射。
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaTable">
      <summary>
              表示数据库表或视图的抽象。
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaType">
      <summary>
              表示对数据库表的列的域对象类型的映射。
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.ParameterAttribute">
      <summary>
              启用规范映射存储的过程方法参数的详细信息。
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.ProviderAttribute">
      <summary>
              指定要使用的数据库提供程序。
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.ResultTypeAttribute">
      <summary>
              用于指定每种类型的结果;对于具有不同结果类型的函数。
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.TableAttribute">
      <summary>
              将类指定为与数据库表关联的实体类。
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.UpdateCheck">
      <summary>
              指定针对并发冲突对测试对象的时间。
            </summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.UpdateCheck.Always">
      <summary>
              请始终检查。
               这是默认值，除非 <see cref="P:System.Data.Linq.Mapping.ColumnAttribute.IsVersion" /> 是 <see langword="true" /> 成员。
            </summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.UpdateCheck.Never">
      <summary>
              从不检查。
            </summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.UpdateCheck.WhenChanged">
      <summary>
              仅当该对象已更改时检查。
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.XmlMappingSource">
      <summary>
              表示使用外部 XML 映射文件来创建模型的映射源。
            </summary>
    </member>
    <member name="T:System.Data.Linq.MemberChangeConflict">
      <summary>
              表示在其中尝试进行更新失败，因为自客户端上次读取它们以来已更新成员值的情况。
            </summary>
    </member>
    <member name="T:System.Data.Linq.ModifiedMemberInfo">
      <summary>
              保留值的成员以修改 LINQ to SQL 应用程序。
            </summary>
    </member>
    <member name="T:System.Data.Linq.ObjectChangeConflict">
      <summary>
              表示试图更新一个或多个开放式并发冲突。
            </summary>
    </member>
    <member name="T:System.Data.Linq.RefreshMode">
      <summary>
              定义如何 <see cref="Overload:System.Data.Linq.DataContext.Refresh" /> 方法处理开放式并发冲突。
            </summary>
    </member>
    <member name="F:System.Data.Linq.RefreshMode.KeepCurrentValues">
      <summary>
              强制 <see cref="Overload:System.Data.Linq.DataContext.Refresh" /> 从数据库中检索方法，以替换原始值的值。
               不修改任何当前值。
            </summary>
    </member>
    <member name="F:System.Data.Linq.RefreshMode.KeepChanges">
      <summary>
              强制 <see cref="Overload:System.Data.Linq.DataContext.Refresh" /> 方法来保留当前值已更改，但其他值更新与数据库的值。
            </summary>
    </member>
    <member name="F:System.Data.Linq.RefreshMode.OverwriteCurrentValues">
      <summary>
              强制 <see cref="Overload:System.Data.Linq.DataContext.Refresh" /> 方法重写所有的当前值与数据库中的值。
            </summary>
    </member>
    <member name="T:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1">
      <summary>
              定义用于动态具体化对象的方法。
            </summary>
      <typeparam name="TDataReader">
                数据读取器的类型。
              </typeparam>
    </member>
    <member name="T:System.Data.Linq.SqlClient.Sql2000Provider">
      <summary>
              包含要连接到并与之通信的功能 SQL Server 2000。
            </summary>
    </member>
    <member name="T:System.Data.Linq.SqlClient.Sql2005Provider">
      <summary>
              包含要连接到并与之通信的功能 SQL Server 2005。
            </summary>
    </member>
    <member name="T:System.Data.Linq.SqlClient.Sql2008Provider">
      <summary>
              包含要连接到并与之通信的功能 SQL Server 2008。  </summary>
    </member>
    <member name="T:System.Data.Linq.SqlClient.SqlHelpers">
      <summary>
              提供用于匹配字符串模式的操作的帮助器方法。
            </summary>
    </member>
    <member name="T:System.Data.Linq.SqlClient.SqlMethods">
      <summary>
              提供一些方法，对应于 SQL Server 函数。
               中的方法 <see cref="T:System.Data.Linq.SqlClient.SqlMethods" /> 类并非仅支持在 LINQ to SQL 查询。
            </summary>
    </member>
    <member name="T:System.Data.Linq.SqlClient.SqlProvider">
      <summary>
              包含要连接到并与之通信的功能 SQL Server。
            </summary>
    </member>
    <member name="T:System.Data.Linq.Table`1">
      <summary>
              表示基础数据库中的特定类型的表。
            </summary>
      <typeparam name="TEntity">
                表中数据的类型。
              </typeparam>
    </member>
  </members>
</doc>