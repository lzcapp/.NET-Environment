<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.IdentityModel</name>
  </assembly>
  <members>
    <member name="F:System.IdentityModel.Configuration.IdentityConfiguration.DefaultCertificateValidationMode">
      <summary>
              默认 X.509 证书验证模式下， <see cref="F:System.ServiceModel.Security.X509CertificateValidationMode.PeerOrChainTrust" />。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Configuration.IdentityConfiguration.DefaultIssuerNameRegistryType">
      <summary>
              默认颁发者名称注册表类型; <see cref="T:System.Type" /> 的 <see cref="T:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry" /> 类。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Configuration.IdentityConfiguration.DefaultMaxClockSkew">
      <summary>
              默认最大时钟偏差;5 分钟。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Configuration.IdentityConfiguration.DefaultRevocationMode">
      <summary>
              默认 X.509 吊销模式; <see cref="F:System.Security.Cryptography.X509Certificates.X509RevocationMode.Online" />.
            </summary>
    </member>
    <member name="F:System.IdentityModel.Configuration.IdentityConfiguration.DefaultServiceName">
      <summary>
              默认的服务名称;一个空字符串。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Configuration.IdentityConfiguration.DefaultTrustedStoreLocation">
      <summary>
              证书; 因此，默认的受信任存储区位置 <see cref="F:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine" />.
            </summary>
    </member>
    <member name="F:System.IdentityModel.Configuration.SystemIdentityModelSection.SectionName">
      <summary>
              配置部分定义通过 Windows Identity Foundation (WIF); 的名称system.identityModel。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Metadata.MetadataSerializer.LanguageAttribute">
      <summary>
              一个字符串常量，它定义了语言特性，"xml: lang"。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Metadata.MetadataSerializer.LanguageLocalName">
      <summary>
              一个字符串常量，它定义的本地语言名称，"lang"。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Metadata.MetadataSerializer.LanguageNamespaceUri">
      <summary>
              一个字符串常量，它定义语言命名空间 URI"http://www.w3.org/XML/1998/namespace"。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Metadata.MetadataSerializer.LanguagePrefix">
      <summary>
              一个字符串常量，它定义了语言前缀，"xml"。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Protocols.WSTrust.KeyTypes.Asymmetric">
      <summary>
              一个 URI，表示的非对称密钥的类型;http://schemas.System.com/idfx/keytype/asymmetric。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Protocols.WSTrust.KeyTypes.Bearer">
      <summary>
              一个 URI，表示所持有者的密钥类型;http://schemas.System.com/idfx/keytype/bearer。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Protocols.WSTrust.KeyTypes.Symmetric">
      <summary>
              一个 URI，表示对称的密钥类型;http://schemas.System.com/idfx/keytype/symmetric。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Protocols.WSTrust.RequestTypes.Cancel">
      <summary>
              一个字符串常量，它表示 WS 信任取消请求的协议不可知 URIhttp://schemas.System.com/idfx/requesttype/cancel。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Protocols.WSTrust.RequestTypes.GetMetadata">
      <summary>
              一个字符串常量，它表示 WS 信任 GetMetadata 请求; 的协议不可知 URIhttp://schemas.System.com/idfx/requesttype/getMetadata。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Protocols.WSTrust.RequestTypes.Issue">
      <summary>
              一个字符串常量，它表示 WS 信任问题请求的协议不可知 URIhttp://schemas.System.com/idfx/requesttype/issue。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Protocols.WSTrust.RequestTypes.IssueCard">
      <summary>
              一个字符串常量，它表示一个协议不可知的 WS 信任 IssueCard 请求;http://schemas.System.com/idfx/requesttype/issueCard。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Protocols.WSTrust.RequestTypes.Renew">
      <summary>
              一个字符串常量，它表示 WS 信任续订请求的协议不可知 URIhttp://schemas.System.com/idfx/requesttype/renew。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Protocols.WSTrust.RequestTypes.Validate">
      <summary>
              一个字符串常量，它表示 WS 信任验证的请求; 的协议不可知 URIhttp://schemas.System.com/idfx/requesttype/validate。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.HardwareToken">
      <summary>
              使用硬件令牌中，身份验证的 http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/hardwaretoken。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.Kerberos">
      <summary>
              使用 Kerberos 协议身份验证的 http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/kerberos。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.Namespace">
      <summary>
              对于众所周知的身份验证方法中，命名空间 http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.Password">
      <summary>
              使用密码身份验证的 http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/password。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.Pgp">
      <summary>
              通过使用密钥进行身份验证信任的 PGP web 身份验证 http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/pgp。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.SecureRemotePassword">
      <summary>
              通过使用安全远程密码协议的身份验证 http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/secureremotepassword。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.Signature">
      <summary>
              使用 XML 数字签名，身份验证的 http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/signature。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.Smartcard">
      <summary>
              使用智能卡身份验证的 http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/smartcard。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.SmartcardPki">
      <summary>
              使用智能卡的 PKI，身份验证的 http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/smartcardpki。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.Spki">
      <summary>
              对密钥使用 SPKI PKI 身份验证的身份验证 http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/spki。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.TlsClient">
      <summary>
              通过使用基于证书的客户端身份验证，使用 SSL 或 TLS 协议的身份验证 http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/tlsclient。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.Unspecified">
      <summary>
              使用未指定的方法，身份验证的 http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/unspecified。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.Windows">
      <summary>
              Windows 身份验证、 http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/windows。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.X509">
      <summary>
              对密钥使用 X.509 PKI 身份验证的身份验证 http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/x509。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.AuthenticationMethods.Xkms">
      <summary>
              身份验证，对密钥进行身份验证使用 XKMS 信任服务，http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/xkms。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.ComputedKeyAlgorithms.Psha1">
      <summary>
              P SHA1 哈希算法; URIhttp://schemas.microsoft.com/idfx/computedkeyalgorithm/psha1。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.IssuerTokenResolver.DefaultStoreLocation">
      <summary>
              为解决 X.509 证书的默认存储位置。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.IssuerTokenResolver.DefaultStoreName">
      <summary>
              默认解决 X.509 证书的存储。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement.EmptyResource">
      <summary>
              获取空的 URI 引用。
               可能使用的引用来设置 <see cref="P:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement.Resource" /> 属性。
               使用时，它指定当前文档的起始点。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.TokenProfile11ValueType">
      <summary>
              SAML 2.0 断言 Id，由 OASIS Web 服务安全 SAML 令牌配置文件 1.1 的密钥标识符的值类型。
               这是一个 URI。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SamlConstants.Prefix">
      <summary>
              SAML 命名空间前缀。
               此字段为常数。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SamlSecurityTokenHandler.Assertion">
      <summary>
              urn: oasis︰ 名称︰ tc: saml: 1.0 assertion
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SamlSecurityTokenHandler.BearerConfirmationMethod">
      <summary>
              urn: oasis︰ 名称︰ tc: SAML:1.0:cm:bearer
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SamlSecurityTokenHandler.Namespace">
      <summary>
              urn: oasis︰ 名称︰ tc: SAML:1.0
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SamlSecurityTokenHandler.UnspecifiedAuthenticationMethod">
      <summary>
              urn:oasis:names:tc:SAML:1.0:am:unspecified
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption">
      <summary>
              指定指向用于加密 XML 的 128 位 AES 加密算法的 URI。
               此字段为常数。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap">
      <summary>
              指定指向用于加密和解密对称密钥 （密钥换行） 的 128 位 AES 加密算法的 URI。
               此字段为常数。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption">
      <summary>
              指定指向用于加密 XML 的 192 位 AES 加密算法的 URI。
               此字段为常数。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap">
      <summary>
              指定指向用于加密和解密对称密钥 （密钥换行） 的 192 位 AES 加密算法的 URI。
               此字段为常数。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption">
      <summary>
              指定一个 URI，该 URI 指向用于加密 XML 的 256 位 AES 加密算法。
               此字段为常数。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap">
      <summary>
              指定一个 URI，该 URI 指向用于加密和解密对称密钥的 256 位 AES 加密算法 (Key Wrap)。
               此字段为常数。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.DesEncryption">
      <summary>
              指定一个 URI，该 URI 指向用于加密 XML 的 DES 加密算法。
               此字段为常数。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.DsaSha1Signature">
      <summary>
              指定一个 URI，该 URI 指向用于对 XML 进行数字签名的 DSA 加密算法。
               此字段为常数。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.ExclusiveC14n">
      <summary>
              表示 XML 专用无注释规范化算法。
               此字段为常数。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.ExclusiveC14nWithComments">
      <summary>
              表示 XML 专用有注释规范化算法。
               此字段为常数。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature">
      <summary>
              指定一个 URI，该 URI 指向用于对 XML 进行数字签名的 HMAC 加密算法。
               此字段为常数。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha256Signature">
      <summary>
              指定一个 URI，该 URI 指向用于对 XML 进行数字签名的 256 位 HMAC 加密算法。
               此字段为常数。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation">
      <summary>
              表示 P-SHA1 密钥生成算法。
               此字段为常数。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivationDec2005">
      <summary>
              表示 P-SHA1 密钥生成算法的 2007 年 12 月版本。
               此字段为常数。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.Ripemd160Digest">
      <summary>
              指定一个 URI，该 URI 指向 RIPEMD-160 加密摘要算法。
               此字段为常数。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaOaepKeyWrap">
      <summary>
              指定一个 URI，该 URI 指向用于加密和解密非对称密钥的 RSAES-OAEP-ENCRYPT 加密算法 (Key Wrap)。
               此字段为常数。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature">
      <summary>
              指定一个 URI，该 URI 指向用于对 XML 进行数字签名的 RSA-SHA1 加密算法。
               此字段为常数。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature">
      <summary>
              指定一个 URI，该 URI 指向用于对 XML 进行数字签名的 RSA-SHA256 加密算法。
               此字段为常数。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaV15KeyWrap">
      <summary>
              指定一个 URI，该 URI 指向用于加密和解密非对称密钥的 RSAES-PKCS1-v1_5 加密算法 (Key Wrap)。
               此字段为常数。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.Sha1Digest">
      <summary>
              指定指向 160 位 sha-1 摘要算法的 URI。
               此字段为常数。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.Sha256Digest">
      <summary>
              指定指向 256 位 sha-256 的摘要算法的 URI。
               此字段为常数。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.Sha512Digest">
      <summary>
              指定一个 URI，该 URI 指向 512 位 SHA-512 摘要算法。
               此字段为常数。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.StrTransform">
      <summary>
              表示安全令牌的引用的转换 （STR 转换） 算法。
               此字段为常数。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.TlsSspiKeyWrap">
      <summary>
              指定一个 URI，该 URI 指向用于加密和解密对称密钥的传输层安全 (TLS) 算法 (Key Wrap)。
               此字段为常数。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption">
      <summary>
              指定一个 URI，该 URI 指向用于加密 XML 的三重 DES 加密算法。
               此字段为常数。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap">
      <summary>
              指定一个 URI，该 URI 指向用于加密和解密对称密钥的三重 DES 加密算法 (Key Wrap)。
               此字段为常数。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityAlgorithms.WindowsSspiKeyWrap">
      <summary>
              指定一个 URI，该 URI 指向用于加密和解密 Kerberos 票证会话密钥的 GSS-API 加密算法 (Key Wrap)。
               此字段为常数。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.Usage.ActAs">
      <summary>
              用于引用 ActAs 元素处理的处理程序的集合。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.Usage.Default">
      <summary>
              用于引用处理程序的默认集合。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.Usage.OnBehalfOf">
      <summary>
              用于引用的处理程序通过使用 OnBehalfOf 元素处理的集合。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.DefaultCertificateValidationMode">
      <summary>
              指定默认 X.509 证书验证模式。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.DefaultCertificateValidator">
      <summary>
              指定默认 X.509 证书验证程序实例。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.DefaultDetectReplayedTokens">
      <summary>
              指定一个值，确定是否检测重播的令牌; <see langword="false" />, ，不会检测重播的令牌。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.DefaultIssuerNameRegistry">
      <summary>
              指定的默认颁发者名称注册表实例;基于配置的颁发者名称注册表的实例。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.DefaultIssuerTokenResolver">
      <summary>
              指定默认颁发者令牌解析程序实例。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.DefaultMaxClockSkew">
      <summary>
              指定默认最大时钟偏差。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.DefaultRevocationMode">
      <summary>
              指定默认 X.509 证书吊销模式。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.DefaultSaveBootstrapContext">
      <summary>
              指定是否将保存启动令牌; <see langword="false" />, 、 引导令牌不会保存。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.DefaultTokenReplayCacheExpirationPeriod">
      <summary>
              指定默认的令牌重放缓存过期时间。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.DefaultTrustedStoreLocation">
      <summary>
              指定默认 X.509 受信任的证书存储区位置。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultCookieTransforms">
      <summary>
              一个只读列出的默认转换应用于 cookie 的集合 <see cref="T:System.IdentityModel.DeflateCookieTransform" /> 和 <see cref="T:System.IdentityModel.ProtectedDataCookieTransform" />。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime">
      <summary>
              一个常量，它指定 cookie 的默认生存期十个小时。
            </summary>
    </member>
    <member name="F:System.Security.Claims.AuthenticationTypes.Basic">
      <summary>
              基本身份验证。
            </summary>
    </member>
    <member name="F:System.Security.Claims.AuthenticationTypes.Federation">
      <summary>
              联合身份验证。
            </summary>
    </member>
    <member name="F:System.Security.Claims.AuthenticationTypes.Kerberos">
      <summary>
              Kerberos 身份验证。
            </summary>
    </member>
    <member name="F:System.Security.Claims.AuthenticationTypes.Negotiate">
      <summary>
              协商的身份验证。
            </summary>
    </member>
    <member name="F:System.Security.Claims.AuthenticationTypes.Password">
      <summary>
              用户名和密码 authenticiation。
            </summary>
    </member>
    <member name="F:System.Security.Claims.AuthenticationTypes.Signature">
      <summary>
              使用数字签名的身份验证。
            </summary>
    </member>
    <member name="F:System.Security.Claims.AuthenticationTypes.Windows">
      <summary>
              Windows 身份验证。
            </summary>
    </member>
    <member name="F:System.Security.Claims.AuthenticationTypes.X509">
      <summary>
              使用 X.509 证书的身份验证。
            </summary>
    </member>
    <member name="F:System.Security.Claims.ClaimProperties.Namespace">
      <summary>
              声明属性的命名空间。
            </summary>
    </member>
    <member name="F:System.Security.Claims.ClaimProperties.SamlAttributeDisplayName">
      <summary>
              SAML 显示名称属性。
            </summary>
    </member>
    <member name="F:System.Security.Claims.ClaimProperties.SamlAttributeNameFormat">
      <summary>
              SAML 名称格式属性。
            </summary>
    </member>
    <member name="F:System.Security.Claims.ClaimProperties.SamlNameIdentifierFormat">
      <summary>
              SAML 名称标识符格式。
            </summary>
    </member>
    <member name="F:System.Security.Claims.ClaimProperties.SamlNameIdentifierNameQualifier">
      <summary>
              一个常量，它定义了一个键 saml <see langword="NameQualifier" /> SAML 属性 <see langword="&lt;NameID&gt;" /> 元素。
              <see langword="NameQualifier" /> 属性指定的安全或管理域的限定名称。
            </summary>
    </member>
    <member name="F:System.Security.Claims.ClaimProperties.SamlNameIdentifierSPNameQualifier">
      <summary>
              一个常量，用于定义 SAML <see langword="&lt;NameID&gt; " /> 元素 <see langword="SPNameQualifier" /> 特性的键。
              <see langword="SPNameQualifier" /> 特性指定用于进一步限定名称的服务提供程序的名称或提供程序的附属关系。
            </summary>
    </member>
    <member name="F:System.Security.Claims.ClaimProperties.SamlNameIdentifierSPProvidedId">
      <summary>
              一个常量，用于定义 SAML <see langword="&lt;NameID&gt;" /> 元素 <see langword="SPProvidedId" /> 特性的键。
               如果不同于主名称标识符，<see langword="SPProvidedId" /> 特性指定由服务提供程序或实体提供程序的从属建立的名称标识符。
            </summary>
    </member>
    <member name="M:System.IdentityModel.AsynchronousOperationException.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.AsynchronousOperationException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.AsynchronousOperationException.#ctor(System.Exception)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.AsynchronousOperationException" /> 使用系统提供的错误消息和对导致此异常的内部异常的引用。
            </summary>
      <param name="innerException">
                <see cref="T:System.Exception" /> 导致当前异常。
                 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。
              </param>
    </member>
    <member name="M:System.IdentityModel.AsynchronousOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              用序列化数据初始化 <see cref="T:System.IdentityModel.AsynchronousOperationException" /> 类的新实例。
            </summary>
      <param name="info">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，其中包含序列化的对象数据。
              </param>
      <param name="context">
                一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，其中包含有关源或目标的上下文信息。
              </param>
    </member>
    <member name="M:System.IdentityModel.AsynchronousOperationException.#ctor(System.String)">
      <summary>
              用指定的错误消息初始化 <see cref="T:System.IdentityModel.AsynchronousOperationException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
    </member>
    <member name="M:System.IdentityModel.AsynchronousOperationException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IdentityModel.AsynchronousOperationException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="innerException">
                <see cref="T:System.Exception" /> 导致当前异常。
                 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。
              </param>
    </member>
    <member name="M:System.IdentityModel.AsyncResult.#ctor">
      <summary>
              从在派生类的实例进行初始化的构造函数调用 <see cref="T:System.IdentityModel.AsyncResult" /> 没有回调委托或状态对象的类。
            </summary>
    </member>
    <member name="M:System.IdentityModel.AsyncResult.#ctor(System.AsyncCallback,System.Object)">
      <summary>
              从在派生类的实例进行初始化的构造函数调用 <see cref="T:System.IdentityModel.AsyncResult" /> 具有回调委托和状态对象的类。
            </summary>
      <param name="callback">
                异步操作完成时调用的方法。
              </param>
      <param name="state">
                一个用户定义的对象，限定或包含有关异步操作的信息。
              </param>
    </member>
    <member name="M:System.IdentityModel.AsyncResult.#ctor(System.Object)">
      <summary>
              从在派生类的实例进行初始化的构造函数调用 <see cref="T:System.IdentityModel.AsyncResult" /> 没有回调委托，但确实有一个状态对象的类。
            </summary>
      <param name="state">
                一个用户定义的对象，限定或包含有关异步操作的信息。
              </param>
    </member>
    <member name="M:System.IdentityModel.AsyncResult.Complete(System.Boolean)">
      <summary>
              在异步操作完成，且未遇到异常，则调用此版本的完成。
               它将更新操作的状态，并通知回调。
            </summary>
      <param name="completedSynchronously">
                <see langword="true" /> 如果异步操作完成同步进行;否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.IdentityModel.AsyncResult.Complete(System.Boolean,System.Exception)">
      <summary>
              如果引发处理过程中发生异常，则调用此版本的完成。
               除了通知回调，它会捕获的异常并存储在调用期间引发 <see cref="M:System.IdentityModel.AsyncResult.End(System.IAsyncResult)" /> 方法。
            </summary>
      <param name="completedSynchronously">
                <see langword="true" /> 如果异步操作完成同步进行;否则为 <see langword="false" />。
              </param>
      <param name="exception">
                在异步操作的处理期间发生的异常。
              </param>
    </member>
    <member name="M:System.IdentityModel.AsyncResult.Dispose">
      <summary>
              释放 <see cref="T:System.IdentityModel.AsyncResult" /> 类的当前实例使用的资源。
            </summary>
    </member>
    <member name="M:System.IdentityModel.AsyncResult.Dispose(System.Boolean)">
      <summary>
              由 <see cref="M:System.IdentityModel.AsyncResult.Dispose" /> 和 <see cref="M:System.IdentityModel.AsyncResult.Finalize" /> 方法调用，以释放 <see cref="T:System.IdentityModel.AsyncResult" /> 类的当前实例所占用的托管资源和非托管资源。
            </summary>
      <param name="isExplicitDispose">
                若要释放托管资源和非托管的资源，则为 <see langword="true" />；若要仅释放非托管资源，则为 <see langword="false" />。
                <see langword="true" /> 指示这是对 Dispose 的显式调用。
              </param>
    </member>
    <member name="M:System.IdentityModel.AsyncResult.End(System.IAsyncResult)">
      <summary>
              调用此方法时 End 函数的异步操作已完成。
               它可以确保异步操作已完成，并且执行一些常见的验证。
            </summary>
      <param name="result">
                <see cref="T:System.IAsyncResult" /> 表示异步操作的状态。
              </param>
    </member>
    <member name="M:System.IdentityModel.AsyncResult.Finalize">
      <summary>
              允许 <see cref="T:System.IdentityModel.AsyncResult" /> 对象尝试释放资源并在垃圾回收回收之前执行其他清理操作。
            </summary>
    </member>
    <member name="M:System.IdentityModel.BadRequestException.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.BadRequestException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.BadRequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              用序列化数据初始化 <see cref="T:System.IdentityModel.BadRequestException" /> 类的新实例。
            </summary>
      <param name="info">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，其中包含序列化的对象数据。
              </param>
      <param name="context">
                一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，其中包含有关源或目标的上下文信息。
              </param>
    </member>
    <member name="M:System.IdentityModel.BadRequestException.#ctor(System.String)">
      <summary>
              用指定的错误消息初始化 <see cref="T:System.IdentityModel.BadRequestException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
    </member>
    <member name="M:System.IdentityModel.BadRequestException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IdentityModel.BadRequestException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="innerException">
                <see cref="T:System.Exception" /> 导致当前异常。
                 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。
              </param>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.#ctor(System.String,System.Object,System.String)">
      <summary>
              使用指定的类型、资源和权限初始化 <see cref="T:System.IdentityModel.Claims.Claim" /> 类的新实例。
            </summary>
      <param name="claimType">
                表示声明类型的统一资源标识符 (URI)。
              </param>
      <param name="resource">
                与新声明关联的对象。
              </param>
      <param name="right">
                与声明关联的权限的 URI。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="claimType" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="right" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="claimType" /> 的长度为零。
                
                  - 或 -
                
                  <paramref name="right" /> 的长度为零。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.CreateDenyOnlyWindowsSidClaim(System.Security.Principal.SecurityIdentifier)">
      <summary>
              创建一个表示指定的 deny-only 安全标识符 (SID) 的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。
            </summary>
      <param name="sid">
                一个表示 deny-only SID 的 <see cref="T:System.Security.Principal.SecurityIdentifier" />。
              </param>
      <returns>
              一个表示 <see cref="T:System.IdentityModel.Claims.Claim" /> 参数中指定的 SID 的 <paramref name="sid" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="sid" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.CreateDnsClaim(System.String)">
      <summary>
              创建一个表示指定域名系统 (DNS) 名称的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。
            </summary>
      <param name="dns">
                与声明关联的实体的 DNS 名称。
                 此参数不能为 <see langword="null" />。
                 如果此参数为 <see langword="null" />，此方法将引发 <see cref="T:System.ArgumentNullException" /> 异常。
              </param>
      <returns>
              此方法创建的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="dns" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.CreateHashClaim(System.Byte[])">
      <summary>
              创建一个表示指定哈希值的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。
            </summary>
      <param name="hash">
                指定哈希值的字节值数组。
                 此参数不能为 <see langword="null" />。
                 如果此参数为 <see langword="null" />，此方法将引发 <see cref="T:System.ArgumentNullException" /> 异常。
              </param>
      <returns>
              此方法创建的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="hash" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.CreateMailAddressClaim(System.Net.Mail.MailAddress)">
      <summary>
              创建一个表示指定电子邮件地址的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。
            </summary>
      <param name="mailAddress">
                一个指定此声明所表示的电子邮件地址的 <see cref="T:System.Net.Mail.MailAddress" />。
                 此参数不能为 <see langword="null" />。
                 如果此参数为 <see langword="null" />，此方法将引发 <see cref="T:System.ArgumentNullException" /> 异常。
              </param>
      <returns>
              此方法创建的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="mailAddress" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.CreateNameClaim(System.String)">
      <summary>
              创建一个表示指定名称的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。
            </summary>
      <param name="name">
                与声明关联的实体的名称。
                 此参数不能为 <see langword="null" />。
                 如果此参数为 <see langword="null" />，此方法将引发 <see cref="T:System.ArgumentNullException" /> 异常。
              </param>
      <returns>
              此方法创建的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="name" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.CreateRsaClaim(System.Security.Cryptography.RSA)">
      <summary>
              创建一个表示指定 RSA 密钥的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。
            </summary>
      <param name="rsa">
                一个表示 RSA 加密密钥的 <see cref="T:System.Security.Cryptography.RSA" /> 对象。
                 此参数不能为 <see langword="null" />。
                 如果此参数为 <see langword="null" />，此方法将引发 <see cref="T:System.ArgumentNullException" /> 异常。
              </param>
      <returns>
              此方法创建的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="rsa" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.CreateSpnClaim(System.String)">
      <summary>
              创建一个表示指定服务主要名称 (SPN) 的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。
            </summary>
      <param name="spn">
                与此声明关联的实体的 SPN。
                 此参数不能为 <see langword="null" />。
                 如果此参数为 <see langword="null" />，此方法将引发 <see cref="T:System.ArgumentNullException" /> 异常。
              </param>
      <returns>
              此方法创建的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="spn" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.CreateThumbprintClaim(System.Byte[])">
      <summary>
              创建一个表示指定指纹的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。
            </summary>
      <param name="thumbprint">
                一个字节值数组，指定与声明关联的实体的指纹。
                 此参数不能为 <see langword="null" />。
                 如果此参数为 <see langword="null" />，此方法将引发 <see cref="T:System.ArgumentNullException" /> 异常。
              </param>
      <returns>
              此方法创建的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="thumbprint" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.CreateUpnClaim(System.String)">
      <summary>
              创建一个表示指定通用主要名称 (UPN) 的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。
            </summary>
      <param name="upn">
                与此声明关联的实体的 UPN。
                 此参数不能为 <see langword="null" />。
                 如果此参数为 <see langword="null" />，此方法将引发 <see cref="T:System.ArgumentNullException" /> 异常。
              </param>
      <returns>
              此方法创建的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="upn" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.CreateUriClaim(System.Uri)">
      <summary>
              创建一个表示指定统一资源定位符 (URL) 的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。
            </summary>
      <param name="uri">
                一个表示与此声明关联的实体的 URL 的 <see cref="T:System.Uri" />。
                 此参数不能为 <see langword="null" />。
                 如果此参数为 <see langword="null" />，此方法将引发 <see cref="T:System.ArgumentNullException" /> 异常。
              </param>
      <returns>
              此方法创建的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="uri" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.CreateWindowsSidClaim(System.Security.Principal.SecurityIdentifier)">
      <summary>
              创建一个表示指定安全标识符 (SID) 的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。
            </summary>
      <param name="sid">
                一个表示 SID 的 <see cref="T:System.Security.Principal.SecurityIdentifier" />。
              </param>
      <returns>
              一个表示 <see cref="T:System.IdentityModel.Claims.Claim" /> 参数中指定的 SID 的 <paramref name="sid" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="sid" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.CreateX500DistinguishedNameClaim(System.Security.Cryptography.X509Certificates.X500DistinguishedName)">
      <summary>
              创建一个表示指定 X.500 可分辨名称的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。
            </summary>
      <param name="x500DistinguishedName">
                一个指定与声明关联的实体的 X.500 可分辨名称的 <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName" />。
                 此参数不能为 <see langword="null" />。
                 如果此参数为 <see langword="null" />，此方法将引发 <see cref="T:System.ArgumentNullException" /> 异常。
              </param>
      <returns>
              此方法创建的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="x500DistinguishedName" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.Equals(System.Object)">
      <summary>
              确定指定对象是否表示与当前 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象相同的声明。
            </summary>
      <param name="obj">
                将与当前 <see cref="T:System.IdentityModel.Claims.Claim" /> 进行比较的对象。
              </param>
      <returns>
              如果 <see langword="true" /> 表示与当前 <paramref name="obj" /> 相同的声明，则为 <see cref="T:System.IdentityModel.Claims.Claim" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.GetHashCode">
      <summary>
              返回当前声明的哈希代码。
            </summary>
      <returns>
              声明的哈希代码。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Claims.Claim.ToString">
      <summary>
              返回此 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象的字符串表示形式。
            </summary>
      <returns>
              此 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Claims.ClaimSet.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Claims.ClaimSet.ContainsClaim(System.IdentityModel.Claims.Claim)">
      <summary>
              确定 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 是否包含指定的 <see cref="T:System.IdentityModel.Claims.Claim" />。
            </summary>
      <param name="claim">
                要搜索的 <see cref="T:System.IdentityModel.Claims.Claim" />。
              </param>
      <returns>
              如果 <see langword="true" /> 中包含指定的声明，则为 <see cref="T:System.IdentityModel.Claims.ClaimSet" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Claims.ClaimSet.ContainsClaim(System.IdentityModel.Claims.Claim,System.Collections.Generic.IEqualityComparer{System.IdentityModel.Claims.Claim})">
      <summary>
              通过使用指定的 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 对象来确定 <see cref="T:System.IdentityModel.Claims.Claim" /> 是否包含指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。
            </summary>
      <param name="claim">
                要搜索的 <see cref="T:System.IdentityModel.Claims.Claim" />。
              </param>
      <param name="comparer">
                用于进行比较的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对象。
              </param>
      <returns>
              如果 <see langword="true" /> 中包含指定的声明，则为 <see cref="T:System.IdentityModel.Claims.ClaimSet" />；否则为 <see langword="false." />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Claims.ClaimSet.FindClaims(System.String,System.String)">
      <summary>
              在派生类中重写时，搜索 <see cref="T:System.IdentityModel.Claims.Claim" /> 中与指定的声明类型和权限匹配的 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 对象。
            </summary>
      <param name="claimType">
                声明类型的统一资源标识符 (URI)。
                 有几个声明类型是以 <see cref="T:System.IdentityModel.Claims.ClaimTypes" /> 类的静态属性的形式提供的。
              </param>
      <param name="right">
                与新声明关联的权限的 URI。
                 有几个权限是以 <see cref="T:System.IdentityModel.Claims.Rights" /> 类的静态属性的形式提供的。
              </param>
      <returns>
              类型为 <see cref="T:System.IdentityModel.Claims.Claim" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，可用于枚举符合指定条件的声明。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Claims.ClaimSet.GetEnumerator">
      <summary>
              在派生类中重写时，获取一个 <see cref="T:System.Collections.Generic.IEnumerator`1" />，它可用于枚举 <see cref="T:System.IdentityModel.Claims.Claim" /> 中的 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 对象。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.Generic.IEnumerator`1" />，可用于枚举 <see cref="T:System.IdentityModel.Claims.Claim" /> 中的 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 对象。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Claims.ClaimSet.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              获取一个 <see cref="T:System.Collections.Generic.IEnumerator`1" />，它可用于枚举 <see cref="T:System.IdentityModel.Claims.Claim" /> 中的 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 对象。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.Generic.IEnumerator`1" />，可用于枚举 <see cref="T:System.IdentityModel.Claims.Claim" /> 中的 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 对象。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Claims.DefaultClaimSet.#ctor(System.Collections.Generic.IList{System.IdentityModel.Claims.Claim})">
      <summary>
              使用指定的声明初始化 <see cref="T:System.IdentityModel.Claims.DefaultClaimSet" /> 类的新实例。
            </summary>
      <param name="claims">
                一个类型为 <see cref="T:System.Collections.Generic.IList`1" /> 的 <see cref="T:System.IdentityModel.Claims.Claim" />，包含要添加到此声明集中的声明。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="claims" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Claims.DefaultClaimSet.#ctor(System.IdentityModel.Claims.Claim[])">
      <summary>
              使用指定的声明初始化 <see cref="T:System.IdentityModel.Claims.DefaultClaimSet" /> 类的新实例。
            </summary>
      <param name="claims">
                一个 <see cref="T:System.IdentityModel.Claims.Claim" /> 数组，表示要添加到此声明集中的声明。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="claims" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Claims.DefaultClaimSet.#ctor(System.IdentityModel.Claims.ClaimSet,System.Collections.Generic.IList{System.IdentityModel.Claims.Claim})">
      <summary>
              使用指定的声明初始化 <see cref="T:System.IdentityModel.Claims.DefaultClaimSet" /> 类的新实例。
            </summary>
      <param name="issuer">
                一个 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 对象，指定在 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 参数中指定的 <paramref name="claims" /> 的颁发者。
              </param>
      <param name="claims">
                一个类型为 <see cref="T:System.Collections.Generic.IList`1" /> 的 <see cref="T:System.IdentityModel.Claims.Claim" />，包含要添加到此声明集中的声明。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="claims" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="issuer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Claims.DefaultClaimSet.#ctor(System.IdentityModel.Claims.ClaimSet,System.IdentityModel.Claims.Claim[])">
      <summary>
              使用指定的声明初始化 <see cref="T:System.IdentityModel.Claims.DefaultClaimSet" /> 类的新实例。
            </summary>
      <param name="issuer">
                一个 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 对象，指定在 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 参数中指定的 <paramref name="claims" /> 的颁发者。
              </param>
      <param name="claims">
                一个 <see cref="T:System.IdentityModel.Claims.Claim" /> 数组，表示要添加到此声明集中的声明。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="claims" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="issuer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Claims.DefaultClaimSet.ContainsClaim(System.IdentityModel.Claims.Claim)">
      <summary>
              确定指定的声明是否包含在此声明集中。
            </summary>
      <param name="claim">
                要确定是否存在于此集合中的 <see cref="T:System.IdentityModel.Claims.Claim" />。
              </param>
      <returns>
              如果声明包含在此声明集中，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="claim" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Claims.DefaultClaimSet.FindClaims(System.String,System.String)">
      <summary>
              搜索 <see cref="T:System.IdentityModel.Claims.Claim" /> 中与指定的声明类型和权限匹配的 <see cref="T:System.IdentityModel.Claims.DefaultClaimSet" /> 对象。
            </summary>
      <param name="claimType">
                声明类型的统一资源标识符 (URI)。
                 有几个声明类型是以 <see cref="T:System.IdentityModel.Claims.ClaimTypes" /> 类的静态属性的形式提供的。
              </param>
      <param name="right">
                与新声明关联的权限的 URI。
                 有几个权限是以 <see cref="T:System.IdentityModel.Claims.Rights" /> 类的静态属性的形式提供的。
              </param>
      <returns>
              一个类型为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.IdentityModel.Claims.Claim" />，可用来枚举与指定条件相符的声明。<see langword="." />
            </returns>
    </member>
    <member name="M:System.IdentityModel.Claims.DefaultClaimSet.GetEnumerator">
      <summary>
              获取一个 <see cref="T:System.Collections.Generic.IEnumerator`1" />，它可用于枚举 <see cref="T:System.IdentityModel.Claims.Claim" /> 中的 <see cref="T:System.IdentityModel.Claims.DefaultClaimSet" /> 对象。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.Generic.IEnumerator`1" />，可用于枚举 <see cref="T:System.IdentityModel.Claims.Claim" /> 中的 <see cref="T:System.IdentityModel.Claims.DefaultClaimSet" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Claims.DefaultClaimSet.Initialize(System.IdentityModel.Claims.ClaimSet,System.Collections.Generic.IList{System.IdentityModel.Claims.Claim})">
      <summary>
              使用指定的声明初始化 <see cref="T:System.IdentityModel.Claims.DefaultClaimSet" /> 类的实例。
            </summary>
      <param name="issuer">
                <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 对象，该对象颁发 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 参数中指定的 <paramref name="claims" />。
              </param>
      <param name="claims">
                要包含在此声明集中的一组 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="claims" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="issuer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Claims.DefaultClaimSet.ToString">
      <summary>
              返回此 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 对象。
            </summary>
      <returns>
              此 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 对象。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Claims.WindowsClaimSet.#ctor(System.Security.Principal.WindowsIdentity)">
      <summary>
              使用由 <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" /> 对象指定的 Windows 用户标识初始化 <see cref="T:System.Security.Principal.WindowsIdentity" /> 类的新实例。
            </summary>
      <param name="windowsIdentity">
                一个指定 Windows 标识的 <see cref="T:System.Security.Principal.WindowsIdentity" />。
              </param>
    </member>
    <member name="M:System.IdentityModel.Claims.WindowsClaimSet.#ctor(System.Security.Principal.WindowsIdentity,System.Boolean)">
      <summary>
              使用由 <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" /> 对象指定的 Windows 用户标识初始化 <see cref="T:System.Security.Principal.WindowsIdentity" /> 类的新实例。
            </summary>
      <param name="windowsIdentity">
                一个指定 Windows 标识的 <see cref="T:System.Security.Principal.WindowsIdentity" />。
              </param>
      <param name="includeWindowsGroups">
                如果包含表示此用户所属 Windows 组的声明，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.IdentityModel.Claims.WindowsClaimSet.#ctor(System.Security.Principal.WindowsIdentity,System.Boolean,System.DateTime)">
      <summary>
              使用由 <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" /> 对象指定的 Windows 用户标识初始化 <see cref="T:System.Security.Principal.WindowsIdentity" /> 类的新实例。
            </summary>
      <param name="windowsIdentity">
                一个指定 Windows 标识的 <see cref="T:System.Security.Principal.WindowsIdentity" />。
              </param>
      <param name="includeWindowsGroups">
                如果包含此用户所属的 Windows 组，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
      <param name="expirationTime">
                一个 <see cref="T:System.DateTime" />，指定声明集的过期时间。
              </param>
    </member>
    <member name="M:System.IdentityModel.Claims.WindowsClaimSet.#ctor(System.Security.Principal.WindowsIdentity,System.DateTime)">
      <summary>
              使用由 <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" /> 对象指定的 Windows 用户标识初始化 <see cref="T:System.Security.Principal.WindowsIdentity" /> 类的新实例。
            </summary>
      <param name="windowsIdentity">
                一个指定 Windows 标识的 <see cref="T:System.Security.Principal.WindowsIdentity" />。
              </param>
      <param name="expirationTime">
                一个 <see cref="T:System.DateTime" />，指定声明集的过期时间。
              </param>
    </member>
    <member name="M:System.IdentityModel.Claims.WindowsClaimSet.#ctor(System.Security.Principal.WindowsIdentity,System.String,System.Boolean,System.DateTime)">
      <summary>
              使用由 <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" /> 对象指定的 Windows 用户标识初始化 <see cref="T:System.Security.Principal.WindowsIdentity" /> 类的新实例。
            </summary>
      <param name="windowsIdentity">
                一个指定 Windows 标识的 <see cref="T:System.Security.Principal.WindowsIdentity" />。
              </param>
      <param name="authenticationType">
                Windows 标识的身份验证类型。
              </param>
      <param name="includeWindowsGroups">
                如果包含此用户所属的 Windows 组，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
      <param name="expirationTime">
                一个 <see cref="T:System.DateTime" />，指定声明集的过期时间。
              </param>
    </member>
    <member name="M:System.IdentityModel.Claims.WindowsClaimSet.Dispose">
      <summary>
              释放由 <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" /> 使用的所有资源。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Claims.WindowsClaimSet.FindClaims(System.String,System.String)">
      <summary>
              搜索 <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" /> 中与指定的声明类型和权限匹配的声明。
            </summary>
      <param name="claimType">
                声明类型的统一资源标识符 (URI)。
              </param>
      <param name="right">
                与新声明关联的权限的 URI。
              </param>
      <returns>
              一个<see langword=" System.Collections.Generic.IEnumerable&lt;Claim&gt;" /> 对象，可用于枚举符合指定条件的声明。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Claims.WindowsClaimSet.GetEnumerator">
      <summary>
              获取一个 <see cref="T:System.Collections.Generic.IEnumerator`1" />，可用于枚举 <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" /> 中的 Windows 声明。
            </summary>
      <returns>
              可用于枚举 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 中的 Windows 声明的 <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Claims.WindowsClaimSet.ToString">
      <summary>
              返回此 <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" /> 对象。
            </summary>
      <returns>
              此 <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" /> 对象。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Claims.X509CertificateClaimSet.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
              使用指定的 X.509 证书初始化 <see cref="T:System.IdentityModel.Claims.X509CertificateClaimSet" /> 类的新实例。
            </summary>
      <param name="certificate">
                要添加到声明集中的 X.509 证书。
              </param>
    </member>
    <member name="M:System.IdentityModel.Claims.X509CertificateClaimSet.Dispose">
      <summary>
              释放由 <see cref="T:System.IdentityModel.Claims.X509CertificateClaimSet" /> 使用的所有资源。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Claims.X509CertificateClaimSet.FindClaims(System.String,System.String)">
      <summary>
              搜索 <see cref="T:System.IdentityModel.Claims.X509CertificateClaimSet" /> 中与指定的声明类型和权限匹配的声明。
            </summary>
      <param name="claimType">
                声明类型的统一资源标识符 (URI)。
              </param>
      <param name="right">
                与新声明关联的权限的 URI。
              </param>
      <returns>
              一个<see langword=" System.Collections.Generic.IEnumerable&lt;Claim&gt;" /> 对象，可用于枚举符合指定条件的声明。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Claims.X509CertificateClaimSet.GetEnumerator">
      <summary>
              获取一个 <see cref="T:System.Collections.Generic.IEnumerator`1" />，可用于枚举 <see cref="T:System.IdentityModel.Claims.X509CertificateClaimSet" /> 中的 Windows 声明。
            </summary>
      <returns>
              可用于枚举 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 中的 Windows 声明的 <see cref="T:System.IdentityModel.Claims.X509CertificateClaimSet" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Claims.X509CertificateClaimSet.ToString">
      <summary>
              获取此 <see cref="T:System.IdentityModel.Claims.X509CertificateClaimSet" /> 对象中的 X.509 证书声明数。
            </summary>
      <returns>
              此 <see cref="T:System.IdentityModel.Claims.X509CertificateClaimSet" /> 对象中的 X.509 证书声明数。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Configuration.AudienceUriElement.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Configuration.AudienceUriElement" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.AudienceUriElementCollection.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Configuration.AudienceUriElementCollection" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.ConfigurationElementInterceptor.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Configuration.ConfigurationElementInterceptor" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.ConfigurationElementInterceptor.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
      <summary>
              从配置文件读取 XML。
            </summary>
      <param name="reader">
                用于读取配置文件的 <see cref="T:System.Xml.XmlReader" />。
              </param>
      <param name="serializeCollectionKey">
                如果只序列化集合键属性，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.IdentityModel.Configuration.ConfigurationElementInterceptor.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
      <summary>
              获取一个值，该值指示反序列化过程中是否遇到未知属性。
               始终返回 <see langword="true" />。
            </summary>
      <param name="name">
                无法识别的属性的名称。
              </param>
      <param name="value">
                无法识别的属性的值。
              </param>
      <returns>
              始终返回 <see langword="true" />, ，指示已遇到无法识别的特性。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Configuration.ConfigurationElementInterceptor.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
      <summary>
              获取一个值，该值指示反序列化过程中是否遇到未知元素。
               始终返回 <see langword="true" />。
            </summary>
      <param name="elementName">
                未知子元素的名称。
              </param>
      <param name="reader">
                要使用反序列化的 XML 读取器。
              </param>
      <returns>
              始终返回 <see langword="true" />, ，指示已遇到未识别的元素。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Configuration.ConfigurationElementInterceptor.Reset(System.Configuration.ConfigurationElement)">
      <summary>
              重置 <see cref="T:System.IdentityModel.Configuration.ConfigurationElementInterceptor" /> 对象的内部状态，包括锁和属性集合。
            </summary>
      <param name="parentElement">
                配置元素的父节点。
              </param>
    </member>
    <member name="M:System.IdentityModel.Configuration.CustomTypeElement.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Configuration.CustomTypeElement" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.CustomTypeElement.Resolve``1(System.IdentityModel.Configuration.CustomTypeElement)">
      <summary>
              尝试解析指定的某个对象的自定义类型元素 <see cref="T:System.Type" />。
            </summary>
      <param name="customTypeElement">
                要解决的自定义类型元素。
              </param>
      <typeparam name="T">
                <see cref="T:System.Type" /> 对其进行解析的自定义类型元素。
              </typeparam>
      <returns>
              对象 <see cref="T:System.Type" /><paramref name="T" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Configuration.ICustomIdentityConfiguration.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>
              从 XML 加载自定义配置。
               重写此方法以提供自定义处理的配置元素。
            </summary>
      <param name="nodeList">
                包含自定义配置的 XML 节点。
                 在列表中的每个节点属于类型 <see cref="T:System.Xml.XmlElement" />。
              </param>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfiguration.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Configuration.IdentityConfiguration" /> 类的新实例。
               如果它存在，将从默认配置中，加载设置。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfiguration.#ctor(System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Configuration.IdentityConfiguration" /> 类通过使用一个值，指定是否应从默认配置中加载设置。
            </summary>
      <param name="loadConfig">
                <see langword="true" /> 若要从配置文件，则加载设置否则为 <see langword="false" />。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="loadConfig" /> 是 <see langword="true" />, ，但没有任何 <see langword="&lt;system.identityModel&gt;" /> 配置元素。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfiguration.#ctor(System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Configuration.IdentityConfiguration" /> 类，该类具有指定的服务证书。
               设置会根据需要加载默认配置。
            </summary>
      <param name="loadConfig">
                <see langword="true" /> 若要从配置文件，则加载设置否则为 <see langword="false" />。
              </param>
      <param name="serviceCertificate">
                服务证书。
                 设置 <see cref="P:System.IdentityModel.Configuration.IdentityConfiguration.ServiceCertificate" /> 属性。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="loadConfig" /> 是 <see langword="true" />, ，但没有任何 <see langword="&lt;system.identityModel&gt;" /> 配置元素。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfiguration.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Configuration.IdentityConfiguration" /> 类，该类具有指定的服务证书。
            </summary>
      <param name="serviceCertificate">
                服务证书。
                 设置 <see cref="P:System.IdentityModel.Configuration.IdentityConfiguration.ServiceCertificate" /> 属性。
              </param>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfiguration.#ctor(System.String)">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Configuration.IdentityConfiguration" /> 类的新实例。
               从命名的配置加载设置。
            </summary>
      <param name="identityConfigurationName">
                名称 <see langword="&lt;identityConfiguration&gt;" /> 元素是要加载的设置。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  有没有 <see langword="&lt;system.identityModel&gt;" /> 配置元素。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfiguration.#ctor(System.String,System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Configuration.IdentityConfiguration" /> 类，该类具有指定的服务证书，加载命名的配置。
            </summary>
      <param name="identityConfigurationName">
                名称 <see langword="&lt;service&gt;" /> 从哪种配置元素，则会加载
              </param>
      <param name="serviceCertificate">
                服务证书。
                 设置 <see cref="P:System.IdentityModel.Configuration.IdentityConfiguration.ServiceCertificate" /> 属性。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  有没有 <see langword="&lt;System.IdentityModel&gt;" /> 配置元素
                </exception>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfiguration.Initialize">
      <summary>
              更新属性 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" /> 对象 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollection" /> 中所含对象 <see cref="P:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlerCollectionManager" /> 与对此属性值保持一致 <see cref="T:System.IdentityModel.Configuration.IdentityConfiguration" /> 实例。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  不止一次调用此方法。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfiguration.LoadConfiguration(System.IdentityModel.Configuration.IdentityConfigurationElement)">
      <summary>
              加载的设置 <see cref="T:System.IdentityModel.Configuration.IdentityConfiguration" /> 从应用程序或 Web 配置文件的实例。
            </summary>
      <param name="element">
                <see cref="T:System.IdentityModel.Configuration.IdentityConfigurationElement" /> 从配置文件。
              </param>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfiguration.LoadHandlerConfiguration(System.IdentityModel.Configuration.IdentityConfigurationElement)">
      <summary>
              加载 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" /> 使用下方指定的元素的 <see cref="T:System.IdentityModel.Configuration.IdentityConfigurationElement" />。
            </summary>
      <param name="element">
                <see langword="&lt;identityConfiguration&gt;" /> 要从其中加载设置配置文件中的元素。
              </param>
      <returns>
              <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" /> 加载从配置文件中的元素。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfiguration.LoadHandlerConfiguration(System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration,System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement)">
      <summary>
              加载到相关的配置元素 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollection" />。
            </summary>
      <param name="baseConfiguration">
                基 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" /> 从其继承的默认值。
              </param>
      <param name="element">
                <see cref="T:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement" /> 从配置文件。
              </param>
      <returns>
              <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" /> 从配置文件中的元素加载和 <paramref name="baseConfiguration" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfiguration.LoadHandlers(System.IdentityModel.Configuration.IdentityConfigurationElement)">
      <summary>
              加载 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager" /> 为指定的服务定义。
            </summary>
      <param name="serviceElement">
                <see langword="&lt;identityConfiguration&gt;" /> 元素，用于将此实例配置。
              </param>
      <returns>
              处理程序集管理器。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfigurationElement.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Configuration.IdentityConfigurationElement" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfigurationElementCollection.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Configuration.IdentityConfigurationElementCollection" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityConfigurationElementCollection.GetElement(System.String)">
      <summary>
              检索 <see cref="T:System.IdentityModel.Configuration.IdentityConfigurationElement" /> 具有指定的名称。
            </summary>
      <param name="name">
                要检索的 identityConfiguration 元素的名称。
                 这对应于该元素的值 <see cref="P:System.IdentityModel.Configuration.IdentityConfigurationElement.Name" /> 属性。
              </param>
      <returns>
              <see langword="&lt;identityConfiguration&gt;" /> 具有指定的名称的元素或 <see langword="null" /> 如果不找到任何匹配元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="name" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  默认配置中的 name 参数和一个匹配指定 <see cref="T:System.IdentityModel.Configuration.IdentityConfigurationElement" /> 找不到。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityModelCaches.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Configuration.IdentityModelCaches" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.IdentityModelCachesElement.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Configuration.IdentityModelCachesElement" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.IssuerNameRegistryElement.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Configuration.IssuerNameRegistryElement" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.SecurityTokenHandlerElementCollection.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Configuration.SecurityTokenHandlerElementCollection" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.SecurityTokenHandlerSetElementCollection.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Configuration.SecurityTokenHandlerSetElementCollection" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.#ctor(System.Boolean)">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration" /> 类的新实例。
               （可选） 从当前配置中加载的设置。
            </summary>
      <param name="loadConfig">
                <see langword="true" /> 若要从配置文件，则加载设置否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration" /> 类，该类具有指定的颁发者名称。
            </summary>
      <param name="issuerName">
                颁发者名称中。
                 设置 <see cref="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.TokenIssuerName" /> 属性。
              </param>
    </member>
    <member name="M:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.#ctor(System.String,System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration" /> 类，该类具有指定的颁发者名称。
               （可选） 从当前配置中加载的设置。
            </summary>
      <param name="issuerName">
                颁发者名称中。
                 设置 <see cref="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.TokenIssuerName" /> 属性。
              </param>
      <param name="loadConfig">
                <see langword="true" /> 若要从配置文件，则加载设置否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration" /> 类，该类具有指定的颁发者名称和签名的凭据。
            </summary>
      <param name="issuerName">
                颁发者名称中。
                 设置 <see cref="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.TokenIssuerName" /> 属性。
              </param>
      <param name="signingCredentials">
                STS 签名凭据。
                 设置 <see cref="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.SigningCredentials" /> 属性。
              
                  <see cref="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.SigningCredentials" /> 实现活动的安全令牌服务 (STS) 时，将忽略属性。
                   而是必须将服务证书通过设置 <see cref="P:System.ServiceModel.ServiceHostBase.Credentials" /> 承载您的 STS 服务主机上的属性。
                   为主动 STS 所用的服务主机由 <see cref="T:System.ServiceModel.Security.WSTrustServiceHost" /> 类。
                </param>
    </member>
    <member name="M:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials,System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration" /> 类，该类具有指定的颁发者名称和签名的凭据。
               （可选） 从当前配置中加载的设置。
            </summary>
      <param name="issuerName">
                颁发者名称中。
                 设置 <see cref="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.TokenIssuerName" /> 属性。
              </param>
      <param name="signingCredentials">
                STS 签名凭据。
                 设置 <see cref="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.SigningCredentials" /> 属性。
              
                  <see cref="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.SigningCredentials" /> 实现活动的安全令牌服务 (STS) 时，将忽略属性。
                   而是必须将服务证书通过设置 <see cref="P:System.ServiceModel.ServiceHostBase.Credentials" /> 承载您的 STS 服务主机上的属性。
                   为主动 STS 所用的服务主机由 <see cref="T:System.ServiceModel.Security.WSTrustServiceHost" /> 类。
                </param>
      <param name="loadConfig">
                <see langword="true" /> 若要从配置文件，则加载设置否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration" /> 类，该类具有指定的颁发者名称和签名的凭据。
               从指定的命名配置加载设置。
            </summary>
      <param name="issuerName">
                颁发者名称中。
                 设置 <see cref="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.TokenIssuerName" /> 属性。
              </param>
      <param name="signingCredentials">
                STS 签名凭据。
                 设置 <see cref="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.SigningCredentials" /> 属性。
              
                  <see cref="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.SigningCredentials" /> 实现活动的安全令牌服务 (STS) 时，将忽略属性。
                   而是必须将服务证书通过设置 <see cref="P:System.ServiceModel.ServiceHostBase.Credentials" /> 承载您的 STS 服务主机上的属性。
                   为主动 STS 所用的服务主机由 <see cref="T:System.ServiceModel.Security.WSTrustServiceHost" /> 类。
                </param>
      <param name="serviceName">
                名称 <see langword="&lt;identityConfiguration&gt;" /> 为要从中加载该配置元素。
              </param>
    </member>
    <member name="M:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.CreateSecurityTokenService">
      <summary>
              创建安全令牌服务 (STS) 实例从 <see cref="T:System.Type" /> 中指定 <see cref="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.SecurityTokenService" /> 属性。
            </summary>
      <returns>
              一个实例 <see cref="T:System.Type" /> 中指定 <see cref="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.SecurityTokenService" /> 属性。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Configuration.SystemIdentityModelSection.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Configuration.SystemIdentityModelSection" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.TokenReplayDetectionElement.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Configuration.TokenReplayDetectionElement" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Configuration.X509CertificateValidationElement.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Configuration.X509CertificateValidationElement" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.CookieTransform.#ctor">
      <summary>
              从构造函数初始化派生类中调用 <see cref="T:System.IdentityModel.CookieTransform" /> 类。
            </summary>
    </member>
    <member name="M:System.IdentityModel.CookieTransform.Decode(System.Byte[])">
      <summary>
              当在派生类中重写，反转了转换。
            </summary>
      <param name="encoded">
                Cookie 该编码的格式。
              </param>
      <returns>
              已解码的字节数组中。
            </returns>
    </member>
    <member name="M:System.IdentityModel.CookieTransform.Encode(System.Byte[])">
      <summary>
              当在派生类中重写应用转换。
            </summary>
      <param name="value">
                要进行编码的字节数组。
              </param>
      <returns>
              编码的 cookie。
            </returns>
    </member>
    <member name="M:System.IdentityModel.DeflateCookieTransform.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.DeflateCookieTransform" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.DeflateCookieTransform.Decode(System.Byte[])">
      <summary>
              放大的数据。
            </summary>
      <param name="encoded">
                从以前返回数据 <see cref="M:System.IdentityModel.DeflateCookieTransform.Encode(System.Byte[])" />
              </param>
      <returns>
              已解码的数据。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="value" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="value" /> 包含零字节。
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
                  解压缩后的长度大于指定的最大长度 <see cref="P:System.IdentityModel.DeflateCookieTransform.MaxDecompressedSize" /> 属性。
                </exception>
    </member>
    <member name="M:System.IdentityModel.DeflateCookieTransform.Encode(System.Byte[])">
      <summary>
              压缩数据。
            </summary>
      <param name="value">
                要压缩的数据。
              </param>
      <returns>
              已压缩的数据。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="value" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="value" /> 包含零字节。
                </exception>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.DelegatingXmlDictionaryReader" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.Close">
      <summary>
              关闭读取器和更改 <see cref="P:System.Xml.XmlReader.ReadState" /> 为已关闭。
            </summary>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.GetAttribute(System.Int32)">
      <summary>
              给定索引处获取的属性的值。
            </summary>
      <param name="i">
                属性的索引。
                 索引是 0 基于的索引。
              </param>
      <returns>
              指定索引处的属性的值。
            </returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.GetAttribute(System.String)">
      <summary>
              获取具有给定名称的属性的值。
            </summary>
      <param name="name">
                属性的限定名称。
              </param>
      <returns>
              属性的值。
               如果未找到 null 属性将返回。
            </returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.GetAttribute(System.String,System.String)">
      <summary>
              获取具有给定名称和命名空间 Uri 的属性的值。
            </summary>
      <param name="name">
                属性的本地名称。
              </param>
      <param name="namespaceURI">
                该特性的命名空间。
              </param>
      <returns>
              属性的值。
               如果未找到 null 属性将返回。
            </returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.InitializeInnerReader(System.Xml.XmlDictionaryReader)">
      <summary>
              初始化此实例与指定的内部读取器。
            </summary>
      <param name="innerReader">
                是此实例包装读取器。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="innerReader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.LookupNamespace(System.String)">
      <summary>
              解析当前元素范围内的命名空间前缀。
            </summary>
      <param name="prefix">
                作为 Uri 要解析其命名空间的前缀。
              </param>
      <returns>
              命名空间 Uri 的前缀匹配或如果不找到任何匹配的前缀，则为 null。
            </returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.MoveToAttribute(System.Int32)">
      <summary>
              移动到具有指定索引的属性。
            </summary>
      <param name="i">
                属性的索引。
              </param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.MoveToAttribute(System.String)">
      <summary>
              移动到具有给定的本地名称的属性。
            </summary>
      <param name="name">
                属性的限定名称。
              </param>
      <returns>
              如果找到该属性，则为 true否则为 false。
            </returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.MoveToAttribute(System.String,System.String)">
      <summary>
              移动到具有指定 System.Xml.XmlReader.LocalName 和 System.Xml.XmlReader.NamespaceURI 的属性。
            </summary>
      <param name="name">
                属性的本地名称。
              </param>
      <param name="ns">
                属性的命名空间 URI。
              </param>
      <returns>
              如果找到该属性，则为 true否则为 false。
            </returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.MoveToElement">
      <summary>
              移动到类型元素的节点。
            </summary>
      <returns>
              如果读取器定位在元素上否则为 false，则 true
            </returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.MoveToFirstAttribute">
      <summary>
              移动到第一个属性。
            </summary>
      <returns>
              如果读取器定位在一个属性，否则为 false，则返回 true。
            </returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.MoveToNextAttribute">
      <summary>
              将读取器移动到下一个属性。
            </summary>
      <returns>
              如果读取器定位在某个属性否则为 false，则返回 true。
            </returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.Read">
      <summary>
              从流中读取下一个节点。
            </summary>
      <returns>
              如果成功读取下一个节点为 true。
            </returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.ReadAttributeValue">
      <summary>
              将属性值分析为一个或多个 Text、EntityReference 或 EndEntity 节点。
            </summary>
      <returns>
              如果没有为 return.false 节点如果读取器未定位在属性节点上进行初始调用时或如果已读取所有属性值为 true。
            </returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>
              读取内容并返回 Base64 解码的二进制字节。
            </summary>
      <param name="buffer">
                结果文本复制到的缓冲区。
                 此值不能为 null。
              </param>
      <param name="index">
                缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
              </param>
      <param name="count">
                要复制到缓冲区的最大字节数。
              </param>
      <returns>
              写入缓冲区的字节数。
            </returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>
              读取内容并返回 BinHex 解码的二进制字节。
            </summary>
      <param name="buffer">
                结果文本复制到的缓冲区。
                 此值不能为 null。
              </param>
      <param name="index">
                缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
              </param>
      <param name="count">
                要复制到缓冲区的最大字节数。
              </param>
      <returns>
              写入缓冲区的字节数。
            </returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.ReadContentAsUniqueId">
      <summary>
              读取内容并返回包含的字符串。
            </summary>
      <returns>
              返回 <see cref="T:System.Xml.UniqueId" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)">
      <summary>
              读取嵌入在 XML 文档中的大量文本流。
            </summary>
      <param name="buffer">
                作为文本内容写入到的缓冲区的字符数组。
                 此值不能为 null。
              </param>
      <param name="index">
                System.Xml.XmlReader 可以开始复制结果的缓冲区内的偏移量。
              </param>
      <param name="count">
                要复制到缓冲区中的最大字符数。
                 此方法返回复制的实际字符数。
              </param>
      <returns>
              读取到缓冲区中的字符数。
               如果不再有文本内容，则返回值零。
            </returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryReader.ResolveEntity">
      <summary>
              解析 EntityReference 节点的实体引用。
            </summary>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.DelegatingXmlDictionaryWriter" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.Close">
      <summary>
              关闭基础流。
            </summary>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.EndCanonicalization">
      <summary>
              停止由匹配 <see cref="M:System.Xml.XmlDictionaryWriter.StartCanonicalization(System.IO.Stream,System.Boolean,System.String[])" /> 调用启动的规范化。
            </summary>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.Flush">
      <summary>
              刷新基础流。
            </summary>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.InitializeInnerWriter(System.Xml.XmlDictionaryWriter)">
      <summary>
              初始化此实例与指定的内部编写器。
            </summary>
      <param name="innerWriter">
                是此实例包装编写器。
              </param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.InitializeTracingWriter(System.Xml.XmlWriter)">
      <summary>
              初始化此实例与为将回显的所有调用，并且编写器将编写非规范化的 XML。
            </summary>
      <param name="tracingWriter">
                编写器将向其回显的所有调用。
                 如果 <see langword="null" />, ，不回显调用。
              </param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.LookupPrefix(System.String)">
      <summary>
              返回在当前命名空间范围中为该命名空间 URI 定义的最近的前缀。
            </summary>
      <param name="ns">
                要查找其前缀的命名空间 URI。
              </param>
      <returns>
              在当前范围内找到匹配的前缀或如果没有匹配的命名空间 URI 为 null。
            </returns>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.StartCanonicalization(System.IO.Stream,System.Boolean,System.String[])">
      <summary>
              表示规范化的启动。
               遵循此规范的任何写入操作将规范化数据，并写入指定流。
            </summary>
      <param name="stream">
                应写入规范流的流。
              </param>
      <param name="includeComments">
                该值表示是否还应规范化写入的注释。
              </param>
      <param name="inclusivePrefixes">
                需要包含到规范流的前缀集。
                 在写入规范流的第一个元素中定义前缀。
              </param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>
              将指定的二进制字节编码为 Base64 并写出结果文本。
            </summary>
      <param name="buffer">
                要进行编码的字节数组。
              </param>
      <param name="index">
                缓冲区中指示要写入字节的起始位置的位置。
              </param>
      <param name="count">
                要写入的字节数。
              </param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteCData(System.String)">
      <summary>
              写出包含指定的文本的 CDATA 块。
            </summary>
      <param name="text">
                要放置在 CDATA 块中的文本。
              </param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteCharEntity(System.Char)">
      <summary>
              为指定的 Unicode 字符值强制生成字符实体。
            </summary>
      <param name="ch">
                为其生成字符实体的 Unicode 字符。
              </param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
      <summary>
              当在派生类中被重写时，以每次一个缓冲区的方式写入文本。
            </summary>
      <param name="buffer">
                包含要写入的文本的字符数组。
              </param>
      <param name="index">
                缓冲区中指示要写入文本的起始位置的位置。
              </param>
      <param name="count">
                要写入的字符数。
              </param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteComment(System.String)">
      <summary>
              写出包含指定的文本的注释。
            </summary>
      <param name="text">
                要放在注释内的文本。
              </param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteDocType(System.String,System.String,System.String,System.String)">
      <summary>
              写出具有指定名称和可选属性的 DOCTYPE 声明。
            </summary>
      <param name="name">
                DOCTYPE 的名称。
                 它必须是非空的。
              </param>
      <param name="pubid">
                如果非 null 它还将写入 PUBLIC"pubid""sysid"pubid 和 sysid 替换为给定的参数的值。
              </param>
      <param name="sysid">
                如果 pubid 为空且 sysid 不可为 null，则它将写入 SYSTEM"sysid"sysid 将替换该参数的值。
              </param>
      <param name="subset">
                如果非 null，则它写入 [subset]，其中 subset 替换为此自变量的值。
              </param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteEndAttribute">
      <summary>
              关闭前一个 System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String) 调用。
            </summary>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteEndDocument">
      <summary>
              关闭任何打开的元素或特性并将写入器重新设置为起始状态。
            </summary>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteEndElement">
      <summary>
              关闭一个元素并弹出相应的命名空间范围。
            </summary>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteEntityRef(System.String)">
      <summary>
              写出实体引用作为名称。
            </summary>
      <param name="name">
                实体引用的名称。
              </param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteFullEndElement">
      <summary>
              关闭一个元素并弹出相应的命名空间范围。
            </summary>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteProcessingInstruction(System.String,System.String)">
      <summary>
              写出在名称和文本之间带有空格的处理指令，如下所示︰ &amp;l t;？将命名为文本？ （&amp;a) gt;。
            </summary>
      <param name="name">
                处理指令的名称。
              </param>
      <param name="text">
                要包括在处理指令中的文本。
              </param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
      <summary>
              当在派生类中被重写时，从字符缓冲区手动写入原始标记。
            </summary>
      <param name="buffer">
                包含要写入的文本的字符数组。
              </param>
      <param name="index">
                缓冲区中的位置，指示要写入文本的起始位置。
              </param>
      <param name="count">
                要写入的字符数。
              </param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteRaw(System.String)">
      <summary>
              从字符串手动写入原始标记。
            </summary>
      <param name="data">
                包含要写入的文本的字符串。
              </param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteStartAttribute(System.String,System.String,System.String)">
      <summary>
              写入具有指定本地名称和命名空间 URI 的属性的开头。
            </summary>
      <param name="prefix">
                属性的命名空间前缀。
              </param>
      <param name="localName">
                属性的本地名称。
              </param>
      <param name="ns">
                属性的命名空间 URI。
              </param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteStartDocument">
      <summary>
              当在派生类中被重写时，写入版本为“1.0”的 XML 声明。
            </summary>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteStartDocument(System.Boolean)">
      <summary>
              当在派生类中被重写时，写入版本为“1.0”的 XML 声明和独立的属性。
            </summary>
      <param name="standalone">
                如果为 true，则它写入"独立 = yes";如果为 false，则它写入"独立 = no"。
              </param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteStartElement(System.String,System.String,System.String)">
      <summary>
              当在派生类中被重写时，写入指定的开始标记并将其与给定的命名空间和前缀关联起来。
            </summary>
      <param name="prefix">
                元素的命名空间前缀。
              </param>
      <param name="localName">
                元素的本地名称。
              </param>
      <param name="ns">
                与元素关联的命名空间 URI。
              </param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteString(System.String)">
      <summary>
              写入给定的文本内容。
            </summary>
      <param name="text">
                要写入的文本。
              </param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
      <summary>
              为代理项字符对生成并写入代理项字符实体。
            </summary>
      <param name="lowChar">
                低代理项。
                 它必须是介于 0xDC00 和 0xDFFF 之间的值。
              </param>
      <param name="highChar">
                高代理项。
                 它必须是介于 0xD800 和 0xDBFF 之间的值。
              </param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteWhitespace(System.String)">
      <summary>
              写出给定的空白区域。
            </summary>
      <param name="ws">
                空格字符的字符串。
              </param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteXmlAttribute(System.String,System.String)">
      <summary>
              作为带前缀的 xml 属性写入的属性 xml:。
            </summary>
      <param name="localName">
                该属性的 Localname。
              </param>
      <param name="value">
                属性值。
              </param>
    </member>
    <member name="M:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteXmlnsAttribute(System.String,System.String)">
      <summary>
              写入 xmlns 命名空间声明。
            </summary>
      <param name="prefix">
                命名空间声明的前缀。
              </param>
      <param name="namespaceUri">
                命名空间 Uri 本身。
              </param>
    </member>
    <member name="M:System.IdentityModel.EnvelopedSignatureReader.#ctor(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.EnvelopedSignatureReader" /> 类通过使用指定的读取器和安全令牌序列化程序。
            </summary>
      <param name="reader">
                指向封装的读取器签名的 XML。
              </param>
      <param name="securityTokenSerializer">
                要用于反序列化的令牌序列化程序 <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> 的签名。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="securityTokenSerializer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.EnvelopedSignatureReader.#ctor(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.EnvelopedSignatureReader" /> 通过使用指定的读取器、 安全令牌序列化程序和令牌解析程序的类。
            </summary>
      <param name="reader">
                指向封装的读取器签名的 XML。
              </param>
      <param name="securityTokenSerializer">
                要用于反序列化的令牌序列化程序 <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> 的签名。
              </param>
      <param name="signingTokenResolver">
                令牌解析程序用于解决签名令牌。
                <see langword="null" /> 指定应使用默认安全令牌解析程序。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="securityTokenSerializer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.EnvelopedSignatureReader.#ctor(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.EnvelopedSignatureReader" /> 通过使用指定的读取器、 安全令牌序列化程序、 令牌解析程序和行为的类。
            </summary>
      <param name="reader">
                指向封装的读取器签名的 XML。
              </param>
      <param name="securityTokenSerializer">
                要用于反序列化的令牌序列化程序 <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> 的签名。
              </param>
      <param name="signingTokenResolver">
                令牌解析程序用于解决签名令牌。
                <see langword="null" /> 指定应使用默认安全令牌解析程序。
              </param>
      <param name="requireSignature">
                <see langword="true" /> 如果该签名是必需的;否则为 <see langword="false" />。
              </param>
      <param name="automaticallyReadSignature">
                <see langword="true" /> 如果应读取签名;否则为 <see langword="false" />。
              </param>
      <param name="resolveIntrinsicSigningKeys">
                <see langword="true" /> 如果应解决内部函数的签名密钥;否则为 <see langword="false" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="securityTokenSerializer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.EnvelopedSignatureReader.Read">
      <summary>
              从流中读取下一个节点。
            </summary>
      <returns>
              <see langword="true" /> 如果成功，则读取下一个节点 <see langword="false" /> 如果没有更多的节点。
            </returns>
    </member>
    <member name="M:System.IdentityModel.EnvelopedSignatureReader.TryReadSignature">
      <summary>
              如果读取器当前定位在读取的签名 <see langword="&lt;Signature&gt;" /> 元素。
            </summary>
      <returns>
              <see langword="true" /> 如果成功读取签名;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.EnvelopedSignatureWriter.#ctor(System.Xml.XmlWriter,System.IdentityModel.Tokens.SigningCredentials,System.String,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>
              初始化 <see cref="T:System.IdentityModel.EnvelopedSignatureWriter" /> 类的新实例。
            </summary>
      <param name="innerWriter">
                要包装的编写器。
              </param>
      <param name="signingCredentials">
                要用于生成签名的签名凭据。
              </param>
      <param name="referenceId">
                信封参照 ID。
              </param>
      <param name="securityTokenSerializer">
                若要用来序列化签名 KeyInfo 令牌序列化程序。
              </param>
      <exception cref="T:System.ArgumentException">
                  <paramref name="referenceId" /> 为 <see langword="null" /> 或空。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="innerWriter" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="signingCredentials" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="securityTokenSerializer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.EnvelopedSignatureWriter.WriteEndElement">
      <summary>
              关闭一个元素并弹出相应的命名空间范围。
            </summary>
    </member>
    <member name="M:System.IdentityModel.EnvelopedSignatureWriter.WriteFullEndElement">
      <summary>
              关闭一个元素并弹出相应的命名空间范围。
            </summary>
    </member>
    <member name="M:System.IdentityModel.EnvelopedSignatureWriter.WriteSignature">
      <summary>
              在信封范围内设置的签名位置。
               虽然应插入编写以指示这时签名信封，则调用此方法。
            </summary>
    </member>
    <member name="M:System.IdentityModel.EnvelopedSignatureWriter.WriteStartElement(System.String,System.String,System.String)">
      <summary>
              写出指定的开始标记并将其与指定的命名空间关联。
            </summary>
      <param name="prefix">
                元素的命名空间前缀。
              </param>
      <param name="localName">
                元素的本地名称。
                 （不带前缀的元素的名称。）
              </param>
      <param name="ns">
                与元素关联的命名空间 URI。
              </param>
    </member>
    <member name="M:System.IdentityModel.LimitExceededException.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.LimitExceededException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.LimitExceededException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              用序列化数据初始化 <see cref="T:System.IdentityModel.LimitExceededException" /> 类的新实例。
            </summary>
      <param name="info">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，其中包含序列化的对象数据。
              </param>
      <param name="context">
                一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，其中包含有关源或目标的上下文信息。
              </param>
    </member>
    <member name="M:System.IdentityModel.LimitExceededException.#ctor(System.String)">
      <summary>
              用指定的错误消息初始化 <see cref="T:System.IdentityModel.LimitExceededException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
    </member>
    <member name="M:System.IdentityModel.LimitExceededException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IdentityModel.LimitExceededException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="innerException">
                <see cref="T:System.Exception" /> 导致当前异常。
                 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。
              </param>
    </member>
    <member name="M:System.IdentityModel.Metadata.ApplicationServiceDescriptor.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Metadata.ApplicationServiceDescriptor" /> 类的实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.ContactPerson.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Metadata.ContactPerson" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.ContactPerson.#ctor(System.IdentityModel.Metadata.ContactType)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Metadata.ContactPerson" /> 类具有指定的联系人类型。
            </summary>
      <param name="contactType">
                联系人类型。
              </param>
    </member>
    <member name="M:System.IdentityModel.Metadata.DisplayClaim.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Metadata.DisplayClaim" /> 类，该类具有指定的声明类型。
            </summary>
      <param name="claimType">
                显示的声明类型声明。
                 初始化 <see cref="P:System.IdentityModel.Metadata.DisplayClaim.ClaimType" /> 属性。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="claimType" /> 为 <see langword="null" /> 或空字符串。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.DisplayClaim.#ctor(System.String,System.String,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Metadata.DisplayClaim" /> 类，该类具有指定声明类型、 显示名称和描述。
            </summary>
      <param name="claimType">
                显示的声明类型声明。
                 初始化 <see cref="P:System.IdentityModel.Metadata.DisplayClaim.ClaimType" /> 属性。
              </param>
      <param name="displayTag">
                显示的显示名称 （或友好名称） 声明。
                 初始化 <see cref="P:System.IdentityModel.Metadata.DisplayClaim.DisplayTag" /> 属性。
              </param>
      <param name="description">
                显示声明说明。
                 初始化 <see cref="P:System.IdentityModel.Metadata.DisplayClaim.Description" /> 属性。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="claimType" /> 为 <see langword="null" /> 或空字符串。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.DisplayClaim.#ctor(System.String,System.String,System.String,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Metadata.DisplayClaim" /> 类，该类具有指定声明类型、 显示名称、 显示值和说明。
               声明是必需的。
            </summary>
      <param name="claimType">
                显示的声明类型声明。
                 初始化 <see cref="P:System.IdentityModel.Metadata.DisplayClaim.ClaimType" /> 属性。
              </param>
      <param name="displayTag">
                显示的显示名称 （或友好名称） 声明。
                 初始化 <see cref="P:System.IdentityModel.Metadata.DisplayClaim.DisplayTag" /> 属性。
              </param>
      <param name="description">
                显示声明说明。
                 初始化 <see cref="P:System.IdentityModel.Metadata.DisplayClaim.Description" /> 属性。
              </param>
      <param name="displayValue">
                显示声明显示值。
                 初始化 <see cref="P:System.IdentityModel.Metadata.DisplayClaim.DisplayValue" /> 属性。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="claimType" /> 为 <see langword="null" /> 或空字符串。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.DisplayClaim.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Metadata.DisplayClaim" /> 类，该类具有指定声明类型、 显示名称、 显示值、 说明和可选特性。
            </summary>
      <param name="claimType">
                显示的声明类型声明。
                 初始化 <see cref="P:System.IdentityModel.Metadata.DisplayClaim.ClaimType" /> 属性。
              </param>
      <param name="displayTag">
                显示的显示名称 （或友好名称） 声明。
                 初始化 <see cref="P:System.IdentityModel.Metadata.DisplayClaim.DisplayTag" /> 属性。
              </param>
      <param name="description">
                显示声明说明。
                 初始化 <see cref="P:System.IdentityModel.Metadata.DisplayClaim.Description" /> 属性。
              </param>
      <param name="displayValue">
                显示声明显示值。
                 初始化 <see cref="P:System.IdentityModel.Metadata.DisplayClaim.DisplayValue" /> 属性。
              </param>
      <param name="optional">
                如果声明是可选的，则为 <see langword="true" />；否则为 <see langword="false" />。
                 初始化 <see cref="P:System.IdentityModel.Metadata.DisplayClaim.Optional" /> 属性。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="claimType" /> 为 <see langword="null" /> 或空字符串。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.DisplayClaim.CreateDisplayClaimFromClaimType(System.String)">
      <summary>
              从指定的声明类型创建一个显示声明。
            </summary>
      <param name="claimType">
                表示声明类型 URI。
              </param>
      <returns>
              返回 <see cref="T:System.IdentityModel.Metadata.DisplayClaim" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.EncryptionMethod.#ctor(System.Uri)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Metadata.EncryptionMethod" /> 类，该类具有指定的加密算法。
            </summary>
      <param name="algorithm">
                加密算法的 URI。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="algorithm" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.EntitiesDescriptor.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.EntitiesDescriptor.#ctor(System.Collections.ObjectModel.Collection{System.IdentityModel.Metadata.EntitiesDescriptor})">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" /> 类，具有指定的子集合 <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" />。
            </summary>
      <param name="entityGroupList">
                实体描述符集合。
                 初始化 <see cref="P:System.IdentityModel.Metadata.EntitiesDescriptor.ChildEntityGroups" /> 属性。
              </param>
    </member>
    <member name="M:System.IdentityModel.Metadata.EntitiesDescriptor.#ctor(System.Collections.ObjectModel.Collection{System.IdentityModel.Metadata.EntityDescriptor})">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" /> 类，具有指定的子集合 <see cref="T:System.IdentityModel.Metadata.EntityDescriptor" />。
            </summary>
      <param name="entityList">
                实体描述符集合。
                 初始化 <see cref="P:System.IdentityModel.Metadata.EntitiesDescriptor.ChildEntities" /> 属性。
              </param>
    </member>
    <member name="M:System.IdentityModel.Metadata.EntitiesDescriptor.#ctor(System.Collections.ObjectModel.Collection{System.IdentityModel.Metadata.EntityDescriptor},System.Collections.ObjectModel.Collection{System.IdentityModel.Metadata.EntitiesDescriptor})">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" /> 类，具有指定的子集合 <see cref="T:System.IdentityModel.Metadata.EntityDescriptor" /> 和指定的子集合 <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" />。
            </summary>
      <param name="entityList">
                实体描述符集合。
                 初始化 <see cref="P:System.IdentityModel.Metadata.EntitiesDescriptor.ChildEntities" /> 属性。
              </param>
      <param name="entityGroupList">
                实体描述符集合。
                 初始化 <see cref="P:System.IdentityModel.Metadata.EntitiesDescriptor.ChildEntityGroups" /> 属性。
              </param>
    </member>
    <member name="M:System.IdentityModel.Metadata.EntityDescriptor.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Metadata.EntityDescriptor" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.EntityDescriptor.#ctor(System.IdentityModel.Metadata.EntityId)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Metadata.EntityDescriptor" /> 类，该类具有指定的实体 id。
            </summary>
      <param name="entityId">
                实体 id。
                 初始化 <see cref="P:System.IdentityModel.Metadata.EntityDescriptor.EntityId" /> 属性。
              </param>
    </member>
    <member name="M:System.IdentityModel.Metadata.EntityId.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Metadata.EntityId" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.EntityId.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Metadata.EntityId" /> 类，该类具有指定 id。
            </summary>
      <param name="id">
                用于初始化新实例的 ID。
                 初始化 <see cref="P:System.IdentityModel.Metadata.EntityId.Id" /> 属性。
              </param>
    </member>
    <member name="M:System.IdentityModel.Metadata.IdentityProviderSingleSignOnDescriptor.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Metadata.IdentityProviderSingleSignOnDescriptor" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.IndexedProtocolEndpoint.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Metadata.IndexedProtocolEndpoint" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.IndexedProtocolEndpoint.#ctor(System.Int32,System.Uri,System.Uri)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Metadata.IndexedProtocolEndpoint" /> 类，该类具有指定的索引、 绑定和位置。
            </summary>
      <param name="index">
                索引。
              </param>
      <param name="binding">
                绑定。
              </param>
      <param name="location">
                位置。
              </param>
    </member>
    <member name="M:System.IdentityModel.Metadata.IndexedProtocolEndpointDictionary.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Metadata.IndexedProtocolEndpointDictionary" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.KeyDescriptor.#ctor">
      <summary>
              使用默认值初始化 <see cref="T:System.IdentityModel.Metadata.KeyDescriptor" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.KeyDescriptor.#ctor(System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Metadata.KeyDescriptor" /> 类通过使用指定的密钥标识符。
            </summary>
      <param name="ski">
                此实例键标识符。
              </param>
    </member>
    <member name="M:System.IdentityModel.Metadata.LocalizedEntry.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Metadata.LocalizedEntry" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.LocalizedEntry.#ctor(System.Globalization.CultureInfo)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Metadata.LocalizedEntry" /> 为指定区域性的类。
            </summary>
      <param name="language">
                区域性信息。
                 初始化 <see cref="P:System.IdentityModel.Metadata.LocalizedEntry.Language" /> 属性。
              </param>
    </member>
    <member name="M:System.IdentityModel.Metadata.LocalizedEntryCollection`1.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Metadata.LocalizedEntryCollection`1" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.LocalizedEntryCollection`1.GetKeyForItem(`0)">
      <summary>
              获取指定项的键。
            </summary>
      <param name="item">
                关键是要返回的项。
              </param>
      <returns>
              一个表示密钥的 <see cref="T:System.Globalization.CultureInfo" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.LocalizedName.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Metadata.LocalizedName" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.LocalizedName.#ctor(System.String,System.Globalization.CultureInfo)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Metadata.LocalizedName" /> 类，该类具有指定的名称和区域性 （语言）。
            </summary>
      <param name="name">
                此实例的名称。
                 初始化 <see cref="P:System.IdentityModel.Metadata.LocalizedName.Name" /> 属性。
              </param>
      <param name="language">
                <see cref="T:System.Globalization.CultureInfo" /> ，它定义为此实例的语言。
                 初始化 <see cref="P:System.IdentityModel.Metadata.LocalizedEntry.Language" /> 属性。
              </param>
    </member>
    <member name="M:System.IdentityModel.Metadata.LocalizedUri.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Metadata.LocalizedUri" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.LocalizedUri.#ctor(System.Uri,System.Globalization.CultureInfo)">
      <summary>
              构造 <see cref="T:System.IdentityModel.Metadata.LocalizedUri" /> 与 <paramref name="uri" /> 和 <paramref name="language" />。
            </summary>
      <param name="uri">
                此实例的 URI。
                 初始化  <see cref="P:System.IdentityModel.Metadata.LocalizedUri.Uri" /> 属性。
              </param>
      <param name="language">
                <see cref="T:System.Globalization.CultureInfo" /> ，它定义为此实例的语言。
                 初始化 <see cref="P:System.IdentityModel.Metadata.LocalizedEntry.Language" /> 属性。
              </param>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataBase.#ctor">
      <summary>
              从构造函数初始化派生类中调用 <see cref="T:System.IdentityModel.Metadata.MetadataBase" /> 类。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializationException.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Metadata.MetadataSerializationException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              用序列化数据初始化 <see cref="T:System.IdentityModel.Metadata.MetadataSerializationException" /> 类的新实例。
            </summary>
      <param name="info">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，其中包含序列化的对象数据。
              </param>
      <param name="context">
                一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，其中包含有关源或目标的上下文信息。
              </param>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializationException.#ctor(System.String)">
      <summary>
              用指定的错误消息初始化 <see cref="T:System.IdentityModel.Metadata.MetadataSerializationException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializationException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IdentityModel.Metadata.MetadataSerializationException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="innerException">
                <see cref="T:System.Exception" /> 导致当前异常。
                 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。
              </param>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Metadata.MetadataSerializer" /> 类，具有默认的令牌序列化程序。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.#ctor(System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Metadata.MetadataSerializer" /> 类，该类使用指定的令牌序列化程序。
            </summary>
      <param name="tokenSerializer">
                令牌序列化程序用于序列化安全令牌。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="tokenSerializer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.CreateApplicationServiceInstance">
      <summary>
              创建应用程序服务描述符。
            </summary>
      <returns>
              应用程序服务描述符。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.CreateContactPersonInstance">
      <summary>
              创建联系人的人员。
            </summary>
      <returns>
              联系人。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.CreateEntitiesDescriptorInstance">
      <summary>
              创建实体描述符。
            </summary>
      <returns>
              实体描述符中。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.CreateEntityDescriptorInstance">
      <summary>
              创建实体描述符。
            </summary>
      <returns>
              实体描述符。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.CreateIdentityProviderSingleSignOnDescriptorInstance">
      <summary>
              创建 IDPSSO 描述符。
            </summary>
      <returns>
              IDPSSO 描述符中。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.CreateIndexedProtocolEndpointInstance">
      <summary>
              创建索引的终结点。
            </summary>
      <returns>
              索引的终结点。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.CreateKeyDescriptorInstance">
      <summary>
              创建的密钥的说明符。
            </summary>
      <returns>
              密钥的描述符。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.CreateLocalizedNameInstance">
      <summary>
              创建具有本地化的名称。
            </summary>
      <returns>
              本地化的名称。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.CreateLocalizedUriInstance">
      <summary>
              创建一个本地化的 URI。
            </summary>
      <returns>
              本地化的 URI。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.CreateOrganizationInstance">
      <summary>
              创建一个组织。
            </summary>
      <returns>
              组织。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.CreateProtocolEndpointInstance">
      <summary>
              创建一个终结点。
            </summary>
      <returns>
              终结点。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.CreateSecurityTokenServiceDescriptorInstance">
      <summary>
              创建一个安全令牌服务描述符。
            </summary>
      <returns>
              安全令牌服务描述符。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.CreateServiceProviderSingleSignOnDescriptorInstance">
      <summary>
              创建 SPSSO 描述符。
            </summary>
      <returns>
              SPSSO 描述符中。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.GetMetadataSigningCertificate(System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>
              获取由指定的密钥标识符的 X.509 证书。
            </summary>
      <param name="ski">
                从中创建 X.509 证书的密钥标识符。
              </param>
      <returns>
              从指定的密钥标识符创建 X.509 证书。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="ski" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  找不到类型的密钥标识符子句 <see cref="T:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause" /> 中 <paramref name="ski" />。
                   强制执行默认行为，可以重写此方法以支持其他密钥标识符子句。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadApplicationServiceDescriptor(System.Xml.XmlReader)">
      <summary>
              读取应用程序服务描述符。
            </summary>
      <param name="reader">
                XML 读取器。
              </param>
      <returns>
              应用程序服务描述符。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadAttribute(System.Xml.XmlReader)">
      <summary>
              读取 &lt; saml:Attribute &gt; 元素。
            </summary>
      <param name="reader">
                XML 读取器。
              </param>
      <returns>
              Saml2 属性中。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadContactPerson(System.Xml.XmlReader)">
      <summary>
              读取掌握的人员联系。
            </summary>
      <param name="reader">
                XML 读取器。
              </param>
      <returns>
              联系人。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadCustomAttributes``1(System.Xml.XmlReader,``0)">
      <summary>
              用于读取自定义属性的扩展点。
            </summary>
      <param name="reader">
                XML 读取器。
              </param>
      <param name="target">
                一个 <paramref name="T" /> 类型的对象。
              </param>
      <typeparam name="T">
                表示正在读取; 的元数据元素的类型例如， <see cref="T:System.IdentityModel.Metadata.ContactPerson" />。
              </typeparam>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadCustomElement``1(System.Xml.XmlReader,``0)">
      <summary>
              用于读取自定义元素扩展点。
               默认情况下，返回 <see langword="false" />。
            </summary>
      <param name="reader">
                XML 读取器。
              </param>
      <param name="target">
                一个 <paramref name="T" /> 类型的对象。
              </param>
      <typeparam name="T">
                表示正在读取; 的元数据元素的类型例如， <see cref="T:System.IdentityModel.Metadata.ContactPerson" />。
              </typeparam>
      <returns>
              <see langword="true" /> 如果类型的元素 <paramref name="T" /> 读取; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadCustomRoleDescriptor(System.String,System.Xml.XmlReader,System.IdentityModel.Metadata.EntityDescriptor)">
      <summary>
              用于读取自定义 RoleDescriptors 扩展点。
            </summary>
      <param name="xsiType">
                Xsi 类型
              </param>
      <param name="reader">
                XML 读取器。
              </param>
      <param name="entityDescriptor">
                添加角色描述符实体描述符
              </param>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadDisplayClaim(System.Xml.XmlReader)">
      <summary>
              读取显示声明。
            </summary>
      <param name="reader">
                XML 读取器。
              </param>
      <returns>
              显示声明中。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IdentityModel.Metadata.MetadataSerializationException">
                  当 XML 格式不正确时引发。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadEntitiesDescriptor(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>
              读取实体描述符。
            </summary>
      <param name="reader">
                XML 读取器。
              </param>
      <param name="tokenResolver">
                安全令牌解析器。
              </param>
      <returns>
              实体描述符中。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IdentityModel.Metadata.MetadataSerializationException">
                  当 XML 格式不正确时引发。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadEntityDescriptor(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>
              读取实体描述符。
            </summary>
      <param name="inputReader">
                XML 读取器。
              </param>
      <param name="tokenResolver">
                安全令牌解析器。
              </param>
      <returns>
              实体描述符。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="inputReader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadIdentityProviderSingleSignOnDescriptor(System.Xml.XmlReader)">
      <summary>
              将读取 IDPSSO 说明符。
            </summary>
      <param name="reader">
                XML 读取器。
              </param>
      <returns>
              IDPSSO 描述符中。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadIndexedProtocolEndpoint(System.Xml.XmlReader)">
      <summary>
              读取索引终结点。
            </summary>
      <param name="reader">
                XML 读取器。
              </param>
      <returns>
              一个索引的终结点。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadKeyDescriptor(System.Xml.XmlReader)">
      <summary>
              读取密钥说明符。
            </summary>
      <param name="reader">
                XML 读取器。
              </param>
      <returns>
              密钥的描述符。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadLocalizedName(System.Xml.XmlReader)">
      <summary>
              读取具有本地化的名称。
            </summary>
      <param name="reader">
                XML 读取器。
              </param>
      <returns>
              本地化的名称。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadLocalizedUri(System.Xml.XmlReader)">
      <summary>
              读取一个本地化的 URI。
            </summary>
      <param name="reader">
                XML 读取器。
              </param>
      <returns>
              本地化的 URI。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadMetadata(System.IO.Stream)">
      <summary>
              读取指定的流进行反序列化实体描述符或实体描述符。
            </summary>
      <param name="stream">
                要读取的流。
              </param>
      <returns>
              描述符。
               一个实例 <see cref="T:System.IdentityModel.Metadata.EntityDescriptor" /> 或 <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" /> 类。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="stream" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadMetadata(System.Xml.XmlReader)">
      <summary>
              读取指定的 XML 读取器反序列化实体描述符或实体描述符。
            </summary>
      <param name="reader">
                要读取的 XML 读取器。
              </param>
      <returns>
              描述符。
               一个实例 <see cref="T:System.IdentityModel.Metadata.EntityDescriptor" /> 或 <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" /> 类。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadMetadata(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>
              读取给定的从其中进行反序列化实体描述符或实体描述符。
            </summary>
      <param name="reader">
                要读取的 XML 读取器。
              </param>
      <param name="tokenResolver">
                用来解析签名令牌令牌解析器。
              </param>
      <returns>
              描述符。
               一个实例 <see cref="T:System.IdentityModel.Metadata.EntityDescriptor" /> 或 <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" /> 类。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="tokenResolver" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadMetadataCore(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>
              读取实体描述符或实体描述符。
            </summary>
      <param name="reader">
                XML 读取器。
              </param>
      <param name="tokenResolver">
                安全令牌解析器。
              </param>
      <returns>
              描述符。
               一个实例 <see cref="T:System.IdentityModel.Metadata.EntityDescriptor" /> 或 <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" /> 类。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="tokenResolver" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IdentityModel.Metadata.MetadataSerializationException">
                  读取器未定位在 <see langword="&lt;EntityDescriptor&gt;" /> 或 <see langword="&lt;EntitiesDescriptor&gt;" /> 元素。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadOrganization(System.Xml.XmlReader)">
      <summary>
              读取组织。
            </summary>
      <param name="reader">
                XML 读取器。
              </param>
      <returns>
              一个组织。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadProtocolEndpoint(System.Xml.XmlReader)">
      <summary>
              读取终结点。
            </summary>
      <param name="reader">
                XML 读取器。
              </param>
      <returns>
              一个终结点。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadRoleDescriptorAttributes(System.Xml.XmlReader,System.IdentityModel.Metadata.RoleDescriptor)">
      <summary>
              读取角色描述符属性。
            </summary>
      <param name="reader">
                XML 读取器。
              </param>
      <param name="roleDescriptor">
                角色描述符中。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="roleDescriptor" /> 是。<see langword="null" />
                
                  - 或 -
                
                  <paramref name="roleDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.RoleDescriptor.ProtocolsSupported" /> 属性为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadRoleDescriptorElement(System.Xml.XmlReader,System.IdentityModel.Metadata.RoleDescriptor)">
      <summary>
              读取角色描述符元素。
            </summary>
      <param name="reader">
                XML 读取器。
              </param>
      <param name="roleDescriptor">
                角色描述符中。
              </param>
      <returns>
              <see langword="true" /> 如果元素为只读;否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="roleDescriptor" /> 是。<see langword="null" />
                
                  - 或 -
                
                  <paramref name="roleDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.RoleDescriptor.Contacts" /> 属性为 <see langword="null" />。
                
                  <paramref name="roleDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.RoleDescriptor.Keys" /> 属性为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadSecurityTokenServiceDescriptor(System.Xml.XmlReader)">
      <summary>
              读取安全令牌服务描述符。
            </summary>
      <param name="reader">
                XML 读取器。
              </param>
      <returns>
              安全令牌服务描述符。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadServiceProviderSingleSignOnDescriptor(System.Xml.XmlReader)">
      <summary>
              将读取 SPSSO 说明符。
            </summary>
      <param name="reader">
                XML 读取器。
              </param>
      <returns>
              SPSSO 描述符。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IdentityModel.Metadata.MetadataSerializationException">
                  XML 无效。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadSingleSignOnDescriptorAttributes(System.Xml.XmlReader,System.IdentityModel.Metadata.SingleSignOnDescriptor)">
      <summary>
              读取 SSO 描述符属性。
            </summary>
      <param name="reader">
                XML 读取器。
              </param>
      <param name="roleDescriptor">
                SSO 角色描述符。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="roleDescriptor" /> 是。<see langword="null" />
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadSingleSignOnDescriptorElement(System.Xml.XmlReader,System.IdentityModel.Metadata.SingleSignOnDescriptor)">
      <summary>
              读取 SSO 描述符元素。
            </summary>
      <param name="reader">
                XML 读取器。
              </param>
      <param name="singleSignOnDescriptor">
                SSO 描述符中。
              </param>
      <returns>
              <see langword="true" /> 如果元素为只读;否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="singleSignOnDescriptor" /> 是。<see langword="null" />
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadWebServiceDescriptorAttributes(System.Xml.XmlReader,System.IdentityModel.Metadata.WebServiceDescriptor)">
      <summary>
              读取 web 服务描述符属性。
            </summary>
      <param name="reader">
                XML 读取器。
              </param>
      <param name="roleDescriptor">
                Web 服务描述符。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="roleDescriptor" /> 是。<see langword="null" />
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ReadWebServiceDescriptorElement(System.Xml.XmlReader,System.IdentityModel.Metadata.WebServiceDescriptor)">
      <summary>
              读取 web 服务描述符元素。
            </summary>
      <param name="reader">
                XML 读取器。
              </param>
      <param name="roleDescriptor">
                Web 服务描述符。
              </param>
      <returns>
              <see langword="true" /> 如果元素为只读;否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="roleDescriptor" /> 是。<see langword="null" />
                
                  - 或 -
                
                  <paramref name="roleDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.WebServiceDescriptor.TargetScopes" /> 属性为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="roleDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.WebServiceDescriptor.ClaimTypesOffered" /> 属性为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="roleDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.WebServiceDescriptor.TokenTypesOffered" /> 属性为 <see langword="null" />。
                
                  参数 reader/roleDescriptor/roleDescriptor.TargetScopes/roleDescriptor.TargetScopes/roleDescriptor.TokenTypesOffered 为 null。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ValidateIssuer(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
              验证 X.509 证书签名的针对指定的受信任的颁发者列表的元数据文档 <see cref="P:System.IdentityModel.Metadata.MetadataSerializer.TrustedIssuers" /> 属性。
               通过调用此方法 <see cref="M:System.IdentityModel.Metadata.MetadataSerializer.ValidateSigningCredential(System.IdentityModel.Tokens.SigningCredentials)" /> 方法。
            </summary>
      <param name="signingCertificate">
                签名证书。
              </param>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.ValidateSigningCredential(System.IdentityModel.Tokens.SigningCredentials)">
      <summary>
              验证元数据文档的签名凭据。
            </summary>
      <param name="signingCredentials">
                已使用元数据文档进行签名的凭据。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="signingCredentials" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteApplicationServiceDescriptor(System.Xml.XmlWriter,System.IdentityModel.Metadata.ApplicationServiceDescriptor)">
      <summary>
              写入应用程序服务描述符。
            </summary>
      <param name="writer">
                XML 编写器。
              </param>
      <param name="appService">
                应用程序服务描述符。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="appService" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="appService" /> 的 <see cref="P:System.IdentityModel.Metadata.ApplicationServiceDescriptor.Endpoints" /> 属性为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="appService" /> 的 <see cref="P:System.IdentityModel.Metadata.ApplicationServiceDescriptor.PassiveRequestorEndpoints" /> 属性为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteAttribute(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2Attribute)">
      <summary>
              写入 &lt; saml:Attribute &gt; 元素。
            </summary>
      <param name="writer">
                XML 编写器。
              </param>
      <param name="data">
                Saml2 属性中。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="data" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteContactPerson(System.Xml.XmlWriter,System.IdentityModel.Metadata.ContactPerson)">
      <summary>
              写入某一联系人。
            </summary>
      <param name="writer">
                XML 编写器。
              </param>
      <param name="contactPerson">
                联系人。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="contactPerson" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="contactPerson" /> 的 <see cref="P:System.IdentityModel.Metadata.ContactPerson.EmailAddresses" /> 属性为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="contactPerson" /> 的 <see cref="P:System.IdentityModel.Metadata.ContactPerson.TelephoneNumbers" /> 属性为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteCustomAttributes``1(System.Xml.XmlWriter,``0)">
      <summary>
              要编写自定义特性的可扩展点。
            </summary>
      <param name="writer">
                XML 编写器。
              </param>
      <param name="source">
                类型的源元素 <paramref name="T" />。
              </param>
      <typeparam name="T">
                表示在写入其属性的元素的类型。
                 例如，<see cref="T:System.IdentityModel.Metadata.ContactPerson" />。
              </typeparam>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteCustomElements``1(System.Xml.XmlWriter,``0)">
      <summary>
              要编写自定义元素的可扩展点。
            </summary>
      <param name="writer">
                XML 编写器。
              </param>
      <param name="source">
                类型的源元素 <paramref name="T" />。
              </param>
      <typeparam name="T">
                表示正在写入的元素的类型。
              </typeparam>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteDisplayClaim(System.Xml.XmlWriter,System.IdentityModel.Metadata.DisplayClaim)">
      <summary>
              将显示声明。
            </summary>
      <param name="writer">
                XML 编写器。
              </param>
      <param name="claim">
                若要编写显示声明。
              </param>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteEntitiesDescriptor(System.Xml.XmlWriter,System.IdentityModel.Metadata.EntitiesDescriptor)">
      <summary>
              写入实体描述符。
            </summary>
      <param name="inputWriter">
                XML 编写器。
              </param>
      <param name="entitiesDescriptor">
                实体描述符中。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="inputWriter" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="entitiesDescriptor" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="entitiesDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.EntitiesDescriptor.ChildEntities" /> 属性为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="entitiesDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.EntitiesDescriptor.ChildEntityGroups" /> 属性为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteEntityDescriptor(System.Xml.XmlWriter,System.IdentityModel.Metadata.EntityDescriptor)">
      <summary>
              写入实体描述符。
            </summary>
      <param name="inputWriter">
                XML 编写器。
              </param>
      <param name="entityDescriptor">
                实体描述符。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="inputWriter" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="entityDescriptor" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="entityDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.EntityDescriptor.Contacts" /> 属性为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="entityDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.EntityDescriptor.RoleDescriptors" /> 属性为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteIdentityProviderSingleSignOnDescriptor(System.Xml.XmlWriter,System.IdentityModel.Metadata.IdentityProviderSingleSignOnDescriptor)">
      <summary>
              写入 IDPSSO 描述符。
            </summary>
      <param name="writer">
                XML 编写器。
              </param>
      <param name="identityProviderSingleSignOnDescriptor">
                IDPSSO 描述符中。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="identityProviderSingleSignOnDescriptor" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="identityProviderSingleSignOnDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.IdentityProviderSingleSignOnDescriptor.SupportedAttributes" /> 属性为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="identityProviderSingleSignOnDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.IdentityProviderSingleSignOnDescriptor.SingleSignOnServices" /> 属性为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteIndexedProtocolEndpoint(System.Xml.XmlWriter,System.IdentityModel.Metadata.IndexedProtocolEndpoint,System.Xml.XmlQualifiedName)">
      <summary>
              写入的索引的终结点。
            </summary>
      <param name="writer">
                XML 编写器。
              </param>
      <param name="indexedEP">
                索引的终结点。
              </param>
      <param name="element">
                XML 限定的元素。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="indexedEP" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="element" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteKeyDescriptor(System.Xml.XmlWriter,System.IdentityModel.Metadata.KeyDescriptor)">
      <summary>
              将写入密钥说明符。
            </summary>
      <param name="writer">
                XML 编写器。
              </param>
      <param name="keyDescriptor">
                密钥的描述符。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="keyDescriptor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteLocalizedName(System.Xml.XmlWriter,System.IdentityModel.Metadata.LocalizedName,System.Xml.XmlQualifiedName)">
      <summary>
              写入具有本地化的名称。
            </summary>
      <param name="writer">
                XML 编写器。
              </param>
      <param name="name">
                本地化的名称。
              </param>
      <param name="element">
                Xml 限定的名。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="name" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="element" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteLocalizedUri(System.Xml.XmlWriter,System.IdentityModel.Metadata.LocalizedUri,System.Xml.XmlQualifiedName)">
      <summary>
              写入本地化的 URI
            </summary>
      <param name="writer">
                XML 编写器。
              </param>
      <param name="uri">
                本地化的 URI。
              </param>
      <param name="element">
                Xml 限定的名。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="uri" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="element" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteMetadata(System.IO.Stream,System.IdentityModel.Metadata.MetadataBase)">
      <summary>
              将联合身份验证元数据写入到指定的流。
            </summary>
      <param name="stream">
                若要将联合身份验证元数据写入到的流。
              </param>
      <param name="metadata">
                要写入的元数据。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="stream" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="metadata" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteMetadata(System.Xml.XmlWriter,System.IdentityModel.Metadata.MetadataBase)">
      <summary>
              联合身份验证元数据写入指定的 XML 编写器。
            </summary>
      <param name="writer">
                要向其写入联合身份验证元数据的 XML 编写器
              </param>
      <param name="metadata">
                要写入的元数据。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="metadata" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteMetadataCore(System.Xml.XmlWriter,System.IdentityModel.Metadata.MetadataBase)">
      <summary>
              写入的元数据。
            </summary>
      <param name="writer">
                XML 编写器。
              </param>
      <param name="metadataBase">
                基 SAML 元数据。
                 一个实例 <see cref="T:System.IdentityModel.Metadata.EntityDescriptor" /> 或 <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" /> 类。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="metadataBase" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IdentityModel.Metadata.MetadataSerializationException">
                  <paramref name="metadataBase" /> 不能从分配 <see cref="T:System.IdentityModel.Metadata.EntityDescriptor" /> 或 <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteOrganization(System.Xml.XmlWriter,System.IdentityModel.Metadata.Organization)">
      <summary>
              写入一个组织。
            </summary>
      <param name="writer">
                XML 编写器。
              </param>
      <param name="organization">
                组织。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="organization" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteProtocolEndpoint(System.Xml.XmlWriter,System.IdentityModel.Metadata.ProtocolEndpoint,System.Xml.XmlQualifiedName)">
      <summary>
              写入某个终结点。
            </summary>
      <param name="writer">
                XML 编写器。
              </param>
      <param name="endpoint">
                终结点。
              </param>
      <param name="element">
                Xml 限定的名元素。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="endpoint" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="element" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteRoleDescriptorAttributes(System.Xml.XmlWriter,System.IdentityModel.Metadata.RoleDescriptor)">
      <summary>
              编写角色描述符属性。
            </summary>
      <param name="writer">
                XML 编写器。
              </param>
      <param name="roleDescriptor">
                角色描述符中。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="roleDescriptor" /> 是。<see langword="null" />
                
                  - 或 -
                
                  <paramref name="roleDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.RoleDescriptor.ProtocolsSupported" /> 属性为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteRoleDescriptorElements(System.Xml.XmlWriter,System.IdentityModel.Metadata.RoleDescriptor)">
      <summary>
              写入角色描述符元素。
            </summary>
      <param name="writer">
                XML 编写器。
              </param>
      <param name="roleDescriptor">
                角色描述符中。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="roleDescriptor" /> 是。<see langword="null" />
                
                  - 或 -
                
                  <paramref name="roleDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.RoleDescriptor.Contacts" /> 属性为 <see langword="null" />。
                
                  <paramref name="roleDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.RoleDescriptor.Keys" /> 属性为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteSecurityTokenServiceDescriptor(System.Xml.XmlWriter,System.IdentityModel.Metadata.SecurityTokenServiceDescriptor)">
      <summary>
              写入安全令牌服务描述符。
            </summary>
      <param name="writer">
                XML 编写器。
              </param>
      <param name="securityTokenServiceDescriptor">
                安全令牌服务描述符。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="securityTokenServiceDescriptor" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="securityTokenServiceDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.SecurityTokenServiceDescriptor.SecurityTokenServiceEndpoints" /> 属性为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="securityTokenServiceDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.SecurityTokenServiceDescriptor.PassiveRequestorEndpoints" /> 属性为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteServiceProviderSingleSignOnDescriptor(System.Xml.XmlWriter,System.IdentityModel.Metadata.ServiceProviderSingleSignOnDescriptor)">
      <summary>
              写入 SPSSO 描述符。
            </summary>
      <param name="writer">
                XML 编写器。
              </param>
      <param name="serviceProviderSingleSignOnDescriptor">
                SPSSO 描述符中。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="serviceProviderSingleSignOnDescriptor" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="serviceProviderSingleSignOnDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.ServiceProviderSingleSignOnDescriptor.AssertionConsumerServices" /> 属性为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteSingleSignOnDescriptorAttributes(System.Xml.XmlWriter,System.IdentityModel.Metadata.SingleSignOnDescriptor)">
      <summary>
              编写 SSO 描述符属性。
            </summary>
      <param name="writer">
                XML 编写器。
              </param>
      <param name="singleSignOnDescriptor">
                SSO 描述符中。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="singleSignOnDescriptor" /> 是。<see langword="null" />
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteSingleSignOnDescriptorElements(System.Xml.XmlWriter,System.IdentityModel.Metadata.SingleSignOnDescriptor)">
      <summary>
              写入 SSO 描述符元素。
            </summary>
      <param name="writer">
                XML 编写器。
              </param>
      <param name="singleSignOnDescriptor">
                SSO 描述符中。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="singleSignOnDescriptor" /> 是。<see langword="null" />
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteWebServiceDescriptorAttributes(System.Xml.XmlWriter,System.IdentityModel.Metadata.WebServiceDescriptor)">
      <summary>
              编写 web 服务描述符属性。
            </summary>
      <param name="writer">
                XML 编写器。
              </param>
      <param name="wsDescriptor">
                Web 服务描述符。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="wsDescriptor" /> 是。<see langword="null" />
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.MetadataSerializer.WriteWebServiceDescriptorElements(System.Xml.XmlWriter,System.IdentityModel.Metadata.WebServiceDescriptor)">
      <summary>
              写入一个 web 服务描述符元素。
            </summary>
      <param name="writer">
                XML 编写器。
              </param>
      <param name="wsDescriptor">
                Web 服务描述符。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="wsDescriptor" /> 是。<see langword="null" />
                
                  - 或 -
                
                  <paramref name="wsDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.WebServiceDescriptor.TargetScopes" /> 属性为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="wsDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.WebServiceDescriptor.ClaimTypesOffered" /> 属性为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="wsDescriptor" /> 的 <see cref="P:System.IdentityModel.Metadata.WebServiceDescriptor.TokenTypesOffered" /> 属性为 <see langword="null" />。
                
                  参数 reader/roleDescriptor/roleDescriptor.TargetScopes/roleDescriptor.TargetScopes/roleDescriptor.TokenTypesOffered 为 null。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.Organization.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Metadata.Organization" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.Organization.#ctor(System.IdentityModel.Metadata.LocalizedEntryCollection{System.IdentityModel.Metadata.LocalizedName},System.IdentityModel.Metadata.LocalizedEntryCollection{System.IdentityModel.Metadata.LocalizedName},System.IdentityModel.Metadata.LocalizedEntryCollection{System.IdentityModel.Metadata.LocalizedUri})">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Metadata.Organization" /> 具有指定的名称的集合类的显示名称和 Uri。
            </summary>
      <param name="names">
                一套 <see cref="T:System.IdentityModel.Metadata.LocalizedName" /> ，其中包含此实例的名称。
              </param>
      <param name="displayNames">
                一套 <see cref="T:System.IdentityModel.Metadata.LocalizedName" /> ，其中包含此实例的显示名称。
              </param>
      <param name="urls">
                一套 <see cref="T:System.IdentityModel.Metadata.LocalizedUri" /> ，其中包含此实例的 Url。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  如果任何输入的参数为 null。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Metadata.ProtocolEndpoint.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Metadata.ProtocolEndpoint" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.ProtocolEndpoint.#ctor(System.Uri,System.Uri)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Metadata.ProtocolEndpoint" /> 类，该类具有指定的绑定和位置。
            </summary>
      <param name="binding">
                一个 URI，表示新实例的绑定。
                 初始化 <see cref="P:System.IdentityModel.Metadata.ProtocolEndpoint.Binding" /> 属性。
              </param>
      <param name="location">
                一个 URI，表示新实例的位置。
                 初始化 <see cref="P:System.IdentityModel.Metadata.ProtocolEndpoint.Location" /> 属性。
              </param>
    </member>
    <member name="M:System.IdentityModel.Metadata.RoleDescriptor.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Metadata.RoleDescriptor" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.RoleDescriptor.#ctor(System.Collections.ObjectModel.Collection{System.Uri})">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Metadata.RoleDescriptor" /> 类，该类具有的集合支持的协议。
            </summary>
      <param name="protocolsSupported">
                支持的协议集合中。
                 初始化 <see cref="P:System.IdentityModel.Metadata.RoleDescriptor.ProtocolsSupported" /> 属性。
              </param>
    </member>
    <member name="M:System.IdentityModel.Metadata.SecurityTokenServiceDescriptor.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Metadata.SecurityTokenServiceDescriptor" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.ServiceProviderSingleSignOnDescriptor.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Metadata.ServiceProviderSingleSignOnDescriptor" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.ServiceProviderSingleSignOnDescriptor.#ctor(System.IdentityModel.Metadata.IndexedProtocolEndpointDictionary)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Metadata.ServiceProviderSingleSignOnDescriptor" /> 类，该类具有指定索引的终结点的字典。
            </summary>
      <param name="collection">
                <see cref="T:System.IdentityModel.Metadata.IndexedProtocolEndpointDictionary" /> 此实例对象。
                 初始化 <see cref="P:System.IdentityModel.Metadata.ServiceProviderSingleSignOnDescriptor.AssertionConsumerServices" /> 属性。
              </param>
    </member>
    <member name="M:System.IdentityModel.Metadata.SingleSignOnDescriptor.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Metadata.SingleSignOnDescriptor" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Metadata.WebServiceDescriptor.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Metadata.WebServiceDescriptor" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.OpenObject.#ctor">
      <summary>
              从派生类来初始化调用 <see cref="T:System.IdentityModel.OpenObject" /> 类。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Policy.AuthorizationContext.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Policy.AuthorizationContext" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Policy.AuthorizationContext.CreateDefaultAuthorizationContext(System.Collections.Generic.IList{System.IdentityModel.Policy.IAuthorizationPolicy})">
      <summary>
              对所有指定的授权策略进行评估并创建一个 <see cref="T:System.IdentityModel.Policy.AuthorizationContext" />。
            </summary>
      <param name="authorizationPolicies">
                一个类型为 <see cref="T:System.Collections.Generic.IList`1" /> 的 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" />，它包含授权策略集。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Policy.AuthorizationContext" />，它包含对所有指定授权策略进行评估的结果。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Policy.EvaluationContext.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Policy.EvaluationContext" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Policy.EvaluationContext.AddClaimSet(System.IdentityModel.Policy.IAuthorizationPolicy,System.IdentityModel.Claims.ClaimSet)">
      <summary>
              将一个声明集添加到评估上下文中。
            </summary>
      <param name="policy">
                一个 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" />，表示正将声明添加到评估上下文的授权策略。
              </param>
      <param name="claimSet">
                一个包含一个声明集的 <see cref="T:System.IdentityModel.Claims.ClaimSet" />。
              </param>
    </member>
    <member name="M:System.IdentityModel.Policy.EvaluationContext.RecordExpirationTime(System.DateTime)">
      <summary>
              设置此 <see cref="T:System.IdentityModel.Policy.EvaluationContext" /> 不再有效的日期和时间。
            </summary>
      <param name="expirationTime">
                一个 <see cref="T:System.DateTime" /> 值，指示此 <see cref="T:System.IdentityModel.Policy.AuthorizationContext" /> 对象不再有效的日期和时间。
              </param>
    </member>
    <member name="M:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)">
      <summary>
              评估用户是否符合此授权策略的需求。
            </summary>
      <param name="evaluationContext">
                一个 <see cref="T:System.IdentityModel.Policy.EvaluationContext" />，其中包含授权策略所评估的声明集。
              </param>
      <param name="state">
                一个 <see cref="T:System.Object" />，由表示此授权策略的自定义状态的引用传递。
              </param>
      <returns>
              如果在其他授权策略向 <see langword="false" /> 中添加其他声明时必须调用此授权策略的 <see cref="M:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)" /> 方法，则为 <paramref name="evaluationContext" />；否则为 <see langword="true" />，表示此授权策略不需要任何其他评估。
            </returns>
    </member>
    <member name="M:System.IdentityModel.ProtectedDataCookieTransform.#ctor">
      <summary>
              创建 <see cref="T:System.IdentityModel.ProtectedDataCookieTransform" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.ProtectedDataCookieTransform.Decode(System.Byte[])">
      <summary>
              验证数据保护，并返回解密后的数据。
            </summary>
      <param name="encoded">
                从以前返回数据 <see cref="M:System.IdentityModel.ProtectedDataCookieTransform.Encode(System.Byte[])" /> 方法。
              </param>
      <returns>
              最初用于保护解密的数据。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="encoded" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="encoded" /> 包含零字节。
                </exception>
    </member>
    <member name="M:System.IdentityModel.ProtectedDataCookieTransform.Encode(System.Byte[])">
      <summary>
              保护 （加密） 指定的数据。
            </summary>
      <param name="value">
                要保护 （加密） 数据。
              </param>
      <returns>
              受保护 （加密） 的数据。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="value" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="value" /> 包含零字节。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.AdditionalContext.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.AdditionalContext" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.AdditionalContext.#ctor(System.Collections.Generic.IEnumerable{System.IdentityModel.Protocols.WSTrust.ContextItem})">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.AdditionalContext" /> 与指定的上下文项的类。
            </summary>
      <param name="items">
                <see cref="T:System.IdentityModel.Protocols.WSTrust.ContextItem" /> 对象的 <see cref="T:System.Collections.Generic.IList`1" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="items" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.BinaryExchange.#ctor(System.Byte[],System.Uri)">
      <summary>
              创建的新实例 <see cref="T:System.IdentityModel.Protocols.WSTrust.BinaryExchange" /> 类使用指定的数据和值类型的 URI。
            </summary>
      <param name="binaryData">
                交换的二进制数据。
              </param>
      <param name="valueType">
                一个 <see cref="T:System.Uri" /> 表示二进制数据的值类型。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="binaryData" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="valueType" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="valueType" /> 不是一个绝对 URI。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.BinaryExchange.#ctor(System.Byte[],System.Uri,System.Uri)">
      <summary>
              创建的新实例 <see cref="T:System.IdentityModel.Protocols.WSTrust.BinaryExchange" /> 使用指定的数据、 ValueType URI 和 EncodingType URI。
            </summary>
      <param name="binaryData">
                交换的二进制数据。
              </param>
      <param name="valueType">
                一个 <see cref="T:System.Uri" /> 表示二进制数据的值类型。
              </param>
      <param name="encodingType">
                一个 <see cref="T:System.Uri" /> ，它指定要用于编码的二进制数据的编码类型。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="binaryData" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="encodingType" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="valueType" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="encodingType" /> 不是一个绝对 URI。
                
                  - 或 -
                
                  <paramref name="valueType" /> 不是一个绝对 URI。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.ContextItem.#ctor(System.Uri)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.ContextItem" /> 类具有指定名称的 URI。
            </summary>
      <param name="name">
                一个 <see cref="T:System.Uri" /> ，该值指示上下文项名称。
              </param>
      <exception cref="T:System.ArgumentNull">
                  <paramref name="name" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Argument">
                  <paramref name="name" /> 不是一个绝对 URI。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.ContextItem.#ctor(System.Uri,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.ContextItem" /> 类，具有指定名称的 URI 和值。
            </summary>
      <param name="name">
                一个 <see cref="T:System.Uri" /> ，该值指示上下文项名称。
              </param>
      <param name="value">
                上下文项值。
                 可以为 <see langword="null" />。
              </param>
      <exception cref="T:System.ArgumentNull">
                  <paramref name="name" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Argument">
                  <paramref name="name" /> 不是一个绝对 URI。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.ContextItem.#ctor(System.Uri,System.String,System.Uri)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.ContextItem" /> 类，具有指定名称的 URI、 值和范围 URI。
            </summary>
      <param name="name">
                一个 <see cref="T:System.Uri" /> ，该值指示上下文项名称。
              </param>
      <param name="value">
                上下文项值。
                 可以为 <see langword="null" />。
              </param>
      <param name="scope">
                上下文项的作用域。
                 可以为 <see langword="null" />。
              </param>
      <exception cref="T:System.ArgumentNull">
                  <paramref name="name" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Argument">
                  <paramref name="name" /> 不是一个绝对 URI。
                
                  - 或 -
                
                  <paramref name="scope" /> 不是 <see langword="null" /> 并不是绝对 URI。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.EndpointReference.#ctor(System.String)">
      <summary>
              用指定的 URI 初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.EndpointReference" /> 类的新实例。
            </summary>
      <param name="uri">
                绝对 URI，指定的终结点引用的地址。
                 初始化 <see cref="P:System.IdentityModel.Protocols.WSTrust.EndpointReference.Uri" /> 属性。
              </param>
      <exception cref="T:System.ArgumentException">
                  <paramref name="uri" /> 不是绝对 URI。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="uri" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.EndpointReference.ReadFrom(System.Xml.XmlDictionaryReader)">
      <summary>
              从指定的 XML 字典读取器读取 wsa:EndpointReference 元素。
            </summary>
      <param name="reader">
                从中进行读取的终结点引用 XML 字典读取器。
              </param>
      <returns>
              从 XML 字典读取器读取终结点引用或 <see langword="null" /> 如果无法读取 wsa:EndpointReference 元素。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.EndpointReference.ReadFrom(System.Xml.XmlReader)">
      <summary>
              从指定的 XML 读取器读取 wsa:EndpointReference 元素。
            </summary>
      <param name="reader">
                从中进行读取的终结点引用的 XML 读取器。
              </param>
      <returns>
              从 XML 字典读取器读取终结点引用或 <see langword="null" /> 如果无法读取 wsa:EndpointReference 元素。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.EndpointReference.WriteTo(System.Xml.XmlWriter)">
      <summary>
              写入 <see cref="T:System.IdentityModel.Protocols.WSTrust.EndpointReference" /> 作为 &lt; wsa:EndpointReference &gt; 元素指定的 XML 编写器。
            </summary>
      <param name="writer">
                要向其写入的终结点引用的 XML 编写器。
              </param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.Entropy.#ctor(System.Byte[])">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.Entropy" /> 机密的二进制格式发送平均信息量的类。
            </summary>
      <param name="secret">
                包含密钥材料的字节数组。
              </param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.Entropy.#ctor(System.Byte[],System.IdentityModel.Tokens.EncryptingCredentials)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.Entropy" /> 用于加密密钥的格式发送平均信息量的类。
            </summary>
      <param name="secret">
                包含密钥材料的字节数组。
              </param>
      <param name="wrappingCredentials">
                <see cref="T:System.IdentityModel.Tokens.EncryptingCredentials" /> 表示用于加密的密钥材料的凭据。
              </param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.Entropy.#ctor(System.IdentityModel.Protocols.WSTrust.ProtectedKey)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.Entropy" /> 类与指定受保护的密钥。
            </summary>
      <param name="protectedKey">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.ProtectedKey" /> 表示受保护的密钥可以是二进制或者机密或加密的密钥。
              </param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.Entropy.#ctor(System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.Entropy" /> 类随机生成的字节数。
            </summary>
      <param name="entropySizeInBits">
                密钥材料内平均信息量的 entropySizeInBits。
              </param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.InvalidRequestException.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.InvalidRequestException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.InvalidRequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              用序列化数据初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.InvalidRequestException" /> 类的新实例。
            </summary>
      <param name="info">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，其中包含序列化的对象数据。
              </param>
      <param name="context">
                一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，其中包含有关源或目标的上下文信息。
              </param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.InvalidRequestException.#ctor(System.String)">
      <summary>
              用指定的错误消息初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.InvalidRequestException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.InvalidRequestException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.InvalidRequestException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="innerException">
                <see cref="T:System.Exception" /> 导致当前异常。
                 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。
              </param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.Lifetime.#ctor(System.DateTime,System.DateTime)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.Lifetime" /> 类，具有指定的创建和过期时间。
            </summary>
      <param name="created">
                一个 <see cref="T:System.DateTime" /> ，表示令牌的创建时间以 utc 为单位。
              </param>
      <param name="expires">
                一个 <see cref="T:System.DateTime" /> ，它表示令牌的过期时间以 utc 为单位。
              </param>
      <exception cref="T:System.ArgumentException">
                  指定的时间 <paramref name="created" /> 之前指定的时间发生 <paramref name="expires" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.Lifetime.#ctor(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.Lifetime" /> 类，具有指定的创建和过期时间。
            </summary>
      <param name="created">
                一个 <see cref="T:System.DateTime" /> ，指定的令牌创建时间以 utc 为单位。
                 可以为 <see langword="null" />。
              </param>
      <param name="expires">
                一个 <see cref="T:System.DateTime" /> ，指定令牌的过期时间以 utc 为单位。
                 可以为 <see langword="null" />。
              </param>
      <exception cref="T:System.ArgumentException">
                  指定的时间 <paramref name="created" /> 之前指定的时间发生 <paramref name="expires" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.Participants.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.Participants" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.ProtectedKey.#ctor(System.Byte[])">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.ProtectedKey" /> 未加密的类。
            </summary>
      <param name="secret">
                一个数组 <see cref="T:System.Byte" /> ，包含要保护的密钥材料。
              </param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.ProtectedKey.#ctor(System.Byte[],System.IdentityModel.Tokens.EncryptingCredentials)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.ProtectedKey" /> 类使用指定的加密凭据。
            </summary>
      <param name="secret">
                一个数组 <see cref="T:System.Byte" /> ，包含要保护的密钥材料。
              </param>
      <param name="wrappingCredentials">
                <see cref="T:System.IdentityModel.Tokens.EncryptingCredentials" /> ，其中包含用于加密的密钥材料的凭据。
              </param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.ProtectedKey.GetKeyBytes">
      <summary>
              获取密钥材料。
            </summary>
      <returns>
              一个数组 <see cref="T:System.Byte" /> 包含密钥材料。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.Renewing.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.Renewing" /><see cref="T:System.IdentityModel.Protocols.WSTrust.Renewing" /> 类使用默认属性值。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.Renewing.#ctor(System.Boolean,System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.Renewing" /><see cref="T:System.IdentityModel.Protocols.WSTrust.Renewing" /> 类具有指定值。
            </summary>
      <param name="allowRenewal">
                <see langword="true" /> 如果允许续订;否则为 <see langword="false" />。
              </param>
      <param name="okForRenewalAfterExpiration">
                <see langword="true" /> 如果可以续订请求的令牌，过期; 后否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestClaim.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestClaim" /> 与指定的声明类型的类。
            </summary>
      <param name="claimType">
                表示声明类型 URI。
              </param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestClaim.#ctor(System.String,System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestClaim" /> 类具有指定的声明类型和值，该值指示声明是否可选。
            </summary>
      <param name="claimType">
                表示声明类型 URI。
              </param>
      <param name="isOptional">
                <see langword="true" /> 如果声明是可选的响应中;否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestClaim.#ctor(System.String,System.Boolean,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestClaim" /> 用指定的声明类型、 声明值和一个值，该值指示声明是否可选。
            </summary>
      <param name="claimType">
                表示声明类型 URI。
              </param>
      <param name="isOptional">
                <see langword="true" /> 如果声明是可选的响应中;否则为 <see langword="false" />。
              </param>
      <param name="value">
                声明的值。
              </param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestClaimCollection.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestClaimCollection" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestedProofToken.#ctor(System.Byte[])">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestedProofToken" /> 类使用指定的密钥材料。
            </summary>
      <param name="secret">
                一个数组 <see cref="T:System.Byte" /> 包含密钥材料。
              </param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestedProofToken.#ctor(System.Byte[],System.IdentityModel.Tokens.EncryptingCredentials)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestedProofToken" /> 类使用指定的密钥材料和加密凭据。
            </summary>
      <param name="secret">
                一个数组 <see cref="T:System.Byte" /> 包含密钥材料。
              </param>
      <param name="wrappingCredentials">
                一个 <see cref="T:System.IdentityModel.SecurityTokenService.EncryptingCredentials" /> 表示用于加密的密钥材料的凭据。
              </param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestedProofToken.#ctor(System.IdentityModel.Protocols.WSTrust.ProtectedKey)">
      <summary>
              使用指定的 <see cref="T:System.IdentityModel.Protocols.WSTrust.ProtectedKey" /> 对象初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestedProofToken" /> 类的新实例。
            </summary>
      <param name="protectedKey">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.ProtectedKey" /> ，表示的键，可以是二进制密钥或加密的密钥。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="protectedKey" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestedProofToken.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestedProofToken" /> 类使用指定的计算密钥算法。
            </summary>
      <param name="computedKeyAlgorithm">
                一个字符串，包含一个 URI，指示用于计算组合的平均信息量用例中的会话密钥的算法。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="computedKeyAlgorithm" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken.#ctor(System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken" /> 类使用颁发的令牌。
            </summary>
      <param name="token">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> 表示请求的安全令牌。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="token" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken.#ctor(System.Xml.XmlElement)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken" /> 类使用令牌的 XML。
            </summary>
      <param name="tokenAsXml">
                <see cref="T:System.Xml.XmlElement" /> ，其中包含的 XML 表示形式的请求的安全令牌。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="tokenAsXml" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 与指定的请求类型的类。
            </summary>
      <param name="requestType">
                一个包含请求类型 URI 的字符串。
              </param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.#ctor(System.String,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 与指定的请求类型的类。
            </summary>
      <param name="requestType">
                一个包含请求类型 URI 的字符串。
              </param>
      <param name="keyType">
                一个包含密钥类型 URI 的字符串。
                 这应该是一个定义的常量 <see cref="T:System.IdentityModel.Protocols.WSTrust.KeyTypes" /> 类。
              </param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse.#ctor(System.IdentityModel.Protocols.WSTrust.WSTrustMessage)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 类根据指定的请求消息 (RST)。
            </summary>
      <param name="message">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustMessage" /> 该对象表示请求 (RST)。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="message" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.Status.#ctor(System.String,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.Status" /> 类使用指定的状态代码和原因。
            </summary>
      <param name="code">
                一个字符串，包含状态代码的 URI。
              </param>
      <param name="reason">
                一个字符串，包含用户可读的原因。
                 原因是可选的;可以是 <see langword="null" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="code" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.UseKey.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.UseKey" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.UseKey.#ctor(System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.UseKey" /> 类使用指定的安全密钥标识符。
            </summary>
      <param name="ski">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> ，表示应使用的现有键。
              </param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.UseKey.#ctor(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.UseKey" /> 类使用指定的安全密钥标识符和安全令牌。
            </summary>
      <param name="ski">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> ，表示应使用的现有键。
              </param>
      <param name="token">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> ，表示应使用的现有键。
              </param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.UseKey.#ctor(System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.UseKey" /> 类使用的指定的安全令牌。
            </summary>
      <param name="token">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> ，表示应使用的现有键。
              </param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13RequestSerializer.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrust13RequestSerializer" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13RequestSerializer.CanRead(System.Xml.XmlReader)">
      <summary>
              检查给定的读取器是否定位在 <see langword="RequestSecurityToken" /> 命名空间"http://docs.oasis-open.org/ws-sx/ws-trust/200512"元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 从中进行读取的对象。
              </param>
      <returns>
              <see langword="true" /> 如果读取器定位在命名空间"http://docs.oasis-open.org/ws-sx/ws-trust/200512"; 的 RequestSecurityToken 元素否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13RequestSerializer.ReadSecondaryParameters(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>
              以进行读取的特例 <see langword="SecondaryParameters" /> WS 信任 1.3 RST 中。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 对象，将光标指向 <see langword="SecondaryParameters" /> 内 RST 元素。
              </param>
      <param name="context">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> ，其中包含当前序列化上下文。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> ，其中包含在 RST 中找到 SecondaryParameters。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="context" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException">
                  一个内部 <see langword="SecondaryParameter" /> 处理外部时找到的元素 <see langword="SecondaryParameter" /> 元素。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13RequestSerializer.ReadXml(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>
              反序列化从 RST <see cref="T:System.Xml.XmlReader" /> 对象传递给 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象。
            </summary>
      <param name="reader">
                通过 RST XML 读取器。
              </param>
      <param name="context">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> ，其中包含当前序列化上下文。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象反序列化是否成功。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="context" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException">
                  分析 RST 出错。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13RequestSerializer.ReadXmlElement(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>
              读取 RST 中的子元素。
               基类方法的重写。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 对象位于要读取 RST 内的元素。
              </param>
      <param name="rst">
                <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 正在从读取器填充的对象。
              </param>
      <param name="context">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> ，其中包含当前序列化上下文。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="rst" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="context" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException">
                  无法反序列化当前的参数。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13RequestSerializer.WriteKnownRequestElement(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.Xml.XmlWriter,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>
              将受支持的元素写入上 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 写入流的对象。
            </summary>
      <param name="rst">
                <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象被序列化。
              </param>
      <param name="writer">
                要写入的 <see cref="T:System.Xml.XmlWriter" /> 对象。
              </param>
      <param name="context">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> ，其中包含当前序列化上下文。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="rst" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="context" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13RequestSerializer.WriteXml(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.Xml.XmlWriter,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>
              将序列化为指定 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象插入 <see cref="T:System.Xml.XmlWriter" /> 对象。
            </summary>
      <param name="request">
                <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 要序列化对象。
              </param>
      <param name="writer">
                要写入的 <see cref="T:System.Xml.XmlWriter" /> 对象。
              </param>
      <param name="context">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> ，其中包含当前序列化上下文。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="request" /> 为 <see langword="null" />。
                
                  - 或 - 
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 - 
                
                  <paramref name="context" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13RequestSerializer.WriteXmlElement(System.Xml.XmlWriter,System.String,System.Object,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>
              将指定的 RST 参数写入到传出流。
               基类方法的重写。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 对象传递给该序列 RST。
              </param>
      <param name="elementName">
                要写入的元素本地名称。
              </param>
      <param name="elementValue">
                元素的值。
              </param>
      <param name="rst">
                <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 正在序列化的对象。
              </param>
      <param name="context">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> ，其中包含当前序列化上下文。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="rst" /> 为 <see langword="null" />。
                
                  - 或 - 
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 - 
                
                  <paramref name="context" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="elementName" /> 为 <see langword="null" /> 或空字符串。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13ResponseSerializer.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrust13ResponseSerializer" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13ResponseSerializer.CanRead(System.Xml.XmlReader)">
      <summary>
              检查指定的 XML 读取器是否定位在 RequestSecurityTokenResponse 或命名空间"http://docs.oasis-open.org/ws-sx/ws-trust/200512"的 RequestSecurityTokenResponseCollection 元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 从中进行读取的对象。
              </param>
      <returns>
              <see langword="true" /> 如果读取器定位在 RequestSecurityTokenResponse 或命名空间"http://docs.oasis-open.org/ws-sx/ws-trust/200512"; 的 RequestSecurityTokenResponseCollection 元素否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13ResponseSerializer.ReadXml(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>
              反序列化从 RSTR <see cref="T:System.Xml.XmlReader" /> 对象传递给 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象。
            </summary>
      <param name="reader">
                通过 RSTR XML 读取器。
              </param>
      <param name="context">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> ，其中包含当前序列化上下文。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象反序列化是否成功。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="context" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13ResponseSerializer.ReadXmlElement(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>
              读取 RSTR 中的特定子元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 对象位于要读取 RSTR 内的元素。
              </param>
      <param name="rstr">
                <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 正在填充从读取器的元素。
              </param>
      <param name="context">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> ，其中包含当前序列化上下文。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                
                  - 或 - 
                
                  <paramref name="rstr" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="context" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException">
                  无法反序列化当前的参数。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13ResponseSerializer.WriteKnownResponseElement(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.Xml.XmlWriter,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>
              将受支持的元素写入上 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象传递给传出流。
            </summary>
      <param name="rstr">
                <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 要序列化对象。
              </param>
      <param name="writer">
                要写入的 <see cref="T:System.Xml.XmlWriter" /> 对象。
              </param>
      <param name="context">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> ，其中包含当前序列化上下文。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="rstr" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="context" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13ResponseSerializer.WriteXml(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.Xml.XmlWriter,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>
              将序列化为指定 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象插入 <see cref="T:System.Xml.XmlWriter" /> 对象。
            </summary>
      <param name="response">
                <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 要序列化对象。
              </param>
      <param name="writer">
                要写入的 <see cref="T:System.Xml.XmlWriter" /> 对象。
              </param>
      <param name="context">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> ，其中包含当前序列化上下文。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="request" /> 为 <see langword="null" />。
                
                  - 或 - 
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 - 
                
                  <paramref name="context" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrust13ResponseSerializer.WriteXmlElement(System.Xml.XmlWriter,System.String,System.Object,System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>
              将指定的 RSTR 元素写入到传出流。
               基类方法的重写。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> RSTR 正在序列化成对象。
              </param>
      <param name="elementName">
                要写入的元素本地名称。
              </param>
      <param name="elementValue">
                元素的值。
              </param>
      <param name="rstr">
                <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 正在序列化的对象。
              </param>
      <param name="context">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> ，其中包含当前序列化上下文。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="rstr" /> 为 <see langword="null" />。
                
                  - 或 - 
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 - 
                
                  <paramref name="context" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  elementname <see langword="null" /> 或空字符串。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005RequestSerializer.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005RequestSerializer" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005RequestSerializer.CanRead(System.Xml.XmlReader)">
      <summary>
              检查给定的读取器是否定位在命名空间"http://schemas.xmlsoap.org/ws/2005/02/trust"的 RequestSecurityToken 元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 从中进行读取的对象。
              </param>
      <returns>
              <see langword="true" /> 如果读取器定位在命名空间"http://schemas.xmlsoap.org/ws/2005/02/trust"; 的 RequestSecurityToken 元素否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005RequestSerializer.ReadXml(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>
              反序列化从 RST <see cref="T:System.Xml.XmlReader" /> 对象传递给 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象。
            </summary>
      <param name="reader">
                通过 RST XML 读取器。
              </param>
      <param name="context">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> ，其中包含当前序列化上下文。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象反序列化是否成功。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="context" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException">
                  分析 RST 出错。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005RequestSerializer.ReadXmlElement(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>
              读取 RST 中的子元素。
               基类方法的重写。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 对象位于要读取 RST 内的元素。
              </param>
      <param name="rst">
                <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 正在从读取器填充的对象。
              </param>
      <param name="context">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> ，其中包含当前序列化上下文。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="rst" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="context" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException">
                  无法反序列化当前的参数。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005RequestSerializer.WriteKnownRequestElement(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.Xml.XmlWriter,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>
              将受支持的元素写入上 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 写入流的对象。
            </summary>
      <param name="rst">
                <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象被序列化。
              </param>
      <param name="writer">
                要写入的 <see cref="T:System.Xml.XmlWriter" /> 对象。
              </param>
      <param name="context">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> ，其中包含当前序列化上下文。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="rst" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="context" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005RequestSerializer.WriteXml(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.Xml.XmlWriter,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>
              将序列化为指定 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象插入 <see cref="T:System.Xml.XmlWriter" /> 对象。
            </summary>
      <param name="request">
                <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 要序列化对象。
              </param>
      <param name="writer">
                要写入的 <see cref="T:System.Xml.XmlWriter" /> 对象。
              </param>
      <param name="context">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> ，其中包含当前序列化上下文。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="request" /> 为 <see langword="null" />。
                
                  - 或 - 
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 - 
                
                  <paramref name="context" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005RequestSerializer.WriteXmlElement(System.Xml.XmlWriter,System.String,System.Object,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>
              将指定的 RST 参数写入到传出流。
               基类方法的重写。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 对象传递给该序列 RST。
              </param>
      <param name="elementName">
                要写入的元素本地名称。
              </param>
      <param name="elementValue">
                元素的值。
              </param>
      <param name="rst">
                <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 正在序列化的对象。
              </param>
      <param name="context">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> ，其中包含当前序列化上下文。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="rst" /> 为 <see langword="null" />。
                
                  - 或 - 
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 - 
                
                  <paramref name="context" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="elementName" /> 为 <see langword="null" /> 或空字符串。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ResponseSerializer.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ResponseSerializer" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ResponseSerializer.CanRead(System.Xml.XmlReader)">
      <summary>
              检查指定的 XML 读取器是否定位在命名空间"http://schemas.xmlsoap.org/ws/2005/02/trust"的 RequestSecurityTokenResponse 元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 从中进行读取的对象。
              </param>
      <returns>
              <see langword="true" /> 如果读取器定位在命名空间"http://schemas.xmlsoap.org/ws/2005/02/trust"; 的 RequestSecurityTokenResponse 元素否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ResponseSerializer.ReadXml(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>
              反序列化从 RSTR <see cref="T:System.Xml.XmlReader" /> 对象传递给 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象。
            </summary>
      <param name="reader">
                通过 RSTR XML 读取器。
              </param>
      <param name="context">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> ，其中包含当前序列化上下文。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象反序列化是否成功。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="context" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ResponseSerializer.ReadXmlElement(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>
              重写读取 RSTR 中的特定子元素的基类。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 对象位于要读取 RSTR 内的元素。
              </param>
      <param name="rstr">
                <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 正在填充从读取器的元素。
              </param>
      <param name="context">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> ，其中包含当前序列化上下文。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                
                  - 或 - 
                
                  <paramref name="rstr" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="context" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException">
                  无法反序列化当前的参数。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ResponseSerializer.WriteKnownResponseElement(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.Xml.XmlWriter,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>
              将受支持的元素写入上 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象传递给传出流。
            </summary>
      <param name="rstr">
                <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 要序列化对象。
              </param>
      <param name="writer">
                要写入的 <see cref="T:System.Xml.XmlWriter" /> 对象。
              </param>
      <param name="context">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> ，其中包含当前序列化上下文。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="rstr" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="context" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ResponseSerializer.WriteXml(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.Xml.XmlWriter,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>
              将序列化为指定 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象插入 <see cref="T:System.Xml.XmlWriter" /> 对象。
            </summary>
      <param name="response">
                <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 要序列化对象。
              </param>
      <param name="writer">
                要写入的 <see cref="T:System.Xml.XmlWriter" /> 对象。
              </param>
      <param name="context">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> ，其中包含当前序列化上下文。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="request" /> 为 <see langword="null" />。
                
                  - 或 - 
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 - 
                
                  <paramref name="context" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ResponseSerializer.WriteXmlElement(System.Xml.XmlWriter,System.String,System.Object,System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>
              将指定的 RSTR 元素写入到传出流。
               基类方法的重写。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> RSTR 正在序列化成对象。
              </param>
      <param name="elementName">
                要写入的元素本地名称。
              </param>
      <param name="elementValue">
                元素的值。
              </param>
      <param name="rstr">
                <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 正在序列化的对象。
              </param>
      <param name="context">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> ，其中包含当前序列化上下文。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="rstr" /> 为 <see langword="null" />。
                
                  - 或 - 
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 - 
                
                  <paramref name="context" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  elementname <see langword="null" /> 或空字符串。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustMessage" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer.CanRead(System.Xml.XmlReader)">
      <summary>
              当在派生类中重写，检查指定的 XML 读取器是否定位在 WS 信任 RequestSecurityToken 元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 从中进行读取的对象。
              </param>
      <returns>
              <see langword="true" /> 如果读取器定位在序列化程序可读，则 RST 元素否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer.CreateRequestSecurityToken">
      <summary>
              创建的一个实例 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 此类可以序列化或反序列化的类。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer.ReadCustomElement(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>
              当在派生类中重写，将读取自定义元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 定位在当前元素上的对象。
              </param>
      <param name="context">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> ，其中包含当前序列化上下文。
              </param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer.ReadXml(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>
              当在派生类中重写，反序列化从 RST <see cref="T:System.Xml.XmlReader" /> 对象传递给 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象。
            </summary>
      <param name="reader">
                通过 RST XML 读取器。
              </param>
      <param name="context">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> ，其中包含当前序列化上下文。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象反序列化是否成功。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer.ReadXmlElement(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>
              当在派生类中重写，将读取 RST 中的子元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 对象位于要读取 RST 内的元素。
              </param>
      <param name="requestSecurityToken">
                <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 正在从读取器填充的对象。
              </param>
      <param name="context">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> ，其中包含当前序列化上下文。
              </param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer.Validate(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)">
      <summary>
              验证 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 消息反序列化的对象。
            </summary>
      <param name="requestSecurityToken">
                <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 要验证对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="requestSecurityToken" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  非对称密钥的 WS 信任问题请求未指定 UseKey 元素。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer.WriteKnownRequestElement(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.Xml.XmlWriter,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>
              当在派生类中重写时写入受支持的元素上 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 写入流的对象。
            </summary>
      <param name="requestSecurityToken">
                <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象被序列化。
              </param>
      <param name="writer">
                要写入的 <see cref="T:System.Xml.XmlWriter" /> 对象。
              </param>
      <param name="context">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> ，其中包含当前序列化上下文。
              </param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer.WriteXml(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.Xml.XmlWriter,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>
              当在派生类中重写序列化指定 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象插入 <see cref="T:System.Xml.XmlWriter" /> 对象。
            </summary>
      <param name="request">
                <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 要序列化对象。
              </param>
      <param name="writer">
                要写入的 <see cref="T:System.Xml.XmlWriter" /> 对象。
              </param>
      <param name="context">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> ，其中包含当前序列化上下文。
              </param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer.WriteXmlElement(System.Xml.XmlWriter,System.String,System.Object,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>
              当在派生类中重写时写入 RST 中的子元素。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 对象传递给该序列 RST。
              </param>
      <param name="elementName">
                要写入的元素本地名称。
              </param>
      <param name="elementValue">
                元素的值。
              </param>
      <param name="requestSecurityToken">
                <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 正在序列化的对象。
              </param>
      <param name="context">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> ，其中包含当前序列化上下文。
              </param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer.CanRead(System.Xml.XmlReader)">
      <summary>
              当在派生类中重写，检查指定的 XML 读取器是否定位在 WS 信任 RequestSecurityTokenResponse 元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 从中进行读取的对象。
              </param>
      <returns>
              <see langword="true" /> 如果读取器定位在此序列化程序可以读取; RSTR 元素否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer.CreateInstance">
      <summary>
              创建的一个实例 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 此类可以序列化或反序列化的类。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer.ReadXml(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>
              当在派生类中重写，反序列化从 RSTR <see cref="T:System.Xml.XmlReader" /> 对象传递给 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象。
            </summary>
      <param name="reader">
                通过 RSTR XML 读取器。
              </param>
      <param name="context">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> ，其中包含当前序列化上下文。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象反序列化是否成功。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer.ReadXmlElement(System.Xml.XmlReader,System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>
              当在中重写派生的类读取 RSTR 中的子元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 对象位于要读取 RSTR 内的元素。
              </param>
      <param name="requestSecurityTokenResponse">
                <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 正在填充从读取器的元素。
              </param>
      <param name="context">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> ，其中包含当前序列化上下文。
              </param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer.Validate(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse)">
      <summary>
              验证 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 消息反序列化的对象。
            </summary>
      <param name="requestSecurityTokenResponse">
                <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 要验证对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="requestSecurityTokenResponse" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer.WriteKnownResponseElement(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.Xml.XmlWriter,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>
              当在派生类中重写时写入受支持的元素上 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象传递给传出流。
            </summary>
      <param name="requestSecurityTokenResponse">
                <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 要序列化对象。
              </param>
      <param name="writer">
                要向其中进行写入的 <see cref="T:System.Xml.XmlWriter" />。
              </param>
      <param name="context">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> ，其中包含当前序列化上下文。
              </param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer.WriteXml(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.Xml.XmlWriter,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>
              当在派生类中重写序列化指定 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象插入 <see cref="T:System.Xml.XmlWriter" /> 对象。
            </summary>
      <param name="response">
                <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 要序列化对象。
              </param>
      <param name="writer">
                要向其中进行写入的 <see cref="T:System.Xml.XmlWriter" />。
              </param>
      <param name="context">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> ，其中包含当前序列化上下文。
              </param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer.WriteXmlElement(System.Xml.XmlWriter,System.String,System.Object,System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>
              当在派生类中重写时写入 RSTR 中的子元素。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> RSTR 正在序列化成对象。
              </param>
      <param name="elementName">
                要写入的元素本地名称。
              </param>
      <param name="elementValue">
                元素的值。
              </param>
      <param name="requestSecurityTokenResponse">
                <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 正在序列化的对象。
              </param>
      <param name="context">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> ，其中包含当前序列化上下文。
              </param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext.#ctor(System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> 类与指定 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager" /> 对象。
            </summary>
      <param name="securityTokenHandlerCollectionManager">
                <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager" /> 对象，其中包含的一套 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> WS 信任消息中找到要用于序列化和验证令牌的对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="securityTokenHandlerCollectionManager" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext.#ctor(System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager,System.IdentityModel.Selectors.SecurityTokenResolver,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> 类与指定 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager" />, ，<see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />, ，和 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> 对象。
            </summary>
      <param name="securityTokenHandlerCollectionManager">
                <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager" /> 对象，其中包含的一套 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> WS 信任消息中找到要用于序列化和验证令牌的对象。
              </param>
      <param name="securityTokenResolver">
                <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> 对象，用于解决在 WS 信任消息的大多数元素中找到的安全令牌引用。
              </param>
      <param name="useKeyTokenResolver">
                <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> 要用来解决在 RST 消息的 wst:UseKey 元素，以及在 RST 消息中找到的 wst:RenewTarget 元素中找到的令牌的引用的安全对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="securityTokenHandlerCollectionManager" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="securityTokenResolver" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="useKeyTokenResolver" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException" /> 的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              用序列化数据初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException" /> 类的新实例。
            </summary>
      <param name="info">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，其中包含序列化的对象数据。
              </param>
      <param name="context">
                一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，其中包含有关源或目标的上下文信息。
              </param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException.#ctor(System.String)">
      <summary>
              用指定的错误消息初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
    </member>
    <member name="M:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="inner">
                <see cref="T:System.Exception" /> 导致当前异常。
                 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。
              </param>
    </member>
    <member name="M:System.IdentityModel.RequestException.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.RequestException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.RequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              用序列化数据初始化 <see cref="T:System.IdentityModel.RequestException" /> 类的新实例。
            </summary>
      <param name="info">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，其中包含序列化的对象数据。
              </param>
      <param name="context">
                一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，其中包含有关源或目标的上下文信息。
              </param>
    </member>
    <member name="M:System.IdentityModel.RequestException.#ctor(System.String)">
      <summary>
              用指定的错误消息初始化 <see cref="T:System.IdentityModel.RequestException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
    </member>
    <member name="M:System.IdentityModel.RequestException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IdentityModel.RequestException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="innerException">
                <see cref="T:System.Exception" /> 导致当前异常。
                 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。
              </param>
    </member>
    <member name="M:System.IdentityModel.RequestFailedException.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.RequestFailedException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.RequestFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              用序列化数据初始化 <see cref="T:System.IdentityModel.RequestFailedException" /> 类的新实例。
            </summary>
      <param name="info">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，其中包含序列化的对象数据。
              </param>
      <param name="context">
                一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，其中包含有关源或目标的上下文信息。
              </param>
    </member>
    <member name="M:System.IdentityModel.RequestFailedException.#ctor(System.String)">
      <summary>
              用指定的错误消息初始化 <see cref="T:System.IdentityModel.RequestFailedException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
    </member>
    <member name="M:System.IdentityModel.RequestFailedException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IdentityModel.RequestFailedException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="innerException">
                <see cref="T:System.Exception" /> 导致当前异常。
                 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。
              </param>
    </member>
    <member name="M:System.IdentityModel.RsaEncryptionCookieTransform.#ctor(System.Security.Cryptography.RSA)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.RsaEncryptionCookieTransform" /> 类，该类使用指定的密钥进行加密和解密。
            </summary>
      <param name="key">
                要用作默认加密和解密密钥的密钥。
                 初始化 <see cref="P:System.IdentityModel.RsaEncryptionCookieTransform.DecryptionKeys" /> 和 <see cref="P:System.IdentityModel.RsaEncryptionCookieTransform.EncryptionKey" /> 属性。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.RsaEncryptionCookieTransform.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.RsaEncryptionCookieTransform" /> 类，该类使用指定的 X.509 证书的私钥进行加密和解密。
            </summary>
      <param name="certificate">
                使用其私钥进行加密和解密证书。
              
                证书的私钥将用作默认加密和解密密钥。
                 初始化 <see cref="P:System.IdentityModel.RsaEncryptionCookieTransform.DecryptionKeys" /> 和 <see cref="P:System.IdentityModel.RsaEncryptionCookieTransform.EncryptionKey" /> 属性。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="certificate" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="certificate" /> 没有私钥。
                
                  - 或 -
                
                  私钥不是 RSA。
                </exception>
    </member>
    <member name="M:System.IdentityModel.RsaEncryptionCookieTransform.Decode(System.Byte[])">
      <summary>
              对指定的数据进行解密通过使用提供的 RSA 密钥进行解密 AES 密钥，对 cookie 进行解密。
            </summary>
      <param name="encoded">
                编码的数据
              </param>
      <returns>
              已解码的数据
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="encoded" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="encoded" /> 包含零字节。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  该平台不支持请求的算法。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  没有任何解密密钥或所有键都不都匹配。
                </exception>
    </member>
    <member name="M:System.IdentityModel.RsaEncryptionCookieTransform.Encode(System.Byte[])">
      <summary>
              对指定的数据进行编码。
               对数据进行加密使用的默认加密算法 (aes-256)，然后使用 RSA 加密的 AES 密钥，并追加的 RSA 公钥。
            </summary>
      <param name="value">
                要编码的数据
              </param>
      <returns>
              编码的数据
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="value" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="value" /> 包含零字节。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.IdentityModel.RsaEncryptionCookieTransform.EncryptionKey" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.RsaSignatureCookieTransform.#ctor(System.Security.Cryptography.RSA)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.RsaSignatureCookieTransform" /> 类通过使用指定的 RSA 密钥。
            </summary>
      <param name="key">
                RSA 密钥将用作默认签名和验证密钥。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.RsaSignatureCookieTransform.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.RsaSignatureCookieTransform" /> 类通过使用指定的证书的私钥。
            </summary>
      <param name="certificate">
                证书的私钥是可用于签名和验证。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="certificate" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="certificate" /> 没有私钥
                
                  - 或 -
                
                  私匙 <paramref name="certificate" /> 不是 RSA 密钥。
                </exception>
    </member>
    <member name="M:System.IdentityModel.RsaSignatureCookieTransform.Decode(System.Byte[])">
      <summary>
              验证指定的签名，并返回原始的未签名数据。
            </summary>
      <param name="encoded">
                从以前返回数据 <see cref="M:System.IdentityModel.RsaSignatureCookieTransform.Encode(System.Byte[])" /> 方法。
              </param>
      <returns>
              原始数据 （无符号）。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="encoded" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="encoded" /> 包含零字节。
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  该签名无效。
                </exception>
      <exception cref="T:System.FormatException">
                  在格式不正确的数据。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  没有任何验证密钥。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  该平台不支持指定的算法。
                </exception>
    </member>
    <member name="M:System.IdentityModel.RsaSignatureCookieTransform.Encode(System.Byte[])">
      <summary>
              指定的数据进行签名。
            </summary>
      <param name="value">
                要签名的数据。
              </param>
      <returns>
              已签名的数据。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="value" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="value" /> 包含零字节。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.IdentityModel.RsaSignatureCookieTransform.SigningKey" /> 属性为 <see langword="null" />。
                
                  - 或 -
                
                  由指定的密钥 <see cref="P:System.IdentityModel.RsaSignatureCookieTransform.SigningKey" /> 属性不能作为分配 <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" />。
                
                  - 或 -
                
                  由指定的密钥 <see cref="P:System.IdentityModel.RsaSignatureCookieTransform.SigningKey" /> 属性不包含私钥。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  操作系统不支持指定的算法。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Scope.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Scope" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Scope.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Scope" /> 类，具有指定的 appliesTo 地址。
            </summary>
      <param name="appliesToAddress">
                信赖方 appliesTo 地址。
                 这通常是一个 URI。
              </param>
    </member>
    <member name="M:System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.EncryptingCredentials)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Scope" /> 类具有指定的 appliesTo 地址和加密凭据。
            </summary>
      <param name="appliesToAddress">
                信赖方 appliesTo 地址。
                 这通常是一个 URI。
              </param>
      <param name="encryptingCredentials">
                信赖方的加密的凭据。
              </param>
    </member>
    <member name="M:System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Scope" /> 类具有指定的 appliesTo 地址和签名的凭据。
            </summary>
      <param name="appliesToAddress">
                信赖方 appliesTo 地址。
                 这通常是一个 URI。
              </param>
      <param name="signingCredentials">
                信赖方的签名的凭据。
              </param>
    </member>
    <member name="M:System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials,System.IdentityModel.Tokens.EncryptingCredentials)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Scope" /> 类，具有指定的 appliesTo 地址，签名凭据和加密凭据。
            </summary>
      <param name="appliesToAddress">
                信赖方 appliesTo 地址。
                 这通常是一个 URI。
              </param>
      <param name="signingCredentials">
                信赖方的签名的凭据。
              </param>
      <param name="encryptingCredentials">
                信赖方的加密的凭据。
              </param>
    </member>
    <member name="M:System.IdentityModel.SecurityMessageSerializationException.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.SecurityMessageSerializationException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.SecurityMessageSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              用序列化数据初始化 <see cref="T:System.IdentityModel.SecurityMessageSerializationException" /> 类的新实例。
            </summary>
      <param name="info">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，其中包含序列化的对象数据。
              </param>
      <param name="context">
                一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，其中包含有关源或目标的上下文信息。
              </param>
    </member>
    <member name="M:System.IdentityModel.SecurityMessageSerializationException.#ctor(System.String)">
      <summary>
              用指定的错误消息初始化 <see cref="T:System.IdentityModel.SecurityMessageSerializationException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
    </member>
    <member name="M:System.IdentityModel.SecurityMessageSerializationException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IdentityModel.SecurityMessageSerializationException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="innerException">
                <see cref="T:System.Exception" /> 导致当前异常。
                 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。
              </param>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.#ctor(System.IdentityModel.Configuration.SecurityTokenServiceConfiguration)">
      <summary>
              从派生类来初始化调用 <see cref="T:System.IdentityModel.SecurityTokenService" /> 类使用指定的配置设置。
            </summary>
      <param name="securityTokenServiceConfiguration">
                一个 <see cref="T:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration" /> 包含 STS 的设置。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="securityTokenServiceConfiguration" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.BeginCancel(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)">
      <summary>
              当在派生类中重写，开始异步 WS 信任取消请求。
            </summary>
      <param name="principal">
                一个 <see cref="T:System.Security.Claims.ClaimsPrincipal" /> ，表示令牌的请求者的标识。
              </param>
      <param name="request">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> ，表示安全令牌请求。
                 这包括请求消息以及其他客户端相关的信息，如授权上下文。
              </param>
      <param name="callback">
                <see cref="T:System.AsyncCallback" /> 可接收异步取消操作完成通知的委托。
              </param>
      <param name="state">
                一个包含与异步取消操作关联的状态信息的对象。
              </param>
      <returns>
              引用异步取消操作的 <see cref="T:System.IAsyncResult" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.BeginGetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope,System.AsyncCallback,System.Object)">
      <summary>
              当在派生类中重写，开始异步调用 <see cref="M:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)" /> 方法。
            </summary>
      <param name="principal">
                一个 <see cref="T:System.Security.Claims.ClaimsPrincipal" /> ，表示令牌的请求者的标识。
              </param>
      <param name="request">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> ，表示安全令牌请求。
                 这包括请求消息以及其他客户端相关的信息，如授权上下文。
              </param>
      <param name="scope">
                <see cref="T:System.IdentityModel.Scope" /> ，包含有关与请求关联的信赖方信息。
              </param>
      <param name="callback">
                <see cref="T:System.AsyncCallback" /> 可接收异步操作完成通知的委托。
              </param>
      <param name="state">
                一个包含与异步操作关联的状态信息的对象。
              </param>
      <returns>
              引用异步操作的 <see cref="T:System.IAsyncResult" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.BeginGetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)">
      <summary>
              当在派生类中重写，开始异步调用的 <see cref="M:System.IdentityModel.SecurityTokenService.GetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" /> 方法。
            </summary>
      <param name="principal">
                一个 <see cref="T:System.Security.Claims.ClaimsPrincipal" /> ，表示令牌的请求者的标识。
              </param>
      <param name="request">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> ，表示安全令牌请求。
                 这包括请求消息以及其他客户端相关的信息，如授权上下文。
              </param>
      <param name="callback">
                <see cref="T:System.AsyncCallback" /> 可接收异步操作完成通知的委托。
              </param>
      <param name="state">
                一个包含与异步操作关联的状态信息的对象。
              </param>
      <returns>
              引用异步取消操作的 <see cref="T:System.IAsyncResult" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.BeginIssue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)">
      <summary>
              当在派生类中重写，开始一个异步 Ws-trust 发出请求。
            </summary>
      <param name="principal">
                一个 <see cref="T:System.Security.Claims.ClaimsPrincipal" /> ，表示令牌的请求者的标识。
              </param>
      <param name="request">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> ，表示安全令牌请求。
                 这包括请求消息以及其他客户端相关的信息，如授权上下文。
              </param>
      <param name="callback">
                <see cref="T:System.AsyncCallback" /> 可接收异步问题操作完成通知的委托。
              </param>
      <param name="state">
                一个包含与异步问题操作相关联的状态信息的对象。
              </param>
      <returns>
              <see cref="T:System.IAsyncResult" /> 引用异步问题操作。
            </returns>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.BeginRenew(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)">
      <summary>
              当在派生类中重写，开始异步 WS 信任续订请求。
            </summary>
      <param name="principal">
                一个 <see cref="T:System.Security.Claims.ClaimsPrincipal" /> ，表示令牌的请求者的标识。
              </param>
      <param name="request">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> ，表示安全令牌请求。
                 这包括请求消息以及其他客户端相关的信息，如授权上下文。
              </param>
      <param name="callback">
                <see cref="T:System.AsyncCallback" /> 可接收的异步完成通知的委托的续订操作。
              </param>
      <param name="state">
                一个对象，包含与异步相关联的状态信息的续订操作。
              </param>
      <returns>
              <see cref="T:System.IAsyncResult" /> 引用异步续订操作。
            </returns>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.BeginValidate(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)">
      <summary>
              当在派生类中重写，开始异步 WS 信任验证请求。
            </summary>
      <param name="principal">
                一个 <see cref="T:System.Security.Claims.ClaimsPrincipal" /> ，表示令牌的请求者的标识。
              </param>
      <param name="request">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> ，表示安全令牌请求。
                 这包括请求消息以及其他客户端相关的信息，如授权上下文。
              </param>
      <param name="callback">
                <see cref="T:System.AsyncCallback" /> 委托，它接收的异步完成通知的验证操作。
              </param>
      <param name="state">
                包含与异步相关联的状态信息的对象验证操作。
              </param>
      <returns>
              <see cref="T:System.IAsyncResult" /> 引用异步验证操作。
            </returns>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.Cancel(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)">
      <summary>
              当在派生类中重写，处理 Ws-trust 取消请求。
            </summary>
      <param name="principal">
                一个 <see cref="T:System.Security.Claims.ClaimsPrincipal" /> ，表示令牌的请求者的标识。
              </param>
      <param name="request">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> ，表示安全令牌请求。
                 这包括请求消息以及其他客户端相关的信息，如授权上下文。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 表示 RSTR 以返回到调用方。
            </returns>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.CreateSecurityTokenDescriptor(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)">
      <summary>
              创建的一个实例 <see cref="P:System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor" />。
            </summary>
      <param name="request">
                传入的令牌请求。
              </param>
      <param name="scope">
                <see cref="P:System.IdentityModel.SecurityTokenService.Scope" /> 从返回的对象 <see cref="M:System.IdentityModel.SecurityTokenService.GetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" />。
              </param>
      <returns>
              <see cref="P:System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="request" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="scope" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.EndCancel(System.IAsyncResult)">
      <summary>
              当在派生类中重写，完成异步 WS 信任取消请求。
            </summary>
      <param name="result">
                <see cref="T:System.IAsyncResult" />，由对 <see cref="M:System.IdentityModel.SecurityTokenService.BeginCancel(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> 方法的调用返回。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 表示 RSTR 以返回到调用方。
            </returns>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.EndGetOutputClaimsIdentity(System.IAsyncResult)">
      <summary>
              当在派生类中重写时完成的异步调用 <see cref="M:System.IdentityModel.SecurityTokenService.BeginGetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope,System.AsyncCallback,System.Object)" /> 方法。
            </summary>
      <param name="result">
                <see cref="T:System.IAsyncResult" />，由对 <see cref="M:System.IdentityModel.SecurityTokenService.BeginGetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope,System.AsyncCallback,System.Object)" /> 方法的调用返回。
              </param>
      <returns>
              一个 <see cref="T:System.Security.Claims.ClaimsIdentity" /> 包含将被放置在颁发的安全令牌的声明的集合。
            </returns>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.EndGetScope(System.IAsyncResult)">
      <summary>
              当在派生类中重写时完成的异步调用 <see cref="M:System.IdentityModel.SecurityTokenService.BeginGetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> 方法。
            </summary>
      <param name="result">
                <see cref="T:System.IAsyncResult" />，由对 <see cref="M:System.IdentityModel.SecurityTokenService.BeginGetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> 方法的调用返回。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Scope" /> 封装与对的调用中指定的请求 (RST) 关联的信赖方 (RP) 信息 <see cref="M:System.IdentityModel.SecurityTokenService.BeginGetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> 方法。
            </returns>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.EndIssue(System.IAsyncResult)">
      <summary>
              当在派生类中重写，完成异步 Ws-trust 发出请求。
            </summary>
      <param name="result">
                <see cref="T:System.IAsyncResult" />，由对 <see cref="M:System.IdentityModel.SecurityTokenService.BeginIssue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> 方法的调用返回。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 表示 RSTR 以返回到调用方。
            </returns>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.EndRenew(System.IAsyncResult)">
      <summary>
              当在派生类中重写，完成异步 WS 信任续订请求。
            </summary>
      <param name="result">
                <see cref="T:System.IAsyncResult" />，由对 <see cref="M:System.IdentityModel.SecurityTokenService.BeginRenew(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> 方法的调用返回。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 表示 RSTR 以返回到调用方。
            </returns>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.EndValidate(System.IAsyncResult)">
      <summary>
              当在派生类中重写，完成异步 WS 信任验证请求。
            </summary>
      <param name="result">
                <see cref="T:System.IAsyncResult" />，由对 <see cref="M:System.IdentityModel.SecurityTokenService.BeginValidate(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> 方法的调用返回。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 表示 RSTR 以返回到调用方。
            </returns>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.FederatedAsyncState.#ctor(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.Security.Claims.ClaimsPrincipal,System.IAsyncResult)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.SecurityTokenService.FederatedAsyncState" /> 类指定令牌的请求 (RST) 令牌请求者和 <see cref="T:System.IAsyncResult" /> 对象。
            </summary>
      <param name="request">
                令牌请求。
              </param>
      <param name="principal">
                请求者的标识。
              </param>
      <param name="result">
                <see cref="T:System.IAsyncResult" /> 表示异步调用的状态。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="request" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="result" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.FederatedAsyncState.#ctor(System.IdentityModel.SecurityTokenService.FederatedAsyncState)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.SecurityTokenService.FederatedAsyncState" /> 类从指定 <see cref="T:System.IdentityModel.SecurityTokenService.FederatedAsyncState" /> 对象。
               此构造函数中有效地创建指定的实例的副本。
            </summary>
      <param name="federatedAsyncState">
                <see cref="T:System.IdentityModel.SecurityTokenService.FederatedAsyncState" /> 实例，将创建新实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="federatedAsyncState" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.GetIssuerName">
      <summary>
              获取安全令牌服务 (STS) 的名称。
            </summary>
      <returns>
              颁发者名称中。
            </returns>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)">
      <summary>
              当在派生类中重写此方法将返回输出者颁发的令牌中包含的集合。
            </summary>
      <param name="principal">
                一个 <see cref="T:System.Security.Claims.ClaimsPrincipal" /> ，表示令牌的请求者的标识。
              </param>
      <param name="request">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> ，表示安全令牌请求。
                 这包括请求消息以及其他客户端相关的信息，如授权上下文。
              </param>
      <param name="scope">
                <see cref="T:System.IdentityModel.Scope" /> ，包含有关与请求关联的信赖方信息。
                 这是 <see cref="T:System.IdentityModel.Scope" /> 返回的对象 <see cref="M:System.IdentityModel.SecurityTokenService.GetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" /> 方法。
              </param>
      <returns>
              一个 <see cref="T:System.Security.Claims.ClaimsIdentity" /> 包含将被放置在颁发的安全令牌的声明的集合。
            </returns>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.GetProofToken(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)">
      <summary>
              获取要包括在响应 (RSTR) 的证明令牌。
            </summary>
      <param name="request">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 该对象表示传入的令牌请求 (RST)。
              </param>
      <param name="scope">
                <see cref="T:System.IdentityModel.Scope" /> 封装有关信赖方的信息的实例。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.ProofDescriptor" /> ，表示新创建的证明描述符。
               证明描述符可以是一个非对称证明的描述符对称校验描述符中，或 <see langword="null" /> 在持有者令牌的情况下。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="request" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="scope" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.GetRequestorProofEncryptingCredentials(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)">
      <summary>
              获取加密凭据的请求者的证明。
            </summary>
      <param name="request">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 该对象表示传入的令牌请求 (RST)。
              </param>
      <returns>
              <see cref="T:System.IdentityModel.Tokens.EncryptingCredentials" /> 对象，表示请求程序的加密凭据。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="request" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.GetResponse(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>
              创建使用指定的请求 (RST) 和令牌的安全描述符包含已颁发的令牌的响应 (RSTR)。
            </summary>
      <param name="request">
                包含令牌请求 RST。
              </param>
      <param name="tokenDescriptor">
                令牌描述符，其中包含要使用已颁发的令牌的信息。
              </param>
      <returns>
              响应 (RSTR) 或 <see langword="null" /> 如果响应不能创建从指定的请求和令牌描述符。
               默认实现返回 <see langword="null" /> 如果 <paramref name="tokenDescriptor" /> 参数是 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.GetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)">
      <summary>
              获取 <see cref="T:System.IdentityModel.Scope" /> 对象，其中包含有关与指定的请求 (RST) 相关联的信赖方 (RP) 的信息。
               必须在您的实现重写此方法 <see cref="T:System.IdentityModel.SecurityTokenService" /> 类。
            </summary>
      <param name="principal">
                一个 <see cref="T:System.Security.Claims.ClaimsPrincipal" /> ，表示客户端发出请求。
              </param>
      <param name="request">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 该对象表示传入的请求 (RST)。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Scope" /> 封装与请求关联的 RP 信息。
            </returns>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.GetSecurityTokenHandler(System.String)">
      <summary>
              颁发安全令牌的指定类型获取适当的安全令牌处理程序。
            </summary>
      <param name="requestedTokenType">
                一个包含请求的令牌类型 URI 的字符串。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> ，表示要用于创建已颁发的安全令牌的令牌处理程序。
               返回 <see langword="null" /> 如果不支持请求的令牌类型 （没有处理程序配置为指定的令牌类型）。
            </returns>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.GetTokenLifetime(System.IdentityModel.Protocols.WSTrust.Lifetime)">
      <summary>
              获取已颁发的令牌的生存期。
            </summary>
      <param name="requestLifetime">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.Lifetime" /> ，表示请求的生存期。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.Lifetime" /> ，表示授予的生存期。
            </returns>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.Issue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)">
      <summary>
              颁发安全令牌。
            </summary>
      <param name="principal">
                一个 <see cref="T:System.Security.Claims.ClaimsPrincipal" /> ，表示令牌的请求者的标识。
              </param>
      <param name="request">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> ，表示安全令牌请求。
                 这包括请求消息以及其他客户端相关的信息，如授权上下文。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 包含颁发的安全令牌。
            </returns>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.Renew(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)">
      <summary>
              当在派生类中重写处理 Ws-trust 续订请求。
            </summary>
      <param name="principal">
                一个 <see cref="T:System.Security.Claims.ClaimsPrincipal" /> ，表示令牌的请求者的标识。
              </param>
      <param name="request">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> ，表示安全令牌请求。
                 这包括请求消息以及其他客户端相关的信息，如授权上下文。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 表示 RSTR 以返回到调用方。
            </returns>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.Validate(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)">
      <summary>
              当在派生类中重写处理 WS 信任验证的请求。
            </summary>
      <param name="principal">
                一个 <see cref="T:System.Security.Claims.ClaimsPrincipal" /> ，表示令牌的请求者的标识。
              </param>
      <param name="request">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> ，表示安全令牌请求。
                 这包括请求消息以及其他客户端相关的信息，如授权上下文。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 表示 RSTR 以返回到调用方。
            </returns>
    </member>
    <member name="M:System.IdentityModel.SecurityTokenService.ValidateRequest(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)">
      <summary>
              安全令牌对请求进行验证 (RST) 中的此实例。
            </summary>
      <param name="request">
                一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 表示的请求。
              </param>
      <exception cref="T:System.IdentityModel.Protocols.WSTrust.InvalidRequestException">
                  <paramref name="request" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <see cref="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.RequestType" /> 请求的属性未设置为 <see cref="F:System.IdentityModel.Protocols.WSTrust.RequestTypes.Issue" />。
                
                  - 或 -
                
                  <see cref="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.KeyType" /> 请求的属性不是 <see langword="null" /> 或中定义的常量之一 <see cref="T:System.IdentityModel.Protocols.WSTrust.KeyTypes" /> 类。
                
                  - 或 -
                
                  <see cref="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.KeyType" /> 请求的是 <see cref="F:System.IdentityModel.Protocols.WSTrust.KeyTypes.Bearer" /> 和 <see langword="KeySize" /> 元素存在，但其值不等于零。
                </exception>
      <exception cref="T:System.IdentityModel.UnsupportedTokenTypeBadRequestException">
                  STS 不支持请求的令牌类型 (基于值的 <see cref="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.TokenType" /> 请求的属性)。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.AudienceUriModeValidationHelper.IsDefined(System.IdentityModel.Selectors.AudienceUriMode)">
      <summary>
              获取一个值，指示指定 <see cref="T:System.IdentityModel.Selectors.AudienceUriMode" /> 的值是否有效。
            </summary>
      <param name="validationMode">
                要验证其有效性的 <see cref="T:System.IdentityModel.Selectors.AudienceUriMode" />。
              </param>
      <returns>
              如果 <see langword="true" /> 为 <paramref name="validationMode" />、<see cref="F:System.IdentityModel.Selectors.AudienceUriMode.Always" /> 或 <see cref="F:System.IdentityModel.Selectors.AudienceUriMode.BearerKeyOnly" />，则为 <see cref="F:System.IdentityModel.Selectors.AudienceUriMode.Never" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.CustomUserNameSecurityTokenAuthenticator.#ctor(System.IdentityModel.Selectors.UserNamePasswordValidator)">
      <summary>
              使用指定的验证程序来初始化 <see cref="T:System.IdentityModel.Selectors.CustomUserNameSecurityTokenAuthenticator" /> 类的新实例。
            </summary>
      <param name="validator">
                一个 <see cref="T:System.IdentityModel.Selectors.UserNamePasswordValidator" />，它使用自定义身份验证方案对用户名和密码进行身份验证。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="validator" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.CustomUserNameSecurityTokenAuthenticator.ValidateUserNamePasswordCore(System.String,System.String)">
      <summary>
              对指定的用户名和密码进行身份验证，并返回 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 安全令牌的授权策略集。
            </summary>
      <param name="userName">
                与安全令牌相关联的用户名。
              </param>
      <param name="password">
                与安全令牌相关联的密码。
              </param>
      <returns>
              一个类型为 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" />，它包含对此应用程序生效的授权策略集。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="userName" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException">
                  <paramref name="userName" /> 和 <paramref name="password" /> 的组合无效。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.KerberosSecurityTokenAuthenticator.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Selectors.KerberosSecurityTokenAuthenticator" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Selectors.KerberosSecurityTokenAuthenticator.#ctor(System.Boolean)">
      <summary>
              通过指定是否在对 Windows 用户进行身份验证时获取该用户所属的组，初始化 <see cref="T:System.IdentityModel.Selectors.KerberosSecurityTokenAuthenticator" /> 类的新实例。
            </summary>
      <param name="includeWindowsGroups">
                如果获取 Windows 用户所属的组，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.IdentityModel.Selectors.KerberosSecurityTokenAuthenticator.CanValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              获取一个值，指示此安全令牌身份验证器是否可以验证指定的安全令牌。
            </summary>
      <param name="token">
                要进行身份验证的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
              </param>
      <returns>
              如果 <see langword="true" /> 为 <paramref name="token" /> 安全令牌，则为 <see cref="T:System.IdentityModel.Tokens.KerberosReceiverSecurityToken" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.KerberosSecurityTokenProvider.#ctor(System.String)">
      <summary>
              使用指定的服务主体名称初始化 <see cref="T:System.IdentityModel.Selectors.KerberosSecurityTokenProvider" /> 类的新实例。
            </summary>
      <param name="servicePrincipalName">
                要为其获取 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的服务主体名称。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="servicePrincipalName" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.KerberosSecurityTokenProvider.#ctor(System.String,System.Security.Principal.TokenImpersonationLevel)">
      <summary>
              通过使用指定的服务主体名称以及有关客户端是否允许 <see cref="T:System.IdentityModel.Selectors.KerberosSecurityTokenProvider" /> 安全令牌的接收方模拟客户端的凭据的信息，初始化 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 类的新实例。
            </summary>
      <param name="servicePrincipalName">
                要为其获取 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的服务主体名称。
              </param>
      <param name="tokenImpersonationLevel">
                一个 <see cref="T:System.Security.Principal.TokenImpersonationLevel" />，它指定 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的接收方可在多大程度上代表客户端执行操作。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="tokenImpersonationLevel" /> 不是 <see langword="Identification" /> 或 <see langword="Impersonation" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="servicePrincipalName" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.KerberosSecurityTokenProvider.#ctor(System.String,System.Security.Principal.TokenImpersonationLevel,System.Net.NetworkCredential)">
      <summary>
              通过使用指定的服务主体名称、客户端标识以及有关客户端是否允许 <see cref="T:System.IdentityModel.Selectors.KerberosSecurityTokenProvider" /> 安全令牌的接收方模拟客户端的凭据的信息，初始化 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 类的新实例。
            </summary>
      <param name="servicePrincipalName">
                要为其获取 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的服务主体名称。
              </param>
      <param name="tokenImpersonationLevel">
                一个 <see cref="T:System.Security.Principal.TokenImpersonationLevel" />，它指定 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的接收方可在多大程度上代表客户端进程执行操作。
              </param>
      <param name="networkCredential">
                一个 <see cref="T:System.Net.NetworkCredential" />，它表示 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 的标识。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="tokenImpersonationLevel" /> 不是 <see langword="Identification" /> 或 <see langword="Impersonation" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="servicePrincipalName" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.KerberosSecurityTokenProvider.GetTokenCore(System.TimeSpan)">
      <summary>
              获取 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌。
            </summary>
      <param name="timeout">
                一个 <see cref="T:System.TimeSpan" />，它为获取安全令牌的消息指定超时值。
              </param>
      <returns>
              表示要获取的安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.RsaSecurityTokenAuthenticator.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Selectors.RsaSecurityTokenAuthenticator" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Selectors.RsaSecurityTokenAuthenticator.CanValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              获取一个值，该值指示指定的安全令牌是否可由该安全令牌身份验证器进行验证。
            </summary>
      <param name="token">
                <see cref="T:System.IdentityModel.Tokens.SecurityToken" />  进行验证。
              </param>
      <returns>
              如果 <see langword="true" /> 为 <paramref name="token" /> 安全令牌，则为 <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.RsaSecurityTokenAuthenticator.ValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              对指定的安全令牌进行身份验证，并返回该安全令牌的授权策略集。
            </summary>
      <param name="token">
                要验证的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
              </param>
      <returns>
              一个类型为 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" />，它包含对此应用程序生效的授权策略集。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.#ctor(System.Collections.Generic.IList{System.IdentityModel.Selectors.SecurityTokenAuthenticator})">
      <summary>
              使用指定的身份验证器集初始化 <see cref="T:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator" /> 类的新实例。
            </summary>
      <param name="supportingAuthenticators">
                <see cref="T:System.Collections.Generic.IList`1" /> 的一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenAuthenticator" />，它包含对颁发者的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> 安全令牌进行身份验证的身份验证器。
              </param>
    </member>
    <member name="M:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.#ctor(System.Collections.Generic.IList{System.IdentityModel.Selectors.SecurityTokenAuthenticator},System.TimeSpan)">
      <summary>
              使用指定的身份验证器集以及发送方和接收方时钟之间允许的最大偏差来初始化 <see cref="T:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator" /> 类的新实例。
            </summary>
      <param name="supportingAuthenticators">
                <see cref="T:System.Collections.Generic.IList`1" /> 的一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenAuthenticator" />，它包含对颁发者的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> 安全令牌进行身份验证的身份验证器。
              </param>
      <param name="maxClockSkew">
                一个 <see cref="T:System.TimeSpan" />，表示发送方和接收方时钟之间允许的最大偏差。
              </param>
    </member>
    <member name="M:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.CanValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              获取一个值，指示此安全令牌身份验证器是否可以验证指定的安全令牌。
            </summary>
      <param name="token">
                要验证的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
              </param>
      <returns>
              如果 <see langword="true" /> 为 <paramref name="token" /> 安全令牌，则为 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.ResolveClaimSet(System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>
              使用在创建 <see cref="T:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator" /> 实例时提供的支持安全身份验证器解析与指定密钥标识符关联的标识，并将其作为 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 返回。
            </summary>
      <param name="keyIdentifier">
                一个要获取其标识的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Claims.ClaimSet" />，表示指定的密钥标识符的标识。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.ResolveClaimSet(System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              使用在创建 <see cref="T:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator" /> 实例时提供的支持令牌身份验证器解析与指定安全令牌关联的标识，并将其作为 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 返回。
            </summary>
      <param name="token">
                一个要获取其标识的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Claims.ClaimSet" />，表示指定的安全令牌的标识。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.ResolveIdentity(System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>
              使用在创建 <see cref="T:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator" /> 实例时提供的支持安全令牌身份验证器解析与指定密钥标识符关联的标识，并将其作为 <see cref="T:System.Security.Principal.IIdentity" /> 返回。
            </summary>
      <param name="keyIdentifier">
                一个要获取其标识的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />。
              </param>
      <returns>
              一个 <see cref="T:System.Security.Principal.IIdentity" />，表示指定的密钥标识符的标识。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.ResolveIdentity(System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              使用在创建 <see cref="T:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator" /> 实例时提供的支持安全令牌身份验证器解析与指定安全令牌关联的标识，并将其作为 <see cref="T:System.Security.Principal.IIdentity" /> 返回。
            </summary>
      <param name="token">
                一个要获取其标识的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
              </param>
      <returns>
              一个 <see cref="T:System.Security.Principal.IIdentity" />，表示指定的安全令牌的标识。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.ValidateAudienceRestriction(System.IdentityModel.Tokens.SamlAudienceRestrictionCondition)">
      <summary>
              验证 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌是否针对此 Web 服务。
            </summary>
      <param name="audienceRestrictionCondition">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition" />，指定 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌针对的目标 Web 服务集。
              </param>
      <returns>
              如果 <see langword="true" /> 参数的 <see cref="P:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition.Audiences" /> 属性位于 <paramref name="audienceRestrictionCondition" /> 集合中，则为 <see cref="P:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.AllowedAudienceUris" />，否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.ValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              对指定的安全令牌进行身份验证，并返回该安全令牌的授权策略集。
            </summary>
      <param name="token">
                要验证的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
              </param>
      <returns>
              一个类型为 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" />，它包含安全令牌身份验证产生的授权策略集。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenAuthenticator.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Selectors.SecurityTokenAuthenticator" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenAuthenticator.CanValidateToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              获取一个值，该值指示指定的安全令牌是否可由该安全令牌身份验证器进行验证。
            </summary>
      <param name="token">
                要验证的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
              </param>
      <returns>
              如果可以验证令牌，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="token" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenAuthenticator.CanValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              在派生类中重写时，获取一个值，指示此安全令牌身份验证器是否可以验证指定的安全令牌。
            </summary>
      <param name="token">
                要验证的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
              </param>
      <returns>
              如果可以验证 <see langword="true" />，则为 <paramref name="token" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenAuthenticator.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              对指定的安全令牌进行身份验证，并返回该安全令牌的授权策略集。
            </summary>
      <param name="token">
                要验证的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
              </param>
      <returns>
              一个类型为 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" />，它包含对此应用程序生效的授权策略集。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="token" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException">
                  此安全令牌身份验证器无法对 <paramref name="token" /> 进行身份验证
                
                  - 或 -
                
                  <paramref name="token" /> 未通过身份验证。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenAuthenticator.ValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              在派生类中重写时，对指定的安全令牌进行身份验证，并返回该安全令牌的授权策略集。
            </summary>
      <param name="token">
                要验证的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
              </param>
      <returns>
              一个类型为 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" />，它包含对此应用程序生效的授权策略集。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenManager.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Selectors.SecurityTokenManager" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenManager.CreateSecurityTokenAuthenticator(System.IdentityModel.Selectors.SecurityTokenRequirement,System.IdentityModel.Selectors.SecurityTokenResolver@)">
      <summary>
              获取符合指定安全令牌需求的安全令牌身份验证器。
            </summary>
      <param name="tokenRequirement">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" />，指定安全令牌要求。
              </param>
      <param name="outOfBandTokenResolver">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，确定符合指定安全令牌要求的安全令牌。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenAuthenticator" />，对传入 SOAP 消息中符合指定要求的安全令牌进行身份验证。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenManager.CreateSecurityTokenProvider(System.IdentityModel.Selectors.SecurityTokenRequirement)">
      <summary>
              获取符合指定安全令牌需求的安全令牌提供程序。
            </summary>
      <param name="tokenRequirement">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" />，指定安全令牌要求。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenProvider" />，为传出 SOAP 消息提供符合指定要求的安全令牌。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenManager.CreateSecurityTokenSerializer(System.IdentityModel.Selectors.SecurityTokenVersion)">
      <summary>
              获取 XML 序列化程序，它可以按指定的 WS-* 规范版本序列化安全令牌。
            </summary>
      <param name="version">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenVersion" />，指定安全令牌所遵循的 WS-* 规范版本。
              </param>
      <returns>
              一个用于序列化安全令牌的 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Selectors.SecurityTokenProvider" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.BeginCancelToken(System.TimeSpan,System.IdentityModel.Tokens.SecurityToken,System.AsyncCallback,System.Object)">
      <summary>
              开始异步操作以取消安全令牌。
            </summary>
      <param name="timeout">
                一个 <see cref="T:System.TimeSpan" />，它为取消安全令牌的消息指定超时值。
              </param>
      <param name="token">
                要取消的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
              </param>
      <param name="callback">
                接收异步关闭操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。
              </param>
      <param name="state">
                一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。
              </param>
      <returns>
              引用异步取消操作的 <see cref="T:System.IAsyncResult" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.BeginCancelTokenCore(System.TimeSpan,System.IdentityModel.Tokens.SecurityToken,System.AsyncCallback,System.Object)">
      <summary>
              开始异步操作以取消安全令牌。
            </summary>
      <param name="timeout">
                一个 <see cref="T:System.TimeSpan" />，它为取消安全令牌的消息指定超时值。
              </param>
      <param name="token">
                要取消的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
              </param>
      <param name="callback">
                接收异步关闭操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。
              </param>
      <param name="state">
                一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。
              </param>
      <returns>
              引用异步取消操作的 <see cref="T:System.IAsyncResult" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.BeginGetToken(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>
              开始异步操作以获取安全令牌。
            </summary>
      <param name="timeout">
                一个 <see cref="T:System.TimeSpan" />，它为获取安全令牌的消息指定超时值。
              </param>
      <param name="callback">
                接收异步关闭操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。
              </param>
      <param name="state">
                一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。
              </param>
      <returns>
              引用异步关闭操作的 <see cref="T:System.IAsyncResult" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.BeginGetTokenCore(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>
              开始异步操作以获取安全令牌。
            </summary>
      <param name="timeout">
                一个 <see cref="T:System.TimeSpan" />，它为获取安全令牌的消息指定超时值。
              </param>
      <param name="callback">
                接收异步关闭操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。
              </param>
      <param name="state">
                一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。
              </param>
      <returns>
              引用异步操作的 <see cref="T:System.IAsyncResult" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.BeginRenewToken(System.TimeSpan,System.IdentityModel.Tokens.SecurityToken,System.AsyncCallback,System.Object)">
      <summary>
              开始异步操作以续订安全令牌。
            </summary>
      <param name="timeout">
                一个 <see cref="T:System.TimeSpan" />，它为续订安全令牌的消息指定超时值。
              </param>
      <param name="tokenToBeRenewed">
                要续订的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
              </param>
      <param name="callback">
                接收异步关闭操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。
              </param>
      <param name="state">
                一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。
              </param>
      <returns>
              引用异步操作的 <see cref="T:System.IAsyncResult" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.BeginRenewTokenCore(System.TimeSpan,System.IdentityModel.Tokens.SecurityToken,System.AsyncCallback,System.Object)">
      <summary>
              开始异步操作以续订安全令牌。
            </summary>
      <param name="timeout">
                一个 <see cref="T:System.TimeSpan" />，它为续订安全令牌的消息指定超时值。
              </param>
      <param name="tokenToBeRenewed">
                要续订的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
              </param>
      <param name="callback">
                接收异步关闭操作完成通知的 <see cref="T:System.AsyncCallback" /> 委托。
              </param>
      <param name="state">
                一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。
              </param>
      <returns>
              引用异步操作的 <see cref="T:System.IAsyncResult" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.CancelToken(System.TimeSpan,System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              取消安全令牌。
            </summary>
      <param name="timeout">
                一个 <see cref="T:System.TimeSpan" />，它为取消安全令牌的消息指定超时值。
              </param>
      <param name="token">
                要取消的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
              </param>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.CancelTokenCore(System.TimeSpan,System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              取消安全令牌。
            </summary>
      <param name="timeout">
                一个 <see cref="T:System.TimeSpan" />，它为取消安全令牌的消息指定超时值。
              </param>
      <param name="token">
                要取消的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
              </param>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.EndCancelToken(System.IAsyncResult)">
      <summary>
              完成异步操作以取消安全令牌。
            </summary>
      <param name="result">
                <see cref="T:System.IAsyncResult" />，由对 <see cref="M:System.IdentityModel.Selectors.SecurityTokenProvider.BeginCancelToken(System.TimeSpan,System.IdentityModel.Tokens.SecurityToken,System.AsyncCallback,System.Object)" /> 方法的调用返回。
              </param>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.EndCancelTokenCore(System.IAsyncResult)">
      <summary>
              完成异步操作以取消安全令牌。
            </summary>
      <param name="result">
                <see cref="T:System.IAsyncResult" />，由对 <see cref="M:System.IdentityModel.Selectors.SecurityTokenProvider.BeginCancelTokenCore(System.TimeSpan,System.IdentityModel.Tokens.SecurityToken,System.AsyncCallback,System.Object)" /> 方法的调用返回。
              </param>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.EndGetToken(System.IAsyncResult)">
      <summary>
              完成异步操作以获取安全令牌。
            </summary>
      <param name="result">
                <see cref="T:System.IAsyncResult" />，由对 <see cref="M:System.IdentityModel.Selectors.SecurityTokenProvider.BeginGetToken(System.TimeSpan,System.AsyncCallback,System.Object)" /> 方法的调用返回。
              </param>
      <returns>
              <see cref="T:System.IdentityModel.Tokens.SecurityToken" />，表示安全令牌。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.EndGetTokenCore(System.IAsyncResult)">
      <summary>
              完成异步操作以获取安全令牌。
            </summary>
      <param name="result">
                <see cref="T:System.IAsyncResult" />，由对 <see cref="M:System.IdentityModel.Selectors.SecurityTokenProvider.BeginGetTokenCore(System.TimeSpan,System.AsyncCallback,System.Object)" /> 方法的调用返回。
              </param>
      <returns>
              <see cref="T:System.IdentityModel.Tokens.SecurityToken" />，表示安全令牌。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.EndRenewToken(System.IAsyncResult)">
      <summary>
              完成异步操作以续订安全令牌。
            </summary>
      <param name="result">
                <see cref="T:System.IAsyncResult" />，由对 <see cref="M:System.IdentityModel.Selectors.SecurityTokenProvider.BeginRenewToken(System.TimeSpan,System.IdentityModel.Tokens.SecurityToken,System.AsyncCallback,System.Object)" /> 方法的调用返回。
              </param>
      <returns>
              表示所续订的安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.EndRenewTokenCore(System.IAsyncResult)">
      <summary>
              完成异步操作以续订安全令牌。
            </summary>
      <param name="result">
                <see cref="T:System.IAsyncResult" />，由对 <see cref="M:System.IdentityModel.Selectors.SecurityTokenProvider.BeginRenewTokenCore(System.TimeSpan,System.IdentityModel.Tokens.SecurityToken,System.AsyncCallback,System.Object)" /> 方法的调用返回。
              </param>
      <returns>
              表示所续订的安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.GetToken(System.TimeSpan)">
      <summary>
              获取安全令牌。
            </summary>
      <param name="timeout">
                一个 <see cref="T:System.TimeSpan" />，它为获取安全令牌的消息指定超时值。
              </param>
      <returns>
              表示要获取的安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.GetTokenCore(System.TimeSpan)">
      <summary>
              获取安全令牌。
            </summary>
      <param name="timeout">
                一个 <see cref="T:System.TimeSpan" />，它为获取安全令牌的消息指定超时值。
              </param>
      <returns>
              表示要获取的安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.RenewToken(System.TimeSpan,System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              续订安全令牌。
            </summary>
      <param name="timeout">
                一个 <see cref="T:System.TimeSpan" />，它为续订安全令牌的消息指定超时值。
              </param>
      <param name="tokenToBeRenewed">
                要续订的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
              </param>
      <returns>
              表示所续订的安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.RenewTokenCore(System.TimeSpan,System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              续订安全令牌。
            </summary>
      <param name="timeout">
                一个 <see cref="T:System.TimeSpan" />，它为续订安全令牌的消息指定超时值。
              </param>
      <param name="tokenToBeRenewed">
                要续订的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
              </param>
      <returns>
              表示所续订的安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.SecurityTokenAsyncResult.#ctor(System.IdentityModel.Tokens.SecurityToken,System.AsyncCallback,System.Object)">
      <summary>
              创建 <see cref="T:System.IdentityModel.Selectors.SecurityTokenProvider.SecurityTokenAsyncResult" /> 的新实例。
            </summary>
      <param name="token">
                利用其初始化 <see cref="T:System.IdentityModel.Selectors.SecurityTokenProvider.SecurityTokenAsyncResult" /> 的安全令牌
              </param>
      <param name="callback">
                要在异步操作完成时调用的回调方法。
              </param>
      <param name="state">
                作为异步方法调用的最后一个参数提供的对象。
              </param>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenProvider.SecurityTokenAsyncResult.End(System.IAsyncResult)">
      <summary>
              使用指定的结果完成异步操作。
            </summary>
      <param name="result">
                异步操作的结果。
              </param>
      <returns>
              返回 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenRequirement.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenRequirement.GetProperty``1(System.String)">
      <summary>
              获取当前 <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" /> 实例的指定属性。
            </summary>
      <param name="propertyName">
                要获取的属性的名称。
              </param>
      <typeparam name="TValue">
                要获取的属性的类型。
              </typeparam>
      <returns>
              要获取的属性的值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="propertyName" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenRequirement.TryGetProperty``1(System.String,``0@)">
      <summary>
              获取当前 <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" /> 实例的指定属性。
            </summary>
      <param name="propertyName">
                要获取的属性的名称。
              </param>
      <param name="result">
                <paramref name="propertyName" /> 属性中指定的属性的值。
              </param>
      <typeparam name="TValue">
                要在 <paramref name="result" /> 参数中返回的属性的类型。
              </typeparam>
      <returns>
              如果 <see langword="true" /> 属性包含在 <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> 属性中指定的属性的属性值，则为 <paramref name="propertyName" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  属性具有 <paramref name="propertyName" /> 参数中指定的名称，但其类型与 <paramref name="TValue" /> 参数中指定的类型不同。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenResolver.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Tokens.SecurityToken},System.Boolean)">
      <summary>
              为指定的安全令牌创建默认安全令牌解析程序。
            </summary>
      <param name="tokens">
                一个类型为 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />，它包含此安全令牌解析程序可以将密钥标识符和密钥标识符子句解析到其中的安全令牌集。
              </param>
      <param name="canMatchLocalId">
                如果对所引用的安全密钥位于 SOAP 消息中其他某个位置的 <see langword="true" /> 密钥标识符子句进行解析，则为 <see langword="&lt;SecurityTokenReference&gt;" />；否则，为 <see langword="false" />。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它解析与 <paramref name="tokens" /> 参数中指定的安全令牌相匹配的密钥标识符和子句。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenResolver.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>
              在派生类中重写，当从 XML 加载自定义配置。
            </summary>
      <param name="nodelist">
                自定义配置元素中。
              </param>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              获取在指定的密钥标识符子句中引用的密钥。
            </summary>
      <param name="keyIdentifierClause">
                要为其检索密钥的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityKey" />，它是指定的密钥标识符子句中引用的密钥。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="keyIdentifierClause" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  无法为 <paramref name="keyIdentifierClause" /> 参数中指定的密钥标识符子句检索密钥。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>
              检索与指定的密钥标识符中包含的安全密钥标识符子句之一相匹配的安全令牌。
            </summary>
      <param name="keyIdentifier">
                要为其创建安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />，它表示指定的密钥标识符。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="keyIdentifier" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  无法为指定的密钥标识符创建安全令牌。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              检索与指定的密钥标识符子句相匹配的安全令牌。
            </summary>
      <param name="keyIdentifierClause">
                要为其创建安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />，它表示指定的密钥标识符子句。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)">
      <summary>
              尝试检索在指定的密钥标识符子句中引用的密钥。
            </summary>
      <param name="keyIdentifierClause">
                要为其检索密钥的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。
              </param>
      <param name="key">
                当此方法返回时，包含一个 <see cref="T:System.IdentityModel.Tokens.SecurityKey" />，其中包含在指定的密钥标识符子句中引用的密钥。
                 此参数未经初始化即被传递。
              </param>
      <returns>
              如果可以为指定的密钥标识符子句检索密钥，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="keyIdentifierClause" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)">
      <summary>
              尝试检索在指定的密钥标识符子句中引用的密钥。
            </summary>
      <param name="keyIdentifierClause">
                要为其检索密钥的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。
              </param>
      <param name="key">
                当此方法返回时，包含一个 <see cref="T:System.IdentityModel.Tokens.SecurityKey" />，其中包含在指定的密钥标识符子句中引用的密钥。
                 此参数未经初始化即被传递。
              </param>
      <returns>
              如果可以为指定的密钥标识符子句检索密钥，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>
              尝试检索与指定的密钥标识符中包含的密钥标识符子句之一相匹配的安全令牌。
            </summary>
      <param name="keyIdentifier">
                要为其创建安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />。
              </param>
      <param name="token">
                当此方法返回时，包含一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />，它表示指定的密钥标识符。
                 此参数未经初始化即被传递。
              </param>
      <returns>
              如果可以为指定的密钥标识符检索安全令牌，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="keyIdentifier" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>
              尝试检索与指定的密钥标识符子句相匹配的安全令牌。
            </summary>
      <param name="keyIdentifierClause">
                要为其创建安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。
              </param>
      <param name="token">
                当此方法返回时，包含一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />，它表示指定的密钥标识符子句。
                 此参数未经初始化即被传递。
              </param>
      <returns>
              如果可以为指定的密钥标识符子句检索安全令牌，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="keyIdentifierClause" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>
              当在派生类中重写时，尝试检索至少与指定的密钥标识符中包含的密钥标识符子句之一相匹配的安全令牌。
            </summary>
      <param name="keyIdentifier">
                要为其创建安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />。
              </param>
      <param name="token">
                当此方法返回时，包含一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />，它表示指定的密钥标识符。
                 此参数未经初始化即被传递。
              </param>
      <returns>
              如果可以为指定的密钥标识符检索安全令牌，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>
              当在派生类中重写时，尝试解析与指定的密钥标识符子句相匹配的安全令牌。
            </summary>
      <param name="keyIdentifierClause">
                要为其创建安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。
              </param>
      <param name="token">
                当此方法返回时，包含一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />，它表示指定的密钥标识符子句。
                 此参数未经初始化即被传递。
              </param>
      <returns>
              如果可以为指定的密钥标识符子句检索安全令牌，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.CanReadKeyIdentifier(System.Xml.XmlReader)">
      <summary>
              确定此序列化程序是否可读取由指定的 XML 读取器引用的<see langword="&lt;KeyIdentifier&gt;" /> 元素。
            </summary>
      <param name="reader">
                读取密钥标识符的 <see cref="T:System.Xml.XmlReader" />。
              </param>
      <returns>
              如果可以读取指定的 <see langword="true" /> XML 元素，则为 <see langword="&lt;KeyIdentifier&gt;" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>
              确定此序列化程序是否可读取中的子句 <see langword="&lt;KeyIdentifier&gt;" /> 由指定的 XML 读取器引用元素。
            </summary>
      <param name="reader">
                读取密钥标识符子句的 <see cref="T:System.Xml.XmlReader" />。
              </param>
      <returns>
              如果可以读取指定的密钥标识符子句，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.CanReadKeyIdentifierClauseCore(System.Xml.XmlReader)">
      <summary>
              确定此序列化程序是否可读取由指定的 XML 读取器引用的<see langword="&lt;KeyIdentifier&gt;" /> 元素。
               供基类调用。
            </summary>
      <param name="reader">
                读取密钥标识符子句的 <see cref="T:System.Xml.XmlReader" />。
              </param>
      <returns>
              如果可以读取指定的 <see langword="true" /> 元素，则为 <see langword="&lt;KeyIdentifier&gt;" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.CanReadKeyIdentifierCore(System.Xml.XmlReader)">
      <summary>
              确定此序列化程序是否可读取由指定的 XML 读取器引用的<see langword="&lt;KeyIdentifier&gt;" /> 元素。
               供基类调用。
            </summary>
      <param name="reader">
                读取密钥标识符的 <see cref="T:System.Xml.XmlReader" />。
              </param>
      <returns>
              如果可以读取指定的密钥标识符子句，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.CanReadToken(System.Xml.XmlReader)">
      <summary>
              确定此序列化程序是否可读取由指定的 XML 读取器指向的安全令牌。
            </summary>
      <param name="reader">
                读取安全令牌的 <see cref="T:System.Xml.XmlReader" />。
              </param>
      <returns>
              如果可以读取安全令牌，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.CanReadTokenCore(System.Xml.XmlReader)">
      <summary>
              确定此序列化程序是否可读取由指定的 XML 读取器指向的安全令牌。
               供基类调用。
            </summary>
      <param name="reader">
                读取安全令牌的 <see cref="T:System.Xml.XmlReader" />。
              </param>
      <returns>
              如果可以读取安全令牌，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.CanWriteKeyIdentifier(System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>
              确定此序列化程序是否可以编写指定的密钥标识符。
            </summary>
      <param name="keyIdentifier">
                表示要编写的密钥标识符的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />。
              </param>
      <returns>
              如果此序列化程序可以编写指定的密钥标识符，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="keyIdentifier" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              确定此序列化程序是否可以编写指定的密钥标识符子句。
            </summary>
      <param name="keyIdentifierClause">
                表示要编写的密钥标识符子句的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。
              </param>
      <returns>
              如果此序列化程序可以编写指定的密钥标识符子句，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="keyIdentifierClause" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.CanWriteKeyIdentifierClauseCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              确定此序列化程序是否可以编写指定的密钥标识符子句。
               供基类调用。
            </summary>
      <param name="keyIdentifierClause">
                表示要编写的密钥标识符子句的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。
              </param>
      <returns>
              如果此序列化程序可以编写指定的密钥标识符子句，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="keyIdentifierClause" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.CanWriteKeyIdentifierCore(System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>
              确定此序列化程序是否可以编写指定的密钥标识符。
               供基类调用。
            </summary>
      <param name="keyIdentifier">
                表示要编写的密钥标识符的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />。
              </param>
      <returns>
              如果此序列化程序可以编写指定的密钥标识符，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="keyIdentifier" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.CanWriteToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              确定此序列化程序是否可以将指定的安全令牌编写为 XML。
            </summary>
      <param name="token">
                要转换为 XML 的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
              </param>
      <returns>
              如果可以编写安全令牌，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="token" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.CanWriteTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              确定此序列化程序是否可以将指定的安全令牌编写为 XML。
               供基类调用。
            </summary>
      <param name="token">
                要转换为 XML 的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
              </param>
      <returns>
              如果可以编写安全令牌，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="token" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.ReadKeyIdentifier(System.Xml.XmlReader)">
      <summary>
              使用指定的 XML 读取器读取密钥标识符。
            </summary>
      <param name="reader">
                读取密钥标识符的 <see cref="T:System.Xml.XmlReader" />。
              </param>
      <returns>
              表示所读取的密钥标识符的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.ReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>
              使用指定的 XML 读取器读取密钥标识符子句。
            </summary>
      <param name="reader">
                读取密钥标识符的 <see cref="T:System.Xml.XmlReader" />。
              </param>
      <returns>
              表示所读取的密钥标识符的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.ReadKeyIdentifierClauseCore(System.Xml.XmlReader)">
      <summary>
              使用指定的 XML 读取器读取密钥标识符子句。
               供基类调用。
            </summary>
      <param name="reader">
                读取密钥标识符的 <see cref="T:System.Xml.XmlReader" />。
              </param>
      <returns>
              表示所读取的密钥标识符的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.ReadKeyIdentifierCore(System.Xml.XmlReader)">
      <summary>
              使用指定的 XML 读取器读取密钥标识符子句。
               供基类调用。
            </summary>
      <param name="reader">
                读取密钥标识符的 <see cref="T:System.Xml.XmlReader" />。
              </param>
      <returns>
              表示所读取的密钥标识符的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>
              读取由指定的 XML 读取器指向的安全令牌。
            </summary>
      <param name="reader">
                读取安全令牌的 <see cref="T:System.Xml.XmlReader" />。
              </param>
      <param name="tokenResolver">
                确定安全令牌类型的 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />。
              </param>
      <returns>
              表示所读取的安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="tokenResolver" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.ReadTokenCore(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>
              读取由指定的 XML 读取器指向的安全令牌。
               供基类调用。
            </summary>
      <param name="reader">
                读取安全令牌的 <see cref="T:System.Xml.XmlReader" />。
              </param>
      <param name="tokenResolver">
                确定安全令牌类型的 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />。
              </param>
      <returns>
              表示所读取的安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="tokenResolver" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.WriteKeyIdentifier(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>
              使用指定的 XML 编写器编写指定的密钥标识符。
            </summary>
      <param name="writer">
                编写密钥标识符的 <see cref="T:System.Xml.XmlWriter" />。
              </param>
      <param name="keyIdentifier">
                表示要编写的密钥标识符的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="keyIdentifier" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              使用指定的 XML 编写器编写指定的密钥标识符子句。
            </summary>
      <param name="writer">
                编写密钥标识符子句的 <see cref="T:System.Xml.XmlWriter" />。
              </param>
      <param name="keyIdentifierClause">
                表示要编写的密钥标识符子句的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="keyIdentifierClause" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.WriteKeyIdentifierClauseCore(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              使用指定的 XML 编写器编写指定的密钥标识符子句。
               供基类调用。
            </summary>
      <param name="writer">
                编写密钥标识符子句的 <see cref="T:System.Xml.XmlWriter" />。
              </param>
      <param name="keyIdentifierClause">
                表示要编写的密钥标识符子句的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="keyIdentifierClause" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.WriteKeyIdentifierCore(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>
              使用指定的 XML 编写器编写指定的密钥标识符。
               供基类调用。
            </summary>
      <param name="writer">
                编写密钥标识符的 <see cref="T:System.Xml.XmlWriter" />。
              </param>
      <param name="keyIdentifier">
                表示要编写的密钥标识符的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="keyIdentifier" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              使用指定的 XML 编写器编写指定的安全令牌。
            </summary>
      <param name="writer">
                编写安全令牌的 <see cref="T:System.Xml.XmlWriter" />。
              </param>
      <param name="token">
                表示要编写的安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="token" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenSerializer.WriteTokenCore(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              使用指定的 XML 编写器编写指定的安全令牌。
               供基类调用。
            </summary>
      <param name="writer">
                编写安全令牌的 <see cref="T:System.Xml.XmlWriter" />。
              </param>
      <param name="token">
                表示要编写的安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="token" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenVersion.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Selectors.SecurityTokenVersion" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Selectors.SecurityTokenVersion.GetSecuritySpecifications">
      <summary>
              获取受支持的安全规范的集合。
            </summary>
      <returns>
              一个类型为 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.String" />，它包含受支持的安全规范集。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.UserNamePasswordValidator.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Selectors.UserNamePasswordValidator" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Selectors.UserNamePasswordValidator.CreateMembershipProviderValidator(System.Web.Security.MembershipProvider)">
      <summary>
              获取 <see cref="T:System.IdentityModel.Selectors.UserNamePasswordValidator" /> 的实例，它使用指定的成员资格提供程序来验证用户名和密码。
            </summary>
      <param name="provider">
                一个验证用户名和密码的 <see cref="T:System.Web.Security.MembershipProvider" />。
              </param>
      <returns>
              一个使用 <see cref="T:System.IdentityModel.Selectors.UserNamePasswordValidator" /> 来验证用户名和密码的 <paramref name="provider" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.UserNamePasswordValidator.Validate(System.String,System.String)">
      <summary>
              当在派生类中重写时，验证指定的用户名和密码。
            </summary>
      <param name="userName">
                要验证的用户名。
              </param>
      <param name="password">
                要验证的密码。
              </param>
    </member>
    <member name="M:System.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.CanValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              获取一个值，该值指示指定的安全令牌是否可由该安全令牌身份验证器进行验证。
            </summary>
      <param name="token">
                要验证的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
              </param>
      <returns>
              如果 <see langword="true" /> 为 <paramref name="token" /> 安全令牌，则为 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.ValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              对指定的安全令牌进行身份验证，并返回该安全令牌的授权策略集。
            </summary>
      <param name="token">
                要验证的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
              </param>
      <returns>
              一个类型为 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" />，它包含对此应用程序生效的授权策略集。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.ValidateUserNamePasswordCore(System.String,System.String)">
      <summary>
              如果在派生类中重写，则对指定的用户名和密码进行身份验证，并且返回 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 安全令牌的授权策略集。
            </summary>
      <param name="userName">
                与安全令牌相关联的用户名。
              </param>
      <param name="password">
                与安全令牌相关联的密码。
              </param>
      <returns>
              一个类型为 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" />，它包含对此应用程序生效的授权策略集。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.UserNameSecurityTokenProvider.#ctor(System.String,System.String)">
      <summary>
              使用指定的用户名和密码初始化 <see cref="T:System.IdentityModel.Selectors.UserNameSecurityTokenProvider" /> 类的新实例。
            </summary>
      <param name="userName">
                要为其获取 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 安全令牌的用户的用户名。
              </param>
      <param name="password">
                要为其获取 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 安全令牌的用户的密码。
              </param>
    </member>
    <member name="M:System.IdentityModel.Selectors.UserNameSecurityTokenProvider.GetTokenCore(System.TimeSpan)">
      <summary>
              根据构造函数中指定的用户名和密码获取安全令牌。
            </summary>
      <param name="timeout">
                一个 <see cref="T:System.TimeSpan" />，它为获取安全令牌的消息指定超时值。
              </param>
      <returns>
              表示要获取的安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.WindowsSecurityTokenAuthenticator.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Selectors.WindowsSecurityTokenAuthenticator" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Selectors.WindowsSecurityTokenAuthenticator.#ctor(System.Boolean)">
      <summary>
              通过指定是否在对 Windows 用户进行身份验证时将该用户所属的组添加到 <see cref="T:System.IdentityModel.Selectors.WindowsSecurityTokenAuthenticator" /> 属性，初始化 <see cref="P:System.IdentityModel.Policy.AuthorizationContext.ClaimSets" /> 类的新实例。
            </summary>
      <param name="includeWindowsGroups">
                如果获取 Windows 用户所属的组，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.IdentityModel.Selectors.WindowsSecurityTokenAuthenticator.CanValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              获取一个值，该值指示指定的安全令牌是否可由该安全令牌身份验证器进行验证。
            </summary>
      <param name="token">
                <see cref="T:System.IdentityModel.Tokens.SecurityToken" />  进行验证。
              </param>
      <returns>
              如果 <see langword="true" /> 为 <paramref name="token" /> 安全令牌，则为 <see cref="T:System.IdentityModel.Tokens.WindowsSecurityToken" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.WindowsSecurityTokenAuthenticator.ValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              对指定的安全令牌进行身份验证，并返回该安全令牌的授权策略集。
            </summary>
      <param name="token">
                要验证的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
              </param>
      <returns>
              一个类型为 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" />，它包含对此应用程序生效的授权策略集。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.WindowsUserNameSecurityTokenAuthenticator.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Selectors.WindowsUserNameSecurityTokenAuthenticator" /> 类的新实例。 
            </summary>
    </member>
    <member name="M:System.IdentityModel.Selectors.WindowsUserNameSecurityTokenAuthenticator.#ctor(System.Boolean)">
      <summary>
              通过指定在对用户进行身份验证时，是否起初将标识用户所属 Windows 组的声明添加到 <see cref="T:System.IdentityModel.Selectors.WindowsUserNameSecurityTokenAuthenticator" /> 属性，以此来初始化 <see cref="P:System.IdentityModel.Policy.AuthorizationContext.ClaimSets" /> 类的新实例。
            </summary>
      <param name="includeWindowsGroups">
                如果获取 Windows 用户所属的组，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.IdentityModel.Selectors.WindowsUserNameSecurityTokenAuthenticator.ValidateUserNamePasswordCore(System.String,System.String)">
      <summary>
              对指定的用户名和密码进行身份验证，并返回 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 安全令牌的授权策略集。
            </summary>
      <param name="userName">
                与安全令牌相关联的用户名。
              </param>
      <param name="password">
                与安全令牌相关联的密码。
              </param>
      <returns>
              一个类型为 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" />，它包含对此应用程序生效的授权策略集。
            </returns>
      <exception cref="T:System.ArgumentException">
                  <paramref name="userName" /> 包含多个反斜杠 (\) 字符。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509CertificateValidator.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509CertificateValidator.CreateChainTrustValidator(System.Boolean,System.Security.Cryptography.X509Certificates.X509ChainPolicy)">
      <summary>
              获取一个验证程序，它通过指定用于构建和验证信任链的上下文和链策略来验证 X.509 证书。
            </summary>
      <param name="useMachineContext">
                如果为 <see langword="true" />，则使用计算机上下文；如果为 <see langword="false" />，则使用当前用户上下文。
              </param>
      <param name="chainPolicy">
                一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainPolicy" />，它指定用于构建和验证信任链的策略。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" />，它使用信任链来验证 X.509 证书。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509CertificateValidator.CreatePeerOrChainTrustValidator(System.Boolean,System.Security.Cryptography.X509Certificates.X509ChainPolicy)">
      <summary>
              获取一个验证程序，它验证证书是否位于 <see langword="TrustedPeople" /> 证书存储区中，或通过指定用于构建证书信任链的上下文和链策略来验证证书。
               如果证书通过任一验证方法，就是受信任的。
            </summary>
      <param name="useMachineContext">
                如果为 <see langword="true" />，则使用计算机上下文；如果为 <see langword="false" />，则使用当前用户上下文。
              </param>
      <param name="chainPolicy">
                一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainPolicy" />，它指定用于构建信任链的策略。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" />，它通过验证证书是否位于 <see langword="TrustedPeople" /> 证书存储区中来验证证书，或通过构建证书信任链来验证证书。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509CertificateValidator.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>
              在派生类中重写，当从 XML 加载自定义配置。
            </summary>
      <param name="nodelist">
                自定义配置元素中。
              </param>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509CertificateValidator.Validate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
              当在派生类中重写时，验证 X.509 证书。
            </summary>
      <param name="certificate">
                表示要验证的 X.509 证书的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。
              </param>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509SecurityTokenAuthenticator.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Selectors.X509SecurityTokenAuthenticator" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509SecurityTokenAuthenticator.#ctor(System.IdentityModel.Selectors.X509CertificateValidator)">
      <summary>
              使用指定的证书验证程序初始化 <see cref="T:System.IdentityModel.Selectors.X509SecurityTokenAuthenticator" /> 类的新实例。
            </summary>
      <param name="validator">
                一个 <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" />，用于验证证书是否有效。
              </param>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509SecurityTokenAuthenticator.#ctor(System.IdentityModel.Selectors.X509CertificateValidator,System.Boolean)">
      <summary>
              使用指定的证书验证方法初始化 <see cref="T:System.IdentityModel.Selectors.X509SecurityTokenAuthenticator" /> 类的新实例，并指示是否将证书标识映射到 Windows 标识。
            </summary>
      <param name="validator">
                一个 <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" />，用于验证证书是否有效。
              </param>
      <param name="mapToWindows">
                若要将证书标识映射到 Windows 标识，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509SecurityTokenAuthenticator.#ctor(System.IdentityModel.Selectors.X509CertificateValidator,System.Boolean,System.Boolean)">
      <summary>
              使用指定的证书验证方法初始化 <see cref="T:System.IdentityModel.Selectors.X509SecurityTokenAuthenticator" /> 类的新实例，并指示是否将证书标识映射到 Windows 标识以及用户所属的 Windows 组。
            </summary>
      <param name="validator">
                一个 <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" />，用于验证证书是否有效。
              </param>
      <param name="mapToWindows">
                若要将证书标识映射到 Windows 标识，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
      <param name="includeWindowsGroups">
                若要在整个身份验证过程中将 Windows 用户所属的组包括在构造的 <see langword="true" /> 属性中，则为 <see cref="P:System.IdentityModel.Policy.AuthorizationContext.ClaimSets" />；否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509SecurityTokenAuthenticator.CanValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              获取一个值，指示此安全令牌身份验证器是否可以验证指定的安全令牌。
            </summary>
      <param name="token">
                要验证的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
              </param>
      <returns>
              如果 <see langword="true" /> 是 <paramref name="token" /> 安全令牌或从 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> 中派生的类，则为 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509SecurityTokenAuthenticator.ValidateTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              对指定的安全令牌进行身份验证，并返回该安全令牌的授权策略集。
            </summary>
      <param name="token">
                要验证的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
              </param>
      <returns>
              一个类型为 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" />，它包含对此应用程序生效的授权策略集。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509SecurityTokenProvider.#ctor(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object)">
      <summary>
              通过从指定的证书存储条件中获取 X.509 证书来初始化 <see cref="T:System.IdentityModel.Selectors.X509SecurityTokenProvider" /> 类的新实例。
            </summary>
      <param name="storeLocation">
                <see cref="T:System.Security.Cryptography.X509Certificates.StoreLocation" /> 值之一，该值指定了证书存储位置。
              </param>
      <param name="storeName">
                <see cref="T:System.Security.Cryptography.X509Certificates.StoreName" /> 值之一，该值指定了证书存储名称。
              </param>
      <param name="findType">
                <see cref="T:System.Security.Cryptography.X509Certificates.X509FindType" /> 值之一，该值指定了如何搜索证书存储区。
              </param>
      <param name="findValue">
                用于在证书存储区中查找 X.509 证书的值。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="findValue" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
                  没有与指定的条件匹配的证书。
                
                  - 或 -
                
                  有多个证书与指定的条件匹配。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509SecurityTokenProvider.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
              使用指定的 X.509 证书初始化 <see cref="T:System.IdentityModel.Selectors.X509SecurityTokenProvider" /> 类的新实例。
            </summary>
      <param name="certificate">
                要为其获取安全令牌的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="certificate" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509SecurityTokenProvider.Dispose">
      <summary>
              释放由 <see cref="T:System.IdentityModel.Selectors.X509SecurityTokenProvider" /> 使用的所有资源。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Selectors.X509SecurityTokenProvider.GetTokenCore(System.TimeSpan)">
      <summary>
              使用构造函数中指定的 X.509 证书获取安全令牌。
            </summary>
      <param name="timeout">
                一个 <see cref="T:System.TimeSpan" />，它为获取安全令牌的消息指定超时值。
              </param>
      <returns>
              表示要获取的安全令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.SignatureVerificationFailedException.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.SignatureVerificationFailedException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.SignatureVerificationFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              用序列化数据初始化 <see cref="T:System.IdentityModel.SignatureVerificationFailedException" /> 类的新实例。
            </summary>
      <param name="info">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，其中包含序列化的对象数据。
              </param>
      <param name="context">
                一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，其中包含有关源或目标的上下文信息。
              </param>
    </member>
    <member name="M:System.IdentityModel.SignatureVerificationFailedException.#ctor(System.String)">
      <summary>
              用指定的错误消息初始化 <see cref="T:System.IdentityModel.SignatureVerificationFailedException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
    </member>
    <member name="M:System.IdentityModel.SignatureVerificationFailedException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IdentityModel.SignatureVerificationFailedException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="inner">
                <see cref="T:System.Exception" /> 导致当前异常。
                 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.AggregateTokenResolver.#ctor(System.Collections.Generic.IEnumerable{System.IdentityModel.Selectors.SecurityTokenResolver})">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.AggregateTokenResolver" /> 类通过使用指定的令牌解析程序列表。
            </summary>
      <param name="tokenResolvers">
                安全令牌解析程序要包装的此实例的列表。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="tokenResolvers" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.AggregateTokenResolver.TryResolveSecurityKeyCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)">
      <summary>
              尝试检索在指定的密钥标识符子句中引用的密钥。
            </summary>
      <param name="keyIdentifierClause">
                要检索的密钥的密钥标识符子句。
              </param>
      <param name="key">
                此方法返回时，包含指定的密钥标识符子句中引用的密钥。
                 此参数未经初始化即被传递。
              </param>
      <returns>
              如果可以为指定的密钥标识符子句检索密钥，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="keyIdentifierClause" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.AggregateTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>
              尝试检索至少指定的密钥标识符中包含的密钥标识符子句之一相匹配的安全令牌。
            </summary>
      <param name="keyIdentifier">
                要检索的令牌的安全密钥标识符。
              </param>
      <param name="token">
                此方法返回时，包含表示指定的密钥标识符的标记。
                 此参数未经初始化即被传递。
              </param>
      <returns>
              <see langword="true" /> 当一个令牌可检索为指定的密钥标识符;否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="keyIdentifier" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.AggregateTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>
              尝试解析与指定的密钥标识符子句相匹配的安全令牌。
            </summary>
      <param name="keyIdentifierClause">
                若要创建安全令牌的密钥标识符子句。
              </param>
      <param name="token">
                此方法返回时，包含表示指定的密钥标识符子句的安全令牌。
                 此参数未经初始化即被传递。
              </param>
      <returns>
              如果可以为指定的密钥标识符子句检索安全令牌，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="keyIdentifierClause" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.AsymmetricProofDescriptor.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.AsymmetricProofDescriptor" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.AsymmetricProofDescriptor.#ctor(System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.AsymmetricProofDescriptor" /> 类根据密钥标识符。
            </summary>
      <param name="keyIdentifier">
                在其构造证明令牌的密钥标识符。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.AsymmetricProofDescriptor.#ctor(System.Security.Cryptography.RSA)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.AsymmetricProofDescriptor" /> 类基于 RSA 算法。
            </summary>
      <param name="rsaAlgorithm">
                RSA 算法构造证明令牌。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.AsymmetricProofDescriptor.ApplyTo(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse)">
      <summary>
              适用于 RSTR 请求证明令牌的证明描述符。
            </summary>
      <param name="response">
                要将该说明符应用于 RSTR。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.AsymmetricSecurityKey" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetAsymmetricAlgorithm(System.String,System.Boolean)">
      <summary>
              在派生类中重写时，获取指定的非对称加密算法。
            </summary>
      <param name="algorithm">
                要创建的非对称算法。
              </param>
      <param name="privateKey">
                如果需要使用私钥来创建算法，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
      <returns>
              一个 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" />，表示指定的非对称加密算法。
            
              通常将 <see langword="true" /> 传递到 <paramref name="privateKey" /> 参数中，因为解密通常需要使用私钥。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetHashAlgorithmForSignature(System.String)">
      <summary>
              在派生类中重写时，获取一个用于生成数字签名的哈希值的加密算法。
            </summary>
      <param name="algorithm">
                哈希算法。
              </param>
      <returns>
              一个 <see cref="T:System.Security.Cryptography.HashAlgorithm" />，它生成数字签名的哈希值。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureDeformatter(System.String)">
      <summary>
              在派生类中重写时，获取数字签名的反格式化程序算法。
            </summary>
      <param name="algorithm">
                数字签名的反格式化程序算法。
              </param>
      <returns>
              一个 <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" />，它表示数字签名的反格式化程序算法。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureFormatter(System.String)">
      <summary>
              在派生类中重写时，获取数字签名的格式化程序算法。
            </summary>
      <param name="algorithm">
                数字签名的格式化程序算法。
              </param>
      <returns>
              一个 <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" />，它表示数字签名的格式化程序算法。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.HasPrivateKey">
      <summary>
              在派生类中重写时，获取一个值，指示私钥是否可用。
            </summary>
      <returns>
              如果私钥可用，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.AudienceRestriction.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.AudienceRestriction" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.AudienceRestriction.#ctor(System.IdentityModel.Selectors.AudienceUriMode)">
      <summary>
              用指定的模式初始化 <see cref="T:System.IdentityModel.Tokens.AudienceRestriction" /> 类的新实例。
            </summary>
      <param name="audienceMode">
                指定在其中应用了受众 URI 限制的模式的枚举值之一。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.AudienceUriValidationFailedException.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.AudienceUriValidationFailedException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.AudienceUriValidationFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              使用指定的 XML 序列化数据和有关序列化流的源和目标的上下文数据来初始化 <see cref="T:System.IdentityModel.Tokens.AudienceUriValidationFailedException" /> 类的新实例。
            </summary>
      <param name="info">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含在序列化和反序列化过程中使用的值。
              </param>
      <param name="context">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException" />，包含有关序列化流的源和目标的数据。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.AudienceUriValidationFailedException.#ctor(System.String)">
      <summary>
              使用指定的错误消息初始化 <see cref="T:System.IdentityModel.Tokens.AudienceUriValidationFailedException" /> 类的新实例。
            </summary>
      <param name="message">
                一个标识异常发生原因的消息。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.AudienceUriValidationFailedException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和错误的根源初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenException" /> 类的新实例。
            </summary>
      <param name="message">
                一个标识异常发生原因的消息。
              </param>
      <param name="inner">
                一个 <see cref="T:System.Exception" />，表示异常的根源。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.AuthenticationContext.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.AuthenticationContext" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.#ctor(System.String,System.Byte[],System.Boolean)">
      <summary>
              使用指定的密钥标识符子句类型、二进制数据以及一个指示是否必须克隆二进制数据的值来初始化 <see cref="T:System.IdentityModel.Tokens.BinaryKeyIdentifierClause" /> 类的新实例。
            </summary>
      <param name="clauseType">
                密钥标识符子句类型。
                 设置 <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.ClauseType" /> 属性的值。
              </param>
      <param name="identificationData">
                一个 <see cref="T:System.Byte" /> 数组，包含表示密钥标识符的二进制数据。
              </param>
      <param name="cloneBuffer">
                如果要克隆传入 <see langword="true" /> 参数的数组，则为 <paramref name="identificationData" />；否则为 <see langword="false" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="identificationData" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="identificationData" /> 的长度为零。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.#ctor(System.String,System.Byte[],System.Boolean,System.Byte[],System.Int32)">
      <summary>
              使用指定的密钥标识符子句类型、二进制数据、一个指示是否必须克隆二进制数据的值、一个 Nonce 和密钥长度来初始化 <see cref="T:System.IdentityModel.Tokens.BinaryKeyIdentifierClause" /> 类的新实例。
            </summary>
      <param name="clauseType">
                密钥标识符子句类型。
                 设置 <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.ClauseType" /> 属性的值。
              </param>
      <param name="identificationData">
                一个 <see cref="T:System.Byte" /> 数组，包含表示密钥标识符的二进制数据。
                 设置 <see cref="M:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.GetBuffer" /> 方法所返回的二进制数据。
              </param>
      <param name="cloneBuffer">
                如果要克隆传入 <see langword="true" /> 参数的数组，则为 <paramref name="identificationData" />；否则为 <see langword="false" />。
              </param>
      <param name="derivationNonce">
                一个 <see cref="T:System.Byte" /> 数组，包含用于创建派生密钥的 Nonce。
                 设置 <see cref="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.GetDerivationNonce" /> 方法所返回的值。
              </param>
      <param name="derivationLength">
                派生密钥的大小。
                 设置 <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.DerivationLength" /> 属性的值。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="identificationData" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="identificationData" /> 的长度为零。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.GetBuffer">
      <summary>
              获取表示密钥标识符的二进制数据。
            </summary>
      <returns>
              一个 <see cref="T:System.Byte" /> 数组，包含表示密钥标识符的二进制数据。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.GetRawBuffer">
      <summary>
              获取表示密钥标识符的二进制数据。
            </summary>
      <returns>
              一个 <see cref="T:System.Byte" /> 数组，包含表示密钥标识符的二进制数据。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.Matches(System.Byte[])">
      <summary>
              返回一个值，该值指示当前实例的二进制数据是否与指定的二进制数据相匹配。
            </summary>
      <param name="data">
                要进行比较的 <see cref="T:System.Byte" /> 数组。
              </param>
      <returns>
              如果 <see langword="true" />等效于 <paramref name="data " /> 方法所返回的二进制数据，则为 <see cref="M:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.GetBuffer" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.Matches(System.Byte[],System.Int32)">
      <summary>
              返回一个值，该值指示当前实例的二进制数据是否与指定偏移处的指定二进制数据等效。
            </summary>
      <param name="data">
                要进行比较的 <see cref="T:System.Byte" /> 数组。
              </param>
      <param name="offset">
                数组中的索引，从此处开始比较。
              </param>
      <returns>
              如果从 <see langword="true" /> 参数中指定的索引处开始，<paramref name="data " />参数中的二进制数据与 <paramref name="offset" /> 方法（从索引零开始）所返回的二进制数据等效，则为 <see cref="M:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.GetBuffer" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              返回一个值，该值指示此实例的密钥标识符是否等效于指定的密钥标识符子句。
            </summary>
      <param name="keyIdentifierClause">
                要进行比较的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。
              </param>
      <returns>
              如果 <see langword="true" /> 为 <paramref name="keyIdentifierClause" /> 类型并且 <see cref="T:System.IdentityModel.Tokens.BinaryKeyIdentifierClause" /> 方法所返回的二进制数据对于 <see cref="M:System.IdentityModel.Tokens.BinaryKeyIdentifierClause.GetBuffer" /> 参数和当前实例是相同的，则为 <paramref name="keyIdentifierClause" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.BootstrapContext.#ctor(System.Byte[])">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.BootstrapContext" /> 类通过使用指定的数组。
            </summary>
      <param name="token">
                一个数组，表示令牌。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="token" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.BootstrapContext.#ctor(System.IdentityModel.Tokens.SecurityToken,System.IdentityModel.Tokens.SecurityTokenHandler)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.BootstrapContext" /> 类通过使用指定的安全令牌和令牌处理程序。
            </summary>
      <param name="token">
                要序列化的安全令牌。
              </param>
      <param name="tokenHandler">
                用于序列化令牌处理程序。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="token" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="tokenHandler" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.BootstrapContext.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.BootstrapContext" /> 从流的类。
            </summary>
      <param name="info">
                序列化数据。
              </param>
      <param name="context">
                序列化的上下文。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="info" /> 为 null。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.BootstrapContext.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.BootstrapContext" /> 类通过使用指定的字符串。
            </summary>
      <param name="token">
                一个表示令牌的字符串。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="token" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.BootstrapContext.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 所需数据来序列化当前 <see cref="T:System.IdentityModel.Tokens.BootstrapContext" /> 对象。
            </summary>
      <param name="info">
                要填充数据的对象。
              </param>
      <param name="context">
                此序列化的目标。
                 可以为 <see langword="null" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="info" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry.AddTrustedIssuer(System.String,System.String)">
      <summary>
              将颁发者添加到受信任的颁发者的字典。
            </summary>
      <param name="certificateThumbprint">
                ASN.1 编码形式的颁发者的证书指纹。
              </param>
      <param name="name">
                颁发者的名称。
              </param>
      <exception cref="T:System.ArgumentException">
                  <paramref name="certificateThumbprint" /> 为 <see langword="null" /> 或空。
                
                  - 或 -
                
                  <paramref name="name" /> 为 <see langword="null" /> 或空。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  通过指定的颁发者 <paramref name="certificateThumbprint" /> 已配置。
                   (颁发者中已存在 <see cref="P:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry.ConfiguredTrustedIssuers" /> 字典。)
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry.GetIssuerName(System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              返回与指定关联的颁发者名称 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> 通过映射到受信任的颁发者字典中的名称的证书指纹。
            </summary>
      <param name="securityToken">
                安全令牌为其请求的颁发者名称。
                 应该是可赋值为 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" />。
              </param>
      <returns>
              如果该令牌的证书指纹的条目中存在的颁发者名称 <see cref="P:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry.ConfiguredTrustedIssuers" /> 字典; 否则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="securityToken" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>
              从配置中加载的受信任的颁发者。
            </summary>
      <param name="customConfiguration">
                表示配置文件中指定的受信任的颁发者的映射的 XML。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="customConfiguration" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  配置包含无法识别的一个或多个元素。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.EmptySecurityKeyIdentifierClause.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.EmptySecurityKeyIdentifierClause" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.EmptySecurityKeyIdentifierClause.#ctor(System.Object)">
      <summary>
              使用指定的上下文初始化 <see cref="T:System.IdentityModel.Tokens.EmptySecurityKeyIdentifierClause" /> 类的新实例。
            </summary>
      <param name="context">
                用于提供一个提示，在需要时将一个空的子句解析为某个特定键。
                 对于具有而无需签名的 SAML11 和 SAML2 令牌 <see langword="&lt;KeyInfo&gt;" /> 元素，该属性将包含当前正在处理的断言。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials.#ctor(System.IdentityModel.Tokens.EncryptingCredentials,System.Int32,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials" /> 类根据指定 <see cref="T:System.IdentityModel.Tokens.EncryptingCredentials" /> 对象、 密钥大小和加密算法。
            </summary>
      <param name="wrappingCredentials">
                包装用于加密会话密钥凭据密钥。
              </param>
      <param name="keySizeInBits">
                已包装的会话密钥的密钥的大小。
              </param>
      <param name="encryptionAlgorithm">
                一个 URI，表示加密算法时使用会话密钥。
                 这应该是对称密钥算法。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="wrappingCredentials" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials" /> 类根据指定的 X.509 证书。
            </summary>
      <param name="certificate">
                使用密钥进行加密的证书。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.Int32,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials" /> 类根据指定的 X.509 证书，换行算法、 密钥大小和加密算法。
            </summary>
      <param name="certificate">
                使用密钥进行加密的证书。
              </param>
      <param name="keyWrappingAlgorithm">
                一个 URI，表示密钥包装算法。
                 这应该是非对称算法。
              </param>
      <param name="keySizeInBits">
                已包装的会话密钥的密钥的大小。
              </param>
      <param name="encryptionAlgorithm">
                一个 URI，表示加密算法时使用会话密钥。
                 这应该是对称密钥算法。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.#ctor(System.Byte[],System.String)">
      <summary>
              使用指定的加密密钥和用于加密密钥的加密算法初始化 <see cref="T:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause" /> 类的新实例。
            </summary>
      <param name="encryptedKey">
                包含加密密钥的 <see cref="T:System.Byte" /> 数组。
                 设置 <see cref="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.GetEncryptedKey" /> 方法所返回的值。
              </param>
      <param name="encryptionMethod">
                用于加密密钥的加密算法。
                 设置 <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptionMethod" /> 属性的值。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="encryptionMethod" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="encryptedKey" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="encryptedKey" /> 的长度为零。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.#ctor(System.Byte[],System.String,System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>
              使用指定的加密密钥、用于加密密钥的加密算法和加密密钥的密钥标识符初始化 <see cref="T:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause" /> 类的新实例。
            </summary>
      <param name="encryptedKey">
                包含加密密钥的 <see cref="T:System.Byte" /> 数组。
                 设置 <see cref="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.GetEncryptedKey" /> 方法所返回的值。
              </param>
      <param name="encryptionMethod">
                用于加密密钥的加密算法。
                 设置 <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptionMethod" /> 属性的值。
              </param>
      <param name="encryptingKeyIdentifier">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />，表示 <paramref name="encryptedKey" /> 参数中指定的加密密钥的密钥标识符。
                 设置 <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptingKeyIdentifier" /> 属性的值。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="encryptionMethod" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="encryptedKey" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="encryptedKey" /> 的长度为零。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.#ctor(System.Byte[],System.String,System.IdentityModel.Tokens.SecurityKeyIdentifier,System.String)">
      <summary>
              使用指定的加密密钥、用于加密密钥的加密算法、加密密钥的密钥标识符和用户可读名称初始化 <see cref="T:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause" /> 类的新实例。
            </summary>
      <param name="encryptedKey">
                包含加密密钥的 <see cref="T:System.Byte" /> 数组。
                 设置 <see cref="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.GetEncryptedKey" /> 方法所返回的值。
              </param>
      <param name="encryptionMethod">
                用于加密密钥的加密算法。
                 设置 <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptionMethod" /> 属性的值。
              </param>
      <param name="encryptingKeyIdentifier">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />，表示 <paramref name="encryptedKey" /> 参数中指定的加密密钥的密钥标识符。
                 设置 <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptingKeyIdentifier" /> 属性的值。
              </param>
      <param name="carriedKeyName">
                与 <paramref name="encryptedKey" /> 参数中指定的密钥相关联的用户可读名称。
                 设置 <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.CarriedKeyName" /> 属性的值。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="encryptionMethod" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="encryptedKey" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="encryptedKey" /> 的长度为零。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.#ctor(System.Byte[],System.String,System.IdentityModel.Tokens.SecurityKeyIdentifier,System.String,System.Byte[],System.Int32)">
      <summary>
              使用指定的加密密钥、用于加密密钥的加密算法、密钥的密钥标识符和用户可读名称初始化 <see cref="T:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause" /> 类的新实例。
            </summary>
      <param name="encryptedKey">
                包含加密密钥的 <see cref="T:System.Byte" /> 数组。
                 设置 <see cref="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.GetEncryptedKey" /> 方法所返回的值。
              </param>
      <param name="encryptionMethod">
                用于加密密钥的加密算法。
                 设置 <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptionMethod" /> 属性的值。
              </param>
      <param name="encryptingKeyIdentifier">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />，表示 <paramref name="encryptedKey" /> 参数中指定的密钥的密钥标识符。
                 设置 <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptingKeyIdentifier" /> 属性的值。
              </param>
      <param name="carriedKeyName">
                与 <paramref name="encryptedKey" /> 参数中指定的密钥相关联的用户可读名称。
                 设置 <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.CarriedKeyName" /> 属性的值。
              </param>
      <param name="derivationNonce">
                一个 <see cref="T:System.Byte" /> 数组，包含用于创建派生密钥的 Nonce。
                 设置 <see cref="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.GetDerivationNonce" /> 方法所返回的值。
              </param>
      <param name="derivationLength">
                派生密钥的大小。
                 设置 <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.DerivationLength" /> 属性的值。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="encryptionMethod" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="encryptedKey" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="encryptedKey" /> 的长度为零。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.GetEncryptedKey">
      <summary>
              获取加密密钥。
            </summary>
      <returns>
              包含加密密钥的 <see cref="T:System.Byte" /> 数组。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.Matches(System.Byte[],System.String,System.String)">
      <summary>
              返回一个值，该值指示此实例的密钥标识符是否与指定的加密密钥、加密方法和用户可读名称相同。
            </summary>
      <param name="encryptedKey">
                包含加密密钥的 <see cref="T:System.Byte" /> 数组。
              </param>
      <param name="encryptionMethod">
                用于加密密钥的加密算法。
              </param>
      <param name="carriedKeyName">
                与加密密钥相关联的用户可读名称。
              </param>
      <returns>
              如果 <see langword="true" />、<paramref name="encryptedKey" /> 和 <paramref name="encryptionMethod" /> 参数分别具有 <paramref name="carriedKeyName" /> 方法以及 <see cref="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.GetEncryptedKey" /> 和 <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptionMethod" /> 属性所返回的值，则为 <see cref="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.CarriedKeyName" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              返回一个值，该值指示此实例的密钥标识符是否等效于指定的密钥标识符子句。
            </summary>
      <param name="keyIdentifierClause">
                要进行比较的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。
              </param>
      <returns>
              如果 <see langword="true" /> 的类型为 <paramref name="keyIdentifierClause" />，并且具有与当前实例相同的加密密钥、加密方法和用户可读名称，则为 <see cref="T:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="keyIdentifierClause" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.ToString">
      <summary>
              返回表示当前对象的字符串。
            </summary>
      <returns>
              当前对象。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedSecurityToken.#ctor(System.IdentityModel.Tokens.SecurityToken,System.IdentityModel.Tokens.EncryptingCredentials)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.EncryptedSecurityToken" /> 通过使用指定的加密凭据指定的标记的类。
            </summary>
      <param name="token">
                要加密的令牌。
              </param>
      <param name="encryptingCredentials">
                要使用对令牌进行加密的凭据。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedSecurityToken.CanCreateKeyIdentifierClause``1">
      <summary>
              获取一个值，该值指示令牌是否可以创建指定类型的密钥标识符子句。
            </summary>
      <typeparam name="T">
                密钥标识符子句的类型。
              </typeparam>
      <returns>
              <see langword="true" /> 如果令牌可以创建密钥标识符子句指定的类型;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedSecurityToken.CreateKeyIdentifierClause``1">
      <summary>
              创建指定类型的令牌的密钥标识符子句。
            </summary>
      <typeparam name="T">
                若要创建的密钥标识符子句的类型。
              </typeparam>
      <returns>
              指定类型的密钥标识符子句。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedSecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              返回一个值，该值指示此实例的密钥标识符能否解析为指定的密钥标识符。
            </summary>
      <param name="keyIdentifierClause">
                要与此实例进行比较的密钥标识符子句。
              </param>
      <returns>
              <see langword="true" /> 如果指定的密钥标识符子句可以解析的此实例;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedSecurityToken.ResolveKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              为指定的密钥标识符子句获取密钥。
            </summary>
      <param name="keyIdentifierClause">
                若要获取密钥的密钥标识符子句。
              </param>
      <returns>
              键。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>
              返回一个值，该值指示当前的 XML 元素是否正指向 <see langword="&lt;xenc:EncryptedKey&gt;" /> 可以反序列化到元素 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> 此实例。
            </summary>
      <param name="reader">
                XML 读取器的开始元素处。
                 读取器不应将前移。
              </param>
      <returns>
              <see langword="true" /> 如果 XML 读取器定位在 <see langword="&lt;xenc:EncryptedKey&gt;" /> 元素，如在部分 3.5.1 (http://www.w3.org/TR/2002/REC-xmlenc-core-20021210); 中的 XML 加密语法和处理规范中定义，否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
      <summary>
              返回一个值，该值指示读取器是否正指向 <see langword="&lt;xenc:EncryptedData&gt;" /> 元素。
            </summary>
      <param name="reader">
                读取器定位在安全令牌 (<see langword="&lt;xenc:EncryptedData&gt;" /> 元素。)
              </param>
      <returns>
              <see langword="true" /> 如果读取器定位在 <see langword="&lt;xenc:EncryptedData&gt;" /> 元素; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.GetTokenTypeIdentifiers">
      <summary>
              获取由当前实例的令牌类型标识符的 Uri。
            </summary>
      <returns>
              默认情况下，返回具有单个数组 <see langword="null" /> 由于没有与之关联的特定的令牌类型标识符的字符串 <see cref="T:System.IdentityModel.Tokens.EncryptedSecurityToken" /> 类型。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>
              读取 <see cref="T:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause" /> 从 XML 流。
            </summary>
      <param name="reader">
                XML 读取器定位在 <see langword="&lt;xenc:EncryptedKey&gt;" /> 元素，作为 http://www.w3.org/TR/2002/REC-xmlenc-core-20021210 中的定义; 否则为 <see langword="false" />。
              </param>
      <returns>
              类型的密钥标识符子句 <see cref="T:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="reader" /> 未置于 <see langword="&lt;xenc:EncryptedKey&gt;" /> 元素。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
      <summary>
              读取加密的安全令牌。
            </summary>
      <param name="reader">
                从中进行读取的标记读取器。
              </param>
      <returns>
              类型的安全令牌 <see cref="T:System.IdentityModel.Tokens.EncryptedSecurityToken" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  没有任何配置的服务令牌解析程序。
                   (或者 <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 属性或 <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.ServiceTokenResolver" /> 被引用的标记处理程序配置的属性是 <see langword="null" />。
                   要获得解密密钥，需要服务令牌解析程序。
                
                  - 或 -
                
                  <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollection" />通过引用 <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection" /> 属性是找不到 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> ，可以读取已解密的 XML，并返回 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
                  一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> 找不到的内部指向的 XML 读取器。
                
                  - 或 -
                
                  <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> 不是 <see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey" />。
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException">
                  <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> 找到的内部配置的服务令牌解析程序为无法解析 XML <see cref="T:System.IdentityModel.Tokens.SecurityKey" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              编写使用 XML 编写器加密的安全令牌。
            </summary>
      <param name="writer">
                要向其写入加密的令牌的 XML 编写器。
              </param>
      <param name="token">
                加密的安全令牌，必须是实例 <see cref="T:System.IdentityModel.Tokens.EncryptedSecurityToken" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="token" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="token" /> 不能作为赋值 <see cref="T:System.IdentityModel.Tokens.EncryptedSecurityToken" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 属性为 <see langword="null" />。
                   此属性是需要获取密钥进行加密。
                
                  - 或 -
                
                  返回的令牌处理程序集合 <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection" /> 属性找不到 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> ，可以编写 <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> 返回 <see cref="P:System.IdentityModel.Tokens.EncryptedSecurityToken.Token" /> 属性。
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
                  <see cref="P:System.IdentityModel.Tokens.EncryptingCredentials.SecurityKey" /> 属性不能作为分配 <see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              使用指定的 XML 序列化数据和有关序列化流的源和目标的上下文数据来初始化 <see cref="T:System.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException" /> 类的新实例。
            </summary>
      <param name="info">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含在序列化和反序列化过程中使用的值。
              </param>
      <param name="context">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityTokenException" />，包含有关序列化流的源和目标的数据。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException.#ctor(System.String)">
      <summary>
              使用指定的错误消息初始化 <see cref="T:System.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException" /> 类的新实例。
            </summary>
      <param name="message">
                一个标识异常发生原因的消息。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和错误的根源初始化 <see cref="T:System.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException" /> 类的新实例。
            </summary>
      <param name="message">
                一个标识异常发生原因的消息。
              </param>
      <param name="inner">
                一个 <see cref="T:System.Exception" />，表示异常的根源。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptingCredentials.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.EncryptingCredentials" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.EncryptingCredentials.#ctor(System.IdentityModel.Tokens.SecurityKey,System.IdentityModel.Tokens.SecurityKeyIdentifier,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.EncryptingCredentials" /> 用指定的加密密钥、 密钥标识符和加密算法。
            </summary>
      <param name="key">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> ，包含用于加密的加密密钥。
              </param>
      <param name="keyIdentifier">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> ，指定表示用于加密的密钥的标识符。
              </param>
      <param name="algorithm">
                一个 URI，表示用于加密的加密算法。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="key" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="keyIdentifier" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="algorithm" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.GenericXmlSecurityKeyIdentifierClause.#ctor(System.Xml.XmlElement)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.GenericXmlSecurityKeyIdentifierClause" /> 类通过使用指定的 XML 元素。
            </summary>
      <param name="referenceXml">
                XML 元素，表示密钥标识符子句。
                 设置 <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityKeyIdentifierClause.ReferenceXml" /> 属性的值。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="referenceXML" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.GenericXmlSecurityKeyIdentifierClause.#ctor(System.Xml.XmlElement,System.Byte[],System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.GenericXmlSecurityKeyIdentifierClause" /> 类通过使用指定的 XML 元素、 nonce 和派生长度。
            </summary>
      <param name="referenceXml">
                XML 元素，表示密钥标识符子句。
                 设置 <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityKeyIdentifierClause.ReferenceXml" /> 属性的值。
              </param>
      <param name="derivationNonce">
                一个 <see cref="T:System.Byte" /> 数组，包含用于创建派生密钥的 Nonce。
                 设置 <see cref="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.GetDerivationNonce" /> 方法所返回的值。
              </param>
      <param name="derivationLength">
                派生密钥的大小。
                 设置 <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.DerivationLength" /> 属性的值。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="referenceXML" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.GenericXmlSecurityKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              返回一个值，该值指示指定的密钥标识符子句是否与当前实例相匹配。
            </summary>
      <param name="keyIdentifierClause">
                要与当前实例进行比较的密钥标识符子句。
              </param>
      <returns>
              <see langword="true" /> 如果指定的密钥标识符子句与当前实例相匹配否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.GenericXmlSecurityToken.#ctor(System.Xml.XmlElement,System.IdentityModel.Tokens.SecurityToken,System.DateTime,System.DateTime,System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy})">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.GenericXmlSecurityToken" /> 类的新实例。
            </summary>
      <param name="tokenXml">
                一个 <see cref="T:System.Xml.XmlElement" />，表示与安全令牌相关联的 XML。
                 设置 <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.TokenXml" /> 属性。
              </param>
      <param name="proofToken">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />，表示安全令牌的证明令牌。
                 设置 <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.ProofToken" /> 属性。
              </param>
      <param name="effectiveTime">
                一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最初时刻。
                 设置 <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.ValidFrom" /> 属性。
              </param>
      <param name="expirationTime">
                一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最后时刻。
                 设置 <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.ValidFrom" /> 属性。
              </param>
      <param name="internalTokenReference">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，表示安全令牌包含在引用它的 SOAP 消息内时对此安全令牌的引用。
                 设置 <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.InternalTokenReference" /> 属性。
              </param>
      <param name="externalTokenReference">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，表示安全令牌未包含在引用它的 SOAP 消息内时对此安全令牌的引用。
                 设置 <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.ValidFrom" /> 属性。
              </param>
      <param name="authorizationPolicies">
                一个类型为 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" />，包含此安全令牌的授权策略集。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="tokenXml" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="proofToken" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.GenericXmlSecurityToken.CanCreateKeyIdentifierClause``1">
      <summary>
              获取一个值，该值指示此安全令牌能否创建指定的密钥标识符子句。
            </summary>
      <typeparam name="T">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，指定要创建的密钥标识符。
              </typeparam>
      <returns>
              如果 <see langword="true" /> 不为 <paramref name="T" />，并且与 <see langword="null" /> 或 <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.InternalTokenReference" /> 属性值的类型相同，则为 <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.ExternalTokenReference" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.GenericXmlSecurityToken.CreateKeyIdentifierClause``1">
      <summary>
              创建指定的密钥标识符子句。
            </summary>
      <typeparam name="T">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，指定要创建的密钥标识符。
              </typeparam>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause" />，它是 <see cref="T:System.IdentityModel.Tokens.GenericXmlSecurityToken" /> 安全令牌的密钥标识符子句。
            </returns>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
                  <paramref name="T" /> 不为 <see langword="null" />，并且与 <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.InternalTokenReference" /> 或 <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.ExternalTokenReference" /> 属性值不是同一类型。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.GenericXmlSecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              返回一个值，该值指示此实例的密钥标识符是否等于指定的密钥标识符。
            </summary>
      <param name="keyIdentifierClause">
                一个要与此实例进行比较的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。
              </param>
      <returns>
              如果 <see langword="true" /> 不为 <paramref name="keyIdentifierClause" />，并且与 <see langword="null" /> 或 <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.InternalTokenReference" /> 属性值匹配，则为 <see cref="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.ExternalTokenReference" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.GenericXmlSecurityToken.ToString">
      <summary>
              返回当前对象。
            </summary>
      <returns>
              当前对象。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[])">
      <summary>
              使用指定的对称密钥初始化 <see cref="T:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey" /> 类的新实例。
            </summary>
      <param name="symmetricKey">
                包含对称密钥的 <see cref="T:System.Byte" /> 数组。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="symmetricKey" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="symmetricKey" /> 的长度为零。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[],System.Boolean)">
      <summary>
              使用指定的对称密钥和一个指示是否必须克隆二进制数据的值来初始化 <see cref="T:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey" /> 类的新实例。
            </summary>
      <param name="symmetricKey">
                包含对称密钥的 <see cref="T:System.Byte" /> 数组。
              </param>
      <param name="cloneBuffer">
                如果要克隆传入 <see langword="true" /> 参数的数组，则为 <paramref name="symmetricKey" />；否则为 <see langword="false" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="symmetricKey" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="symmetricKey" /> 的长度为零。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey(System.String,System.Byte[])">
      <summary>
              对指定的加密密钥进行解密。
            </summary>
      <param name="algorithm">
                用于对密钥进行加密的加密算法。
              </param>
      <param name="keyData">
                包含加密密钥的 <see cref="T:System.Byte" /> 数组。
              </param>
      <returns>
              包含解密密钥的 <see cref="T:System.Byte" /> 数组。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  不支持 <paramref name="algorithm" />。
                   支持的算法包括 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap" /> 和 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey(System.String,System.Byte[])">
      <summary>
              加密指定的密钥。
            </summary>
      <param name="algorithm">
                用于对密钥进行加密的加密算法。
              </param>
      <param name="keyData">
                包含密钥的 <see cref="T:System.Byte" /> 数组。
              </param>
      <returns>
              包含加密密钥的 <see cref="T:System.Byte" /> 数组。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  不支持 <paramref name="algorithm" />。
                   受支持的算法包括 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap" /> 和 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)">
      <summary>
              使用指定的加密算法和当前密钥的参数生成派生密钥。
            </summary>
      <param name="algorithm">
                一个 URI，表示用于生成派生密钥的加密算法。
              </param>
      <param name="label">
                一个 <see cref="T:System.Byte" /> 数组，它包含加密算法的标签参数。
              </param>
      <param name="nonce">
                一个 <see cref="T:System.Byte" /> 数组，它包含用于创建派生密钥的 Nonce。
              </param>
      <param name="derivedKeyLength">
                派生密钥的大小。
              </param>
      <param name="offset">
                派生密钥在从此方法返回的字节数组中的位置。
              </param>
      <returns>
              包含派生密钥的 <see cref="T:System.Byte" /> 数组。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  不支持 <paramref name="algorithm" />。
                   受支持的算法为 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])">
      <summary>
              获取一种使用指定的加密算法对密码文本进行解密的转换。
            </summary>
      <param name="algorithm">
                一种对密码文本（例如加密的 XML）进行解密的加密算法。
              </param>
      <param name="iv">
                一个 <see cref="T:System.Byte" /> 数组，它包含指定算法的初始化向量 (<see langword="IV" />)。
              </param>
      <returns>
              一个表示解密转换的 <see cref="T:System.Security.Cryptography.ICryptoTransform" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  不支持 <paramref name="algorithm" />。
                   支持的算法包括 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption" /> 和 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])">
      <summary>
              获取一种使用指定的加密算法对 XML 进行加密的转换。
            </summary>
      <param name="algorithm">
                一个对 XML 进行加密的加密算法。
              </param>
      <param name="iv">
                一个 <see cref="T:System.Byte" /> 数组，它包含指定算法的初始化向量 (<see langword="IV" />)。
              </param>
      <returns>
              一个表示加密转换的 <see cref="T:System.Security.Cryptography.ICryptoTransform" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  不支持 <paramref name="algorithm" />。
                   支持的算法包括 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption" /> 和 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize(System.String)">
      <summary>
              获取指定加密算法所需的初始化向量 (<see langword="IV" />) 的大小（以位为单位）。
            </summary>
      <param name="algorithm">
                用于获取初始化向量 (<see langword="IV" />) 的大小的加密算法。
              </param>
      <returns>
              <see langword="IV" /> 参数中指定的加密算法所需的初始化向量 (<paramref name="algorithm" />) 的大小（以位为单位）。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  不支持 <paramref name="algorithm" />。
                   支持的算法包括 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption" /> 和 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)">
      <summary>
              获取指定的加密哈希算法的实例。
            </summary>
      <param name="algorithm">
                要获取其实例的加密哈希算法。
              </param>
      <returns>
              一个表示加密哈希算法的 <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  不支持 <paramref name="algorithm" />。
                   受支持的算法为 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(System.String)">
      <summary>
              获取指定对称算法的实例。
            </summary>
      <param name="algorithm">
                要获取其实例的对称算法。
              </param>
      <returns>
              一个表示对称算法的 <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  不支持 <paramref name="algorithm" />。
                   受支持的算法包括 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap" /> 和 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey">
      <summary>
              获取表示对称密钥的字节。
            </summary>
      <returns>
              包含对称密钥的 <see cref="T:System.Byte" /> 数组。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(System.String)">
      <summary>
              获取一个值，该值指示指定的算法是否使用非对称密钥。
            </summary>
      <param name="algorithm">
                加密算法。
              </param>
      <returns>
              如果指定的算法使用非对称密钥，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm(System.String)">
      <summary>
              获取一个值，该值指示此类是否支持指定的算法。
            </summary>
      <param name="algorithm">
                加密算法。
              </param>
      <returns>
              如果此类支持指定的算法，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(System.String)">
      <summary>
              获取一个值，该值指示指定的算法是否使用对称密钥。
            </summary>
      <param name="algorithm">
                加密算法。
              </param>
      <returns>
              如果指定的算法使用对称密钥，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.IssuerNameRegistry.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.IssuerNameRegistry" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName(System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              当在派生类中重写，则返回指定的安全令牌的颁发者的名称。
            </summary>
      <param name="securityToken">
                要为其返回的颁发者名称的安全令牌。
              </param>
      <returns>
              颁发者名称中。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName(System.IdentityModel.Tokens.SecurityToken,System.String)">
      <summary>
              当在派生类中重写，则返回指定的安全令牌的颁发者的名称。
               指定颁发者名称可能会被视为在确定颁发者名称返回。
            </summary>
      <param name="securityToken">
                要为其返回的颁发者名称的安全令牌。
              </param>
      <param name="requestedIssuerName">
                在请求时需要考虑一个颁发者名称。
              </param>
      <returns>
              颁发者名称中。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.IssuerNameRegistry.GetWindowsIssuerName">
      <summary>
              返回要用于 Windows 声明的默认颁发者名称。
            </summary>
      <returns>
              Windows 声明默认颁发者名称。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.IssuerNameRegistry.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>
              在派生类中重写，当从 XML 加载自定义配置。
            </summary>
      <param name="nodelist">
                配置 XML 元素。
                 在列表中的每个节点属于类型 <see cref="T:System.Xml.XmlElement" />。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.IssuerTokenResolver.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.IssuerTokenResolver" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.IssuerTokenResolver.#ctor(System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.IssuerTokenResolver" /> 通过使用指定的令牌解析程序的类。
            </summary>
      <param name="wrappedTokenResolver">
                安全令牌解析程序要包装的此实例。
                 集 <see cref="P:System.IdentityModel.Tokens.IssuerTokenResolver.WrappedTokenResolver" /> 属性中的新实例。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.IssuerTokenResolver.TryResolveSecurityKeyCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)">
      <summary>
              尝试检索在指定的密钥标识符子句中引用的密钥。
               （重写基类方法。）
            </summary>
      <param name="keyIdentifierClause">
                若要检索的密钥的密钥标识符子句。
              </param>
      <param name="key">
                此方法返回时，包含指定的密钥标识符子句中引用的密钥。
                 此参数未经初始化即被传递。
              </param>
      <returns>
              如果可以为指定的密钥标识符子句检索密钥，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.IssuerTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>
              尝试检索至少指定的密钥标识符中包含的密钥标识符子句之一相匹配的安全令牌。
               （重写基类方法。）
            </summary>
      <param name="keyIdentifier">
                要创建的安全令牌的密钥标识符。
              </param>
      <param name="token">
                当此方法返回时，包含一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />，它表示指定的密钥标识符。
                 此参数未经初始化即被传递。
              </param>
      <returns>
              <see langword="true" /> 如果可以为指定的密钥标识符; 检索安全令牌否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.IssuerTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>
              当在派生类中重写时，尝试解析与指定的密钥标识符子句相匹配的安全令牌。
               （重写基类方法。）
            </summary>
      <param name="keyIdentifierClause">
                若要创建安全令牌的密钥标识符子句。
              </param>
      <param name="token">
                当此方法返回时，包含一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />，它表示指定的密钥标识符子句。
                 此参数未经初始化即被传递。
              </param>
      <returns>
              <see langword="true" /> 如果可以为指定的密钥标识符子句; 中检索安全令牌否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosReceiverSecurityToken.#ctor(System.Byte[])">
      <summary>
              使用指定的 Kerberos 票证初始化 <see cref="T:System.IdentityModel.Tokens.KerberosReceiverSecurityToken" /> 类的新实例。
            </summary>
      <param name="request">
                包含 Kerberos 票证的 <see cref="T:System.Byte" /> 数组。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosReceiverSecurityToken.#ctor(System.Byte[],System.String)">
      <summary>
              使用指定的 Kerberos 票证和唯一标识符初始化 <see cref="T:System.IdentityModel.Tokens.KerberosReceiverSecurityToken" /> 类的新实例。
            </summary>
      <param name="request">
                包含 Kerberos 票证的 <see cref="T:System.Byte" /> 数组。
              </param>
      <param name="id">
                安全令牌的唯一标识符。
                 设置 <see cref="P:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.Id" /> 属性的值。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosReceiverSecurityToken.#ctor(System.Byte[],System.String,System.String)">
      <summary>
              创建 <see cref="T:System.IdentityModel.Tokens.KerberosReceiverSecurityToken" /> 的新实例。
            </summary>
      <param name="request">
                包含 Kerberos 票证的字节数组。
              </param>
      <param name="id">
                安全令牌的唯一标识符。
              </param>
      <param name="valueTypeUri">
                描述值类型的 URI。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosReceiverSecurityToken.CanCreateKeyIdentifierClause``1">
      <summary>
              获取一个值，该值指示此安全令牌能否创建指定的密钥标识符。
            </summary>
      <typeparam name="T">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，指定要创建的密钥标识符的类型。
              </typeparam>
      <returns>
              如果 <see langword="true" /> 的类型为 <paramref name="T" />，则为 <see cref="T:System.IdentityModel.Tokens.KerberosTicketHashKeyIdentifierClause" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosReceiverSecurityToken.CreateKeyIdentifierClause``1">
      <summary>
              创建指定的密钥标识符子句。
            </summary>
      <typeparam name="T">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，指定要创建的密钥标识符的类型。
              </typeparam>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，它是安全令牌的密钥标识符子句。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosReceiverSecurityToken.GetRequest">
      <summary>
              获取 Kerberos 票证。
            </summary>
      <returns>
              包含 Kerberos 票证的 <see cref="T:System.Byte" /> 数组。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosReceiverSecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              返回一个值，该值指示此实例的密钥标识符是否与指定的密钥标识符相匹配。
            </summary>
      <param name="keyIdentifierClause">
                要与此实例进行比较的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。
              </param>
      <returns>
              如果 <see langword="true" /> 的类型为 <paramref name="keyIdentifierClause" /> 并且 Kerberos 票证匹配，则为 <see cref="T:System.IdentityModel.Tokens.KerberosTicketHashKeyIdentifierClause" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.#ctor(System.String)">
      <summary>
              使用与指定的服务主体名称关联的服务来初始化 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 类的新实例。
            </summary>
      <param name="servicePrincipalName">
                <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的服务主体名称。
                 设置 <see cref="P:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.ServicePrincipalName" /> 属性。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="servicePrincipalName" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
                  无法为当前用户获取 Kerberos 票证。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.#ctor(System.String,System.Security.Principal.TokenImpersonationLevel,System.Net.NetworkCredential,System.String)">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 类的新实例。
            </summary>
      <param name="servicePrincipalName">
                <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的服务主体名称。
                 设置 <see cref="P:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.ServicePrincipalName" /> 属性。
              </param>
      <param name="tokenImpersonationLevel">
                <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值之一，它指定客户端允许在何种级别上模拟 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌。
              </param>
      <param name="networkCredential">
                一个 <see cref="T:System.Net.NetworkCredential" />，它指定要为其获取 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的用户。
              </param>
      <param name="id">
                安全令牌的唯一标识符。
                 设置 <see cref="P:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.Id" /> 属性的值。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="servicePrincipalName" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="id" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="networkCredential" /> 不为 <see langword="null" /> 且不等于 <see cref="P:System.Net.CredentialCache.DefaultNetworkCredentials" />，而 <see cref="P:System.Net.NetworkCredential.UserName" /> 属性为空或 <see langword="null" />。
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
                  无法为指定用户获得 Kerberos 票证。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="tokenImpersonationLevel" /> 不是 <see langword="Impersonation" /> 或 <see langword="Identity" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.CanCreateKeyIdentifierClause``1">
      <summary>
              获取一个值，该值指示此安全令牌能否创建指定的密钥标识符。
            </summary>
      <typeparam name="T">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，指定要创建的密钥标识符。
              </typeparam>
      <returns>
              如果 <see langword="true" /> 的类型为 <paramref name="T" />，则为 <see cref="T:System.IdentityModel.Tokens.KerberosTicketHashKeyIdentifierClause" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.CreateKeyIdentifierClause``1">
      <summary>
              创建指定的密钥标识符子句。
            </summary>
      <typeparam name="T">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，指定要创建的密钥标识符。
              </typeparam>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，它是安全令牌的密钥标识符子句。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.GetRequest">
      <summary>
              获取 Kerberos 票证请求。
            </summary>
      <returns>
              一个 <see cref="T:System.Byte" /> 数组，它包含 Kerberos 票证请求的结果。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              返回一个值，该值指示此实例的密钥标识符是否与指定的密钥标识符相匹配。
            </summary>
      <param name="keyIdentifierClause">
                要与此实例进行比较的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。
              </param>
      <returns>
              如果 <see langword="true" /> 的类型为 <paramref name="keyIdentifierClause" /> 并且 Kerberos 票证请求的结果匹配，则为 <see cref="T:System.IdentityModel.Tokens.KerberosTicketHashKeyIdentifierClause" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosSecurityTokenHandler.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.KerberosSecurityTokenHandler" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosSecurityTokenHandler.GetTokenTypeIdentifiers">
      <summary>
              获取 Ws-security Kerberos 安全令牌的配置文件中定义的 Kerberos 安全令牌类型。
            </summary>
      <returns>
              Kerberos 安全令牌类型 URI。
               默认情况下，值 <see cref="P:System.IdentityModel.Tokens.SecurityTokenTypes.Kerberos" /> 属性。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              验证指定的 Kerberos 安全令牌。
            </summary>
      <param name="token">
                要验证的安全令牌。
                 这必须是实例 <see cref="T:System.IdentityModel.Tokens.KerberosReceiverSecurityToken" /> 类。
              </param>
      <returns>
              令牌中包含的标识。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="token" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  指定的标记不能作为分配 <see cref="T:System.IdentityModel.Tokens.KerberosReceiverSecurityToken" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosTicketHashKeyIdentifierClause.#ctor(System.Byte[])">
      <summary>
              使用 Kerberos 服务票证的指定 SHA-1 哈希值来初始化 <see cref="T:System.IdentityModel.Tokens.KerberosTicketHashKeyIdentifierClause" /> 类的新实例。
            </summary>
      <param name="ticketHash">
                一个 <see cref="T:System.Byte" /> 数组，它包含 Kerberos 服务票证的 SHA-1 哈希值。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="ticketHash" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosTicketHashKeyIdentifierClause.#ctor(System.Byte[],System.Byte[],System.Int32)">
      <summary>
              使用指定的 Kerberos 票证、Nonce 和密钥长度来初始化 <see cref="T:System.IdentityModel.Tokens.KerberosTicketHashKeyIdentifierClause" /> 类的新实例。
            </summary>
      <param name="ticketHash">
                一个 <see cref="T:System.Byte" /> 数组，它包含 Kerberos 服务票证的 SHA-1 哈希值。
              </param>
      <param name="derivationNonce">
                一个 <see cref="T:System.Byte" /> 数组，包含用于创建派生密钥的 Nonce。
              </param>
      <param name="derivationLength">
                派生密钥的大小。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="ticketHash" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="ticketHash" /> 的长度为零。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosTicketHashKeyIdentifierClause.GetKerberosTicketHash">
      <summary>
              获取 Kerberos 服务票证的 SHA-1 哈希值。
            </summary>
      <returns>
              一个 <see cref="T:System.Byte" /> 数组，它包含 Kerberos 服务票证的 SHA-1 哈希值。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.KerberosTicketHashKeyIdentifierClause.ToString">
      <summary>
              返回当前对象。
            </summary>
      <returns>
              一个表示当前对象的 <see cref="T:System.String" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.#ctor(System.String)">
      <summary>
              使用指定的标识符和类型数组初始化 <see cref="T:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause" /> 类的新实例。
            </summary>
      <param name="localId">
                当前 SOAP 消息中 XML 元素的 <see langword="wsu:Id" /> 属性值。
                 设置 <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.LocalId" /> 属性的值。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="localId" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="localId" /> 为空。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.#ctor(System.String,System.Byte[],System.Int32,System.Type)">
      <summary>
              使用指定的标识符、Nonce、派生密钥长度和所有者安全令牌类型初始化 <see cref="T:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause" /> 类的新实例。
            </summary>
      <param name="localId">
                当前 SOAP 消息中 XML 元素的 <see langword="wsu:Id" /> 属性值。
                 设置 <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.LocalId" /> 属性的值。
              </param>
      <param name="derivationNonce">
                一个 <see cref="T:System.Byte" /> 数组，包含用于创建派生密钥的 Nonce。
                 设置 <see cref="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.GetDerivationNonce" /> 方法所返回的值。
              </param>
      <param name="derivationLength">
                派生密钥的大小。
                 设置 <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.DerivationLength" /> 属性的值。
              </param>
      <param name="ownerType">
                一个 <see cref="T:System.Type" />，它是 <paramref name="localId" /> 参数所引用的安全令牌的类型。
                 设置 <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.OwnerType" /> 属性的值。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="localId" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="localId" /> 为空。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.#ctor(System.String,System.Type)">
      <summary>
              使用指定的标识符和所有者安全令牌类型初始化 <see cref="T:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause" /> 类的新实例。
            </summary>
      <param name="localId">
                当前 SOAP 消息中 XML 元素的 <see langword="wsu:Id" /> 属性值。
                 设置 <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.LocalId" /> 属性的值。
              </param>
      <param name="ownerType">
                一个 <see cref="T:System.Type" />，它是 <paramref name="localId" /> 参数所引用的安全令牌的类型。
                 设置 <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.OwnerType" /> 属性的值。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="localId" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="localId" /> 为空。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              返回一个值，该值指示此实例的密钥标识符是否等效于指定的密钥标识符子句。
            </summary>
      <param name="keyIdentifierClause">
                要进行比较的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。
              </param>
      <returns>
              如果 <see langword="true" /> 为 <paramref name="keyIdentifierClause" /> 类型并且 <see cref="T:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause" /> 和 <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.LocalId" /> 属性的值与当前实例相匹配，则为 <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.OwnerType" />；否则为 <see langword="false" />。
               有关详细信息，请参见备注。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.Matches(System.String,System.Type)">
      <summary>
              返回一个值，该值指示此实例的密钥标识符是否等效于指定的引用和类型。
            </summary>
      <param name="localId">
                当前 SOAP 消息中 XML 元素的 <see langword="wsu:Id" /> 属性值。
              </param>
      <param name="ownerType">
                一个 <see cref="T:System.Type" />，它是 <paramref name="localId" /> 参数所引用的安全令牌的类型。
              </param>
      <returns>
              如果 <see langword="true" /> 和 <paramref name="localId" /> 参数与 <paramref name="ownerType" /> 和 <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.LocalId" /> 属性的值相匹配，则为 <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.OwnerType" />；否则为 <see langword="false" />。
               有关详细信息，请参见备注。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.ToString">
      <summary>
              返回表示当前对象的字符串。
            </summary>
      <returns>
              一个表示当前对象的 <see cref="T:System.String" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.ProofDescriptor.#ctor">
      <summary>
              从构造函数初始化派生类中调用 <see cref="T:System.IdentityModel.Tokens.ProofDescriptor" /> 类。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.ProofDescriptor.ApplyTo(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse)">
      <summary>
              设置在 RSTR 根据当前的证明描述符实例的属性的相应属性。
            </summary>
      <param name="response">
                要修改此证明说明符的 RSTR 对象。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaKeyIdentifierClause.#ctor(System.Security.Cryptography.RSA)">
      <summary>
              使用指定的 RSA 算法初始化 <see cref="T:System.IdentityModel.Tokens.RsaKeyIdentifierClause" /> 类的新实例。
            </summary>
      <param name="rsa">
                一个表示 RSA 算法的 <see cref="T:System.Security.Cryptography.RSA" />。
                 设置 <see cref="P:System.IdentityModel.Tokens.RsaKeyIdentifierClause.Rsa" /> 属性的值。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="rsa" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaKeyIdentifierClause.CreateKey">
      <summary>
              使用 RSA 算法创建密钥。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.RsaSecurityKey" />，它是使用构造函数中所指定的 RSA 算法创建的密钥。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaKeyIdentifierClause.GetExponent">
      <summary>
              获取 RSA 算法的 <see langword="Exponent" /> 参数。
            </summary>
      <returns>
              一个 <see cref="T:System.Byte" /> 数组，包含 RSA 算法的 <see langword="Exponent" /> 参数。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaKeyIdentifierClause.GetModulus">
      <summary>
              获取 RSA 算法的 <see langword="Modulus" /> 参数。
            </summary>
      <returns>
              一个 <see cref="T:System.Byte" /> 数组，包含 RSA 算法的 <see langword="Modulus" /> 参数。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              返回一个值，该值指示此实例的密钥标识符是否等效于指定的密钥标识符子句。
            </summary>
      <param name="keyIdentifierClause">
                要进行比较的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。
              </param>
      <returns>
              如果 <see langword="true" /> 为 <paramref name="keyIdentifierClause" /> 类型并且 <see cref="T:System.IdentityModel.Tokens.RsaKeyIdentifierClause" /> 和 <see cref="M:System.IdentityModel.Tokens.RsaKeyIdentifierClause.GetModulus" /> 方法对于 <see cref="M:System.IdentityModel.Tokens.RsaKeyIdentifierClause.GetExponent" /> 参数返回的数组与当前实例相同，则为 <paramref name="keyIdentifierClause" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaKeyIdentifierClause.Matches(System.Security.Cryptography.RSA)">
      <summary>
              返回一个值，该值指示此实例的密钥标识符是否与指定的 RSA 算法相匹配。
            </summary>
      <param name="rsa">
                一个表示 RSA 算法的 <see cref="T:System.Security.Cryptography.RSA" />。
              </param>
      <returns>
              如果 <see langword="true" /> 参数的 <see cref="F:System.Security.Cryptography.RSAParameters.Exponent" /> 和 <see cref="F:System.Security.Cryptography.RSAParameters.Modulus" /> 字段与当前实例的 <paramref name="rsa" /> 和 <see cref="M:System.IdentityModel.Tokens.RsaKeyIdentifierClause.GetModulus" /> 方法所返回的值相匹配，则为 <see cref="M:System.IdentityModel.Tokens.RsaKeyIdentifierClause.GetExponent" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaKeyIdentifierClause.ToString">
      <summary>
              返回表示当前对象的字符串。
            </summary>
      <returns>
              一个表示当前对象的 <see cref="T:System.String" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaKeyIdentifierClause.WriteExponentAsBase64(System.Xml.XmlWriter)">
      <summary>
              将 RSA 算法的 Base64 编码的 <see langword="Exponent" /> 参数写入指定的 XML 序列化程序。
            </summary>
      <param name="writer">
                一个 <see cref="T:System.Xml.XmlWriter" />，它用于写入 RSA 算法的 Base64 编码的 <see langword="Exponent" /> 参数。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaKeyIdentifierClause.WriteModulusAsBase64(System.Xml.XmlWriter)">
      <summary>
              将 RSA 算法的 Base64 编码的 <see langword="Modulus" /> 参数写入指定的 XML 序列化程序。
            </summary>
      <param name="writer">
                一个 <see cref="T:System.Xml.XmlWriter" />，它用于写入 RSA 算法的 Base64 编码的 <see langword="Modulus" /> 参数。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityKey.#ctor(System.Security.Cryptography.RSA)">
      <summary>
              使用指定的 RSA 算法初始化 <see cref="T:System.IdentityModel.Tokens.RsaSecurityKey" /> 类的新实例。
            </summary>
      <param name="rsa">
                一个表示 RSA 算法的 <see cref="T:System.Security.Cryptography.RSA" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="rsa" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityKey.DecryptKey(System.String,System.Byte[])">
      <summary>
              对指定的加密密钥进行解密。
            </summary>
      <param name="algorithm">
                用于对密钥进行加密的加密算法。
                 支持的算法为 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaV15KeyWrap" /> 和 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaOaepKeyWrap" />。
              </param>
      <param name="keyData">
                包含加密密钥的 <see cref="T:System.Byte" /> 数组。
              </param>
      <returns>
              包含解密密钥的 <see cref="T:System.Byte" /> 数组。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  不支持 <paramref name="algorithm" />。
                   支持的算法为 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaV15KeyWrap" /> 和 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaOaepKeyWrap" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="keyData" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityKey.EncryptKey(System.String,System.Byte[])">
      <summary>
              使用指定的算法加密指定的密钥。
            </summary>
      <param name="algorithm">
                用于对密钥进行加密的加密算法。
              </param>
      <param name="keyData">
                包含密钥的 <see cref="T:System.Byte" /> 数组。
              </param>
      <returns>
              包含加密密钥的 <see cref="T:System.Byte" /> 数组。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  不支持 <paramref name="algorithm" />。
                   支持的算法为 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaV15KeyWrap" /> 和 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaOaepKeyWrap" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="keyData" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityKey.GetAsymmetricAlgorithm(System.String,System.Boolean)">
      <summary>
              获取指定的非对称加密算法。
            </summary>
      <param name="algorithm">
                要创建的非对称算法。
              </param>
      <param name="requiresPrivateKey">
                如果需要使用私钥来创建算法，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
      <returns>
              一个 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" />，表示指定的非对称加密算法。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  <paramref name="requiresPrivateKey " />为 <see langword="true" />，而私钥不可用。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityKey.GetHashAlgorithmForSignature(System.String)">
      <summary>
              获取用于生成数字签名的哈希值的加密算法。
            </summary>
      <param name="algorithm">
                哈希算法。
                 支持的算法为 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature" />。
              </param>
      <returns>
              一个 <see cref="T:System.Security.Cryptography.HashAlgorithm" />，它生成数字签名的哈希值。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  <paramref name="algorithm " />不支持。
                   支持的算法为 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityKey.GetSignatureDeformatter(System.String)">
      <summary>
              获取数字签名的反格式化程序算法。
            </summary>
      <param name="algorithm">
                要获取其实例的数字签名的反格式化程序算法。
                 支持的算法为 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature" />。
              </param>
      <returns>
              一个 <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" />，它表示数字签名的反格式化程序算法。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  <paramref name="algorithm " />不支持。
                   支持的算法为 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityKey.GetSignatureFormatter(System.String)">
      <summary>
              获取数字签名的格式化程序算法。
            </summary>
      <param name="algorithm">
                要获取其实例的数字签名的格式化程序算法。
                 支持的算法为 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature" />。
              </param>
      <returns>
              一个 <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" />，它表示数字签名的格式化程序算法。
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  <paramref name="algorithm " />不支持。
                   支持的算法为 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityKey.HasPrivateKey">
      <summary>
              获取一个值，该值指示私钥是否可用。
            </summary>
      <returns>
              如果私钥可用，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityKey.IsAsymmetricAlgorithm(System.String)">
      <summary>
              获取一个值，该值指示指定的算法是否使用非对称密钥。
            </summary>
      <param name="algorithm">
                加密算法。
              </param>
      <returns>
              如果指定的算法使用非对称密钥，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityKey.IsSupportedAlgorithm(System.String)">
      <summary>
              获取一个值，该值指示此类是否支持指定的算法。
            </summary>
      <param name="algorithm">
                加密算法。
              </param>
      <returns>
              如果指定的算法为 <see langword="true" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaV15KeyWrap" /> 或 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaOaepKeyWrap" />，则为 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityKey.IsSymmetricAlgorithm(System.String)">
      <summary>
              获取一个值，该值指示指定的算法是否使用对称密钥。
            </summary>
      <param name="algorithm">
                加密算法。
              </param>
      <returns>
              如果指定的算法使用对称密钥，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityToken.#ctor(System.Security.Cryptography.RSA)">
      <summary>
              使用指定的 RSA 算法初始化 <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" /> 类的新实例。
            </summary>
      <param name="rsa">
                一个 <see cref="T:System.Security.Cryptography.RSA" />，表示能够创建非对称密钥的 RSA 算法。
                 设置 <see cref="P:System.IdentityModel.Tokens.RsaSecurityToken.Rsa" /> 属性的值。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="rsa" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityToken.#ctor(System.Security.Cryptography.RSA,System.String)">
      <summary>
              使用指定的 RSA 算法和唯一标识符初始化 <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" /> 类的新实例。
            </summary>
      <param name="rsa">
                一个 <see cref="T:System.Security.Cryptography.RSA" />，表示能够创建非对称密钥的 RSA 算法。
                 设置 <see cref="P:System.IdentityModel.Tokens.RsaSecurityToken.Rsa" /> 属性的值。
              </param>
      <param name="id">
                安全令牌的唯一标识符。
                 设置 <see cref="P:System.IdentityModel.Tokens.RsaSecurityToken.Id" /> 属性的值。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="rsa" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="id" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityToken.CanCreateKeyIdentifierClause``1">
      <summary>
              获取一个值，该值指示此安全令牌能否创建指定的密钥标识符。
            </summary>
      <typeparam name="T">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，指定要创建的密钥标识符的类型。
              </typeparam>
      <returns>
              如果 <see langword="true" /> 的类型为 <paramref name="T" />，则为 <see cref="T:System.IdentityModel.Tokens.RsaKeyIdentifierClause" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityToken.CreateKeyIdentifierClause``1">
      <summary>
              创建指定的密钥标识符子句。
            </summary>
      <typeparam name="T">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，指定要创建的密钥标识符。
              </typeparam>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.RsaKeyIdentifierClause" />，它是安全令牌的密钥标识符子句。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityToken.Finalize">
      <summary>
              允许 <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" /> 在垃圾收集器销毁资源之前将这些资源释放。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              返回一个值，该值指示此实例的密钥标识符是否与指定的密钥标识符相匹配。
            </summary>
      <param name="keyIdentifierClause">
                要与此实例进行比较的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。
              </param>
      <returns>
              如果 <see langword="true" /> 为 <paramref name="keyIdentifierClause" /> 类型并且密钥匹配，则为 <see cref="T:System.IdentityModel.Tokens.RsaKeyIdentifierClause" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityTokenHandler.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.RsaSecurityTokenHandler" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
      <summary>
              指示是否可以为读取当前 XML 元素 <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" />。
            </summary>
      <param name="reader">
                XML 读取器定位在开始元素。
                 读取器不应将前移。
              </param>
      <returns>
              <see langword="true" /> 如果读取器指向 <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" />; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityTokenHandler.GetTokenTypeIdentifiers">
      <summary>
              获取 WS 安全令牌的配置文件中定义的 RSA 安全令牌的类型 (URI)。
            </summary>
      <returns>
              RSA 安全令牌类型 URI。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
      <summary>
              将 RSA 安全令牌从 XML 反序列化。
            </summary>
      <param name="reader">
                XML 读取器定位标记的开始元素处。
              </param>
      <returns>
              从 XML 进行反序列化的 RSA 安全令牌。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  <paramref name="reader" /> 未定位在 RSA 令牌。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              验证指定的安全令牌。
            </summary>
      <param name="token">
                安全令牌进行验证;必须是实例 <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" /> 类。
              </param>
      <returns>
              令牌中包含的标识。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="token" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="token" /> 不能从分配 <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 属性为此处理程序 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.RsaSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              序列化到 XML 的 RSA 安全令牌。
            </summary>
      <param name="writer">
                要用来序列化令牌的 XML 编写器。
              </param>
      <param name="token">
                要序列化的 RSA 安全令牌。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="token" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="token" /> 不能从分配 <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Action.#ctor(System.String,System.Uri)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.Saml2Action" /> 与指定的命名空间和操作的类。
            </summary>
      <param name="value">
                要执行的操作。
              </param>
      <param name="actionNamespace">
                表示在其中指定操作的名称将被解释的命名空间 URI。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="actionNamespace" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="value" /> 为 <see langword="null" /> 或空字符串。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="actionNamespace" /> 不是绝对 URI。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Advice.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.Saml2Advice" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Assertion.#ctor(System.IdentityModel.Tokens.Saml2NameIdentifier)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" /> 类，具有指定的颁发者。
            </summary>
      <param name="issuer">
                一个 <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" /> ，它指定 SAML 授权机构进行索赔断言中。
                 [Saml2Core，2.3.3]。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="issuer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Assertion.WriteSourceData(System.Xml.XmlWriter)">
      <summary>
              如果可用，请将源数据。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用来写入源的数据。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  没有源数据
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause" /> 类以获取指定的 id。
            </summary>
      <param name="id">
                用于定义要创建的子句的 ID。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="id" /> 为 <see langword="null" /> 或空字符串。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause.#ctor(System.String,System.Byte[],System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause" /> 指定 ID 的类、 nonce，和密钥大小。
            </summary>
      <param name="id">
                用于定义要创建的子句的 ID。
              </param>
      <param name="derivationNonce">
                一个 <see cref="T:System.Byte" /> 数组，包含用于创建派生密钥的 Nonce。
                 设置 <see cref="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.GetDerivationNonce" /> 方法所返回的值。
              </param>
      <param name="derivationLength">
                派生密钥的大小。
                 设置 <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.DerivationLength" /> 属性的值。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="id" /> 为 <see langword="null" /> 或空字符串。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              返回一个值，该值指示此实例的密钥标识符是否等效于指定的密钥标识符子句。
            </summary>
      <param name="keyIdentifierClause">
                要进行比较的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。
              </param>
      <returns>
              如果 <see langword="true" /> 是与当前实例相同的实例，则为 <paramref name="keyIdentifierClause" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause.Matches(System.String,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              返回一个值，该值指示断言的密钥标识符是否等效于指定的密钥标识符子句。
            </summary>
      <param name="assertionId">
                断言的 ID。
              </param>
      <param name="keyIdentifierClause">
                要进行比较的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="assertionId" /> 匹配 <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.Id" /> 属性 <paramref name="keyIdentifierClause" />; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="assertionId" /> 为 <see langword="null" /> 或空字符串。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause.ToString">
      <summary>
              返回一个字符串，表示当前实例。
            </summary>
      <returns>
              当前实例的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Attribute.#ctor(System.String)">
      <summary>
              用指定的名称初始化 <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> 类的新实例。
            </summary>
      <param name="name">
                属性名。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="name" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Attribute.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> 类具有指定的名称和值。
            </summary>
      <param name="name">
                属性名。
              </param>
      <param name="values">
                包含属性值的字符串集合。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="name" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="values" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Attribute.#ctor(System.String,System.String)">
      <summary>
              使用指定的名称和值初始化 <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> 类的新实例。
            </summary>
      <param name="name">
                属性名。
              </param>
      <param name="value">
                属性的值。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="name" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="value" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AttributeStatement.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.Saml2AttributeStatement" /> 不具有任何属性的类。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AttributeStatement.#ctor(System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.Saml2Attribute})">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.Saml2AttributeStatement" /> 类的新实例。
            </summary>
      <param name="attributes">
                类型的集合 <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> ，其中包含此语句中包含的属性元素。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="attributes" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  指定的集合的元素之一 <paramref name="attributes" /> 是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AttributeStatement.#ctor(System.IdentityModel.Tokens.Saml2Attribute)">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.Saml2AttributeStatement" /> 类的新实例。
            </summary>
      <param name="attribute">
                一个 <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> ，表示此语句中包含的单个属性元素。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="attribute" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AudienceRestriction.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.Saml2AudienceRestriction" /> 不含任何受众元素的类。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AudienceRestriction.#ctor(System.Collections.Generic.IEnumerable{System.Uri})">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.Saml2AudienceRestriction" /> 类具有指定的 Uri。
            </summary>
      <param name="audiences">
                集合 <see cref="T:System.Uri" /> ，其中包含此限制中包含的受众元素。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AudienceRestriction.#ctor(System.Uri)">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.Saml2AudienceRestriction" /> 类的新实例。
            </summary>
      <param name="audience">
                一个 <see cref="T:System.Uri" /> ，表示包含在此限制的 Audience 元素的内容。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AuthenticationContext.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.Saml2AuthenticationContext" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AuthenticationContext.#ctor(System.Uri)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.Saml2AuthenticationContext" /> 类具有指定的类引用。
            </summary>
      <param name="classReference">
                身份验证上下文类引用。
              </param>
      <exception cref="T:System.ArgumentException">
                  <paramref name="classReference" /> 不是 <see langword="null" /> 并不是绝对 URI。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AuthenticationContext.#ctor(System.Uri,System.Uri)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.Saml2AuthenticationContext" /> 类，具有指定的类引用和声明的引用。
            </summary>
      <param name="classReference">
                身份验证上下文类引用。
              </param>
      <param name="declarationReference">
                身份验证上下文声明参考
              </param>
      <exception cref="T:System.ArgumentException">
                  <paramref name="classReference" /> 不是 <see langword="null" /> 并不是绝对 URI。
                
                  - 或 -
                
                  <paramref name="declarationReference" /> 不是 <see langword="null" /> 并不是绝对 URI。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AuthenticationStatement.#ctor(System.IdentityModel.Tokens.Saml2AuthenticationContext)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.Saml2AuthenticationStatement" /> 带有指定的身份验证上下文和当前时间作为即时身份验证的类。
            </summary>
      <param name="authenticationContext">
                此语句的身份验证上下文。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="authenticationContext" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AuthenticationStatement.#ctor(System.IdentityModel.Tokens.Saml2AuthenticationContext,System.DateTime)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.Saml2AuthenticationStatement" /> 使用指定的身份验证的上下文和身份验证时的类。
            </summary>
      <param name="authenticationContext">
                此语句的身份验证上下文。
              </param>
      <param name="authenticationInstant">
                身份验证的时间。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="authenticationContext" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement.#ctor(System.Uri,System.IdentityModel.Tokens.SamlAccessDecision)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement" /> 类与指定的资源指定决定。
            </summary>
      <param name="resource">
                <see cref="T:System.Uri" /> 的授权决定应用哪些资源。
                 设置 <see cref="P:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement.Resource" /> 属性。
              </param>
      <param name="decision">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlAccessDecision" /> 值，该值指示此决定。
                 设置 <see cref="P:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement.Decision" /> 属性。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="resource" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="resource" /> 不是绝对 URI 或一个空的相对 URI。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="decision" /> 不是有效的 <see cref="T:System.IdentityModel.Tokens.SamlAccessDecision" /> 值。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement.#ctor(System.Uri,System.IdentityModel.Tokens.SamlAccessDecision,System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.Saml2Action})">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement" /> 类，具有指定的资源上指定的操作的指定决定。
            </summary>
      <param name="resource">
                <see cref="T:System.Uri" /> 的授权决定应用哪些资源。
                 设置 <see cref="P:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement.Resource" /> 属性。
              </param>
      <param name="decision">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlAccessDecision" /> 值，该值指示此决定。
                 设置 <see cref="P:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement.Decision" /> 属性。
              </param>
      <param name="actions">
                一套 <see cref="T:System.IdentityModel.Tokens.Saml2Action" /> ，它指定要为其授权对资源的操作。
                 设置 <see cref="P:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement.Actions" /> 属性。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="resource" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="resource" /> 不是绝对 URI 或一个空的相对 URI。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="decision" /> 不是有效的 <see cref="T:System.IdentityModel.Tokens.SamlAccessDecision" /> 值。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Conditions.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.Saml2Conditions" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Evidence.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.Saml2Evidence" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Evidence.#ctor(System.IdentityModel.Tokens.Saml2Assertion)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.Saml2Evidence" /> 类，具有指定的断言。
            </summary>
      <param name="assertion">
                一个 <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" /> 包含的证据。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="assertion" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Evidence.#ctor(System.IdentityModel.Tokens.Saml2Id)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.Saml2Evidence" /> 类具有引用断言的 ID。
            </summary>
      <param name="idReference">
                一个 <see cref="T:System.IdentityModel.Tokens.Saml2Id" /> 引用断言。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="idReference" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Evidence.#ctor(System.Uri)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.Saml2Evidence" /> 类引用声明的 URI。
            </summary>
      <param name="uriReference">
                一个 <see cref="T:System.Uri" /> ，它引用一个断言。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="uriReference" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Id.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.Saml2Id" /> 类，具有由系统生成的值。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Id.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.Saml2Id" /> 类具有指定值。
            </summary>
      <param name="value">
                ID 值中。
              </param>
      <exception cref="T:System.ArgumentException">
                  <paramref name="value" /> 不是有效的 NCName。
                </exception>
      <exception cref="T:System.ArgumentNUllException">
                  <paramref name="value" /> 为 <see langword="null" /> 或空字符串。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Id.Equals(System.Object)">
      <summary>
              确定此实例是否等于指定的对象。
            </summary>
      <param name="obj">
                具有要与此实例进行比较的对象。
              </param>
      <returns>
              <see langword="true" /> 如果对象相等，则否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Id.GetHashCode">
      <summary>
              返回此实例的哈希代码。
            </summary>
      <returns>
              一个包含哈希代码的整数。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Id.ToString">
      <summary>
              返回此实例的字符串表示。
            </summary>
      <returns>
              <see cref="T:System.IdentityModel.Tokens.Saml2Id" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2NameIdentifier.#ctor(System.String)">
      <summary>
              用指定的名称初始化 <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" /> 类的新实例。
            </summary>
      <param name="name">
                名称标识符中。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="name" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2NameIdentifier.#ctor(System.String,System.Uri)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" /> 类具有指定名称，并设置格式的 URI。
            </summary>
      <param name="name">
                名称标识符中。
              </param>
      <param name="format">
                一个 <see cref="T:System.Uri" /> 指定标识符的格式。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="name" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  尝试设置 <paramref name="format" /> 值不是到 <see langword="null" /> 并且不是绝对 URI 发生。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2ProxyRestriction.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.Saml2ProxyRestriction" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityKeyIdentifierClause.#ctor(System.IdentityModel.Tokens.Saml2Assertion)">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.Saml2SecurityKeyIdentifierClause" /> 类的新实例。
            </summary>
      <param name="assertion">
                当前正在处理的断言。
                 设置 <see cref="P:System.IdentityModel.Tokens.Saml2SecurityKeyIdentifierClause.Assertion" /> 属性的值。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityToken.#ctor(System.IdentityModel.Tokens.Saml2Assertion)">
      <summary>
              使用指定的 SAML 断言初始化 <see cref="T:System.IdentityModel.Tokens.Saml2SecurityToken" /> 类的新实例。
            </summary>
      <param name="assertion">
                一个 <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" />，表示此安全令牌的 SAML 断言。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityToken.#ctor(System.IdentityModel.Tokens.Saml2Assertion,System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Tokens.SecurityKey},System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.Saml2SecurityToken" /> 类使用指定的 SAML 断言、 加密密钥和颁发者令牌。
            </summary>
      <param name="assertion">
                一个 <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" />，表示此安全令牌的 SAML 断言。
              </param>
      <param name="keys">
                与此安全令牌相关联的密钥集。
              </param>
      <param name="issuerToken">
                此安全令牌的颁发者的令牌。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityToken.CanCreateKeyIdentifierClause``1">
      <summary>
              获取一个值，该值指示此安全令牌能否创建指定的密钥标识符。
            </summary>
      <typeparam name="T">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，指定要创建的密钥标识符。
              </typeparam>
      <returns>
              如果 <see langword="true" /> 的类型为 <paramref name="T" />，则为 <see cref="T:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityToken.CreateKeyIdentifierClause``1">
      <summary>
              创建指定的密钥标识符子句。
            </summary>
      <typeparam name="T">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，指定要创建的密钥标识符。
              </typeparam>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause" />，它是 SAML 安全令牌的密钥标识符子句。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="T" /> 的类型不是 <see cref="T:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              返回一个值，该值指示此实例的密钥标识符与指定的密钥标识符是否相等。
            </summary>
      <param name="keyIdentifierClause">
                一个要与此实例进行比较的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。
              </param>
      <returns>
              如果 <see langword="true" /> 为 <paramref name="keyIdentifierClause" />，并且具有与 <see cref="T:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause" /> 属性相同的唯一标识符，则为 <see cref="P:System.IdentityModel.Tokens.Saml2SecurityToken.Id" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.Saml2SecurityTokenHandler" /> 类，具有默认安全令牌要求。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.#ctor(System.IdentityModel.Tokens.SamlSecurityTokenRequirement)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.Saml2SecurityTokenHandler" /> 指定的安全令牌要求类。
            </summary>
      <param name="samlSecurityTokenRequirement">
                <see cref="T:System.IdentityModel.Tokens.SamlSecurityTokenRequirement" /> 若要在验证令牌时，此实例使用。
                 设置 <see cref="P:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.SamlSecurityTokenRequirement" /> 属性。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="samlSecurityTokenRequirement" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.AddDelegateToAttributes(System.Security.Claims.ClaimsIdentity,System.Collections.Generic.ICollection{System.IdentityModel.Tokens.Saml2Attribute},System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>
              将所有与主题关联到属性集合的委托添加。
            </summary>
      <param name="subject">
                此委托 <see cref="T:System.Security.Claims.ClaimsIdentity" /> 对象序列化到 <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" />。
              </param>
      <param name="attributes">
                类型的集合 <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" />。
              </param>
      <param name="tokenDescriptor">
                令牌的描述符。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="subject" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="tokenDescriptor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>
              指示当前的 XML 元素是否正指向进行序列化此实例的密钥标识符子句。
            </summary>
      <param name="reader">
                XML 读取器的开始元素处。
              </param>
      <returns>
              <see langword="true" /> 如果 <see cref="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)" /> 方法可以读取元素; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
      <summary>
              指示是否可以处理此实例的类型的令牌作为读取当前 XML 元素。
            </summary>
      <param name="reader">
                XML 读取器定位在开始元素。
                 读取器不应将前移。
              </param>
      <returns>
              <see langword="true" /> 如果 <see cref="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadToken(System.Xml.XmlReader)" /> 方法可以读取元素; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              指示指定的密钥标识符子句是否可以序列化此实例。
            </summary>
      <param name="securityKeyIdentifierClause">
                要序列化的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。
              </param>
      <returns>
              <see langword="true" /> 如果可以序列化指定的密钥标识符子句。否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CollectAttributeValues(System.Collections.Generic.ICollection{System.IdentityModel.Tokens.Saml2Attribute})">
      <summary>
              收集到单个属性具有多个值具有公用声明类型、 声明值类型和原始颁发者的属性。
            </summary>
      <param name="attributes">
                类型的集合 <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> 包含声明从生成的特性。
              </param>
      <returns>
              一套 <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> ，它包含从输入集合中派生的属性。
               共享通用声明类型，输入集合中的属性声明值，并与其他属性的原始颁发者都合并到单个属性具有多个输出集合中的值。
               输入集合中与其他属性不能共享声明类型、 声明值或原始的颁发者的属性将出现在输出集合中未更改。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CreateAdvice(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>
              创建 <see cref="T:System.IdentityModel.Tokens.Saml2Advice" /> 断言的对象。
            </summary>
      <param name="tokenDescriptor">
                令牌的描述符。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2Advice" /> 对象。
               默认值为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CreateAttribute(System.Security.Claims.Claim,System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>
              创建 <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> 声明中的对象。
            </summary>
      <param name="claim">
                <see cref="T:System.Security.Claims.Claim" /> 从中生成 SAML 属性。
              </param>
      <param name="tokenDescriptor">
                令牌的描述符。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> ，其中包含转换后的声明。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="claim" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CreateAttributeStatement(System.Security.Claims.ClaimsIdentity,System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>
              创建 <see cref="T:System.IdentityModel.Tokens.Saml2AttributeStatement" /> 从令牌描述符的对象。
            </summary>
      <param name="subject">
                <see cref="T:System.Security.Claims.ClaimsIdentity" /> 对象，其中包含将被转换为 SAML 属性的声明。
              </param>
      <param name="tokenDescriptor">
                令牌的描述符。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2AttributeStatement" /> ，包含已转换的声明。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CreateAuthenticationStatement(System.Security.Claims.AuthenticationInformation,System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>
              创建从指定的身份验证信息的 SAML 2.0 身份验证语句。
            </summary>
      <param name="authInfo">
                <see cref="T:System.Security.Claims.AuthenticationInformation" /> 对象，其中包含要包装为的状态 <see cref="T:System.IdentityModel.Tokens.Saml2AuthenticationStatement" /> 对象。
              </param>
      <param name="tokenDescriptor">
                令牌的描述符。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2AuthenticationStatement" /> 将添加到正在创建的断言或 <see langword="null" /> 忽略 <see cref="T:System.Security.Claims.AuthenticationInformation" /> 对象 （并不创建 SAML 2.0 身份验证语句）。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="tokenDescriptor" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <see cref="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.Subject" /> 属性 <paramref name="tokenDescriptor" /> 是 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  主题的 <paramref name="tokenDescriptor" /> ( <see cref="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.Subject" /> 属性) 包含使用的声明类型的声明 <see cref="F:System.Security.Claims.ClaimTypes.AuthenticationInstant" /> 或  <see cref="F:System.Security.Claims.ClaimTypes.AuthenticationMethod" /> ，但不包含至少一个声明的每个类型。
                
                  - 或 -
                
                  指定的使用者的身份验证方法 <paramref name="tokenDescriptor" /> 无法解析为绝对 URI。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CreateClaims(System.IdentityModel.Tokens.Saml2SecurityToken)">
      <summary>
              创建基于 SAML 2.0 令牌的声明。
            </summary>
      <param name="samlToken">
                一个 <see cref="T:System.IdentityModel.Tokens.Saml2SecurityToken" /> ，它表示从中创建声明的安全令牌。
              </param>
      <returns>
              <see cref="T:System.Security.Claims.ClaimsIdentity" /> ，包含从令牌提取的声明。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="samlToken" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <see cref="P:System.IdentityModel.Tokens.Saml2SecurityToken.Assertion" /> 属性 <paramref name="samlToken" /> 是 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  该处理程序未配置或颁发者名称注册表未配置为处理程序。
                   ( <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 属性是 <see langword="null" /> ，或者设置为 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" /> 与 <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerNameRegistry" /> 属性都 <see langword="null" />。
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
                  返回配置的颁发者名称注册表中是否有安全令牌的颁发者名称 (<paramref name="samlToken" />) 是 <see langword="null" /> 或为空。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CreateConditions(System.IdentityModel.Protocols.WSTrust.Lifetime,System.String,System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>
              创建断言的条件。
            </summary>
      <param name="tokenLifetime">
                令牌的生存期。
              </param>
      <param name="relyingPartyAddress">
                为其创建该令牌终结点地址。
                 该地址都建模为 AudienceRestriction 条件。
              </param>
      <param name="tokenDescriptor">
                令牌的描述符。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2Conditions" /> 对象，其中包含断言的条件。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CreateIssuerNameIdentifier(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>
              创建一个用于标识断言颁发者的名称标识符。
            </summary>
      <param name="tokenDescriptor">
                从其创建的名称标识符令牌的描述符。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" /> ，它表示名称标识符。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="tokenDescriptor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CreateSamlSubject(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>
              创建 SAML 2.0 断言的主题。
            </summary>
      <param name="tokenDescriptor">
                从中创建使用者的安全令牌描述符。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2Subject" /> 表示断言的主题。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="tokenDescriptor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
      <summary>
              令牌未附加到消息时，请创建安全令牌引用。
            </summary>
      <param name="token">
                SAML 令牌中。
              </param>
      <param name="attached">
                一个值，该值指示是否应创建一个附加或未附加引用。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> ，表示令牌的引用。
               (实例 <see cref="T:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause" /> 实际返回。)
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="token" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CreateStatements(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>
              创建要包括在断言的 SAML 2.0 语句。
            </summary>
      <param name="tokenDescriptor">
                从中创建语句令牌描述符。
              </param>
      <returns>
              枚举 <see cref="T:System.IdentityModel.Tokens.Saml2Statement" /> 包含的语句。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="tokenDescriptor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>
              创建基于令牌的描述符的安全令牌。
            </summary>
      <param name="tokenDescriptor">
                从其创建安全令牌的令牌描述符。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> ，它表示 SAML 2.0 安全令牌。
               (返回的标记是实际的实例 <see cref="T:System.IdentityModel.Tokens.Saml2SecurityToken" />。)
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="tokenDescriptor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CreateWindowsIdentity(System.String)">
      <summary>
              创建 <see cref="T:System.Security.Principal.WindowsIdentity" /> 对象使用指定用户主体名称 (UPN)。
            </summary>
      <param name="upn">
                要用于创建标识的 UPN。
              </param>
      <returns>
              已创建的 Windows 标识。
            </returns>
      <exception cref="T:System.ArgumentException">
                  <paramref name="upn" /> 为 <see langword="null" /> 或空字符串。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CreateXmlStringFromAttributes(System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.Saml2Attribute})">
      <summary>
              生成 XML 格式字符串，从代表参与者的 SAML 2.0 属性的集合。
            </summary>
      <param name="attributes">
                类型的枚举 <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> 它包含的特性。
              </param>
      <returns>
              格式正确的 XML 字符串构造使用的特性。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.DenormalizeAuthenticationType(System.String)">
      <summary>
              返回 <see cref="T:System.IdentityModel.Tokens.Saml2Constants.AuthenticationContextClasses" /> 匹配 SAML 身份验证上下文类引用的标准的值的值。
            </summary>
      <param name="normalizedAuthenticationType">
                已标准化的值。
              </param>
      <returns>
              一个字符串，包含之一 <see cref="T:System.IdentityModel.Tokens.Saml2Constants.AuthenticationContextClasses" /> 常量。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              如果指定的标记已存在于令牌重放缓存，则将引发异常否则该令牌添加到缓存中。
            </summary>
      <param name="token">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> ，它表示 SAML 2.0 安全令牌 (该令牌的类型应为 <see cref="T:System.IdentityModel.Tokens.Saml2SecurityToken" />) 进行检查。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="token" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 属性为 <see langword="null" />。
                
                  - 或 -
                
                  有没有 <see cref="T:System.IdentityModel.Tokens.TokenReplayCache" /> 下配置 <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.Caches" /> 属性处理程序配置 (通过访问 <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 属性)。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="token" /> 不能强制转换为的一个实例 <see cref="T:System.IdentityModel.Tokens.Saml2SecurityToken" />。
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException">
                  与令牌相关联的断言的 ID 是 <see langword="null" /> 或为空。
                   ( <see cref="P:System.IdentityModel.Tokens.Saml2SecurityToken.Assertion" /> 令牌的引用属性 <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" /> 具有 <see cref="P:System.IdentityModel.Tokens.Saml2Assertion.Id" /> 属性，引用 <see cref="T:System.IdentityModel.Tokens.Saml2Id" /> 与 <see cref="P:System.IdentityModel.Tokens.Saml2Id.Value" /> 属性都 <see langword="null" /> 或为空。)
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException">
                  中已存在该令牌 <see cref="T:System.IdentityModel.Tokens.TokenReplayCache" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.FindUpn(System.Security.Claims.ClaimsIdentity)">
      <summary>
              UPN 声明中指定的值开始查找 <see cref="T:System.Security.Claims.ClaimsIdentity" /> 对象用于将标识映射到 <see cref="T:System.Security.Principal.WindowsIdentity" /> 对象。
            </summary>
      <param name="claimsIdentity">
                包含所需的 UPN 声明的声明标识对象。
              </param>
      <returns>
              一个字符串，包含 UPN 声明找到的值。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.GetEncryptingCredentials(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>
              获取加密凭据的令牌。
               重写此方法以更改加密凭据的令牌。
            </summary>
      <param name="tokenDescriptor">
                检索加密凭据的作用域对象从某些作用域。
              </param>
      <returns>
              <see cref="T:System.IdentityModel.Tokens.EncryptingCredentials" /> 表示加密凭据的令牌。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="tokenDescriptor" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
                  加密令牌描述符从检索到凭据不对称。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.GetSigningCredentials(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>
              获取对断言进行签名的凭据。
            </summary>
      <param name="tokenDescriptor">
                令牌的描述符。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SigningCredentials" /> 表示断言进行签名的凭据。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="tokenDescriptor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.GetTokenReplayCacheEntryExpirationTime(System.IdentityModel.Tokens.Saml2SecurityToken)">
      <summary>
              返回在令牌重放缓存中应截止持有令牌的时间。
            </summary>
      <param name="token">
                要为其返回的过期时间标记。
              </param>
      <returns>
              一个 <see cref="T:System.DateTime" /> ，表示过期时间。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="token" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.GetTokenTypeIdentifiers">
      <summary>
              获取支持此处理程序的令牌类型标识符。
            </summary>
      <returns>
              包含令牌的字符串的数组类型支持此处理程序的标识符。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>
              从 XML 加载自定义配置。
            </summary>
      <param name="customConfigElements">
                <see cref="T:System.Xml.XmlNodeList" /> ，它指定 SAML 令牌身份验证要求。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="customConfigElements" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  中指定的配置 <paramref name="customConfigElements" /> 无效。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.NormalizeAuthenticationContextClassReference(System.String)">
      <summary>
              返回已标准化的值匹配的 SAML 身份验证上下文类引用。
            </summary>
      <param name="saml2AuthenticationContextClassReference">
                其中一个 <see cref="T:System.IdentityModel.Tokens.Saml2Constants.AuthenticationContextClasses" /> 常量。
              </param>
      <returns>
              一个字符串，包含已标准化的值。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ProcessAttributeStatement(System.IdentityModel.Tokens.Saml2AttributeStatement,System.Security.Claims.ClaimsIdentity,System.String)">
      <summary>
              从 SAML 2.0 属性语句创建声明并将它们添加到指定的主题。
            </summary>
      <param name="statement">
                <see cref="T:System.IdentityModel.Tokens.Saml2AttributeStatement" /> 从其声明的创建。
              </param>
      <param name="subject">
                声明被添加到的主题。
              </param>
      <param name="issuer">
                颁发者。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="statement" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="subject" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ProcessAuthenticationStatement(System.IdentityModel.Tokens.Saml2AuthenticationStatement,System.Security.Claims.ClaimsIdentity,System.String)">
      <summary>
              从 SAML 2.0 身份验证语句创建声明并将它们添加到指定的主题。
            </summary>
      <param name="statement">
                <see cref="T:System.IdentityModel.Tokens.Saml2AuthenticationStatement" /> 从其声明的创建。
              </param>
      <param name="subject">
                声明被添加到的主题。
              </param>
      <param name="issuer">
                颁发者。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="statement" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="subject" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ProcessAuthorizationDecisionStatement(System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement,System.Security.Claims.ClaimsIdentity,System.String)">
      <summary>
              从 SAML 2.0 授权决策语句创建声明并将它们添加到指定的主题。
            </summary>
      <param name="statement">
                <see cref="T:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement" /> 从其声明的创建。
              </param>
      <param name="subject">
                声明被添加到的主题。
              </param>
      <param name="issuer">
                颁发者。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ProcessSamlSubject(System.IdentityModel.Tokens.Saml2Subject,System.Security.Claims.ClaimsIdentity,System.String)">
      <summary>
              从 SAML 2.0 主题创建声明并将它们添加到指定的主题。
            </summary>
      <param name="assertionSubject">
                <see cref="T:System.IdentityModel.Tokens.Saml2Subject" /> 从其声明的创建。
              </param>
      <param name="subject">
                声明被添加到的主题。
              </param>
      <param name="issuer">
                颁发者。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="statement" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="assertionSubject" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ProcessStatement(System.Collections.ObjectModel.Collection{System.IdentityModel.Tokens.Saml2Statement},System.Security.Claims.ClaimsIdentity,System.String)">
      <summary>
              从一组 SAML 2.0 语句创建声明并将它们添加到指定的主题。
            </summary>
      <param name="statements">
                一套 <see cref="T:System.IdentityModel.Tokens.Saml2Statement" /> 从其声明的创建。
              </param>
      <param name="subject">
                声明被添加到的主题。
              </param>
      <param name="issuer">
                颁发者。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="subject" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadAction(System.Xml.XmlReader)">
      <summary>
              读取 &lt; saml:Action &gt; 元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 位于要读取的元素。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2Action" /> ，表示所读取的操作元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadAdvice(System.Xml.XmlReader)">
      <summary>
              读取 &lt; saml:Advice &gt; 元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 位于要读取的元素。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2Advice" /> ，表示所读取的建议元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadAssertion(System.Xml.XmlReader)">
      <summary>
              读取 &lt; saml:Assertion &gt; 元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 位于要读取的元素。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" /> 表示读取了 Assertion 元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadAttribute(System.Xml.XmlReader)">
      <summary>
              读取 &lt; saml:Attribute &gt; 元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 位于要读取的元素。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" /> 表示读取了 Assertion 元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadAttributeStatement(System.Xml.XmlReader)">
      <summary>
              读取了 &lt; saml:AttributeStatement &gt; 元素或指定的 saml:AttributeStatementType xsi: type 的 &lt; saml:Statement &gt; 元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 位于要读取的元素。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2AttributeStatement" /> ，表示所读取的元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadAttributeValue(System.Xml.XmlReader,System.IdentityModel.Tokens.Saml2Attribute)">
      <summary>
              读取属性值。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 位于要读取的元素。
              </param>
      <param name="attribute">
                所读取的属性。
              </param>
      <returns>
              一个字符串，包含的属性值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadAudienceRestriction(System.Xml.XmlReader)">
      <summary>
              读取 &lt; saml:AudienceRestriction &gt; 元素或指定的 saml:AudienceRestrictionType xsi: type 的 &lt; saml:Condition &gt; 元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 位于要读取的元素。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2AudienceRestriction" /> ，表示所读取的元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadAuthenticationContext(System.Xml.XmlReader)">
      <summary>
              读取 &lt; saml:AuthnContext &gt; 元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 位于要读取的元素。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2AuthenticationContext" /> ，它表示读取 AuthnContext 元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadAuthenticationStatement(System.Xml.XmlReader)">
      <summary>
              读取 &lt; saml:AuthnStatement &gt; 元素或指定的 saml:AuthnStatementType xsi: type 的 &lt; saml:Statement &gt; 元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 位于要读取的元素。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2AuthenticationStatement" /> ，表示所读取的元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadAuthorizationDecisionStatement(System.Xml.XmlReader)">
      <summary>
              读取 &lt; saml:AuthzDecisionStatement &gt; 元素或指定的 saml:AuthzDecisionStatementType xsi: type 的 &lt; saml:Statement &gt; 元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 位于要读取的元素。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement" /> ，表示所读取的元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadConditions(System.Xml.XmlReader)">
      <summary>
              读取 &lt; saml:Conditions &gt; 元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 位于要读取的元素。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2Conditions" /> ，它表示读取条件元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  <paramref name="reader" /> 未定位在 Conditions 元素。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadEncryptedId(System.Xml.XmlReader)">
      <summary>
              读取 &lt; saml:EncryptedId &gt; 元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 指向 EncryptedId 元素。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" /> ，表示所读取 EncryptedId 元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  <paramref name="reader" /> 未置于 EncryptedID 元素。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadEvidence(System.Xml.XmlReader)">
      <summary>
              读取 &lt; saml:Evidence &gt; 元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 位于要读取的元素。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2Evidence" /> ，它表示读取证据元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadIssuer(System.Xml.XmlReader)">
      <summary>
              读取 &lt; saml:Issuer &gt; 元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 位于要读取的元素。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" /> ，表示所读取的颁发者元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>
              读取 SecurityKeyIdentifierClause。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 用来读取。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> ，表示安全密钥标识符子句。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadNameId(System.Xml.XmlReader)">
      <summary>
              读取 &lt; saml:NameID &gt; 元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 位于 NameID 元素。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" /> 表示已读取的 NameID 元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadNameIdType(System.Xml.XmlReader)">
      <summary>
              这两个 &lt; 颁发者 &gt; 和 &lt; NameID &gt; NameIDType 的。
               此方法读取任一这些元素的内容。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 定位在 NameID 类型。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" /> 从 XML 构造。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadProxyRestriction(System.Xml.XmlReader)">
      <summary>
              读取了 &lt; saml:ProxyRestriction &gt; 元素或指定的 saml:ProxyRestrictionType xsi: type 的 &lt; saml:Condition &gt; 元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 位于要读取的元素。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2ProxyRestriction" /> ，表示所读取的元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadSigningKeyInfo(System.Xml.XmlReader,System.IdentityModel.Tokens.Saml2Assertion)">
      <summary>
              反序列化签名 KeyInfo 的 SAML。
            </summary>
      <param name="reader">
                可以位于 ds:KeyInfo 元素 XmlReader。
              </param>
      <param name="assertion">
                具有签名检查断言。
              </param>
      <returns>
              <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> ，表示的键要用来检查签名。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadStatement(System.Xml.XmlReader)">
      <summary>
              读取 &lt; saml:Statement &gt; 元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 位于要读取的元素。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2Statement" /> 表示已读取的语句元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadSubject(System.Xml.XmlReader)">
      <summary>
              读取 &lt; saml:Subject &gt; 元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 位于要读取的元素。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2Subject" /> ，表示已读取的主题元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadSubjectConfirmation(System.Xml.XmlReader)">
      <summary>
              读取 &lt; SubjectConfirmation &gt; 元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 位于要读取的元素。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2SubjectConfirmation" /> ，表示所读取 SubjectConfirmation 元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadSubjectConfirmationData(System.Xml.XmlReader)">
      <summary>
              读取 &lt; saml:SubjectConfirmationData &gt; 元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 位于要读取的元素。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2SubjectConfirmationData" /> ，表示所读取 SubjectConfirmationData 元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadSubjectId(System.Xml.XmlReader,System.String)">
      <summary>
              此方法可处理 &lt; 主体 &gt; 中使用的构造和 &lt; SubjectConfirmation &gt; 元素的 id。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 定位在使用者 ID XML。
              </param>
      <param name="parentElement">
                父元素中包含此使用者 id。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" /> 从 XML 构造。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadSubjectKeyInfo(System.Xml.XmlReader)">
      <summary>
              反序列化 SAML 主题 &lt; ds:KeyInfo &gt; 元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 位于 &lt; ds:KeyInfo &gt; 元素。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> 表示 &lt; ds:KeyInfo &gt; 元素的内容。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadSubjectLocality(System.Xml.XmlReader)">
      <summary>
              读取 &lt; saml:SubjectLocality &gt; 元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 位于要读取的元素。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2SubjectLocality" /> ，表示所读取 SubjectLocality 元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
      <summary>
              从指定的流中读取 SAML 2.0 令牌。
            </summary>
      <param name="reader">
                一个 <see cref="T:System.Xml.XmlReader" /> 流式传送到 SAML 2.0 安全令牌。
              </param>
      <returns>
              <see cref="T:System.IdentityModel.Tokens.Saml2SecurityToken" /> 的一个实例。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 属性为 <see langword="null" />。
                
                  - 或 - 
                
                  <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerTokenResolver" /> 属性所指定的配置 <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 属性是 <see langword="null" />。
                
                  - 或 - 
                
                  <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.ServiceTokenResolver" /> 属性所指定的配置 <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 属性是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ResolveIssuerToken(System.IdentityModel.Tokens.Saml2Assertion,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>
              解析到的签名密钥标识符 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
            </summary>
      <param name="assertion">
                <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" /> 要为其颁发者令牌进行解析。
              </param>
      <param name="issuerResolver">
                当前 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> 与此处理程序相关联。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> 表示解析的令牌。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="assertion" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
                  该处理程序无法解析令牌。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ResolveSecurityKeys(System.IdentityModel.Tokens.Saml2Assertion,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>
              解析集合的 <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> 中引用 <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" />。
            </summary>
      <param name="assertion">
                要处理的 <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" />。
              </param>
      <param name="resolver">
                <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> 解析使用 <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> 对象。
              </param>
      <returns>
              类型的集合 <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> ，包含的键。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="assertion" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
                  该处理程序无法解析的密钥。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.SetDelegateFromAttribute(System.IdentityModel.Tokens.Saml2Attribute,System.Security.Claims.ClaimsIdentity,System.String)">
      <summary>
              当一种特殊类型的调用此方法，获取 <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> 检测到。
              <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> 中包装传递 <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> ，其中包含属性值的集合 (在 <see cref="P:System.IdentityModel.Tokens.Saml2Attribute.Values" /> 属性)，其中每个将会映射到一个声明。
               在将返回的所有声明 <see cref="T:System.Security.Claims.ClaimsIdentity" /> 与指定的颁发者。
            </summary>
      <param name="attribute">
                要使用的 <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" />。
              </param>
      <param name="subject">
                <see cref="T:System.Security.Claims.ClaimsIdentity" /> 此令牌的主题。
              </param>
      <param name="issuer">
                声明颁发者。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> 不包含任何有效的属性的值。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.TryResolveIssuerToken(System.IdentityModel.Tokens.Saml2Assertion,System.IdentityModel.Selectors.SecurityTokenResolver,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>
              将签名的密钥标识符解析为 SecurityToken。
            </summary>
      <param name="assertion">
                <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" /> 要为其颁发者令牌进行解析。
              </param>
      <param name="issuerResolver">
                当前 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> 与此处理程序相关联。
              </param>
      <param name="token">
                此方法返回时，如果令牌已成功解析包含解析的安全令牌。
              </param>
      <returns>
              <see langword="true" /> 如果该令牌将被解析。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ValidateConditions(System.IdentityModel.Tokens.Saml2Conditions,System.Boolean)">
      <summary>
              验证指定 <see cref="T:System.IdentityModel.Tokens.Saml2Conditions" /> 对象。
            </summary>
      <param name="conditions">
                要验证的 SAML 2.0 条件。
              </param>
      <param name="enforceAudienceRestriction">
                <see langword="true" /> 若要检查的受众限制条件。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ValidateConfirmationData(System.IdentityModel.Tokens.Saml2SubjectConfirmationData)">
      <summary>
              验证指定 <see cref="T:System.IdentityModel.Tokens.Saml2SubjectConfirmationData" /> 对象。
            </summary>
      <param name="confirmationData">
                SAML 2.0 主题确认数据。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              验证令牌数据并返回其声明。
            </summary>
      <param name="token">
                要验证的 SAML 2.0 令牌。
              </param>
      <returns>
              在令牌中包含的标识。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteAction(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2Action)">
      <summary>
              写入 &lt; saml:Action &gt; 元素。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用来写入数据。
              </param>
      <param name="data">
                要写入的数据。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="data" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteAdvice(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2Advice)">
      <summary>
              写入 &lt; saml:Advice &gt; 元素。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用来写入数据。
              </param>
      <param name="data">
                要写入的数据。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="data" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteAssertion(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2Assertion)">
      <summary>
              将指定的 SAML 断言指定的 XML 编写器序列化。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用于序列化。
              </param>
      <param name="data">
                一个 <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" /> ，它表示要序列化的断言。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="data" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  指定的断言 <paramref name="data" /> 同时具有 <see cref="P:System.IdentityModel.Tokens.Saml2Assertion.EncryptingCredentials" /> 和 <see cref="T:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.ReceivedEncryptingCredentials" /> 属性设置为 <see langword="null" />。
                
                  - 或 -
                
                  有没有语句和由指定的断言中没有主题 <paramref name="data" />。
                   (同时 <see cref="P:System.IdentityModel.Tokens.Saml2Assertion.Subject" /> 属性和 <see cref="P:System.IdentityModel.Tokens.Saml2Assertion.Statements" /> 属性 <see langword="null" />。)
                   如果断言不包含语句，它必须包含一个使用者。
                
                  - 或 -
                
                  指定的断言 <paramref name="data" /> 包含的身份验证 （attribute) 或授权决策语句和无主题 — 这些语句需要一个使用者。
                   ( <see cref="P:System.IdentityModel.Tokens.Saml2Assertion.Statements" /> 属性包含的声明类型的 <see cref="T:System.IdentityModel.Tokens.Saml2AttributeStatement" />, ，<see cref="T:System.IdentityModel.Tokens.Saml2AuthenticationStatement" />, ，或 <see cref="T:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement" /> 和 <see cref="P:System.IdentityModel.Tokens.Saml2Assertion.Subject" /> 属性是 <see langword="null" />)。
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  令牌加密凭据没有指定的对称密钥。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteAttribute(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2Attribute)">
      <summary>
              写入 &lt; saml:Attribute &gt; 元素。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用来写入数据。
              </param>
      <param name="data">
                要写入的数据。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="data" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteAttributeStatement(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2AttributeStatement)">
      <summary>
              写入 &lt; saml:AttributeStatement &gt; 元素。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用来写入数据。
              </param>
      <param name="data">
                要写入的数据。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="data" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteAttributeValue(System.Xml.XmlWriter,System.String,System.IdentityModel.Tokens.Saml2Attribute)">
      <summary>
              写入 saml:Attribute 值。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用其进行写。
              </param>
      <param name="value">
                一个字符串，包含要写入的属性值。
              </param>
      <param name="attribute">
                一个 <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> ，表示正在写入其值的特性。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteAudienceRestriction(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2AudienceRestriction)">
      <summary>
              写入 &lt; saml:AudienceRestriction &gt; 元素。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用来写入数据。
              </param>
      <param name="data">
                要写入的数据。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="data" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteAuthenticationContext(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2AuthenticationContext)">
      <summary>
              写入 &lt; saml:AuthnContext &gt; 元素。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用来写入数据。
              </param>
      <param name="data">
                要写入的数据。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="data" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteAuthenticationStatement(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2AuthenticationStatement)">
      <summary>
              写入 &lt; saml:AuthnStatement &gt; 元素。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用来写入数据。
              </param>
      <param name="data">
                要写入的数据。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="data" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteAuthorizationDecisionStatement(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement)">
      <summary>
              写入 &lt; saml:AuthzDecisionStatement &gt; 元素。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用来写入数据。
              </param>
      <param name="data">
                要写入的数据。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="data" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteConditions(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2Conditions)">
      <summary>
              写入 &lt; saml:Conditions &gt; 元素。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用来写入数据。
              </param>
      <param name="data">
                要写入的数据。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="data" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteEvidence(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2Evidence)">
      <summary>
              写入 &lt; saml:Evidence &gt; 元素。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用来写入数据。
              </param>
      <param name="data">
                要写入的数据。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="data" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteIssuer(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2NameIdentifier)">
      <summary>
              写入 &lt; saml:Issuer &gt; 元素。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用来写入数据。
              </param>
      <param name="data">
                要写入的数据。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="data" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              将序列化为 <see cref="T:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause" /> 到指定的 XML 编写器。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 要序列化密钥标识符子句。
              </param>
      <param name="securityKeyIdentifierClause">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> ，表示要进行序列化密钥标识符子句。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="data" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="securityKeyIdentifierClause" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteNameId(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2NameIdentifier)">
      <summary>
              写入 &lt; saml:NameID &gt; 元素。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用来序列化 <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" />。
              </param>
      <param name="data">
                要序列化的 <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="data" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Saml2NameIdentifier 加密凭据必须具有指定的对称密钥。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteNameIdType(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2NameIdentifier)">
      <summary>
              这两个 &lt; 颁发者 &gt; 和 &lt; NameID &gt; NameIDType 的。
               此方法将任一这些元素的内容。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 与其 NameID 类型进行序列化。
              </param>
      <param name="data">
                要写入的 <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="data" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteProxyRestriction(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2ProxyRestriction)">
      <summary>
              写入 &lt; saml:ProxyRestriction &gt; 元素。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用来写入数据。
              </param>
      <param name="data">
                要写入的数据。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="data" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteSigningKeyInfo(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>
              写入使用指定的 XML 编写器签名 &lt; ds:KeyInfo &gt; 元素。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用来序列化密钥标识符。
              </param>
      <param name="data">
                <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> ，它表示要编写的密钥标识符。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="signingKeyIdentifier" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  该处理程序无法将指定的密钥标识符序列化为 <paramref name="signingKeyIdentifier" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteStatement(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2Statement)">
      <summary>
              写入 Saml2Statement。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用来写入数据。
              </param>
      <param name="data">
                要写入的数据。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="data" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteSubject(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2Subject)">
      <summary>
              写入 &lt; saml:Subject &gt; 元素。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用来写入数据。
              </param>
      <param name="data">
                要写入的数据。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="data" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteSubjectConfirmation(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2SubjectConfirmation)">
      <summary>
              写入 &lt; saml:SubjectConfirmation &gt; 元素。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用来写入数据。
              </param>
      <param name="data">
                要写入的数据。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="data" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteSubjectConfirmationData(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2SubjectConfirmationData)">
      <summary>
              写入 &lt; saml:SubjectConfirmationData &gt; 元素。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用来写入数据。
              </param>
      <param name="data">
                要写入的数据。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="data" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteSubjectKeyInfo(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>
              将序列化为指定的 XML 编写器的主题 &lt; ds:KeyInfo &gt; 元素。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用来序列化密钥标识符。
              </param>
      <param name="data">
                <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> ，它表示要编写的密钥标识符。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="data" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteSubjectLocality(System.Xml.XmlWriter,System.IdentityModel.Tokens.Saml2SubjectLocality)">
      <summary>
              写入 &lt; saml:SubjectLocality &gt; 元素。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用来写入数据。
              </param>
      <param name="data">
                要写入的数据。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="data" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              将写入指定的 XML 编写器的 Saml2 令牌。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用来写入数据。
              </param>
      <param name="token">
                要写入的标记。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="data" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="token" /> 不是 <see cref="T:System.IdentityModel.Tokens.Saml2SecurityToken" /> 对象。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Statement.#ctor">
      <summary>
              从构造函数初始化派生类中调用 <see cref="T:System.IdentityModel.Tokens.Saml2Statement" /> 类。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Subject.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.Saml2Subject" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Subject.#ctor(System.IdentityModel.Tokens.Saml2NameIdentifier)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.Saml2Subject" /> 类与指定 <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" /> 对象。
            </summary>
      <param name="nameId">
                一个 <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" /> ，它表示名称标识符。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2Subject.#ctor(System.IdentityModel.Tokens.Saml2SubjectConfirmation)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.Saml2Subject" /> 类与指定 <see cref="T:System.IdentityModel.Tokens.Saml2SubjectConfirmation" /> 对象。
            </summary>
      <param name="subjectConfirmation">
                一个 <see cref="T:System.IdentityModel.Tokens.Saml2SubjectConfirmation" /> ，它包含确认信息。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="subjectConfirmation" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SubjectConfirmation.#ctor(System.Uri)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.Saml2SubjectConfirmation" /> 类指定的 confirmation 方法。
            </summary>
      <param name="method">
                <see cref="T:System.Uri" /> ，该值指示 confirmation 方法。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="method" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="method" /> 不是绝对 URI。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SubjectConfirmation.#ctor(System.Uri,System.IdentityModel.Tokens.Saml2SubjectConfirmationData)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.Saml2SubjectConfirmation" /> 带有指定的 confirmation 方法和额外的确认信息的信息的类。
            </summary>
      <param name="method">
                <see cref="T:System.Uri" /> ，该值指示 confirmation 方法。
              </param>
      <param name="data">
                <see cref="T:System.IdentityModel.Tokens.Saml2SubjectConfirmationData" /> ，其中包含进一步确认信息。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="method" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="method" /> 不是绝对 URI。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SubjectConfirmationData.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.Saml2SubjectConfirmationData" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SubjectLocality.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.Saml2SubjectLocality" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.Saml2SubjectLocality.#ctor(System.String,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.Saml2SubjectLocality" /> 从地址和 DNS 名称的类。
            </summary>
      <param name="address">
                一个字符串，包含的地址。
              </param>
      <param name="dnsName">
                一个字符串，包含的 DNS 名称。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAction.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.SamlAction" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAction.#ctor(System.String)">
      <summary>
              使用指定的操作初始化 <see cref="T:System.IdentityModel.Tokens.SamlAction" /> 类的新实例。
            </summary>
      <param name="action">
                <see cref="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement" /> 安全令牌的主题试图对指定资源执行的操作。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="action" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="action" /> 为 <see cref="F:System.String.Empty" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAction.#ctor(System.String,System.String)">
      <summary>
              使用指定的操作初始化 <see cref="T:System.IdentityModel.Tokens.SamlAction" /> 类的新实例。
            </summary>
      <param name="action">
                <see cref="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement" /> 安全令牌的主题试图对指定资源执行的操作。
              </param>
      <param name="ns">
                在其中定义 <paramref name="action" /> 参数的 XML 命名空间。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="action" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="action" /> 为 <see cref="F:System.String.Empty" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAction.MakeReadOnly">
      <summary>
              将此实例设置为只读的。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAction.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>
              使用指定的 XML 读取器读取 <see langword="&lt;saml:Action&gt;" /> 元素。
            </summary>
      <param name="reader">
                一个 <see cref="T:System.Xml.XmlDictionaryReader" /> 读取 <see langword="&lt;saml:Action&gt;" /> XML 元素。
              </param>
      <param name="samlSerializer">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够读取 SAML 断言中已在 SAML 规范内定义的 XML 元素。
              </param>
      <param name="keyInfoSerializer">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它能够读取 <see langword="KeyInfo" /> 子句。
              </param>
      <param name="outOfBandTokenResolver">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定为 <see langword="&lt;saml:Advice&gt;" /> XML 元素所引用的 SAML 断言创建数字签名的安全令牌。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="samlSerializer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAction.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>
              将 <see cref="T:System.IdentityModel.Tokens.SamlAction" /> 作为 <see langword="&lt;saml:Action&gt;" /> 元素写入指定的 XML 编写器。
            </summary>
      <param name="writer">
                一个用于写入 <see cref="T:System.Xml.XmlDictionaryWriter" /> 元素的 <see langword="&lt;saml:Action&gt;" />。
              </param>
      <param name="samlSerializer">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够写入 SAML 规范中定义的 <see langword="&lt;saml:Action&gt;" /> 元素及其子元素和属性。
              </param>
      <param name="keyInfoSerializer">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它能够写入 <see langword="KeyInfo" /> 子句。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="samlSerializer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAdvice.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.SamlAdvice" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAdvice.#ctor(System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SamlAssertion})">
      <summary>
              使用指定的 SAML 断言集合初始化 <see cref="T:System.IdentityModel.Tokens.SamlAdvice" /> 类的新实例。
            </summary>
      <param name="assertions">
                一个类型为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" />，包含提供 SAML 断言附加信息的 SAML 断言。
              </param>
      <exception cref="T:System.ArgumentException">
                  <paramref name="assertions" /> 包含一个 <see langword="null" /> 元素。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAdvice.#ctor(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.SamlAdvice" /> 类的新实例。
            </summary>
      <param name="references">
                一个类型为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.String" />，包含对提供 SAML 断言附加信息的 SAML 断言的引用集合。
              </param>
      <exception cref="T:System.ArgumentException">
                  <paramref name="references" /> 包含一个 <see langword="null" /> 元素。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAdvice.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SamlAssertion})">
      <summary>
              使用指定的 SAML 断言集合和 SAML 断言引用集合初始化 <see cref="T:System.IdentityModel.Tokens.SamlAdvice" /> 类的新实例。
            </summary>
      <param name="references">
                一个类型为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.String" />，包含对提供 SAML 断言附加信息的 SAML 断言的引用集合。
              </param>
      <param name="assertions">
                一个类型为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" />，包含提供 SAML 断言附加信息的 SAML 断言。
              </param>
      <exception cref="T:System.ArgumentException">
                  <paramref name="references" /> 包含一个 <see langword="null" /> 元素。
                
                  - 或 -
                
                  <paramref name="assertions" /> 包含一个 <see langword="null" /> 元素。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAdvice.MakeReadOnly">
      <summary>
              将此实例设置为只读的。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAdvice.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>
              使用指定的 XML 读取器读取 <see langword="&lt;saml:Advice&gt;" /> XML 元素。
            </summary>
      <param name="reader">
                一个用于读取 <see cref="T:System.Xml.XmlDictionaryReader" /> XML 元素的 <see langword="&lt;saml:Advice&gt;" />。
              </param>
      <param name="samlSerializer">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够读取 SAML 断言中已在 SAML 规范内定义的 XML 元素。
              </param>
      <param name="keyInfoSerializer">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它能够读取 <see langword="KeyInfo" /> 子句。
              </param>
      <param name="outOfBandTokenResolver">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定为包含此 <see langword="&lt;saml:Advice&gt;" /> XML 元素的 SAML 断言创建数字签名的安全令牌。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />
                
                  - 或 -
                
                  <paramref name="samlSerializer" /> 为 <see langword="null" />
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
                  <see langword="&lt;saml:Advice&gt; " />元素不符合 <see langword="&lt;saml:Advice&gt;" /> 元素的 XML 架构。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAdvice.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>
              将此 <see cref="T:System.IdentityModel.Tokens.SamlAdvice" /> 作为一个 <see langword="&lt;saml:Advice&gt;" /> 元素写入指定的 XML 编写器。
            </summary>
      <param name="writer">
                一个用于写入 <see cref="T:System.Xml.XmlDictionaryWriter" /> 元素的 <see langword="&lt;saml:Advice&gt;" />。
              </param>
      <param name="samlSerializer">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够写入 SAML 规范中定义的 <see langword="&lt;saml:Advice&gt;" /> 元素及其子元素和属性。
              </param>
      <param name="keyInfoSerializer">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它能够写入 <see langword="KeyInfo" /> 子句。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />
                
                  - 或 -
                
                  <paramref name="samlSerializer" /> 为 <see langword="null" />
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAssertion.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAssertion.#ctor(System.String,System.String,System.DateTime,System.IdentityModel.Tokens.SamlConditions,System.IdentityModel.Tokens.SamlAdvice,System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SamlStatement})">
      <summary>
              使用指定的 SAML 断言标识符、断言颁发者、断言的颁发日期和时间、一组处理条件、附加信息和一个 SAML 语句集合来初始化 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> 类的新实例。
            </summary>
      <param name="assertionId">
                断言的标识符。
              </param>
      <param name="issuer">
                颁发此 SAML 断言的 SAML 授权机构。
              </param>
      <param name="issueInstant">
                一个 <see cref="T:System.DateTime" />，它指定 SAML 断言的颁发时间。
              </param>
      <param name="samlConditions">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlConditions" />，它指定在评估 SAML 断言的有效性时可能考虑的一组条件。
              </param>
      <param name="samlAdvice">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlAdvice" />，它指定由 SAML 授权机构提供的、有助于处理 SAML 断言的附加信息。
              </param>
      <param name="samlStatements">
                一个包含 SAML 语句的、类型为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.IdentityModel.Tokens.SamlStatement" />。
              </param>
      <exception cref="T:System.ArgumentException">
                  <paramref name="assertionId" /> 为 <see langword="null" />
                
                  - 或 -
                
                  <paramref name="assertionId" /> 为 <see cref="F:System.String.Empty" />
                
                  - 或 -
                
                  <paramref name="assertionId" /> 不是以字母或“_”字符开头。
                
                  - 或 -
                
                  <paramref name="issuer" /> 为 <see langword="null" />
                
                  - 或 -
                
                  <paramref name="issuer" /> 为 <see cref="F:System.String.Empty" />
                
                  - 或 -
                
                  <paramref name="samlStatements" /> 为 <see langword="null" />
                
                  - 或 -
                
                  <paramref name="samlStatements" /> 不包含任何元素
                
                  - 或 -
                
                  <paramref name="samlStatements" /> 包含一个 <see langword="null" /> 元素
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAssertion.MakeReadOnly">
      <summary>
              将此实例设置为只读的。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAssertion.ReadSignature(System.Xml.XmlDictionaryReader,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver,System.IdentityModel.Tokens.SamlSerializer)">
      <summary>
              从 XML 读取器读取 SAML 断言的数字签名。
            </summary>
      <param name="reader">
                一个用来读取数字签名的 <see cref="T:System.Xml.XmlDictionaryReader" />。
              </param>
      <param name="keyInfoSerializer">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 <see langword="KeyInfo" /> 子句。
              </param>
      <param name="outOfBandTokenResolver">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。
              </param>
      <param name="samlSerializer">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够读取 SAML 规范中定义的 XML 元素。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />
                
                  - 或 -
                
                  <paramref name="samlSerializer" /> 为 <see langword="null" />
                
                  - 或 -
                
                  尚未从 SAML 断言中读取数字签名。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAssertion.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>
              从指定的 XML 读取器读取 SAML 断言。
            </summary>
      <param name="reader">
                一个 <see cref="T:System.Xml.XmlDictionaryReader" />，它用来读取 SAML 断言。
              </param>
      <param name="samlSerializer">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够读取 SAML 断言中已在 SAML 规范内定义的 XML 元素。
              </param>
      <param name="keyInfoSerializer">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 <see langword="KeyInfo" /> 子句。
              </param>
      <param name="outOfBandTokenResolver">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />
                
                  - 或 -
                
                  <paramref name="samlSerializer" /> 为 <see langword="null" />
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  先前已经调用过 <see cref="M:System.IdentityModel.Tokens.SamlAssertion.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)" /> 方法且 SAML 断言已进行数字签名。
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
                  <paramref name="reader" /> 不引用遵循 SAML 1.1 规范的 SAML 断言。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAssertion.WriteSourceData(System.Xml.XmlWriter)">
      <summary>
              如果可用，请将源数据。
            </summary>
      <param name="writer">
                与要将源数据写入 XML 编写器。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  没有源数据
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAssertion.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>
              将 SAML 断言作为 <see langword="&lt;saml:Assertion&gt;" /> 元素写入指定的 XML 编写器。
            </summary>
      <param name="writer">
                一个 <see cref="T:System.Xml.XmlDictionaryWriter" />，它用于写入 SAML 断言。
              </param>
      <param name="samlSerializer">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够将 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> 中的对象写为 XML。
              </param>
      <param name="keyInfoSerializer">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它能够写入 <see langword="KeyInfo" /> 子句。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />
                
                  - 或 -
                
                  <paramref name="samlSerializer" /> 为 <see langword="null" />
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
                  <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> 的配置方式使得在将它序列化为 XML 时，将导致不符合 SAML v1.1 规范。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause.#ctor(System.String)">
      <summary>
              使用指定的 SAML 断言标识符来初始化 <see cref="T:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause" /> 类的新实例。
            </summary>
      <param name="assertionId">
                包含密钥标识符的 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> 的标识符
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="assertionId" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause.#ctor(System.String,System.Byte[],System.Int32)">
      <summary>
              使用指定的 SAML 断言标识符、Nonce 和密钥长度来初始化 <see cref="T:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause" /> 类的新实例。
            </summary>
      <param name="assertionId">
                包含密钥标识符的 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> 的标识符。
              </param>
      <param name="derivationNonce">
                一个 <see cref="T:System.Byte" /> 数组，包含用于创建派生密钥的 Nonce。
              </param>
      <param name="derivationLength">
                派生密钥的大小。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="assertionId" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              确定指定的密钥标识符是否与当前实例相同。
            </summary>
      <param name="keyIdentifierClause">
                要进行比较的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。
              </param>
      <returns>
              如果指定的密钥标识符与当前实例相同，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause.Matches(System.String)">
      <summary>
              确定指定的 SAML 断言标识符是否与当前实例相同。
            </summary>
      <param name="assertionId">
                要进行比较的 SAML 断言标识符。
              </param>
      <returns>
              如果 <see langword="true" /> 与当前实例的 <paramref name="assertionId" /> 属性具有相同值，则为 <see cref="P:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause.AssertionId" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause.ToString">
      <summary>
              返回一个 <see cref="T:System.String" />，它包含表示当前密钥标识符子句的 SAML 断言标识符。
            </summary>
      <returns>
              一个 <see cref="T:System.String" />，它包含表示当前 <see cref="T:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause" /> 实例的 SAML 断言标识符。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAttribute.#ctor(System.IdentityModel.Claims.Claim)">
      <summary>
              使用指定的声明初始化 <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> 类的新实例。
            </summary>
      <param name="claim">
                一个 <see cref="T:System.IdentityModel.Claims.Claim" />，它表示 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的主题的属性。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="claim" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <see cref="P:System.IdentityModel.Claims.Claim.Resource" /> 的 <paramref name="claim" /> 属性的类型不是 <see cref="T:System.String" />。
                
                  - 或 -
                
                  <see cref="P:System.IdentityModel.Claims.Claim.Right" /> 的 <paramref name="claim" /> 属性不是 <see cref="P:System.IdentityModel.Claims.Rights.PossessProperty" />。
                
                  - 或 -
                
                  <see cref="P:System.IdentityModel.Claims.Claim.ClaimType" /> 的 <paramref name="claim" /> 属性不含有“/”字符，或者它位于第一个或最后一个索引位置。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAttribute.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
              使用指定的属性名称、XML 命名空间和属性值来初始化 <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> 类的新实例。
            </summary>
      <param name="attributeNamespace">
                在其中定义 <paramref name="attributeName" /> 参数的 XML 命名空间。
              </param>
      <param name="attributeName">
                SAML 属性的名称。
              </param>
      <param name="attributeValues">
                一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，它包含 SAML 属性的值。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="attributeNamespace" /> 为 <see langword="null" />。
                
                  - 或 - 
                
                  <paramref name="attributeName" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="attributeValues" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <see cref="P:System.IdentityModel.Claims.Claim.Resource" /> 的 <paramref name="claim" /> 属性的类型不是 <see cref="T:System.String" />。
                
                  - 或 -
                
                  <see cref="P:System.IdentityModel.Claims.Claim.Right" /> 的 <paramref name="claim" /> 属性不是 <see cref="P:System.IdentityModel.Claims.Rights.PossessProperty" />。
                
                  - 或 -
                
                  <see cref="P:System.IdentityModel.Claims.Claim.ClaimType" /> 的 <paramref name="claim" /> 属性不含有“/”字符，或者它位于第一个或最后一个索引位置。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAttribute.ExtractClaims">
      <summary>
              获取该 SAML 属性表示的声明的集合。
            </summary>
      <returns>
              一个类型为 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.IdentityModel.Claims.Claim" />，它包含该 SAML 属性表示的声明集。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAttribute.MakeReadOnly">
      <summary>
              将此实例设置为只读的。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAttribute.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>
              从指定的 XML 读取器读取 SAML 属性。
            </summary>
      <param name="reader">
                一个用于读取 SAML 属性的 <see cref="T:System.Xml.XmlDictionaryReader" />。
              </param>
      <param name="samlSerializer">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够读取 SAML 规范中的 XML 元素。
              </param>
      <param name="keyInfoSerializer">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 <see langword="KeyInfo" /> 子句。
              </param>
      <param name="outOfBandTokenResolver">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="samlSerializer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
                  <paramref name="reader" /> 引用不具有 <see langword="AttributeName" /> 和 <see langword="AttributeNamespace" /> 属性的 XML 元素。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAttribute.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>
              将 SAML 属性写入指定的 XML 序列化程序。
            </summary>
      <param name="writer">
                一个用于写入 SAML 属性的 <see cref="T:System.Xml.XmlDictionaryWriter" />。
              </param>
      <param name="samlSerializer">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够写入 SAML 断言中的 XML 元素。
              </param>
      <param name="keyInfoSerializer">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它能够写入 <see langword="KeyInfo" /> 子句。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="samlSerializer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAttributeStatement.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.SamlAttributeStatement" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAttributeStatement.#ctor(System.IdentityModel.Tokens.SamlSubject,System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SamlAttribute})">
      <summary>
              使用指定的主题以及与该主题关联的属性集来初始化 <see cref="T:System.IdentityModel.Tokens.SamlAttributeStatement" /> 类的新实例。
            </summary>
      <param name="samlSubject">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlSubject" />，它指定声明的主题。
              </param>
      <param name="attributes">
                一个类型为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.IdentityModel.Tokens.SamlAttribute" />，它包含一组与主题关联的属性。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="samlSubject" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="attributes" /> 包含一个为 <see langword="null" /> 的成员。
                
                  - 或 -
                
                  <paramref name="attributes" /> 不包含成员。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAttributeStatement.AddClaimsToList(System.Collections.Generic.IList{System.IdentityModel.Claims.Claim})">
      <summary>
              将指定的声明集作为属性添加到此 SAML 语句中。
            </summary>
      <param name="claims">
                一个类型为 <see cref="T:System.Collections.Generic.IList`1" /> 的 <see cref="T:System.IdentityModel.Claims.Claim" />，它包含要添加到 SAML 语句中的声明集。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAttributeStatement.MakeReadOnly">
      <summary>
              将此实例设置为只读的。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAttributeStatement.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>
              从指定的 XML 读取器读取 SAML 属性语句。
            </summary>
      <param name="reader">
                用于读取 SAML 属性语句的 <see cref="T:System.Xml.XmlDictionaryReader" />。
              </param>
      <param name="samlSerializer">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够读取 SAML 规范中定义的 SAML 属性语句中的 XML 元素。
              </param>
      <param name="keyInfoSerializer">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 <see langword="KeyInfo" /> 子句。
              </param>
      <param name="outOfBandTokenResolver">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />
                
                  - 或 -
                
                  <paramref name="samlSerializer" /> 为 <see langword="null" />
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
                  <paramref name="reader" /> 引用不包含 <see langword="&lt;saml:Subject&gt;" /> 元素的 XML 元素。
                
                  - 或 -
                
                  <paramref name="reader" /> 引用一个 XML 元素，该元素包含的 <see langword="&lt;saml:Attribute&gt;" /> 元素不具有属性值。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAttributeStatement.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>
              将 SAML 属性语句写入指定的 XML 序列化程序。
            </summary>
      <param name="writer">
                一个用于写 SAML 属性语句的 <see cref="T:System.Xml.XmlDictionaryWriter" />。
              </param>
      <param name="samlSerializer">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够写入 SAML 断言中的 XML 元素。
              </param>
      <param name="keyInfoSerializer">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它能够写入 <see langword="KeyInfo" /> 子句。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />
                
                  - 或 -
                
                  <paramref name="samlSerializer" /> 为 <see langword="null" />
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition.#ctor(System.Collections.Generic.IEnumerable{System.Uri})">
      <summary>
              使用 SAML 断言的指定目标受众集初始化 <see cref="T:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition" /> 类的新实例。
            </summary>
      <param name="audiences">
                一个 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 类型的 <see cref="T:System.Uri" />，包含一个目标受众集。
              </param>
      <exception cref="T:System.ArgumentException">
                  <paramref name="audiences" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition.MakeReadOnly">
      <summary>
              将此实例设置为只读的。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>
              从指定的 XML 读取器读取 <see langword="&lt;AudienceRestrictionCondition&gt;" /> 元素。
            </summary>
      <param name="reader">
                一个用于读取 <see cref="T:System.Xml.XmlDictionaryReader" /> 元素的 <see langword="&lt;AudienceRestrictionCondition&gt;" />。
              </param>
      <param name="samlSerializer">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够读取 SAML 断言中已在 SAML 规范内定义的 XML 元素。
              </param>
      <param name="keyInfoSerializer">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 <see langword="KeyInfo" /> 子句。
              </param>
      <param name="outOfBandTokenResolver">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="samlSerializer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
                  <see langword="&lt;AudienceRestrictionCondition&gt;" /> 元素具有一个没有值的子 <see langword="&lt;Audience&gt;" /> 元素。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>
              将 <see langword="&lt;AudienceRestrictionCondition&gt;" /> 元素写入指定的 XML 序列化程序。
            </summary>
      <param name="writer">
                一个用于写入 <see cref="T:System.Xml.XmlDictionaryWriter" /> 元素的 <see langword="&lt;AudienceRestrictionCondition&gt;" />。
              </param>
      <param name="samlSerializer">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够在 SAML 规范中定义的 SAML 断言中写入 XML 元素。
              </param>
      <param name="keyInfoSerializer">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它能够写入 <see langword="KeyInfo" /> 子句。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="samlSerializer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthenticationClaimResource.#ctor(System.DateTime,System.String,System.String,System.String)">
      <summary>
              使用指定的时刻、身份验证方法、DNS 域名以及 IP 地址初始化 <see cref="T:System.IdentityModel.Tokens.SamlAuthenticationClaimResource" /> 类的新实例。
            </summary>
      <param name="authenticationInstant">
                一个 <see cref="T:System.DateTime" />，它指定对主题进行身份验证的时刻。
              </param>
      <param name="authenticationMethod">
                一个 URI 引用，它指定如何对主题进行身份验证。
              </param>
      <param name="dnsAddress">
                对主题进行身份验证的计算机所在的 DNS 域名。
              </param>
      <param name="ipAddress">
                对主题进行身份验证的计算机的 IP 地址。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthenticationClaimResource.#ctor(System.DateTime,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SamlAuthorityBinding})">
      <summary>
              使用指定的时刻、身份验证方法、DNS 域名、IP 地址以及对附加信息的引用来初始化 <see cref="T:System.IdentityModel.Tokens.SamlAuthenticationClaimResource" /> 类的新实例。
            </summary>
      <param name="authenticationInstant">
                一个 <see cref="T:System.DateTime" />，它指定对主题进行身份验证的时刻。
              </param>
      <param name="authenticationMethod">
                一个 URI 引用，它指定如何对主题进行身份验证。
              </param>
      <param name="dnsAddress">
                对主题进行身份验证的计算机所在的 DNS 域名。
              </param>
      <param name="ipAddress">
                对主题进行身份验证的计算机的 IP 地址。
              </param>
      <param name="authorityBindings">
                一个类型为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.IdentityModel.Tokens.SamlAuthorityBinding" />，它包含关于主题的附加信息。
              </param>
      <exception cref="T:System.ArgumentException">
                  <paramref name="authorityBindings" /> 包含一个为 <see langword="null" /> 的成员。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthenticationClaimResource.#ctor(System.DateTime,System.String,System.String,System.String,System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Tokens.SamlAuthorityBinding})">
      <summary>
              使用指定的时刻、身份验证方法、DNS 域名、IP 地址以及对附加信息的引用来初始化 <see cref="T:System.IdentityModel.Tokens.SamlAuthenticationClaimResource" /> 类的新实例。
            </summary>
      <param name="authenticationInstant">
                一个 <see cref="T:System.DateTime" />，它指定对主题进行身份验证的时刻。
              </param>
      <param name="authenticationMethod">
                一个 URI 引用，它指定如何对主题进行身份验证。
              </param>
      <param name="dnsAddress">
                对主题进行身份验证的计算机所在的 DNS 域名。
              </param>
      <param name="ipAddress">
                对主题进行身份验证的计算机的 IP 地址。
              </param>
      <param name="authorityBindings">
                一个类型为 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.IdentityModel.Tokens.SamlAuthorityBinding" />，它包含关于主题的附加信息。
              </param>
      <exception cref="T:System.ArgumentException">
                  <paramref name="authorityBindings" /> 包含一个为 <see langword="null" /> 的成员。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthenticationClaimResource.Equals(System.Object)">
      <summary>
              返回一个值，该值指示该实例是否与指定的对象相等。
            </summary>
      <param name="obj">
                要与此实例进行比较的对象。
              </param>
      <returns>
              如果 <see langword="true" /> 为 <paramref name="obj" /> 且拥有与此实例相等的值，则为 <see cref="T:System.IdentityModel.Tokens.SamlAuthenticationClaimResource" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthenticationClaimResource.GetHashCode">
      <summary>
              返回 <see cref="T:System.IdentityModel.Tokens.SamlAuthenticationClaimResource" /> 的哈希代码。
            </summary>
      <returns>
              <see cref="T:System.IdentityModel.Tokens.SamlAuthenticationClaimResource" /> 的哈希代码。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthenticationStatement.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.SamlAuthenticationStatement" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthenticationStatement.#ctor(System.IdentityModel.Tokens.SamlSubject,System.String,System.DateTime,System.String,System.String,System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SamlAuthorityBinding})">
      <summary>
              使用指定的身份验证详细信息初始化 <see cref="T:System.IdentityModel.Tokens.SamlAuthenticationStatement" /> 类的新实例。
            </summary>
      <param name="samlSubject">
                一个表示声明主题的 <see cref="T:System.IdentityModel.Tokens.SamlSubject" />。
              </param>
      <param name="authenticationMethod">
                一个 URI 引用，它指定如何对主题进行身份验证。
              </param>
      <param name="authenticationInstant">
                一个 <see cref="T:System.DateTime" />，它指定对主题进行身份验证的时刻。
              </param>
      <param name="dnsAddress">
                对主题进行身份验证的计算机所在的 DNS 域名。
              </param>
      <param name="ipAddress">
                对主题进行身份验证的计算机的 IP 地址。
              </param>
      <param name="authorityBindings">
                一个类型为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.IdentityModel.Tokens.SamlAuthorityBinding" />，它包含关于主题的附加信息。
              </param>
      <exception cref="T:System.ArgumentException">
                  <paramref name="authorityBindings" /> 包含一个为 <see langword="null" /> 的成员。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthenticationStatement.AddClaimsToList(System.Collections.Generic.IList{System.IdentityModel.Claims.Claim})">
      <summary>
              根据此实例的属性将声明添加到指定的声明集合。
            </summary>
      <param name="claims">
                一个类型为 <see cref="T:System.Collections.Generic.IList`1" /> 的 <see cref="T:System.IdentityModel.Claims.Claim" />，包含添加操作的目标声明集。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="claims" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthenticationStatement.MakeReadOnly">
      <summary>
              将此实例设置为只读的。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthenticationStatement.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>
              从指定的 XML 读取器读取 SAML 身份验证语句。
            </summary>
      <param name="reader">
                读取 SAML 身份验证语句的 <see cref="T:System.Xml.XmlDictionaryReader" />。
              </param>
      <param name="samlSerializer">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够读取 SAML 规范中定义的 SAML 身份验证语句中的 XML 元素。
              </param>
      <param name="keyInfoSerializer">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 <see langword="KeyInfo" /> 子句。
              </param>
      <param name="outOfBandTokenResolver">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />
                
                  - 或 -
                
                  <paramref name="samlSerializer" /> 为 <see langword="null" />
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
                  <paramref name="reader" /> 引用不包含 <see langword="AuthenticationInstant" /> 和 <see langword="AuthenticationMethod" /> 属性的 XML 元素。
                
                  - 或 -
                
                  <paramref name="reader" /> 引用不包含 <see langword="&lt;saml:Subject&gt;" /> 子元素的 XML 元素。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthenticationStatement.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>
              将 SAML 身份验证语句写入指定的 XML 序列化程序。
            </summary>
      <param name="writer">
                用于写入 SAML 身份验证语句的 <see cref="T:System.Xml.XmlDictionaryWriter" />。
              </param>
      <param name="samlSerializer">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够写入 SAML 断言中的 XML 元素。
              </param>
      <param name="keyInfoSerializer">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它能够写入 <see langword="KeyInfo" /> 子句。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />
                
                  - 或 -
                
                  <paramref name="samlSerializer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorityBinding.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.SamlAuthorityBinding" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorityBinding.#ctor(System.Xml.XmlQualifiedName,System.String,System.String)">
      <summary>
              使用指定的查询类型、协议绑定和 SAML 授权机构位置初始化 <see cref="T:System.IdentityModel.Tokens.SamlAuthorityBinding" /> 类的新实例。
            </summary>
      <param name="authorityKind">
                一个 <see cref="T:System.Xml.XmlQualifiedName" />，表示具有主题附加信息的 SAML 授权机构所响应的查询类型。
              </param>
      <param name="binding">
                一个 URI 引用，标识与具有主题附加信息的 SAML 授权机构通信时所使用的 SAML 协议绑定。
              </param>
      <param name="location">
                一个 URI 引用，描述如何找到并与具有主题附加信息的 SAML 授权机构进行通信。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorityBinding.MakeReadOnly">
      <summary>
              将此实例设置为只读的。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorityBinding.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>
              从指定的 XML 读取器读取 <see langword="&lt;AuthorityBinding&gt;" /> 元素。
            </summary>
      <param name="reader">
                一个用于读取 <see cref="T:System.Xml.XmlDictionaryReader" /> 元素的 <see langword="&lt;AuthorityBinding&gt;" />。
              </param>
      <param name="samlSerializer">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够读取 SAML 断言中已在 SAML 规范内定义的 XML 元素。
              </param>
      <param name="keyInfoSerializer">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 <see langword="KeyInfo" /> 子句。
              </param>
      <param name="outOfBandTokenResolver">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />
                
                  - 或 -
                
                  <paramref name="samlSerializer" /> 为 <see langword="null" />
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
                  <paramref name="reader" /> 不引用 SAML 断言。
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
                  <see langword="&lt;AuthorityBinding&gt;" /> 元素不具有 <see langword="AuthorityKind" />、<see langword="Location" /> 或 <see langword="Binding" /> 属性。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorityBinding.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>
              将 <see langword="&lt;AuthorityBinding&gt;" /> 元素写入指定的 XML 序列化程序。
            </summary>
      <param name="writer">
                一个用于写入 <see cref="T:System.Xml.XmlDictionaryWriter" /> 元素的 <see langword="&lt;AuthorityBinding&gt;" />。
              </param>
      <param name="samlSerializer">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够在 SAML 规范中定义的 SAML 断言中写入 XML 元素。
              </param>
      <param name="keyInfoSerializer">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它能够写入 <see langword="KeyInfo" /> 子句。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />
                
                  - 或 -
                
                  <paramref name="samlSerializer" /> 为 <see langword="null" />
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource.#ctor(System.String,System.IdentityModel.Tokens.SamlAccessDecision,System.String,System.String)">
      <summary>
              使用该主题正试图访问的指定资源、与该资源有关的授权决定、试图对该资源执行的操作以及在其中定义该操作的 XML 命名空间来初始化 <see cref="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource" /> 类的新实例。
            </summary>
      <param name="resource">
                该主题正试图访问的资源。
              </param>
      <param name="accessDecision">
                由 SAML 授权机构做出的、与该主题访问资源有关的授权决定。
              </param>
      <param name="actionNamespace">
                XML 命名空间，在其中定义了 <paramref name="action" /> 参数中指定的操作。
              </param>
      <param name="actionName">
                该主题试图对 <paramref name="resource" /> 参数中指定的资源执行的操作。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="resource" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="actionName" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource.Equals(System.Object)">
      <summary>
              返回一个值，该值指示该实例是否与指定的对象相等。
            </summary>
      <param name="obj">
                要与此实例进行比较的对象。
              </param>
      <returns>
              如果 <see langword="true" /> 为 <paramref name="obj" /> 且拥有与此实例相等的值，则为 <see cref="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource.GetHashCode">
      <summary>
              返回 <see cref="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource" /> 的哈希代码。
            </summary>
      <returns>
              <see cref="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource" /> 的哈希代码。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.#ctor(System.IdentityModel.Tokens.SamlSubject,System.String,System.IdentityModel.Tokens.SamlAccessDecision,System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SamlAction})">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement" /> 类的新实例。
                。
            </summary>
      <param name="samlSubject">
                一个表示声明主题的 <see cref="T:System.IdentityModel.Tokens.SamlSubject" />。
                 设置 <see cref="P:System.IdentityModel.Tokens.SamlSubjectStatement.SamlSubject" /> 属性。
              </param>
      <param name="resource">
                一个 URI 引用，它标识要试图访问的资源。
                 设置 <see cref="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.Resource" /> 属性。
              </param>
      <param name="accessDecision">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlAccessDecision" />，它指定由 SAML 授权机构做出的、与主题访问指定资源有关的授权决定。
                 设置 <see cref="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.AccessDecision" /> 属性。
              </param>
      <param name="samlActions">
                一个类型为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.IdentityModel.Tokens.SamlAction" />，它指定该主题有权对资源执行的操作集。
                 设置 <see cref="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.SamlActions" /> 属性。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="samlActions" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="samlActions" /> 包含一个为 <see langword="null" /> 的成员。
                
                  - 或 -
                
                  <paramref name="samlSubject" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="authorityBindings" /> 包含一个为 <see langword="null" /> 的成员。
                
                  - 或 -
                
                  <paramref name="resource" /> 为 <see langword="null" /> 或空。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.#ctor(System.IdentityModel.Tokens.SamlSubject,System.String,System.IdentityModel.Tokens.SamlAccessDecision,System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SamlAction},System.IdentityModel.Tokens.SamlEvidence)">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement" /> 类的新实例。
                。
            </summary>
      <param name="samlSubject">
                一个表示声明主题的 <see cref="T:System.IdentityModel.Tokens.SamlSubject" />。
                 设置 <see cref="P:System.IdentityModel.Tokens.SamlSubjectStatement.SamlSubject" /> 属性。
              </param>
      <param name="resource">
                一个 URI 引用，它标识要试图访问的资源。
                 设置 <see cref="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.Resource" /> 属性。
              </param>
      <param name="accessDecision">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlAccessDecision" />，它指定由 SAML 授权机构做出的、与主题访问指定资源有关的授权决定。
                 设置 <see cref="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.AccessDecision" /> 属性。
              </param>
      <param name="samlActions">
                一个类型为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.IdentityModel.Tokens.SamlAction" />，它指定该主题有权对资源执行的操作集。
                 设置 <see cref="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.SamlActions" /> 属性。
              </param>
      <param name="samlEvidence">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlEvidence" />，它包含 SAML 授权机构在做出授权决定时所依赖的一组 SAML 断言。
                 设置 <see cref="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.Evidence" /> 属性。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.AddClaimsToList(System.Collections.Generic.IList{System.IdentityModel.Claims.Claim})">
      <summary>
              将基于此实例的属性的声明添加指定的声明集合。
            </summary>
      <param name="claims">
                一个类型为 <see cref="T:System.Collections.Generic.IList`1" /> 的 <see cref="T:System.IdentityModel.Claims.Claim" />，包含添加操作的目标声明集。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="claims" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.MakeReadOnly">
      <summary>
              将此实例设置为只读的。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>
              从指定的 XML 读取器读取 SAML 授权语句。
            </summary>
      <param name="reader">
                一个用于读取 SAML 授权语句的 <see cref="T:System.Xml.XmlDictionaryReader" />。
              </param>
      <param name="samlSerializer">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够读取 SAML 规范中定义的 SAML 授权语句中的 XML 元素。
              </param>
      <param name="keyInfoSerializer">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 <see langword="KeyInfo" /> 子句。
              </param>
      <param name="outOfBandTokenResolver">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="samlSerializer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
                  <paramref name="reader" /> 引用不包含 <see langword="Resource" /> 和 <see langword="Decision" /> 属性的 XML 元素。
                
                  - 或 -
                
                  <paramref name="reader" /> 引用不具有 <see langword="&lt;saml:Subject&gt;" />、<see langword="&lt;saml:Evidence&gt;" /> 和 <see langword="&lt;saml:Action&gt;" /> 子元素的 XML 元素。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>
              将 SAML 授权语句写入指定的 XML 序列化程序。
            </summary>
      <param name="writer">
                一个用于写 SAML 授权语句的 <see cref="T:System.Xml.XmlDictionaryWriter" />。
              </param>
      <param name="samlSerializer">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够写入 SAML 断言中的 XML 元素。
              </param>
      <param name="keyInfoSerializer">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它能够写入 <see langword="KeyInfo" /> 子句。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="samlSerializer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlCondition.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.SamlCondition" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlCondition.MakeReadOnly">
      <summary>
              在派生类中重写时，使此实例为只读。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlCondition.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>
              在派生类中重写时，从指定的 XML 读取器读取条件。
            </summary>
      <param name="reader">
                一个用来读取条件的 <see cref="T:System.Xml.XmlDictionaryReader" />。
              </param>
      <param name="samlSerializer">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够读取 SAML 规范中定义的 SAML 授权语句中的 XML 元素。
              </param>
      <param name="keyInfoSerializer">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 <see langword="KeyInfo" /> 子句。
              </param>
      <param name="outOfBandTokenResolver">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlCondition.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>
              在派生类中重写时，将条件写入指定的 XML 序列化程序。
            </summary>
      <param name="writer">
                一个用于写入条件的 <see cref="T:System.Xml.XmlDictionaryWriter" />。
              </param>
      <param name="samlSerializer">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够写入 SAML 断言中的 XML 元素。
              </param>
      <param name="keyInfoSerializer">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它能够写入 <see langword="KeyInfo" /> 子句。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlConditions.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.SamlConditions" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlConditions.#ctor(System.DateTime,System.DateTime)">
      <summary>
              使用 SAML 断言有效的指定时间范围来初始化 <see cref="T:System.IdentityModel.Tokens.SamlConditions" /> 类的新实例。
            </summary>
      <param name="notBefore">
                一个 <see cref="T:System.DateTime" />，指定 SAML 断言有效的最初时刻。
                 设置 <see cref="P:System.IdentityModel.Tokens.SamlConditions.NotBefore" /> 属性。
              </param>
      <param name="notOnOrAfter">
                一个 <see cref="T:System.DateTime" />，指定 SAML 断言过期的时刻。
                 设置 <see cref="P:System.IdentityModel.Tokens.SamlConditions.NotOnOrAfter" /> 属性。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlConditions.#ctor(System.DateTime,System.DateTime,System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SamlCondition})">
      <summary>
              使用 SAML 断言有效的指定时间范围和条件来初始化 <see cref="T:System.IdentityModel.Tokens.SamlConditions" /> 类的新实例。
            </summary>
      <param name="notBefore">
                一个 <see cref="T:System.DateTime" />，指定 SAML 断言有效的最初时刻。
                 设置 <see cref="P:System.IdentityModel.Tokens.SamlConditions.NotBefore" /> 属性。
              </param>
      <param name="notOnOrAfter">
                一个 <see cref="T:System.DateTime" />，指定 SAML 断言过期的时刻。
                 设置 <see cref="P:System.IdentityModel.Tokens.SamlConditions.NotOnOrAfter" /> 属性。
              </param>
      <param name="conditions">
                一个类型为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.IdentityModel.Tokens.SamlCondition" />，它指定条件集，即在评估断言有效性时必须考虑的 SAML 断言的某个接收方。
                 设置 <see cref="P:System.IdentityModel.Tokens.SamlConditions.Conditions" /> 属性。
              </param>
      <exception cref="T:System.ArgumentException">
                  <paramref name="conditions" /> 包含一个为 <see langword="null" /> 的成员。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlConditions.MakeReadOnly">
      <summary>
              将此实例设置为只读的。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlConditions.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>
              从指定的 XML 读取器读取 <see langword="&lt;saml:Conditions&gt;" /> 元素。
            </summary>
      <param name="reader">
                读取 <see cref="T:System.Xml.XmlDictionaryReader" /> 元素的 <see langword="&lt;saml:Conditions&gt;" />。
              </param>
      <param name="samlSerializer">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够读取 SAML 规范中定义的 SAML 授权语句中的 XML 元素。
              </param>
      <param name="keyInfoSerializer">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 <see langword="KeyInfo" /> 子句。
              </param>
      <param name="outOfBandTokenResolver">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />
                
                  - 或 -
                
                  <paramref name="samlSerializer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlConditions.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>
              将 <see langword="&lt;saml:Conditions&gt;" /> 元素写入指定的 XML 序列化程序。
            </summary>
      <param name="writer">
                一个用于写入 <see cref="T:System.Xml.XmlDictionaryWriter" /> 元素的 <see langword="&lt;saml:Conditions&gt;" />。
              </param>
      <param name="samlSerializer">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够写入 SAML 断言中的 XML 元素。
              </param>
      <param name="keyInfoSerializer">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它能够写入 <see langword="KeyInfo" /> 子句。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />
                
                  - 或 -
                
                  <paramref name="samlSerializer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlDoNotCacheCondition.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.SamlDoNotCacheCondition" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlDoNotCacheCondition.MakeReadOnly">
      <summary>
              将此实例设置为只读的。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlDoNotCacheCondition.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>
              从指定的 XML 读取器读取 <see langword="&lt;saml:DoNotCacheCondition&gt;" /> 元素。
            </summary>
      <param name="reader">
                用于读取 <see cref="T:System.Xml.XmlDictionaryReader" /> 的 <see langword="&lt;saml:DoNotCacheCondition&gt;" />。
              </param>
      <param name="samlSerializer">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够读取 SAML 规范中定义的 SAML 授权语句中的 XML 元素。
              </param>
      <param name="keyInfoSerializer">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 <see langword="KeyInfo" /> 子句。
              </param>
      <param name="outOfBandTokenResolver">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />
                
                  - 或 -
                
                  <paramref name="samlSerializer" /> 为 <see langword="null" />
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
                  <paramref name="reader" /> 不指向 <see langword="&lt;saml:DoNotCacheCondition&gt;" /> 元素。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlDoNotCacheCondition.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>
              将 <see langword="&lt;saml:DoNotCacheCondition&gt;" /> 元素写入指定的 XML 序列化程序。
            </summary>
      <param name="writer">
                一个用于写入 <see cref="T:System.Xml.XmlDictionaryWriter" /> 元素的 <see langword="&lt;saml:DoNotCacheCondition&gt;" />。
              </param>
      <param name="samlSerializer">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够写入 SAML 断言中的 XML 元素。
              </param>
      <param name="keyInfoSerializer">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它能够写入 <see langword="KeyInfo" /> 子句。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />
                
                  - 或 -
                
                  <paramref name="samlSerializer" /> 为 <see langword="null" />
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlEvidence.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.SamlEvidence" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlEvidence.#ctor(System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SamlAssertion})">
      <summary>
              使用指定的 SAML 断言集初始化 <see cref="T:System.IdentityModel.Tokens.SamlEvidence" /> 类的新实例。
            </summary>
      <param name="assertions">
                一个类型为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" />，它包含 SAML 授权机构呈现授权决定时所依赖的证据。
                 设置 <see cref="P:System.IdentityModel.Tokens.SamlEvidence.Assertions" /> 属性。
              </param>
      <exception cref="T:System.ArgumentException">
                  <paramref name="assertions" /> 包含一个为 <see langword="null" /> 的成员。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlEvidence.#ctor(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
              使用指定的 SAML 断言引用集初始化 <see cref="T:System.IdentityModel.Tokens.SamlEvidence" /> 类的新实例。
            </summary>
      <param name="assertionIdReferences">
                一个类型为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.String" />，它包含一个 SAML 断言的标识符，该断言指定 SAML 授权机构呈现授权决定时所依赖的证据。
                 设置 <see cref="P:System.IdentityModel.Tokens.SamlEvidence.AssertionIdReferences" /> 属性。
              </param>
      <exception cref="T:System.ArgumentException">
                  <paramref name="assertionIdReferences" /> 包含一个为 <see langword="null" /> 或空的成员。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlEvidence.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SamlAssertion})">
      <summary>
              使用一组指定的 SAML 断言引用和 SAML 断言初始化 <see cref="T:System.IdentityModel.Tokens.SamlEvidence" /> 类的新实例。
            </summary>
      <param name="assertionIdReferences">
                一个类型为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.String" />，它包含一个 SAML 断言的标识符，该断言指定 SAML 授权机构呈现授权决定时所依赖的证据。
                 设置 <see cref="P:System.IdentityModel.Tokens.SamlEvidence.AssertionIdReferences" /> 属性。
              </param>
      <param name="assertions">
                一个类型为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" />，它包含 SAML 授权机构呈现授权决定时所依赖的证据。
                 设置 <see cref="P:System.IdentityModel.Tokens.SamlEvidence.Assertions" /> 属性。
              </param>
      <exception cref="T:System.ArgumentException">
                  <paramref name="assertionIdReferences" /> 包含一个为 <see langword="null" /> 或空的成员。
                
                  - 或 -
                
                  <paramref name="assertions" /> 包含一个为 <see langword="null" /> 的成员。
                
                  - 或 -
                
                  <paramref name="assertionIdReferences" /> 和 <paramref name="assertions" /> 均为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlEvidence.MakeReadOnly">
      <summary>
              将此实例设置为只读的。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlEvidence.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>
              从指定的 XML 读取器读取证据。
            </summary>
      <param name="reader">
                用于读取证据的 <see cref="T:System.Xml.XmlDictionaryReader" />。
              </param>
      <param name="samlSerializer">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够读取 SAML 规范中定义的 SAML 授权语句中的 XML 元素。
              </param>
      <param name="keyInfoSerializer">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 <see langword="KeyInfo" /> 子句。
              </param>
      <param name="outOfBandTokenResolver">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="samlSerializer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
                  <paramref name="reader" /> 引用未包含至少一个 <see langword="&lt;saml:AssertionIDReference&gt;" /> 或 <see langword="&lt;saml:Assertion&gt;" /> 子元素的 XML 元素。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlEvidence.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>
              将证据写入指定的 XML 序列化程序。
            </summary>
      <param name="writer">
                用于写入证据的 <see cref="T:System.Xml.XmlDictionaryWriter" />。
              </param>
      <param name="samlSerializer">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够写入 SAML 断言中的 XML 元素。
              </param>
      <param name="keyInfoSerializer">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它能够写入 <see langword="KeyInfo" /> 子句。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="samlSerializer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlNameIdentifierClaimResource.#ctor(System.String,System.String,System.String)">
      <summary>
              使用指定的名称、该名称所在的域以及该名称的格式初始化 <see cref="T:System.IdentityModel.Tokens.SamlNameIdentifierClaimResource" /> 类的新实例。
            </summary>
      <param name="name">
                主题名称。
                 设置 <see cref="P:System.IdentityModel.Tokens.SamlSubject.Name" /> 属性。
              </param>
      <param name="nameQualifier">
                <paramref name="name" /> 参数所在的域。
                 设置 <see cref="P:System.IdentityModel.Tokens.SamlNameIdentifierClaimResource.NameQualifier" /> 属性。
              </param>
      <param name="format">
                一个 URI 引用，表示 <paramref name="name" /> 参数所使用的格式。
                 设置 <see cref="P:System.IdentityModel.Tokens.SamlNameIdentifierClaimResource.Format" /> 属性。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlNameIdentifierClaimResource.Equals(System.Object)">
      <summary>
              返回一个值，该值指示该实例是否与指定的对象相等。
            </summary>
      <param name="obj">
                要与此实例进行比较的对象。
              </param>
      <returns>
              如果 <see langword="true" /> 为 <paramref name="obj" /> 且拥有与此实例相等的值，则为 <see cref="T:System.IdentityModel.Tokens.SamlNameIdentifierClaimResource" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlNameIdentifierClaimResource.GetHashCode">
      <summary>
              返回 <see cref="T:System.IdentityModel.Tokens.SamlNameIdentifierClaimResource" /> 的哈希代码。
            </summary>
      <returns>
              <see cref="T:System.IdentityModel.Tokens.SamlNameIdentifierClaimResource" /> 的哈希代码。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityKeyIdentifierClause.#ctor(System.IdentityModel.Tokens.SamlAssertion)">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.SamlSecurityKeyIdentifierClause" /> 类的新实例。
            </summary>
      <param name="assertion">
                当前正在处理的断言。
                 设置 <see cref="P:System.IdentityModel.Tokens.SamlSecurityKeyIdentifierClause.Assertion" /> 属性的值。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityToken.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityToken.#ctor(System.IdentityModel.Tokens.SamlAssertion)">
      <summary>
              使用指定的 SAML 断言初始化 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 类的新实例。
            </summary>
      <param name="assertion">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" />，表示此安全令牌的 SAML 断言。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityToken.CanCreateKeyIdentifierClause``1">
      <summary>
              获取一个值，该值指示此安全令牌能否创建指定的密钥标识符。
            </summary>
      <typeparam name="T">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，指定要创建的密钥标识符。
              </typeparam>
      <returns>
              如果 <see langword="true" /> 的类型为 <paramref name="T" />，则为 <see cref="T:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityToken.CreateKeyIdentifierClause``1">
      <summary>
              创建指定的密钥标识符子句。
            </summary>
      <typeparam name="T">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，指定要创建的密钥标识符。
              </typeparam>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause" />，它是 SAML 安全令牌的密钥标识符子句。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="T" /> 的类型不是 <see cref="T:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityToken.Initialize(System.IdentityModel.Tokens.SamlAssertion)">
      <summary>
              使用指定的 SAML 断言初始化 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 类的属性。
            </summary>
      <param name="assertion">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" />，表示此安全令牌的 SAML 断言。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="assertion" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              返回一个值，该值指示此实例的密钥标识符与指定的密钥标识符是否相等。
            </summary>
      <param name="keyIdentifierClause">
                一个要与此实例进行比较的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。
              </param>
      <returns>
              如果 <see langword="true" /> 为 <paramref name="keyIdentifierClause" />，并且具有与 <see cref="T:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause" /> 属性相同的唯一标识符，则为 <see cref="P:System.IdentityModel.Tokens.SamlSecurityToken.Id" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.SamlSecurityTokenHandler" /> 类，具有默认安全令牌要求。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.#ctor(System.IdentityModel.Tokens.SamlSecurityTokenRequirement)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.SamlSecurityTokenHandler" /> 指定的安全令牌要求类。
            </summary>
      <param name="samlSecurityTokenRequirement">
                <see cref="T:System.IdentityModel.Tokens.SamlSecurityTokenRequirement" /> 若要在验证令牌时，此实例使用。
                 设置 <see cref="P:System.IdentityModel.Tokens.SamlSecurityTokenHandler.SamlSecurityTokenRequirement" /> 属性。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="samlSecurityTokenRequirement" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.AddDelegateToAttributes(System.Security.Claims.ClaimsIdentity,System.Collections.Generic.ICollection{System.IdentityModel.Tokens.SamlAttribute},System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>
              将所有与 ActAs 主题关联到属性集合的委托添加。
            </summary>
      <param name="subject">
                此委托 <see cref="T:System.Security.Claims.ClaimsIdentity" /> 对象序列化到 <see cref="T:System.IdentityModel.Tokens.SamlAttribute" />。
                 通过指定委托 <see cref="P:System.Security.Claims.ClaimsIdentity.Actor" /> 属性。
              </param>
      <param name="attributes">
                ActAs 令牌将被序列化到的特性集合。
              </param>
      <param name="tokenDescriptor">
                令牌的描述符。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="subject" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="tokenDescriptor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
      <summary>
              指示是否可以处理此实例的类型的令牌作为读取当前 XML 元素。
            </summary>
      <param name="reader">
                XML 读取器定位在开始元素。
                 读取器不应将前移。
              </param>
      <returns>
              <see langword="true" /> 如果 <see cref="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadToken(System.Xml.XmlReader)" /> 方法可以读取元素; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CollectAttributeValues(System.Collections.Generic.ICollection{System.IdentityModel.Tokens.SamlAttribute})">
      <summary>
              收集到单个属性具有多个值具有公用声明类型、 声明值类型和原始颁发者的属性。
            </summary>
      <param name="attributes">
                类型的集合 <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> 包含声明从生成的特性。
              </param>
      <returns>
              一套 <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> ，它包含从输入集合中派生的属性。
               共享通用声明类型，输入集合中的属性声明值，并与其他属性的原始颁发者都合并到单个属性具有多个输出集合中的值。
               输入集合中与其他属性不能共享声明类型、 声明值或原始的颁发者的属性将出现在输出集合中未更改。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CreateAdvice(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>
              当在派生类中重写创建 <see cref="T:System.IdentityModel.Tokens.SamlAdvice" /> 断言的对象。
            </summary>
      <param name="tokenDescriptor">
                令牌的描述符。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SamlAdvice" /> 对象。
               默认值为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CreateAssertion(System.String,System.IdentityModel.Tokens.SamlConditions,System.IdentityModel.Tokens.SamlAdvice,System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SamlStatement})">
      <summary>
              创建 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> 通过使用指定的颁发者、 条件、 建议和语句对象。
               您可以重写此方法以自定义用于创建该断言的参数。
            </summary>
      <param name="issuer">
                断言的颁发者。
              </param>
      <param name="conditions">
                <see cref="T:System.IdentityModel.Tokens.SamlConditions" /> 将添加到该断言。
              </param>
      <param name="advice">
                <see cref="T:System.IdentityModel.Tokens.SamlAdvice" /> 将添加到该断言。
              </param>
      <param name="statements">
                集合 <see cref="T:System.IdentityModel.Tokens.SamlStatement" /> 将添加到该断言。
              </param>
      <returns>
              创建 SAML 断言。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CreateAttribute(System.Security.Claims.Claim,System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>
              创建 <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> 声明中的对象。
            </summary>
      <param name="claim">
                <see cref="T:System.Security.Claims.Claim" /> 从中生成 SAML 属性。
              </param>
      <param name="tokenDescriptor">
                令牌的描述符。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> ，其中包含转换后的声明。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="claim" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CreateAttributeStatement(System.IdentityModel.Tokens.SamlSubject,System.Security.Claims.ClaimsIdentity,System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>
              创建 <see cref="T:System.IdentityModel.Tokens.SamlAttributeStatement" /> 从令牌描述符的对象。
            </summary>
      <param name="samlSubject">
                <see cref="T:System.IdentityModel.Tokens.SamlSubject" /> 用于 <see cref="T:System.IdentityModel.Tokens.SamlAttributeStatement" /> ，它创建。
              </param>
      <param name="subject">
                <see cref="T:System.Security.Claims.ClaimsIdentity" /> 对象，其中包含将被转换为 SAML 属性的声明。
              </param>
      <param name="tokenDescriptor">
                令牌的描述符。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SamlAttributeStatement" /> ，包含已转换的声明。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CreateAuthenticationStatement(System.IdentityModel.Tokens.SamlSubject,System.Security.Claims.AuthenticationInformation,System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>
              从指定的身份验证信息创建 SAML 1.1 验证语句。
            </summary>
      <param name="samlSubject">
                在 SamlSubject 的语句。
              </param>
      <param name="authInfo">
                <see cref="T:System.Security.Claims.AuthenticationInformation" /> 从中生成 SAML 身份验证语句。
              </param>
      <param name="tokenDescriptor">
                包含使用在令牌颁发的所有其他信息。
              </param>
      <returns>
              已创建的 SAML 身份验证语句。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="samlSubject" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="tokenDescriptor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CreateClaims(System.IdentityModel.Tokens.SamlSecurityToken)">
      <summary>
              创建从 SAML 1.1 令牌的声明。
            </summary>
      <param name="samlSecurityToken">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> ，它表示从中创建声明的安全令牌。
              </param>
      <returns>
              一个 <see cref="T:System.Security.Claims.ClaimsIdentity" /> ，包含从令牌提取的声明。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="samlSecurityToken" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <see cref="P:System.IdentityModel.Tokens.SamlSecurityToken.Assertion" /> 属性 <paramref name="samlSecurityToken" /> 是 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  该处理程序未配置或颁发者名称注册表未配置为处理程序。
                   ( <see cref="P:System.IdentityModel.Tokens.SamlSecurityTokenHandler.Configuration" /> 属性是 <see langword="null" /> ，或者设置为 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" /> 与 <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerNameRegistry" /> 属性都 <see langword="null" />。
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
                  返回配置的颁发者名称注册表中是否有安全令牌的颁发者名称 (<paramref name="samlSecurityToken" />) 是 <see langword="null" /> 或为空。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CreateConditions(System.IdentityModel.Protocols.WSTrust.Lifetime,System.String,System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>
              创建断言的条件。
            </summary>
      <param name="tokenLifetime">
                令牌的生存期。
              </param>
      <param name="relyingPartyAddress">
                为其创建该令牌终结点地址。
                 该地址都建模为 AudienceRestriction 条件。
              </param>
      <param name="tokenDescriptor">
                令牌的描述符。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SamlConditions" /> 对象，其中包含断言的条件。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CreateSamlSubject(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>
              创建 SAML 1.1 断言的主题。
            </summary>
      <param name="tokenDescriptor">
                从中创建使用者的安全令牌描述符。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SamlSubject" /> 表示断言的主题。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="tokenDescriptor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
      <summary>
              令牌未附加到消息时，请创建安全令牌引用。
            </summary>
      <param name="token">
                SAML 令牌中。
              </param>
      <param name="attached">
                一个值，该值指示是否应创建一个附加或未附加引用。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> ，表示令牌的引用。
               (实例 <see cref="T:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause" /> 实际返回。)
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="token" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CreateStatements(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>
              创建要包括在断言的 SAML 1.1 语句。
            </summary>
      <param name="tokenDescriptor">
                从中创建语句令牌描述符。
              </param>
      <returns>
              枚举 <see cref="T:System.IdentityModel.Tokens.SamlStatement" /> 包含的语句。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="tokenDescriptor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>
              创建基于令牌的描述符的安全令牌。
            </summary>
      <param name="tokenDescriptor">
                从其创建安全令牌的令牌描述符。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> ，它表示 SAML 1.1 安全令牌。
               (返回的标记是实际的实例 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" />。)
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="tokenDescriptor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CreateWindowsIdentity(System.String)">
      <summary>
              创建 <see cref="T:System.Security.Principal.WindowsIdentity" /> 对象使用指定用户主体名称 (UPN)。
            </summary>
      <param name="upn">
                要用于创建标识的 UPN。
              </param>
      <returns>
              已创建的 Windows 标识。
            </returns>
      <exception cref="T:System.ArgumentException">
                  <paramref name="upn" /> 为 <see langword="null" /> 或空字符串。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CreateXmlStringFromAttributes(System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SamlAttribute})">
      <summary>
              生成 XML 格式字符串，从代表参与者的 SAML 1.1 特性的集合。
            </summary>
      <param name="attributes">
                类型的枚举 <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> 它包含的特性。
              </param>
      <returns>
              格式正确的 XML 字符串构造使用的特性。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.DenormalizeAuthenticationType(System.String)">
      <summary>
              返回与匹配的 SAML 身份验证方法为指定的规范化的值的 SAML11 身份验证方法标识符。
            </summary>
      <param name="normalizedAuthenticationType">
                已标准化的值。
                <see cref="T:System.IdentityModel.Tokens.AuthenticationMethods" /> 值之一。
              </param>
      <returns>
              SAML11 身份验证方法标识符 (URI) 指定的规范化的标识符相匹配。
               如果不找到任何匹配的 SAML11 身份验证方法，则 <paramref name="normalizedAuthenticationType" /> URI 将返回未更改。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              如果指定的标记已存在于令牌重放缓存，则将引发异常否则该令牌添加到缓存中。
            </summary>
      <param name="token">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> ，它表示 SAML 1.1 安全令牌 (该令牌的类型应为 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" />) 进行检查。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="token" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 属性为 <see langword="null" />。
                
                  - 或 -
                
                  <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.TokenReplayCache" /> 属性处理程序配置 (通过访问 <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 属性) 是 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="token" /> 不能强制转换为的一个实例 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" />。
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException">
                  与令牌相关联的断言的 ID 是 <see langword="null" /> 或为空。
                   ( <see cref="P:System.IdentityModel.Tokens.SamlSecurityToken.Assertion" /> 令牌的引用属性 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> 具有 <see cref="P:System.IdentityModel.Tokens.SamlAssertion.Id" /> 属性，引用 <see cref="T:System.IdentityModel.Tokens.SamlId" /> 与 <see cref="P:System.IdentityModel.Tokens.SamlId.Value" /> 属性都 <see langword="null" /> 或为空。)
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException">
                  中已存在该令牌 <see cref="T:System.IdentityModel.Tokens.TokenReplayCache" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.FindUpn(System.Security.Claims.ClaimsIdentity)">
      <summary>
              UPN 声明中指定的值开始查找 <see cref="T:System.Security.Claims.ClaimsIdentity" /> 对象用于将标识映射到 <see cref="T:System.Security.Claims.WindowsClaimsIdentity" /> 对象。
            </summary>
      <param name="claimsIdentity">
                包含所需的 UPN 声明的声明标识对象。
              </param>
      <returns>
              一个字符串，包含 UPN 声明找到的值。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.GetEncryptingCredentials(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>
              获取加密凭据的令牌。
               重写此方法以更改加密凭据的令牌。
            </summary>
      <param name="tokenDescriptor">
                检索加密凭据的作用域对象从某些作用域。
              </param>
      <returns>
              <see cref="T:System.IdentityModel.SecurityTokenService.EncryptingCredentials" /> 表示加密凭据的令牌。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="tokenDescriptor" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
                  加密令牌描述符从检索到凭据不对称。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.GetSigningCredentials(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>
              获取对断言进行签名的凭据。
            </summary>
      <param name="tokenDescriptor">
                令牌的描述符。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SigningCredentials" /> 表示断言进行签名的凭据。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="tokenDescriptor" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.GetTokenReplayCacheEntryExpirationTime(System.IdentityModel.Tokens.SamlSecurityToken)">
      <summary>
              返回在令牌重放缓存中应截止持有令牌的时间。
            </summary>
      <param name="token">
                要为其返回的过期时间标记。
              </param>
      <returns>
              一个 <see cref="T:System.DateTime" /> ，表示过期时间。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="token" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.GetTokenTypeIdentifiers">
      <summary>
              获取支持此处理程序的令牌类型标识符。
            </summary>
      <returns>
              包含令牌的字符串的数组类型支持此处理程序的标识符。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>
              从 XML 加载自定义配置。
            </summary>
      <param name="customConfigElements">
                <see cref="T:System.Xml.XmlNodeList" /> ，它指定 SAML 令牌身份验证要求。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="customConfigElements" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  中指定的配置 <paramref name="customConfigElements" /> 无效。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.NormalizeAuthenticationType(System.String)">
      <summary>
              返回与 SAML 1.1 身份验证方法标识符相匹配的规范化的值。
            </summary>
      <param name="saml11AuthenticationMethod">
                SAML 1.1 身份验证方法标识符 (URI) 进行规范化。
              </param>
      <returns>
              已标准化的值，这是其中之一的 <see cref="T:System.IdentityModel.Tokens.AuthenticationMethods" /> 值。
               如果没有匹配值存在， <paramref name="saml11AuthenticationMethod" /> 返回，不变。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ProcessAttributeStatement(System.IdentityModel.Tokens.SamlAttributeStatement,System.Security.Claims.ClaimsIdentity,System.String)">
      <summary>
              从 SAML 1.1 属性语句创建声明并将它们添加到指定的主题。
            </summary>
      <param name="samlStatement">
                <see cref="T:System.IdentityModel.Tokens.SamlAttributeStatement" /> 从其声明的创建。
              </param>
      <param name="subject">
                声明被添加到的主题。
              </param>
      <param name="issuer">
                颁发者。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="samlStatement" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="subject" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ProcessAuthenticationStatement(System.IdentityModel.Tokens.SamlAuthenticationStatement,System.Security.Claims.ClaimsIdentity,System.String)">
      <summary>
              从 SAML 1.1 验证语句创建声明并将它们添加到指定的主题。
            </summary>
      <param name="samlStatement">
                <see cref="T:System.IdentityModel.Tokens.SamlAuthenticationStatement" /> 从其声明的创建。
              </param>
      <param name="subject">
                声明被添加到的主题。
              </param>
      <param name="issuer">
                颁发者。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="samlStatement" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="subject" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ProcessAuthorizationDecisionStatement(System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement,System.Security.Claims.ClaimsIdentity,System.String)">
      <summary>
              从 SAML 1.1 授权决策语句创建声明并将它们添加到指定的主题。
            </summary>
      <param name="samlStatement">
                <see cref="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement" /> 从其声明的创建。
              </param>
      <param name="subject">
                声明被添加到的主题。
              </param>
      <param name="issuer">
                颁发者。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ProcessSamlSubject(System.IdentityModel.Tokens.SamlSubject,System.Security.Claims.ClaimsIdentity,System.String)">
      <summary>
              从 SAML 1.1 主题创建声明并将它们添加到指定的主题。
            </summary>
      <param name="samlSubject">
                <see cref="T:System.IdentityModel.Tokens.SamlSubject" /> 从其声明的创建。
              </param>
      <param name="subject">
                声明被添加到的主题。
              </param>
      <param name="issuer">
                颁发者。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="samlSubject" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ProcessStatement(System.Collections.Generic.IList{System.IdentityModel.Tokens.SamlStatement},System.Security.Claims.ClaimsIdentity,System.String)">
      <summary>
              从一组 SAML 1.1 语句创建声明并将它们添加到指定的主题。
            </summary>
      <param name="statements">
                从中创建声明的 SAML 语句。
              </param>
      <param name="subject">
                声明被添加到的主题。
              </param>
      <param name="issuer">
                颁发者。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="statements" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadAction(System.Xml.XmlReader)">
      <summary>
              读取 &lt; saml:Action &gt; 元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 位于要读取的元素。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SamlAction" /> ，表示所读取的操作元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadAdvice(System.Xml.XmlReader)">
      <summary>
              读取 &lt; saml:Advice &gt; 元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 位于要读取的元素。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SamlAdvice" /> ，表示所读取的建议元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadAssertion(System.Xml.XmlReader)">
      <summary>
              读取 &lt; saml:Assertion &gt; 元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 位于要读取的元素。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> 表示读取了 Assertion 元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadAttribute(System.Xml.XmlReader)">
      <summary>
              读取 &lt; saml:Attribute &gt; 元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 位于要读取的元素。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> 表示读取了 Assertion 元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadAttributeStatement(System.Xml.XmlReader)">
      <summary>
              读取了 &lt; saml:AttributeStatement &gt; 元素或指定的 saml:AttributeStatementType xsi: type 的 &lt; saml:Statement &gt; 元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 位于要读取的元素。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SamlAttributeStatement" /> ，表示所读取的元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadAttributeValue(System.Xml.XmlReader,System.IdentityModel.Tokens.SamlAttribute)">
      <summary>
              读取属性值。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 位于要读取的元素。
              </param>
      <param name="attribute">
                所读取的属性。
              </param>
      <returns>
              一个字符串，包含的属性值。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadAudienceRestrictionCondition(System.Xml.XmlReader)">
      <summary>
              从指定的 XML 读取器读取 &lt; saml:AudienceRestrictionCondition &gt; 元素。
            </summary>
      <param name="reader">
                XML 读取器位于 &lt; saml:AudienceRestrictionCondition &gt; 元素来读取。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition" /> ，表示所读取的元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadAuthenticationStatement(System.Xml.XmlReader)">
      <summary>
              读取 &lt; saml:AuthnStatement &gt; 元素或指定的 saml:AuthnStatementType xsi: type 的 &lt; saml:Statement &gt; 元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 位于要读取的元素。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SamlAuthenticationStatement" /> ，表示所读取的元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadAuthorityBinding(System.Xml.XmlReader)">
      <summary>
              读取 &lt; saml:AuthorityBinding &gt; 元素。
            </summary>
      <param name="reader">
                XML 读取器位于 &lt; saml:AuthorityBinding &gt; 元素
              </param>
      <returns>
              读取的 <see cref="T:System.IdentityModel.Tokens.SamlAuthorityBinding" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  <paramref name="reader" /> 未置于 saml:AuthorityBinding 元素或包含一个无法识别的子元素或不是有效的子元素。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadAuthorizationDecisionStatement(System.Xml.XmlReader)">
      <summary>
              读取 &lt; saml:AuthzDecisionStatement &gt; 元素或指定的 saml:AuthzDecisionStatementType xsi: type 的 &lt; saml:Statement &gt; 元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 位于要读取的元素。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SamlAuthorizationStatement" /> ，表示所读取的元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadCondition(System.Xml.XmlReader)">
      <summary>
              从指定的读取器读取 saml:AudienceRestrictionCondition 或 saml:DoNotCacheCondition
            </summary>
      <param name="reader">
                从其中读取元素读取器。
              </param>
      <returns>
              <see cref="T:System.IdentityModel.Tokens.SamlCondition" /> 从 XML 中读取。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  <paramref name="reader" /> 将位于未知元素。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadConditions(System.Xml.XmlReader)">
      <summary>
              读取 &lt; saml:Conditions &gt; 元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 位于要读取的元素。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SamlConditions" /> ，它表示读取条件元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  <paramref name="reader" /> 未定位在 Conditions 元素。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadDoNotCacheCondition(System.Xml.XmlReader)">
      <summary>
              从指定的 XML 读取器读取 saml:DoNotCacheCondition 元素。
            </summary>
      <param name="reader">
                XML 读取器定位在 saml:DoNotCacheCondition 元素
              </param>
      <returns>
              读取的 <see cref="T:System.IdentityModel.Tokens.SamlDoNotCacheCondition" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  <paramref name="reader" /> 未置于 saml:DoNotCacheCondition 元素。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadEvidence(System.Xml.XmlReader)">
      <summary>
              读取 &lt; saml:Evidence &gt; 元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 位于要读取的元素。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SamlEvidence" /> ，它表示读取证据元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadSigningKeyInfo(System.Xml.XmlReader,System.IdentityModel.Tokens.SamlAssertion)">
      <summary>
              反序列化签名 KeyInfo 的 SAML。
            </summary>
      <param name="reader">
                可以位于 ds:KeyInfo 元素 XmlReader。
              </param>
      <param name="assertion">
                具有签名检查断言。
              </param>
      <returns>
              <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> ，表示的键要用来检查签名。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadStatement(System.Xml.XmlReader)">
      <summary>
              读取 &lt; saml:Statement &gt; 元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 位于要读取的元素。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SamlStatement" /> 表示已读取的语句元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadSubject(System.Xml.XmlReader)">
      <summary>
              读取 &lt; saml:Subject &gt; 元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 位于要读取的元素。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SamlSubject" /> ，表示已读取的主题元素。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadSubjectKeyInfo(System.Xml.XmlReader)">
      <summary>
              反序列化 SAML 主题 &lt; ds:KeyInfo &gt; 元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 位于 &lt; ds:KeyInfo &gt; 元素。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> 表示 &lt; ds:KeyInfo &gt; 元素的内容。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
      <summary>
              从指定的流中读取 SAML 1.1 令牌。
            </summary>
      <param name="reader">
                一个 <see cref="T:System.Xml.XmlReader" /> 流式传送到 SAML 1.1 安全令牌。
              </param>
      <returns>
              <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 的一个实例。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 属性为 <see langword="null" />。
                
                  - 或 - 
                
                  <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerTokenResolver" /> 属性所指定的配置 <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 属性是 <see langword="null" />。
                
                  - 或 - 
                
                  <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.ServiceTokenResolver" /> 属性所指定的配置 <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 属性是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ResolveIssuerToken(System.IdentityModel.Tokens.SamlAssertion,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>
              解析到的签名密钥标识符 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
            </summary>
      <param name="assertion">
                <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> 要为其颁发者令牌进行解析。
              </param>
      <param name="issuerResolver">
                当前 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> 与此处理程序相关联。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> 表示解析的令牌。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="assertion" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
                  该处理程序无法解析令牌。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ResolveSubjectKeyIdentifier(System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>
              解析 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> saml:Subject 元素中指定。
            </summary>
      <param name="subjectKeyIdentifier">
                要将解析为密钥的密钥标识符。
              </param>
      <returns>
              从密钥标识符解析键。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.SetDelegateFromAttribute(System.IdentityModel.Tokens.SamlAttribute,System.Security.Claims.ClaimsIdentity,System.String)">
      <summary>
              当一种特殊类型的调用此方法，获取 <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> 检测到。
              <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> 中包装传递 <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> ，其中包含属性值的集合 (在 <see cref="P:System.IdentityModel.Tokens.SamlAttribute.Values" /> 属性)，其中每个将会映射到一个声明。
               在将返回的所有声明 <see cref="T:System.Security.Claims.ClaimsIdentity" /> 与指定的颁发者。
            </summary>
      <param name="attribute">
                要使用的 <see cref="T:System.IdentityModel.Tokens.SamlAttribute" />。
              </param>
      <param name="subject">
                <see cref="T:System.Security.Claims.ClaimsIdentity" /> 此令牌的主题。
              </param>
      <param name="issuer">
                声明颁发者。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> 不包含任何有效的属性的值。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.TryResolveIssuerToken(System.IdentityModel.Tokens.SamlAssertion,System.IdentityModel.Selectors.SecurityTokenResolver,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>
              将签名的密钥标识符解析为 SecurityToken。
            </summary>
      <param name="assertion">
                <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> 要为其颁发者令牌进行解析。
              </param>
      <param name="issuerResolver">
                当前 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> 与此处理程序相关联。
              </param>
      <param name="token">
                此方法返回时，如果令牌已成功解析包含解析的安全令牌。
              </param>
      <returns>
              <see langword="true" /> 如果该令牌将被解析。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ValidateConditions(System.IdentityModel.Tokens.SamlConditions,System.Boolean)">
      <summary>
              验证指定 <see cref="T:System.IdentityModel.Tokens.SamlConditions" /> 对象。
            </summary>
      <param name="conditions">
                要验证的 SAML 1.1 条件。
              </param>
      <param name="enforceAudienceRestriction">
                <see langword="true" /> 若要检查的受众限制条件。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              验证令牌数据并返回其声明。
            </summary>
      <param name="token">
                要验证的 SAML 1.1 令牌。
              </param>
      <returns>
              在令牌中包含的标识。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteAction(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlAction)">
      <summary>
              写入 &lt; saml:Action &gt; 元素。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用来写入数据。
              </param>
      <param name="action">
                要写入的数据。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="action" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteAdvice(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlAdvice)">
      <summary>
              写入 &lt; saml:Advice &gt; 元素。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用来写入数据。
              </param>
      <param name="advice">
                要写入的数据。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="advice" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteAssertion(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlAssertion)">
      <summary>
              将指定的 SAML 断言指定的 XML 编写器序列化。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用于序列化。
              </param>
      <param name="assertion">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> ，它表示要序列化的断言。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="assertion" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  指定的断言 <paramref name="assertion" /> 同时具有 <see cref="T:System.IdentityModel.SecurityTokenService.EncryptingCredentials" /> 和 <see cref="T:System.IdentityModel.Tokens.SamlSecurityTokenHandler.ReceivedEncryptingCredentials" /> 属性设置为 <see langword="null" />。
                
                  - 或 -
                
                  有没有语句和由指定的断言中没有主题 <paramref name="data" />。
                   (同时 <see cref="P:System.IdentityModel.Tokens.SamlAssertion.Subject" /> 属性和 <see cref="P:System.IdentityModel.Tokens.SamlAssertion.Statements" /> 属性 <see langword="null" />。)
                   如果断言不包含语句，它必须包含一个使用者。
                
                  - 或 -
                
                  指定的断言 <paramref name="assertion" /> 包含的身份验证 （attribute) 或授权决策语句和无主题 — 这些语句需要一个使用者。
                   ( <see cref="P:System.IdentityModel.Tokens.SamlAssertion.Statements" /> 属性包含的声明类型的 <see cref="T:System.IdentityModel.Tokens.SamlAttributeStatement" />, ，<see cref="T:System.IdentityModel.Tokens.SamlAuthenticationStatement" />, ，或 <see cref="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement" /> 和 <see cref="P:System.IdentityModel.Tokens.SamlAssertion.Subject" /> 属性是 <see langword="null" />)。
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  令牌加密凭据没有指定的对称密钥。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteAttribute(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlAttribute)">
      <summary>
              写入 &lt; saml:Attribute &gt; 元素。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用来写入数据。
              </param>
      <param name="attribute">
                要写入的数据。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="attribute" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteAttributeStatement(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlAttributeStatement)">
      <summary>
              写入 &lt; saml:AttributeStatement &gt; 元素。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用来写入数据。
              </param>
      <param name="statement">
                要写入的数据。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="statement" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteAttributeValue(System.Xml.XmlWriter,System.String,System.IdentityModel.Tokens.SamlAttribute)">
      <summary>
              写入 saml:Attribute 值。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用其进行写。
              </param>
      <param name="value">
                一个字符串，包含要写入的属性值。
              </param>
      <param name="attribute">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlAttribute" /> ，表示正在写入其值的特性。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteAudienceRestrictionCondition(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlAudienceRestrictionCondition)">
      <summary>
              写入 &lt; saml:AudienceRestriction &gt; 元素。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用来写入数据。
              </param>
      <param name="condition">
                要写入的数据。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="data" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.IdentityModel.Tokens.SamlConditions.Conditions" /> 属性 <see cref="T:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition" /> 中指定 <paramref name="condition" /> 是 <see langword="null" /> 或为空集合。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteAuthenticationStatement(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlAuthenticationStatement)">
      <summary>
              写入 &lt; saml:AuthnStatement &gt; 元素。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用来写入数据。
              </param>
      <param name="statement">
                要写入的数据。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="statement" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteAuthorityBinding(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlAuthorityBinding)">
      <summary>
              写入 &lt; saml:AuthorityBinding &gt; 元素。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用来写入数据。
              </param>
      <param name="authorityBinding">
                要写入的数据。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="authorityBinding" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteAuthorizationDecisionStatement(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement)">
      <summary>
              写入 &lt; saml:AuthzDecisionStatement &gt; 元素。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用来写入数据。
              </param>
      <param name="statement">
                要写入的数据。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="statement" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteCondition(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlCondition)">
      <summary>
              将序列化为指定 <see cref="T:System.IdentityModel.Tokens.SamlCondition" /> 对象。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用来写入数据。
              </param>
      <param name="condition">
                要写入的数据。
                 默认情况下，仅 <see cref="T:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition" /> 和 <see cref="T:System.IdentityModel.Tokens.SamlDoNotCacheCondition" /> 支持。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="condition" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
                  不支持 <paramref name="condition" />。
                   。
                   默认情况下，仅 <see cref="T:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition" /> 和 <see cref="T:System.IdentityModel.Tokens.SamlDoNotCacheCondition" /> 支持。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteConditions(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlConditions)">
      <summary>
              写入 &lt; saml:Conditions &gt; 元素。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用来写入数据。
              </param>
      <param name="conditions">
                要写入的数据。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="conditions" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteDoNotCacheCondition(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlDoNotCacheCondition)">
      <summary>
              写入 &lt; saml:DoNotCacheCondition &gt; 元素。
            </summary>
      <param name="writer">
                用来将数据写入 XML 编写器。
              </param>
      <param name="condition">
                要写入的数据。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="condition" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteEvidence(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlEvidence)">
      <summary>
              写入 &lt; saml:Evidence &gt; 元素。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用来写入数据。
              </param>
      <param name="evidence">
                要写入的数据。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="evidence" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteSigningKeyInfo(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>
              写入使用指定的 XML 编写器的签名 &lt; ds:KeyInfo &gt; 元素。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用来序列化密钥标识符。
              </param>
      <param name="signingKeyIdentifier">
                <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> ，它表示要编写的密钥标识符。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="signingKeyIdentifier" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  该处理程序无法将指定的密钥标识符序列化为 <paramref name="signingKeyIdentifier" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteStatement(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlStatement)">
      <summary>
              写入 SamlStatement。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用来写入数据。
              </param>
      <param name="statement">
                要写入的数据。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="statement" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteSubject(System.Xml.XmlWriter,System.IdentityModel.Tokens.SamlSubject)">
      <summary>
              写入 &lt; saml:Subject &gt; 元素。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用来写入数据。
              </param>
      <param name="subject">
                要写入的数据。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="subject" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteSubjectKeyInfo(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>
              将序列化为指定的 XML 编写器的主题 &lt; ds:KeyInfo &gt; 元素。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用来序列化密钥标识符。
              </param>
      <param name="subjectSki">
                <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> ，它表示要编写的密钥标识符。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="subjectSki" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              将 Saml 令牌写入指定的 XML 编写器。
            </summary>
      <param name="writer">
                <see cref="T:System.Xml.XmlWriter" /> 用来写入数据。
              </param>
      <param name="token">
                要写入的标记。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="data" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="token" /> 不是 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 对象。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenRequirement.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.SamlSecurityTokenRequirement" /> 类为默认值。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenRequirement.#ctor(System.Xml.XmlElement)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.SamlSecurityTokenRequirement" /> 从指定的 XML 类。
            </summary>
      <param name="element">
                为要加载该实例的 XML 元素。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenRequirement.ShouldEnforceAudienceRestriction(System.IdentityModel.Selectors.AudienceUriMode,System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              返回一个值，该值指示是否对于指定的令牌基于此项的设置，需要访问群体强制检查 <see cref="T:System.IdentityModel.Tokens.SamlSecurityTokenRequirement" />。
            </summary>
      <param name="audienceUriMode">
                定义访问群体要求的枚举值之一。
              </param>
      <param name="token">
                要测试受众实施的安全令牌。
              </param>
      <returns>
              <see langword="true" /> 如果应该应用访问群体强制;否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="token" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSecurityTokenRequirement.ValidateAudienceRestriction(System.Collections.Generic.IList{System.Uri},System.Collections.Generic.IList{System.Uri})">
      <summary>
              检查与 AllowedAudienceUri 列表指定的受众 Uri 列表。
            </summary>
      <param name="allowedAudienceUris">
                AudienceUris 的集合。
              </param>
      <param name="tokenAudiences">
                受众 Uri 令牌应用到的集合。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="allowedAudienceUris" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="tokenAudiences" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.AudienceUriValidationFailedException">
                  <paramref name="tokenAudiences" /> 为空集合。
                
                  - 或 -
                
                  <paramref name="allowedAudienceUris" /> 为空集合。
                
                  - 或 -
                
                  验证将失败。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSerializer.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSerializer.LoadAdvice(System.Xml.XmlDictionaryReader,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>
              使用指定 XML 读取器读取 SAML 断言的<see langword=" &lt;saml:Advice&gt;" /> 元素中 SAML 授权机构所提供的附加信息。
            </summary>
      <param name="reader">
                一个 <see cref="T:System.Xml.XmlDictionaryReader" />，它读取 SAML 授权机构所提供的附加信息。
              </param>
      <param name="keyInfoSerializer">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 <see langword="KeyInfo" /> 子句。
              </param>
      <param name="outOfBandTokenResolver">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SamlAdvice" />，包含 SAML 断言的<see langword=" &lt;saml:Advice&gt;" /> 元素中 SAML 授权机构所提供的附加信息。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSerializer.LoadAssertion(System.Xml.XmlDictionaryReader,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>
              从指定的 XML 读取器读取 SAML 断言。
            </summary>
      <param name="reader">
                一个读取 SAML 断言的 <see cref="T:System.Xml.XmlDictionaryReader" />。
              </param>
      <param name="keyInfoSerializer">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 <see langword="KeyInfo" /> 子句。
              </param>
      <param name="outOfBandTokenResolver">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。
              </param>
      <returns>
              一个表示 SAML 断言的 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSerializer.LoadAttribute(System.Xml.XmlDictionaryReader,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>
              使用指定的 XML 阅读器读取 SAML 安全令牌主题的属性。
            </summary>
      <param name="reader">
                一个读取属性的 <see cref="T:System.Xml.XmlDictionaryReader" />。
              </param>
      <param name="keyInfoSerializer">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 <see langword="KeyInfo" /> 子句。
              </param>
      <param name="outOfBandTokenResolver">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SamlAttribute" />，它表示一个声明，而该声明是 SAML 安全令牌主题的一个属性。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSerializer.LoadCondition(System.Xml.XmlDictionaryReader,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>
              使用指定的 XML 读取器读取评估 SAML 断言有效性时必须考虑的条件。
            </summary>
      <param name="reader">
                一个读取 SAML 条件的 <see cref="T:System.Xml.XmlDictionaryReader" />。
              </param>
      <param name="keyInfoSerializer">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 <see langword="KeyInfo" /> 子句。
              </param>
      <param name="outOfBandTokenResolver">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SamlCondition" />，它指定评估 SAML 断言有效性时必须考虑的条件。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSerializer.LoadConditions(System.Xml.XmlDictionaryReader,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>
              使用指定的 XML 读取器读取评估 SAML 断言有效性时必须考虑的条件集。
            </summary>
      <param name="reader">
                一个读取 SAML 条件的 <see cref="T:System.Xml.XmlDictionaryReader" />。
              </param>
      <param name="keyInfoSerializer">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 <see langword="KeyInfo" /> 子句。
              </param>
      <param name="outOfBandTokenResolver">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SamlConditions" />，它指定评估 SAML 断言有效性时必须考虑的条件集。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSerializer.LoadStatement(System.Xml.XmlDictionaryReader,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>
              使用指定的 XML 读取器读取 SAML 语句。
            </summary>
      <param name="reader">
                一个读取 SAML 语句的 <see cref="T:System.Xml.XmlDictionaryReader" />。
              </param>
      <param name="keyInfoSerializer">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 <see langword="KeyInfo" /> 子句。
              </param>
      <param name="outOfBandTokenResolver">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。
              </param>
      <returns>
              一个表示 SAML 语句的 <see cref="T:System.IdentityModel.Tokens.SamlStatement" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSerializer.PopulateDictionary(System.Xml.IXmlDictionary)">
      <summary>
              将此序列化程序能识别的 XML 元素和属性默认集替换为指定的元素和属性字典。
            </summary>
      <param name="dictionary">
                一个 <see cref="T:System.Xml.IXmlDictionary" />，包含 XML 元素和属性集。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSerializer.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>
              从指定的 XML 读取器读取 SAML 安全令牌。
            </summary>
      <param name="reader">
                一个 <see cref="T:System.Xml.XmlDictionaryReader" />，它读取 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌。
              </param>
      <param name="keyInfoSerializer">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 <see langword="KeyInfo" /> 子句。
              </param>
      <param name="outOfBandTokenResolver">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />
                </exception>
      <exception cref="T:System.Security.SecurityException">
                  <paramref name="reader" /> 引用不包含数字签名的 XML 元素。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSerializer.WriteToken(System.IdentityModel.Tokens.SamlSecurityToken,System.Xml.XmlWriter,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>
              将指定的 SAML 安全令牌写入指定的 XML 序列化程序。
            </summary>
      <param name="token">
                要写入的 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" />。
              </param>
      <param name="writer">
                一个 <see cref="T:System.Xml.XmlDictionaryWriter" />，它写入 SAML 授权语句。
              </param>
      <param name="keyInfoSerializer">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它能够写入 <see langword="KeyInfo" /> 子句。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />
                
                  - 或 -
                
                  <paramref name="token" /> 为 <see langword="null" />
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlStatement.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.SamlStatement" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlStatement.CreatePolicy(System.IdentityModel.Claims.ClaimSet,System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator)">
      <summary>
              为 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌创建授权策略。
            </summary>
      <param name="issuer">
                一个 <see cref="T:System.IdentityModel.Claims.ClaimSet" />，表示 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的颁发者。
              </param>
      <param name="samlAuthenticator">
                一个用来对 <see cref="T:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator" /> 安全令牌进行身份验证的 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" />。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" />，表示 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的授权策略。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlStatement.MakeReadOnly">
      <summary>
              将此实例设置为只读的。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlStatement.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>
              在派生类中重写时，从指定的 XML 读取器读取 SAML 语句。
            </summary>
      <param name="reader">
                读取 SAML 语句的 <see cref="T:System.Xml.XmlDictionaryReader" />。
              </param>
      <param name="samlSerializer">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够读取 SAML 规范中定义的 SAML 语句中的 XML 元素。
              </param>
      <param name="keyInfoSerializer">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 <see langword="KeyInfo" /> 子句。
              </param>
      <param name="outOfBandTokenResolver">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlStatement.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>
              将 SAML 语句写入指定的 XML 序列化程序。
            </summary>
      <param name="writer">
                一个用于写入 SAML 语句的 <see cref="T:System.Xml.XmlDictionaryWriter" />。
              </param>
      <param name="samlSerializer">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够写入 SAML 断言中的 XML 元素。
              </param>
      <param name="keyInfoSerializer">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它能够写入 <see langword="KeyInfo" /> 子句。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubject.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.SamlSubject" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubject.#ctor(System.String,System.String,System.String)">
      <summary>
              使用指定的名称、该名称所在的域以及该名称的格式初始化 <see cref="T:System.IdentityModel.Tokens.SamlSubject" /> 类的新实例。
            </summary>
      <param name="nameFormat">
                一个 URI 引用，表示 <paramref name="name" /> 参数所使用的格式。
                 设置 <see cref="P:System.IdentityModel.Tokens.SamlSubject.NameFormat" /> 属性。
              </param>
      <param name="nameQualifier">
                <paramref name="name" /> 参数所在的域。
                 设置 <see cref="P:System.IdentityModel.Tokens.SamlSubject.NameQualifier" /> 属性。
              </param>
      <param name="name">
                主题名称。
                 设置 <see cref="P:System.IdentityModel.Tokens.SamlSubject.Name" /> 属性。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubject.#ctor(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>
              使用指定的名称、该名称所在的域、该名称的格式、身份验证协议、附加身份验证信息和密钥标识符初始化 <see cref="T:System.IdentityModel.Tokens.SamlSubject" /> 类的新实例。
            </summary>
      <param name="nameFormat">
                一个 URI 引用，表示 <paramref name="name" /> 参数所使用的格式。
                 设置 <see cref="P:System.IdentityModel.Tokens.SamlSubject.NameFormat" /> 属性。
              </param>
      <param name="nameQualifier">
                <paramref name="name" /> 参数所在的域。
                 设置 <see cref="P:System.IdentityModel.Tokens.SamlSubject.NameQualifier" /> 属性。
              </param>
      <param name="name">
                主题名称。
                 设置 <see cref="P:System.IdentityModel.Tokens.SamlSubject.Name" /> 属性。
              </param>
      <param name="confirmations">
                一个类型为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.String" />，包含多个 URI 引用，这些引用标识用来验证主题身份的协议。
                 设置 <see cref="P:System.IdentityModel.Tokens.SamlSubject.ConfirmationMethods" /> 属性。
              </param>
      <param name="confirmationData">
                可供身份验证协议使用的附加身份验证信息。
                 设置 <see cref="P:System.IdentityModel.Tokens.SamlSubject.SubjectConfirmationData" /> 属性。
              </param>
      <param name="securityKeyIdentifier">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />，提供对 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的主题所持有的加密密钥的访问。
                 设置 <see cref="P:System.IdentityModel.Tokens.SamlSubject.KeyIdentifier" /> 属性。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="name" /> 为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="confirmations" /> 包含一个 <see langword="null" /> 或 <see cref="F:System.String.Empty" /> 成员。
                
                  - 或 -
                
                  <paramref name="confirmations" /> 不包含任何成员，并且 <paramref name="name" /> 为 <see langword="null" /> 或为 <see cref="F:System.String.Empty" />。
                
                  - 或 -
                
                  <paramref name="confirmations" /> 不包含任何成员，并且 <paramref name="confirmationData" /> 或 <paramref name="securityKeyIdentifier" /> 不为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubject.ExtractClaims">
      <summary>
              使用此类的属性获取一个声明集。
            </summary>
      <returns>
              一个类型为 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.IdentityModel.Claims.Claim" />，包含此 <see cref="T:System.IdentityModel.Tokens.SamlSubject" /> 实例所表示的声明集。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubject.ExtractSubjectKeyClaimSet(System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator)">
      <summary>
              使用此类的属性和指定的 SAML 安全令牌验证器获取一个声明集。
            </summary>
      <param name="samlAuthenticator">
                一个 <see cref="T:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator" />，它对 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌中对应于 <see langword="&lt;saml:Subject&gt;" /> 元素的部分进行验证。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Claims.ClaimSet" />，包含此 <see cref="T:System.IdentityModel.Tokens.SamlSubject" /> 实例所表示的声明集。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="samlAuthenticator" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubject.MakeReadOnly">
      <summary>
              将此实例设置为只读的。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubject.ReadXml(System.Xml.XmlDictionaryReader,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>
              从指定的 XML 读取器读取 <see langword="&lt;saml:Subject&gt;" /> 元素。
            </summary>
      <param name="reader">
                一个用于读取 <see cref="T:System.Xml.XmlDictionaryReader" /> 元素的 <see langword="&lt;saml:Subject&gt;" />。
              </param>
      <param name="samlSerializer">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够读取 SAML 断言中的 XML 元素。
              </param>
      <param name="keyInfoSerializer">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它读取数字签名的 <see langword="KeyInfo" /> 子句。
              </param>
      <param name="outOfBandTokenResolver">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />，它确定是哪个安全令牌创建了数字签名。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="samlSerializer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
                  <paramref name="reader" /> 引用符合以下任一条件的 XML 元素：
                
                  包含没有值的 <see langword="&lt;saml:NameIdentifier&gt;" /> 元素。
                
                  - 或 -
                
                  包含没有值的 <see langword="&lt;saml:ConfirmationMehtod&gt;" /> 元素。
                
                  - 或 -
                
                  包含一个 <see langword="&lt;saml:SubjectConfirmation&gt;" /> 元素，但该元素连一个 <see langword="&lt;saml:ConfirmationMethod&gt;" /> 子元素都没有。
                
                  - 或 -
                
                  连一个 <see langword="&lt;saml:ConfirmationMethod&gt;" /> 或 <see langword="&lt;saml:NameIdentifier&gt;" /> 元素都不包含。
                </exception>
      <exception cref="T:System.Security.SecurityException">
                  <paramref name="reader" /> 引用一个 XML 元素，该元素包含的某个 <see langword="&lt;ds:KeyInfo&gt;" /> 元素没有可检索的密钥。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubject.WriteXml(System.Xml.XmlDictionaryWriter,System.IdentityModel.Tokens.SamlSerializer,System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>
              将 <see langword="&lt;saml:Subject&gt;" /> 元素写入指定的 XML 序列化程序。
            </summary>
      <param name="writer">
                一个用于写入 <see cref="T:System.Xml.XmlDictionaryWriter" /> 元素的 <see langword="&lt;saml:Subject&gt;" />。
              </param>
      <param name="samlSerializer">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlSerializer" />，它能够写入 SAML 断言中的 XML 元素。
              </param>
      <param name="keyInfoSerializer">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" />，它能够写入 <see langword="KeyInfo" /> 子句。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubjectStatement.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.SamlSubjectStatement" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubjectStatement.#ctor(System.IdentityModel.Tokens.SamlSubject)">
      <summary>
              使用指定的主题初始化 <see cref="T:System.IdentityModel.Tokens.SamlSubjectStatement" /> 类的新实例。
            </summary>
      <param name="samlSubject">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlSubject" />，它标识 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的主题。
                 设置 <see cref="P:System.IdentityModel.Tokens.SamlSubjectStatement.SamlSubject" /> 属性。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubjectStatement.AddClaimsToList(System.Collections.Generic.IList{System.IdentityModel.Claims.Claim})">
      <summary>
              根据此实例的属性将声明添加到指定的声明集合。
            </summary>
      <param name="claims">
                一个类型为 <see cref="T:System.Collections.Generic.IList`1" /> 的 <see cref="T:System.IdentityModel.Claims.Claim" />，包含添加操作的目标声明集。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="claims" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubjectStatement.CreatePolicy(System.IdentityModel.Claims.ClaimSet,System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator)">
      <summary>
              为 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌创建授权策略。
            </summary>
      <param name="issuer">
                一个 <see cref="T:System.IdentityModel.Claims.ClaimSet" />，表示 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的颁发者。
              </param>
      <param name="samlAuthenticator">
                一个用来对 <see cref="T:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator" /> 安全令牌进行身份验证的 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" />。
              </param>
      <returns>
              一个 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" />，表示 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的授权策略。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubjectStatement.MakeReadOnly">
      <summary>
              将此实例设置为只读的。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SamlSubjectStatement.SetSubject(System.IdentityModel.Tokens.SamlSubject)">
      <summary>
              设置 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的主题。
            </summary>
      <param name="samlSubject">
                一个 <see cref="T:System.IdentityModel.Tokens.SamlSubject" />，它标识 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的主题。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="samlSubject" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKey.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKey.DecryptKey(System.String,System.Byte[])">
      <summary>
              在派生类中重写时，解密指定的加密密钥。
            </summary>
      <param name="algorithm">
                用于对密钥进行加密的加密算法。
              </param>
      <param name="keyData">
                包含加密密钥的 <see cref="T:System.Byte" /> 数组。
              </param>
      <returns>
              包含解密密钥的 <see cref="T:System.Byte" /> 数组。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKey.EncryptKey(System.String,System.Byte[])">
      <summary>
              在派生类中重写时，加密指定的密钥。
            </summary>
      <param name="algorithm">
                用于对密钥进行加密的加密算法。
              </param>
      <param name="keyData">
                包含密钥的 <see cref="T:System.Byte" /> 数组。
              </param>
      <returns>
              包含加密密钥的 <see cref="T:System.Byte" /> 数组。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKey.IsAsymmetricAlgorithm(System.String)">
      <summary>
              在派生类中重写时，获取一个值，该值指示指定的算法是否使用非对称密钥。
            </summary>
      <param name="algorithm">
                加密算法。
              </param>
      <returns>
              如果指定的算法使用非对称密钥，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKey.IsSupportedAlgorithm(System.String)">
      <summary>
              在派生类中重写时，获取一个指示此类是否支持指定算法的值。
            </summary>
      <param name="algorithm">
                加密算法。
              </param>
      <returns>
              如果此类支持指定的算法，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKey.IsSymmetricAlgorithm(System.String)">
      <summary>
              在派生类中重写时，获取一个指示指定的算法是否使用对称密钥的值。
            </summary>
      <param name="algorithm">
                加密算法。
              </param>
      <returns>
              如果指定的算法使用对称密钥，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyElement.#ctor(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.SecurityKeyElement" /> 类从指定的密钥标识符。
            </summary>
      <param name="securityKeyIdentifier">
                一个表示密钥标识符 <see cref="T:System.IdentityModel.Tokens.SecurityKey" />。
              </param>
      <param name="securityTokenResolver">
                令牌解析程序可被解析为 <see cref="T:System.IdentityModel.Tokens.SecurityKey" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="securityKeyIdentifier" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyElement.#ctor(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.SecurityKeyElement" /> 类从指定的密钥标识符子句。
            </summary>
      <param name="securityKeyIdentifierClause">
                表示一个密钥标识符子句 <see cref="T:System.IdentityModel.Tokens.SecurityKey" />。
              </param>
      <param name="securityTokenResolver">
                令牌解析程序可被解析为 <see cref="T:System.IdentityModel.Tokens.SecurityKey" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="securityKeyIdentifierClause" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyElement.DecryptKey(System.String,System.Byte[])">
      <summary>
              通过使用指定的算法解密指定的密钥。
            </summary>
      <param name="algorithm">
                要使用密钥进行解密的算法。
              </param>
      <param name="keyData">
                一个数组，包含加密的密钥。
              </param>
      <returns>
              一个数组，包含解密的密钥。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyElement.EncryptKey(System.String,System.Byte[])">
      <summary>
              通过使用指定的算法加密指定的密钥。
            </summary>
      <param name="algorithm">
                要使用密钥进行解密的算法。
              </param>
      <param name="keyData">
                一个数组，包含要加密的密钥。
              </param>
      <returns>
              一个数组，包含加密的密钥。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyElement.IsAsymmetricAlgorithm(System.String)">
      <summary>
              返回一个值，该值指示指定的算法是不对称。
            </summary>
      <param name="algorithm">
                要检查的算法。
              </param>
      <returns>
              <see langword="true" /> 如果该算法将处理由运行时作为非对称;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyElement.IsSupportedAlgorithm(System.String)">
      <summary>
              返回一个值，该值指示该项是否支持指定的算法。
            </summary>
      <param name="algorithm">
                要检查的算法。
              </param>
      <returns>
              <see langword="true" /> 如果该算法支持的此项;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyElement.IsSymmetricAlgorithm(System.String)">
      <summary>
              返回一个值，该值指示指定的算法是否对称。
            </summary>
      <param name="algorithm">
                要检查的算法。
              </param>
      <returns>
              <see langword="true" /> 如果该算法将处理由对称; 运行时否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifier.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifier.#ctor(System.IdentityModel.Tokens.SecurityKeyIdentifierClause[])">
      <summary>
              使用指定的密钥标识符子句初始化 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> 类的新实例。
            </summary>
      <param name="clauses">
                一个包含密钥标识符子句的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> 数组。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="clauses" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifier.Add(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              在列表末尾添加密钥标识符子句。
            </summary>
      <param name="clause">
                一个要添加到列表末尾的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="clause" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifier.IsReadOnly" /> 属性的值为 <see langword="true" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifier.CreateKey">
      <summary>
              为密钥标识符子句之一创建密钥。
            </summary>
      <returns>
              一个表示已创建的密钥的 <see cref="T:System.IdentityModel.Tokens.SecurityKey" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  无法为任何密钥标识符子句创建密钥。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifier.Find``1">
      <summary>
              搜索指定类型的密钥标识符子句，并返回整个集合中的第一个匹配项。
            </summary>
      <typeparam name="TClause">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，表示要在集合中搜索的密钥标识符子句的类型。
              </typeparam>
      <returns>
              集合中第一个具有 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> 参数中指定的类型的 <paramref name="TClause" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="TClause" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  集合不包含具有 <paramref name="TClause" /> 参数中指定的类型的密钥标识符子句。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifier.GetEnumerator">
      <summary>
              返回一个枚举数，它循环访问密钥标识符子句集合。
            </summary>
      <returns>
              集合的一个 <see cref="T:System.Collections.Generic.List`1.Enumerator" /> 类型 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifier.MakeReadOnly">
      <summary>
              将此实例设置为只读的。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifier.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              返回一个枚举数，它循环访问密钥标识符子句集合。
            </summary>
      <returns>
              一个可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifier.ToString">
      <summary>
              返回当前对象。
            </summary>
      <returns>
              当前对象。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifier.TryFind``1(``0@)">
      <summary>
              搜索指定类型的密钥标识符子句，并返回一个值，指示是否可以找到该类型的子句。
               如果找到一个类型，则在 <see langword="out" /> 参数中返回它。
            </summary>
      <param name="clause">
                当此方法返回时，包含一个具有在 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> 参数中指定的类型的 <paramref name="TClause" />，但前提是可以在集合中找到该类型的子句。
                 此参数未经初始化即被传递。
              </param>
      <typeparam name="TClause">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，表示要在集合中搜索的密钥标识符子句的类型。
              </typeparam>
      <returns>
              如果集合中存在具有 <see langword="true" /> 参数中指定的类型的密钥标识符子句，则为 <paramref name="TClause" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.#ctor(System.String)">
      <summary>
              使用指定的密钥标识符子句类型初始化 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> 类的新实例。
            </summary>
      <param name="clauseType">
                密钥标识符子句类型。
                 设置 <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.ClauseType" /> 属性的值。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.#ctor(System.String,System.Byte[],System.Int32)">
      <summary>
              使用指定的密钥标识符子句类型、Nonce 和派生密钥长度来初始化 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> 类的新实例。
            </summary>
      <param name="clauseType">
                密钥标识符子句类型。
                 设置 <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.ClauseType" /> 属性的值。
              </param>
      <param name="nonce">
                一个 <see cref="T:System.Byte" /> 数组，包含用于创建派生密钥的 Nonce。
                 设置 <see cref="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.GetDerivationNonce" /> 方法所返回的值。
              </param>
      <param name="length">
                派生密钥的大小。
                 设置 <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.DerivationLength" /> 属性的值。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.CreateKey">
      <summary>
              基于传入构造函数的参数创建密钥。
            </summary>
      <returns>
              一个包含已创建的密钥的 <see cref="T:System.IdentityModel.Tokens.SecurityKey" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.GetDerivationNonce">
      <summary>
              获取用于生成派生密钥的 Nonce。
            </summary>
      <returns>
              一个 <see cref="T:System.Byte" /> 数组，包含用于生成派生密钥的 Nonce。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              返回一个值，该值指示此实例的密钥标识符是否等效于指定的密钥标识符子句。
            </summary>
      <param name="keyIdentifierClause">
                要进行比较的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。
              </param>
      <returns>
              如果 <see langword="true" /> 是与当前实例相同的实例，则为 <paramref name="keyIdentifierClause" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="keyIdentifierClause" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClauseSerializer.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClauseSerializer" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClauseSerializer.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>
              当在派生类中重写，则返回一个值，指示作为密钥标识符子句由处理程序是否可以读取指定的读取器所在的元素。
            </summary>
      <param name="reader">
                密钥标识符子句的开始元素处 XML 读取器。
              </param>
      <returns>
              <see langword="true" /> 如果 XML 可以反序列化为一个密钥标识符子句由处理程序;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClauseSerializer.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              当在派生类中重写时返回一个值，该值指示指定的密钥标识符子句是否可以序列化由处理程序。
            </summary>
      <param name="securityKeyIdentifierClause">
                要检查的密钥标识符子句。
              </param>
      <returns>
              <see langword="true" /> 如果处理程序，否则为可序列化密钥标识符子句 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClauseSerializer.ReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>
              当在派生类中重写，使用反序列从一个密钥标识符子句指定的 XML 读取器。
            </summary>
      <param name="reader">
                XML 读取器的密钥标识符子句的开始元素处读取。
              </param>
      <returns>
              从 XML 进行反序列化密钥标识符子句。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityKeyIdentifierClauseSerializer.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              当在派生类中重写序列化指定的密钥标识符子句。
            </summary>
      <param name="writer">
                要使用的 XML 编写器序列化密钥标识符子句。
              </param>
      <param name="securityKeyIdentifierClause">
                要序列化密钥标识符子句。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityToken.#ctor">
      <summary>
              在派生类中初始化的构造函数调用 <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> 类。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause``1">
      <summary>
              获取一个值，该值指示此安全令牌能否创建指定的密钥标识符。
            </summary>
      <typeparam name="T">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，指定要创建的密钥标识符。
              </typeparam>
      <returns>
              如果 <see langword="true" /> 的类型为 <paramref name="T" />，则为 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause``1">
      <summary>
              创建指定的密钥标识符子句。
            </summary>
      <typeparam name="T">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，指定要创建的密钥标识符。
              </typeparam>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，它是安全令牌的密钥标识符子句。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              返回一个值，该值指示此实例的密钥标识符能否解析为指定的密钥标识符。
            </summary>
      <param name="keyIdentifierClause">
                要与此实例进行比较的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。
              </param>
      <returns>
              如果 <see langword="true" /> 为 <paramref name="keyIdentifierClause" />，并且具有与 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> 属性相同的唯一标识符，则为 <see cref="P:System.IdentityModel.Tokens.SecurityToken.Id" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              为指定的密钥标识符子句获取密钥。
            </summary>
      <param name="keyIdentifierClause">
                要为其获取密钥的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。
              </param>
      <returns>
              一个表示密钥的 <see cref="T:System.IdentityModel.Tokens.SecurityKey" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenDescriptor.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenDescriptor" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenDescriptor.AddAuthenticationClaims(System.String)">
      <summary>
              将指定的身份验证方法声明添加到当前实例的主题。
               即时身份验证设置为当前时间。
            </summary>
      <param name="authType">
                一个 URI，指定身份验证方法。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenDescriptor.AddAuthenticationClaims(System.String,System.DateTime)">
      <summary>
              将指定的身份验证类型和即时身份验证的声明添加到当前实例的使用者。
            </summary>
      <param name="authType">
                一个 URI，指定身份验证方法。
              </param>
      <param name="time">
                Utc 格式的即时身份验证。
                 如果时间不是 utc 格式，它将转换为 UTC。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenDescriptor.ApplyTo(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse)">
      <summary>
              基于当前实例的属性集指定 RSTR 的相应属性。
            </summary>
      <param name="response">
                要对其应用的当前实例的设置 RSTR。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="response" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenElement.#ctor(System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenElement" /> 类通过使用 <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> 对象。
            </summary>
      <param name="securityToken">
                安全令牌表示的新实例。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenElement.#ctor(System.Xml.XmlElement,System.IdentityModel.Tokens.SecurityTokenHandlerCollection)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenElement" /> 通过使用指定的 XML 表示形式的安全令牌的类。
            </summary>
      <param name="securityTokenXml">
                安全令牌 XML 表示形式。
              </param>
      <param name="securityTokenHandlers">
                用于读取和验证新的实例包装的安全令牌的默认令牌处理程序集合。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenElement.GetIdentities">
      <summary>
              获取包装令牌中包含的标识。
            </summary>
      <returns>
              令牌中包含的标识。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenElement.GetSecurityToken">
      <summary>
              获取由当前实例表示的安全令牌。
            </summary>
      <returns>
              当前实例表示安全令牌。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenElement.ReadSecurityToken(System.Xml.XmlElement,System.IdentityModel.Tokens.SecurityTokenHandlerCollection)">
      <summary>
              反序列化 <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> 从指定的 XML 表示形式。
            </summary>
      <param name="securityTokenXml">
                安全令牌 XML 表示形式。
              </param>
      <param name="securityTokenHandlers">
                要用于读取令牌的令牌处理程序集合。
              </param>
      <returns>
              从 XML 进行反序列化安全令牌。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenElement.ValidateToken(System.Xml.XmlElement,System.IdentityModel.Tokens.SecurityTokenHandlerCollection)">
      <summary>
              创建指定的 XML 表示形式的安全令牌中包含的标识。
            </summary>
      <param name="securityTokenXml">
                安全令牌 XML 表示形式。
              </param>
      <param name="securityTokenHandlers">
                要用于读取令牌的令牌处理程序集合。
              </param>
      <returns>
              令牌中包含的标识。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="securityTokenXml" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="securityTokenHandlers" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenException.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              使用指定的 XML 序列化数据和有关序列化流的源和目标的上下文数据来初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenException" /> 类的新实例。
            </summary>
      <param name="info">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含在序列化和反序列化过程中使用的值。
              </param>
      <param name="context">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityTokenException" />，包含有关序列化流的源和目标的数据。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenException.#ctor(System.String)">
      <summary>
              使用指定的错误消息初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenException" /> 类的新实例。
            </summary>
      <param name="message">
                一个标识异常发生原因的消息。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和错误的根源初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenException" /> 类的新实例。
            </summary>
      <param name="message">
                一个标识异常发生原因的消息。
              </param>
      <param name="innerException">
                一个 <see cref="T:System.Exception" />，表示异常的根源。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenExpiredException.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenExpiredException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenExpiredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              使用指定的 XML 序列化数据和有关序列化流的源和目标的上下文数据来初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenExpiredException" /> 类的新实例。
            </summary>
      <param name="info">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含在序列化和反序列化过程中使用的值。
              </param>
      <param name="context">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityTokenExpiredException" />，包含有关序列化流的源和目标的数据。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenExpiredException.#ctor(System.String)">
      <summary>
              使用指定的错误消息初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenExpiredException" /> 类的新实例。
            </summary>
      <param name="message">
                一个标识异常发生原因的消息。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenExpiredException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和错误的根源初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenExpiredException" /> 类的新实例。
            </summary>
      <param name="message">
                一个标识异常发生原因的消息。
              </param>
      <param name="inner">
                一个 <see cref="T:System.Exception" />，表示异常的根源。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.#ctor">
      <summary>
              从构造函数初始化派生类中调用 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> 类。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>
              返回一个值，该值指示指定的 XML 读取器是否由 XML 元素引用可以反序列化此实例的密钥标识符子句。
            </summary>
      <param name="reader">
                XML 读取器的开始元素处。
                 不应将读取器前移此方法。
              </param>
      <returns>
              <see langword="true" /> 如果 <see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)" /> 方法可以读取元素; 否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)">
      <summary>
              返回一个值，该值指示指定的字符串是否可以反序列化为此实例处理的类型的令牌。
            </summary>
      <param name="tokenString">
                要读取的令牌字符串。
              </param>
      <returns>
              <see langword="true" /> 如果 <see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)" /> 方法可以读取元素; 否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
      <summary>
              返回一个值，该值指示是否可以处理此实例的类型的令牌作为读取由指定的 XML 读取器引用的 XML 元素。
            </summary>
      <param name="reader">
                XML 读取器定位在开始元素。
                 不应将读取器前移此方法。
              </param>
      <returns>
              <see langword="true" /> 如果 <see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)" /> 方法可以读取元素; 否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              返回一个值，该值指示指定的密钥标识符子句是否可以序列化此实例。
            </summary>
      <param name="securityKeyIdentifierClause">
                要检查的密钥标识符子句。
              </param>
      <returns>
              <see langword="true" /> 如果可以序列化密钥标识符子句。否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
      <summary>
              当在派生类中重写创建处理由该类的令牌的安全令牌引用。
               此方法通常由安全令牌服务 (STS) 调用。
            </summary>
      <param name="token">
                引用要为其创建标记。
              </param>
      <param name="attached">
                <see langword="true" /> 如果应创建附加的引用; <see langword="false" /> ，如果应创建的未附加的引用。
              </param>
      <returns>
              引用指定的令牌的密钥标识符子句。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>
              当在派生类中重写，创建使用指定的令牌描述符的安全令牌。
               由安全令牌服务 (STS) 调用此方法。
            </summary>
      <param name="tokenDescriptor">
                是要创建令牌的安全令牌描述符。
                 调用此方法之前，是设置令牌描述符的属性。
              </param>
      <returns>
              与令牌描述符的属性匹配安全令牌。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              当在派生类中重写，如果作为在重播检测到指定的标记，则引发异常。
            </summary>
      <param name="token">
                要检查的重播的标记。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers">
      <summary>
              当在派生类中重写时返回的一套所使用 Uri 中标识处理由派生类类型的令牌的请求。
            </summary>
      <returns>
              用于标识此处理程序支持的令牌类型 Uri 集。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>
              在派生类中重写，当从 XML 加载自定义配置。
            </summary>
      <param name="nodelist">
                配置 XML 元素。
                 在列表中的每个节点属于类型 <see cref="T:System.Xml.XmlElement" />。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>
              当在派生类中重写，反序列化到引用的派生类中处理的令牌的密钥标识符子句指定的 XML 读取器引用的 XML。
            </summary>
      <param name="reader">
                XML 读取器的 XML 进行反序列化到的密钥标识符子句的开始元素处。
              </param>
      <returns>
              从 XML 进行反序列化密钥标识符子句。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)">
      <summary>
              当在派生类中重写，反序列化对处理由派生类类型的令牌的指定的字符串。
            </summary>
      <param name="tokenString">
                要进行反序列化的字符串。
              </param>
      <returns>
              从指定的字符串进行反序列化安全令牌。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
      <summary>
              当在派生类中重写，反序列化到的派生类中处理类型的令牌指定的 XML 读取器引用的 XML。
            </summary>
      <param name="reader">
                XML 读取器定位标记的开始元素处。
              </param>
      <returns>
              从 XML 进行反序列化安全令牌。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>
              当在派生类中重写，反序列化指定的 XML 读取器为通过使用指定的令牌解析程序处理的派生类的类型的标记所引用的 XML。
            </summary>
      <param name="reader">
                XML 读取器定位标记的开始元素处。
              </param>
      <param name="tokenResolver">
                包含带外和缓存标记令牌解析器。
              </param>
      <returns>
              从 XML 进行反序列化安全令牌。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationFailure(System.IdentityModel.Tokens.SecurityToken,System.String)">
      <summary>
              当启用跟踪时的安全令牌验证期间跟踪故障事件。
            </summary>
      <param name="token">
                正在验证安全令牌。
              </param>
      <param name="errorMessage">
                要写入跟踪的消息。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationSuccess(System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              跟踪成功验证的安全令牌事件时启用了跟踪。
            </summary>
      <param name="token">
                验证令牌。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              当在派生类中重写，验证指定的安全令牌。
               令牌必须由派生类中处理的类型。
            </summary>
      <param name="token">
                要验证的标记。
              </param>
      <returns>
              在令牌中包含的标识。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              当在派生类中重写序列化到 XML 的指定的密钥标识符子句。
               由派生类所支持必须是类型的密钥标识符子句。
            </summary>
      <param name="writer">
                XML 编写器。
              </param>
      <param name="securityKeyIdentifierClause">
                要序列化密钥标识符子句。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              当在派生类中重写序列化指定的安全令牌的字符串。
               令牌必须由派生类中处理的类型。
            </summary>
      <param name="token">
                要序列化的标记。
              </param>
      <returns>
              序列化的令牌。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              当在派生类中重写序列化到 XML 指定的安全令牌。
               令牌必须由派生类中处理的类型。
            </summary>
      <param name="writer">
                XML 编写器。
              </param>
      <param name="token">
                要序列化的标记。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollection" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.#ctor(System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SecurityTokenHandler})">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollection" /> 类，具有指定的令牌处理程序。
            </summary>
      <param name="handlers">
                令牌处理程序用来初始化新实例。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.#ctor(System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SecurityTokenHandler},System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollection" /> 类与指定的令牌处理程序和配置。
            </summary>
      <param name="handlers">
                令牌处理程序用来初始化新实例。
              </param>
      <param name="configuration">
                要将与集合相关联的基本配置。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.#ctor(System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollection" /> 类，具有指定的配置。
            </summary>
      <param name="configuration">
                要将与集合相关联的基本配置。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.AddOrReplace(System.IdentityModel.Tokens.SecurityTokenHandler)">
      <summary>
              将指定的令牌处理程序添加到此集合。
               如果具有相同标记处理程序类型标识符，因为集合中已存在指定的处理程序，用指定的处理程序代替它。
            </summary>
      <param name="handler">
                要添加到集合的令牌处理程序。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>
              返回一个值，指示是否可以读取指定的密钥标识符子句，通过此集合中的处理程序之一或基 <see cref="T:System.ServiceModel.Security.WSSecurityTokenSerializer" />。
            </summary>
      <param name="reader">
                XML 读取器的开始元素处。
                 读取器不应将前移。
              </param>
      <returns>
              <see langword="true" /> 如果可以读取密钥标识符子句。否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanReadKeyIdentifierClauseCore(System.Xml.XmlReader)">
      <summary>
              返回一个值，该值指示由一个集合中的处理程序或由基类是否可以读取指定的密钥标识符子句 <see cref="T:System.ServiceModel.Security.WSSecurityTokenSerializer" />。
            </summary>
      <param name="reader">
                XML 读取器的开始元素处。
                 读取器不应将前移。
              </param>
      <returns>
              <see langword="true" /> 如果可以读取密钥标识符子句。否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanReadToken(System.String)">
      <summary>
              返回一个值，该值指示是否可以通过此集合中的处理程序之一读取标记的指定的字符串表示。
            </summary>
      <param name="tokenString">
                字符串形式表示的标记。
              </param>
      <returns>
              <see langword="true" /> 如果集合包含的令牌处理程序可以读取指定的标记;否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="tokenString" /> 为 <see langword="null" /> 或空字符串。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanReadToken(System.Xml.XmlReader)">
      <summary>
              返回一个值，该值指示是否可以通过在此集合中的处理程序之一读取指定的标记。
            </summary>
      <param name="reader">
                XML 读取器的开始元素处。
                 读取器不应将前移。
              </param>
      <returns>
              <see langword="true" /> 如果可以读取令牌。否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanWriteToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              通过此集合中的处理程序之一返回一个值，该值指示是否可以序列化指定的标记。
            </summary>
      <param name="token">
                要进行序列化的安全令牌。
              </param>
      <returns>
              <see langword="true" /> 如果令牌可以序列化一个处理程序;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.ClearItems">
      <summary>
              清除所有此集合中的处理程序。
               （重写基类方法。）
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.CreateDefaultSecurityTokenHandlerCollection">
      <summary>
              创建系统默认集合的基本的安全令牌处理程序，每个都有系统默认配置。
               此集合中的令牌处理程序必须使用服务特定的数据配置，然后才能使用。
            </summary>
      <returns>
              一个包含默认情况下，基本的安全令牌处理程序的安全令牌处理程序集合。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.CreateDefaultSecurityTokenHandlerCollection(System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration)">
      <summary>
              创建基本的安全令牌处理程序的系统默认集合，并将指定的配置与新集合相关联。
               每个处理程序都有系统默认配置。
               此集合中的令牌处理程序必须使用服务特定的数据配置，然后才能使用。
            </summary>
      <param name="configuration">
                要将与处理程序集合相关联的配置。
              </param>
      <returns>
              一个包含默认情况下，基本的安全令牌处理程序的安全令牌处理程序集合。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>
              从指定的令牌说明符创建一个令牌。
            </summary>
      <param name="tokenDescriptor">
                是要创建令牌的令牌描述符。
                 调用此方法之前，是设置令牌描述符的属性。
              </param>
      <returns>
              与令牌描述符的属性匹配安全令牌。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.InsertItem(System.Int32,System.IdentityModel.Tokens.SecurityTokenHandler)">
      <summary>
              在此集合中指定索引处插入指定的令牌处理程序。
               （重写基类方法。）
            </summary>
      <param name="index">
                从零开始的索引，应在该位置插入该处理程序。
              </param>
      <param name="item">
                要插入的令牌处理程序。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.ReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>
              反序列化从指定的 XML 读取器读取密钥标识符子句。
            </summary>
      <param name="reader">
                XML 读取器的 XML 进行反序列化到的密钥标识符子句的开始元素处。
              </param>
      <returns>
              从 XML 反序列化密钥标识符子句。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.ReadKeyIdentifierClauseCore(System.Xml.XmlReader)">
      <summary>
              反序列化从指定的 XML 读取器读取密钥标识符子句。
            </summary>
      <param name="reader">
                XML 读取器的 XML 进行反序列化到的密钥标识符子句的开始元素处。
              </param>
      <returns>
              从 XML 反序列化密钥标识符子句。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.ReadToken(System.String)">
      <summary>
              反序列化指定字符串中的安全令牌。
            </summary>
      <param name="tokenString">
                从其反序列化令牌的字符串。
              </param>
      <returns>
              从指定的字符串进行反序列化令牌。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.ReadToken(System.Xml.XmlReader)">
      <summary>
              反序列化指定的 XML 读取器的安全令牌。
            </summary>
      <param name="reader">
                XML 读取器定位标记的开始元素处。
              </param>
      <returns>
              从 XML 反序列化安全令牌。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.RemoveItem(System.Int32)">
      <summary>
              从此集合中移除指定索引处的处理程序。
               （重写基类方法。）
            </summary>
      <param name="index">
                要删除的处理程序的从零开始的索引。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.SetItem(System.Int32,System.IdentityModel.Tokens.SecurityTokenHandler)">
      <summary>
              集合中的指定索引处的令牌处理程序替换为指定的处理程序。
            </summary>
      <param name="index">
                待替换元素的从零开始的索引。
              </param>
      <param name="item">
                新令牌处理程序中指定索引处的元素。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              验证指定的安全令牌。
            </summary>
      <param name="token">
                要验证的标记。
              </param>
      <returns>
              令牌中包含的标识。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              序列化到 XML 的指定的密钥标识符子句。
            </summary>
      <param name="writer">
                XML 编写器。
              </param>
      <param name="keyIdentifierClause">
                要序列化密钥标识符子句。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.WriteKeyIdentifierClauseCore(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              序列化到 XML 的指定的密钥标识符子句。
            </summary>
      <param name="writer">
                XML 编写器。
              </param>
      <param name="keyIdentifierClause">
                要序列化密钥标识符子句。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              将序列化为指定的安全令牌的字符串。
            </summary>
      <param name="token">
                要序列化的标记。
              </param>
      <returns>
              从使用令牌序列化字符串。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="token" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  集合不包含能够序列化指定的标记处理程序。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              将指定的安全令牌提供给 XML 序列化。
            </summary>
      <param name="writer">
                XML 编写器。
              </param>
      <param name="token">
                要序列化的标记。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="token" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  集合不包含能够序列化指定的标记处理程序。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager" /> 为指定的类名为 service。
            </summary>
      <param name="serviceName">
                关联的服务的名称。
                <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.ServiceName" /> 属性设置为此名称。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.ContainsKey(System.String)">
      <summary>
              确定此实例是否包含指定的使用情况的安全令牌处理程序集合。
            </summary>
      <param name="usage">
                若要查找令牌处理程序集合的用法。
              </param>
      <returns>
              <see langword="true" /> 如果此实例包含一个标记处理程序集合，以便指定用法;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.CreateDefaultSecurityTokenHandlerCollectionManager">
      <summary>
              创建一个令牌处理程序集合管理器包含令牌处理程序的一组默认的处理程序集合。
            </summary>
      <returns>
              包含一个带默认令牌处理程序的集合管理器。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.CreateEmptySecurityTokenHandlerCollectionManager">
      <summary>
              创建一个空的令牌处理程序集管理器。
            </summary>
      <returns>
              收集管理器，其中包含不具有处理程序。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenNotYetValidException.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenNotYetValidException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenNotYetValidException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              使用指定的 XML 序列化数据和有关序列化流的源和目标的上下文数据来初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenNotYetValidException" /> 类的新实例。
            </summary>
      <param name="info">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含在序列化和反序列化过程中使用的值。
              </param>
      <param name="context">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityTokenNotYetValidException" />，包含有关序列化流的源和目标的数据。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenNotYetValidException.#ctor(System.String)">
      <summary>
              使用指定的错误消息初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenNotYetValidException" /> 类的新实例。
            </summary>
      <param name="message">
                一个标识异常发生原因的消息。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenNotYetValidException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和错误的根源初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenNotYetValidException" /> 类的新实例。
            </summary>
      <param name="message">
                一个标识异常发生原因的消息。
              </param>
      <param name="inner">
                一个 <see cref="T:System.Exception" />，表示异常的根源。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              使用指定的 XML 序列化数据和有关序列化流的源和目标的上下文数据来初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException" /> 类的新实例。
            </summary>
      <param name="info">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含在序列化和反序列化过程中使用的值。
              </param>
      <param name="context">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException" />，包含有关序列化流的源和目标的数据。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException.#ctor(System.String)">
      <summary>
              使用指定的错误消息初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException" /> 类的新实例。
            </summary>
      <param name="message">
                一个标识异常发生原因的消息。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和错误的根源初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException" /> 类的新实例。
            </summary>
      <param name="message">
                一个标识异常发生原因的消息。
              </param>
      <param name="inner">
                一个 <see cref="T:System.Exception" />，表示异常的根源。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenValidationException.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              使用指定的 XML 序列化数据和有关序列化流的源和目标的上下文数据来初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException" /> 类的新实例。
            </summary>
      <param name="info">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含在序列化和反序列化过程中使用的值。
              </param>
      <param name="context">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException" />，包含有关序列化流的源和目标的数据。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenValidationException.#ctor(System.String)">
      <summary>
              使用指定的错误消息初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException" /> 类的新实例。
            </summary>
      <param name="message">
                一个标识异常发生原因的消息。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SecurityTokenValidationException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和错误的根源初始化 <see cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException" /> 类的新实例。
            </summary>
      <param name="message">
                一个标识异常发生原因的消息。
              </param>
      <param name="innerException">
                一个 <see cref="T:System.Exception" />，表示异常的根源。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityToken.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              用序列化数据初始化 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 类的新实例。
            </summary>
      <param name="info">
                序列化的对象数据中。
              </param>
      <param name="context">
                有关源的上下文信息。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityToken.#ctor(System.Security.Claims.ClaimsPrincipal)">
      <summary>
              从指定的主体初始化 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 类的新实例。
            </summary>
      <param name="claimsPrincipal">
                从其初始化标记所声明的主体。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="claimsPrincipal" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="claimsPrincipal" /> 的 <see cref="P:System.Security.Claims.ClaimsPrincipal.Identities" /> 属性为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityToken.#ctor(System.Security.Claims.ClaimsPrincipal,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 从指定的主体和引导令牌的类。
            </summary>
      <param name="claimsPrincipal">
                从对启动令牌生成所声明的主体。
              </param>
      <param name="context">
                一个可选的、 特定于应用程序的上下文的字符串。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="claimsPrincipal" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="claimsPrincipal" /> 的 <see cref="P:System.Security.Claims.ClaimsPrincipal.Identities" /> 属性为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityToken.#ctor(System.Security.Claims.ClaimsPrincipal,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 类从指定的主体和引导令牌; 并使用指定开始时间和过期时间。
            </summary>
      <param name="claimsPrincipal">
                从对启动令牌生成所声明的主体。
              </param>
      <param name="context">
                一个可选的、 特定于应用程序的上下文的字符串。
              </param>
      <param name="validFrom">
                令牌生效时间即时。
                <see langword="null" /> 若要指定 <see cref="P:System.DateTime.UtcNow" />
              </param>
      <param name="validTo">
                时间点之后该令牌将不再有效。
                <see langword="null" /> 若要指定应通过添加值来确定值 <see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime" /> 属性设置为指定的时间 <paramref name="validFrom" /> 参数。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="claimsPrincipal" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="claimsPrincipal" /> 的 <see cref="P:System.Security.Claims.ClaimsPrincipal.Identities" /> 属性为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="validFrom" /> 和 <paramref name="validTo" /> 无法验证参数; 例如， <paramref name="validTo" /> 指定发生的时间早于 <paramref name="validFrom" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityToken.#ctor(System.Security.Claims.ClaimsPrincipal,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 类从指定的主体和引导令牌; 并使用指定开始时间和过期时间。
               新令牌的作用范围是指定的终结点。
            </summary>
      <param name="claimsPrincipal">
                从对启动令牌生成所声明的主体。
              </param>
      <param name="context">
                一个可选的、 特定于应用程序的上下文的字符串。
              </param>
      <param name="endpointId">
                此令牌绑定到的终结点。
                 一个空字符串创建一个未区分范围的令牌。
              </param>
      <param name="validFrom">
                令牌生效时间即时。
                <see langword="null" /> 若要指定 <see cref="P:System.DateTime.UtcNow" />。
              </param>
      <param name="validTo">
                时间点之后该令牌将不再有效。
                <see langword="null" /> 若要指定应通过添加值来确定值 <see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime" /> 属性设置为指定的时间  <paramref name="validFrom" /> 参数。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="claimsPrincipal" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="claimsPrincipal" /> 的 <see cref="P:System.Security.Claims.ClaimsPrincipal.Identities" /> 属性为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="endpointId" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="validFrom" /> 和 <paramref name="validTo" /> 无法验证参数; 例如， <paramref name="validTo" /> 指定发生的时间早于 <paramref name="validFrom" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityToken.#ctor(System.Security.Claims.ClaimsPrincipal,System.TimeSpan)">
      <summary>
              从指定的主体初始化 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 类的新实例。
               新令牌的有效期从 <see cref="P:System.DateTime.UtcNow" /> 通过指定的生存期。
            </summary>
      <param name="claimsPrincipal">
                从其初始化标记所声明的主体。
              </param>
      <param name="lifetime">
                从当前令牌的有效期的时间段。
                <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.ValidFrom" /> 属性将设置为 <see cref="P:System.DateTime.UtcNow" /> 和 <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.ValidTo" /> 属性将设置为 <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.ValidFrom" /> 加上指定此参数的时期。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="claimsPrincipal" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="claimsPrincipal" /> 的 <see cref="P:System.Security.Claims.ClaimsPrincipal.Identities" /> 属性为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="lifetime" /> 小于或等于 <see cref="F:System.TimeSpan.Zero" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityToken.#ctor(System.Security.Claims.ClaimsPrincipal,System.Xml.UniqueId,System.String,System.String,System.DateTime,System.TimeSpan,System.IdentityModel.Tokens.SymmetricSecurityKey)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 类通过使用指定的主体、 上下文 ID、 上下文、 终结点、 有效的时间戳、 生存期和密钥。
            </summary>
      <param name="claimsPrincipal">
                与此会话关联所声明的主体。
              </param>
      <param name="contextId">
                与此令牌关联的上下文标识符。
              </param>
      <param name="context">
                一个可选的、 特定于应用程序的上下文的字符串。
              </param>
      <param name="endpointId">
                此令牌绑定到的终结点。
                 一个空字符串创建一个未区分范围的令牌。
              </param>
      <param name="validFrom">
                令牌生效的时间。
              </param>
      <param name="lifetime">
                会话令牌的生存期。
                <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.ValidTo" /> 属性将设置为 <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.ValidFrom" /> 加上指定此参数的时期。
              </param>
      <param name="key">
                一个可选的对称会话密钥。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="claimsPrincipal" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="claimsPrincipal" /> 的 <see cref="P:System.Security.Claims.ClaimsPrincipal.Identities" /> 属性为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="contextId" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="endpointId" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="lifetime" /> 小于或等于 <see cref="F:System.TimeSpan.Zero" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityToken.#ctor(System.Security.Claims.ClaimsPrincipal,System.Xml.UniqueId,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.IdentityModel.Tokens.SymmetricSecurityKey)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 类通过使用指定的主体、 上下文 ID、 上下文、 终结点、 开始时间、 到期时间和密钥。
            </summary>
      <param name="claimsPrincipal">
                与此会话关联所声明的主体。
              </param>
      <param name="contextId">
                与此令牌关联的上下文标识符。
              </param>
      <param name="context">
                一个可选的、 特定于应用程序的上下文的字符串。
              </param>
      <param name="endpointId">
                此令牌绑定到的终结点。
                 一个空字符串创建一个未区分范围的令牌。
              </param>
      <param name="validFrom">
                令牌生效时间即时。
                <see langword="null" /> 若要指定 <see cref="P:System.DateTime.UtcNow" />
              </param>
      <param name="validTo">
                时间点之后该令牌将不再有效。
                <see langword="null" /> 若要指定应通过添加值来确定值 <see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime" /> 属性设置为指定的时间 <paramref name="validFrom" /> 参数。
              </param>
      <param name="key">
                一个可选的对称会话密钥。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="claimsPrincipal" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="claimsPrincipal" /> 的 <see cref="P:System.Security.Claims.ClaimsPrincipal.Identities" /> 属性为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="contextId" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="validFrom" /> 大于或等于 <paramref name="validTo" />。
                
                  - 或 -
                
                  <paramref name="validTo" /> 小于当前时间。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityToken.#ctor(System.Security.Claims.ClaimsPrincipal,System.Xml.UniqueId,System.String,System.String,System.TimeSpan,System.IdentityModel.Tokens.SymmetricSecurityKey)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 类通过使用指定的主体、 上下文 ID、 上下文、 终结点、 生存期和密钥。
            </summary>
      <param name="claimsPrincipal">
                与此会话关联所声明的主体。
              </param>
      <param name="contextId">
                与此令牌关联的上下文标识符。
              </param>
      <param name="context">
                一个可选的、 特定于应用程序的上下文的字符串。
              </param>
      <param name="endpointId">
                此令牌绑定到的终结点。
                 一个空字符串创建一个未区分范围的令牌。
              </param>
      <param name="lifetime">
                会话令牌的生存期。
                <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.ValidFrom" /> 属性将设置为 <see cref="P:System.DateTime.UtcNow" /> 和 <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.ValidTo" /> 属性将设置为 <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.ValidFrom" /> 加上指定此参数的时期。
              </param>
      <param name="key">
                一个可选的对称会话密钥。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="claimsPrincipal" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="claimsPrincipal" /> 的 <see cref="P:System.Security.Claims.ClaimsPrincipal.Identities" /> 属性为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="contextId" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="endpointId" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="lifetime" /> 小于或等于 <see cref="F:System.TimeSpan.Zero" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityToken.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              集 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 会话安全令牌序列化所需的信息。
            </summary>
      <param name="info">
                序列化的对象数据中。
              </param>
      <param name="context">
                关于来源和目标的上下文信息
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCache.#ctor">
      <summary>
              从构造函数初始化派生类中调用 <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenCache" /> 类。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCache.AddOrUpdate(System.IdentityModel.Tokens.SessionSecurityTokenCacheKey,System.IdentityModel.Tokens.SessionSecurityToken,System.DateTime)">
      <summary>
              当在派生类中重写，尝试向缓存中添加项或更新现有。
            </summary>
      <param name="key">
                要添加或更新的项的键。
              </param>
      <param name="value">
                与此项关联的令牌。
              </param>
      <param name="expiryTime">
                项的过期时间。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCache.Get(System.IdentityModel.Tokens.SessionSecurityTokenCacheKey)">
      <summary>
              当在派生类中重写，尝试从缓存中检索一个项。
            </summary>
      <param name="key">
                要检索的项的键。
              </param>
      <returns>
              与键关联的会话令牌或 <see langword="null" />, ，如果未找到匹配。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCache.GetAll(System.String,System.Xml.UniqueId)">
      <summary>
              当在派生类中重写，检索所有与键关联的令牌。
            </summary>
      <param name="endpointId">
                要搜索的终结点 ID。
              </param>
      <param name="contextId">
                要搜索的上下文 ID。
              </param>
      <returns>
              与键关联的会话令牌的集合。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCache.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>
              在派生类中重写，当从 XML 加载自定义配置。
            </summary>
      <param name="nodelist">
                自定义配置元素中。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCache.Remove(System.IdentityModel.Tokens.SessionSecurityTokenCacheKey)">
      <summary>
              当在派生类中实现，尝试从缓存中移除一个项。
            </summary>
      <param name="key">
                要移除的条目的键。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCache.RemoveAll(System.String)">
      <summary>
              当在派生类中实现，尝试从缓存中删除具有匹配的终结点 ID 的所有项。
            </summary>
      <param name="endpointId">
                要删除的条目终结点 ID。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCache.RemoveAll(System.String,System.Xml.UniqueId)">
      <summary>
              当在派生类中实现，尝试从缓存中删除所有匹配项。
            </summary>
      <param name="endpointId">
                要删除的条目终结点 ID。
              </param>
      <param name="contextId">
                要删除的条目上下文 ID。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.#ctor(System.String,System.Xml.UniqueId,System.Xml.UniqueId)">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey" /> 类的新实例。
            </summary>
      <param name="endpointId">
                为作用域的缓存项的终结点 ID。
                 这是应为的值 <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId" /> 缓存的令牌属性。
              </param>
      <param name="contextId">
                缓存项的上下文 ID。
                 这是应为的值 <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.ContextId" /> 缓存的令牌属性。
              </param>
      <param name="keyGeneration">
                缓存项密钥生成。
                 这是应为的值 <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.KeyGeneration" /> 缓存的令牌属性。
                 当续订令牌后，此值才可用。
                 它将 <see langword="null" /> 缓存新的令牌时。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.Equals(System.Object)">
      <summary>
              确定指定的对象是否与当前的缓存密钥相同。
            </summary>
      <param name="obj">
                要与当前的缓存键进行比较的对象。
                 应可从赋值 <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey" />。
              </param>
      <returns>
              <see langword="true" /> 如果指定的对象等同于当前的缓存项;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.GetHashCode">
      <summary>
              返回当前的缓存密钥的哈希代码。
            </summary>
      <returns>
              当前的缓存密钥哈希代码。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.op_Equality(System.IdentityModel.Tokens.SessionSecurityTokenCacheKey,System.IdentityModel.Tokens.SessionSecurityTokenCacheKey)">
      <summary>
              实现的相等运算符 <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey" /> 类。
            </summary>
      <param name="first">
                要比较的第一个缓存键。
              </param>
      <param name="second">
                要比较的第二个缓存键。
              </param>
      <returns>
              <see langword="true" /> 如果缓存键是否相等。否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.op_Inequality(System.IdentityModel.Tokens.SessionSecurityTokenCacheKey,System.IdentityModel.Tokens.SessionSecurityTokenCacheKey)">
      <summary>
              实现的相等运算符 <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey" /> 类。
            </summary>
      <param name="first">
                要比较的第一个缓存键。
              </param>
      <param name="second">
                要比较的第二个缓存键。
              </param>
      <returns>
              <see langword="true" /> 如果缓存键是否不相等;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.ToString">
      <summary>
              重写 <see cref="M:System.Object.ToString" /> 提供唯一标识符。
            </summary>
      <returns>
              字符串形式中的键。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" /> 类，该类使用默认 cookie 转换和令牌生存期。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform})">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" /> 类，该类使用指定的 cookie 转换。
            </summary>
      <param name="transforms">
                若要在编码或解码 cookie 时应用转换。
                 设置 <see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms" /> 属性。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="transforms" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform},System.TimeSpan)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" /> 类，该类使用指定的 cookie 转换和令牌生存期。
            </summary>
      <param name="transforms">
                若要在编码或解码 cookie 时应用转换。
                 设置 <see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms" /> 属性。
              </param>
      <param name="tokenLifetime">
                获取令牌默认生存时间。
                 设置 <see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime" /> 属性。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="transforms" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="tokenLifetime" /> 小于或等于 <see cref="F:System.TimeSpan.Zero" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms(System.Byte[],System.Boolean)">
      <summary>
              将应用指定的转换 <see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms" /> 属性进行编码或解码指定的 cookie。
            </summary>
      <param name="cookie">
                要转换的 cookie。
              </param>
      <param name="outbound">
                <see langword="true" /> 如果该 cookie 应进行编码; <see langword="false" /> 如果 cookie 应进行解码。
              </param>
      <returns>
              已编码或解码的 cookie。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms" /> 属性为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
      <summary>
              返回一个值，该值指示读取器定位在 <see langword="&lt;wsc:SecurityContextToken&gt;" /> 元素。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 通过传入 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
                 读取器应位于 <see langword="&lt;wsc:SecurityContextToken&gt;" /> 元素。
              </param>
      <returns>
              <see langword="true" /> 如果读取器指向 <see langword="&lt;wsc:SecurityContextToken&gt;" /> 元素; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateSessionSecurityToken(System.Security.Claims.ClaimsPrincipal,System.String,System.String,System.DateTime,System.DateTime)">
      <summary>
              创建 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 基于令牌的有效期的指定的声明主体和时间范围。
            </summary>
      <param name="principal">
                声明主体中。
              </param>
      <param name="context">
                一个调用方定义的上下文的字符串。
              </param>
      <param name="endpointId">
                终结点的范围限定该令牌的标识符。
              </param>
      <param name="validFrom">
                令牌生效时间即时。
              </param>
      <param name="validTo">
                时间点之后该令牌将不再有效。
              </param>
      <returns>
              已创建的会话安全令牌。
               根据指定的参数设置新的会话令牌上的属性。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="principal" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 属性为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
      <summary>
              创建基于指定的令牌描述符的安全令牌。
            </summary>
      <param name="tokenDescriptor">
                从中创建令牌令牌描述符。
              </param>
      <returns>
              创建安全令牌。
               这将是实例 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="tokenDescriptor" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 属性为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.GetTokenTypeIdentifiers">
      <summary>
              获取可由该处理程序处理的令牌类型的令牌类型 Uri。
            </summary>
      <returns>
              可通过此处理程序处理的令牌类型的标记类型标识符 Uri。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>
              从 XML 加载自定义配置。
            </summary>
      <param name="customConfigElements">
                自定义配置元素中。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="customConfigElements" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  通过指定的配置 <paramref name="customConfigElements" /> 无效。
                   例如，它不包含 <see langword="&lt;sessionTokenRequirement&gt;" /> 元素，它包含多个 <see langword="&lt;sessionTokenRequirement&gt;" /> 元素、 一个有效 <see cref="T:System.TimeSpan" /> 不能从读取值 <see langword="lifetime" /> 属性中，或 <see langword="lifetime" /> 属性指定的值是小于比 <see cref="F:System.TimeSpan.Zero" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Byte[],System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>
              读取 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 从通过使用指定的令牌解析程序的字节流。
            </summary>
      <param name="token">
                包含标记的字节流中。
              </param>
      <param name="tokenResolver">
                若要使用令牌解析器。
              </param>
      <returns>
              读取的 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
      <summary>
              读取 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 使用指定的 XML 读取器。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 通过传入 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
              </param>
      <returns>
              已读取的一个实例的会话安全令牌 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
                  读取器未定位在 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 或 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 无法读取。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>
              读取 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 使用指定的 XML 读取器和令牌解析程序。
            </summary>
      <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> 通过传入 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
              </param>
      <param name="tokenResolver">
                一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> 可用于解析 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />。
              </param>
      <returns>
              已读取的一个实例的会话安全令牌 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="tokenResolver" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
                  读取器未定位在 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 或 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 无法读取。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.SetTransforms(System.Collections.Generic.IEnumerable{System.IdentityModel.CookieTransform})">
      <summary>
              设置将应用于 cookie 的转换。
            </summary>
      <param name="transforms">
                要使用的转换。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession(System.IdentityModel.Tokens.SessionSecurityToken)">
      <summary>
              确定与指定标记关联的会话是否仍有效。
               通过检查来确定有效性 <see cref="P:System.IdentityModel.Tokens.SecurityToken.ValidFrom" /> 和 <see cref="P:System.IdentityModel.Tokens.SecurityToken.ValidTo" /> 属性指定的标记。
               如果在会话不再有效，将引发异常。
            </summary>
      <param name="securityToken">
                要检查的标记。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="securityToken" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 属性为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenNotYetValidException">
                  <see cref="P:System.IdentityModel.Tokens.SecurityToken.ValidFrom" /> 令牌的属性是否晚于 <see cref="P:System.DateTime.UtcNow" />。
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenExpiredException">
                  <see cref="P:System.IdentityModel.Tokens.SecurityToken.ValidTo" /> 令牌的属性是早于 <see cref="P:System.DateTime.UtcNow" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              验证指定的标记并返回其声明。
            </summary>
      <param name="token">
                要验证的标记。
                 必须可从 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />。
              </param>
      <returns>
              令牌中包含的标识。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="token" /><see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="token" /> 不能从分配 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SessionSecurityToken,System.String)">
      <summary>
              对指定的会话令牌进行验证，并返回其声明。
            </summary>
      <param name="token">
                要验证的标记。
                 必须可从 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />。
              </param>
      <param name="endpointId">
                终结点的范围限定该令牌的标识符。
              </param>
      <returns>
              令牌中包含的标识。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="token" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="endpointId" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="token" /> 不能从分配 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />。
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
                  <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId" /> 指定标记的属性不是 <see langword="null" /> 或空且其值比指定的不同 <paramref name="endpointId" /> 参数。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SessionSecurityToken)">
      <summary>
              将指定的令牌序列化到字节数组。
            </summary>
      <param name="sessionToken">
                要写入的标记。
              </param>
      <returns>
              编码的字节数组。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="sessiontoken" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              通过使用指定的 XML 编写器序列化指定的标记。
            </summary>
      <param name="writer">
                用于序列化令牌的 XML 编写器。
              </param>
      <param name="token">
                要序列化的标记。
                <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="token" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="token" /> 不能从分配 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />。
                
                  - 或 -
                
                  <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.SecureConversationVersion" /> 的令牌指定该处理程序不支持的 Ws-secure Conversation 的版本。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SigningCredentials.#ctor(System.IdentityModel.Tokens.SecurityKey,System.String,System.String)">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.SigningCredentials" /> 类的新实例。
            </summary>
      <param name="signingKey">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityKey" />，它包含用于生成数字签名的加密密钥。
              </param>
      <param name="signatureAlgorithm">
                一个 URI，表示用于生成数字签名的加密算法。
              </param>
      <param name="digestAlgorithm">
                一个表示加密算法的 URI，该加密算法用于计算要进行数字签名的 SOAP 消息部分的摘要。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SigningCredentials.#ctor(System.IdentityModel.Tokens.SecurityKey,System.String,System.String,System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.SigningCredentials" /> 类的新实例。
            </summary>
      <param name="signingKey">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityKey" />，它包含用于生成数字签名的加密密钥。
              </param>
      <param name="signatureAlgorithm">
                一个 URI，表示用于生成数字签名的加密算法。
              </param>
      <param name="digestAlgorithm">
                一个表示加密算法的 URI，该加密算法用于计算要进行数字签名的 SOAP 消息部分的摘要。
              </param>
      <param name="signingKeyIdentifier">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />，指定表示用于创建数字签名的密钥的标识符。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Byte[],System.IdentityModel.Tokens.EncryptingCredentials)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.SymmetricProofDescriptor" /> 类，具有指定的密钥材料。
            </summary>
      <param name="key">
                在已颁发令牌使用对称密钥。
              </param>
      <param name="targetWrappingCredentials">
                为信赖方加密凭据密钥。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.IdentityModel.Tokens.EncryptingCredentials)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.SymmetricProofDescriptor" /> 类，具有指定的加密凭据。
            </summary>
      <param name="targetWrappingCredentials">
                <see cref="T:System.IdentityModel.Tokens.EncryptingCredentials" /> 要使用。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.SymmetricProofDescriptor" /> 类，具有自动生成的密钥。
            </summary>
      <param name="keySizeInBits">
                对称密钥的大小。
              </param>
      <param name="targetWrappingCredentials">
                密钥加密凭据的请求的目标。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.SymmetricProofDescriptor" /> 类，具有自动生成的密钥。
            </summary>
      <param name="keySizeInBits">
                对称密钥的大小。
              </param>
      <param name="targetWrappingCredentials">
                密钥加密凭据的请求的目标。
              </param>
      <param name="requestorWrappingCredentials">
                为请求者加密凭据密钥。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="keySizeInBits" /> 小于或等于零。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials,System.Byte[])">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.SymmetricProofDescriptor" /> 用来发送类结合使用平均信息量。
            </summary>
      <param name="keySizeInBits">
                对称密钥的大小。
              </param>
      <param name="targetWrappingCredentials">
                密钥加密凭据的请求的目标。
              </param>
      <param name="requestorWrappingCredentials">
                请求者使用平均信息量或证明令牌进行加密的加密凭据。
              </param>
      <param name="sourceEntropy">
                请求者的平均信息量。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="sourceEntropy" /> 是 <see langword="null" /> 或一个空数组。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="keySize" /> 小于零。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials,System.Byte[],System.String)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.SymmetricProofDescriptor" /> 用来发送类结合使用平均信息量。
            </summary>
      <param name="keySizeInBits">
                对称密钥的大小。
              </param>
      <param name="targetWrappingCredentials">
                信赖方用来加密 SecurityKeyIdentifier 属性中的密钥的加密凭据。
              </param>
      <param name="requestorWrappingCredentials">
                请求程序用来加密平均信息量或证明令牌加密凭据。
              </param>
      <param name="sourceEntropy">
                请求者的平均信息量。
              </param>
      <param name="encryptWith">
                要使用加密校验密钥的算法的 URI。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="keySizeInBits" /> 小于或等于零。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="sourceEntropy" /> 是 <see langword="null" /> 或一个空数组。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.#ctor(System.Int32,System.IdentityModel.Tokens.EncryptingCredentials,System.IdentityModel.Tokens.EncryptingCredentials,System.String)">
      <summary>
              使用此构造函数有 STS 自动生成密钥并将其发送作为加密密钥的证明令牌。
               两种情况下都是涵盖此处 1。
               客户端发送平均信息量，但服务器会拒绝它 2。
               客户端没有未发送平均信息量，所以只需使用服务器的平均信息量
            </summary>
      <param name="keySizeInBits">
                对称密钥的大小。
              </param>
      <param name="targetWrappingCredentials">
                为信赖方加密凭据密钥。
              </param>
      <param name="requestorWrappingCredentials">
                为请求者加密凭据密钥。
              </param>
      <param name="encryptWith">
                中指定的算法 (URI) <see langword="&lt;EncryptWith&gt;" /> RST 中的元素。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="keySizeInBits" /> 小于或等于零。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.ApplyTo(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse)">
      <summary>
              修改指定的 RSTR 基于此证明描述符中的设置。
            </summary>
      <param name="response">
                要对其应用证明描述符 RSTR。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="response" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.GetKeyBytes">
      <summary>
              获取密钥材料。
            </summary>
      <returns>
              一个包含密钥材料的字节数组。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.GetSourceEntropy">
      <summary>
              获取源平均信息量以普通字节为单位。
            </summary>
      <returns>
              一个字节数组，其中包含源平均信息量。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricProofDescriptor.GetTargetEntropy">
      <summary>
              获取用纯字节表示的目标平均信息量
            </summary>
      <returns>
              一个字节数组，其中包含目标平均信息量。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricSecurityKey.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)">
      <summary>
              在派生类中重写时，使用指定的加密算法和参数生成当前密钥的派生密钥。
            </summary>
      <param name="algorithm">
                一个 URI，表示用于生成派生密钥的加密算法。
              </param>
      <param name="label">
                一个 <see cref="T:System.Byte" /> 数组，它包含加密算法的标签参数。
              </param>
      <param name="nonce">
                一个 <see cref="T:System.Byte" /> 数组，它包含用于创建派生密钥的 Nonce。
              </param>
      <param name="derivedKeyLength">
                派生密钥的大小。
              </param>
      <param name="offset">
                派生密钥在从此方法返回的字节数组中的位置。
              </param>
      <returns>
              包含派生密钥的 <see cref="T:System.Byte" /> 数组。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])">
      <summary>
              在派生类中重写时，获取一个使用指定的加密算法解密密码文本的转换。
            </summary>
      <param name="algorithm">
                一种对密码文本（例如加密的 XML）进行解密的加密算法。
              </param>
      <param name="iv">
                一个 <see cref="T:System.Byte" /> 数组，它包含指定算法的初始化向量 (<see langword="IV" />)。
              </param>
      <returns>
              一个表示解密转换的 <see cref="T:System.Security.Cryptography.ICryptoTransform" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])">
      <summary>
              在派生类中重写时，获取一个使用指定的加密算法加密 XML 的转换。
            </summary>
      <param name="algorithm">
                一个对 XML 进行加密的加密算法。
              </param>
      <param name="iv">
                一个 <see cref="T:System.Byte" /> 数组，它包含指定算法的初始化向量 (<see langword="IV" />)。
              </param>
      <returns>
              一个表示加密转换的 <see cref="T:System.Security.Cryptography.ICryptoTransform" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetIVSize(System.String)">
      <summary>
              在派生类中重写时，获取指定的加密算法所需的初始化向量 (<see langword="IV" />) 的大小（以位为单位）。
            </summary>
      <param name="algorithm">
                用于获取初始化向量 (<see langword="IV" />) 的大小的加密算法。
              </param>
      <returns>
              <see langword="IV" /> 参数中指定的加密算法所需的初始化向量 (<paramref name="algorithm" />) 的大小（以位为单位）。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)">
      <summary>
              在派生类中重写时，获取指定的加密哈希算法的实例。
            </summary>
      <param name="algorithm">
                要获取其实例的加密哈希算法。
              </param>
      <returns>
              一个表示加密哈希算法的 <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricAlgorithm(System.String)">
      <summary>
              在派生类中重写时，获取指定的对称算法的实例。
            </summary>
      <param name="algorithm">
                要获取其实例的对称算法。
              </param>
      <returns>
              一个表示对称算法的 <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricKey">
      <summary>
              在派生类中重写时，获取表示对称密钥的字节。
            </summary>
      <returns>
              包含对称密钥的 <see cref="T:System.Byte" /> 数组。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.TokenReplayCache.#ctor">
      <summary>
              从构造函数初始化派生类中调用 <see cref="T:System.IdentityModel.Tokens.TokenReplayCache" />类。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.TokenReplayCache.AddOrUpdate(System.String,System.IdentityModel.Tokens.SecurityToken,System.DateTime)">
      <summary>
              在派生类中重写，当尝试添加新项或更新和现有条目。
            </summary>
      <param name="key">
                要在添加项时使用的键。
              </param>
      <param name="securityToken">
                若要添加到缓存中，该标记会 <see langword="null" />。
              </param>
      <param name="expirationTime">
                项的过期时间。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.TokenReplayCache.Contains(System.String)">
      <summary>
              当在派生类中重写时返回一个值，该值指示是否在缓存中存在一个匹配项。
            </summary>
      <param name="key">
                要搜索的键。
              </param>
      <returns>
              <see langword="true" /> 匹配的项是否位于缓存中;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.TokenReplayCache.Get(System.String)">
      <summary>
              当在派生类中重写，尝试获取指定的项。
            </summary>
      <param name="key">
                要搜索的键。
              </param>
      <returns>
              与键匹配的标记或 <see langword="null" /> 如果不找到任何标记。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.TokenReplayCache.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>
              当在派生类中重写，则从指定的 XML 加载自定义配置。
            </summary>
      <param name="nodelist">
                自定义配置 XML 元素。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.TokenReplayCache.Remove(System.String)">
      <summary>
              当在派生类中重写，尝试从缓存中移除一个项。
            </summary>
      <param name="key">
                标识要移除的项的键。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.UserNameSecurityToken.#ctor(System.String,System.String)">
      <summary>
              使用指定的用户名和密码初始化 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 类的新实例。
            </summary>
      <param name="userName">
                用户名。
                 设置 <see cref="P:System.IdentityModel.Tokens.UserNameSecurityToken.UserName" /> 属性。
              </param>
      <param name="password">
                用户名的密码。
                 设置 <see cref="P:System.IdentityModel.Tokens.UserNameSecurityToken.Password" /> 属性。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="userName" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="password" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.UserNameSecurityToken.#ctor(System.String,System.String,System.String)">
      <summary>
              使用指定的用户名、密码和唯一标识符来初始化 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 类的新实例。
            </summary>
      <param name="userName">
                用户名。
                 设置 <see cref="P:System.IdentityModel.Tokens.UserNameSecurityToken.UserName" /> 属性。
              </param>
      <param name="password">
                用户名的密码。
                 设置 <see cref="P:System.IdentityModel.Tokens.UserNameSecurityToken.Password" /> 属性。
              </param>
      <param name="id">
                安全令牌的唯一标识符。
                 设置 <see cref="P:System.IdentityModel.Tokens.UserNameSecurityToken.Id" /> 属性。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="userName" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="password" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="id" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.UserNameSecurityTokenHandler.#ctor">
      <summary>
              从构造函数初始化派生类中调用 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityTokenHandler" /> 类。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.UserNameSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
      <summary>
              指示是否可以为读取当前 XML 元素 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" />。
            </summary>
      <param name="reader">
                XML 读取器定位在开始元素。
                 读取器不应将前移。
              </param>
      <returns>
              <see langword="true" /> 如果读取器指向 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.UserNameSecurityTokenHandler.GetTokenTypeIdentifiers">
      <summary>
              返回包含 Uri 用于在请求中标识此处理程序可以处理的类型的令牌。
            </summary>
      <returns>
              用于标识此处理程序支持的令牌类型 Uri 集。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.UserNameSecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
      <summary>
              读取 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 从指定的读取器。
            </summary>
      <param name="reader">
                XML 读取器定位标记的开始元素处。
              </param>
      <returns>
              从 XML 进行反序列化对用户名安全令牌。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  无法读取令牌。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  密码不是以纯文本格式。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  安全令牌中发现一个未知的元素或未指定用户名。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.UserNameSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              将序列化为指定 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 为 XML。
            </summary>
      <param name="writer">
                要用来序列化令牌的 XML 编写器。
              </param>
      <param name="token">
                要序列化的标记。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="writer" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="token" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="token" /> 不能从分配 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.WindowsSecurityToken.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.WindowsSecurityToken" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.WindowsSecurityToken.#ctor(System.Security.Principal.WindowsIdentity)">
      <summary>
              使用 Windows 用户初始化 <see cref="T:System.IdentityModel.Tokens.WindowsSecurityToken" /> 类的新实例。
            </summary>
      <param name="windowsIdentity">
                一个表示 Windows 用户的 <see cref="T:System.Security.Principal.WindowsIdentity" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="windowsIdentity" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.WindowsSecurityToken.#ctor(System.Security.Principal.WindowsIdentity,System.String)">
      <summary>
              使用 Windows 用户初始化 <see cref="T:System.IdentityModel.Tokens.WindowsSecurityToken" /> 类的新实例。
            </summary>
      <param name="windowsIdentity">
                一个表示 Windows 用户的 <see cref="T:System.Security.Principal.WindowsIdentity" />。
              </param>
      <param name="id">
                安全令牌的唯一标识符。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="windowsIdentity" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="id" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.WindowsSecurityToken.#ctor(System.Security.Principal.WindowsIdentity,System.String,System.String)">
      <summary>
              创建 <see cref="T:System.IdentityModel.Tokens.WindowsSecurityToken" /> 的新实例。
            </summary>
      <param name="windowsIdentity">
                一个表示 Windows 用户的 <see cref="T:System.Security.Principal.WindowsIdentity" />。
              </param>
      <param name="id">
                安全令牌的唯一标识符。
              </param>
      <param name="authenticationType">
                安全令牌的身份验证类型。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.WindowsSecurityToken.Dispose">
      <summary>
              释放由 <see cref="T:System.IdentityModel.Tokens.WindowsSecurityToken" /> 使用的所有资源。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.WindowsSecurityToken.Initialize(System.String,System.DateTime,System.DateTime,System.Security.Principal.WindowsIdentity,System.Boolean)">
      <summary>
              使用指定的唯一标识符、Windows 用户以及安全令牌有效的最初时刻和最后时刻来初始化 <see cref="T:System.IdentityModel.Tokens.WindowsSecurityToken" /> 类的新实例。
            </summary>
      <param name="id">
                安全令牌的唯一标识符。
                 设置 <see cref="P:System.IdentityModel.Tokens.WindowsSecurityToken.Id" /> 属性的值。
              </param>
      <param name="effectiveTime">
                一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最初时刻。
                 请设置 <see cref="P:System.IdentityModel.Tokens.WindowsSecurityToken.ValidFrom" /> 属性的值。
              </param>
      <param name="expirationTime">
                一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最后时刻。
                 设置 <see cref="P:System.IdentityModel.Tokens.WindowsSecurityToken.ValidTo" /> 属性的值。
              </param>
      <param name="windowsIdentity">
                一个表示 Windows 用户的 <see cref="T:System.Security.Principal.WindowsIdentity" />。
                 设置 <see cref="P:System.IdentityModel.Tokens.WindowsSecurityToken.WindowsIdentity" /> 属性的值。
              </param>
      <param name="clone">
                若要创建与 <see langword="true" /> 参数相同的 <see cref="T:System.Security.Principal.WindowsIdentity" /> 对象并将其分配给 <paramref name="windowsIdentity" /> 属性，则为 <see cref="P:System.IdentityModel.Tokens.WindowsSecurityToken.WindowsIdentity" />；否则，将 <paramref name="windowsIdentity" /> 参数的值分配给 <see cref="P:System.IdentityModel.Tokens.WindowsSecurityToken.WindowsIdentity" /> 属性。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="windowsIdentity" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="id" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.WindowsSecurityToken.Initialize(System.String,System.String,System.DateTime,System.DateTime,System.Security.Principal.WindowsIdentity,System.Boolean)">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.WindowsSecurityToken" /> 类的新实例。
            </summary>
      <param name="id">
                安全令牌的唯一标识符。
              </param>
      <param name="authenticationType">
                安全令牌的身份验证类型。
              </param>
      <param name="effectiveTime">
                一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最初时刻。
              </param>
      <param name="expirationTime">
                一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最后时刻。
              </param>
      <param name="windowsIdentity">
                表示 Windows 用户。
              </param>
      <param name="clone">
                若要创建与 <see langword="true" /> 参数相同的 <see cref="T:System.Security.Principal.WindowsIdentity" /> 对象并将其分配给 <paramref name="windowsIdentity" /> 属性，则为 <paramref name="WindowsIdentity" />；否则，将 <paramref name="windowsIdentity" /> 参数的值分配给 <paramref name="WindowsIdentity" /> 属性。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.WindowsSecurityToken.ThrowIfDisposed">
      <summary>
              如果已为此实例调用了 <see cref="M:System.IdentityModel.Tokens.WindowsSecurityToken.Dispose" /> 方法，则会引发异常。
            </summary>
      <exception cref="T:System.ObjectDisposedException">
                  已为此实例调用了 <see cref="M:System.IdentityModel.Tokens.WindowsSecurityToken.Dispose" /> 方法。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.WindowsUserNameSecurityTokenHandler.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.WindowsUserNameSecurityTokenHandler" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.WindowsUserNameSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              验证指定的标记并返回其声明。
            </summary>
      <param name="token">
                要验证的标记。
                <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 的一个实例。
              </param>
      <returns>
              令牌中包含的标识。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="token" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="token" /> 不能从分配 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" />。
                
                  - 或 -
                
                  <see cref="P:System.IdentityModel.Tokens.UserNameSecurityToken.UserName" /> 属性指定的标记不是窗体的 user\domain。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 属性为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException">
                  使用指定的标记的 LogonUser 失败。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509AsymmetricSecurityKey.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
              使用指定的 X.509 证书初始化 <see cref="T:System.IdentityModel.Tokens.X509AsymmetricSecurityKey" /> 类的新实例。
            </summary>
      <param name="certificate">
                表示 X.509 证书的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="certificate" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509AsymmetricSecurityKey.DecryptKey(System.String,System.Byte[])">
      <summary>
              使用指定的加密算法解密指定的加密密钥。
            </summary>
      <param name="algorithm">
                用于解密密钥的加密算法。
              </param>
      <param name="keyData">
                包含加密密钥的 <see cref="T:System.Byte" /> 数组。
              </param>
      <returns>
              包含解密密钥的 <see cref="T:System.Byte" /> 数组。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  构造函数中指定的 X.509 证书不具有私钥。
                
                  - 或 -
                
                  X.509 证书具有私钥，但它不是使用 <see cref="T:System.Security.Cryptography.RSA" /> 算法生成的。
                
                  - 或 -
                
                  X.509 证书具有私钥，并且是使用 <see cref="T:System.Security.Cryptography.RSA" /> 算法生成的，但是 <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm" /> 属性为 <see langword="null" />。
                
                  - 或 -
                
                  不支持 <paramref name="algorithm" /> 参数。
                   支持的算法为 <see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSA15Url" /> 和 <see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSAOAEPUrl" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509AsymmetricSecurityKey.EncryptKey(System.String,System.Byte[])">
      <summary>
              使用指定的加密算法加密指定的加密密钥。
            </summary>
      <param name="algorithm">
                用于加密密钥的加密算法。
              </param>
      <param name="keyData">
                包含要加密的密钥的 <see cref="T:System.Byte" /> 数组。
              </param>
      <returns>
              包含加密密钥的 <see cref="T:System.Byte" /> 数组。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  构造函数中指定的 X.509 证书所具有的公钥不是使用 <see cref="T:System.Security.Cryptography.RSA" /> 算法生成的。
                
                  - 或 -
                
                  不支持 <paramref name="algorithm" /> 参数。
                   支持的算法为 <see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSA15Url" /> 和 <see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSAOAEPUrl" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetAsymmetricAlgorithm(System.String,System.Boolean)">
      <summary>
              获取指定的非对称加密算法。
            </summary>
      <param name="algorithm">
                要创建的非对称算法。
              </param>
      <param name="privateKey">
                如果需要使用私钥来创建算法，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
      <returns>
              一个 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" />，表示指定的非对称加密算法。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  <paramref name="privateKey" /> 为 <see langword="true" />，并且构造函数中指定的 X.509 证书不具有私钥。
                
                  - 或 -
                
                  <paramref name="algorithm" /> 为 <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" />，并且构造函数中指定的 X.509 证书的公钥或私钥类型不是 <see cref="T:System.Security.Cryptography.DSA" />。
                
                  - 或 -
                
                  <paramref name="algorithm" /> 为 <see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSA15Url" />、<see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSAOAEPUrl" />、<see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" /> 或 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" />，并且构造函数中指定的 X.509 证书的公钥或私钥类型不是 <see cref="T:System.Security.Cryptography.RSA" />。
                
                  - 或 -
                
                  不支持 <paramref name="algorithm" />。
                   支持的算法为 <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" />、<see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSA15Url" />、<see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSAOAEPUrl" />、<see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" /> 和 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetHashAlgorithmForSignature(System.String)">
      <summary>
              获取用于生成数字签名的哈希值的加密算法。
            </summary>
      <param name="algorithm">
                哈希算法。
              </param>
      <returns>
              一个 <see cref="T:System.Security.Cryptography.HashAlgorithm" />，它生成数字签名的哈希值。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  不支持 <paramref name="algorithm" />。
                   支持的算法为 <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" />、<see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" /> 和 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetSignatureDeformatter(System.String)">
      <summary>
              获取数字签名的反格式化程序算法。
            </summary>
      <param name="algorithm">
                要获取其实例的数字签名的反格式化程序算法。
              </param>
      <returns>
              一个 <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" />，它表示数字签名的反格式化程序算法。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  <paramref name="algorithm" /> 为 <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" />，并且构造函数中指定的 X.509 证书的公钥类型不是 <see cref="T:System.Security.Cryptography.DSA" />。
                
                  - 或 -
                
                  <paramref name="algorithm" /> 为 <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" /> 或 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" />，并且构造函数中指定的 X.509 证书的公钥类型不是 <see cref="T:System.Security.Cryptography.RSA" />。
                
                  - 或 -
                
                  不支持 <paramref name="algorithm" />。
                   支持的算法为 <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" />、
                
                  <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" /> 和 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetSignatureFormatter(System.String)">
      <summary>
              获取数字签名的格式化程序算法。
            </summary>
      <param name="algorithm">
                要获取其实例的数字签名的格式化程序算法。
              </param>
      <returns>
              一个 <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" />，它表示数字签名的格式化程序算法。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  构造函数中指定的 X.509 证书不具有私钥。
                
                  - 或 -
                
                  <paramref name="algorithm" /> 为 <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" />，并且构造函数中指定的 X.509 证书的私钥类型不是 <see cref="T:System.Security.Cryptography.DSA" />。
                
                  - 或 -
                
                  <paramref name="algorithm" /> 为 <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" /> 或 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" />，并且构造函数中指定的 X.509 证书的私钥类型不是 <see cref="T:System.Security.Cryptography.RSA" />。
                
                  - 或 -
                
                  不支持 <paramref name="algorithm" />。
                   支持的算法为 <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" />、
                
                  <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" /> 和 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509AsymmetricSecurityKey.HasPrivateKey">
      <summary>
              获取一个值，该值指示该私钥是否可用。
            </summary>
      <returns>
              如果私钥可用，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509AsymmetricSecurityKey.IsAsymmetricAlgorithm(System.String)">
      <summary>
              获取一个值，该值指示指定的算法是否使用非对称密钥。
            </summary>
      <param name="algorithm">
                加密算法。
              </param>
      <returns>
              如果指定的算法为 <see langword="true" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.DsaSha1Signature" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" /> 或 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaOaepKeyWrap" />，则为 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaV15KeyWrap" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509AsymmetricSecurityKey.IsSupportedAlgorithm(System.String)">
      <summary>
              获取一个值，该值指示此类是否支持指定的算法。
            </summary>
      <param name="algorithm">
                加密算法。
              </param>
      <returns>
              如果指定的算法为 <see langword="true" />、<see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl" />、<see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSA15Url" />、<see cref="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSAOAEPUrl" /> 或 <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url" />，并且公钥的类型是正确的，则为 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature" />；否则为 <see langword="false" />。
               有关详细信息，请参见备注。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509AsymmetricSecurityKey.IsSymmetricAlgorithm(System.String)">
      <summary>
              获取一个值，该值指示指定的算法是否使用对称密钥。
            </summary>
      <param name="algorithm">
                加密算法。
              </param>
      <returns>
              如果指定的算法为 <see langword="true" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap" />、<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap" /> 或 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap" />，则为 <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509CertificateStoreTokenResolver.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.X509CertificateStoreTokenResolver" /> 类，具有默认 X.509 证书存储区。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509CertificateStoreTokenResolver.#ctor(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.X509CertificateStoreTokenResolver" /> 类，该类使用 X.509 证书存储与指定的位置和名称解析标记。
            </summary>
      <param name="storeName">
                存储指定的 X.509 证书的名称的枚举值之一。
              </param>
      <param name="storeLocation">
                存储指定的 X.509 证书的位置的枚举值之一。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509CertificateStoreTokenResolver.#ctor(System.String,System.Security.Cryptography.X509Certificates.StoreLocation)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.X509CertificateStoreTokenResolver" /> 类，该类使用 X.509 证书存储与指定的位置和名称解析标记。
            </summary>
      <param name="storeName">
                X.509 证书存储区的名称。
              </param>
      <param name="storeLocation">
                存储指定的 X.509 证书的位置的枚举值之一。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="storeLocation" /> 为 <see langword="null" /> 或空字符串。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509CertificateStoreTokenResolver.TryResolveSecurityKeyCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)">
      <summary>
              尝试将指定的密钥标识符子句解析为安全密钥。
            </summary>
      <param name="keyIdentifierClause">
                要在其中解析安全密钥的密钥标识符子句。
              </param>
      <param name="key">
                此方法返回时，包含已从密钥标识符子句解析安全密钥。
                 该参数未经初始化即被处理。
              </param>
      <returns>
              <see langword="true" /> 如果密钥标识符子句，则成功解析;否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="keyIdentifierClause" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509CertificateStoreTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>
              将指定的密钥标识符解析为安全令牌。
            </summary>
      <param name="keyIdentifier">
                要解析的密钥标识符。
              </param>
      <param name="token">
                此方法返回时，包含从密钥标识符已得到解决的安全令牌。
                 该参数未经初始化即被处理。
              </param>
      <returns>
              <see langword="true" /> 如果密钥标识符是否成功解析;否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="keyIdentifier" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509CertificateStoreTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>
              将指定的密钥标识符子句解析为安全令牌。
            </summary>
      <param name="keyIdentifierClause">
                若要解决的密钥标识符子句。
              </param>
      <param name="token">
                此方法返回时，包含已从密钥标识符子句解析的安全令牌。
                 该参数未经初始化即被处理。
              </param>
      <returns>
              <see langword="true" /> 如果密钥标识符子句，则成功解析;否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="keyIdentifierClause" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509DataSecurityKeyIdentifierClauseSerializer.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.X509DataSecurityKeyIdentifierClauseSerializer" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509DataSecurityKeyIdentifierClauseSerializer.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>
              返回一个值，该值指示是否指定的读取器定位在 <see langword="&lt;ds:X509Data&gt;" /> 元素。
            </summary>
      <param name="reader">
                密钥标识符子句的开始元素处 XML 读取器。
              </param>
      <returns>
              <see langword="true" /> 如果读取器指向 <see langword="&lt;ds:X509Data&gt;" /> 元素; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509DataSecurityKeyIdentifierClauseSerializer.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              返回一个值，该值指示指定的密钥标识符子句是否可以序列化此处理程序。
            </summary>
      <param name="securityKeyIdentifierClause">
                要检查的密钥标识符子句。
              </param>
      <returns>
              <see langword="true" /> 如果密钥标识符子句支持此处理程序;否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="securityKeyIdentifierClause" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509DataSecurityKeyIdentifierClauseSerializer.ReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>
              使用指定的 XML 读取器反序列 XML 中的密钥标识符子句。
            </summary>
      <param name="reader">
                XML 读取器的密钥标识符子句的开始元素处读取。
              </param>
      <returns>
              从 XML 进行反序列化的密钥标识符子句或 <see langword="null" /> 如果无法读取密钥标识符子句。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="reader" /> 未置于 <see langword="&lt;ds:X509Data&gt;" /> 元素。
                   ( <see cref="M:System.IdentityModel.Tokens.X509DataSecurityKeyIdentifierClauseSerializer.CanReadKeyIdentifierClause(System.Xml.XmlReader)" /> 方法将返回 <see langword="false" />。)
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509DataSecurityKeyIdentifierClauseSerializer.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              将序列化为指定的密钥标识符子句。
            </summary>
      <param name="writer">
                要用来序列化密钥标识符子句的 XML 编写器。
              </param>
      <param name="securityKeyIdentifierClause">
                要序列化密钥标识符子句。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="securityKeyIdentifierClause" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="securityKeyIdentifierClause" /> 不受支持的子句类型。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509EncryptingCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.X509EncryptingCredentials" /> 类根据指定的 X.509 证书。
            </summary>
      <param name="certificate">
                X.509 证书。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509EncryptingCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.X509EncryptingCredentials" /> 类根据指定 X.509 证书和安全的密钥标识符。
            </summary>
      <param name="certificate">
                X.509 证书。
              </param>
      <param name="ski">
                安全密钥标识符。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509EncryptingCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.IdentityModel.Tokens.SecurityKeyIdentifier,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.X509EncryptingCredentials" /> 类根据指定的 X.509 证书、 密钥换行算法和安全密钥标识符。
            </summary>
      <param name="certificate">
                X.509 证书。
              </param>
      <param name="ski">
                安全密钥标识符。
              </param>
      <param name="keyWrappingAlgorithm">
                密钥包装算法。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509EncryptingCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.X509EncryptingCredentials" /> 类根据指定的 X.509 证书和密钥包装算法。
            </summary>
      <param name="certificate">
                X.509 证书。
              </param>
      <param name="keyWrappingAlgorithm">
                密钥包装算法。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
              使用指定的 X.509 证书初始化 <see cref="T:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause" /> 类的新实例。
            </summary>
      <param name="certificate">
                一个包含 X.509 证书的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="certificate" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.#ctor(System.String,System.String)">
      <summary>
              使用指定的证书颁发者可分辨名称和 X.509 证书的序列号初始化 <see cref="T:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause" /> 类的新实例。
            </summary>
      <param name="issuerName">
                颁发 X.509 证书的证书颁发机构的可分辨名称。
                 设置 <see cref="P:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.IssuerName" /> 属性的值。
              </param>
      <param name="issuerSerialNumber">
                X.509 证书的序列号。
                 设置 <see cref="P:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.IssuerSerialNumber" /> 属性的值。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="issuerName" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="issuerSerialNumber" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              返回一个值，该值指示此实例的密钥标识符是否与指定的密钥标识符相匹配。
            </summary>
      <param name="keyIdentifierClause">
                要与此实例进行比较的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。
              </param>
      <returns>
              如果 <see langword="true" /> 为 <paramref name="keyIdentifierClause" /> 类型，并且密钥标识符子句匹配，则为 <see cref="T:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.Matches(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
              返回一个值，该值指示此实例的密钥标识符是否与指定的 X.509 证书相匹配。
            </summary>
      <param name="certificate">
                一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />，包含要进行比较的 X.509 证书。
              </param>
      <returns>
              如果 <see langword="true" /> 具有与当前实例相同的颁发者名称和颁发者序列号，则为 <paramref name="certificate" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.Matches(System.String,System.String)">
      <summary>
              返回一个值，该值指示此实例的密钥标识符是否与指定的颁发者名称和颁发者序列号相同。
            </summary>
      <param name="issuerName">
                颁发 X.509 证书的证书颁发机构的可分辨名称。
              </param>
      <param name="issuerSerialNumber">
                X.509 证书的序列号。
              </param>
      <returns>
              如果 <see langword="true" />和 <paramref name="issuerName " /> 参数与 <paramref name="issuerSerialNumber" /> 和 <see cref="P:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.IssuerName" /> 属性匹配，则为 <see cref="P:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.IssuerSerialNumber" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.ToString">
      <summary>
              返回当前对象。
            </summary>
      <returns>
              一个表示当前对象的 <see cref="T:System.String" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509NTAuthChainTrustValidator.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.X509NTAuthChainTrustValidator" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509NTAuthChainTrustValidator.#ctor(System.Boolean,System.Security.Cryptography.X509Certificates.X509ChainPolicy)">
      <summary>
              初始化 <see cref="T:System.IdentityModel.Tokens.X509NTAuthChainTrustValidator" /> 类的新实例。
            </summary>
      <param name="useMachineContext">
                <see langword="true" /> 使用本地计算机上下文来构建证书链中;否则为 <see langword="false" />。
              </param>
      <param name="chainPolicy">
                生成 X.509 证书链时要使用链策略。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509NTAuthChainTrustValidator.Validate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
              验证指定的 X.509 证书。
            </summary>
      <param name="certificate">
                要验证的 X.509 证书。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="certificate" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException">
                  X.509 证书验证失败。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause.#ctor(System.Byte[])">
      <summary>
              使用指定的 X.509 证书原始数据初始化 <see cref="T:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause" /> 类的新实例。
            </summary>
      <param name="certificateRawData">
                包含 X.509 证书的原始数据的 <see cref="T:System.Byte" /> 数组。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="certificateRawData" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="certificateRawData" /> 的长度为零。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
              使用指定的 X.509 证书初始化 <see cref="T:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause" /> 类的新实例。
            </summary>
      <param name="certificate">
                一个包含 X.509 证书的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="certificate" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause.CreateKey">
      <summary>
              从 X.509 证书的原始数据或从构造函数中指定的字节数组创建密钥。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.X509AsymmetricSecurityKey" />，它包含与 X.509 证书相关联的密钥。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause.GetX509RawData">
      <summary>
              获取与 X.509 证书相关联的原始数据。
            </summary>
      <returns>
              包含与 X.509 证书相关联的原始数据的 <see cref="T:System.Byte" /> 数组。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause.Matches(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
              返回一个值，该值指示此实例的密钥标识符是否与指定的 X.509 证书相等。
            </summary>
      <param name="certificate">
                一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />，包含要进行比较的 X.509 证书。
              </param>
      <returns>
              如果 <see langword="true" /> 具有与当前实例相匹配的原始数据，则为 <paramref name="certificate" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="certificate" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause.ToString">
      <summary>
              返回当前对象。
            </summary>
      <returns>
              一个表示当前对象的 <see cref="T:System.String" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityToken.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
              使用指定的 X.509 证书初始化 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> 类的新实例。
            </summary>
      <param name="certificate">
                一个包含 X.509 证书的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。
                 设置 <see cref="P:System.IdentityModel.Tokens.X509SecurityToken.Certificate" /> 属性。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="certificate" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityToken.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String)">
      <summary>
              使用指定的 X.509 证书和唯一标识符初始化 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> 类的新实例。
            </summary>
      <param name="certificate">
                一个包含 X.509 证书的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。
                 设置 <see cref="P:System.IdentityModel.Tokens.X509SecurityToken.Certificate" /> 属性。
              </param>
      <param name="id">
                安全令牌的唯一标识符。
                 设置 <see cref="P:System.IdentityModel.Tokens.X509SecurityToken.Id" /> 属性。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="certificate" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="id" /> 为 null。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityToken.CanCreateKeyIdentifierClause``1">
      <summary>
              获取一个值，该值指示此安全令牌能否创建指定的密钥标识符。
            </summary>
      <typeparam name="T">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，指定要创建的密钥标识符。
              </typeparam>
      <returns>
              如果 <see langword="true" /> 的类型为 <paramref name="T" />、<see cref="T:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause" />、<see cref="T:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause" /> 或 <see cref="T:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause" />，则为 <see cref="T:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityToken.CreateKeyIdentifierClause``1">
      <summary>
              创建指定的密钥标识符子句。
            </summary>
      <typeparam name="T">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，指定要创建的密钥标识符。
              </typeparam>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，它是安全令牌的密钥标识符子句。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityToken.Dispose">
      <summary>
              释放由 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> 使用的所有资源。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              返回一个值，该值指示此实例的密钥标识符与指定的密钥标识符是否相等。
            </summary>
      <param name="keyIdentifierClause">
                一个要与此实例进行比较的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。
              </param>
      <returns>
              如果 <see langword="true" /> 为 <paramref name="keyIdentifierClause" />、<see cref="T:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause" />、<see cref="T:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause" /> 或 <see cref="T:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause" /> 类型之一，并且密钥标识符子句匹配，则为 <see cref="T:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityToken.ThrowIfDisposed">
      <summary>
              如果已为此实例调用了 <see cref="M:System.IdentityModel.Tokens.X509SecurityToken.ThrowIfDisposed" /> 方法，则会引发异常。
            </summary>
      <exception cref="T:System.ObjectDisposedException">
                  <see cref="M:System.IdentityModel.Tokens.X509SecurityToken.ThrowIfDisposed" />  已为此实例调用方法。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.#ctor">
      <summary>
              使用默认值初始化 <see cref="T:System.IdentityModel.Tokens.X509SecurityTokenHandler" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.#ctor(System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.X509SecurityTokenHandler" /> 类通过使用一个值，该值指示证书是否应映射到 Windows 帐户。
            </summary>
      <param name="mapToWindows">
                <see langword="true" /> 如果该证书应映射到 Windows 帐户;否则为 <see langword="false" />。
                 设置 <see cref="P:System.IdentityModel.Tokens.X509SecurityTokenHandler.MapToWindows" /> 属性。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.#ctor(System.Boolean,System.IdentityModel.Selectors.X509CertificateValidator)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.X509SecurityTokenHandler" /> 类使用的值，该值指示是否应将证书映射到 Windows 帐户和指定的证书验证程序。
            </summary>
      <param name="mapToWindows">
                <see langword="true" /> 如果该证书应映射到 Windows 帐户;否则为 <see langword="false" />。
                 设置 <see cref="P:System.IdentityModel.Tokens.X509SecurityTokenHandler.MapToWindows" /> 属性。
              </param>
      <param name="certificateValidator">
                要使用的证书验证程序。
                 设置 <see cref="P:System.IdentityModel.Tokens.X509SecurityTokenHandler.CertificateValidator" /> 属性。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.#ctor(System.IdentityModel.Selectors.X509CertificateValidator)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.X509SecurityTokenHandler" /> 通过使用指定的证书验证程序类。
            </summary>
      <param name="certificateValidator">
                要使用的证书验证程序。
                 设置 <see cref="P:System.IdentityModel.Tokens.X509SecurityTokenHandler.CertificateValidator" /> 属性。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>
              返回一个值，该值指示指定的读取器所指 <see langword="&lt;ds:X509Data&gt;" /> 元素。
            </summary>
      <param name="reader">
                密钥标识符子句的开始元素处 XML 读取器。
              </param>
      <returns>
              <see langword="true" /> 如果读取器指向 <see langword="&lt;ds:X509Data&gt;" /> 元素; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
      <summary>
              返回一个值，该值指示在 Ws-security 规范中定义是否将读取器指向的 X.509 安全令牌。
            </summary>
      <param name="reader">
                指向将令牌 XML 读取器。
              </param>
      <returns>
              <see langword="true" /> 如果读取器指向 X.509 安全令牌。否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              返回一个值，该值指示指定的密钥标识符子句是否可以序列化此处理程序。
            </summary>
      <param name="securityKeyIdentifierClause">
                要序列化密钥标识符子句。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="securityKeyIdentifierClause" /> 支持，如果 <see cref="P:System.IdentityModel.Tokens.X509SecurityTokenHandler.WriteXmlDSigDefinedClauseTypes" /> 属性设置为 <see langword="true" />; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="securityKeyIdentifierClause" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.GetTokenTypeIdentifiers">
      <summary>
              获取 Ws-security X.509 令牌配置文件中定义的 X.509 安全令牌类型。
            </summary>
      <returns>
              X.509 令牌类型 URI。
               默认情况下，值 <see cref="P:System.IdentityModel.Tokens.SecurityTokenTypes.X509Certificate" /> 属性。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>
              从 XML 加载自定义配置。
            </summary>
      <param name="customConfigElements">
                包含自定义配置的 XML 元素。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="customConfigElements" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  指定的自定义配置不正确。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)">
      <summary>
              反序列化指定的 XML 阅读器引用的密钥标识符子句。
            </summary>
      <param name="reader">
                XML 读取器引用的密钥标识符子句。
              </param>
      <returns>
              从 XML 进行反序列化密钥标识符子句。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
      <summary>
              反序列化由指定的 XML 阅读器引用的 X.509 安全令牌。
            </summary>
      <param name="reader">
                指向一个 X.509 安全令牌 XML 读取器。
              </param>
      <returns>
              从 XML 反序列化安全令牌。
              <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> 的一个实例。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="reader" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  <paramref name="reader" /> 没有指向有效的 X.509 安全令牌在 Ws-security X.509 令牌配置文件中定义。
                   或指定 encodingType Base64 或 HexBinary 以外。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              验证指定的 X.509 安全令牌。
            </summary>
      <param name="token">
                要验证的标记。
              </param>
      <returns>
              在令牌中包含的标识。
            </returns>
      <exception cref="T:System.ArgumentException">
                  <paramref name="token" /> 不能从分配 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="token" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 属性为 <see langword="null" />。
                
                  - 或 -
                
                  没有任何颁发者名称注册表 (<see cref="T:System.IdentityModel.Tokens.IssuerNameRegistry" />) 配置。
                   ( <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerNameRegistry" /> 属性 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" /> 所引用的 <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 属性是 <see langword="null" />。)
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException">
                  当前 <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" /> 程序无法验证令牌中的证书。
                </exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">
                  当前 <see cref="T:System.IdentityModel.Tokens.IssuerNameRegistry" /> 返回 <see langword="null" /> 在尝试解析令牌中证书的颁发者。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              序列化到 XML 编写器指定的密钥标识符子句。
            </summary>
      <param name="writer">
                密钥标识符子句应序列化到 XML 编写器。
              </param>
      <param name="securityKeyIdentifierClause">
                要序列化密钥标识符子句。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="securityKeyIdentifierClause" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.IdentityModel.Tokens.X509SecurityTokenHandler.WriteXmlDSigDefinedClauseTypes" /> 属性为 <see langword="false" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              将指定的 XML 编写器指定的 X.509 安全令牌序列化。
            </summary>
      <param name="writer">
                令牌应序列化到 XML 编写器。
              </param>
      <param name="token">
                要序列化的 X.509 安全令牌。
                <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> 的一个实例。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="token" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="writer" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="token" /> 不能从分配 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.X509SigningCredentials" /> 类根据指定的 X.509 证书。
            </summary>
      <param name="certificate">
                X.509 证书。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.X509SigningCredentials" /> 类根据指定 X.509 证书和安全的密钥标识符。
            </summary>
      <param name="certificate">
                X.509 证书。
              </param>
      <param name="ski">
                安全密钥标识符。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.IdentityModel.Tokens.SecurityKeyIdentifier,System.String,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.X509SigningCredentials" /> 类根据指定的 X.509 证书、 安全密钥标识符、 签名算法和摘要算法。
            </summary>
      <param name="certificate">
                X.509 证书。
              </param>
      <param name="ski">
                安全密钥标识符。
              </param>
      <param name="signatureAlgorithm">
                签名算法。
              </param>
      <param name="digestAlgorithm">
                摘要算法。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.Tokens.X509SigningCredentials" /> 类根据指定的 X.509 证书、 签名算法和摘要算法。
            </summary>
      <param name="certificate">
                X.509 证书。
              </param>
      <param name="signatureAlgorithm">
                签名算法。
              </param>
      <param name="digestAlgorithm">
                摘要算法。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause.#ctor(System.Byte[])">
      <summary>
              使用指定的主题密钥标识符初始化 <see cref="T:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause" /> 类的新实例。
            </summary>
      <param name="ski">
                一个 <see cref="T:System.Byte" /> 数组，它包含主题密钥标识符。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="ski" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause.CanCreateFrom(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
              获取一个值，该值指示是否可以为指定的 X.509 证书创建密钥标识符子句。
            </summary>
      <param name="certificate">
                一个包含 X.509 证书的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。
              </param>
      <returns>
              如果可以为 <see langword="true" /> 创建密钥标识符子句，则为 <paramref name="certificate" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="certificate" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause.GetX509SubjectKeyIdentifier">
      <summary>
              获取主题密钥标识符。
            </summary>
      <returns>
              一个 <see cref="T:System.Byte" /> 数组，它包含主题密钥标识符。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause.Matches(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
              返回一个值，该值指示此实例的密钥标识符是否与指定 X.509 证书的密钥标识符等效。
            </summary>
      <param name="certificate">
                一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />，包含要进行比较的 X.509 证书。
              </param>
      <returns>
              如果 <see langword="true" /> 与当前实例具有相同的主题密钥标识符，则为 <paramref name="certificate" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="certificate" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause.ToString">
      <summary>
              返回表示当前对象的字符串。
            </summary>
      <returns>
              一个表示当前对象的 <see cref="T:System.String" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause.TryCreateFrom(System.Security.Cryptography.X509Certificates.X509Certificate2,System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause@)">
      <summary>
              使用指定的 X.509 证书创建密钥标识符子句。
            </summary>
      <param name="certificate">
                要为其创建密钥标识符子句的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。
              </param>
      <param name="keyIdentifierClause">
                当此方法返回时，它包含一个表示密钥标识符子句的 <see cref="T:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause" />。
                 此参数未经初始化即被传递。
              </param>
      <returns>
              如果可以为指定的 X.509 证书创建密钥标识符子句，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="certificate" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause.#ctor(System.Byte[])">
      <summary>
              使用 X.509 证书的指定指纹初始化 <see cref="T:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause" /> 类的新实例。
            </summary>
      <param name="thumbprint">
                一个 <see cref="T:System.Byte" /> 数组，包含 X.509 证书的指纹。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="thumbprint" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="thumbprint" /> 的长度为零。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
              使用指定的 X.509 证书初始化 <see cref="T:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause" /> 类的新实例。
            </summary>
      <param name="certificate">
                一个包含 X.509 证书的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="certificate" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause.GetX509Thumbprint">
      <summary>
              返回 X.509 证书的指纹。
            </summary>
      <returns>
              一个 <see cref="T:System.Byte" /> 数组，包含 X.509 证书的指纹。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause.Matches(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
              返回一个值，该值指示此实例的密钥标识符是否等效于指定 X.509 证书的指纹。
            </summary>
      <param name="certificate">
                一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />，包含要进行比较的 X.509 证书。
              </param>
      <returns>
              如果 <see langword="true" /> 与当前实例含有相同的指纹，则为 <paramref name="certificate" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause.ToString">
      <summary>
              返回表示当前对象的字符串。
            </summary>
      <returns>
              一个表示当前对象的 <see cref="T:System.String" />。
            </returns>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509WindowsSecurityToken.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Principal.WindowsIdentity)">
      <summary>
              使用指定的 X.509 证书和 Windows 域或计算机帐户来初始化 <see cref="T:System.IdentityModel.Tokens.X509WindowsSecurityToken" /> 类的新实例。
            </summary>
      <param name="certificate">
                一个包含 X.509 证书的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。
              </param>
      <param name="windowsIdentity">
                一个 <see cref="T:System.Security.Principal.WindowsIdentity" />，表示 Windows 域或计算机帐户的标识。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509WindowsSecurityToken.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Principal.WindowsIdentity,System.String)">
      <summary>
              使用指定的 X.509 证书、Windows 域或计算机帐户以及唯一标识符来初始化 <see cref="T:System.IdentityModel.Tokens.X509WindowsSecurityToken" /> 类的新实例。
            </summary>
      <param name="certificate">
                一个包含 X.509 证书的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。
              </param>
      <param name="windowsIdentity">
                一个 <see cref="T:System.Security.Principal.WindowsIdentity" />，表示 Windows 域或计算机帐户的标识。
              </param>
      <param name="id">
                安全令牌的唯一标识符。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509WindowsSecurityToken.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Principal.WindowsIdentity,System.String,System.String)">
      <summary>
              创建 <see cref="T:System.IdentityModel.Tokens.X509WindowsSecurityToken" /> 的新实例。
            </summary>
      <param name="certificate">
                一个包含 X.509 证书的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。
              </param>
      <param name="windowsIdentity">
                标识 Windows 域或计算机帐户的标识。
              </param>
      <param name="authenticationType">
                令牌的身份验证类型。
              </param>
      <param name="id">
                安全令牌的唯一标识符。
              </param>
    </member>
    <member name="M:System.IdentityModel.Tokens.X509WindowsSecurityToken.Dispose">
      <summary>
              释放由 <see cref="T:System.IdentityModel.Tokens.X509WindowsSecurityToken" /> 使用的所有资源。
            </summary>
    </member>
    <member name="M:System.IdentityModel.TypedAsyncResult`1.#ctor(System.AsyncCallback,System.Object)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.TypedAsyncResult`1" /> 具有回调委托和状态对象的类。
            </summary>
      <param name="callback">
                异步操作完成时调用的方法。
              </param>
      <param name="state">
                一个用户定义的对象，限定或包含有关异步操作的信息。
              </param>
    </member>
    <member name="M:System.IdentityModel.TypedAsyncResult`1.#ctor(System.Object)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.TypedAsyncResult`1" /> 具有的状态对象的类。
            </summary>
      <param name="state">
                一个用户定义的对象，限定或包含有关异步操作的信息。
              </param>
    </member>
    <member name="M:System.IdentityModel.TypedAsyncResult`1.Complete(`0,System.Boolean)">
      <summary>
              在异步操作完成，且未遇到异常，则调用此版本的完成。
               它将更新操作的状态，并通知回调。
            </summary>
      <param name="result">
                要包装的结果。
              </param>
      <param name="completedSynchronously">
                <see langword="true" /> 如果异步操作完成同步进行;否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.IdentityModel.TypedAsyncResult`1.Complete(`0,System.Boolean,System.Exception)">
      <summary>
              如果引发处理过程中发生异常，则调用此版本的完成。
               除了通知回调，它会捕获的异常并存储在调用期间引发 <see cref="M:System.IdentityModel.TypedAsyncResult`1.End(System.IAsyncResult)" /> 方法。
            </summary>
      <param name="result">
                要包装的结果。
              </param>
      <param name="completedSynchronously">
                <see langword="true" /> 如果异步操作完成同步进行;否则为 <see langword="false" />。
              </param>
      <param name="exception">
                在异步操作的处理期间发生的异常。
              </param>
    </member>
    <member name="M:System.IdentityModel.TypedAsyncResult`1.End(System.IAsyncResult)">
      <summary>
              完成异步操作的结束函数时，应调用结束。
               它可以确保异步操作已完成，并执行一些常见的验证。
            </summary>
      <param name="result">
                <see cref="T:System.IAsyncResult" /> 表示异步操作的状态。
              </param>
      <returns>
              异步操作的类型化的结果。
            </returns>
    </member>
    <member name="M:System.IdentityModel.UnsupportedTokenTypeBadRequestException.#ctor">
      <summary>
              初始化 <see cref="T:System.IdentityModel.UnsupportedTokenTypeBadRequestException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IdentityModel.UnsupportedTokenTypeBadRequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              用序列化数据初始化 <see cref="T:System.IdentityModel.UnsupportedTokenTypeBadRequestException" /> 类的新实例。
            </summary>
      <param name="info">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，其中包含序列化的对象数据。
              </param>
      <param name="context">
                一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，其中包含有关源或目标的上下文信息。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="info" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IdentityModel.UnsupportedTokenTypeBadRequestException.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.IdentityModel.UnsupportedTokenTypeBadRequestException" /> 使用指定的令牌类型的类。
            </summary>
      <param name="tokenType">
                包含令牌类型 URI 的字符串。
              </param>
    </member>
    <member name="M:System.IdentityModel.UnsupportedTokenTypeBadRequestException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IdentityModel.UnsupportedTokenTypeBadRequestException" /> 类的新实例。
            </summary>
      <param name="message">
                解释异常原因的错误消息。
              </param>
      <param name="exception">
                <see cref="T:System.Exception" /> 导致当前异常。
                 如果 <paramref name="exception" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。
              </param>
    </member>
    <member name="M:System.IdentityModel.UnsupportedTokenTypeBadRequestException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              集 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 具有不受支持的令牌类型和其他异常信息的对象。
            </summary>
      <param name="info">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，其中包含序列化的对象数据。
              </param>
      <param name="context">
                一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，其中包含有关源或目标的上下文信息。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="info" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.Claims.AuthenticationInformation.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Claims.AuthenticationInformation" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Claims.AuthorizationContext.#ctor(System.Security.Claims.ClaimsPrincipal,System.Collections.ObjectModel.Collection{System.Security.Claims.Claim},System.Collections.ObjectModel.Collection{System.Security.Claims.Claim})">
      <summary>
              新实例初始化 <see cref="T:System.Security.Claims.AuthorizationContext" /> 用指定的主体、 资源声明和操作声明。
            </summary>
      <param name="principal">
                为其授权是要检查该主体。
              </param>
      <param name="resource">
                表示为其主体是要为其授权的资源的声明集合。
                 通常，该集合包含单个元素。
              </param>
      <param name="action">
                表示要在对资源执行的操作的声明集合。
                 通常，该集合包含单个元素。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="principal" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="resource" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="action" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.Claims.AuthorizationContext.#ctor(System.Security.Claims.ClaimsPrincipal,System.String,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Security.Claims.AuthorizationContext" /> 用指定的主体、 资源名称和操作名称。
            </summary>
      <param name="principal">
                为其授权是要检查该主体。
              </param>
      <param name="resource">
                主体未获得授权的资源。
                 作为一个名称声明的值指定的资源。
              </param>
      <param name="action">
                要在对资源执行的操作。
                 作为一个名称声明的值指定的操作。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="principal" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="resource" /> 为 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="action" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.Claims.ClaimsAuthenticationManager.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Claims.ClaimsAuthenticationManager" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Claims.ClaimsAuthenticationManager.Authenticate(System.String,System.Security.Claims.ClaimsPrincipal)">
      <summary>
              当在派生类中重写返回 <see cref="T:System.Security.Claims.ClaimsPrincipal" /> 对象与 RP 应用程序的要求一致。
               默认实现不会修改传入 <see cref="T:System.Security.Claims.ClaimsPrincipal" />。
            </summary>
      <param name="resourceName">
                所请求资源的地址。
              </param>
      <param name="incomingPrincipal">
                表示经过身份验证尝试访问该资源的用户所声明的主体。
              </param>
      <returns>
              所声明的主体包含 RP 应用程序所需的任何修改。
               默认实现返回未经修改的形式传入声明主体。
            </returns>
    </member>
    <member name="M:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>
              在派生类中重写，当从 XML 加载自定义配置。
            </summary>
      <param name="nodelist">
                自定义配置元素中。
                 在列表中的每个节点属于类型 <see cref="T:System.Xml.XmlElement" />。
              </param>
    </member>
    <member name="M:System.Security.Claims.ClaimsAuthorizationManager.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess(System.Security.Claims.AuthorizationContext)">
      <summary>
              派生类中实现时，检查指定的上下文中的主题的授权对指定资源执行指定的操作。
            </summary>
      <param name="context">
                包含使用者、 资源和为其授权是要检查的操作的授权上下文。
              </param>
      <returns>
              <see langword="true" /> 如果该主题有权在指定的资源; 上执行指定的操作，否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>
              在派生类中重写，当从 XML 加载自定义配置。
            </summary>
      <param name="nodelist">
                自定义配置元素中。
                 在列表中的每个节点属于类型 <see cref="T:System.Xml.XmlElement" />。
              </param>
    </member>
    <member name="M:System.ServiceModel.Security.BinarySecretKeyIdentifierClause.#ctor(System.Byte[])">
      <summary>
              使用指定的密钥初始化 <see cref="T:System.ServiceModel.Security.BinarySecretKeyIdentifierClause" /> 类的新实例。
            </summary>
      <param name="key">
                一个表示密钥的 <see cref="T:System.Byte" /> 数组。
              </param>
    </member>
    <member name="M:System.ServiceModel.Security.BinarySecretKeyIdentifierClause.#ctor(System.Byte[],System.Boolean)">
      <summary>
              使用指定的值初始化 <see cref="T:System.ServiceModel.Security.BinarySecretKeyIdentifierClause" /> 类的新实例。
            </summary>
      <param name="key">
                一个表示密钥的 <see cref="T:System.Byte" /> 数组。
              </param>
      <param name="cloneBuffer">
                若要克隆缓冲区，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.ServiceModel.Security.BinarySecretKeyIdentifierClause.#ctor(System.Byte[],System.Boolean,System.Byte[],System.Int32)">
      <summary>
              使用指定的值初始化 <see cref="T:System.ServiceModel.Security.BinarySecretKeyIdentifierClause" /> 类的新实例。
            </summary>
      <param name="key">
                一个表示密钥的 <see cref="T:System.Byte" /> 数组。
              </param>
      <param name="cloneBuffer">
                若要克隆缓冲区，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
      <param name="derivationNonce">
                用于派生密钥的“只用一次的数字”(Nonce)。
              </param>
      <param name="derivationLength">
                要派生的密钥的长度。
              </param>
    </member>
    <member name="M:System.ServiceModel.Security.BinarySecretKeyIdentifierClause.CreateKey">
      <summary>
              创建安全密钥。
            </summary>
      <returns>
              新创建的安全密钥。
            </returns>
    </member>
    <member name="M:System.ServiceModel.Security.BinarySecretKeyIdentifierClause.GetKeyBytes">
      <summary>
              获取表示密钥的字节数组。
            </summary>
      <returns>
              表示密钥的字节数组。
            </returns>
    </member>
    <member name="M:System.ServiceModel.Security.BinarySecretKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              比较指定子句的密钥是否与此实例的密钥相匹配。
            </summary>
      <param name="keyIdentifierClause">
                要匹配的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。
              </param>
      <returns>
              如果存在匹配项，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ServiceModel.Security.KeyNameIdentifierClause.#ctor(System.String)">
      <summary>
              初始化 <see cref="T:System.ServiceModel.Security.KeyNameIdentifierClause" /> 类的新实例。
            </summary>
      <param name="keyName">
                密钥名称。
              </param>
    </member>
    <member name="M:System.ServiceModel.Security.KeyNameIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              检查 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> 是否与该类的当前实例相匹配。
            </summary>
      <param name="keyIdentifierClause">
                要进行比较的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。
              </param>
      <returns>
              如果存在匹配项，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ServiceModel.Security.KeyNameIdentifierClause.Matches(System.String)">
      <summary>
              检查指定的密钥名称是否与当前实例的密钥名称相匹配。
            </summary>
      <param name="keyName">
                安全密钥名称子句。
              </param>
      <returns>
              如果存在匹配项，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ServiceModel.Security.KeyNameIdentifierClause.ToString">
      <summary>
              返回一个 <see cref="T:System.String" />，表示当前的 <see langword="Object" />。
               （从 <see cref="T:System.Object" /> 继承）
            </summary>
      <returns>
              当前的 <see langword="Object" />。
            </returns>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityContextKeyIdentifierClause.#ctor(System.Xml.UniqueId)">
      <summary>
              使用指定的上下文标识符初始化 <see cref="T:System.ServiceModel.Security.SecurityContextKeyIdentifierClause" /> 类的新实例。
            </summary>
      <param name="contextId">
                安全性上下文的唯一 ID。
              </param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityContextKeyIdentifierClause.#ctor(System.Xml.UniqueId,System.Xml.UniqueId)">
      <summary>
              使用指定的上下文标识符和生成初始化 <see cref="T:System.ServiceModel.Security.SecurityContextKeyIdentifierClause" /> 类的新实例。
            </summary>
      <param name="contextId">
                一个 <see cref="T:System.Xml.UniqueId" />，表示安全上下文的上下文 ID。
              </param>
      <param name="generation">
                一个 <see cref="T:System.Xml.UniqueId" />，表示安全上下文令牌的密钥生成。
              </param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityContextKeyIdentifierClause.#ctor(System.Xml.UniqueId,System.Xml.UniqueId,System.Byte[],System.Int32)">
      <summary>
              用指定的值初始化 <see cref="T:System.ServiceModel.Security.SecurityContextKeyIdentifierClause" /> 类的新实例。
            </summary>
      <param name="contextId">
                标识符子句的上下文 ID 部分。
              </param>
      <param name="generation">
                标识符子句的生成部分。
              </param>
      <param name="derivationNonce">
                用于派生令牌的“只用一次的数字”(Nonce)。
              </param>
      <param name="derivationLength">
                要派生的密钥长度。
              </param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityContextKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              将指定的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> 与 <see cref="T:System.ServiceModel.Security.SecurityContextKeyIdentifierClause" /> 类的当前实例进行比较。
            </summary>
      <param name="keyIdentifierClause">
                要比较的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。
              </param>
      <returns>
              如果两个实例相等，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityContextKeyIdentifierClause.Matches(System.Xml.UniqueId,System.Xml.UniqueId)">
      <summary>
              将指定的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> 与具有指定的上下文标识符和生成部分的 <see cref="T:System.ServiceModel.Security.SecurityContextKeyIdentifierClause" /> 类的当前实例进行比较。
            </summary>
      <param name="contextId">
                标识符子句的上下文 ID 部分。
              </param>
      <param name="generation">
                标识符子句的生成部分。
              </param>
      <returns>
              如果两个实例相等，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityContextKeyIdentifierClause.ToString">
      <summary>
              提供该类实例的文本表示形式。
            </summary>
      <returns>
              该类实例的文本表示形式。
            </returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.#ctor(System.Byte[])">
      <summary>
              初始化 <see cref="T:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken" /> 类的新实例。
            </summary>
      <param name="key">
                一个表示密钥的字节数组。
              </param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.#ctor(System.Int32)">
      <summary>
              初始化 <see cref="T:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken" /> 类的新实例。
            </summary>
      <param name="keySizeInBits">
                密钥的大小（以位为单位）。
              </param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.#ctor(System.String,System.Byte[])">
      <summary>
              初始化 <see cref="T:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken" /> 类的新实例。
            </summary>
      <param name="id">
                令牌 ID。
              </param>
      <param name="key">
                一个表示密钥的字节数组。
              </param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.#ctor(System.String,System.Byte[],System.Boolean)">
      <summary>
              初始化 <see cref="T:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken" /> 类的新实例。
            </summary>
      <param name="id">
                令牌 ID。
              </param>
      <param name="key">
                一个表示密钥的字节数组。
              </param>
      <param name="allowCrypto">
                一个 <see cref="T:System.Boolean" />，指出是否允许加密。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.#ctor(System.String,System.Int32)">
      <summary>
              初始化 <see cref="T:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken" /> 类的新实例。
            </summary>
      <param name="id">
                令牌 ID。
              </param>
      <param name="keySizeInBits">
                密钥的大小（以位为单位）。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="keySizeInBits" /> 小于或等于零，或者大于或等于 512，或者不是 8 的倍数。
                </exception>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.#ctor(System.String,System.Int32,System.Boolean)">
      <summary>
              初始化 <see cref="T:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken" /> 类的新实例。
            </summary>
      <param name="id">
                令牌 ID。
              </param>
      <param name="keySizeInBits">
                密钥的大小（以位为单位）。
              </param>
      <param name="allowCrypto">
                一个 <see cref="T:System.Boolean" />，指出是否允许加密。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="keySizeInBits" /> 小于或等于零，或者大于或等于 512，或者不是 8 的倍数。
                </exception>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.GetKeyBytes">
      <summary>
              获取表示密钥的字节。
            </summary>
      <returns>
              键。
            </returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.#ctor(System.String,System.Byte[],System.String,System.IdentityModel.Tokens.SecurityToken,System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>
              初始化 <see cref="T:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken" /> 类的新实例。
            </summary>
      <param name="id">
                密钥令牌的 ID。
              </param>
      <param name="keyToWrap">
                要包装的密钥。
              </param>
      <param name="wrappingAlgorithm">
                用于执行包装的算法。
              </param>
      <param name="wrappingToken">
                一个表示包装令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
              </param>
      <param name="wrappingTokenReference">
                一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />，表示对包装令牌的引用。
              </param>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.CanCreateKeyIdentifierClause``1">
      <summary>
              获取一个值，该值指示令牌是否可以创建密钥标识符子句。
            </summary>
      <typeparam name="T">
                <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> 的类型。
              </typeparam>
      <returns>
              如果令牌可以创建密钥标识符子句，则为 <see langword="true" />；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.CreateKeyIdentifierClause``1">
      <summary>
              创建密钥标识符子句。
            </summary>
      <typeparam name="T">
                <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> 的类型。
              </typeparam>
      <returns>
              <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> 的类型。
            </returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.GetWrappedKey">
      <summary>
              获取已包装的密钥。
            </summary>
      <returns>
              已包装的密钥。
            </returns>
    </member>
    <member name="M:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>
              比较当前的安全密钥标识符子句和指定的密钥标识符子句是否相等。
            </summary>
      <param name="keyIdentifierClause">
                指定的安全密钥标识符子句。
              </param>
      <returns>
              如果当前的安全密钥标识符子句与指定的相等，则为 <see langword="true" />；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.AsyncResult.AsyncState">
      <summary>
              获取一个用户定义的对象，该对象限定或包含有关异步操作的信息。
            </summary>
      <returns>
              一个用户定义的对象，限定或包含有关异步操作的信息。
            </returns>
    </member>
    <member name="P:System.IdentityModel.AsyncResult.AsyncWaitHandle">
      <summary>
              获取 <see cref="T:System.Threading.WaitHandle" /> 用来等待异步操作以完成。
            </summary>
      <returns>
              一个 <see cref="T:System.Threading.WaitHandle" /> 用来等待异步操作以完成。
            </returns>
    </member>
    <member name="P:System.IdentityModel.AsyncResult.CompletedSynchronously">
      <summary>
              获取一个值，该值指示异步操作是否同步完成。
            </summary>
      <returns>
              如果异步操作同步完成，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.AsyncResult.IsCompleted">
      <summary>
              获取一个值，该值指示异步操作是否已完成。
            </summary>
      <returns>
              如果操作已完成，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.Claim.ClaimType">
      <summary>
              获取声明的类型。
            </summary>
      <returns>
              表示声明类型的 URI。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.Claim.DefaultComparer">
      <summary>
              获取一个对象，它可以比较两个 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象是否相等。
            </summary>
      <returns>
              一个比较两个 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对象的 <see cref="T:System.IdentityModel.Claims.Claim" /> 接口实现。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.Claim.Resource">
      <summary>
              获取与此 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象关联的资源。
            </summary>
      <returns>
              与此 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象关联的资源。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.Claim.Right">
      <summary>
              指定与此 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象关联的权限的统一资源标识符 (URI) 的字符串表示形式。
               预定义权限是以 <see cref="T:System.IdentityModel.Claims.Rights" /> 类的静态属性的形式提供的。
            </summary>
      <returns>
              指定与此 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象关联的权限的 URI。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.Claim.System">
      <summary>
              表示系统实体的预定义声明。
            </summary>
      <returns>
              一个表示系统实体的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象。
               此 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象具有下表所示的属性值。
            
                      属性
                    
                      值
                    
                      <see cref="P:System.IdentityModel.Claims.Claim.ClaimType" />
                    
                      <see cref="P:System.IdentityModel.Claims.ClaimTypes.System" />
                    
                      <see cref="P:System.IdentityModel.Claims.Claim.Resource" />
                    
                      <see langword="System" />
                    
                      <see cref="P:System.IdentityModel.Claims.Claim.Right" />
                    
                      <see cref="P:System.IdentityModel.Claims.Rights.Identity" />
                    </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimSet.Count">
      <summary>
              在派生类中重写时，获取此声明集中的声明数。
            </summary>
      <returns>
              此 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 中的声明数。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimSet.Issuer">
      <summary>
              在派生类中重写时，获取颁发此 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 的实体。
            </summary>
      <returns>
              颁发此 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 对象的 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 对象。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimSet.Item(System.Int32)">
      <summary>
              在派生类中重写时，获取指定索引的 <see cref="T:System.IdentityModel.Claims.Claim" />。
            </summary>
      <param name="index">
                要检索的声明的索引。
              </param>
      <returns>
              位于指定索引处的 <see cref="T:System.IdentityModel.Claims.Claim" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimSet.System">
      <summary>
              获取表示应用程序可信颁发者的 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 对象。
            </summary>
      <returns>
              系统 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 对象。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimSet.Windows">
      <summary>
              获取一组包含 Windows 安全标识符的声明。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Claims.ClaimSet" />，其中至少包含一个类型为 <see cref="P:System.IdentityModel.Claims.ClaimTypes.Sid" /> 的声明。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Anonymous">
      <summary>
              获取声明的 URI，该 URI 指定匿名用户。
            </summary>
      <returns>
              声明的 URI，该 URI 指定匿名用户。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Authentication">
      <summary>
              获取声明的 URI，该 URI 指定关于标识是否经过身份验证的详细信息。
            </summary>
      <returns>
              声明的 URI，该 URI 指定关于标识是否经过身份验证的详细信息。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.AuthorizationDecision">
      <summary>
              获取声明的 URI，该 URI 指定对于实体的授权决定。
            </summary>
      <returns>
              声明的 URI，该 URI 指定对于实体的授权决定。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Country">
      <summary>
              获取声明的 URI，该 URI 指定实体所在的国家/地区。
            </summary>
      <returns>
              声明的 URI，该 URI 指定实体所在的国家/地区。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.DateOfBirth">
      <summary>
              获取声明的 URI，该 URI 指定实体的出生日期。
            </summary>
      <returns>
              声明的 URI，该 URI 指定实体的出生日期。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.DenyOnlySid">
      <summary>
              获取声明的 URI，该 URI 指定实体的 deny-only 安全标识符 (SID)。
            </summary>
      <returns>
              声明的 URI，该 URI 指定实体的 deny-only SID。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Dns">
      <summary>
              获取声明的 URI，该 URI 指定与计算机名称关联的 DNS 名称或者与 X.509 证书的使用者或颁发者的备用名称关联的 DNS 名称。
            </summary>
      <returns>
              声明的 URI，该 URI 指定与计算机名称关联的 DNS 名称或者与 X.509 证书的使用者或颁发者的备用名称关联的 DNS 名称。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Email">
      <summary>
              获取声明的 URI，该 URI 指定实体的电子邮件地址。
            </summary>
      <returns>
              声明的 URI，该 URI 指定实体的电子邮件地址。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Gender">
      <summary>
              获取声明的 URI，该 URI 指定实体的性别。
            </summary>
      <returns>
              声明的 URI，该 URI 指定实体的性别。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.GivenName">
      <summary>
              获取声明的 URI，该 URI 指定实体的名字。
            </summary>
      <returns>
              声明的 URI，该 URI 指定实体的名字。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Hash">
      <summary>
              获取声明的 URI，该 URI 指定一个哈希值。
            </summary>
      <returns>
              声明的 URI，该 URI 指定一个哈希值。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.HomePhone">
      <summary>
              获取声明的 URI，该 URI 指定实体的住宅电话号码。
            </summary>
      <returns>
              声明的 URI，该 URI 指定实体的住宅电话号码。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Locality">
      <summary>
              获取声明的 URI，该 URI 指定实体所在的区域。
            </summary>
      <returns>
              声明的 URI，该 URI 指定实体所在的区域。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.MobilePhone">
      <summary>
              获取声明的 URI，该 URI 指定实体的移动电话号码。
            </summary>
      <returns>
              声明的 URI，该 URI 指定实体的移动电话号码。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Name">
      <summary>
              获取声明的 URI，该 URI 指定实体的名称。
            </summary>
      <returns>
              声明的 URI，该 URI 指定实体的名称。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.NameIdentifier">
      <summary>
              获取声明的 URI，该 URI 指定实体的名称。
            </summary>
      <returns>
              声明的 URI，该 URI 指定实体的名称。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.OtherPhone">
      <summary>
              获取声明的 URI，该 URI 指定实体的备用电话号码。
            </summary>
      <returns>
              声明的 URI，该 URI 指定实体的备用电话号码。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.PostalCode">
      <summary>
              获取声明的 URI，该 URI 指定实体的邮政编码。
            </summary>
      <returns>
              声明的 URI，该 URI 指定实体的邮政编码。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.PPID">
      <summary>
              获取声明的 URI，该 URI 指定实体的私人标识符 (PPI)。
            </summary>
      <returns>
              声明的 URI，该 URI 指定实体的私人标识符 (PPI)。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Rsa">
      <summary>
              获取声明的 URI，该 URI 指定一个 RSA 密钥。
            </summary>
      <returns>
              声明的 URI，该 URI 指定一个 RSA 密钥。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Sid">
      <summary>
              获取声明的 URI，该 URI 指定一个安全标识符 (SID)。
            </summary>
      <returns>
              声明的 URI，该 URI 指定一个安全标识符 (SID)。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Spn">
      <summary>
              获取声明的 URI，该 URI 指定一个服务主体名称 (SPN) 声明。
            </summary>
      <returns>
              声明的 URI，该 URI 指定一个服务主体名称 (SPN) 声明。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.StateOrProvince">
      <summary>
              获取声明的 URI，该 URI 指定实体所在的州或省份。
            </summary>
      <returns>
              声明的 URI，该 URI 指定实体所在的州或省份。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.StreetAddress">
      <summary>
              获取声明的 URI，该 URI 指定实体的街道地址。
            </summary>
      <returns>
              声明的 URI，该 URI 指定实体的街道地址。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Surname">
      <summary>
              获取声明的 URI，该 URI 指定实体的姓氏。
            </summary>
      <returns>
              声明的 URI，该 URI 指定实体的姓氏。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.System">
      <summary>
              获取声明的 URI，该 URI 标识系统实体。
            </summary>
      <returns>
              声明的 URI，该 URI 标识系统实体。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Thumbprint">
      <summary>
              获取声明的 URI，该 URI 指定一个指纹。
            </summary>
      <returns>
              声明的 URI，该 URI 指定一个指纹。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Upn">
      <summary>
              获取声明的 URI，该 URI 指定一个用户主体名称 (UPN)。
            </summary>
      <returns>
              声明的 URI，该 URI 指定 UPN。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Uri">
      <summary>
              获取声明的 URI，该 URI 指定一个 URI。
            </summary>
      <returns>
              声明的 URI，该 URI 指定一个 URI。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.Webpage">
      <summary>
              获取声明的 URI，该 URI 指定实体的网页。
            </summary>
      <returns>
              声明的 URI，该 URI 指定实体的网页。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.ClaimTypes.X500DistinguishedName">
      <summary>
              获取一个字符串，其中包含 X.509 证书的可分辨名称声明的 URI。
            </summary>
      <returns>
              X.509 证书的可分辨名称声明的 URI。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.DefaultClaimSet.Count">
      <summary>
              获取此声明集中包含的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象数。
            </summary>
      <returns>
              此声明集中包含的 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象数。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.DefaultClaimSet.Issuer">
      <summary>
              获取颁发此声明集的 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 对象。
            </summary>
      <returns>
              颁发此声明集的 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 对象。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.DefaultClaimSet.Item(System.Int32)">
      <summary>
              获取指定索引的 <see cref="T:System.IdentityModel.Claims.Claim" />。
            </summary>
      <param name="index">
                要检索的声明的索引。
              </param>
      <returns>
              索引指定的 <see cref="T:System.IdentityModel.Claims.Claim" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.Rights.Identity">
      <summary>
              获取一个字符串，该字符串指定权限表示标识。
            </summary>
      <returns>
              表示标识的权限。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.Rights.PossessProperty">
      <summary>
              获取一个字符串，该字符串指定权限表示一个与声明关联的实体所拥有的属性。
            </summary>
      <returns>
              一个权限，表示与 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象关联的实体所拥有的属性。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.WindowsClaimSet.Count">
      <summary>
              获取此集合中的声明数。
            </summary>
      <returns>
              此集合中的声明数。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.WindowsClaimSet.ExpirationTime">
      <summary>
              获取此 <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" /> 的过期时间。
            </summary>
      <returns>
              此 <see cref="T:System.DateTime" /> 过期的 <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.WindowsClaimSet.Issuer">
      <summary>
              获取此 <see cref="T:System.IdentityModel.Claims.WindowsClaimSet" /> 的颁发者。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Claims.ClaimSet" />，表示此声明集的颁发者。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.WindowsClaimSet.Item(System.Int32)">
      <summary>
              获取指定索引的声明。
            </summary>
      <param name="index">
                要检索的 Windows 声明的索引。
              </param>
      <returns>
              指定索引的声明。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.WindowsClaimSet.WindowsIdentity">
      <summary>
              获取此声明集的 Windows 标识。
            </summary>
      <returns>
              此声明集的 <see cref="T:System.Security.Principal.WindowsIdentity" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.X509CertificateClaimSet.Count">
      <summary>
              获取此 <see cref="T:System.IdentityModel.Claims.X509CertificateClaimSet" /> 对象中的 X.509 证书声明数。
            </summary>
      <returns>
              此 <see cref="T:System.IdentityModel.Claims.X509CertificateClaimSet" /> 对象中的 X.509 证书声明数。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.X509CertificateClaimSet.ExpirationTime">
      <summary>
              获取此 <see cref="T:System.IdentityModel.Claims.X509CertificateClaimSet" /> 的过期时间。
            </summary>
      <returns>
              此 <see cref="T:System.IdentityModel.Claims.X509CertificateClaimSet" /> 的过期时间。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.X509CertificateClaimSet.Issuer">
      <summary>
              获取此 <see cref="T:System.IdentityModel.Claims.X509CertificateClaimSet" /> 的颁发者。
            </summary>
      <returns>
              此 <see cref="T:System.IdentityModel.Claims.X509CertificateClaimSet" /> 的颁发者。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.X509CertificateClaimSet.Item(System.Int32)">
      <summary>
              获取指定索引的声明。
            </summary>
      <param name="index">
                要检索的声明的索引。
              </param>
      <returns>
              指定索引的声明。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Claims.X509CertificateClaimSet.X509Certificate">
      <summary>
              获取与此声明集关联的 X.509 证书。
            </summary>
      <returns>
              与此声明集关联的 X.509 证书。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.AudienceUriElement.Value">
      <summary>
              获取或设置受众 URI。
            </summary>
      <returns>
              受众 URI。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.AudienceUriElementCollection.Mode">
      <summary>
              获取或设置的受众限制模式。
            </summary>
      <returns>
              访问群体限制模式。
               默认值为 <see cref="F:System.IdentityModel.Selectors.AudienceUriMode.Always" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.ConfigurationElementInterceptor.ChildNodes">
      <summary>
              获取此元素的节点的子级。
            </summary>
      <returns>
              子节点的集合。
              <see langword="null" /> 如果此元素没有任何子节点。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.ConfigurationElementInterceptor.ElementAsXml">
      <summary>
              获取此实例所表示的 XML 元素。
            </summary>
      <returns>
              XML 元素。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.CustomTypeElement.IsConfigured">
      <summary>
              获取一个值，该值指示是否已使用非默认值的配置元素。
            </summary>
      <returns>
              <see langword="true" /> 如果该元素已配置为使用非默认值;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.CustomTypeElement.Type">
      <summary>
              <see cref="T:System.Type" /> 当前实例表示的。
            </summary>
      <returns>
              此实例所表示的类型。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.AudienceRestriction">
      <summary>
              获取或设置已配置 <see cref="T:System.IdentityModel.Tokens.AudienceRestriction" />。
            </summary>
      <returns>
              已配置 <see cref="T:System.IdentityModel.Tokens.AudienceRestriction" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.Caches">
      <summary>
              获取或设置已配置 <see cref="T:System.IdentityModel.Configuration.IdentityModelCaches" />。
            </summary>
      <returns>
              配置的缓存。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.CertificateValidationMode">
      <summary>
              获取或设置处理程序用来验证颁发者证书的证书验证模式。
            </summary>
      <returns>
              证书验证模式。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.CertificateValidator">
      <summary>
              获取或设置处理程序用来验证颁发者证书的证书验证程序。
            </summary>
      <returns>
              证书验证程序。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.ClaimsAuthenticationManager">
      <summary>
              获取或设置声明身份验证管理器。
               默认值是实例 <see cref="T:System.Security.Claims.ClaimsAuthenticationManager" /> 类。
            </summary>
      <returns>
              声明身份验证管理器。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  尝试将该属性设置为 <see langword="null" /> 时发生。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.ClaimsAuthorizationManager">
      <summary>
              获取或设置声明授权管理器。
            </summary>
      <returns>
              声明授权管理器。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  尝试将该属性设置为 <see langword="null" /> 时发生。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.DetectReplayedTokens">
      <summary>
              获取或设置一个值，该值指示是否处理程序应检测重播的令牌的默认处理程序配置中。
            </summary>
      <returns>
              <see langword="true" /> 如果处理程序应检测，重播令牌;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.IsInitialized">
      <summary>
              获取或设置一个值，该值指示是否 <see cref="M:System.IdentityModel.Configuration.IdentityConfiguration.Initialize" /> 调用方法。
            </summary>
      <returns>
              <see langword="true" /> 如果 <see cref="M:System.IdentityModel.Configuration.IdentityConfiguration.Initialize" /> 方法已被调用; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.IssuerNameRegistry">
      <summary>
              获取或设置颁发者名称注册表使用颁发者名称解析。
            </summary>
      <returns>
              颁发者名称注册表。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  尝试将该属性设置为 <see langword="null" /> 时发生。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.IssuerTokenResolver">
      <summary>
              获取或设置颁发者令牌解析程序。
            </summary>
      <returns>
              颁发者令牌解析器。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  尝试将该属性设置为 <see langword="null" /> 时发生。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.MaxClockSkew">
      <summary>
              获取或设置通信双方的系统时钟之间允许的最大时间差异。
            </summary>
      <returns>
              最大时钟偏差。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.Name">
      <summary>
              获取此配置的服务名称。
            </summary>
      <returns>
              服务名称。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.RevocationMode">
      <summary>
              获取或设置处理程序用于验证颁发者证书的吊销模式。
            </summary>
      <returns>
              吊销模式。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.SaveBootstrapContext">
      <summary>
              获取或设置一个值，该值指示令牌验证后 <see cref="T:System.IdentityModel.Tokens.BootstrapContext" /> 对象是否保存在 <see cref="T:System.Security.Claims.ClaimsIdentity" /> 和会话中。
            </summary>
      <returns>
              如果保存了 bootstrap 上下文，则为 <see langword="true" />，否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlerCollectionManager">
      <summary>
              获取 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager" /> 包含的一套 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> WS 信任消息中找到用于序列化和验证令牌的对象。
            </summary>
      <returns>
              处理程序集管理器。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers">
      <summary>
              获取 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> 对象的集合，这些对象用于序列化和验证 WS-Trust 消息中发现的令牌。
            </summary>
      <returns>
              令牌处理程序的集合。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.ServiceCertificate">
      <summary>
              获取或设置服务证书。
            </summary>
      <returns>
              要用作服务证书的 X.509 证书。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.ServiceTokenResolver">
      <summary>
              获取或设置服务令牌解析程序。
            </summary>
      <returns>
              服务令牌解析器。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  尝试将该属性设置为 <see langword="null" /> 时发生。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.TokenReplayCacheExpirationPeriod">
      <summary>
              获取或设置项放入的过期期限 <see cref="T:System.IdentityModel.Tokens.TokenReplayCache" />。
            </summary>
      <returns>
              项的过期期限放置到令牌重放缓存中。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfiguration.TrustedStoreLocation">
      <summary>
              获取或设置处理程序用来验证颁发者证书的受信任存储区位置。
            </summary>
      <returns>
              受信任存储区位置。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfigurationElement.AudienceUris">
      <summary>
              获取 <see cref="T:System.IdentityModel.Configuration.AudienceUriElementCollection" /> 此标识配置元素与该键相关联。
            </summary>
      <returns>
              受众 Uri 配置为此标识配置元素的集合。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfigurationElement.Caches">
      <summary>
              获取或设置 <see cref="T:System.IdentityModel.Configuration.IdentityModelCachesElement" /> 此标识配置元素与该键相关联。
            </summary>
      <returns>
              配置令牌的元素重播缓存和会话安全令牌缓存此标识配置元素。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfigurationElement.CertificateValidation">
      <summary>
              获取或设置 <see cref="T:System.IdentityModel.Configuration.X509CertificateValidationElement" /> 此标识配置元素与该键相关联。
            </summary>
      <returns>
              配置的证书验证程序并将其属性为此标识配置元素的元素。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfigurationElement.ClaimsAuthenticationManager">
      <summary>
              获取或设置与此标识配置元素相关联的声明身份验证管理器。
            </summary>
      <returns>
              一个指定的自定义类型元素 <see cref="T:System.Type" /> 的声明身份验证管理器。
               该类型必须派生自 <see cref="T:System.Security.Claims.ClaimsAuthenticationManager" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfigurationElement.ClaimsAuthorizationManager">
      <summary>
              获取或设置与此标识配置元素相关联的声明授权管理器。
            </summary>
      <returns>
              一个指定的自定义类型元素 <see cref="T:System.Type" /> 声明授权管理器。
               该类型必须派生自 <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfigurationElement.IssuerNameRegistry">
      <summary>
              获取或设置 <see cref="T:System.IdentityModel.Configuration.IssuerNameRegistryElement" /> 此标识配置元素与该键相关联。
            </summary>
      <returns>
              配置颁发者名称注册表中的有此标识配置元素的元素。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfigurationElement.IssuerTokenResolver">
      <summary>
              获取或设置与此标识配置元素相关联的颁发者令牌解析器。
            </summary>
      <returns>
              一个指定的自定义类型元素 <see cref="T:System.Type" /> 的颁发者令牌解析程序。
               该类型必须派生自 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfigurationElement.MaximumClockSkew">
      <summary>
              获取或设置最大时钟偏差被配置为此标识配置元素。
            </summary>
      <returns>
              最大时钟偏差。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfigurationElement.Name">
      <summary>
              获取或设置标识配置元素的名称。
            </summary>
      <returns>
              标识配置的名称。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfigurationElement.SaveBootstrapContext">
      <summary>
              获取或设置一个值，该值指示是否声明标识和配置此标识集合中的处理程序创建的会话安全令牌中保存的启动上下文。
            </summary>
      <returns>
              <see langword="true" /> 若要保存 <see cref="T:System.IdentityModel.Tokens.BootstrapContext" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfigurationElement.SecurityTokenHandlerSets">
      <summary>
              获取或设置 <see cref="T:System.IdentityModel.Configuration.SecurityTokenHandlerSetElementCollection" /> 此标识配置元素与该键相关联。
            </summary>
      <returns>
              为此标识配置元素配置的安全令牌处理程序集合...
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfigurationElement.ServiceTokenResolver">
      <summary>
              获取或设置与此标识配置元素相关联的服务令牌解析器。
            </summary>
      <returns>
              一个指定的自定义类型元素 <see cref="T:System.Type" /> 的服务令牌解析程序。
               该类型必须派生自 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityConfigurationElement.TokenReplayDetection">
      <summary>
              获取或设置 <see cref="T:System.IdentityModel.Configuration.TokenReplayDetectionElement" /> 此标识配置元素与该键相关联。
            </summary>
      <returns>
              指定是否启用令牌重放检测，以及指定令牌的最大有效期令牌重放缓存中的元素。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityModelCaches.SessionSecurityTokenCache">
      <summary>
              获取或设置 <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenCache" /> 用于缓存 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />。
            </summary>
      <returns>
              配置的会话令牌缓存。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  尝试将该属性设置为 <see langword="null" /> 时发生。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityModelCaches.TokenReplayCache">
      <summary>
              获取或设置 <see cref="T:System.IdentityModel.Tokens.TokenReplayCache" /> 用于确定是否重放令牌。
            </summary>
      <returns>
              已配置的令牌重放缓存中。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  尝试将该属性设置为 <see langword="null" /> 时发生。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityModelCachesElement.IsConfigured">
      <summary>
              获取一个值，该值指示是否配置了此元素。
            </summary>
      <returns>
              <see langword="true" /> 如果该元素已配置;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityModelCachesElement.SessionSecurityTokenCache">
      <summary>
              获取或设置 <see cref="T:System.Type" /> 会话令牌缓存。
            </summary>
      <returns>
              会话令牌缓存的类型。
               该类型必须派生自 <see cref="System.IdentityModel.Tokens.SessionSecurityTokenCache" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IdentityModelCachesElement.TokenReplayCache">
      <summary>
              获取或设置 <see cref="T:System.Type" /> 的令牌重放缓存。
            </summary>
      <returns>
              令牌重放缓存的类型。
               该类型必须派生自 <see cref="System.IdentityModel.Tokens.TokenReplayCache" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.IssuerNameRegistryElement.Type">
      <summary>
              获取或设置的字符串表示形式 <see cref="T:System.Type" /> 的颁发者名称注册表。
            </summary>
      <returns>
              字符串表示形式 <see cref="T:System.Type" /> 的颁发者名称注册表。
               该类型必须派生自 <see cref="T:System.IdentityModel.Tokens.IssuerNameRegistry" /> 类。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement.AudienceUris">
      <summary>
              获取 <see cref="T:System.IdentityModel.Configuration.AudienceUriElementCollection" /> 此令牌处理程序配置元素与该键相关联。
            </summary>
      <returns>
              受众 Uri 配置此令牌处理程序配置元素的集合。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement.Caches">
      <summary>
              获取或设置 <see cref="T:System.IdentityModel.Configuration.IdentityModelCachesElement" /> 此令牌处理程序配置元素与该键相关联。
            </summary>
      <returns>
              配置令牌的元素重播缓存和会话安全令牌缓存此令牌处理程序配置元素。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement.CertificateValidation">
      <summary>
              获取或设置 <see cref="T:System.IdentityModel.Configuration.X509CertificateValidationElement" /> 此令牌处理程序配置元素与该键相关联。
            </summary>
      <returns>
              配置的证书验证程序和其属性进行此令牌处理程序配置元素的元素。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement.IssuerNameRegistry">
      <summary>
              获取或设置 <see cref="T:System.IdentityModel.Configuration.IssuerNameRegistryElement" /> 此令牌处理程序配置元素与该键相关联。
            </summary>
      <returns>
              配置颁发者名称注册表中的有此令牌处理程序配置元素的元素。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement.IssuerTokenResolver">
      <summary>
              获取或设置与此令牌处理程序配置元素相关联的颁发者令牌解析器。
            </summary>
      <returns>
              一个指定的自定义类型元素 <see cref="T:System.Type" /> 的颁发者令牌解析程序。
               该类型必须派生自 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement.MaximumClockSkew">
      <summary>
              获取或设置最大时钟偏差配置此令牌处理程序配置元素。
            </summary>
      <returns>
              最大时钟偏差。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement.Name">
      <summary>
              获取或设置令牌处理程序配置元素的名称。
            </summary>
      <returns>
              标识配置的名称。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement.SaveBootstrapContext">
      <summary>
              获取或设置一个值，该值指示是否声明标识和配置此标识集合中的处理程序创建的会话安全令牌中保存的启动上下文。
            </summary>
      <returns>
              <see langword="true" /> 若要保存 <see cref="T:System.IdentityModel.Tokens.BootstrapContext" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement.ServiceTokenResolver">
      <summary>
              获取或设置与此令牌处理程序配置元素相关联的服务令牌解析器。
            </summary>
      <returns>
              一个指定的自定义类型元素 <see cref="T:System.Type" /> 的服务令牌解析程序。
               该类型必须派生自 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement.TokenReplayDetection">
      <summary>
              获取或设置 <see cref="T:System.IdentityModel.Configuration.TokenReplayDetectionElement" /> 此令牌处理程序配置元素与该键相关联。
            </summary>
      <returns>
              指定是否启用令牌重放检测，以及指定令牌的最大有效期令牌重放缓存中的元素。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenHandlerElementCollection.Name">
      <summary>
              获取或设置集合的名称。
            </summary>
      <returns>
              集合的名称。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenHandlerElementCollection.SecurityTokenHandlerConfiguration">
      <summary>
              获取或设置集合中的处理程序的默认设置。
            </summary>
      <returns>
              集合中的处理程序默认设置。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenHandlerSetElementCollection.IsConfigured">
      <summary>
              获取一个值，该值指示是否已使用非默认值配置此元素。
            </summary>
      <returns>
              <see langword="true" /> 如果该元素已配置为使用非默认值;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.DefaultMaxSymmetricKeySizeInBits">
      <summary>
              获取或设置默认的密钥大小限制在使用位检查，如果 KeySize 请求中指定在此限制内。
            </summary>
      <returns>
              默认的密钥大小限制，以位为单位。
               默认值为 1024年。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.DefaultSymmetricKeySizeInBits">
      <summary>
              获取或设置默认的密钥大小，以使用已颁发令牌中的位数。
            </summary>
      <returns>
              在已颁发令牌中，以位为单位使用的密钥大小。
               默认值为 256。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.DefaultTokenLifetime">
      <summary>
              获取或设置已颁发的令牌中使用的默认生存期。
            </summary>
      <returns>
              要在中使用的默认生存期已颁发的令牌。
               默认值为 1 天。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.DefaultTokenType">
      <summary>
              获取或设置令牌颁发中使用的默认令牌类型。
            </summary>
      <returns>
              返回一个字符串，包含默认令牌类型。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  指定的值是 <see langword="null" /> 或为空。
                </exception>
      <exception cref="T:System.ArgumentException">
                  令牌处理程序中未定义指定的值。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.DisableWsdl">
      <summary>
              获取或设置一个值，指定是否应为安全令牌服务 (STS) 启用 WSDL 生成。
            </summary>
      <returns>
              <see langword="true" /> 若要启用 sts; WSDL 生成否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.MaximumTokenLifetime">
      <summary>
              获取或设置已颁发的令牌的最大令牌生存期。
            </summary>
      <returns>
              最大令牌生存期为已颁发令牌的。
               默认值为 1 天。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.SecurityTokenService">
      <summary>
              获取或设置 <see cref="T:System.Type" /> 的安全令牌服务 (STS)。
            </summary>
      <returns>
              安全令牌服务的类型。
               该类型必须派生自 <see cref="T:System.IdentityModel.SecurityTokenService" /> 类。
            </returns>
      <exception cref="T:System.ArgumentException">
                  指定的值不能作为分配 <see cref="T:System.IdentityModel.SecurityTokenService" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  指定的值是 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.SigningCredentials">
      <summary>
              获取或设置的签名凭据。
            </summary>
      <returns>
              签名的凭据。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.TokenIssuerName">
      <summary>
              获取或设置颁发者名称，以便可以在已颁发的令牌对其进行设置。
            </summary>
      <returns>
              颁发者名称中。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  尝试将该属性设置为 <see langword="null" /> 或空字符串的出现。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.WSTrust13RequestSerializer">
      <summary>
              获取或设置 WS 信任 1.3 请求 (RST) 序列化程序。
            </summary>
      <returns>
              WS 信任 1.3 请求 (RST) 序列化程序。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  指定的值是 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.WSTrust13ResponseSerializer">
      <summary>
              获取或设置 WS 信任 1.3 响应 (RSTR) 序列化程序。
            </summary>
      <returns>
              WS 信任 1.3 响应 (RSTR) 序列化程序。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  指定的值是 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.WSTrustFeb2005RequestSerializer">
      <summary>
              获取或设置 Ws-trust 2005 年 2 月请求 (RST) 序列化程序。
            </summary>
      <returns>
              Ws-trust 2005 年 2 月请求 (RST) 序列化程序。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  指定的值是 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.WSTrustFeb2005ResponseSerializer">
      <summary>
              获取或设置 Ws-trust 2005 年 2 月响应 (RSTR) 序列化程序。
            </summary>
      <returns>
              Ws-trust 2005 年 2 月响应 (RSTR) 序列化程序。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  指定的值是 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Configuration.SystemIdentityModelSection.Current">
      <summary>
              获取当前 <see cref="T:System.IdentityModel.Configuration.SystemIdentityModelSection" /> 引用。
            </summary>
      <returns>
              当前 <see cref="T:System.IdentityModel.Configuration.SystemIdentityModelSection" /> 引用。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SystemIdentityModelSection.DefaultIdentityConfigurationElement">
      <summary>
              获取默认值 （未命名） <see cref="T:System.IdentityModel.Configuration.IdentityConfigurationElement" /> 从配置文件。
            </summary>
      <returns>
              默认值 （未命名） <see langword="&lt;identityConfiguration&gt;" /> 元素。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.SystemIdentityModelSection.IdentityConfigurationElements">
      <summary>
              获取 <see cref="T:System.IdentityModel.Configuration.IdentityConfigurationElementCollection" /> 从配置文件。
            </summary>
      <returns>
              一个包含的所有集合 <see langword="&lt;identityConfiguration&gt;" /> 中的元素 <see langword="&lt;system.identityModel&gt;" /> 部分。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.TokenReplayDetectionElement.Enabled">
      <summary>
              获取或设置一个值，该值指示是否应执行重播检测。
            </summary>
      <returns>
              <see langword="true" /> 若要执行重播检测。否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.TokenReplayDetectionElement.ExpirationPeriod">
      <summary>
              获取或设置最长时间之前的项被视为过期并从缓存中删除。
            </summary>
      <returns>
              最长时间被视为一个项之前过期，从缓存中删除。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.X509CertificateValidationElement.CertificateValidationMode">
      <summary>
              获取或设置证书验证模式。
            </summary>
      <returns>
              证书验证模式。
               默认值为 <see cref="F:System.ServiceModel.Security.X509CertificateValidationMode.PeerOrChainTrust" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.X509CertificateValidationElement.CertificateValidator">
      <summary>
              获取或设置 <see cref="" /> 的 X.509 证书验证程序。
            </summary>
      <returns>
              一个包装的 X.509 证书验证程序类型的元素。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.X509CertificateValidationElement.RevocationMode">
      <summary>
              获取或设置吊销模式。
            </summary>
      <returns>
              吊销模式。
               默认值为 <see cref="F:System.Security.Cryptography.X509Certificates.X509RevocationMode.OnLine" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Configuration.X509CertificateValidationElement.TrustedStoreLocation">
      <summary>
              获取或设置 X.509 证书的受信任存储区位置。
            </summary>
      <returns>
              X.509 证书存储区位置。
               默认值为 <see cref="F:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.DeflateCookieTransform.MaxDecompressedSize">
      <summary>
              获取或设置最大大小，以字节为单位，以解压缩的 cookie。
            </summary>
      <returns>
              以字节为单位，解压缩 cookie 的最大大小。
            </returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.AttributeCount">
      <summary>
              获取位于当前读取器位置的属性数。
            </summary>
      <returns>
              属性数目。
            </returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.BaseURI">
      <summary>
              获取当前节点的基 URI。
            </summary>
      <returns>
              基 URI。
            </returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.Depth">
      <summary>
              获取当前节点的深度。
            </summary>
      <returns>
              深度。
            </returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.EOF">
      <summary>
              获取一个值，该值指示读取器定位在流的末尾。
            </summary>
      <returns>
              <see langword="true" /> 如果用户是该流，则末尾否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.HasValue">
      <summary>
              获取一个值，该值指示当前节点是否可以具有 <see cref="P:System.Xml.XmlReader.Value" />。
            </summary>
      <returns>
              <see langword="true" /> 如果当前节点可以具有 <see cref="P:System.Xml.XmlReader.Value" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.InnerReader">
      <summary>
              获取此实例包装内部读取器。
            </summary>
      <returns>
              内部读取器。
            </returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.IsDefault">
      <summary>
              获取一个值，该值指示当前节点是否是从 DTD 或架构中定义的默认值生成的属性。
            </summary>
      <returns>
              <see langword="true" /> 如果当前节点生成的默认值;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.IsEmptyElement">
      <summary>
              获取一个值，该值指示当前节点是否为空元素。
            </summary>
      <returns>
              <see langword="true" /> 如果当前节点是一个空的元素;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.Item(System.Int32)">
      <summary>
              获取具有指定索引的属性的值。
            </summary>
      <param name="i">
                属性的索引。
              </param>
      <returns>
              指定索引处的属性值。
            </returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.Item(System.String)">
      <summary>
              获取具有指定名称的属性的值 (如返回 <see cref="P:System.Xml.XmlReader.Name" /> 从包装读取器的属性)。
            </summary>
      <param name="name">
                属性的限定名称。
              </param>
      <returns>
              指定的属性的值。
               如果未找到该属性，则返回 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.Item(System.String,System.String)">
      <summary>
              获取具有指定的本地名称和命名空间 URI 的属性的值 (如返回 <see cref="P:System.Xml.XmlReader.LocalName" /> 属性和 <see cref="P:System.Xml.XmlReader.NamespaceURI" /> 从包装读取器的属性。
            </summary>
      <param name="name">
                属性的本地名称。
              </param>
      <param name="namespaceURI">
                属性的命名空间 URI。
              </param>
      <returns>
              指定的属性的值。
               如果未找到该属性，则返回 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.LocalName">
      <summary>
              获取当前节点的本地名称。
            </summary>
      <returns>
              移除了前缀的当前节点的名称。
            </returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.Name">
      <summary>
              获取当前节点的限定名称。
            </summary>
      <returns>
              当前节点的限定名称。
            </returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.NamespaceURI">
      <summary>
              获取当前节点的 URI 的命名空间。
            </summary>
      <returns>
              命名空间 URI 在当前节点的...
            </returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.NameTable">
      <summary>
              获取与此实例关联的 <see cref="T:System.Xml.XmlNameTable" />。
            </summary>
      <returns>
              <see cref="T:System.Xml.XmlNameTable" />，它使你能够获取该节点内字符串的原子化版本。
            </returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.NodeType">
      <summary>
              获取当前节点的类型。
            </summary>
      <returns>
              <see cref="T:System.Xml.XmlNodeType" /> 值之一，表示当前节点的类型。
            </returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.Prefix">
      <summary>
              获取与当前节点关联的命名空间前缀。
            </summary>
      <returns>
              与当前节点关联的命名空间前缀。
            </returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.QuoteChar">
      <summary>
              获取用于括起属性节点的值的引号字符。
               ("或)。
            </summary>
      <returns>
              用于括起属性节点的值的引号字符（" 或 '）。
            </returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.ReadState">
      <summary>
              获取读取器的状态。
            </summary>
      <returns>
              其中一个 <see cref="T:System.Xml.ReadState" /> 值，该值指定读取器的状态。
            </returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.Value">
      <summary>
              获取当前节点的文本值。
            </summary>
      <returns>
              当前节点的文本值。
               有关详细信息，请参阅 <see cref="P:System.Xml.XmlReader.Value" /> 属性
            </returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.ValueType">
      <summary>
              获取当前节点的公共语言运行时 (CLR) 类型。
            </summary>
      <returns>
              与节点的类型化值对应的 CLR 类型。
               默认值为 <see cref="T:System.String" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.XmlLang">
      <summary>
              获取 <see langword="xml:lang" /> 作用域。
            </summary>
      <returns>
              <see langword="xml:lang" /> 作用域。
            </returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryReader.XmlSpace">
      <summary>
              获取当前 <see langword="xml:space" /> 范围。
            </summary>
      <returns>
              <see cref="T:System.Xml.XmlSpace" /> 值之一。
               如果不存在任何 <see langword="xml:space" /> 范围，则该属性默认值为 <see cref="F:System.Xml.XmlSpace.None" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryWriter.CanCanonicalize">
      <summary>
              返回一个值，该值指示读取器是否支持规范化工作。
            </summary>
      <returns>
              如果读取器支持的规范化; 则为 true否则为 false。
            </returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryWriter.InnerWriter">
      <summary>
              获取已包装的编写器。
            </summary>
      <returns>
              返回 <see cref="T:System.Xml.XmlDictionaryWriter" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.DelegatingXmlDictionaryWriter.WriteState">
      <summary>
              当在派生类中被重写时，获取写入器的状态。
            </summary>
      <returns>
              返回 <see cref="T:System.Xml.WriteState" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.EnvelopedSignatureReader.SigningCredentials">
      <summary>
              获取信封的情况下被用完后以及验证的签名的签名中使用的签名凭据。
            </summary>
      <returns>
              签名的凭据。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.ApplicationServiceDescriptor.Endpoints">
      <summary>
              获取此应用程序服务的终结点。
            </summary>
      <returns>
              应用程序服务的终结点的集合。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.ApplicationServiceDescriptor.PassiveRequestorEndpoints">
      <summary>
              获取此应用程序服务的被动请求者终结点。
            </summary>
      <returns>
              应用程序服务的被动请求者终结点的集合。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.ContactPerson.Company">
      <summary>
              获取或设置的公司名称。
            </summary>
      <returns>
              公司名称。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.ContactPerson.EmailAddresses">
      <summary>
              获取电子邮件地址的集合。
            </summary>
      <returns>
              电子邮件地址的集合。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.ContactPerson.GivenName">
      <summary>
              获取或设置给定的名称。
            </summary>
      <returns>
              给定的名称。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.ContactPerson.Surname">
      <summary>
              获取或设置姓氏。
            </summary>
      <returns>
              姓氏。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.ContactPerson.TelephoneNumbers">
      <summary>
              获取或设置电话号码的集合。
            </summary>
      <returns>
              电话号码的集合。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.ContactPerson.Type">
      <summary>
              获取或设置联系人类型。
            </summary>
      <returns>
              指定联系人的类型的枚举值之一。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.DisplayClaim.ClaimType">
      <summary>
              获取与显示声明关联的声明类型。
            </summary>
      <returns>
              一个表示声明类型的 URI。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.DisplayClaim.Description">
      <summary>
              获取或设置显示声明的说明。
            </summary>
      <returns>
              显示声明说明。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.DisplayClaim.DisplayTag">
      <summary>
              获取或设置显示声明的友好名称。
            </summary>
      <returns>
              显示声明友好名称。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.DisplayClaim.DisplayValue">
      <summary>
              获取或设置显示声明一个可显示值。
            </summary>
      <returns>
              显示声明可显示值。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.DisplayClaim.Optional">
      <summary>
              获取或设置显示声明的可选属性
            </summary>
      <returns>
              <see langword="true" /> 如果显示声明是可选的;否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.DisplayClaim.WriteOptionalAttribute">
      <summary>
              获取或设置一个值，该值指示是否将序列化的可选属性。
            </summary>
      <returns>
              <see langword="true" /> 要序列化的可选属性;否则为 false。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.EncryptionMethod.Algorithm">
      <summary>
              获取或设置加密方法算法属性。
            </summary>
      <returns>
              加密算法的 URI。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.EntitiesDescriptor.ChildEntities">
      <summary>
              获取子 <see cref="T:System.IdentityModel.Metadata.EntityDescriptor" /> 为此实体集合。
            </summary>
      <returns>
              子集合 <see cref="T:System.IdentityModel.Metadata.EntityDescriptor" />。
               默认值为空集合。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.EntitiesDescriptor.ChildEntityGroups">
      <summary>
              获取子 <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" /> 为此实体集合。
            </summary>
      <returns>
              子集合 <see cref="T:System.IdentityModel.Metadata.EntitiesDescriptor" /> 此实体。
               默认值为空集合。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.EntitiesDescriptor.Name">
      <summary>
              获取或设置此实体集合的名称。
            </summary>
      <returns>
              实体集合的名称。
               默认值为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.EntityDescriptor.Contacts">
      <summary>
              获取的集合 <see cref="T:System.IdentityModel.Metadata.ContactPerson" /> 此描述符。
            </summary>
      <returns>
              联系人对象的集合。
               默认值为空集合。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.EntityDescriptor.EntityId">
      <summary>
              获取或设置此描述符的实体 ID。
            </summary>
      <returns>
              实体 id。
               默认值为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.EntityDescriptor.FederationId">
      <summary>
              获取或设置此说明符的联合 ID。
            </summary>
      <returns>
              联合 id。
               默认值为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.EntityDescriptor.Organization">
      <summary>
              获取或设置此说明符的组织。
            </summary>
      <returns>
              组织。
               默认值为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.EntityDescriptor.RoleDescriptors">
      <summary>
              获取此说明符角色描述符的集合。
            </summary>
      <returns>
              角色描述符的集合。
               默认值为空集合。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.EntityId.Id">
      <summary>
              获取或设置实体 id。
            </summary>
      <returns>
              实体 id。
            </returns>
      <exception cref="T:System.ArgumentException">
                  设置实体 ID 长度超过 1024年个字符的尝试时发生。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Metadata.IdentityProviderSingleSignOnDescriptor.SingleSignOnServices">
      <summary>
              获取的集合 <see cref="T:System.IdentityModel.Metadata.ProtocolEndpoint" /> 表示单一登录服务。
            </summary>
      <returns>
              表示单一登录服务的协议终结点的集合。
               默认值为空集合。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.IdentityProviderSingleSignOnDescriptor.SupportedAttributes">
      <summary>
              获取支持 <see cref="T:Microsoft.IdentityModel.Tokens.Saml2Attribute" /> 集合。
            </summary>
      <returns>
              支持的属性的集合。
               默认值为空集合。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.IdentityProviderSingleSignOnDescriptor.WantAuthenticationRequestsSigned">
      <summary>
              获取或设置一个值，该值指示是否应签名身份验证请求。
            </summary>
      <returns>
              <see langword="true" /> 如果应对签名身份验证请求;否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.IndexedProtocolEndpoint.Index">
      <summary>
              获取或设置的索引。
               这是必需的元素。
            </summary>
      <returns>
              索引。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.IndexedProtocolEndpoint.IsDefault">
      <summary>
              获取或设置一个值，该值指示这是否为默认终结点。
               这是可选项。
            </summary>
      <returns>
              <see langword="true" /> 如果这是默认的终结点;否则为 <see langword="false" />。
               可以为 <see langword="null" />。
               默认值为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.IndexedProtocolEndpointDictionary.Default">
      <summary>
              获取默认的 <see cref="T:System.IdentityModel.Metadata.IndexedProtocolEndpoint" />。
            </summary>
      <returns>
              默认的 <see cref="T:System.IdentityModel.Metadata.IndexedProtocolEndpoint" />。
              <see langword="null" /> 如果存在无默认值。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.KeyDescriptor.EncryptionMethods">
      <summary>
              获取的集合 <see cref="T:System.IdentityModel.Metadata.EncryptionMethod" /> 此密钥的描述符。
            </summary>
      <returns>
              加密方法的集合。
               默认值为空集合。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.KeyDescriptor.KeyInfo">
      <summary>
              获取或设置此密钥描述符的密钥标识符。
            </summary>
      <returns>
              密钥标识符。
               默认值为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.KeyDescriptor.Use">
      <summary>
              获取或设置 <see cref="T:System.IdentityModel.Metadata.KeyType" /> 此密钥的描述符。
            </summary>
      <returns>
              指定密钥类型的枚举值之一。
               默认值为 <see cref="F:System.IdentityModel.Metadata.KeyType.Unspecified" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.LocalizedEntry.Language">
      <summary>
              获取或设置的区域性信息。
            </summary>
      <returns>
              区域性信息。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  尝试将该属性设置为 <see langword="null" /> 时发生。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Metadata.LocalizedName.Name">
      <summary>
              获取或设置名称。
            </summary>
      <returns>
              名称。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.LocalizedUri.Uri">
      <summary>
              获取或设置一个 URI。
            </summary>
      <returns>
              URI。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.MetadataBase.SigningCredentials">
      <summary>
              获取或设置的签名凭据。
            </summary>
      <returns>
              签名的凭据。
               默认值为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.MetadataSerializer.CertificateValidationMode">
      <summary>
              获取或设置用于签署的元数据文档的 X.509 证书验证模式。
            </summary>
      <returns>
              指定 X.509 证书验证模式的枚举值之一。
               通过指定了默认值 <see cref="F:System.IdentityModel.Configuration.IdentityConfiguration.DefaultCertificateValidationMode" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.MetadataSerializer.CertificateValidator">
      <summary>
              获取或设置用于签署的元数据文档的 X.509 证书的证书验证程序。
            </summary>
      <returns>
              X.509 证书的证书验证程序。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.MetadataSerializer.RevocationMode">
      <summary>
              获取或设置用于签署的元数据文档的 X.509 证书的吊销模式。
            </summary>
      <returns>
              指定 X.509 证书吊销模式的枚举值之一。
               通过指定了默认值 <see cref="F:System.IdentityModel.Configuration.IdentityConfiguration.DefaultRevocationMode" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.MetadataSerializer.SecurityTokenSerializer">
      <summary>
              获取当前实例用于序列化安全令牌的令牌序列化程序。
            </summary>
      <returns>
              令牌序列化程序的当前实例使用。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.MetadataSerializer.TrustedIssuers">
      <summary>
              获取受信任的元数据对文档进行签名的当前实例的受信任颁发者的列表。
            </summary>
      <returns>
              受信任的颁发者的列表。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.MetadataSerializer.TrustedStoreLocation">
      <summary>
              获取或设置用于签署的元数据文档的 X.509 证书的受信任存储区位置。
            </summary>
      <returns>
              存储区位置指定 X.509 证书的枚举值之一。
               通过指定了默认值 <see cref="F:System.IdentityModel.Configuration.IdentityConfiguration.DefaultTrustedStoreLocation" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.Organization.DisplayNames">
      <summary>
              获取与组织关联的显示名称的集合。
            
               这是必需的元素。
            </summary>
      <returns>
              显示名称的集合。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.Organization.Names">
      <summary>
              获取与组织关联的名称的集合。
            
               这是必需的元素。
            </summary>
      <returns>
              名称的集合。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.Organization.Urls">
      <summary>
              获取与组织相关联的 Url 的集合。
            
               这是必需的元素。
            </summary>
      <returns>
              URL 项的集合。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.ProtocolEndpoint.Binding">
      <summary>
              获取或设置的绑定。
               这是必需的元素。
            </summary>
      <returns>
              一个 URI，表示当前实例的绑定。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.ProtocolEndpoint.Location">
      <summary>
              获取或设置的位置。
               这是必需的元素。
            </summary>
      <returns>
              一个 URI，表示当前实例的位置。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.ProtocolEndpoint.ResponseLocation">
      <summary>
              获取或设置响应的位置。
               这是可选元素。
            </summary>
      <returns>
              用于表示当前实例的响应位置的 URI。
               默认值为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.RoleDescriptor.Contacts">
      <summary>
              获取的集合 <see cref="T:System.IdentityModel.Metadata.ContactPerson" />。
            </summary>
      <returns>
              为此角色描述符的联系人的集合。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.RoleDescriptor.ErrorUrl">
      <summary>
              获取或设置错误 URL。
            </summary>
      <returns>
              此角色描述符错误 URL。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.RoleDescriptor.Keys">
      <summary>
              获取的集合 <see cref="T:System.IdentityModel.Metadata.KeyDescriptor" />。
            </summary>
      <returns>
              为此角色描述符密钥描述符的集合。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.RoleDescriptor.Organization">
      <summary>
              获取或设置 <see cref="P:System.IdentityModel.Metadata.RoleDescriptor.Organization" />。
            </summary>
      <returns>
              此角色描述符的组织。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.RoleDescriptor.ProtocolsSupported">
      <summary>
              获取受支持的协议的集合。
            </summary>
      <returns>
              受支持协议的此角色描述符的集合。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.RoleDescriptor.ValidUntil">
      <summary>
              获取或设置的过期时间。
            </summary>
      <returns>
              此角色描述符到期时间。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.SecurityTokenServiceDescriptor.PassiveRequestorEndpoints">
      <summary>
              获取的集合 <see cref="T:System.ServiceModel.EndpointAddress" /> 表示被动请求者终结点。
            </summary>
      <returns>
              被动请求者的终结点的集合。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.SecurityTokenServiceDescriptor.SecurityTokenServiceEndpoints">
      <summary>
              获取的集合 <see cref="T:System.ServiceModel.EndpointAddress" /> ，表示安全令牌服务的终结点。
            </summary>
      <returns>
              终结点的集合。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.ServiceProviderSingleSignOnDescriptor.AssertionConsumerServices">
      <summary>
              获取 <see cref="T:System.IdentityModel.Metadata.IndexedProtocolEndpointDictionary" /> ，其中包含支持 [SAMLProf] 中定义的身份验证请求的协议的配置文件的索引终结点。
            </summary>
      <returns>
              此实例的 <see cref="T:System.IdentityModel.Metadata.IndexedProtocolEndpointDictionary" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.ServiceProviderSingleSignOnDescriptor.AuthenticationRequestsSigned">
      <summary>
              获取或设置一个值，该值指示是否将签名由服务提供商发送的请求。
            </summary>
      <returns>
              <see langword="true" /> 如果发送针对服务提供商的身份验证请求将进行签名;否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.ServiceProviderSingleSignOnDescriptor.WantAssertionsSigned">
      <summary>
              获取或设置一个值，该值指示是否应签名，服务提供程序接收的断言。
            </summary>
      <returns>
              <see langword="true" /> 如果断言收到的服务提供程序应进行签名则否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.SingleSignOnDescriptor.ArtifactResolutionServices">
      <summary>
              获取 <see cref="T:System.IdentityModel.Metadata.IndexedProtocolEndpointDictionary" /> 对象，其中包含对项目解析服务的索引终结点。
            </summary>
      <returns>
              <see cref="T:System.IdentityModel.Metadata.IndexedProtocolEndpointDictionary" /> ，其中包含对项目解析服务的索引终结点。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.SingleSignOnDescriptor.NameIdentifierFormats">
      <summary>
              获取表示支持的名称标识符格式的 Uri 的集合。
            </summary>
      <returns>
              表示支持的名称标识符格式的 Uri 的集合。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.SingleSignOnDescriptor.SingleLogoutServices">
      <summary>
              获取服务终结点的单一注销的集合。
            </summary>
      <returns>
              单一注销服务终结点的集合。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.WebServiceDescriptor.ClaimTypesOffered">
      <summary>
              获取一套 <see cref="T:System.IdentityModel.Metadata.DisplayClaim" /> ，它表示提供的声明类型。
            </summary>
      <returns>
              提供的声明类型的集合。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.WebServiceDescriptor.ClaimTypesRequested">
      <summary>
              获取一套 <see cref="T:System.IdentityModel.Metadata.DisplayClaim" /> ，表示请求的声明类型。
            </summary>
      <returns>
              请求的声明类型的集合。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.WebServiceDescriptor.ServiceDescription">
      <summary>
              获取或设置服务说明。
            </summary>
      <returns>
              服务说明。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.WebServiceDescriptor.ServiceDisplayName">
      <summary>
              获取或设置服务显示名称。
            </summary>
      <returns>
              服务显示名称。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.WebServiceDescriptor.TargetScopes">
      <summary>
              获取一套 <see cref="T:System.ServiceModel.EndpointAddress" /> 表示目标作用域。
            </summary>
      <returns>
              目标作用域的集合。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Metadata.WebServiceDescriptor.TokenTypesOffered">
      <summary>
              获取提供的令牌类型的集合。
            </summary>
      <returns>
              提供的令牌类型的集合。
            </returns>
    </member>
    <member name="P:System.IdentityModel.OpenObject.Properties">
      <summary>
              获取属性包可以扩展对象。
            </summary>
      <returns>
              属性包，可以扩展对象。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Policy.AuthorizationContext.ClaimSets">
      <summary>
              获取与授权策略关联的声明集。
            </summary>
      <returns>
              一个类型为 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.IdentityModel.Claims.ClaimSet" />，它包含声明集。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Policy.AuthorizationContext.ExpirationTime">
      <summary>
              获取此 <see cref="T:System.IdentityModel.Policy.AuthorizationContext" /> 对象不再有效的日期和时间。
            </summary>
      <returns>
              一个 <see cref="T:System.DateTime" /> 值，指示此 <see cref="T:System.IdentityModel.Policy.AuthorizationContext" /> 对象不再有效的日期和时间。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Policy.AuthorizationContext.Id">
      <summary>
              获取此 <see cref="T:System.IdentityModel.Policy.AuthorizationContext" /> 对象的唯一标识符。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Policy.AuthorizationContext" /> 对象。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Policy.AuthorizationContext.Properties">
      <summary>
              获取与此 <see cref="T:System.IdentityModel.Policy.AuthorizationContext" /> 对象关联的非声明属性的集合。
            </summary>
      <returns>
              一个指定非声明属性集合的 <see cref="T:System.Collections.Generic.Dictionary`2" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Policy.EvaluationContext.ClaimSets">
      <summary>
              获取 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 对象的只读集合，该集合包含由已经过评估的授权策略添加的声明。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 对象，它包含由已经过评估的授权策略添加的声明。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Policy.EvaluationContext.Generation">
      <summary>
              获取已向评估上下文中添加声明的次数。
            </summary>
      <returns>
              已向评估上下文中添加声明的次数。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Policy.EvaluationContext.Properties">
      <summary>
              获取与此 <see cref="T:System.IdentityModel.Policy.EvaluationContext" /> 关联的非声明属性的集合。
            </summary>
      <returns>
              一个指定非声明属性集合的 <see cref="T:System.Collections.Generic.Dictionary`2" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Policy.IAuthorizationComponent.Id">
      <summary>
              获取标识此授权组件的字符串。
            </summary>
      <returns>
              一个标识此授权组件的字符串。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Policy.IAuthorizationPolicy.Issuer">
      <summary>
              获取一个表示授权策略颁发者的声明集。
            </summary>
      <returns>
              一个表示授权策略颁发者的 <see cref="T:System.IdentityModel.Claims.ClaimSet" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.AdditionalContext.Items">
      <summary>
              获取此实例的上下文项的集合。
            </summary>
      <returns>
              <see cref="T:System.Collections.Generic.IList`1" /> 的 <see cref="T:System.IdentityModel.Protocols.WSTrust.ContextItem" /> 作为名称 / 值对的集合 (RST) 请求提供上下文的对象。
               默认值为空列表。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.BinaryExchange.BinaryData">
      <summary>
              获取与 BinaryExchange 元素关联的二进制数据。
            </summary>
      <returns>
              一个数组 <see cref="T:System.Byte" /> ，包含二进制数据。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.BinaryExchange.EncodingType">
      <summary>
              获取 EncodingType URI。
            </summary>
      <returns>
              一个 <see cref="T:System.Uri" /> ，其中包含的编码类型。
               这是 BinaryExchange 元素的 EncodingType 属性的值。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.BinaryExchange.ValueType">
      <summary>
              获取 ValueType URI。
            </summary>
      <returns>
              一个 <see cref="T:System.Uri" /> ，其中包含的值类型。
               这是 BinaryExchange 元素的 ValueType 属性的值。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.ContextItem.Name">
      <summary>
              获取或设置名称 URI。
            </summary>
      <returns>
              一个 <see cref="T:System.Uri" /> 包含名称属性的值。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.ContextItem.Scope">
      <summary>
              获取或设置范围 URI。
            </summary>
      <returns>
              一个 <see cref="T:System.Uri" /> ，其中包含作用域属性的值。
               可以为 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  尝试设置一个值，不是 <see langword="null" /> 并不是绝对 URI。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.ContextItem.Value">
      <summary>
              获取或设置的上下文项的值。
            </summary>
      <returns>
              ContextItem 元素的值。
               可以为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.EndpointReference.Details">
      <summary>
              获取终结点引用中包含的 XML 元素的集合。
               集合中不包括 wsa:Address 元素。
            </summary>
      <returns>
              终结点引用中包含的 XML 元素的集合。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.EndpointReference.Uri">
      <summary>
              获取指定的终结点引用的地址的 URI。
            </summary>
      <returns>
              终结点引用的地址。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.Lifetime.Created">
      <summary>
              获取的令牌创建时间以 UTC 时间。
            </summary>
      <returns>
              一个 <see cref="T:System.DateTime" /> ，它表示在其中创建该令牌的 UTC 时间。
               可以为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.Lifetime.Expires">
      <summary>
              获取令牌的过期时间的 UTC 时间。
            </summary>
      <returns>
              一个 <see cref="T:System.DateTime" /> ，它表示令牌过期时的 UTC 时间。
               可以为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.Participants.Participant">
      <summary>
              获取可以使用该令牌的参与者的列表。
            </summary>
      <returns>
              参与者的列表。
               在列表中的每个项都包含 wst:Participant 元素的内容。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.Participants.Primary">
      <summary>
              获取或设置已颁发令牌的主要用户。
            </summary>
      <returns>
              <see cref="T:System.ServiceModel.Protocols.WSTrust.EndpointReference" /> 包含令牌的主要用户的地址。
               这是 wst:Primary 元素的内容。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.ProtectedKey.WrappingCredentials">
      <summary>
              获取密钥的加密凭据。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.SecurityTokenService.EncryptingCredentials" /> ，表示用来加密密钥的凭据。
              <see langword="null" /> 指示该密钥不加密。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.Renewing.AllowRenewal">
      <summary>
              获取或设置一个值，该值指示是否可以续订令牌。
            </summary>
      <returns>
              <see langword="true" /> 如果允许续订;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.Renewing.OkForRenewalAfterExpiration">
      <summary>
              获取或设置一个值，该值指示是否可以过期后续订令牌。
            </summary>
      <returns>
              <see langword="true" /> 如果可以续订请求的令牌，过期; 后否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestClaim.ClaimType">
      <summary>
              获取请求的声明的类型。
            </summary>
      <returns>
              表示声明类型 URI。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestClaim.IsOptional">
      <summary>
              获取或设置一个值，该值指示请求声明是否可选在响应中。
            </summary>
      <returns>
              <see langword="true" /> 如果声明是可选的响应中;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestClaim.Value">
      <summary>
              获取或设置请求的声明值。
            </summary>
      <returns>
              声明的值。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestClaimCollection.Dialect">
      <summary>
              获取或设置的方言属性。
            </summary>
      <returns>
              一个字符串，其中包含标识方言的 URI。
               默认值是 <see cref="F:System.IdentityModel.Protocols.WSIdentity.WSIdentityConstants.Dialect" />, ，这指示 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestClaim" /> 集合中的对象对应于信息卡配置文件。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestedProofToken.ComputedKeyAlgorithm">
      <summary>
              获取计算所得的密钥算法用于计算组合的平均信息量用例中的会话密钥。
            </summary>
      <returns>
              一个字符串，包含一个 URI，指示该计算的密钥算法。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestedProofToken.ProtectedKey">
      <summary>
              在这种情况中获取的密钥，当 wst:RequestedProofToken 元素包含一个键。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.ProtectedKey" /> ，表示的键，可以为加密或清除文本。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken.SecurityToken">
      <summary>
              获取已颁发的安全令牌时 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken" /> 使用该令牌本身创建的实例。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> 表示已颁发的安全令牌。
              <see langword="null" /> 如果 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken" /> 使用令牌的 XML 创建实例。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken.SecurityTokenXml">
      <summary>
              获取的 XML 表示形式已颁发的安全令牌时 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken" /> 使用令牌的 XML 创建实例。
            </summary>
      <returns>
              <see cref="T:System.Xml.XmlElement" /> ，其中包含的 XML 表示形式的安全令牌。
              <see langword="null" /> 如果 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken" /> 实例使用创建 <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> 对象。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.ActAs">
      <summary>
              获取或设置请求程序尝试充当标识的安全令牌。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityTokenElement" /> ，表示请求程序尝试使其作为的标识。
               可以为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.AdditionalContext">
      <summary>
              获取或设置请求的附加上下文信息。
            </summary>
      <returns>
              <see cref="T:System.IdentityModel.Protocols.WSTrust.AdditionalContext" /> 包含请求的附加上下文信息。
               可以为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.CancelTarget">
      <summary>
              获取或设置要采用 WS 信任取消请求取消的标记。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityTokenElement" /> ，包含要取消的标记。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.Claims">
      <summary>
              获取客户端 （请求程序） 发出请求的声明类型。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestClaimCollection" /> ，其中包含请求的声明。
               默认值为空集合。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.ComputedKeyAlgorithm">
      <summary>
              获取一个表示所需的算法在计算的密钥可用于已颁发的令牌时要使用的 URI。
            </summary>
      <returns>
              一个字符串，其中包含表示计算所得的密钥算法的 URI。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.Delegatable">
      <summary>
              获取或设置一个值，指定是否应将已颁发的令牌标记为可以进行委派。
            </summary>
      <returns>
              <see langword="true" /> 如果颁发的令牌是可以进行委派。否则为 <see langword="false" />。
               可以为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.DelegateTo">
      <summary>
              获取或设置应向其委派颁发的令牌的标识。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityTokenElement" /> ，表示应向其委派颁发的令牌的标识。
               可以为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.Encryption">
      <summary>
              获取或设置有关的令牌和密钥在加密时使用的信息。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityTokenElement" /> ，其中包含加密的信息。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.Forwardable">
      <summary>
              获取或设置一个值，指定是否颁发的令牌应标记为票据。
            </summary>
      <returns>
              <see langword="true" /> 如果颁发的令牌是票据;否则为 <see langword="false" />。
               可以为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.Issuer">
      <summary>
              获取或设置 wst:OnBehalfOf 令牌的颁发者。
            </summary>
      <returns>
              一个 <see cref="T:System.ServiceModel.EndpointAddress" /> ，其中包含颁发者的地址。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.OnBehalfOf">
      <summary>
              获取或设置代表发出请求的标识令牌。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityTokenElement" /> 包含在请求发出的标识令牌。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.Participants">
      <summary>
              获取或设置有权使用的已颁发的令牌的参与者。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.Participants" /> ，其中包含有权使用的已颁发的令牌的参与者。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.ProofEncryption">
      <summary>
              获取或设置要用于加密的证明令牌的令牌。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityTokenElement" /> 包含的令牌。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.Renewing">
      <summary>
              获取或设置针对 WS 信任续订请求的续订语义。
            </summary>
      <returns>
              返回 <see cref="T:System.IdentityModel.Protocols.WSTrust.Renewing" /> ，其中包含更新语义。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.RenewTarget">
      <summary>
              获取或设置要在 WS 信任环境中续订的令牌续订请求。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityTokenElement" /> ，包含要续订的令牌。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.SecondaryParameters">
      <summary>
              获取或设置为其请求者不是原始发件人的参数。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 包含辅助参数的请求; 即，为其请求者不是原始发件人的参数。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.ValidateTarget">
      <summary>
              获取或设置要在 WS 信任验证的令牌验证请求。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityTokenElement" /> ，包含要验证的令牌。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse.IsFinal">
      <summary>
              获取或设置用于确定是否 RSTR 是最后一条消息，并应在这种序列化的标志。
            </summary>
      <returns>
              <see langword="true" /> 如果 RSTR 是最后一条消息;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse.RequestedAttachedReference">
      <summary>
              获取或设置请求的令牌附加到消息时的安全令牌引用。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> ，其中包含该引用。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse.RequestedProofToken">
      <summary>
              获取或设置用于返回拥有令牌的证明的可选元素。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestedProofToken" /> 表示的证明令牌。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse.RequestedSecurityToken">
      <summary>
              获取或设置用来返回请求的安全令牌的可选元素。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken" /> 表示安全令牌。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse.RequestedTokenCancelled">
      <summary>
              获取或设置 wst:RequestedTokenCancelled 元素。
            </summary>
      <returns>
              <see langword="true" /> 如果该标记已取消;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse.RequestedUnattachedReference">
      <summary>
              获取或设置请求的令牌未附加到消息的安全令牌引用。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> ，其中包含该引用。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse.Status">
      <summary>
              获取或设置中 RSTR wst:Status 元素。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.Status" /> ，它包含一个 WS 信任验证申请的状态信息。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.Status.Code">
      <summary>
              获取或设置在 RSTR WS 信任验证绑定的状态代码。
            </summary>
      <returns>
              一个字符串，包含状态代码的 URI。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.Status.Reason">
      <summary>
              获取或设置在 RSTR WS 信任验证绑定的可选状态原因。
            </summary>
      <returns>
              返回一个字符串，包含的原因。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.UseKey.SecurityKeyIdentifier">
      <summary>
              获取安全密钥标识符
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> ，表示安全密钥标识符。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.UseKey.Token">
      <summary>
              获取安全令牌，如果序列化程序不能将其转换为安全密钥标识符。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> 表示的令牌。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.AllowPostdating">
      <summary>
              获取或设置 wst:AllowPostdating 元素的内容。
            </summary>
      <returns>
              <see langword="true" /> 如果返回的令牌应允许对远期令牌; 的请求否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.AppliesTo">
      <summary>
              获取或设置 wsp:AppliesTo 元素的内容。
            </summary>
      <returns>
              <see cref="T:System.ServiceModel.EndpointAddress" /> ，表示为其所需的安全令牌的终结点地址。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.AuthenticationType">
      <summary>
              获取或设置 wst:AuthenticationType 元素的内容。
            </summary>
      <returns>
              一个字符串，包含一个 URI，指示所需的身份验证的类型。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.BinaryExchange">
      <summary>
              获取或设置 wst:BinaryExchange 元素的内容。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.BinaryExchange" /> 包含二进制数据交换。
               这包括 ValueType 和 EncodingType 属性，以及实际数据的内容。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.CanonicalizationAlgorithm">
      <summary>
              获取或设置 wst:CanonicalizationAlgorithm 元素的内容。
            </summary>
      <returns>
              一个字符串，包含一个 URI，指示的规范化算法。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.Context">
      <summary>
              获取或设置上的 RST 或 RSTR 的上下文属性的内容。
            </summary>
      <returns>
              一个字符串，包含一个 URI，标识请求或响应消息的上下文。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.EncryptionAlgorithm">
      <summary>
              获取或设置 wst:EncryptionAlgorithm 元素的内容。
            </summary>
      <returns>
              一个字符串，包含一个 URI，指示的加密算法。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.EncryptWith">
      <summary>
              获取或设置 wst:EncryptWith 元素的内容。
            </summary>
      <returns>
              一个字符串，包含一个 URI，指示所需的加密 algoritm 要用于颁发的安全令牌。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  尝试将该属性设置为 <see langword="null" /> 或空字符串的出现。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.Entropy">
      <summary>
              获取或设置 wst:Entropy 元素的内容。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.Entropy" /> 表示平均信息量元素的内容。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.KeySizeInBits">
      <summary>
              获取或设置作为 RequestSecurityToken (RST) 消息内 wst:KeySize 元素的内容。
            </summary>
      <returns>
              密钥的大小（以位为单位）。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  尝试将设置一个值小于或等于零时发生。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.KeyType">
      <summary>
              获取或设置作为 RequestSecurityToken (RST) 消息内 wst:KeyType 元素的内容。
            </summary>
      <returns>
              一个字符串，其中包含标识所需的键的类型的 URI。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.KeyWrapAlgorithm">
      <summary>
              获取或设置 wst:KeyWrapAlgorithm 元素的内容。
            </summary>
      <returns>
              一个字符串，其中包含标识该密钥的 URI 换行算法。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.Lifetime">
      <summary>
              获取或设置作为 RequestSecurityToken (RST) 消息内 wst:Lifetime 元素的内容。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.Lifetime" /> ，它表示所需的时间在此期间，返回的令牌才有效。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.ReplyTo">
      <summary>
              获取或设置要用于给信赖方答复的地址。
            </summary>
      <returns>
              一个字符串，包含的地址。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.RequestType">
      <summary>
              获取或设置 wst: requesttype 元素。
            </summary>
      <returns>
              一个字符串，包含一个 URI，指示所请求的类型;例如，一个中定义的常数 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestTypes" /> 类。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.SignatureAlgorithm">
      <summary>
              获取或设置 wst:SignatureAlgorithm 元素的内容。
            </summary>
      <returns>
              一个字符串，包含一个 URI，指示签名算法。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.SignWith">
      <summary>
              获取或设置 wst:SignWith 元素的内容。
            </summary>
      <returns>
              一个包含标识所需的签名算法的 URI 的字符串。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  尝试将值设置为 <see langword="null" /> 或空字符串的出现。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.TokenType">
      <summary>
              获取或设置 wst:TokenType 元素的内容。
            </summary>
      <returns>
              一个字符串，包含一个 URI，指示标记的类型。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.UseKey">
      <summary>
              获取或设置 wst:UseKey 元素的内容。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.UseKey" /> 包含密钥。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext.SecurityTokenHandlerCollectionManager">
      <summary>
              获取 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager" /> ，其中包含的组 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> WS 信任消息中找到用于序列化和验证令牌的对象。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager" /> 对象。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext.SecurityTokenHandlers">
      <summary>
              获取或设置的集合 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> WS 信任消息中找到用于序列化和验证安全令牌的对象。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollection" /> 对象。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext.TokenResolver">
      <summary>
              获取或设置 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> 对象用于解析在 WS 信任消息的大多数元素中找到的安全令牌引用。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> 对象。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext.UseKeyTokenResolver">
      <summary>
              获取或设置 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> 用于解析的安全令牌引用在 RST 消息的 wst:UseKey 元素，以及在 RST 消息中找到的 wst:RenewTarget 元素中找到的对象。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> 对象。
            </returns>
    </member>
    <member name="P:System.IdentityModel.RsaEncryptionCookieTransform.DecryptionKeys">
      <summary>
              获取默认情况下，用于解密的密钥此属性返回包含仅加密密钥的列表。
            </summary>
      <returns>
              可用于解密密钥。
            </returns>
    </member>
    <member name="P:System.IdentityModel.RsaEncryptionCookieTransform.EncryptionKey">
      <summary>
              获取或设置用于加密的 RSA 密钥
            </summary>
      <returns>
              用于加密的 RSA 密钥。
            </returns>
    </member>
    <member name="P:System.IdentityModel.RsaEncryptionCookieTransform.HashName">
      <summary>
              获取或设置要使用的哈希算法的名称。
            </summary>
      <returns>
              要使用的哈希算法的名称。
               默认值为"SHA2566"。
            </returns>
    </member>
    <member name="P:System.IdentityModel.RsaSignatureCookieTransform.HashName">
      <summary>
              获取或设置要使用的哈希算法的名称。
            </summary>
      <returns>
              哈希算法的名称。
               默认值为"SHA256"。
            </returns>
    </member>
    <member name="P:System.IdentityModel.RsaSignatureCookieTransform.SigningKey">
      <summary>
              获取或设置用于签名的 RSA 密钥。
            </summary>
      <returns>
              用于签名 RSA 密钥。
            </returns>
    </member>
    <member name="P:System.IdentityModel.RsaSignatureCookieTransform.VerificationKeys">
      <summary>
              获取用于签名验证的密钥的集合。
            
               默认情况下，此属性返回包含仅签名的密钥的列表。
            </summary>
      <returns>
              用于签名验证的键的集合。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Scope.AppliesToAddress">
      <summary>
              获取或设置依赖方的 appliesTo 地址。
            </summary>
      <returns>
              信赖方 appliesTo 地址。
               这通常是一个 URI。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Scope.EncryptingCredentials">
      <summary>
              获取或设置为信赖方的加密凭据。
            </summary>
      <returns>
              为信赖方使用的加密凭据。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Scope.Properties">
      <summary>
              获取属性包可以扩展对象。
            </summary>
      <returns>
              属性包中。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Scope.ReplyToAddress">
      <summary>
              获取或设置依赖方的回复地址。
            </summary>
      <returns>
              信赖方 replyTo 地址。
               这通常是一个 URI。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Scope.SigningCredentials">
      <summary>
              获取或设置为信赖方的签名凭据。
            </summary>
      <returns>
              为信赖方使用的签名凭据。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired">
      <summary>
              获取或设置一个值，该值指示是否必须加密颁发的对称密钥。
            </summary>
      <returns>
              <see langword="true" /> 如果必须对对称密钥进行加密;，否则为 <see langword="false" />。
               默认值为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Scope.TokenEncryptionRequired">
      <summary>
              获取或设置一个值，该值指示是否必须加密颁发的安全令牌。
            </summary>
      <returns>
              <see langword="true" /> 如果安全令牌必须加密;，否则为 <see langword="false" />。
               默认值为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.SecurityTokenService.FederatedAsyncState.ClaimsPrincipal">
      <summary>
              获取与异步调用关联的令牌请求者的标识。
            </summary>
      <returns>
              令牌请求者的标识。
            </returns>
    </member>
    <member name="P:System.IdentityModel.SecurityTokenService.FederatedAsyncState.Request">
      <summary>
              获取与异步调用关联的令牌请求 (RST)。
            </summary>
      <returns>
              与异步调用关联的令牌请求。
            </returns>
    </member>
    <member name="P:System.IdentityModel.SecurityTokenService.FederatedAsyncState.Result">
      <summary>
              获取 <see cref="T:System.IAsyncResult" /> 与异步调用关联。
            </summary>
      <returns>
              <see cref="T:System.IAsyncResult" /> 表示异步调用的状态。
            </returns>
    </member>
    <member name="P:System.IdentityModel.SecurityTokenService.FederatedAsyncState.SecurityTokenHandler">
      <summary>
              获取或设置令牌颁发异步调用过程中将使用的安全令牌处理程序。
            </summary>
      <returns>
              将使用令牌处理程序。
            </returns>
    </member>
    <member name="P:System.IdentityModel.SecurityTokenService.Principal">
      <summary>
              获取或设置与当前实例关联的主体。
            </summary>
      <returns>
              一个 <see cref="T:System.Security.Claims.ClaimsPrincipal" /> ，它表示当前的主体。
            </returns>
    </member>
    <member name="P:System.IdentityModel.SecurityTokenService.Request">
      <summary>
              获取或设置与当前实例关联的安全令牌请求 (RST)。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> ，其中包含该请求。
            </returns>
    </member>
    <member name="P:System.IdentityModel.SecurityTokenService.Scope">
      <summary>
              获取或设置与当前实例关联的范围。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Scope" /> 表示令牌颁发请求的配置。
            </returns>
    </member>
    <member name="P:System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor">
      <summary>
              获取或设置 <see cref="T:System.IdentityModel.Tokens.SecurityTokenDescriptor" /> 与当前实例相关联。
            </summary>
      <returns>
              安全令牌说明符与当前实例相关联。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  尝试将该属性设置为 <see langword="null" /> 时发生。
                </exception>
    </member>
    <member name="P:System.IdentityModel.SecurityTokenService.SecurityTokenServiceConfiguration">
      <summary>
              获取配置实例的所有者。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration" /> ，其中包含当前实例的配置。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.KerberosSecurityTokenProvider.NetworkCredential">
      <summary>
              获取 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的标识。
            </summary>
      <returns>
              一个 <see cref="T:System.Net.NetworkCredential" />，它表示 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 的标识。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.KerberosSecurityTokenProvider.ServicePrincipalName">
      <summary>
              获取要获取的 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的服务主体名称。
            </summary>
      <returns>
              要获取的 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的服务主体名称。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.KerberosSecurityTokenProvider.TokenImpersonationLevel">
      <summary>
              获取一个值，该值指定 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的接收方可在多大程度上代表客户端执行操作。
            </summary>
      <returns>
              一个 <see cref="T:System.Security.Principal.TokenImpersonationLevel" />，它指定 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的接收方可在多大程度上代表客户端执行操作。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.AllowedAudienceUris">
      <summary>
              获取的目标 Uri 集为其 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌可能会成为目标才被视为有效由此 <see cref="T:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator" /> 实例。
            </summary>
      <returns>
              一个类型为 <see cref="T:System.Collections.Generic.IList`1" /> 的 <see cref="T:System.String" />，它包含 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的目标 URI 集，只有在使用这些目标 URI 时，此安全令牌身份验证器才会将该令牌视为有效令牌。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.AudienceUriMode">
      <summary>
              获取或设置一个 <see cref="T:System.IdentityModel.Selectors.AudienceUriMode" />，它指定是否应验证 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的 <see cref="T:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition" />。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Selectors.AudienceUriMode" />，指定是否应验证 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的 <see cref="T:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenProvider.SecurityTokenAsyncResult.AsyncState">
      <summary>
              获取作为异步方法调用的最后一个参数传递的对象。
            </summary>
      <returns>
              返回 <see cref="T:System.Object" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenProvider.SecurityTokenAsyncResult.AsyncWaitHandle">
      <summary>
              获取封装 Win32 同步句柄的 <see cref="T:System.Threading.WaitHandle" />。
            </summary>
      <returns>
              返回 <see cref="T:System.Threading.WaitHandle" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenProvider.SecurityTokenAsyncResult.CompletedSynchronously">
      <summary>
              返回 <see langword="true" /> 调用完成异步; 否则为如果 <see langword="false" />。
            </summary>
      <returns>
              返回 <see cref="T:System.Boolean" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenProvider.SecurityTokenAsyncResult.IsCompleted">
      <summary>
              返回 <see langword="true" /> 如果异步调用的是已完成; 否则为 <see langword="false" />。
            </summary>
      <returns>
              返回 <see cref="T:System.Boolean" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenProvider.SupportsTokenCancellation">
      <summary>
              获取一个值，该值指示是否可以取消安全令牌。
            </summary>
      <returns>
              如果可以取消安全令牌，则为 <see langword="true" />；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenProvider.SupportsTokenRenewal">
      <summary>
              获取一个值，该值指示是否可以续订安全令牌。
            </summary>
      <returns>
              如果可以续订安全令牌，则为 <see langword="true" />；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenRequirement.IsOptionalTokenProperty">
      <summary>
              获取令牌的属性的值，如果它是可选的。
            </summary>
      <returns>
              令牌的属性的值。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenRequirement.KeySize">
      <summary>
              获取或设置与安全令牌相关联的密钥的要求大小。
            </summary>
      <returns>
              与安全令牌相关联的密钥的大小（以位为单位）。
               默认值为 0。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.KeySize" /> 属性被设置为一个小于 0 的值。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenRequirement.KeySizeProperty">
      <summary>
              获取一个值，该值指定 <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> 属性在 <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.KeySize" /> 集合中的索引名称。
            </summary>
      <returns>
              <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> 属性在 <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.KeySize" /> 集合中的索引名称。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyType">
      <summary>
              获取或设置与安全令牌相关联的密钥的类型（非对称或对称）。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyType" />，它指定了与安全令牌相关联的密钥的类型（非对称或对称）。
               默认值为 <see langword="SymmetricKey" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyTypeProperty">
      <summary>
              获取一个值，该值指定 <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> 属性在 <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyType" /> 集合中的索引名称。
            </summary>
      <returns>
              <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> 属性在 <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyType" /> 集合中的索引名称。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyUsage">
      <summary>
              获取或设置一个值，该值指定与安全令牌相关联的密钥的使用方式。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyUsage" />，它指定与安全令牌相关联的密钥的使用方式。
               默认值为 <see cref="F:System.IdentityModel.Tokens.SecurityKeyUsage.Signature" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyUsageProperty">
      <summary>
              获取一个值，该值指定 <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> 属性在 <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyUsage" /> 集合中的索引名称。
            </summary>
      <returns>
              <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> 属性在 <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyUsage" /> 集合中的索引名称。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenRequirement.PeerAuthenticationMode">
      <summary>
              获取用于指定对等身份验证方法的属性在 <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> 集合中的索引名称。
            </summary>
      <returns>
              用于指定对等身份验证方法的属性在 <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> 集合中的索引名称。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties">
      <summary>
              获取当前 <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" /> 实例的非静态属性的集合。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.Generic.IDictionary`2" />，它包含当前 <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" /> 实例的非静态属性的集合。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenRequirement.RequireCryptographicToken">
      <summary>
              获取或设置一个值，该值指示安全令牌是否必须能够执行加密操作（例如加密）。
            </summary>
      <returns>
              如果安全令牌必须能够执行加密操作，则为 <see langword="true" />；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenRequirement.RequireCryptographicTokenProperty">
      <summary>
              获取 <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> 属性在 <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.RequireCryptographicToken" /> 集合中的索引名称。
            </summary>
      <returns>
              <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> 属性在 <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.RequireCryptographicToken" /> 集合中的索引名称。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenRequirement.TokenType">
      <summary>
              获取或设置要求的安全令牌类型。
            </summary>
      <returns>
              要求的安全令牌类型。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.SecurityTokenRequirement.TokenTypeProperty">
      <summary>
              获取一个值，该值指定 <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> 属性在 <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.TokenType" /> 集合中的索引名称。
            </summary>
      <returns>
              <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties" /> 属性在 <see cref="P:System.IdentityModel.Selectors.SecurityTokenRequirement.TokenType" /> 集合中的索引名称。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.UserNamePasswordValidator.None">
      <summary>
              获取不对用户名和密码执行验证的验证程序。
               因此，用户名和密码总是被视为有效。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Selectors.UserNamePasswordValidator" />，它不对用户名和密码执行验证。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.X509CertificateValidator.ChainTrust">
      <summary>
              获取使用信任链来验证 X.509 证书的验证程序。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" />，它使用信任链来验证 X.509 证书。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.X509CertificateValidator.None">
      <summary>
              获取不对 X.509 证书执行验证的验证程序。
               因此，X.509 证书总是被视为有效。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" />，它不对 X.509 证书执行验证。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.X509CertificateValidator.PeerOrChainTrust">
      <summary>
              获取一个验证程序，它通过验证证书是否位于 <see langword="TrustedPeople" /> 证书存储区中来验证证书，或通过构建证书信任链来验证证书。
               如果证书通过任一验证方法，就是受信任的。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" />，它通过验证证书是否位于 <see langword="TrustedPeople" /> 证书存储区中来验证证书，或通过构建证书信任链来验证证书。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.X509CertificateValidator.PeerTrust">
      <summary>
              获取一个验证程序，它验证证书是否位于 <see langword="TrustedPeople" /> 证书存储区中。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" />，它验证证书是否位于 <see langword="TrustedPeople" /> 证书存储区中。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.X509SecurityTokenAuthenticator.MapCertificateToWindowsAccount">
      <summary>
              获取一个值，指示是否将 X.509 证书映射到 Windows 帐户。
            </summary>
      <returns>
              若要将 X.509 证书映射到 Windows 帐户，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Selectors.X509SecurityTokenProvider.Certificate">
      <summary>
              获取与 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> 安全令牌相关联的 X.509 证书。
            </summary>
      <returns>
              获取用于表示安全令牌的 X.509 证书的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.AggregateTokenResolver.TokenResolvers">
      <summary>
              获取此实例包装的令牌解析程序的安全性。
            </summary>
      <returns>
              包含此实例包装令牌解析程序的只读集合。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.AsymmetricProofDescriptor.KeyIdentifier">
      <summary>
              从使用的密钥获取已向请求者的密钥标识符。
               它可以回显返回在 SAML 令牌，如有必要。
            </summary>
      <returns>
              请求者提供从使用密钥的密钥标识符。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.AudienceRestriction.AllowedAudienceUris">
      <summary>
              获取允许的受众 Uri 的列表。
            </summary>
      <returns>
              允许的受众 Uri 的列表。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.AudienceRestriction.AudienceMode">
      <summary>
              获取或设置在其中应用受众 URI 限制的模式。
            </summary>
      <returns>
              指定在其中应用了受众 URI 限制的模式的枚举值之一。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.AuthenticationContext.Authorities">
      <summary>
              获取机构以用于解析的身份验证事件的集合。
            </summary>
      <returns>
              颁发机构以用于解析的身份验证事件的集合。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.AuthenticationContext.ContextClass">
      <summary>
              获取或设置要用于解析的身份验证事件的上下文类。
            </summary>
      <returns>
              要用于解析的身份验证事件的上下文类。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.AuthenticationContext.ContextDeclaration">
      <summary>
              获取或设置要用于解析的身份验证事件的上下文声明。
            </summary>
      <returns>
              要用于解析的身份验证事件的上下文声明。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.BootstrapContext.SecurityToken">
      <summary>
              获取用于初始化上下文的安全令牌。
            </summary>
      <returns>
              安全令牌或 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.BootstrapContext.SecurityTokenHandler">
      <summary>
              获取用于初始化上下文的令牌处理程序。
            </summary>
      <returns>
              令牌处理程序或 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.BootstrapContext.Token">
      <summary>
              获取用于初始化上下文的字符串。
            </summary>
      <returns>
              用于初始化上下文的字符串或 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.BootstrapContext.TokenBytes">
      <summary>
              获取用于初始化上下文的数组。
            </summary>
      <returns>
              用于初始化上下文的数组或 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry.ConfiguredTrustedIssuers">
      <summary>
              获取此实例的已配置的受信任颁发者的字典。
            </summary>
      <returns>
              一个字典，其中包含受信任的颁发者。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.EmptySecurityKeyIdentifierClause.Context">
      <summary>
              获取用于提供一个提示，当需要解析为某个特定键的对象。
            </summary>
      <returns>
              一个对象，需要解析为某个特定键时给出一个提示。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials.WrappingCredentials">
      <summary>
              获取包装用于加密会话密钥; 凭据的密钥例如， <see cref="T:System.IdentityModel.Tokens.X509EncryptingCredentials" />。
            </summary>
      <returns>
              <see cref="T:System.IdentityModel.Tokens.EncryptingCredentials" /> 表示用于加密会话密钥的凭据。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.CarriedKeyName">
      <summary>
              获取与加密密钥相关联的用户可读名称。
            </summary>
      <returns>
              与加密密钥相关联的用户可读名称。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptingKeyIdentifier">
      <summary>
              获取加密密钥的密钥标识符。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />，表示加密密钥的密钥标识符。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.EncryptionMethod">
      <summary>
              获取用于加密密钥的加密算法。
            </summary>
      <returns>
              用于加密密钥的加密算法。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptedSecurityToken.EncryptingCredentials">
      <summary>
              获取要用于加密的凭据。
            </summary>
      <returns>
              要用于加密的凭据。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptedSecurityToken.Id">
      <summary>
              获取安全令牌的唯一标识符。
            </summary>
      <returns>
              安全令牌的唯一标识符。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptedSecurityToken.SecurityKeys">
      <summary>
              获取与安全令牌相关联的加密密钥。
            </summary>
      <returns>
              与安全令牌相关联的密钥集。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptedSecurityToken.Token">
      <summary>
              获取加密的令牌。
            </summary>
      <returns>
              加密的令牌。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptedSecurityToken.ValidFrom">
      <summary>
              在安全令牌无效的时间内获取的最初时刻。
            </summary>
      <returns>
              中的安全令牌的有效时间瞬间。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptedSecurityToken.ValidTo">
      <summary>
              获取最后一个时刻的安全令牌无效。
            </summary>
      <returns>
              安全令牌无效的时的时刻上一次。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanWriteToken">
      <summary>
              获取一个值，该值指示是否处理程序提供的令牌序列化功能。
            </summary>
      <returns>
              <see langword="true" /> 如果该处理程序可以序列化令牌;否则为 <see langword="false" />。
               总是为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.KeyInfoSerializer">
      <summary>
              获取或设置 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> 将使用序列化和反序列化密钥标识符从 <see langword="&lt;xenc:EncryptedData&gt;" /> 元素。
            </summary>
      <returns>
              将用于读取和写入的令牌序列化程序密钥的密钥标识符。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  尝试将该属性设置为 <see langword="null" /> 时发生。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.TokenType">
      <summary>
              获取由当前实例的标记的类型。
            </summary>
      <returns>
              处理的当前实例的令牌类型。
               默认值是 <see langword="typeof" /><see cref="T:System.IdentityModel.Tokens.EncryptedSecurityToken" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptingCredentials.Algorithm">
      <summary>
              获取或设置加密算法。
            </summary>
      <returns>
              一个 URI，表示用来加密校验密钥的加密算法。
            </returns>
      <exception cref="T:System.ArgumentException">
                  尝试将属性设置为 <see langword="null" /> 或为空字符串。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptingCredentials.SecurityKey">
      <summary>
              获取或设置加密密钥材料。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> ，包含用于加密校验密钥的加密密钥。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  尝试将属性设置为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.EncryptingCredentials.SecurityKeyIdentifier">
      <summary>
              获取或设置标识加密凭据的标识符。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> 用于标识用于加密校验密钥的密钥。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  尝试将属性设置为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.GenericXmlSecurityKeyIdentifierClause.ReferenceXml">
      <summary>
              获取表示密钥标识符子句的 XML 元素。
            </summary>
      <returns>
              XML 元素，表示密钥标识符子句。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.AuthorizationPolicies">
      <summary>
              获取此安全令牌的授权策略集合。
            </summary>
      <returns>
              一个类型为 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" />，包含此安全令牌的授权策略集。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.ExternalTokenReference">
      <summary>
              获取当此安全令牌未包含在引用它的 SOAP 消息内时引用此安全令牌的安全密钥标识符子句。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，表示安全令牌未包含在引用它的 SOAP 消息内时对此安全令牌的引用。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.Id">
      <summary>
              获取安全令牌的唯一标识符。
            </summary>
      <returns>
              安全令牌的唯一标识符。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.InternalTokenReference">
      <summary>
              获取当此安全令牌包含在引用它的 SOAP 消息内时引用此安全令牌的安全密钥标识符子句。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />，表示安全令牌包含在引用它的 SOAP 消息内时对此安全令牌的引用。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.ProofToken">
      <summary>
              获取安全令牌的证明令牌。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />，表示安全令牌的证明令牌。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.SecurityKeys">
      <summary>
              获取与证明令牌相关联的加密密钥。
            </summary>
      <returns>
              一个类型为 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.IdentityModel.Tokens.SecurityKey" />，包含与证明令牌相关联的密钥集。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.TokenXml">
      <summary>
              获取与安全令牌相关联的 XML。
            </summary>
      <returns>
              一个 <see cref="T:System.Xml.XmlElement" />，表示与安全令牌相关联的 XML。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.ValidFrom">
      <summary>
              获取此安全令牌有效的最初时刻。
            </summary>
      <returns>
              一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最初时刻。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.GenericXmlSecurityToken.ValidTo">
      <summary>
              获取此安全令牌有效的最后时刻。
            </summary>
      <returns>
              一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最后时刻。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize">
      <summary>
              获取密钥的大小（以位为单位）。
            </summary>
      <returns>
              密钥的大小（以位为单位）。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.IssuerTokenResolver.WrappedTokenResolver">
      <summary>
              获取此实例包装的安全令牌解析。
            </summary>
      <returns>
              已包装的令牌解析器。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosReceiverSecurityToken.SecurityKey">
      <summary>
              获取与此安全令牌关联的 Kerberos 票证的对称会话密钥。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey" />，它包含与此安全令牌关联的 Kerberos 票证的对称会话密钥。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosReceiverSecurityToken.SecurityKeys">
      <summary>
              获取与安全令牌相关联的加密密钥。
            </summary>
      <returns>
              一个类型为 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.IdentityModel.Tokens.SecurityKey" />，包含与安全令牌相关联的密钥集。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosReceiverSecurityToken.ValidFrom">
      <summary>
              获取此安全令牌有效的最初时刻。
            </summary>
      <returns>
              一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最初时刻。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosReceiverSecurityToken.ValidTo">
      <summary>
              获取此安全令牌有效的最后时刻。
            </summary>
      <returns>
              一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最后时刻。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosReceiverSecurityToken.ValueTypeUri">
      <summary>
              获取用于描述值类型的 URI。
            </summary>
      <returns>
              返回 <see cref="T:System.String" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosReceiverSecurityToken.WindowsIdentity">
      <summary>
              获取与此安全令牌关联的 Windows 用户。
            </summary>
      <returns>
              一个表示 Windows 用户的 <see cref="T:System.Security.Principal.WindowsIdentity" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.Id">
      <summary>
              获取安全令牌的唯一标识符。
            </summary>
      <returns>
              安全令牌的唯一标识符。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.SecurityKey">
      <summary>
              获取与此安全令牌关联的 Kerberos 票证的对称会话密钥。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey" />，它包含与此安全令牌关联的 Kerberos 票证的对称会话密钥。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.SecurityKeys">
      <summary>
              获取与安全令牌相关联的加密密钥。
            </summary>
      <returns>
              一个类型为 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.IdentityModel.Tokens.SecurityKey" />，包含与安全令牌相关联的密钥集。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.ServicePrincipalName">
      <summary>
              获取 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的服务主体名称。
            </summary>
      <returns>
              <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的服务主体名称。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.ValidFrom">
      <summary>
              获取此安全令牌有效的最初时刻。
            </summary>
      <returns>
              一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最初时刻。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosRequestorSecurityToken.ValidTo">
      <summary>
              获取此安全令牌有效的最后时刻。
            </summary>
      <returns>
              一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最后时刻。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosSecurityTokenHandler.CanValidateToken">
      <summary>
              获取一个值，该值指示当前实例是否可以验证安全令牌。
            </summary>
      <returns>
              <see langword="true" /> 如果该处理程序可以验证令牌;否则为 <see langword="false" />。
               默认值为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.KerberosSecurityTokenHandler.TokenType">
      <summary>
              获取由当前实例的标记的类型。
            </summary>
      <returns>
              由当前实例的标记的类型。
               默认情况下，这是一种 <see cref="T:System.IdentityModel.Tokens.KerberosReceiverSecurityToken" /> 类。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.LocalId">
      <summary>
              获取当前 SOAP 消息中 XML 元素的 <see langword="wsu:Id" /> 属性值。
            </summary>
      <returns>
              当前 SOAP 消息中 XML 元素的 <see langword="wsu:Id" /> 属性值。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.OwnerType">
      <summary>
              获取 <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.LocalId" /> 属性所引用的安全令牌的类型。
            </summary>
      <returns>
              一个 <see cref="T:System.Type" />，包含 <see cref="P:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause.LocalId" /> 属性所引用的安全令牌的类型。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.ProofDescriptor.KeyIdentifier">
      <summary>
              派生类中实现时，获取可在已颁发的令牌定义键的键标识符。
            </summary>
      <returns>
              密钥标识符。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.RsaKeyIdentifierClause.CanCreateKey">
      <summary>
              获取一个值，该值指示是否可以从密钥标识符子句创建密钥。
            </summary>
      <returns>
              在所有情况下均为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.RsaKeyIdentifierClause.Rsa">
      <summary>
              获取与密钥标识符子句关联的 RSA 算法。
            </summary>
      <returns>
              一个表示 RSA 算法的 <see cref="T:System.Security.Cryptography.RSA" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.RsaSecurityKey.KeySize">
      <summary>
              获取密钥的大小（以位为单位）。
            </summary>
      <returns>
              密钥的大小（以位为单位）。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.RsaSecurityToken.Id">
      <summary>
              获取安全令牌的唯一标识符。
            </summary>
      <returns>
              安全令牌的唯一标识符。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.RsaSecurityToken.Rsa">
      <summary>
              获取能够创建非对称密钥的 RSA 算法。
            </summary>
      <returns>
              一个 <see cref="T:System.Security.Cryptography.RSA" />，表示能够创建非对称密钥的 RSA 算法。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.RsaSecurityToken.SecurityKeys">
      <summary>
              获取与安全令牌相关联的加密密钥。
            </summary>
      <returns>
              一个类型为 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.IdentityModel.Tokens.SecurityKey" />，包含与安全令牌相关联的密钥集。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.RsaSecurityToken.ValidFrom">
      <summary>
              获取此安全令牌有效的最初时刻。
            </summary>
      <returns>
              一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最初时刻。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.RsaSecurityToken.ValidTo">
      <summary>
              获取此安全令牌有效的最后时刻。
            </summary>
      <returns>
              一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最后时刻。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.RsaSecurityTokenHandler.CanValidateToken">
      <summary>
              获取一个值，该值指示此处理程序是否支持验证的类型的令牌 <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" />。
            </summary>
      <returns>
              <see langword="true" /> 如果该处理程序支持的类型的令牌验证 <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" />; 否则为 <see langword="false" />。
               总是为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.RsaSecurityTokenHandler.CanWriteToken">
      <summary>
              获取一个值，该值指示此处理程序是否可以编写类型的令牌 <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" />。
            </summary>
      <returns>
              <see langword="true" /> 如果该处理程序可以编写类型的令牌 <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" />; 否则为 <see langword="false" />。
               总是为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.RsaSecurityTokenHandler.TokenType">
      <summary>
              获取 <see cref="T:System.Type" /> 该处理程序处理的令牌。
            </summary>
      <returns>
              <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" /> 的类型。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Action.Namespace">
      <summary>
              获取或设置表示在其中指定操作的名称将被解释的 XML 命名空间的 URI 引用。
            </summary>
      <returns>
              <see cref="T:System.Uri" /> 表示的命名空间。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  尝试将该属性设置为 <see langword="null" /> 时发生。
                </exception>
      <exception cref="T:System.ArgumentException">
                  设置一个值，不是绝对 URI 的尝试时发生。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Action.Value">
      <summary>
              获取或设置的操作的主题 <see cref="T:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement" /> 可以在资源上执行。
            </summary>
      <returns>
              该操作的主题的 <see cref="T:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement" /> 可以在资源上执行。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  尝试设置一个值，该值 <see langword="null" /> 或空字符串的出现。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Advice.AssertionIdReferences">
      <summary>
              获取所引用的 id。 断言的集合
            </summary>
      <returns>
              类型的集合 <see cref="T:System.IdentityModel.Tokens.Saml2Id" /> ，其中包含引用断言的 Id。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Advice.Assertions">
      <summary>
              获取断言值所指定的集合。
            </summary>
      <returns>
              类型的集合 <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" /> 包含的断言。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Advice.AssertionUriReferences">
      <summary>
              获取所引用的 URI 断言的集合。
            </summary>
      <returns>
              类型的集合 <see cref="T:System.Uri" /> ，其中包含引用声明的 Uri。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Assertion.Advice">
      <summary>
              获取或设置与断言，可帮助相关的其他信息处理在某些情况下，但这可能会忽略由应用程序不理解的建议或不希望使其使用。
               [Saml2Core，2.3.3]
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2Advice" /> 包含断言为相关的其他信息。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Assertion.CanWriteSourceData">
      <summary>
              获取一个值，该值指示是否从 XML 源进行反序列化此断言，并可以重新发出 XML 数据不变。
            </summary>
      <returns>
              <see langword="true" /> 如果此断言重新发出 XML 源数据保持不变;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Assertion.Conditions">
      <summary>
              获取或设置在评估的有效性和/或使用断言时都必须进行评估的条件。
               [Saml2Core 2.3.3]
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2Conditions" /> 包含的条件。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Assertion.EncryptingCredentials">
      <summary>
              获取或设置用于加密该断言的凭据。
               使用加密凭据中的密钥标识符为嵌入 <see langword="EncryptedKey" /> 中 <see langword="EncryptedData" /> 元素。
            </summary>
      <returns>
              返回 <see cref="T:Microsoft.IdentityModel.Tokens.EncryptingCredentials" /> 表示的凭据。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Assertion.ExternalEncryptedKeys">
      <summary>
              获取或设置包含指定任何其他加密的密钥的集合外部到 EncryptedData 元素，作为 EncryptedAssertion 元素的子级。
            </summary>
      <returns>
              类型的集合 <see cref="T:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause" /> ，包含的键。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Assertion.Id">
      <summary>
              获取或设置断言的标识符。
               [Saml2Core，2.3.3]
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2Id" /> 表示的标识符。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  尝试将该属性设置为 <see langword="null" /> 时发生。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Assertion.IssueInstant">
      <summary>
              获取或设置即时的问题的时间以 utc 为单位。
               [Saml2Core，2.3.3]
            </summary>
      <returns>
              一个 <see cref="T:System.DateTime" /> ，表示从该处此断言的颁发时间采用 UTC 时间。
               默认值为 <see cref="P:System.DateTime.UtcNow" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Assertion.Issuer">
      <summary>
              获取或设置正在索赔断言的 SAML 授权机构的标识符。
               [Saml2Core，2.3.3]
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" /> ，它指定颁发者。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  尝试将该属性设置为 <see langword="null" /> 时发生。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Assertion.SigningCredentials">
      <summary>
              颁发者用于保护该断言的完整性的凭据。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SigningCredentials" /> 表示的凭据。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Assertion.Statements">
      <summary>
              获取包含的语句的集合与有关进行此断言中的主题。
            </summary>
      <returns>
              类型的集合 <see cref="T:System.IdentityModel.Tokens.Saml2Statement" /> ，它包含断言语句。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Assertion.Subject">
      <summary>
              获取或设置断言中的语句的主题。
               [Saml2Core，2.3.3]
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2Subject" /> 指定的主题。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Assertion.Version">
      <summary>
              获取此断言的 SAML 版本。
               [Saml2Core，2.3.3]
            </summary>
      <returns>
              一个字符串，包含的版本。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Attribute.AttributeValueXsiType">
      <summary>
              获取或设置 SAML 属性中包含的值的 xsi: type。
            </summary>
      <returns>
              一个字符串，包含 xsi: type。
               默认值为 <see cref="F:System.Security.Claims.ClaimValueTypes.String" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  尝试设置一个值，该值 <see langword="null" /> 或空发生。
                
                  - 或 -
                
                  尝试设置一个值的格式不正确，会发生。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Attribute.FriendlyName">
      <summary>
              获取或设置该属性的用户可读名称。
               [Saml2Core，2.7.3.1]
            </summary>
      <returns>
              一个字符串，包含该属性的友好名称。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Attribute.Name">
      <summary>
              获取或设置属性的名称。
               [Saml2Core，2.7.3.1]
            </summary>
      <returns>
              一个包含属性名称的字符串。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  尝试设置一个值，该值 <see langword="null" /> 或空字符串的出现。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Attribute.NameFormat">
      <summary>
              获取或设置一个 URI，表示用于解释名称的特性名称的分类。
               [Saml2Core，2.7.3.1]
            </summary>
      <returns>
              一个 <see cref="T:System.Uri" /> ，它表示该分类。
            </returns>
      <exception cref="T:System.ArgumentException">
                  尝试设置一个值，不是 <see langword="null" /> 并且不是绝对 URI 发生。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Attribute.OriginalIssuer">
      <summary>
              获取或设置表示该 SAML 属性的 OriginalIssuer 的字符串。
            </summary>
      <returns>
              一个字符串，包含该属性的原始颁发者。
            </returns>
      <exception cref="T:System.ArgumentException">
                  尝试设置一个值为空字符串，会发生。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Attribute.Values">
      <summary>
              获取包含该属性的值的集合。
            </summary>
      <returns>
              包含属性值的字符串集合。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AttributeStatement.Attributes">
      <summary>
              获取属性语句中包含的属性的集合。
               这些属性是对断言使用者与相关联。
               [Saml2Core，2.7.3]
            </summary>
      <returns>
              类型的集合 <see cref="T:System.IdentityModel.Tokens.Saml2Attribute" /> ，其中包含该语句中的属性。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AudienceRestriction.Audiences">
      <summary>
              获取指定给它发送断言受众的 Uri 的集合。
               条件为信赖方的任何指定的访问群体成员是否有效。
            </summary>
      <returns>
              类型的集合 <see cref="T:System.Uri" /> ，它指定访问者。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AuthenticationContext.AuthenticatingAuthorities">
      <summary>
              获取的零个或多个唯一标识符 (Uri 在 （不包括断言颁发者，假定为已而无需显式包含在集合中所涉及的人员） 的主体进行身份验证过程中涉及的身份验证机构的) 集合。
               [Saml2Core，2.7.2.2]
            </summary>
      <returns>
              返回类型的集合 <see cref="T:System.Uri" /> ，它标识在主体的身份验证过程中涉及的身份验证机构。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AuthenticationContext.ClassReference">
      <summary>
              获取或设置标识身份验证上下文类，用于描述遵循的身份验证上下文声明的 URI 引用。
               [Saml2Core，2.7.2.2]
            </summary>
      <returns>
              一个 <see cref="T:System.Uri" /> 标识上下文类。
            </returns>
      <exception cref="T:System.ArgumentException">
                  尝试设置一个值，不是 <see langword="null" /> 并且不是绝对 URI 发生。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AuthenticationContext.DeclarationReference">
      <summary>
              获取或设置一个 URI 引用，标识的身份验证上下文声明。
               [Saml2Core，2.7.2.2]
            </summary>
      <returns>
              一个 <see cref="T:System.Uri" /> 标识的身份验证上下文声明。
            </returns>
      <exception cref="T:System.ArgumentException">
                  尝试设置一个值，不是 <see langword="null" /> 并且不是绝对 URI 发生。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AuthenticationStatement.AuthenticationContext">
      <summary>
              获取或设置使用的最多颁发机构进行身份验证和包括生成此语句在身份验证事件的上下文。
               [Saml2Core，2.7.2]
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2AuthenticationContext" /> 表示的上下文。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  尝试设置一个值，该值 <see langword="null" /> 时发生。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AuthenticationStatement.AuthenticationInstant">
      <summary>
              获取或设置发生身份验证的时间。
               [Saml2Core，2.7.2]
            </summary>
      <returns>
              一个 <see cref="T:System.DateTime" /> ，它表示的时间以 utc 为单位的身份验证。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AuthenticationStatement.SessionIndex">
      <summary>
              获取或设置由使用者和身份验证机构标识的主体之间的特定会话的索引。
               [Saml2Core，2.7.2]
            </summary>
      <returns>
              一个字符串，包含会话索引。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AuthenticationStatement.SessionNotOnOrAfter">
      <summary>
              获取或设置即时速率由使用者和 SAML 授权机构发出该语句标识的主体之间的会话，必须考虑结束的时间。
               [Saml2Core，2.7.2]
            </summary>
      <returns>
              返回一个可以为 null <see cref="T:System.DateTime" /> ，表示会话过期时间以 utc 为单位。
               一个 <see langword="null" /> 值指示未指定的属性。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AuthenticationStatement.SubjectLocality">
      <summary>
              获取或设置的 DNS 域名和从其对断言使用者进行显然是身份验证系统的 IP 地址。
               [Saml2Core，2.7.2]
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2SubjectLocality" /> ，用于指定 DNS 域名和 IP 地址。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement.Actions">
      <summary>
              获取或设置的一组有权在指定的资源上执行的操作。
            </summary>
      <returns>
              类型的集合 <see cref="T:System.IdentityModel.Tokens.Saml2Action" /> ，它指定的授权的操作。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement.Decision">
      <summary>
              获取或设置由指定资源有关的 SAML 授权机构做出的决定。
            </summary>
      <returns>
              <see cref="T:System.IdentityModel.Tokens.SamlAccessDecision" /> 值之一，它指定由 SAML 授权机构做出的、与主题访问指定资源有关的授权决定。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  尝试设置一个值，不是有效 <see cref="T:System.IdentityModel.Tokens.SamlAccessDecision" /> 值的出现。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement.Evidence">
      <summary>
              获取或设置的一套断言的 SAML 授权机构做出的决策中依赖于。
               [Saml2Core，2.7.4]
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2Evidence" /> 包含的断言。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement.Resource">
      <summary>
              获取或设置标识要试图访问授权的资源的 URI 引用。
            </summary>
      <returns>
              一个 <see cref="T:System.Uri" /> 标识的资源。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  尝试设置一个值，该值 <see langword="null" /> 时发生。
                </exception>
      <exception cref="T:System.ArgumentException">
                  设置一个值，不是绝对 URI 或不是一个空的相对 URI 的尝试时发生。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Conditions.AudienceRestrictions">
      <summary>
              获取指定给它发送断言的受众的集合。
               [Saml2Core，2.5.1]
            </summary>
      <returns>
              类型的集合 <see cref="T:System.IdentityModel.Tokens.Saml2AudienceRestriction" /> ，它指定断言的受众。
               如果该集合为空的受众没有限制应用。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Conditions.NotBefore">
      <summary>
              获取或设置断言无效即时的最早时间。
               [Saml2Core，2.5.1]
            </summary>
      <returns>
              一个可以为 null <see cref="T:System.DateTime" /> ，其中包含即时以 utc 为单位的时间。
               一个 <see langword="null" /> 值指示该属性不存在。
            </returns>
      <exception cref="T:System.ArgumentException">
                  <see cref="P:System.IdentityModel.Tokens.Saml2Conditions.NotOnOrAfter" /> 属性不是 <see langword="null" /> 并尝试设置一个值，会发生，或者在指定的时间即时后 <see cref="P:System.IdentityModel.Tokens.Saml2Conditions.NotOnOrAfter" /> 属性时发生。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Conditions.NotOnOrAfter">
      <summary>
              获取或设置即时断言过期的时间。
               [Saml2Core，2.5.1]
            </summary>
      <returns>
              一个可以为 null <see cref="T:System.DateTime" /> ，其中包含即时以 utc 为单位的时间。
               一个 <see langword="null" /> 值指示该属性不存在。
            </returns>
      <exception cref="T:System.ArgumentException">
                  <see cref="P:System.IdentityModel.Tokens.Saml2Conditions.NotBefore" /> 属性不是 <see langword="null" /> 并尝试设置一个值，在指定的时间即时之前发生 <see cref="P:System.IdentityModel.Tokens.Saml2Conditions.NotBefore" /> 属性时发生。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Conditions.OneTimeUse">
      <summary>
              获取一个值，指定是否断言应立即使用，并且必须不会保留供将来使用。
               [Saml2Core，2.5.1]
            </summary>
      <returns>
              <see langword="true" /> 如果应立即; 使用断言否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Conditions.ProxyRestriction">
      <summary>
              获取或设置上希望随后充当断言当事方自己和他们自己根据原始断言中包含的信息的问题断言的信赖方的断言方施加的限制。
               [Saml2Core，2.5.1]
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2ProxyRestriction" /> ，其中包含在后续的断言方上的限制。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Evidence.AssertionIdReferences">
      <summary>
              获取所引用的 id。 断言的集合
            </summary>
      <returns>
              类型的集合 <see cref="T:System.IdentityModel.Tokens.Saml2Id" /> ，其中包含引用断言的 Id。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Evidence.Assertions">
      <summary>
              获取断言值所指定的集合。
            </summary>
      <returns>
              类型的集合 <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" /> 包含的断言。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Evidence.AssertionUriReferences">
      <summary>
              获取所引用的 URI 断言的集合。
            </summary>
      <returns>
              类型的集合 <see cref="T:System.Uri" /> ，其中包含引用声明的 Uri。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Id.Value">
      <summary>
              获取标识符字符串。
            </summary>
      <returns>
              ID 字符串。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2NameIdentifier.EncryptingCredentials">
      <summary>
              获取或设置用于加密 EncryptedID 元素中的名称标识符的凭据。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.EncryptingCredentials" /> 表示用于加密的名称标识符的凭据。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2NameIdentifier.ExternalEncryptedKeys">
      <summary>
              获取一个集合包含指定的其他加密的密钥作为 EncryptedID 元素的子元素外部到 xenc:EncryptedData 元素。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.ObjectModel.Collection`1" /> ，包含的键。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2NameIdentifier.Format">
      <summary>
              获取或设置一个 URI 引用，表示基于字符串的标识符信息的分类。
               [Saml2Core，2.2.2]
            </summary>
      <returns>
              <see cref="T:System.Uri" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  尝试设置一个值，不是 <see langword="null" /> 并且不是绝对 URI 发生。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2NameIdentifier.NameQualifier">
      <summary>
              获取或设置的安全或管理域的限定名称。
               [Saml2Core，2.2.2]
            </summary>
      <returns>
              该名称限定符。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2NameIdentifier.SPNameQualifier">
      <summary>
              获取或设置服务提供商的名称或用来进一步限定名称 [Saml2Core，2.2.2] 提供程序的隶属关系。
            </summary>
      <returns>
              服务提供程序名称限定符。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2NameIdentifier.SPProvidedId">
      <summary>
              获取或设置由服务提供商或提供程序的实体的隶属关系的名称标识符，如果不同于主名称标识符。
               [Saml2Core，2.2.2]
            </summary>
      <returns>
              一个字符串，其中包含名称标识符。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2NameIdentifier.Value">
      <summary>
              获取或设置的名称标识符的值。
            </summary>
      <returns>
              一个包含名称标识符值的字符串。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  尝试设置一个值，该值 <see langword="null" /> 时发生。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2ProxyRestriction.Audiences">
      <summary>
              获取或设置为其断言方允许新的断言，以根据此断言颁发的受众集。
            </summary>
      <returns>
              类型的集合 <see cref="T:System.Uri" /> ，其中包含新断言可以颁发哪些实体的地址。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2ProxyRestriction.Count">
      <summary>
              获取或设置断言的参与方允许存在此断言与断言其最终根据它发出之间的间接寻址的最大数目。
            </summary>
      <returns>
              可以为 null 的整数。
              <see langword="null" /> 表示未设置该属性，没有限制设置的间接寻址的数量。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  尝试设置一个值，不是 <see langword="null" /> 且小于不会出现零。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SecurityKeyIdentifierClause.Assertion">
      <summary>
              获取当前与此实例关联 Saml2Assertion。
            </summary>
      <returns>
              当前与此实例关联 Saml2Assertion。
               可以为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SecurityToken.Assertion">
      <summary>
              获取此安全令牌的 SAML 断言。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2Assertion" />，表示此安全令牌的 SAML 断言。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SecurityToken.Id">
      <summary>
              获取安全令牌的唯一标识符。
            </summary>
      <returns>
              安全令牌的唯一标识符。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SecurityToken.IssuerToken">
      <summary>
              获取安全令牌的颁发者。
            </summary>
      <returns>
              安全令牌的颁发者。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SecurityToken.SecurityKeys">
      <summary>
              获取与安全令牌相关联的加密密钥。
            </summary>
      <returns>
              一个类型为 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.IdentityModel.Tokens.SecurityKey" />，包含与安全令牌相关联的密钥集。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SecurityToken.ValidFrom">
      <summary>
              获取此安全令牌有效的最初时刻。
            </summary>
      <returns>
              一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最初时刻。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SecurityToken.ValidTo">
      <summary>
              获取此安全令牌有效的最后时刻。
            </summary>
      <returns>
              一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最后时刻。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CanValidateToken">
      <summary>
              获取一个值，该值指示此处理程序可以验证类型的令牌 <see cref="T:System.IdentityModel.Tokens.Saml2SecurityToken" />。
            </summary>
      <returns>
              <see langword="true" />, 指示该处理程序可以验证类型的令牌 <see cref="T:System.IdentityModel.Tokens.Saml2SecurityToken" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CanWriteToken">
      <summary>
              获取一个值，该值指示此处理程序是否可以序列化类型的令牌 <see cref="T:System.IdentityModel.Tokens.Saml2SecurityToken" />。
            </summary>
      <returns>
              <see langword="true" />;指示该处理程序可以序列化类型的令牌 <see cref="T:System.IdentityModel.Tokens.Saml2SecurityToken" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.CertificateValidator">
      <summary>
              获取或设置当前实例用于验证 X.509 证书的 X.509 证书验证程序。
            </summary>
      <returns>
              <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" /> ，它表示该验证程序。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.KeyInfoSerializer">
      <summary>
              获取或设置的安全令牌序列化程序用于序列化和反序列化密钥标识符。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> ，它表示序列化程序。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  尝试将值设置为 <see langword="null" /> 时发生。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.SamlSecurityTokenRequirement">
      <summary>
              获取或设置此实例的令牌要求的安全。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SamlSecurityTokenRequirement" /> 指定的要求。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  尝试将值设置为 <see langword="null" /> 时发生。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SecurityTokenHandler.TokenType">
      <summary>
              获取支持此处理程序的令牌类型。
            </summary>
      <returns>
              <see cref="T:System.Type" /> 的 <see cref="T:System.IdentityModel.Tokens.Saml2SecurityToken" /> 类。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Subject.NameId">
      <summary>
              获取或设置主题的标识符。
               [Saml2Core，2.4.1]
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" /> ，包含的标识符。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2Subject.SubjectConfirmations">
      <summary>
              获取一个集合，其中包含允许使用者进行确认的信息。
               [Saml2Core，2.4.1]
            </summary>
      <returns>
              类型的集合 <see cref="T:System.IdentityModel.Tokens.Saml2SubjectConfirmation" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SubjectConfirmation.Method">
      <summary>
              获取或设置一个 URI 引用，标识协议或机制，以用于确认该主题。
               [Saml2Core，2.4.1.1]
            </summary>
      <returns>
              一个 <see cref="T:System.Uri" /> 表示的引用。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  尝试将该属性设置为 <see langword="null" /> 时发生。
                </exception>
      <exception cref="T:System.ArgumentException">
                  设置一个值，不是绝对 URI 的尝试时发生。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SubjectConfirmation.NameIdentifier">
      <summary>
              获取或设置期望能够满足封闭的使用者确认要求的实体的标识符。
               [Saml2Core，2.4.1.1]
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2NameIdentifier" /> 指定的实体。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SubjectConfirmation.SubjectConfirmationData">
      <summary>
              获取或设置使用的特定确认方法进一步确认信息。
               [Saml2Core，2.4.1.1]
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2SubjectConfirmationData" /> ，包含要用于确认方法的信息。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SubjectConfirmationData.Address">
      <summary>
              获取或设置从中 attesting 实体可能会造成断言的网络地址/位置。
               [Saml2Core，2.4.1.2]
            </summary>
      <returns>
              一个字符串，包含的地址。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SubjectConfirmationData.InResponseTo">
      <summary>
              获取或设置在响应 attesting 实体可以向其提供该断言的 SAML 协议消息的 ID。
               [Saml2Core，2.4.1.2]
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.Saml2Id" /> ，表示该 id。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SubjectConfirmationData.KeyIdentifiers">
      <summary>
              获取以某种方式进行身份验证 attesting 实体使用的加密密钥的集合。
               [Saml2Core，2.4.1.3]
            </summary>
      <returns>
              返回类型的集合 <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKeyIdentifier" /> ，包含的键。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SubjectConfirmationData.NotBefore">
      <summary>
              获取或设置的时间点不能在其前确认该主题。
               [Saml2Core，2.4.1.2]
            </summary>
      <returns>
              一个可以为 null <see cref="T:System.DateTime" /> ，其中包含即时以 utc 为单位的时间。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SubjectConfirmationData.NotOnOrAfter">
      <summary>
              获取或设置从该处不再可以确认主题即时的时间。
               [Saml2Core，2.4.1.2]
            </summary>
      <returns>
              一个可以为 null <see cref="T:System.DateTime" /> ，其中包含即时以 utc 为单位的时间。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SubjectConfirmationData.Recipient">
      <summary>
              获取或设置一个 URI，指定的实体或 attesting 实体可以向其提供该断言的位置。
               [Saml2Core，2.4.1.2]
            </summary>
      <returns>
              一个 <see cref="T:System.Uri" /> 指定的实体或位置。
            </returns>
      <exception cref="T:System.ArgumentException">
                  尝试设置一个值，不是 <see langword="null" /> 并且不是绝对 URI 发生。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SubjectLocality.Address">
      <summary>
              获取或设置从中由使用者标识的主体进行身份验证的系统的网络地址。
               [Saml2Core，2.7.2.1]
            </summary>
      <returns>
              一个字符串，包含的地址。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.Saml2SubjectLocality.DnsName">
      <summary>
              获取或设置从中由使用者标识的主体进行身份验证的系统的 DNS 名称。
               [Saml2Core，2.7.2.1]
            </summary>
      <returns>
              一个字符串，包含的 DNS 名称。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAction.Action">
      <summary>
              获取或设置 <see cref="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement" /> 的主题可对指定资源执行的操作。
            </summary>
      <returns>
              获取或设置 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的主题试图对指定资源执行的操作。
            </returns>
      <exception cref="T:System.ArgumentException">
                  <see cref="P:System.IdentityModel.Tokens.SamlAction.Action" /> 属性设置为 <see langword="null" />。
                
                  - 或 -
                
                  <see cref="P:System.IdentityModel.Tokens.SamlAction.Action" /> 属性设置为 <see cref="F:System.String.Empty" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.IdentityModel.Tokens.SamlAction.IsReadOnly" /> 属性的值为 <see langword="true" />，同时设置了 <see cref="P:System.IdentityModel.Tokens.SamlAction.Action" /> 属性。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAction.IsReadOnly">
      <summary>
              获取一个值，该值指示此实例的属性是否是只读的。
            </summary>
      <returns>
              如果此实例的属性是只读的，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAction.Namespace">
      <summary>
              获取或设置定义 <see cref="P:System.IdentityModel.Tokens.SamlAction.Action" /> 属性的 XML 命名空间。
            </summary>
      <returns>
              在其中定义 <see cref="P:System.IdentityModel.Tokens.SamlAction.Action" /> 属性的 XML 命名空间。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.IdentityModel.Tokens.SamlAction.IsReadOnly" /> 属性为 <see langword="true" />，同时设置了 <see cref="P:System.IdentityModel.Tokens.SamlAction.Namespace" /> 属性。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAdvice.AssertionIdReferences">
      <summary>
              获取对 SAML 断言的引用集合。
            </summary>
      <returns>
              一个类型为 <see cref="T:System.Collections.Generic.IList`1" /> 的 <see cref="T:System.String" />，包含对提供 SAML 断言附加信息的 SAML 断言的引用集合。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAdvice.Assertions">
      <summary>
              获取 SAML 断言的集合。
            </summary>
      <returns>
              一个类型为 <see cref="T:System.Collections.Generic.IList`1" /> 的 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" />，包含提供 SAML 断言附加信息的 SAML 断言。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAdvice.IsReadOnly">
      <summary>
              获取一个值，该值指示此实例的属性是否是只读的。
            </summary>
      <returns>
              如果此实例的属性是只读的，则为 <see langword="true" />；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAssertion.Advice">
      <summary>
              获取或设置与 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 有关的、由 SAML 授权机构提供的、有助于处理 SAML 断言的附加信息。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SamlAdvice" />，它指定由 SAML 授权机构提供的、有助于处理 SAML 断言的附加信息。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.IdentityModel.Tokens.SamlAssertion.Advice" /> 属性设置与 <see cref="P:System.IdentityModel.Tokens.SamlAssertion.IsReadOnly" /> 属性是 <see langword="true" />。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAssertion.AssertionId">
      <summary>
              获取或设置断言的标识符。
            </summary>
      <returns>
              断言的标识符。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.IdentityModel.Tokens.SamlAssertion.IsReadOnly" /> 属性的值为 <see langword="true" />，且试图设置 <see cref="P:System.IdentityModel.Tokens.SamlAssertion.AssertionId" /> 属性。
                </exception>
      <exception cref="T:System.ArgumentException">
                  试图将 <see cref="P:System.IdentityModel.Tokens.SamlAssertion.AssertionId" /> 属性设置为 <see langword="null" /> 或空字符串。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAssertion.CanWriteSourceData">
      <summary>
              获取一个值，该值指示是否从 XML 源进行反序列化此断言，并重新发出 XML 数据不变。
            </summary>
      <returns>
              <see langword="true" /> 如果此断言可以重新发出 XML 源数据保持不变;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAssertion.Conditions">
      <summary>
              获取或设置在评估 SAML 断言的有效性时可能考虑的一组条件。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SamlConditions" />，它指定在评估 SAML 断言的有效性时可能考虑的一组条件。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.IdentityModel.Tokens.SamlAssertion.IsReadOnly" /> 属性是 <see langword="true" /> 和尝试设置 <see cref="P:System.IdentityModel.Tokens.SamlAssertion.Conditions" /> 属性。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAssertion.IsReadOnly">
      <summary>
              获取一个值，该值指示此实例的属性是否是只读的。
            </summary>
      <returns>
              如果此实例的属性是只读的，则为 <see langword="true" />；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAssertion.IssueInstant">
      <summary>
              获取或设置 SAML 断言的颁发日期和时间。
            </summary>
      <returns>
              以协调世界时 (UTC) 表示的 <see cref="T:System.DateTime" />，它指定 SAML 断言的颁发时间。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.IdentityModel.Tokens.SamlAssertion.IsReadOnly" /> 属性是 <see langword="true" /> 和尝试设置 <see cref="P:System.IdentityModel.Tokens.SamlAssertion.IssueInstant" /> 属性。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAssertion.Issuer">
      <summary>
              获取或设置颁发此 SAML 断言的 SAML 授权机构的名称。
            </summary>
      <returns>
              颁发此 SAML 断言的 SAML 授权机构。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.IdentityModel.Tokens.SamlAssertion.IsReadOnly" /> 属性是 <see langword="true" /> 和尝试设置 <see cref="P:System.IdentityModel.Tokens.SamlAssertion.Issuer" /> 属性。
                </exception>
      <exception cref="T:System.ArgumentException">
                  试图将 <see cref="P:System.IdentityModel.Tokens.SamlAssertion.Issuer" /> 属性设置为 <see langword="null" /> 或空字符串。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAssertion.MajorVersion">
      <summary>
              获取此 SAML 断言所遵循的 SAML 规范的主版本。
            </summary>
      <returns>
              此 SAML 断言所遵循的 SAML 规范的主版本。
               默认值为 <see cref="P:System.IdentityModel.Tokens.SamlConstants.MajorVersionValue" /> 属性的值。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAssertion.MinorVersion">
      <summary>
              获取此 SAML 断言所遵循的 SAML 规范的次版本。
            </summary>
      <returns>
              此 SAML 断言所遵循的 SAML 规范的次版本。
               默认值为 <see cref="P:System.IdentityModel.Tokens.SamlConstants.MinorVersionValue" /> 属性的值。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAssertion.SigningCredentials">
      <summary>
              获取或设置用于对 SAML 断言进行数字签名的安全凭据。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SigningCredentials" />，它用于对 SAML 断言进行数字签名。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.IdentityModel.Tokens.SamlAssertion.IsReadOnly" /> 属性为 <see langword="true" />，而试图设置 <see cref="P:System.IdentityModel.Tokens.SamlAssertion.SigningCredentials" /> 属性。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAssertion.SigningToken">
      <summary>
              获取由数字签名的 SAML 断言包含或引用的安全令牌。
            </summary>
      <returns>
              一个由数字签名的 SAML 断言包含或引用的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAssertion.Statements">
      <summary>
              获取与 SAML 断言相关联的 SAML 语句集。
            </summary>
      <returns>
              一个类型为 <see cref="T:System.Collections.Generic.IList`1" /> 的 <see cref="T:System.IdentityModel.Tokens.SamlStatement" />，它包含与 SAML 断言相关联的 SAML 语句。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause.AssertionId">
      <summary>
              获取包含密钥标识符的 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> 的标识符。
            </summary>
      <returns>
              包含密钥标识符的 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" /> 的标识符。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAttribute.AttributeValues">
      <summary>
              获取 SAML 属性的属性值集合。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.Generic.IList`1" />，它包含 SAML 属性的属性值集合。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAttribute.AttributeValueXsiType">
      <summary>
              获取或设置 SAML 属性中包含的值的 xsi: type。
            </summary>
      <returns>
              一个字符串，包含 xsi: type。
               默认值为 <see cref="F:System.Security.Claims.ClaimValueTypes.String" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  尝试设置一个值，该值 <see langword="null" /> 或空发生。
                
                  - 或 -
                
                  尝试设置一个值的格式不正确，会发生。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAttribute.IsReadOnly">
      <summary>
              获取一个值，该值指示此实例的属性是否是只读的。
            </summary>
      <returns>
              如果此实例的属性是只读的，则为 <see langword="true" />；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAttribute.Name">
      <summary>
              获取或设置 SAML 属性的名称。
            </summary>
      <returns>
              SAML 属性的名称。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.IdentityModel.Tokens.SamlAttribute.Name" /> 属性设置与 <see cref="P:System.IdentityModel.Tokens.SamlAttribute.IsReadOnly" /> 属性是 <see langword="true" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <see cref="P:System.IdentityModel.Tokens.SamlAttribute.Name" /> 属性设置为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAttribute.Namespace">
      <summary>
              获取或设置在其中定义 SAML 属性的名称的 XML 命名空间。
            </summary>
      <returns>
              在其中定义 SAML 属性的名称的 XML 命名空间。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAttribute.OriginalIssuer">
      <summary>
              获取或设置表示 SAML 属性 OriginalIssuer 的字符串。
            </summary>
      <returns>
              SAML 属性的原始颁发者。
            </returns>
      <exception cref="T:System.ArgumentException">
                  尝试设置一个值为空字符串，会发生。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAttributeStatement.Attributes">
      <summary>
              获取与 SAML 断言的主题关联的属性集合。
            </summary>
      <returns>
              一个类型为 <see cref="T:System.Collections.Generic.IList`1" /> 的 <see cref="T:System.IdentityModel.Tokens.SamlAttribute" />，它包含一组与主题关联的属性。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAttributeStatement.IsReadOnly">
      <summary>
              获取一个值，该值指示此实例的属性是否是只读的。
            </summary>
      <returns>
              如果此实例的属性是只读的，则为 <see langword="true" />；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition.Audiences">
      <summary>
              获取 SAML 断言的目标受众集。
            </summary>
      <returns>
              一个 <see cref="T:System.Collections.Generic.IList`1" /> 类型的 <see cref="T:System.Uri" />，包含一个目标受众集。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition.IsReadOnly">
      <summary>
              获取一个值，该值指示此实例的属性是否是只读的。
            </summary>
      <returns>
              如果此实例的属性是只读的，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthenticationClaimResource.AuthenticationInstant">
      <summary>
              获取对主题进行身份验证的时刻。
            </summary>
      <returns>
              一个 <see cref="T:System.DateTime" />，它指定对主题进行身份验证的时刻。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthenticationClaimResource.AuthenticationMethod">
      <summary>
              获取或设置用于对主题进行身份验证的方法。
            </summary>
      <returns>
              用于对主题进行身份验证的方法。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthenticationClaimResource.AuthorityBindings">
      <summary>
              获取关于主题的附加信息。
            </summary>
      <returns>
              一个类型为 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.IdentityModel.Tokens.SamlAuthorityBinding" />，它包含关于主题的附加信息。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthenticationClaimResource.DnsAddress">
      <summary>
              获取对主题进行身份验证的计算机所在的 DNS 域名。
            </summary>
      <returns>
              对主题进行身份验证的计算机所在的 DNS 域名。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthenticationClaimResource.IPAddress">
      <summary>
              获取或设置对主题进行身份验证的计算机的 IP 地址。
            </summary>
      <returns>
              对主题进行身份验证的计算机的 IP 地址。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthenticationStatement.AuthenticationInstant">
      <summary>
              获取或设置主题进行身份验证的时刻。
            </summary>
      <returns>
              一个 <see cref="T:System.DateTime" />，它指定对主题进行身份验证的时刻。
            
                      异常类型
                    
                      条件
                    
                      <see cref="T:System.InvalidOperationException" />
                    
                      <see cref="P:System.IdentityModel.Tokens.SamlAuthenticationStatement.AuthenticationInstant" /> 属性设置与 <see cref="P:System.IdentityModel.Tokens.SamlAuthenticationStatement.IsReadOnly" /> 属性是 <see langword="true" />。
                    </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthenticationStatement.AuthenticationMethod">
      <summary>
              获取或设置用于对主题进行身份验证的方法。
            </summary>
      <returns>
              用于对主题进行身份验证的方法。
               默认值为 <see langword="urn:oasis:names:tc:SAML:1.0:am:unspecified" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.IdentityModel.Tokens.SamlAuthenticationStatement.AuthenticationMethod" />  属性设置与 <see cref="P:System.IdentityModel.Tokens.SamlAuthenticationStatement.IsReadOnly" /> 属性是 <see langword="true" />。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthenticationStatement.AuthorityBindings">
      <summary>
              获取关于主题的附加信息。
            </summary>
      <returns>
              一个类型为 <see cref="T:System.Collections.Generic.IList`1" /> 的 <see cref="T:System.IdentityModel.Tokens.SamlAuthorityBinding" />，它包含关于主题的附加信息。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthenticationStatement.ClaimType">
      <summary>
              获取安全声明的类型。
            </summary>
      <returns>
              指定安全声明类型的 <see cref="T:System.IdentityModel.Claims.ClaimTypes" />。
               总是为 http://schemas.microsoft.com/mb/2005/09/ClaimType/SamlAuthentication。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthenticationStatement.DnsAddress">
      <summary>
              获取或设置对主题进行身份验证的计算机所在的 DNS 域名。
            </summary>
      <returns>
              对主题进行身份验证的计算机所在的 DNS 域名。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.IdentityModel.Tokens.SamlAuthenticationStatement.DnsAddress" /> 属性设置与 <see cref="P:System.IdentityModel.Tokens.SamlAuthenticationStatement.IsReadOnly" /> 属性是 <see langword="true" />。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthenticationStatement.IPAddress">
      <summary>
              获取或设置对主题进行身份验证的计算机的 IP 地址。
            </summary>
      <returns>
              对主题进行身份验证的计算机的 IP 地址。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthenticationStatement.IsReadOnly">
      <summary>
              获取一个值，该值指示此实例的属性是否是只读的。
            </summary>
      <returns>
              如果此实例的属性是只读的，则为 <see langword="true" />；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorityBinding.AuthorityKind">
      <summary>
              获取或设置具有主题附加信息的 SAML 授权机构所响应的查询类型。
            </summary>
      <returns>
              一个 <see cref="T:System.Xml.XmlQualifiedName" />，表示具有主题附加信息的 SAML 授权机构所响应的查询类型。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.IdentityModel.Tokens.SamlAuthorityBinding.AuthorityKind" />  属性设置与 <see cref="P:System.IdentityModel.Tokens.SamlAuthorityBinding.IsReadOnly" /> 属性是 <see langword="true" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <see cref="P:System.IdentityModel.Tokens.SamlAuthorityBinding.AuthorityKind" />  属性设置为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorityBinding.Binding">
      <summary>
              获取或设置与具有主题附加信息的 SAML 授权机构进行通信时所使用的 SAML 协议绑定。
            </summary>
      <returns>
              一个 URI 引用，标识与具有主题附加信息的 SAML 授权机构进行通信时所使用的 SAML 协议绑定。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.IdentityModel.Tokens.SamlAuthorityBinding.Binding" /> 属性设置与 <see cref="P:System.IdentityModel.Tokens.SamlAuthorityBinding.IsReadOnly" /> 属性是 <see langword="true" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <see cref="P:System.IdentityModel.Tokens.SamlAuthorityBinding.Binding" /> 属性设置为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorityBinding.IsReadOnly">
      <summary>
              获取一个值，该值指示此实例的属性是否是只读的。
            </summary>
      <returns>
              如果此实例的属性是只读的，则为 <see langword="true" />；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorityBinding.Location">
      <summary>
              获取或设置如何找到并与具有主题附加信息的 SAML 授权机构进行通信。
            </summary>
      <returns>
              一个 URI 引用，描述如何找到并与具有主题附加信息的 SAML 授权机构进行通信。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.IdentityModel.Tokens.SamlAuthorityBinding.Location" /> 属性设置与 <see cref="P:System.IdentityModel.Tokens.SamlAuthorityBinding.IsReadOnly" /> 属性是 <see langword="true" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <see cref="P:System.IdentityModel.Tokens.SamlAuthorityBinding.Location" /> 属性设置为 <see langword="null" />。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource.AccessDecision">
      <summary>
              获取由 SAML 授权机构做出的、与该主题访问资源有关的授权决定。
            </summary>
      <returns>
              由 SAML 授权机构做出的、与该主题访问资源有关的授权决定。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource.ActionName">
      <summary>
              获取该主题试图对 <see cref="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource.Resource" /> 属性中指定的资源执行的操作。
            </summary>
      <returns>
              该主题试图对 <see cref="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource.Resource" /> 属性中指定的资源执行的操作。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource.ActionNamespace">
      <summary>
              获取在其中定义了 <see cref="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource.ActionName" /> 属性中指定的操作的 XML 命名空间。
            </summary>
      <returns>
              XML 命名空间，在其中定义了 <see cref="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource.ActionName" /> 属性中指定的操作。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource.Resource">
      <summary>
              获取该主题正试图访问的资源。
            </summary>
      <returns>
              一个 URI，它表示该主题正试图访问的资源。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.AccessDecision">
      <summary>
              获取或设置由 SAML 授权机构做出的、与主题访问指定资源有关的授权决定。
            </summary>
      <returns>
              <see cref="T:System.IdentityModel.Tokens.SamlAccessDecision" /> 值之一，它指定由 SAML 授权机构做出的、与主题访问指定资源有关的授权决定。
            
                      异常类型
                    
                      条件
                    
                      <see cref="T:System.InvalidOperationException" />
                    
                      设置了 <see cref="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.AccessDecision" /> 属性且 <see cref="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.IsReadOnly" /> 属性为 <see langword="true" />。
                    </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.ClaimType">
      <summary>
              获取安全声明的类型。
            </summary>
      <returns>
              安全声明的类型。
               总是为 http://schemas.microsoft.com/mb/2005/09/ClaimType/SamlAuthorizationDecision。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.Evidence">
      <summary>
              获取或设置 SAML 授权机构在做出授权决定时所依赖的证据。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SamlEvidence" />，它包含 SAML 授权机构在做出授权决定时所依赖的一组 SAML 断言。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.IsReadOnly">
      <summary>
              获取一个值，该值指示此实例的属性是否是只读的。
            </summary>
      <returns>
              如果此实例的属性是只读的，则为 <see langword="true" />；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.Resource">
      <summary>
              <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的主题要试图访问的资源。
            </summary>
      <returns>
              一个 URI 引用，它标识要试图访问的资源。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement.SamlActions">
      <summary>
              获取该主题有权对资源执行的操作集。
            </summary>
      <returns>
              一个类型为 <see cref="T:System.Collections.Generic.IList`1" /> 的 <see cref="T:System.IdentityModel.Tokens.SamlAction" />，它指定该主题有权对资源执行的操作集。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlCondition.IsReadOnly">
      <summary>
              在派生类中重写时，获取一个值，指示此实例的属性是否为只读。
            </summary>
      <returns>
              如果此实例的属性是只读的，则为 <see langword="true" />；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlConditions.Conditions">
      <summary>
              获取在评估 SAML 断言有效性时必须考虑的条件集。
            </summary>
      <returns>
              一个类型为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.IdentityModel.Tokens.SamlCondition" />，它指定条件集，即在评估断言有效性时必须考虑 SAML 断言的某个接收方。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlConditions.IsReadOnly">
      <summary>
              获取一个值，该值指示此实例的属性是否是只读的。
            </summary>
      <returns>
              如果此实例的属性是只读的，则为 <see langword="true" />；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlConditions.NotBefore">
      <summary>
              获取 SAML 断言有效的最初时刻。
            </summary>
      <returns>
              一个 <see cref="T:System.DateTime" />，指定 SAML 断言有效的最初时刻。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlConditions.NotOnOrAfter">
      <summary>
              获取 SAML 断言过期的时刻。
            </summary>
      <returns>
              一个 <see cref="T:System.DateTime" />，指定 SAML 断言过期的时刻。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlConstants.EmailName">
      <summary>
              获取用于指定“将 SAML 断言的主题指定为电子邮件地址”的属性的名称。
               此字段为常数。
            </summary>
      <returns>
              用于指定“将 SAML 断言的主题指定为电子邮件地址”的属性的名称。
               此字段为常数。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlConstants.EmailNamespace">
      <summary>
              获取一个 URI，它声明 SAML 断言的主题被指定为电子邮件地址。
               此字段为常数。
            </summary>
      <returns>
              一个 URI，它声明 SAML 断言的主题被指定为电子邮件地址。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlConstants.HolderOfKey">
      <summary>
              获取一个 URI，它指定 SAML 安全令牌的接收方应使用 <see langword="&lt;ds:KeyInfo&gt;" /> 元素来确认 SOAP 消息是由 SAML 断言的主题发送的。
               此字段为常数。
            </summary>
      <returns>
              一个 URI，它指定 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的接收方应使用 <see langword="&lt;ds:KeyInfo&gt;" /> 元素来确认 SOAP 消息是由 SAML 断言的主题发送的。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlConstants.MajorVersionValue">
      <summary>
              获取 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌所遵循的 SAML 规范的主版本。
               此字段为常数。
            </summary>
      <returns>
              <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌所遵循的 SAML 规范的主版本。
               总是为 1。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlConstants.MinorVersionValue">
      <summary>
              获取 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌所使用的 SAML 规范的次版本。
               此字段为常数。
            </summary>
      <returns>
              SAML 规范的次版本。
               总是为 1。
            
              <see cref="P:System.IdentityModel.Tokens.SamlConstants.MajorVersionValue" /> 和 <see cref="P:System.IdentityModel.Tokens.SamlConstants.MinorVersionValue" /> 属性的组合包含 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌所遵循的 SAML 规范的版本。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlConstants.Namespace">
      <summary>
              获取在其中定义 SAML 断言的 XML 命名空间。
               此字段为常数。
            </summary>
      <returns>
              在其中定义 SAML 断言的 XML 命名空间。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlConstants.SenderVouches">
      <summary>
              获取一个 URI，它指定 SAML 安全令牌的接收方无法使用附加信息来确认 SOAP 消息是由 SAML 断言的主题发送的。
               此字段为常数。
            </summary>
      <returns>
              一个 URI，指定 SAML 安全令牌的接收方无法使用附加信息来确认 SOAP 消息是由 SAML 断言的主题发送的。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlConstants.UserName">
      <summary>
              获取用于指定“将 SAML 断言的主题指定为 Windows 域帐户”的属性的名称。
               此字段为常数。
            </summary>
      <returns>
              用于指定“将 SAML 断言的主题指定为 Windows 域帐户”的属性的名称。
               此字段为常数。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlConstants.UserNameNamespace">
      <summary>
              获取一个 URI，它表明 SAML 断言的主题是使用 Windows 域帐户指定的。
               此字段为常数。
            </summary>
      <returns>
              一个 URI，表明 SAML 断言的主题是使用 Windows 域帐户指定的。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlDoNotCacheCondition.IsReadOnly">
      <summary>
              获取一个值，该值指示此实例的属性是否是只读的。
            </summary>
      <returns>
              如果此实例的属性是只读的，则为 <see langword="true" />；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlEvidence.AssertionIdReferences">
      <summary>
              获取 SAML 断言的标识符的集合，这些断言指定 SAML 授权机构呈现授权决定时所依赖的证据。
            </summary>
      <returns>
              一个类型为 <see cref="T:System.Collections.Generic.IList`1" /> 的 <see cref="T:System.String" />，它包含 SAML 断言的标识符，这些断言指定 SAML 授权机构呈现授权决定时所依赖的证据。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlEvidence.Assertions">
      <summary>
              获取 SAML 断言的集合，这些断言包含 SAML 授权机构呈现授权决定时所依赖的证据。
            </summary>
      <returns>
              一个类型为 <see cref="T:System.Collections.Generic.IList`1" /> 的 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" />，它包含 SAML 授权机构呈现授权决定时所依赖的证据。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlEvidence.IsReadOnly">
      <summary>
              获取一个值，该值指示此实例的属性是否是只读的。
            </summary>
      <returns>
              如果此实例的属性是只读的，则为 <see langword="true" />；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlNameIdentifierClaimResource.Format">
      <summary>
              获取一个 URI 引用，它表示 SAML 安全令牌的主题名称所采用的格式。
            </summary>
      <returns>
              一个 URI 引用，它表示 SAML 安全令牌的主题名称所采用的格式。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlNameIdentifierClaimResource.Name">
      <summary>
              获取 SAML 安全令牌的主题名称。
            </summary>
      <returns>
              <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的主题名称。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlNameIdentifierClaimResource.NameQualifier">
      <summary>
              获取 SAML 安全令牌的主题名称所在的域。
            </summary>
      <returns>
              SAML 安全令牌的主题名称所在的域。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityKeyIdentifierClause.Assertion">
      <summary>
              获取当前与此实例关联的 SamlAssertion。
            </summary>
      <returns>
              当前与此实例关联的 SamlAssertion。
               可以为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityToken.Assertion">
      <summary>
              获取此安全令牌的 SAML 断言。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SamlAssertion" />，表示此安全令牌的 SAML 断言。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityToken.Id">
      <summary>
              获取安全令牌的唯一标识符。
            </summary>
      <returns>
              安全令牌的唯一标识符。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityToken.SecurityKeys">
      <summary>
              获取与安全令牌相关联的加密密钥。
            </summary>
      <returns>
              一个类型为 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.IdentityModel.Tokens.SecurityKey" />，包含与安全令牌相关联的密钥集。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityToken.ValidFrom">
      <summary>
              获取此安全令牌有效的最初时刻。
            </summary>
      <returns>
              一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最初时刻。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityToken.ValidTo">
      <summary>
              获取此安全令牌有效的最后时刻。
            </summary>
      <returns>
              一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最后时刻。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CanValidateToken">
      <summary>
              获取一个值，该值指示此处理程序可以验证类型的令牌 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" />。
            </summary>
      <returns>
              <see langword="true" />, 指示该处理程序可以验证类型的令牌 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CanWriteToken">
      <summary>
              获取一个值，该值指示此处理程序是否可以序列化类型的令牌 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" />。
            </summary>
      <returns>
              <see langword="true" />;指示该处理程序可以序列化类型的令牌 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityTokenHandler.CertificateValidator">
      <summary>
              获取或设置当前实例用于验证 X.509 证书的 X.509 证书验证程序。
            </summary>
      <returns>
              <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" /> ，它表示该验证程序。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityTokenHandler.KeyInfoSerializer">
      <summary>
              获取或设置的安全令牌序列化程序用于序列化和反序列化密钥标识符。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> ，它表示序列化程序。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  尝试将值设置为 <see langword="null" /> 时发生。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityTokenHandler.SamlSecurityTokenRequirement">
      <summary>
              获取或设置此实例的令牌要求的安全。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SamlSecurityTokenRequirement" /> 指定的要求。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  尝试将值设置为 <see langword="null" /> 时发生。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityTokenHandler.TokenType">
      <summary>
              获取支持此处理程序的令牌类型。
            </summary>
      <returns>
              <see cref="T:System.Type" /> 的 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 类。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityTokenRequirement.CertificateValidator">
      <summary>
              获取或设置 <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" /> 此令牌要求与该键相关联。
            </summary>
      <returns>
              X.509 证书验证程序，此令牌要求与该键关联。
               默认值为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityTokenRequirement.MapToWindows">
      <summary>
              获取或设置一个值，该值指示令牌处理程序将尝试通过使用唯一的主体名称 (UPN) 声明的 SAML 标识映射到 Windows 标识。
            </summary>
      <returns>
              <see langword="true" /> 若要尝试 SAML 标识映射到 Windows 标识;否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityTokenRequirement.NameClaimType">
      <summary>
              获取或设置将用于生成 FederatedIdentity.Name 属性的声明类型。
            </summary>
      <returns>
              声明类型。
               默认为 <see cref="F:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType" /> 字段的值。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSecurityTokenRequirement.RoleClaimType">
      <summary>
              获取或设置用于生成 FederatedIdentity.Roles 属性的声明类型。
            </summary>
      <returns>
              角色声明类型。
               默认为 <see cref="F:System.Security.Claims.ClaimTypes.Role" /> 字段的值。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlStatement.IsReadOnly">
      <summary>
              在派生类中重写时，获取一个值，该值指示此实例的属性是否为只读的。
            </summary>
      <returns>
              如果此实例的属性是只读的，则为 <see langword="true" />；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSubject.ConfirmationMethods">
      <summary>
              获取一组 URI 引用，这些引用标识要用于验证主题身份的协议。
            </summary>
      <returns>
              一个类型为 <see cref="T:System.Collections.Generic.IList`1" /> 的 <see cref="T:System.String" />，包含一组标识用于验证主题身份的协议的 URI 引用。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSubject.Crypto">
      <summary>
              获取或设置加密密钥，该密钥用于验证由此 SAML 主题语句标识的数字签名。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityKey" />，其中包含用于验证 SAML 安全令牌的数字签名的加密密钥。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSubject.IsReadOnly">
      <summary>
              获取一个值，该值指示此实例的属性是否是只读的。
            </summary>
      <returns>
              如果此实例的属性是只读的，则为 <see langword="true" />；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSubject.KeyIdentifier">
      <summary>
              获取或设置一个密钥标识符，该标识符提供对 SAML 安全令牌的主题所持有的加密密钥的访问。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />，提供对 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的主题所持有的加密密钥的访问。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSubject.Name">
      <summary>
              获取或设置 SAML 安全令牌的主题名称。
            </summary>
      <returns>
              <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的主题名称。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSubject.NameClaimType">
      <summary>
              获取用于表示 SAML 安全令牌的主题名称的声明类型。
            </summary>
      <returns>
              用于表示 SAML 安全令牌的主题名称的声明类型 (<see cref="P:System.IdentityModel.Claims.ClaimTypes.NameIdentifier" />)。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSubject.NameFormat">
      <summary>
              获取或设置一个 URI 引用，它表示 SAML 安全令牌的主题名称所采用的格式。
            </summary>
      <returns>
              一个 URI 引用，它表示 SAML 安全令牌的主题名称所采用的格式。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSubject.NameQualifier">
      <summary>
              获取或设置 SAML 安全令牌的主题名称所在的域。
            </summary>
      <returns>
              SAML 安全令牌的主题名称所在的域。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSubject.SubjectConfirmationData">
      <summary>
              获取或设置可供身份验证协议使用的附加身份验证信息。
            </summary>
      <returns>
              可供身份验证协议使用的附加身份验证信息。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSubjectStatement.IsReadOnly">
      <summary>
              获取一个值，该值指示此实例的属性是否是只读的。
            </summary>
      <returns>
              如果此实例的属性是只读的，则为 <see langword="true" />；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SamlSubjectStatement.SamlSubject">
      <summary>
              获取或设置 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的主题。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SamlSubject" />，它标识 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的主题。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.IdentityModel.Tokens.SamlSubjectStatement.SamlSubject" /> 属性设置与 <see cref="P:System.IdentityModel.Tokens.SamlSubjectStatement.IsReadOnly" /> 属性是 <see langword="true" />。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityKey.KeySize">
      <summary>
              在派生类中重写时，获取密钥的大小（以位为单位）。
            </summary>
      <returns>
              密钥的大小（以位为单位）。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityKeyElement.KeySize">
      <summary>
              获取密钥的大小，以位为单位。
            </summary>
      <returns>
              密钥的大小，以位为单位。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityKeyIdentifier.CanCreateKey">
      <summary>
              获取一个值，指示是否可以为至少一个密钥标识符子句创建密钥。
            </summary>
      <returns>
              如果可以为至少一个密钥标识符子句创建密钥，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityKeyIdentifier.Count">
      <summary>
              获取密钥标识符子句数。
            </summary>
      <returns>
              密钥标识符子句数。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityKeyIdentifier.IsReadOnly">
      <summary>
              获取一个值，该值指示此实例的属性是否是只读的。
            </summary>
      <returns>
              如果此实例的属性是只读的，则为 <see langword="true" />；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityKeyIdentifier.Item(System.Int32)">
      <summary>
              获取指定索引处的密钥标识符子句。
            </summary>
      <param name="index">
                密钥标识符子句集合中的密钥标识符子句的从零开始的索引。
              </param>
      <returns>
              位于指定索引处的 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="index" /> 小于 0。
                
                  - 或 -
                
                  <paramref name="index" /> 等于或大于 <see cref="P:System.IdentityModel.Tokens.SecurityKeyIdentifier.Count" />。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.CanCreateKey">
      <summary>
              获取一个值，该值指示是否可以创建密钥。
            </summary>
      <returns>
              如果可以创建密钥，则为 <see langword="true" />；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.ClauseType">
      <summary>
              获取密钥标识符子句类型。
            </summary>
      <returns>
              密钥标识符子句类型。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.DerivationLength">
      <summary>
              获取派生密钥的大小。
            </summary>
      <returns>
              派生密钥的大小。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.Id">
      <summary>
              获取或设置密钥标识符子句 id。
            </summary>
      <returns>
              密钥标识符子句 id。
               默认值为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityToken.Id">
      <summary>
              获取安全令牌的唯一标识符。
            </summary>
      <returns>
              安全令牌的唯一标识符。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityToken.SecurityKeys">
      <summary>
              获取与安全令牌相关联的加密密钥。
            </summary>
      <returns>
              一个类型为 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.IdentityModel.Tokens.SecurityKey" />，包含与安全令牌相关联的密钥集。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityToken.ValidFrom">
      <summary>
              获取此安全令牌有效的最初时刻。
            </summary>
      <returns>
              一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最初时刻。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityToken.ValidTo">
      <summary>
              获取此安全令牌有效的最后时刻。
            </summary>
      <returns>
              一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最后时刻。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.AppliesToAddress">
      <summary>
              获取或设置中的 AppliesTo 属性地址 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" />。
            </summary>
      <returns>
              绝对 URI，它表示的地址。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  尝试将属性设置为不是绝对 URI 的值时发生。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.AttachedReference">
      <summary>
              获取或设置密钥标识符子句，该令牌附加到消息时
            </summary>
      <returns>
              指定的密钥标识符子句。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.AuthenticationInfo">
      <summary>
              获取或设置令牌的身份验证信息。
            </summary>
      <returns>
              令牌身份验证信息。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.EncryptingCredentials">
      <summary>
              获取或设置用于对令牌进行加密的凭据。
            </summary>
      <returns>
              使用对令牌进行加密的凭据。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.Lifetime">
      <summary>
              获取或设置已颁发令牌的生存期信息。
            </summary>
      <returns>
              已颁发令牌的生存期信息。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.Proof">
      <summary>
              获取或设置已颁发的令牌，可以用于修改某些字段内 RSTR，如请求的证明令牌的证明描述符。
            </summary>
      <returns>
              证明的描述符。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.Properties">
      <summary>
              获取已颁发令牌的属性包。
            </summary>
      <returns>
              一个字典表示的属性包。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.ReplyToAddress">
      <summary>
              获取或设置 ReplyToAddress 属性中，地址 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" />。
            </summary>
      <returns>
              一个 URI，表示的地址。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.SigningCredentials">
      <summary>
              获取或设置用于对令牌进行签名的凭据。
            </summary>
      <returns>
              使用该令牌进行签名的凭据。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.Subject">
      <summary>
              获取或设置要颁发的令牌中包含的输出声明。
            </summary>
      <returns>
              包含输出声明声明的标识。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.Token">
      <summary>
              获取或设置颁发的安全令牌。
            </summary>
      <returns>
              颁发的安全令牌。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.TokenIssuerName">
      <summary>
              获取或设置可能还用在已颁发令牌的颁发者名称。
            </summary>
      <returns>
              颁发者名称中。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.TokenType">
      <summary>
              获取或设置已颁发令牌的令牌类型
            </summary>
      <returns>
              令牌类型。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.UnattachedReference">
      <summary>
              密钥标识符子句时颁发的令牌不附加到消息。
            </summary>
      <returns>
              指定的密钥标识符子句。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenElement.SecurityTokenXml">
      <summary>
              获取包装令牌的 XML 表示。
            </summary>
      <returns>
              令牌的 XML 表示形式。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken">
      <summary>
              获取一个值，该值指示该处理程序是否支持验证安全令牌。
            </summary>
      <returns>
              <see langword="true" /> 如果此类是能够验证安全令牌。否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken">
      <summary>
              获取一个值，该值指示该处理程序是否可以序列化安全令牌。
            </summary>
      <returns>
              <see langword="true" /> 如果此类是能够序列化令牌。否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration">
      <summary>
              获取或设置 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" /> 对象，它提供当前实例的配置。
            </summary>
      <returns>
              当前实例的的配置对象。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection">
      <summary>
              获取包含当前实例的标记处理程序集合。
            </summary>
      <returns>
              包含当前实例的标记处理程序集合。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType">
      <summary>
              当在派生类中重写，获取此实例处理的安全令牌的类型。
            </summary>
      <returns>
              此实例处理的安全令牌的类型。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.Configuration">
      <summary>
              获取和设置此安全令牌处理程序集合的基本配置。
            </summary>
      <returns>
              找不到令牌处理程序配置。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.Item(System.IdentityModel.Tokens.SecurityToken)">
      <summary>
              从此集合可以处理指定的安全令牌中获取的令牌处理程序。
            </summary>
      <param name="token">
                应为其返回该处理程序的标记。
              </param>
      <returns>
              令牌处理程序可以处理指定的标记的说明。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.Item(System.String)">
      <summary>
              可以处理指定的类型标识符此集合中获取的令牌处理程序。
            </summary>
      <param name="tokenTypeIdentifier">
                一个 URI，标识令牌类型。
              </param>
      <returns>
              令牌处理程序可以处理对应于指定的类型标识符的标记的说明。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.Item(System.Type)">
      <summary>
              该处理程序从集合中获取此可处理指定的令牌类型。
            </summary>
      <param name="tokenType">
                要处理的标记的类型。
              </param>
      <returns>
              令牌处理程序可以处理指定类型的标记的说明。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.TokenTypeIdentifiers">
      <summary>
              获取此集合中处理程序处理的令牌的类型标识符的列表。
            </summary>
      <returns>
              类型标识符 Uri 的列表。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerCollection.TokenTypes">
      <summary>
              获取此集合中的处理程序处理的令牌类型的列表。
            </summary>
      <returns>
              类型的列表。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.Count">
      <summary>
              获取多的安全令牌处理程序管理的此实例的集合。
            </summary>
      <returns>
              管理的此实例的标记处理程序集的数目。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.Item(System.String)">
      <summary>
              返回使用指定的安全令牌处理程序集合。
            </summary>
      <param name="usage">
                找不到令牌处理程序用法的名称。
              </param>
      <returns>
              指定使用情况与关联的标记处理程序集合。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.SecurityTokenHandlerCollections">
      <summary>
              获取的安全令牌处理程序管理的此实例的集合。
            </summary>
      <returns>
              管理此实例的标记处理程序集合。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.ServiceName">
      <summary>
              获取服务名称。
            </summary>
      <returns>
              与此实例关联的服务的名称。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.AudienceRestriction">
      <summary>
              获取或设置受众限制。
            </summary>
      <returns>
              访问群体限制中。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.Caches">
      <summary>
              获取或设置用于此配置的缓存。
            </summary>
      <returns>
              缓存。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.CertificateValidationMode">
      <summary>
              获取或设置处理程序用于验证颁发者证书的 X.509 证书验证模式。
            </summary>
      <returns>
              证书验证模式。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.CertificateValidator">
      <summary>
              获取或设置处理程序用来验证颁发者证书的 X.509 证书验证程序
            </summary>
      <returns>
              证书验证程序。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.DetectReplayedTokens">
      <summary>
              获取或设置一个值，该值指示是否应由在此配置中的处理程序检测重播的令牌。
            </summary>
      <returns>
              <see langword="true" /> 如果应检测重播的令牌;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerNameRegistry">
      <summary>
              获取或设置颁发者名称注册表中的有此配置。
            </summary>
      <returns>
              颁发者名称注册表。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerTokenResolver">
      <summary>
              获取或设置颁发者令牌解析程序为此配置。
            </summary>
      <returns>
              颁发者令牌解析器。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.MaxClockSkew">
      <summary>
              获取或设置处理程序使用此配置最大时钟偏差。
            </summary>
      <returns>
              最大时钟偏差。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.RevocationMode">
      <summary>
              获取或设置此配置的 X.509 吊销模式。
            </summary>
      <returns>
              X.509 吊销模式。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.SaveBootstrapContext">
      <summary>
              获取或设置一个值，该值指示是否将启动上下文 （令牌） 保存在 <see cref="T:System.Security.Claims.ClaimsIdentity" /> 和令牌验证后的会话。
            </summary>
      <returns>
              <see langword="true" /> 若要保存对启动令牌;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.ServiceTokenResolver">
      <summary>
              获取或设置安全令牌解析程序用来解析服务令牌。
            </summary>
      <returns>
              令牌解析器。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.TokenReplayCacheExpirationPeriod">
      <summary>
              获取或设置将置于令牌重放缓存中的项的过期期限。
            </summary>
      <returns>
              过期时间。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.TrustedStoreLocation">
      <summary>
              获取或设置处理程序用来验证颁发者证书的 X.509 受信任存储区位置。
            </summary>
      <returns>
              受信任存储区位置。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenTypes.Kerberos">
      <summary>
              获取表示基于 Kerberos 票证的安全令牌的字符串。
            </summary>
      <returns>
              一个字符串，它表示基于 Kerberos 票证的安全令牌。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenTypes.Rsa">
      <summary>
              获取表示基于 RSA 密钥的安全令牌的字符串。
            </summary>
      <returns>
              一个字符串，它表示基于 RSA 密钥的安全令牌。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenTypes.Saml">
      <summary>
              获取表示基于 SAML 断言的安全令牌的字符串。
            </summary>
      <returns>
              一个字符串，它表示基于 SAML 断言的安全令牌。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenTypes.UserName">
      <summary>
              获取表示基于用户名和密码的安全令牌的字符串。
            </summary>
      <returns>
              一个字符串，它表示基于用户名和密码的安全令牌。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SecurityTokenTypes.X509Certificate">
      <summary>
              获取表示基于 X.509 证书的安全令牌的字符串。
            </summary>
      <returns>
              一个字符串，它表示基于 X.509 证书的安全令牌。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.ClaimsPrincipal">
      <summary>
              获取声明的主体与会话相关联。
            </summary>
      <returns>
              声明主体中。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.Context">
      <summary>
              获取一个用户指定上下文值。
            </summary>
      <returns>
              用户指定的上下文值。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.ContextId">
      <summary>
              获取会话上下文标识符
            </summary>
      <returns>
              会话上下文标识符。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId">
      <summary>
              获取此令牌的范围限定到的终结点的 ID。
            </summary>
      <returns>
              终结点的 ID。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.Id">
      <summary>
              获取此令牌的唯一标识符。
            </summary>
      <returns>
              令牌 ID。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.IsPersistent">
      <summary>
              获取或设置一个值，该值指示此标记所表示的 cookie 是否持久。
            </summary>
      <returns>
              <see langword="true" /> 如果该 cookie 出现不一致;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode">
      <summary>
              获取或设置一个值，该值指示是否在引用模式下操作的会话安全令牌。
            </summary>
      <returns>
              <see langword="true" /> 如果会话模式，则在运行，该令牌否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.KeyEffectiveTime">
      <summary>
              获取此令牌中的键开始生效的即时的时间。
            </summary>
      <returns>
              从其即时的时间的关键是有效的。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.KeyExpirationTime">
      <summary>
              获取即时之后此令牌中的密钥将不再有效的时间。
            </summary>
      <returns>
              该密钥的到期时间即时。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.KeyGeneration">
      <summary>
              获取密钥生成此令牌中的标识符
            </summary>
      <returns>
              此令牌中的键生成唯一标识符。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.SecureConversationVersion">
      <summary>
              获取一个 URI，标识用于序列化此会话安全的 Ws-secure Conversation 的版本标记。
            </summary>
      <returns>
              标识用于序列化此令牌的 Ws-secure Conversation 的版本的 URI。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.SecurityKeys">
      <summary>
              获取与此会话相关联的密钥。
               这通常是单个密钥。
            </summary>
      <returns>
              与会话相关联的密钥。
               通常是单个密钥。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.ValidFrom">
      <summary>
              该令牌的有效的情况下获取即时的时间。
            </summary>
      <returns>
              该令牌的有效时间。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityToken.ValidTo">
      <summary>
              获取即时之后该令牌将不再有效的时间。
            </summary>
      <returns>
              此后该令牌将不再有效的时间。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.ContextId">
      <summary>
              获取缓存密钥的上下文 ID。
            </summary>
      <returns>
              缓存键上下文 ID。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.EndpointId">
      <summary>
              获取此缓存条目的范围限定到的终结点 ID。
            </summary>
      <returns>
              此缓存条目的范围限定到的终结点 ID。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.IgnoreKeyGeneration">
      <summary>
              获取或设置一个值，该值指示在执行索引比较时是否可以忽略密钥生成。
            </summary>
      <returns>
              <see langword="true" /> 若要忽略密钥生成;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey.KeyGeneration">
      <summary>
              获取密钥生成的缓存键
            </summary>
      <returns>
              缓存项密钥生成
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanValidateToken">
      <summary>
              获取一个值，该值指示此处理程序是否支持验证的类型的令牌 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />。
            </summary>
      <returns>
              <see langword="true" /> 如果该处理程序支持的类型的令牌验证 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />; 否则为 <see langword="false" />。
               总是为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanWriteToken">
      <summary>
              获取一个值，该值指示此处理程序是否可以编写类型的令牌 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />。
            </summary>
      <returns>
              <see langword="true" /> 如果该处理程序可以编写类型的令牌 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />; 否则为 <see langword="false" />。
               总是为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName">
      <summary>
              获取 cookie 元素的名称。
            </summary>
      <returns>
              Cookie 元素的名称。
               默认元素名称为"Cookie"。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace">
      <summary>
              获取 cookie 元素的命名空间。
            </summary>
      <returns>
              Cookie 元素的命名空间。
               默认命名空间为"http://schemas.microsoft.com/ws/2006/05/security"。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime">
      <summary>
              获取默认令牌生存期。
            </summary>
      <returns>
              默认令牌生存期。
               总是为 <see cref="F:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime">
      <summary>
              获取或设置令牌生存期。
            </summary>
      <returns>
              令牌生存期。
               默认值为 <see cref="F:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  尝试设置时间跨度，小于或等于零时发生。
                </exception>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenType">
      <summary>
              获取该处理程序处理的令牌的类型。
            </summary>
      <returns>
              <see cref="T:System.Type" /> 的 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms">
      <summary>
              获取将应用于该 cookie 的转换。
            </summary>
      <returns>
              将应用于该 cookie 的转换的列表。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SigningCredentials.DigestAlgorithm">
      <summary>
              获取加密算法，该加密算法用于计算要进行数字签名的 SOAP 消息部分的摘要。
            </summary>
      <returns>
              一个表示加密算法的 URI，该加密算法用于计算要进行数字签名的 SOAP 消息部分的摘要。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SigningCredentials.SignatureAlgorithm">
      <summary>
              获取用于生成数字签名的加密算法。
            </summary>
      <returns>
              一个 URI，表示用于生成数字签名的加密算法。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SigningCredentials.SigningKey">
      <summary>
              获取用于生成数字签名的加密密钥。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityKey" />，它包含用于生成数字签名的加密密钥。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SigningCredentials.SigningKeyIdentifier">
      <summary>
              获取表示用于创建数字签名的密钥的标识符。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />，指定表示用于创建数字签名的密钥的标识符。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SymmetricProofDescriptor.KeyIdentifier">
      <summary>
              获取可在已颁发的令牌定义键的键标识符。
               通常是二进制密钥或加密的密钥;
            </summary>
      <returns>
              密钥标识符。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SymmetricProofDescriptor.RequestorEncryptingCredentials">
      <summary>
              获取请求者的加密凭据，可用于对请求的证明令牌或在响应中的平均信息量进行加密。
            </summary>
      <returns>
              请求者的加密凭据。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.SymmetricProofDescriptor.TargetEncryptingCredentials">
      <summary>
              获取依赖方加密凭据，可能用来加密请求的安全令牌在响应中。
            </summary>
      <returns>
              信赖方加密凭据。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.UserNameSecurityToken.Id">
      <summary>
              获取安全令牌的唯一标识符。
            </summary>
      <returns>
              安全令牌的唯一标识符。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.UserNameSecurityToken.Password">
      <summary>
              获取与安全令牌关联的用户名的密码。
            </summary>
      <returns>
              与安全令牌关联的用户名的密码。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.UserNameSecurityToken.SecurityKeys">
      <summary>
              获取与安全令牌相关联的加密密钥。
            </summary>
      <returns>
              一个类型为 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.IdentityModel.Tokens.SecurityKey" />，包含与安全令牌相关联的密钥集。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.UserNameSecurityToken.UserName">
      <summary>
              获取与安全令牌关联的用户名。
            </summary>
      <returns>
              与安全令牌关联的用户名。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.UserNameSecurityToken.ValidFrom">
      <summary>
              获取此安全令牌有效的最初时刻。
            </summary>
      <returns>
              一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最初时刻。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.UserNameSecurityToken.ValidTo">
      <summary>
              获取此安全令牌有效的最后时刻。
            </summary>
      <returns>
              一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最后时刻。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.UserNameSecurityTokenHandler.CanWriteToken">
      <summary>
              获取一个值，该值指示此处理程序是否可以编写类型的令牌 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" />。
            </summary>
      <returns>
              <see langword="true" /> 如果该处理程序可以编写类型的令牌 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" />; 否则为 <see langword="false" />。
               总是为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.UserNameSecurityTokenHandler.RetainPassword">
      <summary>
              获取或设置一个值，指定是否将附加到对启动令牌中保留该密码 <see cref="T:System.Security.Claims.ClaimsIdentity" /> 返回 <see cref="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)" /> 方法。
            </summary>
      <returns>
              <see langword="true" /> 如果应将密码保留在对启动令牌;否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.UserNameSecurityTokenHandler.TokenType">
      <summary>
              获取 <see cref="T:System.Type" /> 该处理程序处理的令牌。
            </summary>
      <returns>
              <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 的类型。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.WindowsSecurityToken.AuthenticationType">
      <summary>
              获取令牌的身份验证类型。
            </summary>
      <returns>
              返回 <see cref="T:System.String" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.WindowsSecurityToken.Id">
      <summary>
              获取安全令牌的唯一标识符。
            </summary>
      <returns>
              安全令牌的唯一标识符。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.WindowsSecurityToken.SecurityKeys">
      <summary>
              获取与安全令牌相关联的加密密钥。
            </summary>
      <returns>
              一个类型为 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.IdentityModel.Tokens.SecurityKey" />，包含与安全令牌相关联的密钥集。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.WindowsSecurityToken.ValidFrom">
      <summary>
              获取此安全令牌有效的最初时刻。
            </summary>
      <returns>
              一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最初时刻。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.WindowsSecurityToken.ValidTo">
      <summary>
              获取此安全令牌有效的最后时刻。
            </summary>
      <returns>
              一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最后时刻。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.WindowsSecurityToken.WindowsIdentity">
      <summary>
              获取与此安全令牌关联的 Windows 用户。
            </summary>
      <returns>
              一个表示 Windows 用户的 <see cref="T:System.Security.Principal.WindowsIdentity" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.WindowsUserNameSecurityTokenHandler.CanValidateToken">
      <summary>
              获取一个值，该值指示此处理程序是否支持验证的类型的令牌 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" />。
            </summary>
      <returns>
              <see langword="true" /> 如果该处理程序支持的类型的令牌验证 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" />; 否则为 <see langword="false" />。
               总是为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509AsymmetricSecurityKey.KeySize">
      <summary>
              获取与 X.509 证书关联的公钥的大小（以位为单位）。
            </summary>
      <returns>
              与 X.509 证书关联的公钥的大小（以位为单位）。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509CertificateStoreTokenResolver.StoreLocation">
      <summary>
              获取此令牌解析程序使用的 X.509 证书存储区的位置。
            </summary>
      <returns>
              存储指定的 X.509 证书的位置的枚举值之一。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509CertificateStoreTokenResolver.StoreName">
      <summary>
              获取此令牌解析程序使用的 X.509 证书存储区的名称。
            </summary>
      <returns>
              使用此令牌解析程序的 X.509 证书存储区名称。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509EncryptingCredentials.Certificate">
      <summary>
              获取 X.509 证书。
            </summary>
      <returns>
              X.509 证书。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.IssuerName">
      <summary>
              获取颁发 X.509 证书的证书颁发机构的可分辨名称。
            </summary>
      <returns>
              颁发 X.509 证书的证书颁发机构的可分辨名称。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.IssuerSerialNumber">
      <summary>
              获取 X.509 证书的序列号。
            </summary>
      <returns>
              X.509 证书的序列号。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause.CanCreateKey">
      <summary>
              获取一个值，该值指示是否可以从 X.509 证书的原始数据或从构造函数中指定的字节数组来创建密钥。
            </summary>
      <returns>
              在所有情况下均为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509SecurityToken.Certificate">
      <summary>
              获取与安全令牌关联的 X.509 证书。
            </summary>
      <returns>
              一个包含 X.509 证书的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509SecurityToken.Id">
      <summary>
              获取安全令牌的唯一标识符。
            </summary>
      <returns>
              安全令牌的唯一标识符。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509SecurityToken.SecurityKeys">
      <summary>
              获取与安全令牌相关联的加密密钥。
            </summary>
      <returns>
              一个类型为 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.IdentityModel.Tokens.SecurityKey" />，包含与安全令牌相关联的密钥集。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509SecurityToken.ValidFrom">
      <summary>
              获取此安全令牌有效的最初时刻。
            </summary>
      <returns>
              一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最初时刻。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509SecurityToken.ValidTo">
      <summary>
              获取此安全令牌有效的最后时刻。
            </summary>
      <returns>
              一个 <see cref="T:System.DateTime" />，表示此安全令牌有效的最后时刻。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509SecurityTokenHandler.CanValidateToken">
      <summary>
              获取一个值，该值指示此处理程序是否支持验证的类型的令牌 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" />。
            </summary>
      <returns>
              <see langword="true" /> 如果该处理程序支持的类型的令牌验证 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" />; 否则为 <see langword="false" />。
               总是为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509SecurityTokenHandler.CanWriteToken">
      <summary>
              获取一个值，该值指示此处理程序是否可以编写类型的令牌 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" />。
            </summary>
      <returns>
              <see langword="true" /> 如果该处理程序可以编写类型的令牌 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" />; 否则为 <see langword="false" />。
               总是为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509SecurityTokenHandler.CertificateValidator">
      <summary>
              获取或设置 <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" /> ，它由当前实例。
            </summary>
      <returns>
              当前实例使用 X.509 证书验证程序。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509SecurityTokenHandler.MapToWindows">
      <summary>
              获取或设置一个值，该值指示验证令牌是否应映射到 Windows 帐户。
            </summary>
      <returns>
              <see langword="true" /> 如果验证令牌应映射到 Windows 帐户;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509SecurityTokenHandler.TokenType">
      <summary>
              获取 <see cref="T:System.Type" /> 该处理程序处理的令牌。
            </summary>
      <returns>
              默认情况下的一种 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> 类。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509SecurityTokenHandler.WriteXmlDSigDefinedClauseTypes">
      <summary>
              获取或设置用于指定是否为首选 XmlDsig 定义子句类型的值。
            </summary>
      <returns>
              <see langword="true" /> 如果首选; XmlDsig 定义的子句类型否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509SecurityTokenHandler.X509NTAuthChainTrustValidator">
      <summary>
              获取或设置 <see cref="T:System.IdentityModel.Tokens.X509NTAuthChainTrustValidator" /> 的当前实例在过程中使用证书验证传入的 X.509 证书映射到 Windows 帐户时。
            </summary>
      <returns>
              X.509 证书验证程序将验证指定的 X.509 证书，并确认是否要将证书映射到 Windows 帐户，以及是否受信任的证书链。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509SigningCredentials.Certificate">
      <summary>
              获取 X.509 证书。
            </summary>
      <returns>
              X.509 证书。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509WindowsSecurityToken.AuthenticationType">
      <summary>
              获取令牌的身份验证类型。
            </summary>
      <returns>
              返回 <see cref="T:System.String" />。
            </returns>
    </member>
    <member name="P:System.IdentityModel.Tokens.X509WindowsSecurityToken.WindowsIdentity">
      <summary>
              获取 Windows 域或计算机帐户的标识。
            </summary>
      <returns>
              一个 <see cref="T:System.Security.Principal.WindowsIdentity" />，表示 Windows 域或计算机帐户的标识。
            </returns>
    </member>
    <member name="P:System.IdentityModel.TypedAsyncResult`1.Result">
      <summary>
              获取已完成的异步操作的类型化的结果。
            </summary>
      <returns>
              已完成的异步操作的类型化的结果。
            </returns>
    </member>
    <member name="P:System.IdentityModel.UnsupportedTokenTypeBadRequestException.TokenType">
      <summary>
              获取和设置不受支持的令牌类型 URI。
            </summary>
      <returns>
              一个包含不受支持的令牌类型 URI 的字符串。
            </returns>
    </member>
    <member name="P:System.Security.Claims.AuthenticationInformation.Address">
      <summary>
              获取或设置创建令牌的颁发机构的地址。
            </summary>
      <returns>
              地址。
            </returns>
    </member>
    <member name="P:System.Security.Claims.AuthenticationInformation.AuthorizationContexts">
      <summary>
              获取 <see cref="T:System.Security.Claims.AuthorizationContext" /> 颁发令牌时使用的身份验证机构。
            </summary>
      <returns>
              一套 <see cref="T:System.IdentityModel.Tokens.AuthenticationContext" /> 代表授权上下文。
            </returns>
    </member>
    <member name="P:System.Security.Claims.AuthenticationInformation.DnsName">
      <summary>
              获取或设置创建令牌的颁发机构的 DNS 名称。
            </summary>
      <returns>
              颁发机构的 DNS 名称。
            </returns>
    </member>
    <member name="P:System.Security.Claims.AuthenticationInformation.NotOnOrAfter">
      <summary>
              获取或设置必须考虑会话索引中引用的会话已结束的时间。
            </summary>
      <returns>
              结束会话，必须考虑的时间。
            </returns>
    </member>
    <member name="P:System.Security.Claims.AuthenticationInformation.Session">
      <summary>
              获取或设置描述该颁发机构和客户端之间的会话的会话索引。
            </summary>
      <returns>
              会话的索引。
            </returns>
    </member>
    <member name="P:System.Security.Claims.AuthorizationContext.Action">
      <summary>
              获取为其主体是要为其授权的操作。
            </summary>
      <returns>
              表示与请求相关的操作的声明集合。
            </returns>
    </member>
    <member name="P:System.Security.Claims.AuthorizationContext.Principal">
      <summary>
              获取正在请求进行授权的主体 （主题）。
            </summary>
      <returns>
              正在为其请求授权主体。
            </returns>
    </member>
    <member name="P:System.Security.Claims.AuthorizationContext.Resource">
      <summary>
              获取的资源的原则是要为其授权。
            </summary>
      <returns>
              表示资源的声明集合。
            </returns>
    </member>
    <member name="P:System.ServiceModel.Security.BinarySecretKeyIdentifierClause.CanCreateKey">
      <summary>
              获取一个值，该值指示该类实例是否可以创建安全密钥。
            </summary>
      <returns>
              总是为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.ServiceModel.Security.KeyNameIdentifierClause.KeyName">
      <summary>
              获取密钥名称。
            </summary>
      <returns>
              密钥名称。
            </returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityContextKeyIdentifierClause.ContextId">
      <summary>
              获取安全上下文 ID。
            </summary>
      <returns>
              安全性上下文的唯一 ID。
            </returns>
    </member>
    <member name="P:System.ServiceModel.Security.SecurityContextKeyIdentifierClause.Generation">
      <summary>
              获取生成。
            </summary>
      <returns>
              生成。
            </returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.Id">
      <summary>
              获取令牌 ID。
            </summary>
      <returns>
              令牌 ID。
            </returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.KeySize">
      <summary>
              获取令牌密钥大小。
            </summary>
      <returns>
              令牌密钥大小。
            </returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.SecurityKeys">
      <summary>
              获取安全密钥的集合。
            </summary>
      <returns>
              <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> 的集合。
            </returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.ValidFrom">
      <summary>
              获取令牌的有效起始时间。
            </summary>
      <returns>
              一个 <see cref="T:System.DateTime" />，表示令牌的有效起始时间。
            </returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken.ValidTo">
      <summary>
              获取令牌的有效起始时间。
            </summary>
      <returns>
              一个 <see cref="T:System.DateTime" />，表示令牌的有效起始时间。
            </returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.Id">
      <summary>
              获取令牌 ID。
            </summary>
      <returns>
              令牌 ID。
            </returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.SecurityKeys">
      <summary>
              获取安全密钥的集合。
            </summary>
      <returns>
              <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> 的集合。
            </returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.ValidFrom">
      <summary>
              获取令牌的有效起始日期。
            </summary>
      <returns>
              一个 <see cref="T:System.DateTime" />，表示令牌的有效起始日期。
            </returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.ValidTo">
      <summary>
              获取令牌的过期日期。
            </summary>
      <returns>
              一个 <see cref="T:System.DateTime" />，表示令牌的过期日期。
            </returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.WrappingAlgorithm">
      <summary>
              获取包装算法。
            </summary>
      <returns>
              一个 <see cref="T:System.String" />，指定包装算法或用于加密对称密钥的算法。
            </returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.WrappingToken">
      <summary>
              获取包装令牌。
            </summary>
      <returns>
              一个表示包装令牌的 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。
            </returns>
    </member>
    <member name="P:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken.WrappingTokenReference">
      <summary>
              获取包装令牌引用。
            </summary>
      <returns>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />，表示对包装令牌的引用。
            </returns>
    </member>
    <member name="T:System.IdentityModel.AsynchronousOperationException">
      <summary>
              异步操作期间发生错误时引发的异常。
            </summary>
    </member>
    <member name="T:System.IdentityModel.AsyncResult">
      <summary>
              实现一个抽象基类 <see cref="T:System.IAsyncResult" /> 接口。
               用作从中进行派生的基类 <see cref="T:System.IAsyncResult" /> 可用于常见异步编程方案的对象。
            </summary>
    </member>
    <member name="T:System.IdentityModel.BadRequestException">
      <summary>
              不为安全令牌服务 (STS) 所理解的令牌请求 (RST) 时，将引发异常。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Claims.Claim">
      <summary>
              表示与某个实体关联的声明。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Claims.ClaimSet">
      <summary>
              表示与某个实体关联的声明的集合。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Claims.ClaimTypes">
      <summary>
              表示实体可以声明的预定义声明类型。
               此类不能被继承。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Claims.DefaultClaimSet">
      <summary>
              提供 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 类的默认实现。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Claims.Rights">
      <summary>
              定义可与 <see cref="T:System.IdentityModel.Claims.Claim" /> 对象关联的预定义权限类型。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Claims.WindowsClaimSet">
      <summary>
              表示与某一实体关联的 Windows 声明的集合。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Claims.X509CertificateClaimSet">
      <summary>
              表示从 X.509 证书中提取与某个实体关联的声明的集合。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Configuration.AudienceUriElement">
      <summary>
              表示下配置的受众 URI 值 <see langword="&lt;audienceUris&gt;" /> 元素。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Configuration.AudienceUriElementCollection">
      <summary>
              表示 <see langword="&lt;audienceUris&gt;" /> 配置文件中的元素。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Configuration.ConfigurationElementInterceptor">
      <summary>
              有部分用户可以指定任意元素和属性，则 Windows Identity Foundation (WIF) 配置架构例如，当指定的自定义令牌处理程序。
              <see cref="T:System.IdentityModel.Configuration.ConfigurationElementInterceptor" /> 类实现来处理这种情况。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Configuration.CustomTypeElement">
      <summary>
              表示元素或属性指定自定义 <see cref="T:System.Type" /> 配置文件中。
               此类不能被继承。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Configuration.ICustomIdentityConfiguration">
      <summary>
              定义使类可以加载自定义配置的方法。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Configuration.IdentityConfiguration">
      <summary>
              定义控制 Windows Identity Foundation 的行为的可配置属性的集合。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Configuration.IdentityConfigurationElement">
      <summary>
              表示 <see langword="&lt;identityConfiguration&gt;" /> 配置文件中的元素。
               此类不能被继承。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Configuration.IdentityConfigurationElementCollection">
      <summary>
              表示集合的 <see langword="&lt;identityConfiguration&gt;" /> 配置文件中的元素。
               此类不能被继承。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Configuration.IdentityModelCaches">
      <summary>
              定义配置来检测重播的令牌并缓存会话令牌的缓存。
               此类不能被继承。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Configuration.IdentityModelCachesElement">
      <summary>
              表示 <see langword="&lt;caches&gt;" /> 配置文件中的元素。
               此类不能被继承。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Configuration.IssuerNameRegistryElement">
      <summary>
              表示 <see langword="&lt;issuerNameRegistry&gt;" /> 配置文件中的元素。
               此类不能被继承。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement">
      <summary>
              表示 <see langword="&lt;securityTokenHandlerConfiguration&gt;" /> 配置文件中的元素。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Configuration.SecurityTokenHandlerElementCollection">
      <summary>
              表示 <see langword="&lt;securityTokenHandlers&gt;" /> 配置文件中的元素。
               此类不能被继承。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Configuration.SecurityTokenHandlerSetElementCollection">
      <summary>
              表示的所有组 <see langword="&lt;securityTokenHandlers&gt;" /> 下的元素 <see langword="&lt;identityConfiguration&gt;" /> 配置文件中的元素。
               此类不能被继承。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration">
      <summary>
              定义安全令牌服务 (STS) 的配置。
               实现 Sts 的类派生自 <see cref="T:System.IdentityModel.SecurityTokenService" /> 类。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Configuration.SystemIdentityModelSection">
      <summary>
              表示 <see langword="&lt;system.identityModel&gt;" /> 配置文件中的部分。
               此类不能被继承。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Configuration.TokenReplayDetectionElement">
      <summary>
              表示 <see langword="&lt;tokenReplayDetection&gt;" /> 配置文件中的元素。
               此类不能被继承。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Configuration.X509CertificateValidationElement">
      <summary>
              表示 <see langword="&lt;certificateValidation&gt;" /> 配置文件中的元素。
               此类不能被继承。
            </summary>
    </member>
    <member name="T:System.IdentityModel.CookieTransform">
      <summary>
              将可还原的数据转换应用到 cookie 数据的类抽象基类。
            </summary>
    </member>
    <member name="T:System.IdentityModel.DeflateCookieTransform">
      <summary>
              提供了 cookie 压缩使用 <see cref="T:System.IO.Compression.DeflateStream" />。
            </summary>
    </member>
    <member name="T:System.IdentityModel.DelegatingXmlDictionaryReader">
      <summary>
              该类包装指定的读取器并委托所有 <see cref="T:System.Xml.XmlDictionaryReader" /> 对已包装的读取器的调用。
            </summary>
    </member>
    <member name="T:System.IdentityModel.DelegatingXmlDictionaryWriter">
      <summary>
              该类包装指定的编写器并委托所有 <see cref="T:System.Xml.XmlDictionaryWriter" /> 对已包装的编写器的调用。
            </summary>
    </member>
    <member name="T:System.IdentityModel.EnvelopedSignatureReader">
      <summary>
              包装的读取器指向封装签名的 XML，以提供可用于读取内容，而无需处理签名的读取器。
               读取信封的最后一个元素时，会自动验证签名。
               此类不能被继承。
            </summary>
    </member>
    <member name="T:System.IdentityModel.EnvelopedSignatureWriter">
      <summary>
              包装一个编写器，并在完全写入信封时，自动生成的签名。
               此类不能被继承。
            </summary>
    </member>
    <member name="T:System.IdentityModel.LimitExceededException">
      <summary>
              当超出了配置的限制或配额时引发的异常。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Metadata.ApplicationServiceDescriptor">
      <summary>
              定义应用程序服务描述符和其终结点。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Metadata.ContactPerson">
      <summary>
              表示 SAML 2.0 元数据中的联系人的人员。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Metadata.ContactType">
      <summary>
              指定联系人的类型。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Metadata.ContactType.Unspecified">
      <summary>
              具有未指定类型的协定。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Metadata.ContactType.Technical">
      <summary>
              技术联系人。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Metadata.ContactType.Support">
      <summary>
              支持联系人。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Metadata.ContactType.Administrative">
      <summary>
              管理联系人。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Metadata.ContactType.Billing">
      <summary>
              记帐联系人。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Metadata.ContactType.Other">
      <summary>
              具有非管理、 帐单支持、 技术，或未指定类型的协定。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Metadata.DisplayClaim">
      <summary>
              表示可显示声明对象。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Metadata.EncryptionMethod">
      <summary>
              定义的加密方法。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Metadata.EntitiesDescriptor">
      <summary>
              表示实体的集合。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Metadata.EntityDescriptor">
      <summary>
              表示实体描述符。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Metadata.EntityId">
      <summary>
              表示实体 id。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Metadata.IdentityProviderSingleSignOnDescriptor">
      <summary>
              标识提供程序单一登录在描述符 (IDPSSODescriptor) 类。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Metadata.IndexedProtocolEndpoint">
      <summary>
              定义索引 <see cref="T:System.IdentityModel.Metadata.ProtocolEndpoint" />。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Metadata.IndexedProtocolEndpointDictionary">
      <summary>
              <see cref="T:System.IdentityModel.Metadata.IndexedProtocolEndpoint" /> 的已排序列表。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Metadata.KeyDescriptor">
      <summary>
              定义密钥描述符。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Metadata.KeyType">
      <summary>
              定义的键类型 <see cref="P:System.IdentityModel.Metadata.KeyDescriptor.Use" /> 属性。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Metadata.KeyType.Unspecified">
      <summary>
              未指定键的类型。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Metadata.KeyType.Signing">
      <summary>
              该密钥用于签名。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Metadata.KeyType.Encryption">
      <summary>
              该密钥用于加密。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Metadata.LocalizedEntry">
      <summary>
              用于定义本地化的项抽象基类。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Metadata.LocalizedEntryCollection`1">
      <summary>
              <see cref="T:System.IdentityModel.Metadata.LocalizedEntry" /> 对象的集合。
            </summary>
      <typeparam name="T">
                集合中对象的 <see cref="T:System.Type" />。
                 必须从 <see cref="T:System.IdentityModel.Metadata.LocalizedEntry" /> 类派生。
              </typeparam>
    </member>
    <member name="T:System.IdentityModel.Metadata.LocalizedName">
      <summary>
              定义一个本地化的名称。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Metadata.LocalizedUri">
      <summary>
              定义本地化的 URI。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Metadata.MetadataBase">
      <summary>
              定义的 SAML 元数据基类。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Metadata.MetadataSerializationException">
      <summary>
              在序列化或反序列化 SAML 元数据过程中发生错误时引发的异常。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Metadata.MetadataSerializer">
      <summary>
              提供对元数据序列化的支持
            </summary>
    </member>
    <member name="T:System.IdentityModel.Metadata.Organization">
      <summary>
              定义一个组织。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Metadata.ProtocolEndpoint">
      <summary>
              此类定义的协议终结点。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Metadata.RoleDescriptor">
      <summary>
              定义角色描述符。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Metadata.SecurityTokenServiceDescriptor">
      <summary>
              定义服务安全令牌服务描述符。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Metadata.ServiceProviderSingleSignOnDescriptor">
      <summary>
              定义一个描述符为服务提供商 SSO (SPSSO)。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Metadata.SingleSignOnDescriptor">
      <summary>
              定义 SSO 描述符。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Metadata.WebServiceDescriptor">
      <summary>
              定义 web 服务描述符。
            </summary>
    </member>
    <member name="T:System.IdentityModel.OpenObject">
      <summary>
              一个抽象类，提供了一个通用的属性包的派生类。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Policy.AuthorizationContext">
      <summary>
              可以通过已发送消息中的令牌，以及通过调用 <see cref="M:System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies(System.ServiceModel.OperationContext)" /> 方法获取对所有授权策略进行评估的结果。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Policy.EvaluationContext">
      <summary>
              当在派生类中重写时，表示已经过评估的授权策略的结果。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Policy.IAuthorizationComponent">
      <summary>
              表示用于对用户进行授权的组件。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Policy.IAuthorizationPolicy">
      <summary>
              通过给定的声明集，定义一组用于对用户进行授权的规则。
            </summary>
    </member>
    <member name="T:System.IdentityModel.ProtectedDataCookieTransform">
      <summary>
              通过使用提供 cookie 的完整性和保密性 <see cref="T:System.Security.Cryptography.ProtectedData" /> 类。
               此类不能被继承。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.AdditionalContext">
      <summary>
              表示 WS 信任授权扩展插件中定义的 auth:AdditionalContext 元素。
               WS 联合身份验证规范中定义了这些扩展。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.BinaryExchange">
      <summary>
              表示 WS 信任 BinaryExchange 元素的内容。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.ContextItem">
      <summary>
              表示 WS 信任授权扩展插件中定义的 auth:ContextItem 元素。
               WS 联合身份验证规范中定义了这些扩展。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.EndpointReference">
      <summary>
              表示一个 wsa:EndpointReference 元素。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.Entropy">
      <summary>
              表示在令牌请求消息和令牌响应消息中使用的平均信息量。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.InvalidRequestException">
      <summary>
              当请求 (RST) 无效或格式不正确时引发的异常。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.KeyTypes">
      <summary>
              在令牌请求 (RST) 或响应 (RSTR)，以指示所需的或所需的密钥类型中定义协议不可知所使用的 Uri。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.Lifetime">
      <summary>
              表示 <see langword="&lt;wst:Lifetime&gt;" /> 元素。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.Participants">
      <summary>
              表示一个 WS 信任参与者元素。
               Wst:Participants 元素是对 wst:RequestSecurityToken 元素的扩展，并用于传递有关哪些参与方有权参与使用令牌的信息。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.ProtectedKey">
      <summary>
              表示 wst:Entropy 或深入了解 RequestSecurityToken 和 RequestSecurityTokenResponse wst:RequestedProofToken 元素的内容。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.Renewing">
      <summary>
              表示 wst︰ 续订 WS 信任中的元素续订请求。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.RequestClaim">
      <summary>
              表示安全令牌请求 (RST) 中的单个请求的声明。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.RequestClaimCollection">
      <summary>
              表示 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 内 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestClaim" /> 对象的集合。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.RequestedProofToken">
      <summary>
              表示 wst:RequestedProofToken 元素的内容。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken">
      <summary>
              表示请求 （发布） 的安全令牌。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken">
      <summary>
              表示用于请求安全令牌的 wst:RequestSecurityToken 元素 (RST)。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse">
      <summary>
              表示 wst:RequestSecurityTokenResponse 元素，它用来返回安全令牌。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.RequestTypes">
      <summary>
              定义了协议不可知 RequestType URI 字符串。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.Status">
      <summary>
              表示 WS 信任验证请求的结果。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.UseKey">
      <summary>
              表示 wst:UseKey 元素的内容。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.WSTrust13RequestSerializer">
      <summary>
              用于序列化和反序列化 WS 信任 1.3 RequestSecurityToken (RST) 消息的类。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.WSTrust13ResponseSerializer">
      <summary>
              用于序列化和反序列化 WS 信任 1.3 RequestSecurityTokenResponse (RSTR) 消息的类。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005RequestSerializer">
      <summary>
              类用于序列化和反序列化 Ws-trust 2005 年 2 月 RequestSecurityToken (RST) 消息。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ResponseSerializer">
      <summary>
              类用于序列化和反序列化 Ws-trust 2005 年 2 月 RequestSecurityTokenResponse (RSTR) 消息。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.WSTrustMessage">
      <summary>
              RST 和 RSTR 的基类。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer">
      <summary>
              定义用于序列化和反序列化版本的 Ws-trust 请求 (RST) 消息的方法的抽象基类。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer">
      <summary>
              定义用于序列化和反序列化版本的 WS 信任 (RSTR) 的响应消息的方法的抽象基类。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext">
      <summary>
              定义 WS 信任消息的序列化上下文。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException">
      <summary>
              在序列化或反序列化 WS 信任消息过程中发生错误时引发的异常。
            </summary>
    </member>
    <member name="T:System.IdentityModel.RequestException">
      <summary>
              请求失败，则引发异常的基类。
            </summary>
    </member>
    <member name="T:System.IdentityModel.RequestFailedException">
      <summary>
              如果指定的请求 (RST) 由于无法明确确定外部原因而失败，则引发异常。
            </summary>
    </member>
    <member name="T:System.IdentityModel.RsaEncryptionCookieTransform">
      <summary>
              加密 cookie 使用 <see cref="T:System.Security.Cryptography.RSA" />。
            </summary>
    </member>
    <member name="T:System.IdentityModel.RsaSignatureCookieTransform">
      <summary>
              提供了 cookie 完整性使用 <see cref="T:System.Security.Cryptography.RSA" /> 签名。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Scope">
      <summary>
              表示令牌颁发请求的配置。
            </summary>
    </member>
    <member name="T:System.IdentityModel.SecurityMessageSerializationException">
      <summary>
              在序列化一条安全消息时出现错误时引发的异常。
            </summary>
    </member>
    <member name="T:System.IdentityModel.SecurityTokenService">
      <summary>
              定义的属性和方法的安全令牌服务 (STS) 的抽象基类。
            </summary>
    </member>
    <member name="T:System.IdentityModel.SecurityTokenService.FederatedAsyncState">
      <summary>
              此类用于在安全令牌服务中的异步调用之间维护请求状态。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Selectors.AudienceUriMode">
      <summary>
              指定是否应验证 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的 <see cref="T:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition" />。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Selectors.AudienceUriMode.Never">
      <summary>
              从不。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Selectors.AudienceUriMode.Always">
      <summary>
              始终。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Selectors.AudienceUriMode.BearerKeyOnly">
      <summary>
              只有在安全令牌的密钥类型为 BearerKey 并且安全令牌中没有所有权证明密钥时。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Selectors.AudienceUriModeValidationHelper">
      <summary>
              <see cref="T:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator" /> 类的一个帮助器类，用于验证是否将 <see cref="P:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.AudienceUriMode" /> 属性设置为有效值。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Selectors.CustomUserNameSecurityTokenAuthenticator">
      <summary>
              使用自定义身份验证方案对 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 安全令牌进行身份验证。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Selectors.KerberosSecurityTokenAuthenticator">
      <summary>
              对 <see cref="T:System.IdentityModel.Tokens.KerberosReceiverSecurityToken" /> 安全令牌进行身份验证。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Selectors.KerberosSecurityTokenProvider">
      <summary>
              表示为 SOAP 消息发送方提供 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 安全令牌的安全令牌提供程序。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Selectors.RsaSecurityTokenAuthenticator">
      <summary>
              对 <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" /> 安全令牌进行身份验证。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator">
      <summary>
              对 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌进行身份验证。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Selectors.SecurityTokenAuthenticator">
      <summary>
              对安全令牌进行身份验证。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Selectors.SecurityTokenManager">
      <summary>
              表示安全令牌管理器，它指定如何提供、验证以及序列化安全令牌。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Selectors.SecurityTokenProvider">
      <summary>
              表示为 SOAP 消息发送方处理安全令牌的安全令牌提供程序。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Selectors.SecurityTokenProvider.SecurityTokenAsyncResult">
      <summary>
              封装对委托的异步操作的结果。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Selectors.SecurityTokenRequirement">
      <summary>
              指定安全令牌要求。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Selectors.SecurityTokenResolver">
      <summary>
              表示一个实用工具类，该类可以在您具有密钥标识符或密钥标识符子句时检索安全令牌或密钥。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Selectors.SecurityTokenSerializer">
      <summary>
              表示一个类，它可以读写密钥标识符、密钥标识符子句和安全令牌。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Selectors.SecurityTokenVersion">
      <summary>
              表示在其中定义安全令牌的规范，例如 WS-* 规范。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Selectors.UserNamePasswordValidator">
      <summary>
              验证用户名和密码。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator">
      <summary>
              对 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 安全令牌进行身份验证。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Selectors.UserNameSecurityTokenProvider">
      <summary>
              表示为 SOAP 消息发送方提供 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 安全令牌的安全令牌提供程序。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Selectors.WindowsSecurityTokenAuthenticator">
      <summary>
              使用 Windows 身份验证对 <see cref="T:System.IdentityModel.Tokens.WindowsSecurityToken" /> 安全令牌进行身份验证。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Selectors.WindowsUserNameSecurityTokenAuthenticator">
      <summary>
              使用 Windows 身份验证对 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 安全令牌中的用户名和密码进行身份验证。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Selectors.X509CertificateValidator">
      <summary>
              验证 X.509 证书。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Selectors.X509SecurityTokenAuthenticator">
      <summary>
              对 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> 进行身份验证。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Selectors.X509SecurityTokenProvider">
      <summary>
              表示为 SOAP 消息发送方提供 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> 安全令牌的安全令牌提供程序。
            </summary>
    </member>
    <member name="T:System.IdentityModel.SignatureVerificationFailedException">
      <summary>
              当处理一个签名过程中发生错误时引发的异常
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.AggregateTokenResolver">
      <summary>
              表示安全令牌解析程序，可以换行的多个令牌解析程序，在所有已包装的冲突解决程序解决令牌。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.AsymmetricProofDescriptor">
      <summary>
              此类可以用于为颁发非对称密钥的基于的令牌。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.AsymmetricSecurityKey">
      <summary>
              非对称密钥的基类。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.AudienceRestriction">
      <summary>
              定义 AudienceRestriction 验证设置。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.AudienceUriValidationFailedException">
      <summary>
              当传入的安全令牌的受众 URI 验证失败时引发的异常。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.AuthenticationContext">
      <summary>
              此类用于指定身份验证事件的上下文。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.AuthenticationMethods">
      <summary>
              定义常数的受支持的已知身份验证方法。
               定义常数的 SAML 身份验证方法。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.BinaryKeyIdentifierClause">
      <summary>
              表示基于二进制数据的密钥标识符子句的基类。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.BootstrapContext">
      <summary>
              包含在登录时使用的原始标记的序列化的版本。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.ComputedKeyAlgorithms">
      <summary>
              在 RST 中用于指示所需的算法用于计算基于组合熵从令牌的请求者和令牌颁发者密钥。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry">
      <summary>
              表示颁发者名称注册表中维护从应用程序配置文件中将每个颁发者名称与验证的令牌颁发者所生成的签名所需的 X.509 证书相关联的元素加载的受信任颁发者的列表。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.EmptySecurityKeyIdentifierClause">
      <summary>
              表示空的密钥标识符子句。
               使用此类时 <see langword="&lt;EncryptedData&gt;" /> 或 <see langword="&lt;Signature&gt;" /> 元素不包含 <see langword="&lt;KeyInfo&gt;" /> 元素，用于描述解密的数据或检查的签名所需的密钥。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials">
      <summary>
              表示加密的密钥加密凭据。
               使用这些报告通常作为加密凭据的数据进行加密令牌等内容。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause">
      <summary>
              表示标识加密密钥的密钥标识符子句。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.EncryptedSecurityToken">
      <summary>
              包装的令牌处理本身不支持它的令牌的加密。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler">
      <summary>
              加密的安全令牌的令牌处理程序。
               处理类型的令牌 <see cref="T:System.IdentityModel.Tokens.EncryptedSecurityToken" />。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException">
      <summary>
              处理加密的安全令牌的过程中发生错误时引发的异常。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.EncryptingCredentials">
      <summary>
              表示加密密钥和用于加密校验密钥的加密算法。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.GenericXmlSecurityKeyIdentifierClause">
      <summary>
              表示基于 XML 的密钥标识符子句。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.GenericXmlSecurityToken">
      <summary>
              表示基于 XML 的安全令牌。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey">
      <summary>
              表示使用对称算法生成、并仅存储在本地计算机的随机存取内存中的密钥。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.IssuerNameRegistry">
      <summary>
              颁发者名称注册表抽象基类。
               颁发者名称注册表用于将关联到生成由相应的颁发者颁发的令牌的签名验证所需的加密材料的助记键名称。
               颁发者名称注册表维护信赖方 (RP) 应用程序的受信任的颁发者的列表。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.IssuerTokenResolver">
      <summary>
              从服务合作伙伴接收到解析颁发者令牌。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.KerberosReceiverSecurityToken">
      <summary>
              表示一个安全令牌，它基于在 SOAP 消息中接收到的 Kerberos 票证。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken">
      <summary>
              表示一个安全令牌，它基于在 SOAP 请求中发送的 Kerberos 票证。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.KerberosSecurityTokenHandler">
      <summary>
              表示处理 Kerberos 令牌的安全令牌处理程序。
               处理类型的令牌 <see cref="T:System.IdentityModel.Tokens.KerberosReceiverSecurityToken" />。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.KerberosTicketHashKeyIdentifierClause">
      <summary>
              表示一个密钥标识符子句，它标识一个 <see cref="T:System.IdentityModel.Tokens.KerberosRequestorSecurityToken" /> 或 <see cref="T:System.IdentityModel.Tokens.KerberosReceiverSecurityToken" /> 安全令牌。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause">
      <summary>
              表示一个密钥标识符子句，它标识在 SOAP 消息的安全标头中指定的安全令牌。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.ProofDescriptor">
      <summary>
              类的基类 <see cref="T:System.IdentityModel.Tokens.SymmetricProofDescriptor" /> 和 <see cref="T:System.IdentityModel.Tokens.AsymmetricProofDescriptor" /> 类。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.RsaKeyIdentifierClause">
      <summary>
              表示一个标识 <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" /> 安全令牌的密钥标识符子句。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.RsaSecurityKey">
      <summary>
              表示一个使用 RSA 算法生成的安全密钥。
               此类不能被继承。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.RsaSecurityToken">
      <summary>
              表示一个安全令牌，它基于使用 RSA 算法创建的密钥。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.RsaSecurityTokenHandler">
      <summary>
              表示 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> 来处理类型的令牌 <see cref="T:System.IdentityModel.Tokens.RsaSecurityToken" />。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2Action">
      <summary>
              表示 <see langword="&lt;saml:Action&gt;" /> 按 SAML 2.0 定义的元素。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2Advice">
      <summary>
              表示在 [Saml2Core，2.6.1] 中指定的建议元素。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2Assertion">
      <summary>
              表示在 [Saml2Core，2.3.3] 中指定了 Assertion 元素。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause">
      <summary>
              表示 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> 引用基于 SAML2 安全令牌的实现。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2Attribute">
      <summary>
              表示在 [Saml2Core，2.7.3.1] 中指定的属性元素。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2AttributeStatement">
      <summary>
              表示在 [Saml2Core，2.7.3] 中指定的 AttributeStatement 元素。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2AudienceRestriction">
      <summary>
              表示 AudienceRestriction 元素 [Saml2Core，2.5.1.4] 中指定。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2AuthenticationContext">
      <summary>
              表示在 [Saml2Core，2.7.2.2] 中指定的 AuthnContext 元素。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2AuthenticationStatement">
      <summary>
              表示在 [Saml2Core，2.7.2] 中指定的 AuthnStatement 元素。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement">
      <summary>
              表示 <see langword="&lt;saml:AuthzDecisionStatement&gt;" /> 按 SAML 2.0 定义的元素。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2Conditions">
      <summary>
              表示在 [Saml2Core，2.5.1] 中指定的条件元素。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2Evidence">
      <summary>
              表示在 [Saml2Core，2.7.4.3] 中指定的证据元素。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2Id">
      <summary>
              表示用于 SAML 断言的标识符。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2NameIdentifier">
      <summary>
              表示在 [Saml2Core，2.2.3] 中指定的 NameID 元素或 [Saml2Core，2.2.4] 中指定的 EncryptedID 元素。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2ProxyRestriction">
      <summary>
              表示在 [Saml2Core，2.5.1.6] 中指定的 ProxyRestriction 元素。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2SecurityKeyIdentifierClause">
      <summary>
              当 Saml2Assertion 收到不是签名元素中的 &lt; ds:KeyInfo &gt; 元素的情况下，使用此类。
               KeyInfo 描述需检查签名的密钥。
               此子句时需要该密钥将显示与当前 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />。
               它将包含 Saml2Assertion 充分阅读这可以通过查询来确定所需的密钥。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2SecurityToken">
      <summary>
              表示基于 SAML 断言的安全令牌。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2SecurityTokenHandler">
      <summary>
              表示从 SAML 2.0 断言创建安全令牌的安全令牌处理程序。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2Statement">
      <summary>
              表示 StatementAbstractType [Saml2Core，2.7.1] 中指定。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2Subject">
      <summary>
              表示在 [Saml2Core，2.4.1] 中指定的主题元素。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2SubjectConfirmation">
      <summary>
              表示在 [Saml2Core，2.4.1.1] 中指定的 SubjectConfirmation 元素。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2SubjectConfirmationData">
      <summary>
              表示关联中定义的 KeyInfoConfirmationDataType 和 SubjectConfirmationData 元素 [Saml2Core，2.4.1.2-2.4.1.3]。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.Saml2SubjectLocality">
      <summary>
              表示在 [Saml2Core，2.7.2.1] 中指定的 SubjectLocality 元素。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlAccessDecision">
      <summary>
              指定是否授予 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的主题访问给定资源的权限。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SamlAccessDecision.Permit">
      <summary>
              指定对资源的访问权限被授予。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SamlAccessDecision.Deny">
      <summary>
              指定对资源的访问被拒绝。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SamlAccessDecision.Indeterminate">
      <summary>
              指定颁发 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的安全令牌服务不具有足够的信息来确定对特定资源的访问权限。
              <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的接收方必须使用其他方法来确定用户的访问权限。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlAction">
      <summary>
              表示 SAML 断言中的 <see langword="&lt;saml:Action&gt;" /> 元素，其中包含对指定资源的操作。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlAdvice">
      <summary>
              表示 SAML 断言中的 <see langword="&lt;saml:Advice&gt;" /> 元素，包含 SAML 授权机构提供的附加信息。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlAssertion">
      <summary>
              表示一个安全断言标记语言 1.1 (SAML 1.1) 断言。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause">
      <summary>
              表示一个 <see langword="&lt;KeyIndentifier&gt;" /> 元素，它引用 SOAP 消息中的 <see langword="&lt;saml:Assertion&gt;" /> 元素。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlAttribute">
      <summary>
              表示与 <see cref="T:System.IdentityModel.Tokens.SamlAttributeStatement" /> 的主题相关联的属性。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlAttributeStatement">
      <summary>
              包含一组与特定 <see cref="P:System.IdentityModel.Tokens.SamlSubjectStatement.SamlSubject" /> 关联的属性。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition">
      <summary>
              指定 SAML 断言是针对特定受众的。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlAuthenticationClaimResource">
      <summary>
              表示从 <see cref="T:System.IdentityModel.Tokens.SamlAuthenticationStatement" /> 创建的声明的资源类型。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlAuthenticationStatement">
      <summary>
              表示 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的声明，它断言在特定时间以特定方式对主题进行身份验证。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlAuthorityBinding">
      <summary>
              指定如何检索关于 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌主题的附加信息。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource">
      <summary>
              表示 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的声明，它断言一个与特定资源的访问有关的授权决定。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement">
      <summary>
              表示 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的一个声明，它断言已做出与该主题访问指定资源有关的授权决定。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlCondition">
      <summary>
              表示一个在评估 SAML 断言的有效性时必须考虑的条件。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlConditions">
      <summary>
              表示评估 SAML 断言的有效性时必须考虑的条件集。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlConstants">
      <summary>
              表示一组用于设置 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的属性的常量。
               此类不能被继承。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlDoNotCacheCondition">
      <summary>
              表示一个在评估 SAML 断言的有效性时必须考虑的条件。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlEvidence">
      <summary>
              表示用于呈现 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的授权决定的证据。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlNameIdentifierClaimResource">
      <summary>
              表示一个 SAML 安全令牌声明，它断言主题名称。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlSecurityKeyIdentifierClause">
      <summary>
              SamlAssertion 收到而不是签名元素中的 &lt; ds:KeyInfo &gt; 元素时，使用此类。
               KeyInfo 描述需检查签名的密钥。
               此子句时需要该密钥将显示与当前 <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />。
               它将包含完全读取这可以通过查询来确定所需的密钥的 SamlAssertion。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlSecurityToken">
      <summary>
              表示基于 SAML 断言的安全令牌。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlSecurityTokenHandler">
      <summary>
              表示从 SAML 1.1 断言创建安全令牌的安全令牌处理程序。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlSecurityTokenRequirement">
      <summary>
              扩展 <see cref="T:System.IdentityModel.Selectors.SecurityTokenRequirement" /> 类通过添加新属性，可用于已颁发的令牌。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlSerializer">
      <summary>
              在 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 对象和 XML 文档之间进行序列化和反序列化操作。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlStatement">
      <summary>
              表示 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的声明。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlSubject">
      <summary>
              表示 SAML 安全令牌的主题。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SamlSubjectStatement">
      <summary>
              表示 <see cref="T:System.IdentityModel.Tokens.SamlSecurityToken" /> 安全令牌的声明。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityAlgorithms">
      <summary>
              定义 URI 常数，这些常数表示用于加密 XML 和计算 SOAP 消息数字签名的加密算法。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityKey">
      <summary>
              安全密钥的基类。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityKeyElement">
      <summary>
              通过解析提供的安全密钥的延迟的解析 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> 或 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> 仅仅加密功能在需要时。
               这样永远不会使用由一个应用程序进行序列化和 deserialzied 和散布在网络中不会出现问题的密钥标识符子句或密钥标识符。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityKeyIdentifier">
      <summary>
              表示密钥标识符。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause">
      <summary>
              表示密钥标识符子句的抽象基类。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClauseSerializer">
      <summary>
              序列化程序进行序列化和反序列化密钥标识符子句的抽象基类。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityKeyType">
      <summary>
              指定与安全令牌关联的密钥的类型。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityKeyType.SymmetricKey">
      <summary>
              指定密钥是对称密钥。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityKeyType.AsymmetricKey">
      <summary>
              指定密钥是非对称密钥。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityKeyType.BearerKey">
      <summary>
              指定安全令牌不包含所有权证明密钥。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityKeyUsage">
      <summary>
              指定如何使用与安全令牌相关联的密钥。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityKeyUsage.Exchange">
      <summary>
              指定密钥可用于在发送方和接收方之间交换密钥。
            </summary>
    </member>
    <member name="F:System.IdentityModel.Tokens.SecurityKeyUsage.Signature">
      <summary>
              指定密钥可用于生成数字签名。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityToken">
      <summary>
              表示用于实现所有安全令牌的基类。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityTokenDescriptor">
      <summary>
              这是针对与已颁发的令牌相关的所有属性的占位符
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityTokenElement">
      <summary>
              表示数字元素中找到 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 表示安全令牌。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityTokenException">
      <summary>
              在处理安全令牌的过程中发生问题时引发的异常。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityTokenExpiredException">
      <summary>
              当收到具有过期时间在过去的安全令牌时引发异常。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityTokenHandler">
      <summary>
              安全令牌处理程序的抽象基类。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollection">
      <summary>
              表示安全令牌处理程序的集合。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager">
      <summary>
              管理多个类名为安全令牌处理程序集。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.Usage">
      <summary>
              定义由框架使用的标准集合名称。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration">
      <summary>
              普遍适用于所有安全令牌处理程序的配置。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityTokenNotYetValidException">
      <summary>
              当收到具有一个有效的时间在将来的安全令牌时引发异常。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException">
      <summary>
              当收到已重播的安全令牌时引发异常。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityTokenTypes">
      <summary>
              包含一组静态属性，这些属性返回表示安全令牌类型的字符串。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SecurityTokenValidationException">
      <summary>
              接收到的安全令牌无效时引发的异常。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SessionSecurityToken">
      <summary>
              定义安全令牌包含与会话关联的数据。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SessionSecurityTokenCache">
      <summary>
              定义会话安全令牌的抽象类的缓存。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey">
      <summary>
              表示中的条目的键 <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenCache" />。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler">
      <summary>
              一个 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> 来处理类型的安全令牌 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SigningCredentials">
      <summary>
              表示用于生成数字签名的加密密钥和安全算法。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SymmetricProofDescriptor">
      <summary>
              此类可以用于颁发对称密钥的基于的令牌。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.SymmetricSecurityKey">
      <summary>
              表示使用对称算法生成的所有密钥的抽象基类。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.TokenReplayCache">
      <summary>
              用于定义方法用来检测重播的令牌缓存的抽象基类。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.UserNameSecurityToken">
      <summary>
              表示基于用户名和密码的安全令牌。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.UserNameSecurityTokenHandler">
      <summary>
              定义一个抽象基类 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> 来处理类型的安全令牌 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" />。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.WindowsSecurityToken">
      <summary>
              表示基于 Windows 域或用户帐户标识的安全令牌。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.WindowsUserNameSecurityTokenHandler">
      <summary>
              定义 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> 来处理 Windows 用户名令牌。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.X509AsymmetricSecurityKey">
      <summary>
              表示 X.509 证书的非对称密钥。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.X509CertificateStoreTokenResolver">
      <summary>
              表示一个令牌解析程序，可以解决类型的令牌 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> 针对指定的 X.509 证书存储区。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.X509DataSecurityKeyIdentifierClauseSerializer">
      <summary>
              表示 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClauseSerializer" /> ，它可以处理 X.509 证书引用类型。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.X509EncryptingCredentials">
      <summary>
              表示 X.509 令牌用作加密凭据。
               此类通常用作密钥换行的凭据。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause">
      <summary>
              表示一个密钥标识符子句，它使用证书颁发者的可分辨名称和 X.509 证书的序列号来标识 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> 安全令牌。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.X509NTAuthChainTrustValidator">
      <summary>
              表示 X.509 证书验证程序将验证指定的 X.509 证书，并确认是否要将证书映射到 Windows 帐户，以及是否受信任的证书链。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause">
      <summary>
              表示一个密钥标识符子句，它使用 X.509 证书的原始数据标识 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> 安全令牌。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.X509SecurityToken">
      <summary>
              表示基于 X.509 证书的安全令牌。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.X509SecurityTokenHandler">
      <summary>
              表示处理类型的令牌的安全令牌处理程序 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" />。
               默认情况下，该处理程序将执行的 X.509 证书的信任链验证。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.X509SigningCredentials">
      <summary>
              表示 X.509 令牌用作签名的凭据。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause">
      <summary>
              表示一个密钥标识符子句，它使用 X.509 证书的主题密钥标识符扩展来标识 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> 安全令牌。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause">
      <summary>
              表示一个密钥标识符子句，它使用 X.509 证书的指纹来标识 <see cref="T:System.IdentityModel.Tokens.X509SecurityToken" /> 安全令牌。
            </summary>
    </member>
    <member name="T:System.IdentityModel.Tokens.X509WindowsSecurityToken">
      <summary>
              表示基于 X.509 证书的安全令牌以及将证书映射到 Windows 域用户或本地计算机用户帐户。
            </summary>
    </member>
    <member name="T:System.IdentityModel.TypedAsyncResult`1">
      <summary>
              具体实现 <see cref="T:System.IdentityModel.AsyncResult" /> ，将换行结果 <see cref="T:System.Type" /> 并将其返回时 <see cref="M:System.IdentityModel.TypedAsyncResult`1.End(System.IAsyncResult)" /> 调用方法。
            </summary>
      <typeparam name="T">
                结果的类型。
              </typeparam>
    </member>
    <member name="T:System.IdentityModel.UnsupportedTokenTypeBadRequestException">
      <summary>
              当指定的令牌请求 (RST) 不理解由于未知的标记类型时引发的异常。
            </summary>
    </member>
    <member name="T:System.Security.Claims.AuthenticationInformation">
      <summary>
              包含证书颁发机构添加时的身份验证信息创建令牌的主题。
            </summary>
    </member>
    <member name="T:System.Security.Claims.AuthenticationTypes">
      <summary>
              定义身份验证类型 <see cref="P:System.Security.Principal.WindowsIdentity.AuthenticationType" /> 属性。
            </summary>
    </member>
    <member name="T:System.Security.Claims.AuthorizationContext">
      <summary>
              提供授权事件的上下文的信息。
               这包括代表调用方、 正在请求、 资源和正在执行的操作的主体。
            </summary>
    </member>
    <member name="T:System.Security.Claims.ClaimProperties">
      <summary>
              定义中包含的属性的键 <see cref="P:System.Security.Claims.Claim.Properties" /> 属性。
            </summary>
    </member>
    <member name="T:System.Security.Claims.ClaimsAuthenticationManager">
      <summary>
              定义声明的身份验证管理器的基实现。
               声明身份验证管理器提供了索赔处理管道将处理逻辑 （筛选、 验证、 扩展） 应用于传入的主体中的声明集合之前执行到达您的应用程序代码, 中的位置。
            </summary>
    </member>
    <member name="T:System.Security.Claims.ClaimsAuthorizationManager">
      <summary>
              定义声明授权管理器的基实现。
            </summary>
    </member>
    <member name="T:System.ServiceModel.Security.BinarySecretKeyIdentifierClause">
      <summary>
              表示二进制秘密安全令牌中的密钥标识符子句。
            </summary>
    </member>
    <member name="T:System.ServiceModel.Security.KeyNameIdentifierClause">
      <summary>
              表示安全令牌中的密钥名称标识符子句。
            </summary>
    </member>
    <member name="T:System.ServiceModel.Security.SecurityContextKeyIdentifierClause">
      <summary>
              表示安全上下文令牌的密钥标识符子句。
            </summary>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.BinarySecretSecurityToken">
      <summary>
              表示二进制秘密安全令牌。
            </summary>
    </member>
    <member name="T:System.ServiceModel.Security.Tokens.WrappedKeySecurityToken">
      <summary>
              表示在其他令牌中包装密钥的安全令牌。
            </summary>
    </member>
    <member name="T:System.ServiceModel.Security.X509CertificateValidationMode">
      <summary>
              一个列出验证证书方法的枚举。
            </summary>
    </member>
    <member name="F:System.ServiceModel.Security.X509CertificateValidationMode.None">
      <summary>
              未执行任何证书验证。
            </summary>
    </member>
    <member name="F:System.ServiceModel.Security.X509CertificateValidationMode.PeerTrust">
      <summary>
              如果证书位于被信任的人的存储区中，则有效。
            </summary>
    </member>
    <member name="F:System.ServiceModel.Security.X509CertificateValidationMode.ChainTrust">
      <summary>
              如果该链在受信任的根存储区生成证书颁发机构，则证书有效。
            </summary>
    </member>
    <member name="F:System.ServiceModel.Security.X509CertificateValidationMode.PeerOrChainTrust">
      <summary>
              如果证书位于被信任的人的存储区或该链在受信任的根存储区生成证书颁发机构，则证书有效。
            </summary>
    </member>
    <member name="F:System.ServiceModel.Security.X509CertificateValidationMode.Custom">
      <summary>
              用户必须插入自定义 <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator" /> 以验证证书。
            </summary>
    </member>
  </members>
</doc>