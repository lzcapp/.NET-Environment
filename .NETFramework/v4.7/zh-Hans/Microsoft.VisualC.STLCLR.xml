<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualC.STLCLR</name>
  </assembly>
  <members>
    <member name="F:Microsoft.VisualC.StlClr.GenericPair`2.first">
      <summary>
              第一个包装值 <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> 对象。
            </summary>
    </member>
    <member name="F:Microsoft.VisualC.StlClr.GenericPair`2.second">
      <summary>
              第二个包装值 <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> 对象。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.DequeEnumerator`1.#ctor(Microsoft.VisualC.StlClr.IDeque{`0},System.Int32)">
      <summary>
              分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.DequeEnumerator`1" /> 对象。
            </summary>
      <param name="_Cont">
                要循环访问的容器。
              </param>
      <param name="_First">
                容器中当前第一个元素的偏移量。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.DequeEnumerator`1.Dispose">
      <summary>
              释放或释放，将重置非托管的资源，通过使用 <see cref="T:Microsoft.VisualC.StlClr.DequeEnumerator`1" /> 对象。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.DequeEnumerator`1.Dispose(System.Boolean)">
      <summary>
              释放或重置 <see cref="T:Microsoft.VisualC.StlClr.DequeEnumerator`1" /> 对象使用的非托管资源。
            </summary>
      <param name="A_0">
                释放托管对象为 <see langword="true" />；释放非托管对象为 <see langword="false" />。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.DequeEnumerator`1.MoveNext">
      <summary>
              将枚举数推进到集合中的下一个元素。
            </summary>
      <returns>
              如果枚举数已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举数传递到集合的末尾，则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.DequeEnumerator`1.Reset">
      <summary>
              将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1.#ctor(Microsoft.VisualC.StlClr.IDeque{`0},System.Int32)">
      <summary>
              分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1" /> 对象。
            </summary>
      <param name="_Cont">
                要进行循环访问的容器。
              </param>
      <param name="_First">
                容器中当前第一个元素的偏移量。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1.MoveNext">
      <summary>
              将枚举数推进到集合中的下一个元素。
            </summary>
      <returns>
              如果枚举数已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举数传递到集合的末尾，则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1.Reset">
      <summary>
              将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.#ctor">
      <summary>
              分配并初始化一个新 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              分配并初始化一个新 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象从现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 要从中复制对象。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              分配并初始化一个新 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象从现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 要从中复制对象。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`0})">
      <summary>
              分配并初始化一个新 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 指向给定节点的对象。
            </summary>
      <param name="_Node">
                迭代器将指向该节点。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.Clone">
      <summary>
              返回的当前副本 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象。
            </summary>
      <returns>
              当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象的副本。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.container">
      <summary>
              获取迭代器正在遍历的容器。
            </summary>
      <returns>
              迭代器正在遍历该容器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定是否给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象等同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象是相同的对象; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              确定是否给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象等同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个迭代器是相同的对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.get_bias">
      <summary>
              获取迭代器的偏差。
               偏移是从零元素的迭代器的偏移量。
            </summary>
      <returns>
              迭代器的偏差。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.get_cref">
      <summary>
              返回迭代器当前指向的元素的常量引用。
            </summary>
      <returns>
              对迭代器当前指向的元素的常量引用。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.get_node">
      <summary>
              获取节点或迭代器指向的元素。
            </summary>
      <returns>
              迭代器指向该节点。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.get_ref">
      <summary>
              返回对迭代器当前指向的元素的引用。
            </summary>
      <returns>
              对迭代器当前指向的元素的引用。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.next">
      <summary>
              如果完全遍历此容器会增加到基础容器中的下一个位置或超出末尾的容器的第一个位置的迭代器。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              将分配给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象与当前对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 要分配给当前对象。
              </param>
      <returns>
              当前对象 (*this)。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              将分配给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象与当前对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 要分配给当前对象。
              </param>
      <returns>
              当前对象 (*this)。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}@)">
      <summary>
              减少由一个元素的迭代器。
               这是递减运算符的前缀版本。
            </summary>
      <param name="__unnamed0">
                对当前的迭代器的引用。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}@,System.Int32)">
      <summary>
              迭代器递减一个元素。
               这是减量运算符的后缀版本。
            </summary>
      <param name="__unnamed0">
                当前迭代器的引用。
              </param>
      <param name="A_0">
                未使用的参数，用于指示这是减量运算符的后缀版本。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定是否给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象等同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个迭代器是相同的对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              确定是否给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象等同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个迭代器是相同的对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0}">
      <summary>
              将 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 转换为 <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />。
            </summary>
      <returns>
              作为 <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" /> 的当前迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}@)">
      <summary>
              迭代器递增一个元素。
               这是递增运算符的前缀版本。
            </summary>
      <param name="__unnamed0">
                对当前的迭代器的引用。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}@,System.Int32)">
      <summary>
              迭代器递增一个元素。
               这是递增运算符的后缀版本。
            </summary>
      <param name="__unnamed0">
                对当前的迭代器的引用。
              </param>
      <param name="param1">
                未使用的参数，用于指示这是递增运算符的后缀版本。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定是否给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象不同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个迭代器是不同的对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              确定是否给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象不同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个迭代器是不同的对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              返回迭代器当前指向的元素。
            </summary>
      <param name="_Left">
                运算符应用于迭代器。
              </param>
      <returns>
              迭代器当前指向的元素。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              返回迭代器当前指向的元素。
            </summary>
      <param name="_Left">
                运算符应用于迭代器。
              </param>
      <returns>
              迭代器当前指向的元素。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.prev">
      <summary>
              将定位到之前的当前元素的元素的迭代器。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.valid">
      <summary>
              确定迭代器是否有效并可以安全地用于遍历基础容器。
            </summary>
      <returns>
              <see langword="true" /> 如果迭代器是否有效且安全地使用;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor">
      <summary>
              分配并初始化一个新 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              分配并初始化一个新 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象从现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 要复制到当前容器对象。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              分配并初始化一个新 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象从现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 要复制到当前容器对象。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer{`0},System.Int32)">
      <summary>
              分配并初始化一个新 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象从现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1" /> 对象。
            </summary>
      <param name="_Cont">
                现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1" /> 要复制到当前容器对象。
              </param>
      <param name="_Offset">
                迭代器在创建后将指向的元素偏移量。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.Clone">
      <summary>
              会创建一份当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象。
            </summary>
      <returns>
              当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象的副本。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.container">
      <summary>
              获取迭代器正在遍历的容器。
            </summary>
      <returns>
              迭代器正在遍历该容器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定当前的迭代器指向的元素与给定的迭代器指向的元素之间的距离。
            </summary>
      <param name="_Right">
                一个有效的迭代器指向当前迭代器相同的容器。
              </param>
      <returns>
              中的元素个数，当前的迭代器指向的元素的元素之间的距离， <paramref name="_Right" /> 指向。
               此数字为负数如果 <paramref name="_Right" /> 指向当前迭代器指向的元素之前的元素。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>
              确定当前的迭代器指向的元素与给定的迭代器指向的元素之间的距离。
            </summary>
      <param name="_Right">
                一个有效的迭代器指向当前迭代器相同的容器。
              </param>
      <returns>
              中的元素个数，当前的迭代器指向的元素的元素之间的距离， <paramref name="_Right" /> 指向。
               此数字为负数如果 <paramref name="_Right" /> 指向当前迭代器指向的元素之前的元素。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定是否给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象等同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象是相同的对象; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              确定是否给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象等同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个迭代器是相同的对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.get_bias">
      <summary>
              获取迭代器的偏差。
               偏移是从零元素的迭代器的偏移量。
            </summary>
      <returns>
              迭代器的偏差。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.get_cref">
      <summary>
              返回迭代器当前指向的元素的常量引用。
            </summary>
      <returns>
              对迭代器当前指向的元素的常量引用。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.get_node">
      <summary>
              获取节点或迭代器指向的元素。
            </summary>
      <returns>
              迭代器指向该节点。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.get_ref">
      <summary>
              返回对迭代器当前指向的元素的引用。
            </summary>
      <returns>
              对迭代器当前指向的元素的引用。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定当前迭代器指向给定的迭代器指向的元素之前的容器中的元素。
            </summary>
      <param name="_Right">
                一个有效的迭代器指向当前迭代器相同的容器。
              </param>
      <returns>
              <see langword="true" /> 当前迭代器指向的元素位于元素的前面， <paramref name="_Right" /> 为; 否则为指向 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>
              确定当前迭代器指向给定的迭代器指向的元素之前的容器中的元素。
            </summary>
      <param name="_Right">
                一个有效的迭代器指向当前迭代器相同的容器。
              </param>
      <returns>
              <see langword="true" /> 当前迭代器指向的元素位于元素的前面， <paramref name="_Right" /> 为; 否则为指向 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.move(System.Int32)">
      <summary>
              按给定数量的元素移动迭代器。
            </summary>
      <param name="_Offset">
                要遍历的元素数。
                 若要向前移动迭代器，请指定一个正数值。
                 若要移动的向后的迭代器，请使用负的数字。
              </param>
      <returns>
              遍历的实际元素数。
               此数字将不同于 <paramref name="_Offset" /> 如果的开头或结尾的容器已经到达迭代所需的元素数。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.next">
      <summary>
              如果完全遍历此容器会增加到基础容器中的下一个位置或超出末尾的容器的第一个位置的迭代器。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)">
      <summary>
              迭代器递增给定数量的元素。
               加法运算符右侧指定整数参数。
            </summary>
      <param name="__unnamed0">
                对当前的迭代器的引用。
              </param>
      <param name="_Right">
                要递增的元素数。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <summary>
              迭代器递增给定数量的元素。
               加法运算符左侧指定整数参数。
            </summary>
      <param name="__unnamed0">
                对当前的迭代器的引用。
              </param>
      <param name="_Left">
                要递增的元素数。
              </param>
      <param name="_Right">
                要递增的迭代器。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              将分配给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象与当前对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 要分配给当前对象。
              </param>
      <returns>
              当前对象 (*this)。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              将分配给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象与当前对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 要分配给当前对象。
              </param>
      <returns>
              当前对象 (*this)。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@)">
      <summary>
              减少由一个元素的迭代器。
               这是递减运算符的前缀版本。
            </summary>
      <param name="__unnamed0">
                对当前的迭代器的引用。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)">
      <summary>
              迭代器递减一个元素。
               这是减量运算符的后缀版本。
            </summary>
      <param name="__unnamed0">
                当前迭代器的引用。
              </param>
      <param name="A_0">
                未使用的参数，用于指示这是运算符的后缀版本。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定是否给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象等同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个迭代器是相同的对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              确定是否给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象等同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个迭代器是相同的对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定是否大于给定右侧的迭代器的位置的左侧的迭代器的位置。
            </summary>
      <param name="_Right">
                要与左侧的迭代器进行比较的迭代器。
              </param>
      <returns>
              <see langword="true" /> 左侧的迭代器是否大于给定右侧的迭代器;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定给定的左侧的迭代器的位置是否大于给定右侧的迭代器的位置。
            </summary>
      <param name="_Left">
                要与右侧的迭代器进行比较的迭代器。
              </param>
      <param name="_Right">
                要与左侧的迭代器进行比较的迭代器。
              </param>
      <returns>
              <see langword="true" /> 给定的左侧的迭代器是否大于给定右侧的迭代器;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定是否大于或等于给定右侧的迭代器定位到左侧的迭代器的位置。
            </summary>
      <param name="_Right">
                要与左侧的迭代器进行比较的迭代器。
              </param>
      <returns>
              <see langword="true" /> 如果左侧的迭代器是大于或等于给定的右侧的迭代器;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>
              确定是否大于或等于给定右侧的迭代器定位到左侧的迭代器的位置。
            </summary>
      <param name="_Right">
                要与左侧的迭代器进行比较的迭代器。
              </param>
      <returns>
              <see langword="true" /> 如果左侧的迭代器是大于或等于给定的右侧的迭代器;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0}">
      <summary>
              将 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 转换为 <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />。
            </summary>
      <returns>
              作为 <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /> 的当前迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@)">
      <summary>
              迭代器递增一个元素。
               这是递增运算符的前缀版本。
            </summary>
      <param name="__unnamed0">
                对当前的迭代器的引用。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)">
      <summary>
              迭代器递增一个元素。
               这是递增运算符的后缀版本。
            </summary>
      <param name="__unnamed0">
                对当前的迭代器的引用。
              </param>
      <param name="param1">
                未使用的参数，用于指示这是运算符的后缀版本。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定是否给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象不同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个迭代器是不同的对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              确定是否给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象不同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个迭代器是不同的对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定是否左侧的迭代器的位置为早于给定的右侧的迭代器的位置。
            </summary>
      <param name="_Right">
                要与左侧的迭代器进行比较的迭代器。
              </param>
      <returns>
              <see langword="true" /> 如果左侧的迭代器是早于给定的右侧的迭代器;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>
              确定是否左侧的迭代器的位置为早于给定的右侧的迭代器的位置。
            </summary>
      <param name="_Right">
                要与左侧的迭代器进行比较的迭代器。
              </param>
      <returns>
              <see langword="true" /> 如果左侧的迭代器是早于给定的右侧的迭代器;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定是否将左侧的迭代器定位为小于或等于位置给定的右侧的迭代器。
            </summary>
      <param name="_Right">
                要与左侧的迭代器进行比较的迭代器。
              </param>
      <returns>
              <see langword="true" /> 如果左侧的迭代器是小于或等于给定的右侧的迭代器;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定给定的左侧的迭代器的位置是否小于给定右侧的迭代器的位置。
            </summary>
      <param name="_Left">
                要与右侧的迭代器进行比较的迭代器。
              </param>
      <param name="_Right">
                要与左侧的迭代器进行比较的迭代器。
              </param>
      <returns>
              <see langword="true" /> 如果给定的左侧的迭代器是小于或等于给定的右侧的迭代器;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              返回迭代器当前指向的元素。
            </summary>
      <param name="_Left">
                运算符应用于迭代器。
              </param>
      <returns>
              迭代器当前指向的元素。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              返回迭代器当前指向的元素。
            </summary>
      <param name="_Left">
                运算符应用于迭代器。
              </param>
      <returns>
              迭代器当前指向的元素。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)">
      <summary>
              减少由给定数量的元素的迭代器。
               加法运算符右侧指定整数参数。
            </summary>
      <param name="__unnamed0">
                对当前的迭代器的引用。
              </param>
      <param name="_Right">
                要递减的元素数。
              </param>
      <returns>
              递减的迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>
              确定两个迭代器之间的差异。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /> 要从当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> 对象。
              </param>
      <returns>
              两个迭代器之间的差异中的元素数。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.prev">
      <summary>
              将定位到之前的当前元素的元素的迭代器。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.valid">
      <summary>
              确定迭代器是否有效并可以安全地用于遍历基础容器。
            </summary>
      <returns>
              <see langword="true" /> 如果迭代器是否有效且安全地使用;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.#ctor">
      <summary>
              分配并初始化一个新 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              分配并初始化一个新 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象从现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 要从中复制对象。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0})">
      <summary>
              分配并初始化一个新 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象从现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" /> 对象。
            </summary>
      <param name="_Iter">
                现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" /> 要从中复制对象。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              分配并初始化一个新 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象从现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象。
            </summary>
      <param name="_Iter">
                现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 要从中复制对象。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.base">
      <summary>
              获取为基础的基迭代器 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象。
            </summary>
      <returns>
              为基础的基迭代器 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.Clone">
      <summary>
              返回的当前副本 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象。
            </summary>
      <returns>
              当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象的副本。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.container">
      <summary>
              获取迭代器正在遍历的容器。
            </summary>
      <returns>
              迭代器正在遍历该容器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定是否给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象等同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象是相同的对象; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              确定是否给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象等同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个迭代器是相同的对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.get_bias">
      <summary>
              获取迭代器的偏差。
               偏移是从零元素的迭代器的偏移量。
            </summary>
      <returns>
              迭代器的偏差。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.get_cref">
      <summary>
              返回迭代器当前指向的元素的常量引用。
            </summary>
      <returns>
              对迭代器当前指向的元素的常量引用。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.get_node">
      <summary>
              获取节点或迭代器指向的元素。
            </summary>
      <returns>
              迭代器指向该节点。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.get_ref">
      <summary>
              返回对迭代器当前指向的元素的引用。
            </summary>
      <returns>
              对迭代器当前指向的元素的引用。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.next">
      <summary>
              递减到基础容器中的前一个位置或前面开头的容器如果完全遍历此容器的第一个位置的迭代器。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              将分配给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象与当前对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 要分配给当前对象。
              </param>
      <returns>
              当前对象 (*this)。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              将分配给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象与当前对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 要分配给当前对象。
              </param>
      <returns>
              当前对象 (*this)。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}@)">
      <summary>
              减少由一个元素的迭代器。
               递减的反向迭代器是为递增的正则迭代器相同的。
               这是递减运算符的前缀版本。
            </summary>
      <param name="__unnamed0">
                对当前的迭代器的引用。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}@,System.Int32)">
      <summary>
              迭代器递减一个元素。
               递减反向迭代器与递增正则迭代器相同。
               这是减量运算符的后缀版本。
            </summary>
      <param name="__unnamed0">
                当前迭代器的引用。
              </param>
      <param name="A_0">
                未使用的参数，用于指示这是运算符的后缀版本。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定是否给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象等同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个迭代器是相同的对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              确定是否给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象等同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个迭代器是相同的对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0}">
      <summary>
              将 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 转换为 <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />。
            </summary>
      <returns>
              作为 <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" /> 的当前迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}@)">
      <summary>
              迭代器递增一个元素。
               递增的反向迭代器是递减值的正则迭代器相同。
               这是递增运算符的前缀版本。
            </summary>
      <param name="__unnamed0">
                对当前的迭代器的引用。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}@,System.Int32)">
      <summary>
              迭代器递增一个元素。
               递增的反向迭代器是递减值的正则迭代器相同。
               这是递增运算符的后缀版本。
            </summary>
      <param name="__unnamed0">
                对当前的迭代器的引用。
              </param>
      <param name="param1">
                指示这是递增运算符的后缀版本。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定是否给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象不同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个迭代器是不同的对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              确定是否给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象不同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个迭代器是不同的对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              返回迭代器当前指向的元素。
            </summary>
      <param name="_Left">
                运算符应用于迭代器。
              </param>
      <returns>
              迭代器当前指向的元素。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              返回迭代器当前指向的元素。
            </summary>
      <param name="_Left">
                运算符应用于迭代器。
              </param>
      <returns>
              迭代器当前指向的元素。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.prev">
      <summary>
              如果完全遍历此容器会增加到基础容器中的下一个位置或超出末尾的容器的第一个位置的迭代器。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.valid">
      <summary>
              确定迭代器是否有效并可以安全地用于遍历基础容器。
            </summary>
      <returns>
              <see langword="true" /> 如果迭代器是否有效且安全地使用;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor">
      <summary>
              分配并初始化一个新 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              分配并初始化一个新 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象从现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 要复制到当前容器对象。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>
              分配并初始化一个新 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象从现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /> 对象。
            </summary>
      <param name="_Iter">
                现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /> 要复制到当前容器对象。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              分配并初始化一个新 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象从现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象。
            </summary>
      <param name="_Iter">
                现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 要复制到当前容器对象。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.base">
      <summary>
              获取为基础的基迭代器 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象。
            </summary>
      <returns>
              为基础的基迭代器 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.Clone">
      <summary>
              会创建一份当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象。
            </summary>
      <returns>
              当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象的副本。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.container">
      <summary>
              获取迭代器正在遍历的容器。
            </summary>
      <returns>
              迭代器正在遍历该容器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定当前的迭代器指向的元素与给定的迭代器指向的元素之间的距离。
            </summary>
      <param name="_Right">
                一个有效的迭代器指向当前迭代器相同的容器。
              </param>
      <returns>
              中的元素个数，当前的迭代器指向的元素的元素之间的距离， <paramref name="_Right" /> 指向。
               此数字为负数如果 <paramref name="_Right" /> 指向当前迭代器指向的元素之前的元素。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>
              确定当前的迭代器指向的元素与给定的迭代器指向的元素之间的距离。
            </summary>
      <param name="_Right">
                一个有效的迭代器指向当前迭代器相同的容器。
              </param>
      <returns>
              中的元素个数，当前的迭代器指向的元素的元素之间的距离， <paramref name="_Right" /> 指向。
               此数字为负数如果 <paramref name="_Right" /> 指向当前迭代器指向的元素之前的元素。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定是否给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象等同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象是相同的对象; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              确定是否给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象等同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个迭代器是相同的对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.get_bias">
      <summary>
              获取迭代器的偏差。
               偏移是从零元素的迭代器的偏移量。
            </summary>
      <returns>
              迭代器的偏差。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.get_cref">
      <summary>
              返回迭代器当前指向的元素的常量引用。
            </summary>
      <returns>
              对迭代器当前指向的元素的常量引用。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.get_node">
      <summary>
              获取节点或迭代器指向的元素。
            </summary>
      <returns>
              迭代器指向该节点。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.get_ref">
      <summary>
              返回对迭代器当前指向的元素的引用。
            </summary>
      <returns>
              对迭代器当前指向的元素的引用。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定当前迭代器指向给定的迭代器指向的元素之前的容器中的元素。
            </summary>
      <param name="_Right">
                一个有效的迭代器指向当前迭代器相同的容器。
              </param>
      <returns>
              <see langword="true" /> 当前迭代器指向的元素位于元素的前面， <paramref name="_Right" /> 为; 否则为指向 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>
              确定当前迭代器指向给定的迭代器指向的元素之前的容器中的元素。
            </summary>
      <param name="_Right">
                一个有效的迭代器指向当前迭代器相同的容器。
              </param>
      <returns>
              <see langword="true" /> 当前迭代器指向的元素位于元素的前面， <paramref name="_Right" /> 为; 否则为指向 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.move(System.Int32)">
      <summary>
              按给定数量的元素移动迭代器。
            </summary>
      <param name="_Offset">
                要遍历的元素数。
                 若要向前移动迭代器，请指定一个负数。
                 若要移动的向后的迭代器，使用的正数值。
              </param>
      <returns>
              遍历的实际元素数。
               此数字将不同于 <paramref name="_Offset" /> 如果的开头或结尾的容器已经到达迭代所需的元素数。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.next">
      <summary>
              递增反向迭代器定位到基础容器中的下一个位置或容器的前面开头的第一个位置，如果完全遍历此容器。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)">
      <summary>
              反向迭代器递增给定数量的元素。
               加法运算符右侧指定整数参数。
            </summary>
      <param name="__unnamed0">
                对当前的迭代器的引用。
              </param>
      <param name="_Right">
                要递增的元素数。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              反向迭代器递增给定数量的元素。
               加法运算符左侧指定整数参数。
            </summary>
      <param name="__unnamed0">
                对当前的迭代器的引用。
              </param>
      <param name="_Left">
                要递增的元素数。
              </param>
      <param name="_Right">
                要递增的迭代器。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              将分配给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象与当前对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 要分配给当前对象。
              </param>
      <returns>
              当前对象 (*this)。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              将分配给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象与当前对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 要分配给当前对象。
              </param>
      <returns>
              当前对象 (*this)。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@)">
      <summary>
              减少由一个元素的反向迭代器。
               这是递减运算符的前缀版本。
            </summary>
      <param name="__unnamed0">
                对当前的迭代器的引用。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)">
      <summary>
              减少由一个元素的反向迭代器。
               这是递减运算符的后缀版本。
            </summary>
      <param name="__unnamed0">
                对当前的迭代器的引用。
              </param>
      <param name="param1">
                未使用的参数，用于指示这是运算符的后缀版本。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定两个迭代器是否相同的对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个迭代器是相同的对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定是否大于给定右侧的迭代器的位置的左侧的迭代器的位置。
            </summary>
      <param name="_Right">
                要与左侧的迭代器进行比较的迭代器。
              </param>
      <returns>
              <see langword="true" /> 左侧的迭代器是否大于给定右侧的迭代器;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定是否大于或等于给定右侧的迭代器定位到左侧的迭代器的位置。
            </summary>
      <param name="_Right">
                要与左侧的迭代器进行比较的迭代器。
              </param>
      <returns>
              <see langword="true" /> 如果左侧的迭代器是大于或等于给定的右侧的迭代器;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0}">
      <summary>
              将 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 转换为 <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />。
            </summary>
      <returns>
              作为 <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /> 的当前迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@)">
      <summary>
              反向迭代器递增一个元素。
               这是递增运算符的前缀版本。
            </summary>
      <param name="__unnamed0">
                对当前的迭代器的引用。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)">
      <summary>
              反向迭代器递增一个元素。
               这是递增运算符的后缀版本。
            </summary>
      <param name="__unnamed0">
                对当前的迭代器的引用。
              </param>
      <param name="param1">
                指示这是递增运算符的后缀版本。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定是否给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象不同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个迭代器是不同的对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定是否左侧的迭代器的位置为早于给定的右侧的迭代器的位置。
            </summary>
      <param name="_Right">
                要与左侧的迭代器进行比较的迭代器。
              </param>
      <returns>
              <see langword="true" /> 如果左侧的迭代器是早于给定的右侧的迭代器;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定是否将左侧的迭代器定位为小于或等于位置给定的右侧的迭代器。
            </summary>
      <param name="_Right">
                要与左侧的迭代器进行比较的迭代器。
              </param>
      <returns>
              <see langword="true" /> 如果左侧的迭代器是小于或等于给定的右侧的迭代器;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              返回迭代器当前指向的元素。
            </summary>
      <param name="_Left">
                运算符应用于迭代器。
              </param>
      <returns>
              迭代器当前指向的元素。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              返回迭代器当前指向的元素。
            </summary>
      <param name="_Left">
                运算符应用于迭代器。
              </param>
      <returns>
              迭代器当前指向的元素。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)">
      <summary>
              减少由给定数量的元素的迭代器。
               减法运算符右侧指定整数参数。
            </summary>
      <param name="__unnamed0">
                对当前的迭代器的引用。
              </param>
      <param name="_Right">
                要递减的元素数。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>
              确定两个迭代器之间的差异。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /> 要从当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> 对象。
              </param>
      <returns>
              两个迭代器之间的差异 （多个元素）。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.prev">
      <summary>
              在当前元素后立即将定位到元素的迭代器。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.valid">
      <summary>
              确定迭代器是否有效并可以安全地用于遍历基础容器。
            </summary>
      <returns>
              <see langword="true" /> 如果迭代器是否有效且安全地使用;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor">
      <summary>
              分配并初始化一个新 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              分配并初始化一个新 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象从现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 要从中复制对象。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`0})">
      <summary>
              分配并初始化一个新 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 指向给定节点的对象。
            </summary>
      <param name="_Node">
                迭代器将指向该节点。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.Clone">
      <summary>
              返回的当前副本 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象。
            </summary>
      <returns>
              当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象的副本。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.container">
      <summary>
              获取迭代器正在遍历的容器。
            </summary>
      <returns>
              迭代器正在遍历该容器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定是否给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象等同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象是相同的对象; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              确定给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象等同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个迭代器是相同的对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.get_bias">
      <summary>
              获取迭代器的偏差。
               偏移是从零元素的迭代器的偏移量。
            </summary>
      <returns>
              迭代器的偏差。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.get_cref">
      <summary>
              返回迭代器当前指向的元素的常量引用。
            </summary>
      <returns>
              对迭代器当前指向的元素的常量引用。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.get_node">
      <summary>
              获取节点或迭代器指向的元素。
            </summary>
      <returns>
              迭代器指向该节点。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.get_ref">
      <summary>
              返回对迭代器当前指向的元素的引用。
            </summary>
      <returns>
              对迭代器当前指向的元素的引用。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.next">
      <summary>
              如果完全遍历此容器会增加到基础容器中的下一个位置或超出末尾的容器的第一个位置的迭代器。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              将分配给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象与当前对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 要分配给当前对象。
              </param>
      <returns>
              当前对象 (*this)。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)">
      <summary>
              减少由一个元素的迭代器。
               这是递减运算符的前缀版本。
            </summary>
      <param name="__unnamed0">
                对当前的迭代器的引用。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,System.Int32)">
      <summary>
              迭代器递减一个元素。
               这是减量运算符的后缀版本。
            </summary>
      <param name="__unnamed0">
                当前迭代器的引用。
              </param>
      <param name="A_0">
                未使用的参数，用于指示这是运算符的后缀版本。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定是否给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象等同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个迭代器是相同的对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              确定是否给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象等同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个迭代器是相同的对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0}">
      <summary>
              将 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 转换为 <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />。
            </summary>
      <returns>
              作为 <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" /> 的当前迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)">
      <summary>
              迭代器递增一个元素。
               这是递增运算符的前缀版本。
            </summary>
      <param name="__unnamed0">
                对当前的迭代器的引用。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,System.Int32)">
      <summary>
              迭代器递增一个元素。
               这是递增运算符的后缀版本。
            </summary>
      <param name="__unnamed0">
                对当前的迭代器的引用。
              </param>
      <param name="param1">
                未使用的参数，用于指示这是运算符的后缀版本。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定是否给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象不同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个迭代器是不同的对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              确定是否给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象不同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个迭代器是不同的对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              返回迭代器当前指向的元素。
            </summary>
      <param name="_Left">
                运算符应用于迭代器。
              </param>
      <returns>
              迭代器当前指向的元素。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              返回迭代器当前指向的元素。
            </summary>
      <param name="_Left">
                运算符应用于迭代器。
              </param>
      <returns>
              迭代器当前指向的元素。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.prev">
      <summary>
              将定位到之前的当前元素的元素的迭代器。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.valid">
      <summary>
              确定迭代器是否有效并可以安全地用于遍历基础容器。
            </summary>
      <returns>
              <see langword="true" /> 如果迭代器是否有效且安全地使用;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor">
      <summary>
              分配并初始化一个新 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              分配并初始化一个新 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象从现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 要复制到当前容器对象。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer{`0},System.Int32)">
      <summary>
              分配并初始化一个新 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象从现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1" /> 对象。
            </summary>
      <param name="_Cont">
                现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1" /> 要复制到当前容器对象。
              </param>
      <param name="_Offset">
                迭代器在创建后将指向的元素偏移量。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.Clone">
      <summary>
              会创建一份当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象。
            </summary>
      <returns>
              当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象的副本。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.container">
      <summary>
              获取迭代器正在遍历的容器。
            </summary>
      <returns>
              迭代器正在遍历该容器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定当前的迭代器指向的元素与给定的迭代器指向的元素之间的距离。
            </summary>
      <param name="_Right">
                一个有效的迭代器指向当前迭代器相同的容器。
              </param>
      <returns>
              中的元素个数，当前的迭代器指向的元素的元素之间的距离， <paramref name="_Right" /> 指向。
               此数字为负数如果 <paramref name="_Right" /> 指向当前迭代器指向的元素之前的元素。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>
              确定当前的迭代器指向的元素与给定的迭代器指向的元素之间的距离。
            </summary>
      <param name="_Right">
                一个有效的迭代器指向当前迭代器相同的容器。
              </param>
      <returns>
              中的元素个数，当前的迭代器指向的元素的元素之间的距离， <paramref name="_Right" /> 指向。
               此数字为负数如果 <paramref name="_Right" /> 指向当前迭代器指向的元素之前的元素。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定是否给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象等同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象是相同的对象; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              确定是否给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象等同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个迭代器是相同的对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.get_bias">
      <summary>
              获取迭代器的偏差。
               偏移是从零元素的迭代器的偏移量。
            </summary>
      <returns>
              迭代器的偏差。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.get_cref">
      <summary>
              返回迭代器当前指向的元素的常量引用。
            </summary>
      <returns>
              对迭代器当前指向的元素的常量引用。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.get_node">
      <summary>
              获取节点或迭代器指向的元素。
            </summary>
      <returns>
              迭代器指向该节点。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.get_ref">
      <summary>
              返回对迭代器当前指向的元素的引用。
            </summary>
      <returns>
              对迭代器当前指向的元素的引用。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定当前迭代器指向给定的迭代器指向的元素之前的容器中的元素。
            </summary>
      <param name="_Right">
                一个有效的迭代器指向当前迭代器相同的容器。
              </param>
      <returns>
              <see langword="true" /> 当前迭代器指向的元素位于元素的前面， <paramref name="_Right" /> 为; 否则为指向 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>
              确定当前迭代器指向给定的迭代器指向的元素之前的容器中的元素。
            </summary>
      <param name="_Right">
                一个有效的迭代器指向当前迭代器相同的容器。
              </param>
      <returns>
              <see langword="true" /> 当前迭代器指向的元素位于元素的前面， <paramref name="_Right" /> 为; 否则为指向 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.move(System.Int32)">
      <summary>
              按给定数量的元素移动迭代器。
            </summary>
      <param name="_Offset">
                要遍历的元素数。
                 若要向前移动迭代器，请指定一个正数值。
                 若要移动的向后的迭代器，请使用负的数字。
              </param>
      <returns>
              遍历的实际元素数。
               此数字将不同于 <paramref name="_Offset" /> 如果的开头或结尾的容器已经到达迭代所需的元素数。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.next">
      <summary>
              如果完全遍历此容器会增加到基础容器中的下一个位置或超出末尾的容器的第一个位置的迭代器。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)">
      <summary>
              迭代器递增给定数量的元素。
               加法运算符右侧指定整数参数。
            </summary>
      <param name="__unnamed0">
                对当前的迭代器的引用。
              </param>
      <param name="_Right">
                要递增的元素数。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              迭代器递增给定数量的元素。
               加法运算符左侧指定整数参数。
            </summary>
      <param name="__unnamed0">
                对当前的迭代器的引用。
              </param>
      <param name="_Left">
                要递增的元素数。
              </param>
      <param name="_Right">
                要递增的迭代器。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              将分配给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象与当前对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 要分配给当前对象。
              </param>
      <returns>
              当前对象 (*this)。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)">
      <summary>
              减少由一个元素的迭代器。
               这是递减运算符的前缀版本。
            </summary>
      <param name="__unnamed0">
                对当前的迭代器的引用。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)">
      <summary>
              迭代器递减一个元素。
               这是减量运算符的后缀版本。
            </summary>
      <param name="__unnamed0">
                当前迭代器的引用。
              </param>
      <param name="A_0">
                未使用的参数，用于指示这是运算符的后缀版本。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定是否给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象等同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个迭代器是相同的对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              确定是否给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象等同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个迭代器是相同的对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定是否大于给定右侧的迭代器的位置的左侧的迭代器的位置。
            </summary>
      <param name="_Right">
                要与左侧的迭代器进行比较的迭代器。
              </param>
      <returns>
              <see langword="true" /> 左侧的迭代器是否大于给定右侧的迭代器;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定给定的左侧的迭代器的位置是否大于给定右侧的迭代器的位置。
            </summary>
      <param name="_Left">
                要与右侧的迭代器进行比较的迭代器。
              </param>
      <param name="_Right">
                要与左侧的迭代器进行比较的迭代器。
              </param>
      <returns>
              <see langword="true" /> 给定的左侧的迭代器是否大于给定右侧的迭代器;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定是否大于或等于给定右侧的迭代器定位到左侧的迭代器的位置。
            </summary>
      <param name="_Right">
                要与左侧的迭代器进行比较的迭代器。
              </param>
      <returns>
              <see langword="true" /> 如果左侧的迭代器是大于或等于给定的右侧的迭代器;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>
              确定是否大于或等于给定右侧的迭代器定位到左侧的迭代器的位置。
            </summary>
      <param name="_Right">
                要与左侧的迭代器进行比较的迭代器。
              </param>
      <returns>
              <see langword="true" /> 如果左侧的迭代器是大于或等于给定的右侧的迭代器;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0}">
      <summary>
              将 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 转换为 <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />。
            </summary>
      <returns>
              作为 <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /> 的当前迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)">
      <summary>
              迭代器递增一个元素。
               这是递增运算符的前缀版本。
            </summary>
      <param name="__unnamed0">
                对当前的迭代器的引用。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)">
      <summary>
              迭代器递增一个元素。
               这是增量运算符的后缀版本。
            </summary>
      <param name="__unnamed0">
                当前迭代器的引用。
              </param>
      <param name="A_0">
                未使用的参数，用于指示这是运算符的后缀版本。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定是否给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象不同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个迭代器是不同的对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              确定是否给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象不同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个迭代器是不同的对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定是否左侧的迭代器的位置为早于给定的右侧的迭代器的位置。
            </summary>
      <param name="_Right">
                要与左侧的迭代器进行比较的迭代器。
              </param>
      <returns>
              <see langword="true" /> 如果左侧的迭代器是早于给定的右侧的迭代器;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>
              确定是否左侧的迭代器的位置为早于给定的右侧的迭代器的位置。
            </summary>
      <param name="_Right">
                要与左侧的迭代器进行比较的迭代器。
              </param>
      <returns>
              <see langword="true" /> 如果左侧的迭代器是早于给定的右侧的迭代器;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定是否将左侧的迭代器定位为小于或等于位置给定的右侧的迭代器。
            </summary>
      <param name="_Right">
                要与左侧的迭代器进行比较的迭代器。
              </param>
      <returns>
              <see langword="true" /> 如果左侧的迭代器是小于或等于给定的右侧的迭代器;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定给定的左侧的迭代器的位置是否小于给定右侧的迭代器的位置。
            </summary>
      <param name="_Left">
                要与右侧的迭代器进行比较的迭代器。
              </param>
      <param name="_Right">
                要与左侧的迭代器进行比较的迭代器。
              </param>
      <returns>
              <see langword="true" /> 如果给定的左侧的迭代器是小于或等于给定的右侧的迭代器;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              返回迭代器当前指向的元素。
            </summary>
      <param name="_Left">
                运算符应用于迭代器。
              </param>
      <returns>
              迭代器当前指向的元素。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              返回迭代器当前指向的元素。
            </summary>
      <param name="_Left">
                运算符应用于迭代器。
              </param>
      <returns>
              迭代器当前指向的元素。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)">
      <summary>
              减少由给定数量的元素的迭代器。
               减法运算符右侧指定整数参数。
            </summary>
      <param name="__unnamed0">
                对当前的迭代器的引用。
              </param>
      <param name="_Right">
                要递减的元素数。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>
              确定两个迭代器之间的差异。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /> 要从当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象。
              </param>
      <returns>
              两个迭代器之间的差异 （多个元素）。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.prev">
      <summary>
              将定位到之前的当前元素的元素的迭代器。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.valid">
      <summary>
              确定迭代器是否有效并可以安全地用于遍历基础容器。
            </summary>
      <returns>
              <see langword="true" /> 如果迭代器是否有效且安全地使用;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.container">
      <summary>
              获取迭代器正在遍历的容器。
            </summary>
      <returns>
              迭代器正在遍历该容器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.get_bias">
      <summary>
              获取迭代器的偏差。
               偏移是从零元素的迭代器的偏移量。
            </summary>
      <returns>
              迭代器的偏差。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.get_node">
      <summary>
              获取节点或迭代器指向的元素。
            </summary>
      <returns>
              迭代器当前指向的节点。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.next">
      <summary>
              如果完全遍历此容器会增加到基础容器中的下一个位置或超出末尾的容器的第一个位置的迭代器。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.valid">
      <summary>
              确定迭代器是否有效并可以安全地用于遍历基础容器。
            </summary>
      <returns>
              <see langword="true" /> 如果迭代器是否有效且安全地使用;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer`1.get_generation">
      <summary>
              获取当前的更改生成的基础容器。
            </summary>
      <returns>
              当前更改基础容器的代次。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1.prev">
      <summary>
              将定位到之前的当前元素的元素的迭代器。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IInputIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              确定两个 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象是否相等。
            </summary>
      <param name="A_0">
                要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象。
              </param>
      <returns>
              如果当前迭代器与指定迭代器相等，则为 <see langword="true" />，否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IInputIterator`1.get_cref">
      <summary>
              返回迭代器当前指向的元素的常量引用。
            </summary>
      <returns>
              对迭代器当前指向的元素的常量引用。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.INode`1.container">
      <summary>
              获取当前节点的容器。
            </summary>
      <returns>
              当前节点是中的容器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.INode`1.is_head">
      <summary>
              确定当前节点是否为该容器的第一个节点。
            </summary>
      <returns>
              <see langword="true" /> 如果当前节点为容器; 中的第一个节点否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.INode`1.next_node">
      <summary>
              获取当前节点后容器中的下一个节点。
            </summary>
      <returns>
              过去的当前节点的容器中的下一个节点。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.INode`1.prev_node">
      <summary>
              获取在当前节点之前立即容器中的节点。
            </summary>
      <returns>
              在当前节点之前立即容器中的节点。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IOutputIterator`1.get_ref">
      <summary>
              返回对迭代器当前指向的元素的引用。
            </summary>
      <returns>
              对迭代器当前指向的元素的引用。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1.at_bias(System.Int32)">
      <summary>
              获取容器的当前偏差处的元素。
               偏移是与当前元素零偏移量。
            </summary>
      <param name="param0">
                当前的偏移。
              </param>
      <returns>
              给定偏移处的元素。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1.valid_bias(System.Int32)">
      <summary>
              确定给定的偏移是否为有效的容器。
               偏移是与当前元素零偏移量。
            </summary>
      <param name="param0">
                当前的偏移。
              </param>
      <returns>
              <see langword="true" /> 如果给定的偏移有效的容器;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>
              确定当前的迭代器指向的元素与给定的迭代器指向的元素之间的距离。
            </summary>
      <param name="_Right">
                一个有效的迭代器指向当前迭代器相同的容器。
              </param>
      <returns>
              中的元素个数，当前的迭代器指向的元素的元素之间的距离， <paramref name="_Right" /> 指向。
               此数字为负数如果 <paramref name="_Right" /> 指向当前迭代器指向的元素之前的元素。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>
              确定当前的迭代器指向优先给定迭代器指向的元素的容器中的元素。
            </summary>
      <param name="_Right">
                一个有效的迭代器指向当前迭代器相同的容器。
              </param>
      <returns>
              <see langword="true" /> 当前迭代器指向的元素位于元素的前面， <paramref name="_Right" /> 为; 否则为指向 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.move(System.Int32)">
      <summary>
              按给定数量的元素移动迭代器。
            </summary>
      <param name="_Offset">
                要遍历的元素数。
                 若要向前移动迭代器，请指定一个正数值。
                 若要移动的向后的迭代器，请使用负的数字。
              </param>
      <returns>
              遍历的实际元素数。
               此数字将不同于 <paramref name="_Offset" /> 如果的开头或结尾的容器已经到达迭代所需的元素数。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor">
      <summary>
              分配并初始化一个新 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0})">
      <summary>
              分配并初始化一个新 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象从现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" /> 对象。
            </summary>
      <param name="_Iter">
                现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" /> 要从中复制对象。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              分配并初始化一个新 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象从现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 要从中复制对象。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.base">
      <summary>
              获取为基础的基迭代器 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象。
            </summary>
      <returns>
              为基础的基迭代器 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.Clone">
      <summary>
              返回的当前副本 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象。
            </summary>
      <returns>
              当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象的副本。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.container">
      <summary>
              获取迭代器正在遍历的容器。
            </summary>
      <returns>
              迭代器正在遍历该容器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              确定是否给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象等同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个迭代器是相同的对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定是否给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象等同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象是相同的对象; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.get_bias">
      <summary>
              获取迭代器的偏差。
               偏移是从零元素的迭代器的偏移量。
            </summary>
      <returns>
              迭代器的偏差。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.get_cref">
      <summary>
              返回迭代器当前指向的元素的常量引用。
            </summary>
      <returns>
              对迭代器当前指向的元素的常量引用。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.get_node">
      <summary>
              获取节点或迭代器指向的元素。
            </summary>
      <returns>
              迭代器指向该节点。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.get_ref">
      <summary>
              返回对迭代器当前指向的元素的引用。
            </summary>
      <returns>
              对迭代器当前指向的元素的引用。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.next">
      <summary>
              递减到基础容器中的前一个位置或前面开头的容器如果完全遍历此容器的第一个位置的迭代器。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              将分配给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象与当前对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 要分配给当前对象。
              </param>
      <returns>
              当前对象 (*this)。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)">
      <summary>
              减少由一个元素的迭代器。
               递减的反向迭代器是为递增的正则迭代器相同的。
               这是递减运算符的前缀版本。
            </summary>
      <param name="__unnamed0">
                对当前的迭代器的引用。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@,System.Int32)">
      <summary>
              迭代器递减一个元素。
               递减反向迭代器与递增正则迭代器相同。
               这是减量运算符的后缀版本。
            </summary>
      <param name="__unnamed0">
                当前迭代器的引用。
              </param>
      <param name="A_0">
                未使用的参数，用于指示这是运算符的后缀版本。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              确定是否给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象等同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个迭代器是相同的对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定是否给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象等同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个迭代器是相同的对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0}">
      <summary>
              将 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 转换为 <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />。
            </summary>
      <returns>
              作为 <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" /> 的当前迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)">
      <summary>
              迭代器递增一个元素。
               递增的反向迭代器是递减值的正则迭代器相同。
               这是递增运算符的前缀版本。
            </summary>
      <param name="__unnamed0">
                对当前的迭代器的引用。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@,System.Int32)">
      <summary>
              迭代器递增一个元素。
               递增反向迭代器与递减正则迭代器相同。
               这是增量运算符的后缀版本。
            </summary>
      <param name="__unnamed0">
                当前迭代器的引用。
              </param>
      <param name="A_0">
                未使用的参数，用于指示这是运算符的后缀版本。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              确定是否给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象不同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个迭代器是不同的对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定是否给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象不同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个迭代器是不同的对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              返回迭代器当前指向的元素。
            </summary>
      <param name="_Left">
                运算符应用于迭代器。
              </param>
      <returns>
              迭代器当前指向的元素。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              返回迭代器当前指向的元素。
            </summary>
      <param name="_Left">
                运算符应用于迭代器。
              </param>
      <returns>
              迭代器当前指向的元素。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.prev">
      <summary>
              如果完全遍历此容器会增加到基础容器中的下一个位置或超出末尾的容器的第一个位置的迭代器。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.valid">
      <summary>
              确定迭代器是否有效并可以安全地用于遍历基础容器。
            </summary>
      <returns>
              <see langword="true" /> 如果迭代器是否有效且安全地使用;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.#ctor">
      <summary>
              分配并初始化一个新 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>
              分配并初始化一个新 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象从现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /> 对象。
            </summary>
      <param name="_Iter">
                现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /> 要复制到当前容器对象。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              分配并初始化一个新 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象从现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 要复制到当前容器对象。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.base">
      <summary>
              获取为基础的基迭代器 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象。
            </summary>
      <returns>
              为基础的基迭代器 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.Clone">
      <summary>
              会创建一份当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象。
            </summary>
      <returns>
              当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象的副本。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.container">
      <summary>
              获取迭代器正在遍历的容器。
            </summary>
      <returns>
              迭代器正在遍历该容器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>
              确定当前的迭代器指向的元素与给定的迭代器指向的元素之间的距离。
            </summary>
      <param name="_Right">
                一个有效的迭代器指向当前迭代器相同的容器。
              </param>
      <returns>
              中的元素个数，当前的迭代器指向的元素的元素之间的距离， <paramref name="_Right" /> 指向。
               此数字为负数如果 <paramref name="_Right" /> 指向当前迭代器指向的元素之前的元素。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定当前的迭代器指向的元素与给定的迭代器指向的元素之间的距离。
            </summary>
      <param name="_Right">
                一个有效的迭代器指向当前迭代器相同的容器。
              </param>
      <returns>
              中的元素个数，当前的迭代器指向的元素的元素之间的距离， <paramref name="_Right" /> 指向。
               此数字为负数如果 <paramref name="_Right" /> 指向当前迭代器指向的元素之前的元素。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              确定是否给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象等同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个迭代器是相同的对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定是否给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象等同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象是相同的对象; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.get_bias">
      <summary>
              获取迭代器的偏差。
               偏移是从零元素的迭代器的偏移量。
            </summary>
      <returns>
              迭代器的偏差。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.get_cref">
      <summary>
              返回迭代器当前指向的元素的常量引用。
            </summary>
      <returns>
              对迭代器当前指向的元素的常量引用。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.get_node">
      <summary>
              获取节点或迭代器指向的元素。
            </summary>
      <returns>
              迭代器指向该节点。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.get_ref">
      <summary>
              返回对迭代器当前指向的元素的引用。
            </summary>
      <returns>
              对迭代器当前指向的元素的引用。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>
              确定当前迭代器指向给定的迭代器指向的元素之前的容器中的元素。
            </summary>
      <param name="_Right">
                一个有效的迭代器指向当前迭代器相同的容器。
              </param>
      <returns>
              <see langword="true" /> 当前迭代器指向的元素位于元素的前面， <paramref name="_Right" /> 为; 否则为指向 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定当前迭代器指向给定的迭代器指向的元素之前的容器中的元素。
            </summary>
      <param name="_Right">
                一个有效的迭代器指向当前迭代器相同的容器。
              </param>
      <returns>
              <see langword="true" /> 当前迭代器指向的元素位于元素的前面， <paramref name="_Right" /> 为; 否则为指向 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.move(System.Int32)">
      <summary>
              按给定数量的元素移动迭代器。
            </summary>
      <param name="_Offset">
                要遍历的元素数。
                 若要向前移动迭代器，请指定一个负数。
                 若要移动的向后的迭代器，使用的正数值。
              </param>
      <returns>
              遍历的实际元素数。
               此数字将不同于 <paramref name="_Offset" /> 如果的开头或结尾的容器已经到达迭代所需的元素数。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.next">
      <summary>
              递增反向迭代器定位到基础容器中的下一个位置或容器的前面开头的第一个位置，如果完全遍历此容器。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)">
      <summary>
              反向迭代器递增给定数量的元素。
               加法运算符右侧指定整数参数。
            </summary>
      <param name="__unnamed0">
                对当前的迭代器的引用。
              </param>
      <param name="_Right">
                要递增的元素数。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              反向迭代器递增给定数量的元素。
               加法运算符左侧指定整数参数。
            </summary>
      <param name="__unnamed0">
                对当前的迭代器的引用。
              </param>
      <param name="_Left">
                要递增的元素数。
              </param>
      <param name="_Right">
                要递增的迭代器。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              将分配给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象与当前对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 要分配给当前对象。
              </param>
      <returns>
              当前对象 (*this)。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)">
      <summary>
              减少由一个元素的反向迭代器。
               这是递减运算符的前缀版本。
            </summary>
      <param name="__unnamed0">
                对当前的迭代器的引用。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)">
      <summary>
              减少由一个元素的反向迭代器。
               这是递减运算符的后缀版本。
            </summary>
      <param name="__unnamed0">
                对当前的迭代器的引用。
              </param>
      <param name="param1">
                未使用的参数，用于指示这是运算符的后缀版本。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定两个迭代器是否相同的对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个迭代器是相同的对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定是否大于给定右侧的迭代器的位置的左侧的迭代器的位置。
            </summary>
      <param name="_Right">
                要与左侧的迭代器进行比较的迭代器。
              </param>
      <returns>
              <see langword="true" /> 左侧的迭代器是否大于给定右侧的迭代器;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定是否大于或等于给定右侧的迭代器定位到左侧的迭代器的位置。
            </summary>
      <param name="_Right">
                要与左侧的迭代器进行比较的迭代器。
              </param>
      <returns>
              <see langword="true" /> 如果左侧的迭代器是大于或等于给定的右侧的迭代器;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0}">
      <summary>
              将 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 转换为 <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />。
            </summary>
      <returns>
              作为 <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /> 的当前迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)">
      <summary>
              反向迭代器递增一个元素。
               这是递增运算符的前缀版本。
            </summary>
      <param name="__unnamed0">
                对当前的迭代器的引用。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)">
      <summary>
              反向迭代器递增一个元素。
               这是递增运算符的后缀版本。
            </summary>
      <param name="__unnamed0">
                对当前的迭代器的引用。
              </param>
      <param name="param1">
                未使用的参数，用于指示这是运算符的后缀版本。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定是否给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象不同于当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个迭代器是不同的对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定是否左侧的迭代器的位置为早于给定的右侧的迭代器的位置。
            </summary>
      <param name="_Right">
                要与左侧的迭代器进行比较的迭代器。
              </param>
      <returns>
              <see langword="true" /> 如果左侧的迭代器是早于给定的右侧的迭代器;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              确定是否将左侧的迭代器定位为小于或等于位置给定的右侧的迭代器。
            </summary>
      <param name="_Right">
                要与左侧的迭代器进行比较的迭代器。
              </param>
      <returns>
              <see langword="true" /> 如果左侧的迭代器是小于或等于给定的右侧的迭代器;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              返回迭代器当前指向的元素。
            </summary>
      <param name="_Left">
                运算符应用于迭代器。
              </param>
      <returns>
              迭代器当前指向的元素。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              返回迭代器当前指向的元素。
            </summary>
      <param name="_Left">
                运算符应用于迭代器。
              </param>
      <returns>
              迭代器当前指向的元素。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>
              确定两个迭代器之间的差异。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /> 要从当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> 对象。
              </param>
      <returns>
              两个迭代器之间的差异中的元素数。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)">
      <summary>
              减少由给定数量的元素的迭代器。
               减法运算符右侧指定整数参数。
            </summary>
      <param name="__unnamed0">
                对当前的迭代器的引用。
              </param>
      <param name="_Right">
                要递减的元素数。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.prev">
      <summary>
              在当前元素后立即将定位到元素的迭代器。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.valid">
      <summary>
              确定迭代器是否有效并可以安全地用于遍历基础容器。
            </summary>
      <returns>
              <see langword="true" /> 如果迭代器是否有效且安全地使用;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.GenericPair`2.#ctor">
      <summary>
              构造一个新 <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> 具有默认值为对象 <see cref="F:Microsoft.VisualC.StlClr.GenericPair`2.first" /> 和 <see cref="F:Microsoft.VisualC.StlClr.GenericPair`2.second" />。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.GenericPair`2.#ctor(`0)">
      <summary>
              构造一个新 <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> 对象并将其第一个值分配到指定的值。
            </summary>
      <param name="_Val1">
                要存储中的值 <see cref="F:Microsoft.VisualC.StlClr.GenericPair`2.first" />。
                <see cref="F:Microsoft.VisualC.StlClr.GenericPair`2.second" /> 赋值其类型的默认值。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.GenericPair`2.#ctor(`0,`1)">
      <summary>
              构造一个新 <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> 具有两个指定的值对象。
            </summary>
      <param name="_Val1">
                要存储中的值 <see cref="F:Microsoft.VisualC.StlClr.GenericPair`2.first" />。
              </param>
      <param name="_Val2">
                要存储中的值 <see cref="F:Microsoft.VisualC.StlClr.GenericPair`2.second" />。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.GenericPair`2.#ctor(Microsoft.VisualC.StlClr.GenericPair{`0,`1}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              构造一个新 <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> 对象从现有 <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> 对象复制到新 <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> 对象。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.GenericPair`2.#ctor(System.Collections.Generic.KeyValuePair{`0,`1}@)">
      <summary>
              构造一个新 <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> 对象从现有 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 对象复制到新 <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> 对象。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.GenericPair`2.Equals(System.Object)">
      <summary>
              确定两个 <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> 对象是否相等。
            </summary>
      <param name="_Right_arg">
                <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> 要与当前 <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> 对象。
              </param>
      <returns>
              如果两个 <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> 对象相等，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.GenericPair`2.op_Assign(Microsoft.VisualC.StlClr.GenericPair{`0,`1}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              替换存储的中的值对 <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> 要从中复制对象。
              </param>
      <returns>
              此方法返回 *this。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.GenericPair`2.swap(Microsoft.VisualC.StlClr.GenericPair{`0,`1}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>
              交换两个内容 <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> 对象。
            </summary>
      <param name="_Right">
                <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> 对象要与其交换内容。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.HashEnumerator`2.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`1})">
      <summary>
              分配并初始化一个新 <see cref="T:Microsoft.VisualC.StlClr.HashEnumerator`2" /> 对象。
            </summary>
      <param name="_First">
                要对其进行循环访问容器中的第一个节点。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.HashEnumerator`2.Dispose">
      <summary>
              释放或释放，将重置非托管的资源，通过使用 <see cref="T:Microsoft.VisualC.StlClr.HashEnumerator`2" /> 对象。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.HashEnumerator`2.Dispose(System.Boolean)">
      <summary>
              释放或重置 <see cref="T:Microsoft.VisualC.StlClr.HashEnumerator`2" /> 对象使用的非托管资源。
            </summary>
      <param name="A_0">
                释放托管对象为 <see langword="true" />；释放非托管对象为 <see langword="false" />。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.HashEnumerator`2.MoveNext">
      <summary>
              将枚举数推进到集合中的下一个元素。
            </summary>
      <returns>
              如果枚举数已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举数传递到集合的末尾，则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.HashEnumerator`2.Reset">
      <summary>
              将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.HashEnumeratorBase`2.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`1})">
      <summary>
              分配并初始化一个新 <see cref="T:Microsoft.VisualC.StlClr.HashEnumeratorBase`2" /> 对象。
            </summary>
      <param name="_First">
                要对其进行循环访问容器中的第一个节点。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.HashEnumeratorBase`2.MoveNext">
      <summary>
              将枚举数推进到集合中的下一个元素。
            </summary>
      <returns>
              如果枚举数已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举数传递到集合的末尾，则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.HashEnumeratorBase`2.Reset">
      <summary>
              将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              使用指定的元素替换容器中的所有元素给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象。
            </summary>
      <param name="_First">
                要插入到容器的范围的起始位置。
              </param>
      <param name="_Last">
                要插入到容器的范围的末尾之外的第一个位置。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.assign(System.Collections.IEnumerable)">
      <summary>
              中的元素替换容器中的所有元素给定 <see cref="T:System.Collections.IEnumerable" /> 对象。
            </summary>
      <param name="_Right">
                若要插入到容器中的枚举。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.assign(System.Int32,`0)">
      <summary>
              用给定数量的指定元素替换容器中的所有元素。
            </summary>
      <param name="_Count">
                要插入到容器的元素数。
              </param>
      <param name="_Val">
                要插入到容器的元素的值。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.at(System.Int32)">
      <summary>
              访问容器中的指定位置处的元素。
            </summary>
      <param name="_Pos">
                要访问的元素的位置。
              </param>
      <returns>
              位置处的受控序列的元素 <paramref name="pos" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.back">
      <summary>
              访问该容器的最后一个元素。
            </summary>
      <returns>
              必须为非空的受控序列的最后一个元素。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)">
      <summary>
              指定受控序列的开头。
            </summary>
      <param name="__unnamed0">
                指定受控序列，或刚超出空序列的末尾的第一个元素的随机访问迭代器。
                 用于获取指定的迭代器 <paramref name="current" /> 如果受控序列的长度发生更改，可以更改开始受控的序列，而其状态。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.begin_bias">
      <summary>
              获取当前序列的开头的偏移。
               偏移是当前元素为零的偏移量。
            </summary>
      <returns>
              当前序列的开头的偏移。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.clear">
      <summary>
              在容器中移除所有元素。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.empty">
      <summary>
              测试是否该容器不包含任何元素。
            </summary>
      <returns>
              <see langword="true" /> 如果容器为空，则为否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)">
      <summary>
              指定受控序列的末尾。
            </summary>
      <param name="__unnamed0">
                一个随机访问迭代器指向立即超出受控序列的末尾的位置。
                 用于获取指定的迭代器 <paramref name="current" /> 如果受控序列的长度发生更改，可以更改受控制的序列，但其状态的结尾。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.end_bias">
      <summary>
              获取当前序列的末尾的偏移。
               偏移是当前元素为零的偏移量。
            </summary>
      <returns>
              当前序列的末尾的偏移。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <summary>
              移除指定位置的元素。
            </summary>
      <param name="__unnamed0">
                指定已移除，任何元素之外保留的第一个元素的迭代器或 <see cref="M:Microsoft.VisualC.StlClr.IDeque`1.end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)" /> 如果此类元素不存在。
              </param>
      <param name="_Where">
                要清除的元素。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <summary>
              移除指定的迭代器之间的元素。
            </summary>
      <param name="__unnamed0">
                指定已移除，任何元素之外保留的第一个元素的迭代器或 <see cref="M:Microsoft.VisualC.StlClr.IDeque`1.end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)" /> 如果此类元素不存在。
              </param>
      <param name="_First_iter">
                要清除的范围开始位置。
              </param>
      <param name="_Last_iter">
                之外的位置之一要清除的范围的最后一个元素。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.front">
      <summary>
              访问该容器的第一个元素。
            </summary>
      <returns>
              必须为非空的受控序列的第一个元素。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.get_generation">
      <summary>
              获取当前的更改生成的基础容器。
            </summary>
      <returns>
              当前更改基础容器的代次。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,`0)">
      <summary>
              在容器中的指定位置添加一个元素。
            </summary>
      <param name="__unnamed0">
                一个指定新插入的元素的迭代器。
              </param>
      <param name="_Where">
                在其前面进行插入的容器中的位置。
              </param>
      <param name="_Val">
                要插入到容器的元素。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              将元素添加在容器中的指定位置。
            </summary>
      <param name="_Where">
                在其前面进行插入的容器中的位置。
              </param>
      <param name="_First">
                要插入到容器的范围的起始处。
              </param>
      <param name="_Last">
                要插入到容器的范围的末尾之外的第一个位置。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Collections.IEnumerable)">
      <summary>
              将元素添加在容器中的指定位置。
            </summary>
      <param name="_Where_iter">
                在其前面进行插入的容器中的位置。
              </param>
      <param name="_Right">
                要插入到容器的元素中的枚举。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Int32,`0)">
      <summary>
              在容器中的指定位置添加给定的元素数。
            </summary>
      <param name="_Where">
                在其前面进行插入的容器中的位置。
              </param>
      <param name="_Count">
                要插入到容器的元素数。
              </param>
      <param name="_Val">
                要插入到容器的元素的值。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.pop_back">
      <summary>
              删除非空容器的最后一个元素。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.pop_front">
      <summary>
              删除非空容器的第一个元素。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.push_back(`0)">
      <summary>
              将元素添加到容器的末尾。
            </summary>
      <param name="_Val">
                要追加到末尾的容器的元素。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.push_front(`0)">
      <summary>
              将元素添加到容器的开头。
            </summary>
      <param name="_Val">
                要添加到容器的开头的元素。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)">
      <summary>
              指定反向受控序列的开头。
            </summary>
      <param name="__unnamed0">
                指定受控序列，或刚超出空序列的开头的最后一个元素的反向迭代器。
                 因此，它指定 <paramref name="beginning" /> 反向序列。
                 用于获取指定的迭代器 <paramref name="current" /> 如果受控序列的长度发生更改，可以更改按逆序的受控的序列，但其状态的开头。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)">
      <summary>
              指定反向受控序列的末尾。
            </summary>
      <param name="__unnamed0">
                反向迭代器指向刚超出受控序列的开头。
                 因此，它指定 <paramref name="end" /> 反向序列。
                 用于获取指定的迭代器 <paramref name="current" /> 如果受控序列的长度发生更改，可以更改按逆序的受控的序列，但其状态的结尾。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.resize(System.Int32)">
      <summary>
              更改元素的数目。
            </summary>
      <param name="_Newsize">
                受控序列的新大小。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.resize(System.Int32,`0)">
      <summary>
              更改元素的数目。
            </summary>
      <param name="_Newsize">
                受控序列的新大小。
              </param>
      <param name="_Val">
                填充元素的值。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.size">
      <summary>
              对元素数进行计数。
            </summary>
      <returns>
              受控序列的长度。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.swap(Microsoft.VisualC.StlClr.IDeque{`0})">
      <summary>
              交换两个容器的内容。
            </summary>
      <param name="A_0">
                要与其交换内容的容器。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)">
      <summary>
              指定受控序列的开头。
            </summary>
      <param name="__unnamed0">
                指定受控序列，或刚超出空序列的末尾的第一个元素的双向迭代器。
                 用于获取指定的迭代器 <paramref name="current" /> 如果受控序列的长度发生更改，可以更改开始受控的序列，而其状态。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.bucket_count">
      <summary>
              对哈希表中的存储桶的数量进行计数。
            </summary>
      <returns>
              当前的哈希表中的存储桶数。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.clear">
      <summary>
              从容器中移除所有元素。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.count(`0)">
      <summary>
              查找与指定的键匹配的元素数。
            </summary>
      <param name="_Keyval">
                要搜索键值。
              </param>
      <returns>
              具有与相同的密钥的控制序列中的元素数目 <paramref name="_Keyval" />。
               用于确定当前的控制序列中与指定的键匹配的元素的数目。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.empty">
      <summary>
              测试元素是否存在的容器中。
            </summary>
      <returns>
              <see langword="true" /> 如果容器不包含任何元素;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)">
      <summary>
              指定受控序列的末尾。
            </summary>
      <param name="__unnamed0">
                指向刚超出受控序列的末尾双向迭代器。
                 用于获取指定受控序列的末尾的迭代器。
                 受控序列的长度发生更改时，其状态不会更改。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.equal_range(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}}@,`0)">
      <summary>
              查找与指定的键匹配的范围。
            </summary>
      <param name="__unnamed0">
                一对迭代器，以确定当前的控制序列中与指定的键匹配的元素的范围。
              </param>
      <param name="_Keyval">
                要搜索键值。
              </param>
      <returns>
              一对迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.erase(`0)">
      <summary>
              从与指定的键匹配的容器中移除元素。
            </summary>
      <param name="_Keyval">
                要删除的密钥值。
              </param>
      <returns>
              已移除的元素数。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue)">
      <summary>
              从容器中删除由给定的迭代器指定的元素。
            </summary>
      <param name="__unnamed0">
                指定已移除元素以外的第一个元素的迭代器或 <see cref="M:Microsoft.VisualC.StlClr.IHash`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" /> 如果此类元素不存在。
              </param>
      <param name="_Where">
                一个指向要清除的元素的迭代器。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue)">
      <summary>
              从容器中移除指定的迭代器之间的元素。
            </summary>
      <param name="__unnamed0">
                删除指定的元素之外的第一个元素的迭代器，或 <see cref="M:Microsoft.VisualC.StlClr.IHash`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" /> 如果此类元素不存在。
              </param>
      <param name="_First_iter">
                一个指向要清除的范围开头的迭代器。
              </param>
      <param name="_Last_iter">
                一个指向紧跟要清除的范围的位置的迭代器。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.find(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)">
      <summary>
              查找与指定键匹配的元素。
            </summary>
      <param name="__unnamed0">
                迭代器，它将指定的一个找到的元素;或 <see cref="M:Microsoft.VisualC.StlClr.IHash`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" /> 如果未找到的元素。
              </param>
      <param name="_Keyval">
                要搜索键值。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.hash_delegate">
      <summary>
              返回用于将密钥值转换为整数的委托。
            </summary>
      <returns>
              用于将密钥值转换为一个整数，该委托。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue,`1)">
      <summary>
              将给定的元素添加到容器。
            </summary>
      <param name="__unnamed0">
                一个指定新插入的元素的迭代器。
              </param>
      <param name="_Where">
                指定要插入该元素的容器内的什么位置的迭代器。
                 这仅是一个提示，用于提高性能。
                 不可能在此位置插入该元素。
              </param>
      <param name="_Val">
                要插入到容器的密钥值。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.insert(Microsoft.VisualC.StlClr.Generic.IInputIterator{`1},Microsoft.VisualC.StlClr.Generic.IInputIterator{`1})">
      <summary>
              将给定的迭代器指定的元素添加到容器中。
            </summary>
      <param name="_First">
                一个迭代器，指向要插入的元素范围的起始时间。
              </param>
      <param name="_Last">
                一个指向紧跟要插入的元素范围的元素的迭代器。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.insert(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},System.Boolean}@,`1)">
      <summary>
              将给定的值添加到容器。
            </summary>
      <param name="__unnamed0">
                一对值 X。
                 如果 X.second 是 <see langword="true" />, ，X.first 指定新插入的元素; 否则为 X.first 指定具有等效的元素排序已经存在，并且没有新元素插入。
              </param>
      <param name="_Val">
                要插入到容器的密钥值。
              </param>
      <returns>
              一对迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.insert(System.Collections.IEnumerable)">
      <summary>
              将给定的枚举添加到容器。
            </summary>
      <param name="_Right">
                若要插入到容器中的枚举。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.key_comp">
      <summary>
              返回用于排序的受控的序列的排序委托。
               用于比较两个键。
            </summary>
      <returns>
              用于排序的受控的序列的排序委托。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.load_factor">
      <summary>
              对每个哈希表中的存储桶的元素的平均数目进行计数。
            </summary>
      <returns>
              平均每个哈希表中的存储桶的元素数。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.lower_bound(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)">
      <summary>
              查找与指定的键匹配的元素范围的起始时间。
            </summary>
      <param name="__unnamed0">
                指定为相同的存储桶进行哈希处理的控制序列中的第一个元素的迭代器 <paramref name="_Keyval" /> 和具有等效顺序到 <paramref name="_Keyval" />。
                 如果此类元素不存在，它将返回 <see cref="M:Microsoft.VisualC.StlClr.IHash`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />。
              </param>
      <param name="_Keyval">
                要搜索键值。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.max_load_factor">
      <summary>
              哈希表中获取每个存储桶的最大元素数。
            </summary>
      <returns>
              每个哈希表中的存储桶的元素的最大数目。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.max_load_factor(System.Single)">
      <summary>
              设置每个哈希表中的存储桶的最大元素数。
            </summary>
      <param name="_Newmax">
                每个哈希表中的存储桶的元素的最大数目。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`1}@)">
      <summary>
              指定反向受控序列的开头。
            </summary>
      <param name="__unnamed0">
                指定受控序列，或刚超出空序列的开头的最后一个元素的反向迭代器。
                 因此，它指定 <paramref name="beginning" /> 反向序列。
                 用于获取指定的迭代器 <paramref name="current" /> 的按相反的顺序的受控序列的开头。
                 如果受控序列的长度发生更改，可以更改其状态。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.rehash(System.Int32)">
      <summary>
              重新生成哈希表。
            </summary>
      <param name="_Buckets">
                用于哈希表的存储桶数。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`1}@)">
      <summary>
              指定反向受控序列的末尾。
            </summary>
      <param name="__unnamed0">
                反向迭代器指向刚超出受控序列的开头。
                 因此，它指定 <paramref name="end" /> 反向序列。
                 用于获取指定的迭代器 <paramref name="current" /> 按相反的顺序的受控序列的末尾。
                 如果受控序列的长度发生更改，可以更改其状态。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.size">
      <summary>
              对容器中的元素数进行计数。
            </summary>
      <returns>
              受控序列的长度。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.swap(Microsoft.VisualC.StlClr.IHash{`0,`1})">
      <summary>
              交换两个容器的内容。
            </summary>
      <param name="_Right">
                要交换的内容与其容器。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.upper_bound(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)">
      <summary>
              查找与指定的键匹配的元素范围的末尾。
            </summary>
      <param name="__unnamed0">
                指定为相同的存储桶进行哈希处理的控制序列中的最后一个元素之外的第一个元素的迭代器 <paramref name="_Keyval" /> 和具有等效顺序到 <paramref name="_Keyval" />。
                 如果此类元素不存在，它将返回 <see cref="M:Microsoft.VisualC.StlClr.IHash`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />。
              </param>
      <param name="_Keyval">
                要搜索的密钥值。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.value_comp">
      <summary>
              返回用于排序的受控的序列的排序委托。
            </summary>
      <returns>
              用于排序的受控的序列的排序委托。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              受控的序列替换序列 [<paramref name="_First" />, <paramref name="_Last" />)。
            </summary>
      <param name="_First">
                要插入到容器的元素范围的开始位置。
              </param>
      <param name="_Last">
                要插入到容器的元素范围之外的第一个位置。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.assign(System.Collections.IEnumerable)">
      <summary>
              受控的序列替换给定枚举器指定的序列。
            </summary>
      <param name="_Right">
                其元素是要插入到容器中的枚举。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.assign(System.Int32,`0)">
      <summary>
              受控的序列替换为指定数目的给定元素。
            </summary>
      <param name="_Count">
                要插入到容器的元素数。
              </param>
      <param name="_Val">
                要插入到容器的元素的值。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.back">
      <summary>
              访问该容器的最后一个元素。
            </summary>
      <returns>
              必须为非空的受控序列的最后一个元素。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)">
      <summary>
              指定受控序列的开头。
            </summary>
      <param name="__unnamed0">
                指定受控序列，或刚超出空序列的末尾的第一个元素的随机访问迭代器。
                 用于获取指定的迭代器 <paramref name="current" /> 如果受控序列的长度发生更改，可以更改开始受控的序列，而其状态。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.clear">
      <summary>
              从容器中移除所有元素。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.empty">
      <summary>
              测试是否容器不包含任何元素。
            </summary>
      <returns>
              <see langword="true" /> 如果容器不包含任何元素;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)">
      <summary>
              指定受控序列的末尾。
            </summary>
      <param name="__unnamed0">
                一个随机访问迭代器指向刚超出受控序列的末尾。
                 用于获取指定受控序列的末尾的迭代器。
                 如果受控序列的长度发生更改，则不更改其状态。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <summary>
              移除给定的迭代器指向的受控序列的单个元素。
            </summary>
      <param name="__unnamed0">
                指定已移除，任何元素之外保留的第一个元素的迭代器或 <see cref="M:Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" /> 如果此类元素不存在。
              </param>
      <param name="_Where">
                要清除的元素的位置。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <summary>
              受控序列的元素范围内移除 [<paramref name="_First_iter" />, <paramref name="_Last_iter" />)。
            </summary>
      <param name="__unnamed0">
                指定已移除，任何元素之外保留的第一个元素的迭代器或 <see cref="M:Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" /> 如果此类元素不存在。
              </param>
      <param name="_First_iter">
                要清除的元素范围的开始位置。
              </param>
      <param name="_Last_iter">
                要清除的元素范围之外的第一个位置。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.front">
      <summary>
              访问该容器的第一个元素。
            </summary>
      <returns>
              必须为非空的受控序列的第一个元素。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,`0)">
      <summary>
              将给定值的元素插入到容器。
            </summary>
      <param name="__unnamed0">
                一个指定新插入的元素的迭代器。
              </param>
      <param name="_Where">
                紧随新插入的元素的容器中的位置。
              </param>
      <param name="_Val">
                要插入到容器的元素的值。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              将序列插入 [<paramref name="_First" />, <paramref name="_Last" />) 到容器。
            </summary>
      <param name="_Where">
                紧随新插入的元素的容器中的位置。
              </param>
      <param name="_First">
                要插入到容器的元素范围的开始位置。
              </param>
      <param name="_Last">
                要插入到容器的元素范围之外的第一个位置。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Collections.IEnumerable)">
      <summary>
              将指定的枚举数的元素插入到容器。
            </summary>
      <param name="_Where_iter">
                要在其前插入的容器中的位置。
              </param>
      <param name="_Right">
                其元素是要插入到容器中的枚举。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Int32,`0)">
      <summary>
              将指定的数量的给定值的元素插入到容器。
            </summary>
      <param name="_Where">
                紧随新插入的元素的容器中的位置。
              </param>
      <param name="_Count">
                要插入到容器的元素数。
              </param>
      <param name="_Val">
                要插入到容器的元素的值。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.merge(Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})">
      <summary>
              合并两个有序受控的序列。
            </summary>
      <param name="_Right">
                要合并到此容器中的容器。
              </param>
      <param name="_Pred">
                用于比较的元素对布尔函子。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.pop_back">
      <summary>
              从容器中移除最后一个元素。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.pop_front">
      <summary>
              从容器中移除的第一个元素。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.push_back(`0)">
      <summary>
              将新元素添加到容器末尾。
            </summary>
      <param name="_Val">
                要追加到的容器的元素的值。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.push_front(`0)">
      <summary>
              将新元素添加到容器的开头。
            </summary>
      <param name="_Val">
                要插入的容器的开始处的元素的值。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)">
      <summary>
              指定反向受控序列的开头。
            </summary>
      <param name="__unnamed0">
                指定受控的序列或空序列的刚超出开头位置的最后一个元素的反向迭代器。
                 因此，它指定 <paramref name="beginning" /> 反向序列。
                 用于获取指定的迭代器 <paramref name="current" /> 如果受控序列的长度发生更改，可以更改开始受控的序列，它会出现按相反的顺序，而其状态。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.remove(`0)">
      <summary>
              移除具有指定的值从容器的元素。
            </summary>
      <param name="_Val">
                要从容器中移除的元素的值。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.remove_if(Microsoft.VisualC.StlClr.UnaryDelegate{`0,System.Boolean})">
      <summary>
              从通过指定的测试容器中移除的元素。
            </summary>
      <param name="_Pred">
                布尔测试，用于确定哪些元素将被删除。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)">
      <summary>
              指定反向受控序列的末尾。
            </summary>
      <param name="__unnamed0">
                反向迭代器指向刚超出受控序列的开头。
                 因此，它指定 <paramref name="end" /> 反向序列。
                 用于获取指定的迭代器 <paramref name="current" /> 如果受控序列的长度发生更改，可以更改按逆序的受控的序列，但其状态的结尾。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.resize(System.Int32)">
      <summary>
              容器中的元素数更改为指定的大小。
            </summary>
      <param name="_Newsize">
                新容器的大小。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.resize(System.Int32,`0)">
      <summary>
              容器中的元素数更改为指定的大小。
               如果新的大小大于旧大小，则给定的值将追加到容器。
            </summary>
      <param name="_Newsize">
                新容器的大小。
              </param>
      <param name="_Val">
                填充元素的值。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.reverse">
      <summary>
              反转受控序列的元素。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.size">
      <summary>
              对容器中的元素数进行计数。
            </summary>
      <returns>
              受控序列的长度。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.sort(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})">
      <summary>
              受控的序列进行排序。
            </summary>
      <param name="_Pred">
                可用于比较元素的排序运算符。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.IList{`0})">
      <summary>
              将与给定的序列插入到指定的位置之前的容器。
            </summary>
      <param name="_Where">
                在其前面进行拼接容器中的位置。
              </param>
      <param name="_Right">
                要从 splice 的容器。
                 拼接操作完成后，将此容器中移除所有元素。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <summary>
              从给定所指向的容器中移除的元素 <paramref name="_First" /> 并将其指向的受控序列中的元素之前插入 <paramref name="_Where" />。
            </summary>
      <param name="_Where">
                在其前面进行拼接容器中的位置。
              </param>
      <param name="_Right">
                要从 splice 的容器。
              </param>
      <param name="_First">
                要拼接的元素的位置。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <summary>
              移除的元素范围 [<paramref name="_First" />, ，<paramref name="_Last" />) 从给定的容器和受控序列中的元素之前它所指向的插入 <paramref name="_Where" />。
            </summary>
      <param name="_Where">
                在其前面进行拼接容器中的位置。
              </param>
      <param name="_Right">
                要从 splice 的容器。
              </param>
      <param name="_First">
                要拼接的元素范围的开始位置。
              </param>
      <param name="_Last">
                要拼接的元素范围之外的第一个位置。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.swap(Microsoft.VisualC.StlClr.IList{`0})">
      <summary>
              交换两个容器的内容。
            </summary>
      <param name="_Right">
                要与其交换内容的容器。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.unique(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})">
      <summary>
              删除通过了指定测试的相邻元素。
            </summary>
      <param name="_Pred">
                确定元素对是否是唯一的比较器。
                 不是唯一的元素将从容器中移除。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.assign(Microsoft.VisualC.StlClr.IPriorityQueue{`0,`1})">
      <summary>
              将替换容器中的所有元素。
            </summary>
      <param name="_Right">
                若要插入到容器中的容器适配器。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.empty">
      <summary>
              确定容器是否不包含任何元素。
            </summary>
      <returns>
              <see langword="true" /> 如果容器不包含任何元素，则否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.get_container">
      <summary>
              访问基础容器。
            </summary>
      <returns>
              基础容器。
               可用于绕过容器包装所规定的限制。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.pop">
      <summary>
              移除容器的优先级最高的元素。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.push(`0)">
      <summary>
              将新元素添加到容器。
            </summary>
      <param name="_Val">
                受控序列中插入一个元素。
                 受控的序列然后重新排序以保持堆准则。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.size">
      <summary>
              对容器中的元素数进行计数。
            </summary>
      <returns>
              受控序列的长度。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.top">
      <summary>
              访问该容器的优先级最高的元素。
            </summary>
      <returns>
              必须为非空的受控序列的顶部 （最高优先级） 元素。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.value_comp">
      <summary>
              将复制为两个元素的排序委托。
            </summary>
      <returns>
              排序的委托，用于控制的序列进行排序。
               您可以用它来比较两个值。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IQueue`2.assign(Microsoft.VisualC.StlClr.IQueue{`0,`1})">
      <summary>
              容器中的所有元素都替换为所提供的容器。
            </summary>
      <param name="_Right">
                其元素将插入到容器中的容器适配器。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IQueue`2.back">
      <summary>
              访问该容器的最后一个元素。
            </summary>
      <returns>
              必须为非空的受控序列的最后一个元素。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IQueue`2.empty">
      <summary>
              确定容器是否不包含任何元素。
            </summary>
      <returns>
              <see langword="true" /> 如果容器不包含任何元素，则否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IQueue`2.front">
      <summary>
              访问该容器的第一个元素。
            </summary>
      <returns>
              必须为非空的受控序列的第一个元素。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IQueue`2.get_container">
      <summary>
              访问基础容器。
            </summary>
      <returns>
              基础容器。
               您可以使用它来跳过容器包装所规定的限制。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IQueue`2.pop">
      <summary>
              删除容器的最后一个元素。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IQueue`2.push(`0)">
      <summary>
              将元素添加到容器的开头。
            </summary>
      <param name="_Val">
                要添加到容器的开头的值。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IQueue`2.size">
      <summary>
              对容器中的元素数进行计数。
            </summary>
      <returns>
              受控序列的长度。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IStack`2.assign(Microsoft.VisualC.StlClr.IStack{`0,`1})">
      <summary>
              所提供的容器中的元素替换容器中的所有元素。
            </summary>
      <param name="_Right">
                其元素是要插入到容器中的容器适配器。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IStack`2.empty">
      <summary>
              确定容器是否不包含任何元素。
            </summary>
      <returns>
              <see langword="true" /> 如果容器不包含任何元素，则否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IStack`2.get_container">
      <summary>
              访问基础容器。
            </summary>
      <returns>
              基础容器。
               您可以使用它来跳过容器包装所规定的限制。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IStack`2.pop">
      <summary>
              删除容器的最后一个元素。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IStack`2.push(`0)">
      <summary>
              将元素追加到的容器。
            </summary>
      <param name="_Val">
                要追加到容器的值。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IStack`2.size">
      <summary>
              对容器中的元素数进行计数。
            </summary>
      <returns>
              受控序列的长度。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IStack`2.top">
      <summary>
              访问该容器的最后一个元素。
            </summary>
      <returns>
              必须为非空的受控序列的最后一个元素。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)">
      <summary>
              指定受控序列的开头。
            </summary>
      <param name="__unnamed0">
                指定受控序列，或刚超出空序列的末尾的第一个元素的双向迭代器。
                 用于获取指定的迭代器 <paramref name="current" /> 如果受控序列的长度发生更改，可以更改开始受控的序列，而其状态。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.clear">
      <summary>
              从容器中移除所有元素。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.count(`0)">
      <summary>
              查找与指定的键匹配的元素数。
            </summary>
      <param name="_Keyval">
                要搜索键值。
              </param>
      <returns>
              具有与相同的密钥的控制序列中的元素数目 <paramref name="_Keyval" />。
               用于确定当前的控制序列中与指定的键匹配的元素的数目。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.empty">
      <summary>
              测试元素是否存在的容器中。
            </summary>
      <returns>
              <see langword="true" /> 如果容器不包含任何元素;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)">
      <summary>
              指定受控序列的末尾。
            </summary>
      <param name="__unnamed0">
                指向刚超出受控序列的末尾双向迭代器。
                 用于获取指定受控序列的末尾的迭代器。
                 受控序列的长度发生更改时，其状态不会更改。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.equal_range(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}}@,`0)">
      <summary>
              查找与指定的键匹配的范围。
            </summary>
      <param name="__unnamed0">
                一对迭代器，以确定当前的控制序列中与指定的键匹配的元素的范围。
              </param>
      <param name="_Keyval">
                要搜索键值。
              </param>
      <returns>
              一对迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.erase(`0)">
      <summary>
              从与指定的键匹配的容器中移除元素。
            </summary>
      <param name="_Keyval">
                要删除的密钥值。
              </param>
      <returns>
              已移除的元素数。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue)">
      <summary>
              从容器中删除由给定的迭代器指定的元素。
            </summary>
      <param name="__unnamed0">
                指定已移除元素以外的第一个元素的迭代器或 <see cref="M:Microsoft.VisualC.StlClr.ITree`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" /> 如果此类元素不存在。
              </param>
      <param name="_Where">
                一个指向要清除的元素的迭代器。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue)">
      <summary>
              从容器中移除指定的迭代器之间的元素。
            </summary>
      <param name="__unnamed0">
                删除指定的元素之外的第一个元素的迭代器，或 <see cref="M:Microsoft.VisualC.StlClr.ITree`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" /> 如果此类元素不存在。
              </param>
      <param name="_First_iter">
                一个指向要清除的范围开头的迭代器。
              </param>
      <param name="_Last_iter">
                一个指向紧跟要清除的范围的位置的迭代器。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.find(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)">
      <summary>
              查找与指定键匹配的元素。
            </summary>
      <param name="__unnamed0">
                迭代器，它将指定的一个找到的元素;或 <see cref="M:Microsoft.VisualC.StlClr.ITree`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" /> 如果未找到的元素。
              </param>
      <param name="_Keyval">
                要搜索键值。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue,`1)">
      <summary>
              将给定的元素添加到容器。
            </summary>
      <param name="__unnamed0">
                一个指定新插入的元素的迭代器。
              </param>
      <param name="_Where">
                指定要插入该元素的容器内的什么位置的迭代器。
                 这仅是一个提示，用于提高性能。
                 不可能在此位置插入该元素。
              </param>
      <param name="_Val">
                要插入到容器的密钥值。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.insert(Microsoft.VisualC.StlClr.Generic.IInputIterator{`1},Microsoft.VisualC.StlClr.Generic.IInputIterator{`1})">
      <summary>
              将给定的迭代器指定的元素添加到容器中。
            </summary>
      <param name="_First">
                一个迭代器，指向要插入的元素范围的起始时间。
              </param>
      <param name="_Last">
                一个指向紧跟要插入的元素范围的元素的迭代器。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.insert(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},System.Boolean}@,`1)">
      <summary>
              将给定的值添加到容器。
            </summary>
      <param name="__unnamed0">
                一对值 X。
                 如果 X.second 为 true， X.first 指定新插入的元素; 否则为 X.first 指定具有等效的元素排序已经存在，并且没有新元素插入。
              </param>
      <param name="_Val">
                要插入到容器的密钥值。
              </param>
      <returns>
              一对迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.insert(System.Collections.Generic.IEnumerable{`1})">
      <summary>
              将给定的枚举添加到容器。
            </summary>
      <param name="_Right">
                若要插入到容器中的枚举。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.key_comp">
      <summary>
              返回用于排序的受控的序列的排序委托。
               用于比较两个键。
            </summary>
      <returns>
              用于排序的受控的序列的排序委托。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.lower_bound(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)">
      <summary>
              查找与指定的键匹配的元素范围的起始时间。
            </summary>
      <param name="__unnamed0">
                指定为相同的存储桶进行哈希处理的控制序列中的第一个元素的迭代器 <paramref name="_Keyval" /> 和具有等效顺序到 <paramref name="_Keyval" />。
                 如果此类元素不存在，它将返回 <see cref="M:Microsoft.VisualC.StlClr.ITree`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />。
              </param>
      <param name="_Keyval">
                要搜索键值。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`1}@)">
      <summary>
              指定反向受控序列的开头。
            </summary>
      <param name="__unnamed0">
                指定受控序列，或刚超出空序列的开头的最后一个元素的反向迭代器。
                 因此，它指定 <paramref name="beginning" /> 反向序列。
                 用于获取指定的迭代器 <paramref name="current" /> 的按相反的顺序的受控序列的开头。
                 如果受控序列的长度发生更改，可以更改其状态。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`1}@)">
      <summary>
              指定反向受控序列的末尾。
            </summary>
      <param name="__unnamed0">
                反向迭代器指向刚超出受控序列的开头。
                 因此，它指定 <paramref name="end" /> 反向序列。
                 用于获取指定的迭代器 <paramref name="current" /> 按相反的顺序的受控序列的末尾。
                 如果受控序列的长度发生更改，可以更改其状态。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.size">
      <summary>
              对容器中的元素数进行计数。
            </summary>
      <returns>
              受控序列的长度。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.swap(Microsoft.VisualC.StlClr.ITree{`0,`1})">
      <summary>
              交换两个容器的内容。
            </summary>
      <param name="_Right">
                要交换的内容与其容器。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.upper_bound(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)">
      <summary>
              查找与指定的键匹配的元素范围的末尾。
            </summary>
      <param name="__unnamed0">
                指定为相同的存储桶进行哈希处理的控制序列中的最后一个元素之外的第一个元素的迭代器 <paramref name="_Keyval" /> 和具有等效顺序到 <paramref name="_Keyval" />。
                 如果此类元素不存在，它将返回 <see cref="M:Microsoft.VisualC.StlClr.ITree`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />。
              </param>
      <param name="_Keyval">
                要搜索的密钥值。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.value_comp">
      <summary>
              返回用于排序的受控的序列的排序委托。
            </summary>
      <returns>
              用于排序的受控的序列的排序委托。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              用给定的迭代器之间的元素替换与容器中的所有元素。
            </summary>
      <param name="_First">
                要插入的元素范围的开始位置。
              </param>
      <param name="_Last">
                要插入的元素范围的末尾之外的第一个位置。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.assign(System.Collections.IEnumerable)">
      <summary>
              指定枚举中的元素替换与容器中的所有元素。
            </summary>
      <param name="_Right">
                其元素是要插入到容器中的枚举。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.assign(System.Int32,`0)">
      <summary>
              与容器中的所有元素都替换指定具有给定值的元素数。
            </summary>
      <param name="_Count">
                要插入到容器的元素数。
              </param>
      <param name="_Val">
                要插入的元素的值。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.at(System.Int32)">
      <summary>
              访问容器中的指定位置处的元素。
            </summary>
      <param name="_Pos">
                要访问的元素的位置。
              </param>
      <returns>
              位置处的受控序列的元素 <paramref name="_Pos" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.back">
      <summary>
              访问该容器的最后一个元素。
            </summary>
      <returns>
              必须为非空的受控序列的最后一个元素。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)">
      <summary>
              指定受控序列的开头。
            </summary>
      <param name="__unnamed0">
                指定受控序列，或刚超出空序列的末尾的第一个元素的随机访问迭代器。
                 用于获取指定的迭代器 <paramref name="current" /> 如果受控序列的长度发生更改，可以更改开始受控的序列，而其状态。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.capacity">
      <summary>
              报告已分配存储容器的大小。
            </summary>
      <returns>
              当前分配用于保存受控的序列的值至少为最大的存储 <see cref="M:Microsoft.VisualC.StlClr.IVector`1.size" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.clear">
      <summary>
              从容器中移除所有元素。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.empty">
      <summary>
              测试是否容器不包含任何元素。
            </summary>
      <returns>
              <see langword="true" /> 如果容器不包含任何元素;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)">
      <summary>
              指定受控序列的末尾。
            </summary>
      <param name="__unnamed0">
                一个随机访问迭代器指向刚超出受控序列的末尾。
                 用于获取指定的迭代器 <paramref name="current" /> 如果受控序列的长度发生更改，可以更改受控制的序列，但其状态的结尾。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <summary>
              删除所指向的受控序列的单个元素 <paramref name="_Where" />。
            </summary>
      <param name="__unnamed0">
                指定之外任何剩余的第一个元素的迭代器已移除的元素，或 <see cref="M:Microsoft.VisualC.StlClr.IVector`1.end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)" /> 如果此类元素不存在。
              </param>
      <param name="_Where">
                要移除的元素的位置。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <summary>
              受控序列的元素范围内移除 [<paramref name="_First_iter" />, <paramref name="_Last_iter" />)。
            </summary>
      <param name="__unnamed0">
                指定之外任何剩余的第一个元素的迭代器已移除的元素，或 <see cref="M:Microsoft.VisualC.StlClr.IVector`1.end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)" /> 如果此类元素不存在。
              </param>
      <param name="_First_iter">
                要清除的元素范围的起始处。
              </param>
      <param name="_Last_iter">
                要清除的元素范围之外的第一个位置。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.front">
      <summary>
              访问该容器的第一个元素。
            </summary>
      <returns>
              必须为非空的受控序列的第一个元素。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.get_generation">
      <summary>
              获取当前的更改生成的基础容器。
            </summary>
      <returns>
              当前更改基础容器的代次。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,`0)">
      <summary>
              将指定的值插入到容器。
            </summary>
      <param name="__unnamed0">
                一个指定新插入的元素的迭代器。
              </param>
      <param name="_Where">
                在其前面进行插入的容器中的位置。
              </param>
      <param name="_Val">
                要插入到容器的元素的值。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>
              将插入序列开头的 <paramref name="_First" /> ，上述元素结束 <paramref name="_Last" /> 到容器。
            </summary>
      <param name="_Where">
                在其前面进行插入的容器中的位置。
              </param>
      <param name="_First">
                要插入到容器的范围的开始位置。
              </param>
      <param name="_Last">
                要插入到容器的范围之外的第一个位置。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Collections.IEnumerable)">
      <summary>
              将插入到容器指定枚举器的序列。
            </summary>
      <param name="_Where_iter">
                在其前面进行插入的容器中的位置。
              </param>
      <param name="_Right">
                若要插入到容器中的枚举。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Int32,`0)">
      <summary>
              将指定的数量的给定的元素插入到容器。
            </summary>
      <param name="_Where">
                在其前面进行插入的容器中的位置。
              </param>
      <param name="_Count">
                要插入到容器的元素数。
              </param>
      <param name="_Val">
                要插入到容器的元素的值。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.pop_back">
      <summary>
              从容器中移除最后一个元素。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.push_back(`0)">
      <summary>
              将新元素添加到容器末尾。
            </summary>
      <param name="_Val">
                要插入到容器的元素的值。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)">
      <summary>
              指定反向受控序列的开头。
            </summary>
      <param name="__unnamed0">
                指定受控序列，或刚超出空序列的开头的最后一个元素的反向迭代器。
                 因此，它指定 <paramref name="beginning" /> 反向序列。
                 用于获取指定的迭代器 <paramref name="current" /> 如果受控序列的长度发生更改，可以更改按逆序的受控的序列，但其状态的开头。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)">
      <summary>
              指定反向受控序列的末尾。
            </summary>
      <param name="__unnamed0">
                反向迭代器指向刚超出受控序列的开头。
                 因此，它指定 <paramref name="end" /> 反向序列。
                 用于获取指定的迭代器 <paramref name="current" /> 如果受控序列的长度发生更改，可以更改按逆序的受控的序列，但其状态的结尾。
              </param>
      <returns>
              迭代器。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.reserve(System.Int32)">
      <summary>
              保留存储空间来确保容器的最小增长容量。
            </summary>
      <param name="_Capacity">
                容器的新的最小容量。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.resize(System.Int32)">
      <summary>
              容器中的元素数更改为指定的大小。
            </summary>
      <param name="_Newsize">
                受控序列的新大小。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.resize(System.Int32,`0)">
      <summary>
              容器中的元素数更改为指定的大小。
               如果新的大小大于旧大小，该方法将具有值的元素追加 <paramref name="_Val" />。
            </summary>
      <param name="_Newsize">
                受控序列的新大小。
              </param>
      <param name="_Val">
                要插入的元素的值。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.size">
      <summary>
              对容器中的元素数进行计数。
            </summary>
      <returns>
              受控序列的长度。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.swap(Microsoft.VisualC.StlClr.IVector{`0})">
      <summary>
              交换两个容器的内容。
            </summary>
      <param name="A_0">
                要与其交换内容的容器。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ListEnumerator`1.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`0})">
      <summary>
              分配并初始化一个新 <see cref="T:Microsoft.VisualC.StlClr.ListEnumerator`1" /> 对象。
            </summary>
      <param name="_First">
                要对其进行循环访问容器中的第一个节点。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ListEnumerator`1.Dispose">
      <summary>
              释放或释放，将重置非托管的资源，通过使用 <see cref="T:Microsoft.VisualC.StlClr.ListEnumerator`1" /> 对象。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ListEnumerator`1.Dispose(System.Boolean)">
      <summary>
              释放或重置 <see cref="T:Microsoft.VisualC.StlClr.ListEnumerator`1" /> 对象使用的非托管资源。
            </summary>
      <param name="A_0">
                释放托管对象为 <see langword="true" />；释放非托管对象为 <see langword="false" />。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ListEnumerator`1.MoveNext">
      <summary>
              将枚举数推进到集合中的下一个元素。
            </summary>
      <returns>
              如果枚举数已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举数传递到集合的末尾，则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ListEnumerator`1.Reset">
      <summary>
              将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ListEnumeratorBase`1.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`0})">
      <summary>
              分配并初始化一个新 <see cref="T:Microsoft.VisualC.StlClr.ListEnumeratorBase`1" /> 对象。
            </summary>
      <param name="_First">
                要对其进行循环访问容器中的第一个节点。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ListEnumeratorBase`1.MoveNext">
      <summary>
              将枚举数推进到集合中的下一个元素。
            </summary>
      <returns>
              如果枚举数已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举数传递到集合的末尾，则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ListEnumeratorBase`1.Reset">
      <summary>
              将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.TreeEnumerator`2.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`1})">
      <summary>
              分配并初始化一个新 <see cref="T:Microsoft.VisualC.StlClr.TreeEnumerator`2" /> 对象。
            </summary>
      <param name="_First">
                要对其进行循环访问容器中的第一个节点。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.TreeEnumerator`2.Dispose">
      <summary>
              释放或释放，将重置非托管的资源，通过使用 <see cref="T:Microsoft.VisualC.StlClr.TreeEnumerator`2" /> 对象。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.TreeEnumerator`2.Dispose(System.Boolean)">
      <summary>
              释放或重置 <see cref="T:Microsoft.VisualC.StlClr.TreeEnumerator`2" /> 对象使用的非托管资源。
            </summary>
      <param name="A_0">
                释放托管对象为 <see langword="true" />；释放非托管对象为 <see langword="false" />。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.TreeEnumerator`2.MoveNext">
      <summary>
              将枚举数推进到集合中的下一个元素。
            </summary>
      <returns>
              如果枚举数已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举数传递到集合的末尾，则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.TreeEnumerator`2.Reset">
      <summary>
              将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`1})">
      <summary>
              分配并初始化一个新 <see cref="T:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2" /> 对象。
            </summary>
      <param name="_First">
                要对其进行循环访问容器中的第一个节点。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2.MoveNext">
      <summary>
              将枚举数推进到集合中的下一个元素。
            </summary>
      <returns>
              如果枚举数已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举数传递到集合的末尾，则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2.Reset">
      <summary>
              将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.VectorEnumerator`1.#ctor(Microsoft.VisualC.StlClr.IVector{`0},System.Int32)">
      <summary>
              分配并初始化一个新 <see cref="T:Microsoft.VisualC.StlClr.VectorEnumerator`1" /> 对象。
            </summary>
      <param name="_Cont">
                要对其进行循环访问的容器。
              </param>
      <param name="_First">
                当前的第一个元素的容器中的偏移量。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.VectorEnumerator`1.Dispose">
      <summary>
              释放或释放，将重置非托管的资源，通过使用 <see cref="T:Microsoft.VisualC.StlClr.VectorEnumerator`1" /> 对象。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.VectorEnumerator`1.Dispose(System.Boolean)">
      <summary>
              释放或重置 <see cref="T:Microsoft.VisualC.StlClr.VectorEnumerator`1" /> 对象使用的非托管资源。
            </summary>
      <param name="A_0">
                释放托管对象为 <see langword="true" />；释放非托管对象为 <see langword="false" />。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.VectorEnumerator`1.MoveNext">
      <summary>
              将枚举数推进到集合中的下一个元素。
            </summary>
      <returns>
              如果枚举数已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举数传递到集合的末尾，则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.VectorEnumerator`1.Reset">
      <summary>
              将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。
            </summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1.#ctor(Microsoft.VisualC.StlClr.IVector{`0},System.Int32)">
      <summary>
              分配并初始化一个新 <see cref="T:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1" /> 对象。
            </summary>
      <param name="_Cont">
                要对其进行循环访问的容器。
              </param>
      <param name="_First">
                当前的第一个元素的容器中的偏移量。
              </param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1.MoveNext">
      <summary>
              将枚举数推进到集合中的下一个元素。
            </summary>
      <returns>
              如果枚举数已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举数传递到集合的末尾，则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1.Reset">
      <summary>
              将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。
            </summary>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.DequeEnumerator`1.Current">
      <summary>
              获取或设置集合中的当前元素。
            </summary>
      <returns>
              集合中的当前元素。
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1.Current">
      <summary>
              获取或设置集合中的当前元素。
            </summary>
      <returns>
              集合中的当前元素。
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.Item(System.Int32)">
      <summary>
              访问容器中的指定位置处的元素。
            </summary>
      <param name="_Pos">
                要访问的元素的位置。
              </param>
      <returns>
              在容器中的指定位置处的元素。
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.Item(System.Int32)">
      <summary>
              访问容器中的指定位置处的元素。
            </summary>
      <param name="_Pos">
                要访问的元素的位置。
              </param>
      <returns>
              在容器中的指定位置处的元素。
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.Item(System.Int32)">
      <summary>
              访问容器中的指定位置处的元素。
            </summary>
      <param name="_Pos">
                要访问的元素的位置。
              </param>
      <returns>
              在容器中的指定位置处的元素。
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.Generic.INode`1._Value">
      <summary>
              获取或设置此节点的元素的值的容器中。
            </summary>
      <returns>
              此节点的容器中元素的值。
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.Item(System.Int32)">
      <summary>
              访问容器中的指定位置处的元素。
            </summary>
      <param name="_Pos">
                要访问的元素的位置。
              </param>
      <returns>
              在容器中的指定位置处的元素。
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.HashEnumerator`2.Current">
      <summary>
              获取或设置集合中的当前元素。
            </summary>
      <returns>
              集合中的当前元素。
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.HashEnumeratorBase`2.Current">
      <summary>
              获取或设置集合中的当前元素。
            </summary>
      <returns>
              集合中的当前元素。
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.IDeque`1.back_item">
      <summary>
              访问非空的最后一个元素 deque 集合。
            </summary>
      <returns>
              受控序列的最后一个元素。
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.IDeque`1.front_item">
      <summary>
              访问非空的第一个元素 deque 集合。
            </summary>
      <returns>
              受控序列的第一个元素。
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.IDeque`1.Item(System.Int32)">
      <summary>
              获取或设置容器中的指定位置的元素。
            </summary>
      <param name="_Pos">
                要获取或设置元素的位置。
              </param>
      <returns>
              指定位置处的元素。
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.IList`1.back_item">
      <summary>
              访问该容器的最后一个元素。
            </summary>
      <returns>
              必须为非空的受控序列的最后一个元素。
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.IList`1.front_item">
      <summary>
              访问该容器的第一个元素。
            </summary>
      <returns>
              必须为非空的受控序列的第一个元素。
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.IPriorityQueue`2.top_item">
      <summary>
              访问该容器的优先级最高的元素。
            </summary>
      <returns>
              必须为非空的受控序列的顶部 （最高优先级） 元素。
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.IStack`2.top_item">
      <summary>
              访问该容器的最后一个元素。
            </summary>
      <returns>
              必须为非空的受控序列的最后一个元素。
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.IVector`1.back_item">
      <summary>
              访问该容器的最后一个元素。
            </summary>
      <returns>
              必须为非空的受控序列的最后一个元素。
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.IVector`1.front_item">
      <summary>
              访问该容器的第一个元素。
            </summary>
      <returns>
              必须为非空的受控序列的第一个元素。
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.IVector`1.Item(System.Int32)">
      <summary>
              访问容器中的指定位置处的元素。
            </summary>
      <param name="_Pos">
                要访问的元素的位置。
              </param>
      <returns>
              位置处的元素 <paramref name="_Pos" />。
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.ListEnumerator`1.Current">
      <summary>
              获取或设置集合中的当前元素。
            </summary>
      <returns>
              集合中的当前元素。
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.ListEnumeratorBase`1.Current">
      <summary>
              获取或设置集合中的当前元素。
            </summary>
      <returns>
              集合中的当前元素。
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.TreeEnumerator`2.Current">
      <summary>
              获取或设置集合中的当前元素。
            </summary>
      <returns>
              集合中的当前元素。
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2.Current">
      <summary>
              获取或设置集合中的当前元素。
            </summary>
      <returns>
              集合中的当前元素。
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.VectorEnumerator`1.Current">
      <summary>
              获取或设置集合中的当前元素。
            </summary>
      <returns>
              集合中的当前元素。
            </returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1.Current">
      <summary>
              获取或设置集合中的当前元素。
            </summary>
      <returns>
              集合中的当前元素。
            </returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.BinaryDelegate`3">
      <summary>
              描述双参数委托。
               使用它来指定委托的参数和返回类型。
            </summary>
      <param name="A_0">
                第一个参数。
              </param>
      <param name="A_1">
                第二个参数。
              </param>
      <typeparam name="TArg1">
                第一个委托参数。
              </typeparam>
      <typeparam name="TArg2">
                第二个委托参数。
              </typeparam>
      <typeparam name="TResult">
                委托的返回类型。
              </typeparam>
      <returns>
              委托的返回类型。
            </returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.DequeEnumerator`1">
      <summary>
              支持对实现 <see cref="T:Microsoft.VisualC.StlClr.IDeque`1" /> 接口的任何 STL/CLR 对象执行简单迭代。
            </summary>
      <typeparam name="TValue">
                
      受控序列中的元素的类型。
    
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1">
      <summary>
              支持通过实现任何 STL/CLR 对象的简单迭代 <see cref="T:Microsoft.VisualC.StlClr.IDeque`1" /> 接口。
            </summary>
      <typeparam name="TValue">
                
      受控序列中的元素的类型。
    
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1">
      <summary>
              定义一个迭代器，它可以通过使用增量运算符正向访问容器中的元素，也可以通过使用减量运算符后向访问容器中的元素。
               无法修改迭代器指向的元素。
               双向迭代器可用于任何需要常数输入或常数输出迭代器的情况。
            </summary>
      <typeparam name="TValue">
                
      受控序列中的元素的类型。
    
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1">
      <summary>
              提供了一个迭代器，支持以下操作︰ 向前移动一个位置通过调用 operator++, ，向后移动一个位置通过调用 operator--, ，通过使用 operator[], ，访问一个元素和通过使用指针算法。
               不能修改由迭代器指向的元素。
            </summary>
      <typeparam name="TValue">
                
      受控序列中的元素的类型。
    
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1">
      <summary>
              定义访问按反向执行容器的元素的迭代器。
               可以被访问元素的向前方向借助减量运算符和在向后方向使用递增运算符。
               不能修改迭代器指向的元素。
               常量反向输入或常量反向输出迭代器要求，可以任意位置使用常量反向双向迭代器。
            </summary>
      <typeparam name="TValue">
                
      受控序列中的元素的类型。
    
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1">
      <summary>
              提供了一个迭代器，支持以下操作︰ 向前移动一个位置通过调用 operator--, ，向后移动一个位置通过调用 operator++, ，通过使用 operator[], ，访问一个元素和通过使用指针算法。
               不能修改由迭代器访问的元素。
            </summary>
      <typeparam name="TValue">
                
      受控序列中的元素的类型。
    
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1">
      <summary>
              定义一个迭代器，可以访问容器中的向前方向的元素使用递增运算符和在向后方向使用递减运算符。
               迭代器指向的元素可以进行写入和读取任意次数。
               无论输入或输出迭代器是必需，均可以使用双向迭代器。
            </summary>
      <typeparam name="TValue">
                
      受控序列中的元素的类型。
    
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1">
      <summary>
              提供了一个迭代器，支持以下操作︰ 向前移动一个位置通过调用 operator++, ，向后移动一个位置通过调用 operator--, ，通过使用 operator[], ，访问一个元素和通过使用指针算法。
            </summary>
      <typeparam name="TValue">
                
      受控序列中的元素的类型。
    
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1">
      <summary>
              定义所有 STL/CLR 迭代器的基接口。
            </summary>
      <typeparam name="TValue">
                
      受控序列中的元素的类型。
    
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer`1">
      <summary>
              支持向前和向后遍历的容器接口。
               实现双向迭代容器支持以下操作︰ 向前移动一个位置通过调用 operator++, ，并向后移动一个位置通过调用 operator--。
            </summary>
      <typeparam name="TValue">
                
      受控序列中的元素的类型。
    
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1">
      <summary>
              可以通过访问元素容器中的向前方向使用递增运算符和在向后方向使用递减运算符的迭代器的接口。
               迭代器指向的元素可以进行写入和读取任意次数。
               可以使用双向迭代器的输入或输出迭代器是必需的任意位置。
            </summary>
      <typeparam name="TValue">
                
      受控序列中的元素的类型。
    
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.IForwardIterator`1">
      <summary>
              可以使用递增运算符访问仅中向前方向的容器中的元素的迭代器的接口。
               迭代器指向的元素可以进行写入和读取任意次数。
               可以使用前向迭代器的输入或输出迭代器是必需的任意位置。
            </summary>
      <typeparam name="TValue">
                
      受控序列中的元素的类型。
    
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1">
      <summary>
              用于从容器中的向前方向只读取一个序列的迭代器的接口。
               迭代器指向的元素可以只能读取一次，并不能对其进行修改。
            </summary>
      <typeparam name="TValue">
                
      受控序列中的元素的类型。
    
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.INode`1">
      <summary>
              节点的数据结构的接口。
               支持双向迭代的容器包含的节点。
               节点由容器和指向下一页和上一页元素中的容器中的该位置处的元素的值组成。
            </summary>
      <typeparam name="TValue">
                
      受控序列中的元素的类型。
    
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.IOutputIterator`1">
      <summary>
              用于向仅中向前方向的容器中写入一个序列的迭代器的接口。
               迭代器指向的元素可写入一次。
            </summary>
      <typeparam name="TValue">
                
      受控序列中的元素的类型。
    
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1">
      <summary>
              支持随机访问迭代的容器接口。
               实现随机访问迭代的容器支持以下操作︰ 向前移动一个位置通过调用 operator++, ，向后移动一个位置通过调用 operator--, ，通过使用 operator[], ，访问一个元素和通过使用指针算法。
            </summary>
      <typeparam name="TValue">
                
      受控序列中的元素的类型。
    
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1">
      <summary>
              随机访问迭代器中定义的接口。
               随机访问迭代器支持以下操作︰ 向前移动一个位置通过调用 operator++, ，向后移动一个位置通过调用 operator--, ，通过使用 operator[], ，访问一个元素和通过使用指针算法。
            </summary>
      <typeparam name="TValue">
                
      受控序列中的元素的类型。
    
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1">
      <summary>
              定义访问按反向执行容器的元素的迭代器。
               可以被访问元素的向前方向借助减量运算符和在向后方向使用递增运算符。
               迭代器指向的元素可以进行写入和读取任意次数。
               无论是需要反向输入或反向输出迭代器，均可以使用反向双向迭代器。
            </summary>
      <typeparam name="TValue">
                
      受控序列中的元素的类型。
    
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1">
      <summary>
              提供了一个迭代器，支持以下操作︰ 向前移动一个位置通过调用 operator--, ，向后移动一个位置通过调用 operator++, ，通过使用 operator[], ，访问一个元素和通过使用指针算法。
            </summary>
      <typeparam name="TValue">
                
      受控序列中的元素的类型。
    
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.GenericPair`2">
      <summary>
              描述包装的一对值的对象。
            </summary>
      <typeparam name="TValue1">
                对中的第一个值的类型。
              </typeparam>
      <typeparam name="TValue2">
                对中的第二个值的类型。
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.HashEnumerator`2">
      <summary>
              支持通过实现任何 STL/CLR 对象的简单迭代 <see cref="T:Microsoft.VisualC.StlClr.IHash`2" /> 接口。
            </summary>
      <typeparam name="TKey">
                哈希迭代器键的类型。
              </typeparam>
      <typeparam name="TValue">
                哈希迭代器值的类型。
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.HashEnumeratorBase`2">
      <summary>
              支持通过实现任何 STL/CLR 对象的简单迭代 <see cref="T:Microsoft.VisualC.StlClr.IHash`2" /> 接口。
            </summary>
      <typeparam name="TKey">
                哈希迭代器键的类型。
              </typeparam>
      <typeparam name="TValue">
                哈希迭代器值的类型。
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.IDeque`1">
      <summary>
              定义的 STL/CLR 接口 deque 对象。
            </summary>
      <typeparam name="TValue">
                包含的类型。
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.IHash`2">
      <summary>
              定义的 STL/CLR 接口 hash_map, ，hash_multimap, ，hash_set, ，和 hash_multiset 对象。
            </summary>
      <typeparam name="TKey">
                受控序列中的元素的关键组件的类型。
              </typeparam>
      <typeparam name="TValue">
                受控序列中的元素的值组件的类型。
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.IList`1">
      <summary>
              定义 STL/CLR list 对象的接口。
            </summary>
      <typeparam name="TValue">
                list 元素的类型。
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.IPriorityQueue`2">
      <summary>
              定义 STL/CLR priority_queue 对象的接口。
            </summary>
      <typeparam name="TValue">
                受控序列中的元素的类型。
              </typeparam>
      <typeparam name="TCont">
                基础容器的类型。
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.IQueue`2">
      <summary>
              定义 STL/CLR queue 对象的接口。
            </summary>
      <typeparam name="TValue">
                受控序列中的元素的类型。
              </typeparam>
      <typeparam name="TCont">
                基础容器的类型。
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.IStack`2">
      <summary>
              定义 STL/CLR stack 对象的接口。
            </summary>
      <typeparam name="TValue">
                受控序列中的元素的类型。
              </typeparam>
      <typeparam name="TCont">
                基础容器的类型。
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.ITree`2">
      <summary>
              定义的 STL/CLR 接口 hash_map, ，hash_multimap, ，hash_set, ，和 hash_multiset 对象。
            </summary>
      <typeparam name="TKey">
                受控序列中的元素的关键组件的类型。
              </typeparam>
      <typeparam name="TValue">
                受控序列中的元素的值组件的类型。
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.IVector`1">
      <summary>
              定义 STL/CLR 向量对象的接口。
            </summary>
      <typeparam name="TValue">
                受控序列中的元素的类型。
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.ListEnumerator`1">
      <summary>
              支持通过实现任何 STL/CLR 对象的简单迭代 <see cref="T:Microsoft.VisualC.StlClr.IList`1" /> 接口。
            </summary>
      <typeparam name="TValue">
                受控序列中的元素的类型。
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.ListEnumeratorBase`1">
      <summary>
              支持通过实现任何 STL/CLR 对象的简单迭代 <see cref="T:Microsoft.VisualC.StlClr.IList`1" /> 接口。
            </summary>
      <typeparam name="TValue">
                受控序列中的元素的类型。
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.TreeEnumerator`2">
      <summary>
              支持通过实现任何 STL/CLR 对象的简单迭代 <see cref="T:Microsoft.VisualC.StlClr.ITree`2" /> 接口。
            </summary>
      <typeparam name="TKey">
                受控序列中的元素的关键组件的类型。
              </typeparam>
      <typeparam name="TValue">
                受控序列中的元素的值组件的类型。
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2">
      <summary>
              支持通过实现任何 STL/CLR 对象的简单迭代 <see cref="T:Microsoft.VisualC.StlClr.ITree`2" /> 接口。
            </summary>
      <typeparam name="TKey">
                受控序列中的元素的关键组件的类型。
              </typeparam>
      <typeparam name="TValue">
                受控序列中的元素的值组件的类型。
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.UnaryDelegate`2">
      <summary>
              描述单参数委托。
               使用它来指定委托的参数和返回类型。
            </summary>
      <param name="A_0">
                委托参数。
              </param>
      <typeparam name="TArg">
                参数的类型。
              </typeparam>
      <typeparam name="TResult">
                委托的返回类型。
              </typeparam>
      <returns>
              委托的返回类型。
            </returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.VectorEnumerator`1">
      <summary>
              支持通过实现任何 STL/CLR 对象的简单迭代 <see cref="T:Microsoft.VisualC.StlClr.IVector`1" /> 接口。
            </summary>
      <typeparam name="TValue">
                受控序列中的元素的类型。
              </typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1">
      <summary>
              支持通过实现任何 STL/CLR 对象的简单迭代 <see cref="T:Microsoft.VisualC.StlClr.IVector`1" /> 接口。
            </summary>
      <typeparam name="TValue">
                受控序列中的元素的类型。
              </typeparam>
    </member>
  </members>
</doc>