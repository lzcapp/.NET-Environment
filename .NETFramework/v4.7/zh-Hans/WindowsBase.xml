<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>WindowsBase</name>
  </assembly>
  <members>
    <member name="E:System.ComponentModel.GroupDescription.PropertyChanged">
      <summary>
              在属性值更改时发生。
            </summary>
    </member>
    <member name="E:System.ComponentModel.GroupDescription.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>
              在属性值更改时发生。
            </summary>
    </member>
    <member name="E:System.ComponentModel.ICollectionView.CurrentChanged">
      <summary>
              在实现此接口时，在当前项改变之后引发此事件。
            </summary>
    </member>
    <member name="E:System.ComponentModel.ICollectionView.CurrentChanging">
      <summary>
              在实现此接口时，在改变当前项前引发此事件。
               事件处理程序可以取消此事件。
            </summary>
    </member>
    <member name="E:System.ComponentModel.SortDescriptionCollection.CollectionChanged">
      <summary>
              添加或删除项时发生。
            </summary>
    </member>
    <member name="E:System.ComponentModel.SortDescriptionCollection.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
      <summary>
              添加或删除项时发生。
            </summary>
    </member>
    <member name="E:System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent">
      <summary>
              发生时 <see cref="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)" /> 遇到无效的签名。
            </summary>
    </member>
    <member name="E:System.Windows.Data.DataSourceProvider.DataChanged">
      <summary>
              发生时 <see cref="P:System.Windows.Data.DataSourceProvider.Data" /> 属性具有新值。
            </summary>
    </member>
    <member name="E:System.Windows.Data.DataSourceProvider.PropertyChanged">
      <summary>
              在属性值更改时发生。
            </summary>
    </member>
    <member name="E:System.Windows.Data.DataSourceProvider.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>
              在属性值更改时发生。
            </summary>
    </member>
    <member name="E:System.Windows.Freezable.Changed">
      <summary>
              发生时 <see cref="T:System.Windows.Freezable" /> 或修改其包含的对象。
            </summary>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.EnterThreadModal">
      <summary>
              当线程变成模式线程时发生。
            </summary>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.LeaveThreadModal">
      <summary>
              当模式线程变成非模式线程时发生。
            </summary>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage">
      <summary>
              当消息泵接收键盘消息时发生。
            </summary>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.ThreadIdle">
      <summary>
              当线程空闲时发生。
            </summary>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage">
      <summary>
              当消息泵接收键盘消息时发生。
            </summary>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.ShutdownFinished">
      <summary>
              发生时 <see cref="T:System.Windows.Threading.Dispatcher" /> 完成关闭。
            </summary>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.ShutdownStarted">
      <summary>
              发生时 <see cref="T:System.Windows.Threading.Dispatcher" /> 开始关闭。
            </summary>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.UnhandledException">
      <summary>
              引发并通过委托执行期间未捕获线程异常时发生 <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> 或 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />。
            </summary>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter">
      <summary>
              引发并通过委托执行期间未捕获线程异常时发生 <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> 或 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 中的筛选器阶段时。
            </summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.DispatcherInactive">
      <summary>
              当调度程序都有没有更多操作来处理时发生。
            </summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationAborted">
      <summary>
              操作中止时发生。
            </summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationCompleted">
      <summary>
              当操作完成时发生。
            </summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationPosted">
      <summary>
              将操作发布到调度程序时发生。
            </summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationPriorityChanged">
      <summary>
              当某项操作的优先级更改时发生。
            </summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationStarted">
      <summary>
              当调用操作时出现。
            </summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherOperation.Aborted">
      <summary>
              操作中止时发生。
            </summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherOperation.Completed">
      <summary>
              操作完成时发生。
            </summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherTimer.Tick">
      <summary>
              计时器间隔已过去时发生。
            </summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterAttribute.Default">
      <summary>
              此成员支持 Microsoft .NET Framework 基础结构，但不能在代码中直接使用。
            </summary>
    </member>
    <member name="F:System.ComponentModel.SortDescriptionCollection.Empty">
      <summary>
              获取 <see cref="T:System.ComponentModel.SortDescriptionCollection" /> 的不可更改的空实例。
            </summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceSources.TraceLevelProperty">
      <summary>
              标识 <see cref="P:System.Diagnostics.PresentationTraceSources.TraceLevel" /> 附加属性。
            </summary>
    </member>
    <member name="F:System.IO.Packaging.PackUriHelper.UriSchemePack">
      <summary>
              定义 pack URI 方案名称“pack”。
            </summary>
      <returns>
              pack URI 方案名称字符串“pack”。
            </returns>
    </member>
    <member name="F:System.Windows.DependencyProperty.UnsetValue">
      <summary>
              指定静态值，它由 WPF 属性系统而不是 <see langword="null" /> 以指示该属性存在，但不具有属性系统设置其值。
            </summary>
      <returns>
              未设置的值。
               这实际上是对的调用结果 <see cref="T:System.Object" /> 构造函数。
            </returns>
    </member>
    <member name="F:System.Windows.NameScope.NameScopeProperty">
      <summary>
              标识 <see cref="P:System.Windows.NameScope.NameScope" /> 附加属性。
            </summary>
      <returns>
              <see cref="P:System.Windows.NameScope.NameScope" /> 附加属性的标识符。
            </returns>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.AddHandler(System.Collections.Specialized.INotifyCollectionChanged,System.EventHandler{System.Collections.Specialized.NotifyCollectionChangedEventArgs})">
      <summary>
              添加指定的事件处理程序，它在指定的源引发时调用 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 事件。
            </summary>
      <param name="source">
                源对象引发 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 事件。
              </param>
      <param name="handler">
                处理的委托 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 事件。
              </param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.AddListener(System.Collections.Specialized.INotifyCollectionChanged,System.Windows.IWeakEventListener)">
      <summary>
              指定将侦听器添加到 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 指定源的事件。
            </summary>
      <param name="source">
                与事件对象。
              </param>
      <param name="listener">
                要作为侦听器添加的对象。
              </param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.NewListenerList">
      <summary>
              返回一个新的对象，以包含侦听器 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 事件。
            </summary>
      <returns>
              新的对象，以包含侦听器 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 事件。
            </returns>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.RemoveHandler(System.Collections.Specialized.INotifyCollectionChanged,System.EventHandler{System.Collections.Specialized.NotifyCollectionChangedEventArgs})">
      <summary>
              从指定的源中删除指定的事件处理程序。
            </summary>
      <param name="source">
                源对象引发 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 事件。
              </param>
      <param name="handler">
                处理的委托 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 事件。
              </param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.RemoveListener(System.Collections.Specialized.INotifyCollectionChanged,System.Windows.IWeakEventListener)">
      <summary>
              删除指定的侦听器从 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 指定源的事件。
            </summary>
      <param name="source">
                与事件对象。
              </param>
      <param name="listener">
                要移除的侦听器。
              </param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.StartListening(System.Object)">
      <summary>
              开始侦听 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 上指定的源的事件。
            </summary>
      <param name="source">
                与事件对象。
              </param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.StopListening(System.Object)">
      <summary>
              停止侦听 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 上指定的源的事件。
            </summary>
      <param name="source">
                与事件对象。
              </param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.AddHandler(System.ComponentModel.ICollectionView,System.EventHandler{System.EventArgs})">
      <summary>
              添加指定的事件处理程序，它在指定的源引发时调用 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 事件。
            </summary>
      <param name="source">
                源对象引发 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 事件。
              </param>
      <param name="handler">
                源对象引发 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 事件。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="handler" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.AddListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary>
              指定将侦听器添加到 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 指定源的事件。
            </summary>
      <param name="source">
                与事件对象。
              </param>
      <param name="listener">
                要作为侦听器添加的对象。
              </param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.NewListenerList">
      <summary>
              返回一个新的对象，以包含侦听器 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 事件。
            </summary>
      <returns>
              新的对象，以包含侦听器 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 事件。
            </returns>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.RemoveHandler(System.ComponentModel.ICollectionView,System.EventHandler{System.EventArgs})">
      <summary>
              从指定的源中删除指定的事件处理程序。
            </summary>
      <param name="source">
                源对象引发 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 事件。
              </param>
      <param name="handler">
                处理的委托 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 事件。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="handler" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.RemoveListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary>
              删除指定的侦听器从 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 指定源的事件。
            </summary>
      <param name="source">
                与事件对象。
              </param>
      <param name="listener">
                要移除的侦听器。
              </param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.StartListening(System.Object)">
      <summary>
              开始侦听 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 上指定的源的事件。
            </summary>
      <param name="source">
                与事件对象。
              </param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.StopListening(System.Object)">
      <summary>
              停止侦听 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 上指定的源的事件。
            </summary>
      <param name="source">
                与事件对象。
              </param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventArgs.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.CurrentChangingEventArgs" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventArgs.#ctor(System.Boolean)">
      <summary>
              使用指定的 <paramref name="isCancelable" /> 值初始化 <see cref="T:System.ComponentModel.CurrentChangingEventArgs" /> 类的新实例。
            </summary>
      <param name="isCancelable">
                指示是否可取消事件的值。
              </param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.AddHandler(System.ComponentModel.ICollectionView,System.EventHandler{System.ComponentModel.CurrentChangingEventArgs})">
      <summary>
              添加指定的事件处理程序，它在指定的源引发时调用 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 事件。
            </summary>
      <param name="source">
                源对象引发 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 事件。
              </param>
      <param name="handler">
                处理的委托 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 事件。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="handler" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.AddListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary>
              指定将侦听器添加到 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 指定源的事件。
            </summary>
      <param name="source">
                与事件对象。
              </param>
      <param name="listener">
                要作为侦听器添加的对象。
              </param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.NewListenerList">
      <summary>
              返回一个新的对象，以包含侦听器 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 事件。
            </summary>
      <returns>
              新的对象，以包含侦听器 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 事件。
            </returns>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.RemoveHandler(System.ComponentModel.ICollectionView,System.EventHandler{System.ComponentModel.CurrentChangingEventArgs})">
      <summary>
              从指定的源中删除指定的事件处理程序。
            </summary>
      <param name="source">
                源对象引发 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 事件。
              </param>
      <param name="handler">
                处理的委托 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 事件。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="handler" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.RemoveListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary>
              删除指定的侦听器从 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 指定源的事件。
            </summary>
      <param name="source">
                与事件对象。
              </param>
      <param name="listener">
                要移除的侦听器。
              </param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.StartListening(System.Object)">
      <summary>
              开始侦听 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 上指定的源的事件。
            </summary>
      <param name="source">
                与事件对象。
              </param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.StopListening(System.Object)">
      <summary>
              停止侦听 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 上指定的源的事件。
            </summary>
      <param name="source">
                与事件对象。
              </param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)">
      <summary>
              支持此属性更改时得到通知其他对象。
            </summary>
      <param name="component">
                要添加的处理程序的组件。
              </param>
      <param name="handler">
                要作为侦听器添加的委托。
              </param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.CanResetValue(System.Object)">
      <summary>
              返回是否会重置对象更改它的值。
            </summary>
      <param name="component">
                要测试其重置功能的组件。
              </param>
      <returns>
              <see langword="true" /> 如果重置组件，更改其值;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.Equals(System.Object)">
      <summary>
              比较两个 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> 实例是否相等。
            </summary>
      <param name="obj">
                <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />  要与当前实例进行比较。
              </param>
      <returns>
              <see langword="true" /> 如果这些值是等效的;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromName(System.String,System.Type,System.Type)">
      <summary>
              为所提供的属性名称返回 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />。
            </summary>
      <param name="name">
                依赖属性或附加属性的已注册的名称。
              </param>
      <param name="ownerType">
                该对象的 <see cref="T:System.Type" />，它拥有属性定义。
              </param>
      <param name="targetType">
                要为其设置属性的对象的 <see cref="T:System.Type" />。
              </param>
      <returns>
              请求的 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromName(System.String,System.Type,System.Type,System.Boolean)">
      <summary>
              为所提供的属性名称返回 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />。
            </summary>
      <param name="name">
                依赖属性或附加属性的已注册的名称。
              </param>
      <param name="ownerType">
                该对象的 <see cref="T:System.Type" />，它拥有属性定义。
              </param>
      <param name="targetType">
                要为其设置属性的对象的 <see cref="T:System.Type" />。
              </param>
      <param name="ignorePropertyType">
                指定以忽略属性类型。
              </param>
      <returns>
              请求的 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromProperty(System.ComponentModel.PropertyDescriptor)">
      <summary>
              返回所提供的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />。
            </summary>
      <param name="property">
                要检查的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。
              </param>
      <returns>
              如果 <paramref name="property" /> 描述的属性为依赖属性，则返回有效 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />。
               否则返回 <see langword="null" /><see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromProperty(System.Windows.DependencyProperty,System.Type)">
      <summary>
              针对提供的依赖属性和目标类型返回 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />。
            </summary>
      <param name="dependencyProperty">
                依赖项属性的标识符。
              </param>
      <param name="targetType">
                在其中设置属性的对象的类型。
              </param>
      <returns>
              提供的依赖属性的 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])">
      <summary>
              返回 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。
            </summary>
      <param name="instance">
                要为其获取属性的组件。
              </param>
      <param name="filter">
                要用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。
              </param>
      <returns>
              具有与指定组件的指定属性相匹配的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetEditor(System.Type)">
      <summary>
              获取指定类型的编辑器。
            </summary>
      <param name="editorBaseType">
                编辑器，用于区分某个属性支持的多个编辑器的基类型。
              </param>
      <returns>
              请求的编辑器类型的实例或 <see langword="null" /> 如果找不到一个编辑器。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetHashCode">
      <summary>
              返回此 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> 的哈希代码。
            </summary>
      <returns>
              32 位有符号整数哈希代码。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetValue(System.Object)">
      <summary>
              返回在组件上的属性的当前值。
            </summary>
      <param name="component">
                组件实例。
              </param>
      <returns>
              请求的值。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)">
      <summary>
              支持此属性更改时得到通知其他对象。
            </summary>
      <param name="component">
                要添加的处理程序的组件。
              </param>
      <param name="handler">
                要作为侦听器添加的委托。
              </param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.ResetValue(System.Object)">
      <summary>
              将该组件的此属性的值重置为默认值。
            </summary>
      <param name="component">
                具有要重置为默认值的属性值的组件。
              </param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>
              将该组件的值设置为不同的值。
            </summary>
      <param name="component">
                要设置的属性值具有的组件。
              </param>
      <param name="value">
                新值。
              </param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>
              指示是否需要通过序列化过程中保留此属性的值。
            </summary>
      <param name="component">
                具有要检查其持久性的属性的组件。
              </param>
      <returns>
              <see langword="true" /> 如果应保留该属性;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.ToString">
      <summary>
              将此实例的值转换为其等效的字符串表示形式。
            </summary>
      <returns>
              返回 <see cref="P:System.ComponentModel.MemberDescriptor.Name" /> 值。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.AddHandler(System.ComponentModel.INotifyDataErrorInfo,System.EventHandler{System.ComponentModel.DataErrorsChangedEventArgs})">
      <summary>
              添加指定的事件处理程序，它在指定的源引发时调用 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 事件。
            </summary>
      <param name="source">
                引发的源对象 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 事件。
              </param>
      <param name="handler">
                处理的委托 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 事件。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="handler" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.NewListenerList">
      <summary>
              返回一个新的对象，以包含侦听器 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 事件。
            </summary>
      <returns>
              新的对象，以包含侦听器 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 事件。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.RemoveHandler(System.ComponentModel.INotifyDataErrorInfo,System.EventHandler{System.ComponentModel.DataErrorsChangedEventArgs})">
      <summary>
              从指定的源中删除指定的事件处理程序。
            </summary>
      <param name="source">
                引发的源对象 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 事件。
              </param>
      <param name="handler">
                处理的委托 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 事件。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="handler" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.StartListening(System.Object)">
      <summary>
              开始侦听 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 上指定的源的事件。
            </summary>
      <param name="source">
                引发的源对象 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 事件。
              </param>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.StopListening(System.Object)">
      <summary>
              停止侦听 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 上指定的源的事件。
            </summary>
      <param name="source">
                引发的源对象 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 事件。
              </param>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.GroupDescription" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.GroupNameFromItem(System.Object,System.Int32,System.Globalization.CultureInfo)">
      <summary>
              返回给定项的组名称。
            </summary>
      <param name="item">
                要返回其组名称的项。
              </param>
      <param name="level">
                分组级别。
              </param>
      <param name="culture">
                要提供给转换器的 <see cref="T:System.Globalization.CultureInfo" />。
              </param>
      <returns>
              给定项的组名称。
            </returns>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.NamesMatch(System.Object,System.Object)">
      <summary>
              返回一个值，该值指示组名称和项名称是否匹配，从而指示项是否属于组。
            </summary>
      <param name="groupName">
                要检查的组名称。
              </param>
      <param name="itemName">
                要检查的项名称。
              </param>
      <returns>
              如果名称匹配并且项属于组，则为 <see langword="true" />，否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
              引发 <see cref="E:System.ComponentModel.GroupDescription.PropertyChanged" /> 事件。
            </summary>
      <param name="e">
                要引发事件的自变量。
              </param>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.ShouldSerializeGroupNames">
      <summary>
              返回序列化进程是否应序列化此类的实例上 <see cref="P:System.ComponentModel.GroupDescription.GroupNames" /> 属性的有效值。
            </summary>
      <returns>
              如果应序列化 <see cref="P:System.ComponentModel.GroupDescription.GroupNames" /> 属性值，则返回 <see langword="true" />；否则返回 false。
            </returns>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.ShouldSerializeSortDescriptions">
      <summary>
              返回序列化进程是否应序列化此类的实例上 <see cref="P:System.ComponentModel.GroupDescription.SortDescriptions" /> 属性的有效值。
            </summary>
      <returns>
              如果应当序列化 <see cref="P:System.ComponentModel.GroupDescription.SortDescriptions" /> 属性值，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.Contains(System.Object)">
      <summary>
              返回一个值，该值指示给定项是否属于此集合视图。
            </summary>
      <param name="item">
                要检查的对象。
              </param>
      <returns>
              如果该项属于此集合视图，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.DeferRefresh">
      <summary>
              进入延迟循环，该循环可用于将更改合并到视图并延迟自动刷新。
            </summary>
      <returns>
              一个可用于释放调用对象的 <see cref="T:System.IDisposable" /> 对象。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentTo(System.Object)">
      <summary>
              将指定项设置为视图中的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />。
            </summary>
      <param name="item">
                要设置为 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 的项。
              </param>
      <returns>
              如果所生成的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 位于视图内，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToFirst">
      <summary>
              将视图中的第一项设置为 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />。
            </summary>
      <returns>
              如果所生成的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 是视图中的项，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToLast">
      <summary>
              将视图中的最后一项设置为 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />。
            </summary>
      <returns>
              如果所生成的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 是视图中的项，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToNext">
      <summary>
              将视图中位于 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 之后的项设置为 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />。
            </summary>
      <returns>
              如果所生成的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 是视图中的项，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToPosition(System.Int32)">
      <summary>
              将位于指定索引位置的项设置为视图中的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />。
            </summary>
      <param name="position">
                一个索引位置，位于该位置的项将设置为 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />。
              </param>
      <returns>
              如果所生成的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 是视图中的项，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToPrevious">
      <summary>
              将视图中位于 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 之前的项设置为 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />。
            </summary>
      <returns>
              如果所生成的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 是视图中的项，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.Refresh">
      <summary>
              重新创建该视图。
            </summary>
    </member>
    <member name="M:System.ComponentModel.ICollectionViewFactory.CreateView">
      <summary>
              创建新视图在实现此接口的集合。
               通常情况下，用户代码不会调用此方法。
            </summary>
      <returns>
              新创建的视图。
            </returns>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.AddNew">
      <summary>
              将新项添加到集合。
            </summary>
      <returns>
              添加到集合中的新项。
            </returns>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CancelEdit">
      <summary>
              结束编辑事务，并还原项的原始值（如有可能）。
            </summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CancelNew">
      <summary>
              结束添加事务并放弃挂起的新项。
            </summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CommitEdit">
      <summary>
              结束编辑事务并保存挂起的更改。
            </summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CommitNew">
      <summary>
              结束添加事务并保存挂起的新项。
            </summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.EditItem(System.Object)">
      <summary>
              开始指定项的编辑事务。
            </summary>
      <param name="item">
                要编辑的项。
              </param>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.Remove(System.Object)">
      <summary>
              从集合中移除指定的项。
            </summary>
      <param name="item">
                要移除的项。
              </param>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.RemoveAt(System.Int32)">
      <summary>
              从集合中删除指定位置的项。
            </summary>
      <param name="index">
                要移除的项的位置。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="index" /> 小于 0 或大于集合视图中的项数。
                </exception>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionViewAddNewItem.AddNewItem(System.Object)">
      <summary>
              将指定的对象添加到集合。
            </summary>
      <param name="newItem">
                要添加到集合中的对象。
              </param>
      <returns>
              添加到集合的对象。
            </returns>
    </member>
    <member name="M:System.ComponentModel.ItemPropertyInfo.#ctor(System.String,System.Type,System.Object)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.ItemPropertyInfo" /> 类的新实例。
            </summary>
      <param name="name">
                属性的名称。
              </param>
      <param name="type">
                属性的类型。
              </param>
      <param name="descriptor">
                包含有关属性的其他信息的对象。
              </param>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.AddHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)">
      <summary>
              添加指定的事件处理程序，它在指定的源引发时调用 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 指定属性的事件。
            </summary>
      <param name="source">
                源对象引发 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 事件。
              </param>
      <param name="handler">
                处理的委托 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 事件。
              </param>
      <param name="propertyName">
                存在的属性的名称 <paramref name="source" /> 所基于的侦听做的更改。
                 设置为 <see cref="F:System.String.Empty" /> 以指示"任何属性"。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="handler" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  多个方法相关联 <paramref name="handler" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.AddListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)">
      <summary>
              将指定的侦听器添加到指定的源上的侦听器的列表。
            </summary>
      <param name="source">
                与事件对象。
              </param>
      <param name="listener">
                要作为侦听器添加的对象。
              </param>
      <param name="propertyName">
                存在的属性的名称 <paramref name="source" /> 所基于的侦听做的更改。
                 设置为 <see cref="F:System.String.Empty" /> 以指示"任何属性"。
              </param>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.NewListenerList">
      <summary>
              返回一个新的对象，以包含侦听器 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 事件。
            </summary>
      <returns>
              新的对象，以包含侦听器 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 事件。
            </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.Purge(System.Object,System.Object,System.Boolean)">
      <summary>
              移除不再处于活动状态从提供的源的数据的侦听器。
            </summary>
      <param name="source">
                要从中移除所有侦听器的源对象。
              </param>
      <param name="data">
                要清除的数据。
                 这应为 <see cref="T:System.Collections.Specialized.HybridDictionary" />。
              </param>
      <param name="purgeAll">
                设置为 <see langword="true" /> 以停止侦听并完全移除所有数据。
              </param>
      <returns>
              <see langword="true" /> 如果某些条目被移除。否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.RemoveHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)">
      <summary>
              从指定的源中删除指定的事件处理程序。
            </summary>
      <param name="source">
                源对象引发 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 事件。
              </param>
      <param name="handler">
                处理的委托 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 事件。
              </param>
      <param name="propertyName">
                存在的属性的名称 <paramref name="source" /> 可停止侦听更改的依据。
                 设置为 <see cref="F:System.String.Empty" /> 以指示"任何属性"。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="handler" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  多个方法相关联 <paramref name="handler" />。
                </exception>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.RemoveListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)">
      <summary>
              从提供的源上的侦听器的列表中删除指定的侦听器。
            </summary>
      <param name="source">
                要从中移除侦听器的对象。
              </param>
      <param name="listener">
                要移除的侦听器。
              </param>
      <param name="propertyName">
                存在的属性的名称 <paramref name="source" /> 可停止侦听更改的依据。
                 设置为 <see cref="F:System.String.Empty" /> 以指示"任何属性"。
              </param>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.StartListening(System.Object)">
      <summary>
              开始侦听 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 上提供的源的事件。
            </summary>
      <param name="source">
                在其上开始侦听对象 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.StopListening(System.Object)">
      <summary>
              停止侦听 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 上提供的源的事件。
            </summary>
      <param name="source">
                源对象在其上停止侦听 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />。
              </param>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.#ctor(System.ComponentModel.PropertyFilterOptions)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> 类的新实例。
            </summary>
      <param name="filter">
                描述此属性筛选器的选项。
              </param>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.Equals(System.Object)">
      <summary>
              返回一个值，该值指示是否当前 <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> .NET Framework 特性 是否与指定对象相等。 
            </summary>
      <param name="value">
                要与此比较的对象 <see cref="T:System.ComponentModel.PropertyFilterAttribute" />。
              </param>
      <returns>
              如果指定的 <see langword="true" /> 等于当前的 <see cref="T:System.ComponentModel.PropertyFilterAttribute" />，则为 <see cref="T:System.ComponentModel.PropertyFilterAttribute" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.GetHashCode">
      <summary>
              返回当前 <see cref="T:System.ComponentModel.PropertyFilterAttribute" />.NET Framework 特性 的哈希代码。
            </summary>
      <returns>
              带符号的 32 位整数值。
            </returns>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.Match(System.Object)">
      <summary>
              返回一个值，该值指示是否将属性筛选器的当前选项 <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> .NET Framework 特性 匹配所提供的对象的属性筛选器选项。 
            </summary>
      <param name="value">
                要比较的对象。
                 此对象预期为 <see cref="T:System.ComponentModel.PropertyFilterAttribute" />。
              </param>
      <returns>
              <see langword="true" /> 如果存在匹配项;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.SortDescription.#ctor(System.String,System.ComponentModel.ListSortDirection)">
      <summary>
              初始化 <see cref="T:System.ComponentModel.SortDescription" /> 结构的新实例。
            </summary>
      <param name="propertyName">
                对列表进行排序所用的属性名称。
              </param>
      <param name="direction">
                排序顺序。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="propertyName" /> 参数不能为 null。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="propertyName" /> 参数不能为空
                </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
                  <paramref name="direction" /> 参数未指定有效值。
                </exception>
    </member>
    <member name="M:System.ComponentModel.SortDescription.Equals(System.Object)">
      <summary>
              将指定实例与当前的 <see cref="T:System.ComponentModel.SortDescription" /> 实例比较值是否相等。
            </summary>
      <param name="obj">
                要比较的 <see cref="T:System.ComponentModel.SortDescription" /> 实例。
              </param>
      <returns>
              如果 <paramref name="obj" /> 与 <see cref="T:System.ComponentModel.SortDescription" /> 的此实例具有相同值，则为 <see langword="true" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.SortDescription.GetHashCode">
      <summary>
              返回 <see cref="T:System.ComponentModel.SortDescription" /> 的此实例的哈希代码。
            </summary>
      <returns>
              <see cref="T:System.ComponentModel.SortDescription" /> 的此实例的哈希代码。
            </returns>
    </member>
    <member name="M:System.ComponentModel.SortDescription.op_Equality(System.ComponentModel.SortDescription,System.ComponentModel.SortDescription)">
      <summary>
              比较两个 <see cref="T:System.ComponentModel.SortDescription" /> 对象的值是否相等。
            </summary>
      <param name="sd1">
                要比较的第一个实例。
              </param>
      <param name="sd2">
                要比较的第二个实例。
              </param>
      <returns>
              如果两个对象相等，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.SortDescription.op_Inequality(System.ComponentModel.SortDescription,System.ComponentModel.SortDescription)">
      <summary>
              比较两个 <see cref="T:System.ComponentModel.SortDescription" /> 值是否不相等的对象。
            </summary>
      <param name="sd1">
                要比较的第一个实例。
              </param>
      <param name="sd2">
                要比较的第二个实例。
              </param>
      <returns>
              如果两个值不相等，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.#ctor">
      <summary>
              初始化 <see cref="T:System.ComponentModel.SortDescriptionCollection" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.ClearItems">
      <summary>
              从集合中移除所有项。
            </summary>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.InsertItem(System.Int32,System.ComponentModel.SortDescription)">
      <summary>
              将一项插入集合中指定索引处。
            </summary>
      <param name="index">
                插入 <paramref name="item" /> 的位置的从零开始的索引。
              </param>
      <param name="item">
                要插入的对象。
              </param>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.RemoveItem(System.Int32)">
      <summary>
              删除集合内指定索引处的项。
            </summary>
      <param name="index">
                要移除的元素的从零开始的索引。
              </param>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.SetItem(System.Int32,System.ComponentModel.SortDescription)">
      <summary>
              替换指定索引处的元素。
            </summary>
      <param name="index">
                待替换元素的从零开始的索引。
              </param>
      <param name="item">
                位于指定索引处的元素的新值。
              </param>
    </member>
    <member name="M:System.Diagnostics.PresentationTraceSources.GetTraceLevel(System.Object)">
      <summary>
              获取指定元素的 <see cref="P:System.Diagnostics.PresentationTraceSources.TraceLevel" /> 附加属性值。
            </summary>
      <param name="element">
                要从中读取属性值的元素。
              </param>
      <returns>
              元素的 <see cref="P:System.Diagnostics.PresentationTraceSources.TraceLevel" /> 属性值。
            </returns>
    </member>
    <member name="M:System.Diagnostics.PresentationTraceSources.Refresh">
      <summary>
              刷新跟踪源，通过强制 app.config 文件以重新读取它。
            </summary>
    </member>
    <member name="M:System.Diagnostics.PresentationTraceSources.SetTraceLevel(System.Object,System.Diagnostics.PresentationTraceLevel)">
      <summary>
              设置的值 <see cref="P:System.Diagnostics.PresentationTraceSources.TraceLevel" /> 附加到指定元素的属性。
            </summary>
      <param name="element">
                要向其写入附加属性的元素。
              </param>
      <param name="traceLevel">
                所需的 <see cref="T:System.Diagnostics.PresentationTraceLevel" /> 值。
              </param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor">
      <summary>
              创建 <see cref="T:System.IO.FileFormatException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              创建的新实例 <see cref="T:System.IO.FileFormatException" /> 类，并使用序列化数据对其进行初始化。
               此构造函数在反序列化过程中调用，以便重建通过流传输的异常对象。
            </summary>
      <param name="info">
                承载序列化对象数据的对象。
              </param>
      <param name="context">
                关于来源和目标的上下文信息
              </param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.String)">
      <summary>
              创建的新实例 <see cref="T:System.IO.FileFormatException" /> 类，具有指定的错误消息。
            </summary>
      <param name="message">
                一个 <see cref="T:System.String" /> 值，该值表示错误消息。
              </param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.String,System.Exception)">
      <summary>
              创建的新实例 <see cref="T:System.IO.FileFormatException" /> 与指定的错误消息和异常类型的类。
            </summary>
      <param name="message">
                一个 <see cref="T:System.String" /> 值，该值表示错误消息。
              </param>
      <param name="innerException">
                值 <see cref="P:System.Exception.InnerException" /> 属性，它表示当前异常的原因。
              </param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.Uri)">
      <summary>
              创建的新实例 <see cref="T:System.IO.FileFormatException" /> 与源类 URI 值。
            </summary>
      <param name="sourceUri">
                <see cref="T:System.Uri" /> 引起此错误的文件的值。
              </param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.Uri,System.Exception)">
      <summary>
              创建的新实例 <see cref="T:System.IO.FileFormatException" /> 与源类 URI 值和异常类型。
            </summary>
      <param name="sourceUri">
                <see cref="T:System.Uri" /> 引起此错误的文件的值。
              </param>
      <param name="innerException">
                值 <see cref="P:System.Exception.InnerException" /> 属性，它表示当前异常的原因。
              </param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.Uri,System.String)">
      <summary>
              创建的新实例 <see cref="T:System.IO.FileFormatException" /> 与源类 URI 值和指定的错误消息。
            </summary>
      <param name="sourceUri">
                <see cref="T:System.Uri" /> 引起此错误的文件的值。
              </param>
      <param name="message">
                一个 <see cref="T:System.String" /> 值，该值表示错误消息。
              </param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.Uri,System.String,System.Exception)">
      <summary>
              创建的新实例 <see cref="T:System.IO.FileFormatException" /> 与源类 URI 值、 指定的错误消息和异常类型。
            </summary>
      <param name="sourceUri">
                <see cref="T:System.Uri" /> 引起此错误的文件的值。
              </param>
      <param name="message">
                一个 <see cref="T:System.String" /> 值，该值表示错误消息。
              </param>
      <param name="innerException">
                值 <see cref="P:System.Exception.InnerException" /> 属性，它表示当前异常的原因。
              </param>
    </member>
    <member name="M:System.IO.FileFormatException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              设置带有文件名和附加异常信息的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。
            </summary>
      <param name="info">
                承载序列化对象数据的对象。
              </param>
      <param name="context">
                关于来源和目标的上下文信息
              </param>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Close">
      <summary>
              关闭已加密的数据包并将其保留的 OLE 复合文件。
            </summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Create(System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary>
              创建并返回 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> 上指定的流。
            </summary>
      <param name="envelopeStream">
                要在其中创建该文件流。
              </param>
      <param name="publishLicense">
                复合文件中嵌入发布许可证。
              </param>
      <param name="cryptoProvider">
                一个对象，确定哪些操作允许当前用户进行加密的内容。
              </param>
      <returns>
              新创建的 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="envelopeStream" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  <paramref name="envelopeStream" /> 不提供读/写访问。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Create(System.String,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary>
              创建并返回 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> 并使其具有指定的文件名。
            </summary>
      <param name="envelopeFileName">
                OLE 的复合文件的名称。
              </param>
      <param name="publishLicense">
                复合文件中嵌入发布许可证。
              </param>
      <param name="cryptoProvider">
                一个对象，确定哪些操作允许当前用户进行加密的内容。
              </param>
      <returns>
              新创建的 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="envelopeFileName" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.IO.Stream,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary>
              创建并返回 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> （在指定的流），使用指定未加密的包作为其内容。
            </summary>
      <param name="envelopeStream">
                要在其中创建该文件流。
              </param>
      <param name="packageStream">
                流表示现有末加密的包。
              </param>
      <param name="publishLicense">
                复合文件中嵌入发布许可证。
              </param>
      <param name="cryptoProvider">
                一个对象，确定哪些操作允许当前用户进行加密的内容。
              </param>
      <returns>
              新创建的 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="envelopeStream" /> 或 <paramref name="packageStream" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  <paramref name="envelopeStream" /> 不提供读/写访问。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.String,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary>
              创建并返回 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> 作为其内容，使用指定未加密的包并为其提供指定的文件名。
            </summary>
      <param name="envelopeFileName">
                OLE 的复合文件的名称。
              </param>
      <param name="packageStream">
                流表示现有末加密的包。
              </param>
      <param name="publishLicense">
                复合文件中嵌入发布许可证。
              </param>
      <param name="cryptoProvider">
                一个对象，确定哪些操作允许当前用户进行加密的内容。
              </param>
      <returns>
              新创建的 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="envelopeFileName" /> 或 <paramref name="packageStream" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Dispose">
      <summary>
              释放由 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> 使用的所有资源。
            </summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Dispose(System.Boolean)">
      <summary>
              释放由 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Flush">
      <summary>
              两个刷新流 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> 及其包内容。
            </summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.GetPackage">
      <summary>
              获取内部的加密的包 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。
            </summary>
      <returns>
              <see cref="T:System.IO.Packaging.Package" /> 信封中。
            </returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.IO.Stream)">
      <summary>
              获取一个值，该值指示指定的流是否为具有已加密的数据包流的 OLE 复合文件。
            </summary>
      <param name="stream">
                测试流。
              </param>
      <returns>
              <see langword="true" /> 如果指定的流是具有已加密的数据包流; OLE 复合文件否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="stream" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.String)">
      <summary>
              获取一个值，该值指示指定的文件是否为具有已加密的数据包流的 OLE 复合文件。
            </summary>
      <param name="fileName">
                经过测试，该文件。
              </param>
      <returns>
              <see langword="true" /> 如果指定的文件是具有已加密的数据包流; OLE 复合文件否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="fileName" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.IO.Stream)">
      <summary>
              在指定的流中打开加密的包。
            </summary>
      <param name="envelopeStream">
                包含加密的包的流。
              </param>
      <returns>
              <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> 打开。
            </returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String)">
      <summary>
              以只读和非共享行，在指定的文件中打开加密的包。
            </summary>
      <param name="envelopeFileName">
                包含加密的包的文件。
              </param>
      <returns>
              <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> 打开。
            </returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess)">
      <summary>
              在指定的文件作为非共享行并使用指定的访问权限打开的加密的包。
            </summary>
      <param name="envelopeFileName">
                包含加密的包的文件。
              </param>
      <param name="access">
                访问类型。
              </param>
      <returns>
              <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> 打开。
            </returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess,System.IO.FileShare)">
      <summary>
              指定的文件中打开加密的包并为其提供指定的访问权限和共享。
            </summary>
      <param name="envelopeFileName">
                包含加密的包的文件。
              </param>
      <param name="access">
                访问类型。
              </param>
      <param name="sharing">
                共享的类型。
              </param>
      <returns>
              <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> 打开。
            </returns>
    </member>
    <member name="M:System.IO.Packaging.Package.#ctor(System.IO.FileAccess)">
      <summary>
              新实例初始化 <see cref="T:System.IO.Packaging.Package" /> 类，该类使用给定 <see cref="T:System.IO.FileAccess" />。
            </summary>
      <param name="openFileAccess">
                包文件 IO 权限。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  值为 <paramref name="openFileAccess" /> 无效。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.Package.#ctor(System.IO.FileAccess,System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.IO.Packaging.Package" /> 类，该类使用给定 <see cref="T:System.IO.FileAccess" /> 和流式处理选项。
            </summary>
      <param name="openFileAccess">
                包文件 IO 权限。
              </param>
      <param name="streaming">
                <see langword="true" /> 若要打开包进行流式处理;否则为 <see langword="false" />。
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  值为 <paramref name="openFileAccess" /> 无效。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Close">
      <summary>
              保存并关闭包和所有基础部件流。
            </summary>
    </member>
    <member name="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String)">
      <summary>
              使用给定的 URI 和内容类型创建新的未压缩的部件。
            </summary>
      <param name="partUri">
                
                  统一资源标识符 (URI) 新部件。
              </param>
      <param name="contentType">
                数据流的内容类型。
              </param>
      <returns>
              新创建的部件。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="partUri" /> 或 <paramref name="contentType" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="partUri" /> 不是有效 <see cref="T:System.IO.Packaging.PackagePart" /> URI。 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  具有指定的部件 <paramref name="partUri" /> 包中已存在。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" /> 已调用)。
                </exception>
      <exception cref="T:System.IO.IOException">
                  包是只读的 （不能添加新的部件）。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String,System.IO.Packaging.CompressionOption)">
      <summary>
              使用给定的 URI、 内容类型和压缩选项创建新部件。
            </summary>
      <param name="partUri">
                
                  URI 新部件。
              </param>
      <param name="contentType">
                数据流的内容类型。
              </param>
      <param name="compressionOption">
                数据流的压缩选项 <see cref="F:System.IO.Packaging.CompressionOption.NotCompressed" /> 或 <see cref="F:System.IO.Packaging.CompressionOption.Normal" /> 压缩。
              </param>
      <returns>
              新创建的部件。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="partUri" /> 或 <paramref name="contentType" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="partUri" /> 不是有效 <see cref="T:System.IO.Packaging.PackagePart" /> 统一资源标识符 (URI)。 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  具有指定的部件 <paramref name="partUri" /> 包中已存在。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="compressionOption" /> 值无效。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" /> 已调用)。
                </exception>
      <exception cref="T:System.IO.IOException">
                  包是只读的 （不能添加新的部件）。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)">
      <summary>
              当在派生类中重写，会在包中创建新部件。
            </summary>
      <param name="partUri">
                
                  统一资源标识符 (URI) 为正在创建的部件。
              </param>
      <param name="contentType">
                数据流的内容类型。
              </param>
      <param name="compressionOption">
                数据流压缩选项。
              </param>
      <returns>
              创建的部件。
            </returns>
    </member>
    <member name="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)">
      <summary>
              使用给定的 URI、 目标模式和关系类型创建数据包级关系到这一部分。
            </summary>
      <param name="targetUri">
                
                  统一资源标识符 (URI) 的目标部件。
              </param>
      <param name="targetMode">
                指示是否为目标部件 <see cref="F:System.IO.Packaging.TargetMode.Internal" /> 或 <see cref="F:System.IO.Packaging.TargetMode.External" /> 到包。
              </param>
      <param name="relationshipType">
                一个 URI，唯一定义该关系的角色。
              </param>
      <returns>
              与指定的部件的数据包级关系。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="targetUri" /> 或 <paramref name="relationshipType" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="targetUri" /> 部分是 <see cref="T:System.IO.Packaging.PackageRelationship" />, ，或 <paramref name="targetMode" /> 是 <see cref="F:System.IO.Packaging.TargetMode.Internal" /> 和 <paramref name="targetUri" /> 是一个绝对 URI。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  值为 <paramref name="targetMode" /> 无效。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" /> 已调用)。
                </exception>
      <exception cref="T:System.IO.IOException">
                  包是只读的。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String,System.String)">
      <summary>
              使用给定的 URI，目标模式、 关系类型，创建到这一部分的数据包级关系和 标识符 (ID)。
            </summary>
      <param name="targetUri">
                
                  统一资源标识符 (URI) 的目标部件。
              </param>
      <param name="targetMode">
                指示是否为目标部件 <see cref="F:System.IO.Packaging.TargetMode.Internal" /> 或 <see cref="F:System.IO.Packaging.TargetMode.External" /> 到包。
              </param>
      <param name="relationshipType">
                一个 URI，唯一定义该关系的角色。
              </param>
      <param name="id">
                唯一的 XML 标识符。
              </param>
      <returns>
              与指定的部件的数据包级关系。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="targetUri" /> 或 <paramref name="relationshipType" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="targetUri" /> 部分是 <see cref="T:System.IO.Packaging.PackageRelationship" />, ，或 <paramref name="targetMode" /> 是 <see cref="F:System.IO.Packaging.TargetMode.Internal" /> 和 <paramref name="targetUri" /> 是一个绝对 URI。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  值为 <paramref name="targetMode" /> 无效。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" /> 已调用)。
                </exception>
      <exception cref="T:System.IO.IOException">
                  包是只读的。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  <paramref name="id" /> 不是有效的 XML 标识符;具有指定的部件或 <paramref name="id" /> 包中已存在。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.Package.DeletePart(System.Uri)">
      <summary>
              从包中删除具有给定的 URI 的部件。
            </summary>
      <param name="partUri">
                
                  URI 要删除的部件。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="partUri" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="partUri" /> 不是有效 <see cref="T:System.IO.Packaging.PackagePart" /> URI。 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" /> 已调用)。
                </exception>
      <exception cref="T:System.IO.IOException">
                  包是只读的。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)">
      <summary>
              当在派生类中重写，会删除具有给定的 URI 的部件。
            </summary>
      <param name="partUri">
                <see cref="P:System.IO.Packaging.PackagePart.Uri" /> 的 <see cref="T:System.IO.Packaging.PackagePart" /> 删除。
              </param>
    </member>
    <member name="M:System.IO.Packaging.Package.DeleteRelationship(System.String)">
      <summary>
              删除数据包级关系。
            </summary>
      <param name="id">
                <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> 的 <see cref="T:System.IO.Packaging.PackageRelationship" /> 删除。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="id" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" /> 已调用)。
                </exception>
      <exception cref="T:System.IO.IOException">
                  包是只读的。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  <paramref name="id" /> 不是有效的 XML 标识符。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Dispose(System.Boolean)">
      <summary>
              刷新和保存的所有部件和关系的内容、 关闭包，然后释放所有资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.IO.Packaging.Package.Flush">
      <summary>
              在包中保存的所有部件和关系所包含的内容。
            </summary>
      <exception cref="T:System.ObjectDisposedException">
                  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" /> 已调用)。
                </exception>
      <exception cref="T:System.IO.IOException">
                  包是只读的并且不能修改。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.Package.FlushCore">
      <summary>
              当在派生类中重写，将所有部件和关系的内容保存到派生的类存储区。
            </summary>
    </member>
    <member name="M:System.IO.Packaging.Package.GetPart(System.Uri)">
      <summary>
              返回与给定的 URI 部分。
            </summary>
      <param name="partUri">
                
                  统一资源标识符 (URI) 要返回的部件。
              </param>
      <returns>
              使用指定的部分 <paramref name="partUri" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="partUri" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="partUri" /> 不是有效 <see cref="T:System.IO.Packaging.PackagePart" /> 统一资源标识符 (URI)。 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  具有指定的部件 <paramref name="partUri" /> 不是在包中。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" /> 已调用)。
                </exception>
      <exception cref="T:System.IO.IOException">
                  包是只写。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.Package.GetPartCore(System.Uri)">
      <summary>
              当在派生类中重写，返回由给定 URI 寻址的部件。
            </summary>
      <param name="partUri">
                
                  统一资源标识符 (URI) 要检索的部件。
              </param>
      <returns>
              请求的部分;或 <see langword="null" />, ，如果具有指定的部件 <paramref name="partUri" /> 不是在包中。
            </returns>
    </member>
    <member name="M:System.IO.Packaging.Package.GetParts">
      <summary>
              返回包中的所有部件的集合。
            </summary>
      <returns>
              所有的集合 <see cref="T:System.IO.Packaging.PackagePart" /> 包中包含的元素。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" /> 已调用)。
                </exception>
      <exception cref="T:System.IO.IOException">
                  包是只写。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.Package.GetPartsCore">
      <summary>
              当在派生类中重写，在包中返回所有部分的数组。
            </summary>
      <returns>
              包中包含的所有部分的数组。
            </returns>
    </member>
    <member name="M:System.IO.Packaging.Package.GetRelationship(System.String)">
      <summary>
              返回具有给定标识符的数据包级关系。
            </summary>
      <param name="id">
                <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> 要返回的关系。
              </param>
      <returns>
              使用指定的包级别关系 <paramref name="id" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="id" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  <paramref name="id" /> 不是有效的 XML 标识符。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  与指定的关系 <paramref name="id" /> 不是在包中。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" /> 已调用)。
                </exception>
      <exception cref="T:System.IO.IOException">
                  包是只写。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.Package.GetRelationships">
      <summary>
              返回的所有数据包级关系的集合。
            </summary>
      <returns>
              包中包含的所有数据包级关系的集合。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" /> 已调用)。
                </exception>
      <exception cref="T:System.IO.IOException">
                  包是只写。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)">
      <summary>
              返回一个集合相匹配的数据包级关系给定 <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />。
            </summary>
      <param name="relationshipType">
                <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />  匹配，并返回集合中。
              </param>
      <returns>
              匹配指定的包级别关系的集合 <paramref name="relationshipType" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="relationshipType" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="relationshipType" /> 是一个空字符串。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" /> 已调用)。
                </exception>
      <exception cref="T:System.IO.IOException">
                  包是只写。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.IO.Stream)">
      <summary>
              打开在给定的 IO 流上的包。
            </summary>
      <param name="stream">
                对要打开此包的 IO 流。
              </param>
      <returns>
              打开的包。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="stream" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IO.IOException">
                  若要打开此包需要读取或读/写权限，并指定 <paramref name="stream" /> 是只写的; 或者，若要打开此包需要写或读/写权限和指定 <paramref name="stream" /> 是只读的。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode)">
      <summary>
              使用给定的 IO 流和文件模式中打开包。
            </summary>
      <param name="stream">
                对要打开此包的 IO 流。
              </param>
      <param name="packageMode">
                要在其中打开包文件模式。
              </param>
      <returns>
              打开的包。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="stream" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="packageMode" /> 值无效。
                </exception>
      <exception cref="T:System.IO.IOException">
                  若要打开此包需要读取或读/写权限，并指定 <paramref name="stream" /> 是只写的; 或者，若要打开此包需要写或读/写权限和指定 <paramref name="stream" /> 是只读的。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode,System.IO.FileAccess)">
      <summary>
              使用给定的 IO 流、 文件模式和文件访问设置打开包。
            </summary>
      <param name="stream">
                对要打开此包的 IO 流。
              </param>
      <param name="packageMode">
                要在其中打开包文件模式。
              </param>
      <param name="packageAccess">
                要在其中打开包文件访问。
              </param>
      <returns>
              打开的包。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="stream" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  值为 <paramref name="packageMode" /> 或 <paramref name="packageAccess" /> 无效。
                </exception>
      <exception cref="T:System.IO.IOException">
                  若要打开此包需要读取或读/写权限，并指定 <paramref name="stream" /> 是只写的; 或该包将其打开您需要写或读/写权限和指定 <paramref name="stream" /> 是只读的。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.String)">
      <summary>
              打开位于给定路径和文件名称的包。
            </summary>
      <param name="path">
                包的路径和文件名称。
              </param>
      <returns>
              打开的包。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="path" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode)">
      <summary>
              打开位于使用给定的文件模式的给定路径的包。
            </summary>
      <param name="path">
                包的路径和文件名称。
              </param>
      <param name="packageMode">
                要在其中打开包文件模式。
              </param>
      <returns>
              打开的包。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="path" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  值 <paramref name="packageMode" /> 无效。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
      <summary>
              打开位于给定路径使用给定的文件模式和文件访问设置的包。
            </summary>
      <param name="path">
                包的路径和文件名称。
              </param>
      <param name="packageMode">
                要在其中打开包文件模式。
              </param>
      <param name="packageAccess">
                要在其中打开包文件访问。
              </param>
      <returns>
              打开的包。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="path" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  值 <paramref name="packageMode" /> 或 <paramref name="packageAccess" /> 无效。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
      <summary>
              打开位于给定路径使用给定的文件模式、 文件访问和文件共享设置的包。
            </summary>
      <param name="path">
                包的路径和文件名称。
              </param>
      <param name="packageMode">
                要在其中打开包文件模式。
              </param>
      <param name="packageAccess">
                要在其中打开包文件访问。
              </param>
      <param name="packageShare">
                共享模式，以在其中打开包文件。
              </param>
      <returns>
              打开的包。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="path" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  值为 <paramref name="packageMode" />, ，<paramref name="packageAccess" />, ，或 <paramref name="packageShare" /> 无效。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.Package.PartExists(System.Uri)">
      <summary>
              指示给定的 URI 的部件是否在包中。
            </summary>
      <param name="partUri">
                <see cref="T:System.Uri" /> 要检查的部件。
              </param>
      <returns>
              <see langword="true" /> 如果具有指定的部件 <paramref name="partUri" /> 在包; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="partUri" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="partUri" /> 不是有效 <see cref="T:System.IO.Packaging.PackagePart" /> 统一资源标识符 (URI)。 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" /> 已调用)。
                </exception>
      <exception cref="T:System.IO.IOException">
                  包是只写 （不能读取信息）。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.Package.RelationshipExists(System.String)">
      <summary>
              指示是否在包中包含带有给定 ID 的数据包级关系。
            </summary>
      <param name="id">
                <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> 要检查的关系。
              </param>
      <returns>
              <see langword="true" /> 如果具有指定的包级别关系 <paramref name="id" /> 在包; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="id" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  <paramref name="id" /> 不是有效的 XML 标识符。
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" /> 已调用)。
                </exception>
      <exception cref="T:System.IO.IOException">
                  包是只写。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.Package.System#IDisposable#Dispose">
      <summary>
              此成员支持 Windows Presentation Foundation (WPF) 基础结构，不应在应用程序使用。
                使用类型安全 <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 方法相反。
            </summary>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignature.GetPartTransformList(System.Uri)">
      <summary>
              返回的有序列的表 <see cref="T:System.Security.Cryptography.Xml.Transform" /> 应用于给定部件的操作。
            </summary>
      <param name="partName">
                <see cref="T:System.Uri" /> 的 <see cref="T:System.IO.Packaging.PackagePart" /> 要返回的转换列表。
              </param>
      <returns>
              有序列的表的 URI 字符串，如 <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl" /> 或 <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl" />, ，表示规范的 XML 转换应用于具有部件给定 <paramref name="partName" /> URI。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 已被删除。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignature.Verify">
      <summary>
              根据 X.509 证书验证数字签名。
            </summary>
      <returns>
              如果验证成功，则为 <see cref="F:System.IO.Packaging.VerifyResult.Success" />；否则为标识问题的 <see cref="T:System.IO.Packaging.VerifyResult" /> 值之一。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 已被删除。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignature.Verify(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>
              根据指定的 X.509 证书验证数字签名。
            </summary>
      <param name="signingCertificate">
                验证数字签名所根据的签名者的 X.509 证书。
              </param>
      <returns>
              如果验证成功，则为 <see cref="F:System.IO.Packaging.VerifyResult.Success" />；否则为标识问题的 <see cref="T:System.IO.Packaging.VerifyResult" /> 值之一。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 已被删除。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.#ctor(System.IO.Packaging.Package)">
      <summary>
              新实例初始化 <see cref="T:System.IO.Packaging.PackageDigitalSignatureManager" /> 类用于指定 <see cref="T:System.IO.Packaging.Package" />。
            </summary>
      <param name="package">
                与此签名管理器关联的包。
              </param>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Countersign">
      <summary>
              使用用户选定的 X.509 证书副署包中的所有签名。
            </summary>
      <returns>
              作为副署添加的签名；如果找不到证书或用户取消了证书选择对话框，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Countersign(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>
              使用指定的 X.509 证书副署包中的所有签名。
            </summary>
      <param name="certificate">
                要作为副署签名添加的 X.509 证书。
              </param>
      <returns>
              作为副署添加的签名。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="certificate" /> 为 <see langword="null" />
                </exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Countersign(System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.Uri})">
      <summary>
              使用给定 X.509 证书对签名的列表进行副署。
            </summary>
      <param name="certificate">
                用于对每个指定 <paramref name="signatures" /> 进行副署的 X.509 证书。
              </param>
      <param name="signatures">
                要进行副署的签名的列表。
              </param>
      <returns>
              用于对每个 <paramref name="signatures" /> 进行副署的数字签名。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="certificate" /> 或 <paramref name="signatures" /> 参数是 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  包不包含任何签名的 <see cref="T:System.IO.Packaging.PackagePart" /> 对象。
                </exception>
      <exception cref="T:System.ArgumentException">
                  包不包含任何 <see cref="T:System.IO.Packaging.PackageDigitalSignature" /> 部件。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.GetSignature(System.Uri)">
      <summary>
              返回给定的签名的数字签名 统一资源标识符 (URI)。 </summary>
      <param name="signatureUri">
                
                  URI 要返回的数字签名。
              </param>
      <returns>
              指定的数字签名 <paramref name="signatureUri" />, ，或 <see langword="null" /> 如果签名的给定 <paramref name="signatureUri" /> 找不到。
            </returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.RemoveAllSignatures">
      <summary>
              从包中删除所有数字签名。
            </summary>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.RemoveSignature(System.Uri)">
      <summary>
              删除具有给定签名 统一资源标识符 (URI) 的数字签名。 </summary>
      <param name="signatureUri">
                要移除的 URI 的 <see cref="T:System.IO.Packaging.PackageDigitalSignature" />。
              </param>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri})">
      <summary>
              提示用户提供 X.509 证书，然后将其用于对指定的包部件列表进行数字签名。
            </summary>
      <param name="parts">
                要签名的 <see cref="T:System.IO.Packaging.PackagePart" /> 元素的 统一资源标识符 (URI) 列表。
              </param>
      <returns>
              用于对 <paramref name="parts" /> 的列表进行签名的数字签名。
            </returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>
              使用给定的 X.509 证书对包部件的列表进行签名。
            </summary>
      <param name="parts">
                要签名的 <see cref="T:System.IO.Packaging.PackagePart" /> 元素的 统一资源标识符 (URI) 列表。
              </param>
      <param name="certificate">
                用于对每个指定 <paramref name="parts" /> 进行数字签名的 X.509 证书。
              </param>
      <returns>
              如果有，则为用于对 <paramref name="parts" /> 的指定列表进行签名的数字签名；如果未找到证书或者用户在证书选择对话框中单击了“取消”，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector})">
      <summary>
              使用给定的 X.509 证书对包部件和包关系列表进行签名。
            </summary>
      <param name="parts">
                要签名的 <see cref="T:System.IO.Packaging.PackagePart" /> 对象的 统一资源标识符 (URI) 列表。
              </param>
      <param name="certificate">
                用于对每个指定部件和关系进行数字签名的 X.509 证书。
              </param>
      <param name="relationshipSelectors">
                要签名的 <see cref="T:System.IO.Packaging.PackageRelationship" /> 对象的列表。
              </param>
      <returns>
              用于对 <paramref name="parts" /> 和 <paramref name="relationshipSelectors" /> 列表中指定的元素进行签名的数字签名。
            </returns>
      <exception cref="T:System.ArgumentException">
                  <paramref name="parts" /> 和 <paramref name="relationshipSelectors" /> 均未指定任何要签名的对象。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String)">
      <summary>
              使用给定的 X.509 证书和 标识符 (ID) 对包部件和包关系列表进行签名。
            </summary>
      <param name="parts">
                要签名的 <see cref="T:System.IO.Packaging.PackagePart" /> 对象的 统一资源标识符 (URI) 列表。
              </param>
      <param name="certificate">
                用于对每个指定部件和关系进行数字签名的 X.509 证书。
              </param>
      <param name="relationshipSelectors">
                要签名的 <see cref="T:System.IO.Packaging.PackageRelationship" /> 对象的列表。
              </param>
      <param name="signatureId">
                要与签名关联的标识字符串。
              </param>
      <returns>
              用于对 <paramref name="parts" /> 和 <paramref name="relationshipSelectors" /> 列表中指定的元素进行签名的数字签名。
            </returns>
      <exception cref="T:System.ArgumentException">
                  <paramref name="parts" /> 和 <paramref name="relationshipSelectors" /> 均未指定任何要签名的元素。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String,System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.DataObject},System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.Reference})">
      <summary>
              使用指定的 X.509 证书和签名 标识符 (ID) 对包部件、包关系或自定义对象的列表进行签名。
            </summary>
      <param name="parts">
                要签名的 <see cref="T:System.IO.Packaging.PackagePart" /> 对象的 统一资源标识符 (URI) 列表。
              </param>
      <param name="certificate">
                用于对每个指定部件和关系进行数字签名的 X.509 证书。
              </param>
      <param name="relationshipSelectors">
                要签名的 <see cref="T:System.IO.Packaging.PackageRelationship" /> 对象的列表。
              </param>
      <param name="signatureId">
                要与签名关联的标识字符串。
              </param>
      <param name="signatureObjects">
                要签名的自定义数据对象的列表。
              </param>
      <param name="objectReferences">
                要签名的自定义对象的引用列表。
              </param>
      <returns>
              用于对 <paramref name="parts" /> 和 <paramref name="relationshipSelectors" /> 列表中指定的元素进行签名的数字签名。
            </returns>
      <exception cref="T:System.ArgumentException">
                  <paramref name="parts" />、<paramref name="relationshipSelectors" />、<paramref name="signatureObjects" />、<paramref name="objectReferences" /> 均未指定任何要签名的元素。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  被签名部件的 <see cref="P:System.IO.Packaging.PackagePart.ContentType" /> 引用了为空、为 <see langword="null" />、或未定义的 <see cref="P:System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping" />。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  <paramref name="signatureId" /> 不是 <see langword="null" />，也不是有效 XML 架构 ID（例如，它以前导数字开头）。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifyCertificate(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>
              验证给定的 X.509 证书。
            </summary>
      <param name="certificate">
                要验证的 X.509 证书。
              </param>
      <returns>
              如果证书验证已成功，则为 <see cref="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.NoError" />（值为 0）；否则为错误标志的的按位枚举。
            </returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)">
      <summary>
              验证包内所有已签名部件上的签名。
            </summary>
      <param name="exitOnFailure">
                若要在首次失败时退出，则为 <see langword="true" />；若要继续检查所有签名，则为 <see langword="false" />。
              </param>
      <returns>
              如果成功验证所有签名，则为 <see cref="F:System.IO.Packaging.VerifyResult.Success" />（值为 0）；否则为标识错误的枚举。
            </returns>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.#ctor(System.IO.Packaging.Package,System.Uri)">
      <summary>
              新实例初始化 <see cref="T:System.IO.Packaging.PackagePart" /> 类使用指定的父 <see cref="P:System.IO.Packaging.PackagePart.Package" /> 和部件 URI。
            </summary>
      <param name="package">
                父 <see cref="T:System.IO.Packaging.Package" /> 的部分。
              </param>
      <param name="partUri">
                
                  URI 的部分中，相对于父级的 <see cref="T:System.IO.Packaging.Package" /> 根。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="package" /> 或 <paramref name="partUri" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.#ctor(System.IO.Packaging.Package,System.Uri,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.IO.Packaging.PackagePart" /> 类使用指定的父 <see cref="P:System.IO.Packaging.PackagePart.Package" />, ，部件 URI, ，和 MIME 内容类型。
            </summary>
      <param name="package">
                父 <see cref="T:System.IO.Packaging.Package" /> 的部分。
              </param>
      <param name="partUri">
                
                  URI 的部分中，相对于父级的 <see cref="T:System.IO.Packaging.Package" /> 根。
              </param>
      <param name="contentType">
                
                  MIME 该部分数据流的内容类型。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="package" /> 或 <paramref name="partUri" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="partUri" /> 不是有效 <see cref="T:System.IO.Packaging.PackagePart" /> URI。 
                </exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.#ctor(System.IO.Packaging.Package,System.Uri,System.String,System.IO.Packaging.CompressionOption)">
      <summary>
              新实例初始化 <see cref="T:System.IO.Packaging.PackagePart" /> 类使用指定的父 <see cref="P:System.IO.Packaging.PackagePart.Package" />, ，部件 URI, ，MIME 内容类型，和 <see cref="T:System.IO.Packaging.CompressionOption" />。
            </summary>
      <param name="package">
                父 <see cref="T:System.IO.Packaging.Package" /> 的部分。
              </param>
      <param name="partUri">
                
                  URI 的部分中，相对于父级的 <see cref="T:System.IO.Packaging.Package" /> 根。
              </param>
      <param name="contentType">
                
                  MIME 部分的数据流的内容类型。
              </param>
      <param name="compressionOption">
                该部分数据流压缩选项。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="package" /> 或 <paramref name="partUri" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="partUri" /> 不是有效 <see cref="T:System.IO.Packaging.PackagePart" /> URI。 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="compressionOption" /> 值无效。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)">
      <summary>
              创建部件级关系之间这 <see cref="T:System.IO.Packaging.PackagePart" /> 向指定目标 <see cref="T:System.IO.Packaging.PackagePart" /> 或外部资源。
            </summary>
      <param name="targetUri">
                
                  URI 的目标部件。
              </param>
      <param name="targetMode">
                枚举值之一。
                 例如， <see cref="F:System.IO.Packaging.TargetMode.Internal" /> 如果目标部件位于 <see cref="T:System.IO.Packaging.Package" />; 或 <see cref="F:System.IO.Packaging.TargetMode.External" /> 如果目标是外部的资源 <see cref="T:System.IO.Packaging.Package" />。
              </param>
      <param name="relationshipType">
                关系的角色。
              </param>
      <returns>
              这之间的部件级关系 <see cref="T:System.IO.Packaging.PackagePart" /> 到目标 <see cref="T:System.IO.Packaging.PackagePart" /> 或外部资源。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  该部件已被删除。
                
                  - 或 -
                
                  <see cref="P:System.IO.Packaging.PackagePart.Package" /> 未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" /> 已调用)。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="targetUri" /> 或 <paramref name="relationshipType" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="targetMode" /> 参数不是有效 <see cref="T:System.IO.Packaging.TargetMode" /> 枚举值。
                </exception>
      <exception cref="T:System.ArgumentException">
                  通过标识的部分 <paramref name="targetUri" /> （关系的目标不能是另一个关系） 的关系。
                
                  - 或 -
                
                  <paramref name="targetMode" /> 指定为 <see cref="F:System.IO.Packaging.TargetMode.Internal" /> 但 <paramref name="targetUri" /> 是绝对外部 URI。
                </exception>
      <exception cref="T:System.IO.IOException">
                  包是只读的 （不能添加新的关系）。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String,System.String)">
      <summary>
              创建部件级关系之间这 <see cref="T:System.IO.Packaging.PackagePart" /> 向指定目标 <see cref="T:System.IO.Packaging.PackagePart" /> 或外部资源。
            </summary>
      <param name="targetUri">
                
                  URI 的目标部件。
              </param>
      <param name="targetMode">
                枚举值之一。
                 例如， <see cref="F:System.IO.Packaging.TargetMode.Internal" /> 如果目标部件位于 <see cref="T:System.IO.Packaging.Package" />; 或 <see cref="F:System.IO.Packaging.TargetMode.External" /> 如果目标是外部的资源 <see cref="T:System.IO.Packaging.Package" />。
              </param>
      <param name="relationshipType">
                关系的角色。
              </param>
      <param name="id">
                唯一的 ID 之间的关系。
              </param>
      <returns>
              这之间的部件级关系 <see cref="T:System.IO.Packaging.PackagePart" /> 到目标 <see cref="T:System.IO.Packaging.PackagePart" /> 或外部资源。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  该部件已被删除。
                
                  - 或 -
                
                  <see cref="P:System.IO.Packaging.PackagePart.Package" /> 未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" /> 已调用)。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="targetUri" /> 或 <paramref name="relationshipType" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="targetMode" /> 参数不是有效 <see cref="T:System.IO.Packaging.TargetMode" /> 枚举值。
                </exception>
      <exception cref="T:System.ArgumentException">
                  通过标识的部分 <paramref name="targetUri" /> （关系的目标不能是另一个关系） 的关系。
                
                  - 或 -
                
                  <paramref name="targetMode" /> 指定为 <see cref="F:System.IO.Packaging.TargetMode.Internal" /> 但 <paramref name="targetUri" /> 是绝对外部 URI。
                </exception>
      <exception cref="T:System.IO.IOException">
                  包是只读的 （不能添加新的关系）。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  <paramref name="id" /> 不是有效的 XML 标识符。
                
                  - 或 -
                
                  具有指定的部件 <paramref name="id" /> 已存在。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.DeleteRelationship(System.String)">
      <summary>
              删除指定的部件级 <see cref="T:System.IO.Packaging.PackageRelationship" />。
            </summary>
      <param name="id">
                <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> 要删除的关系。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  该部件已被删除。
                
                  - 或 -
                
                  <see cref="P:System.IO.Packaging.PackagePart.Package" /> 未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" /> 已调用)。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="id" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IO.IOException">
                  包是只读的 （关系不能删除）。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  <paramref name="id" /> 不是有效的 XML 标识符。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetContentTypeCore">
      <summary>
              当在派生类中重写返回 MIME 的部分内容类型。
            </summary>
      <returns>
              
                MIME 的部分内容类型。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  派生的类不提供所需的重写实现 <see cref="M:System.IO.Packaging.PackagePart.GetContentTypeCore" /> 方法。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetRelationship(System.String)">
      <summary>
              返回具有指定的关系 <see cref="P:System.IO.Packaging.PackageRelationship.Id" />。
            </summary>
      <param name="id">
                <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> 要返回的关系。
              </param>
      <returns>
              匹配指定的关系 <paramref name="id" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="id" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  <paramref name="id" /> 不是有效的 XML 标识符。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="relationshipType" /> 是一个空字符串。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  该部件已被删除。
                
                  - 或 -
                
                  <see cref="P:System.IO.Packaging.PackagePart.Package" /> 未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" /> 已调用)。
                
                  - 或 -
                
                  与指定的关系 <paramref name="id" /> 包中不存在。
                </exception>
      <exception cref="T:System.IO.IOException">
                  包是只写 （不能读取关系信息）。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetRelationships">
      <summary>
              返回所拥有的这一部分的所有关系的集合。
            </summary>
      <returns>
              由部件拥有的所有关系的集合。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  该部件已被删除。
                
                  - 或 -
                
                  <see cref="P:System.IO.Packaging.PackagePart.Package" /> 未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" /> 已调用)。
                </exception>
      <exception cref="T:System.IO.IOException">
                  包是只写 （不能读取关系信息）。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetRelationshipsByType(System.String)">
      <summary>
              返回的匹配指定的关系集合 <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />。
            </summary>
      <param name="relationshipType">
                <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" /> 定位并返回集合中的关系。
              </param>
      <returns>
              具有指定关系的集合 <paramref name="relationshipType" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="relationshipType" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="relationshipType" /> 是一个空字符串。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  该部件已被删除。
                
                  - 或 -
                
                  <see cref="P:System.IO.Packaging.PackagePart.Package" /> 未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" /> 已调用)。
                </exception>
      <exception cref="T:System.IO.IOException">
                  包是只写 （不能读取关系信息）。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetStream">
      <summary>
              返回部分内容数据流。
            </summary>
      <returns>
              部件内容数据流。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  该部件已被删除。
                
                  - 或 -
                
                  <see cref="P:System.IO.Packaging.PackagePart.Package" /> 未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" /> 已调用)。
                </exception>
      <exception cref="T:System.IO.IOException">
                  返回的流对象 <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> 派生子类的方法是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetStream(System.IO.FileMode)">
      <summary>
              返回在指定的 I/O 中打开内容流 <see cref="T:System.IO.FileMode" />。
            </summary>
      <param name="mode">
                要在其中打开内容流 I/O 模式。
              </param>
      <returns>
              部件的内容流。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  该部件已被删除。
                
                  - 或 -
                
                  <see cref="P:System.IO.Packaging.PackagePart.Package" /> 未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" /> 已调用)。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="mode" /> 参数不是有效 <see cref="T:System.IO.FileMode" /> 枚举值。
                </exception>
      <exception cref="T:System.IO.IOException">
                  <paramref name="mode" /> 参数不是与包和部分流兼容。
                
                  - 或 -
                
                  返回的流对象 <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> 派生子类的方法是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetStream(System.IO.FileMode,System.IO.FileAccess)">
      <summary>
              返回与指定打开的部分内容流 <see cref="T:System.IO.FileMode" /> 和 <see cref="T:System.IO.FileAccess" />。
            </summary>
      <param name="mode">
                要在其中打开内容流 I/O 模式。
              </param>
      <param name="access">
                要在打开内容的流中使用的访问权限。
              </param>
      <returns>
              用于该部件的内容流。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  该部件已被删除。
                
                  - 或 -
                
                  <see cref="P:System.IO.Packaging.PackagePart.Package" /> 未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" /> 已调用)。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="mode" /> 参数不是有效 <see cref="T:System.IO.FileMode" /> 枚举值。
                
                  - 或 -
                
                  <paramref name="access" /> 参数不是有效 <see cref="T:System.IO.FileAccess" /> 枚举值。
                </exception>
      <exception cref="T:System.IO.IOException">
                  <paramref name="mode" /> 或 <paramref name="access" /> 软件包和部件流与不兼容。
                
                  - 或 -
                
                  <paramref name="access" /> 参数被指定为 <see cref="F:System.IO.FileAccess.Read" /> 但 <paramref name="mode" /> 参数需要写访问权限。
                    (<see cref="T:System.IO.FileMode" /> 值 <see cref="F:System.IO.FileMode.Create" />, ，<see cref="F:System.IO.FileMode.CreateNew" />, ，<see cref="F:System.IO.FileMode.Truncate" />, ，和 <see cref="F:System.IO.FileMode.Append" /> 需要 <see cref="F:System.IO.FileAccess.Write" /> 或 <see cref="F:System.IO.FileAccess.ReadWrite" /> 访问。)
                
                  - 或 -
                
                  返回的流对象 <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> 派生子类的方法是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)">
      <summary>
              当在派生类中重写返回打开与指定的部分内容流 <see cref="T:System.IO.FileMode" /> 和 <see cref="T:System.IO.FileAccess" />。
            </summary>
      <param name="mode">
                要在其中打开内容流 I/O 模式。
              </param>
      <param name="access">
                要在打开内容的流中使用的访问权限。
              </param>
      <returns>
              部件内容的数据流。
            </returns>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.RelationshipExists(System.String)">
      <summary>
              返回一个值，该值指示此部分是否拥有与指定的关系 <see cref="P:System.IO.Packaging.PackageRelationship.Id" />。
            </summary>
      <param name="id">
                <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> 要检查的关系。
              </param>
      <returns>
              <see langword="true" /> 如果此部分拥有具有指定关系 <paramref name="id" />; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="id" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  <paramref name="id" /> 不是有效的 XML 标识符。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  该部件已被删除。
                
                  - 或 -
                
                  <see cref="P:System.IO.Packaging.PackagePart.Package" /> 未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" /> 已调用)。
                </exception>
      <exception cref="T:System.IO.IOException">
                  包是只写 （不能读取关系信息）。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePartCollection.GetEnumerator">
      <summary>
              返回一个枚举数循环访问集合中的部分。
            </summary>
      <returns>
              用于循环访问的枚举数 <see cref="T:System.IO.Packaging.PackagePart" /> 集合中的元素。
            </returns>
    </member>
    <member name="M:System.IO.Packaging.PackagePartCollection.System#Collections#Generic#IEnumerable{System#IO#Packaging#PackagePart}#GetEnumerator">
      <summary>
              返回一个循环访问集合的枚举器。
            </summary>
      <returns>
              一个可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 对象。
            </returns>
    </member>
    <member name="M:System.IO.Packaging.PackagePartCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              有关此成员的说明，请参阅 <see cref="M:System.Collections.IEnumerable.GetEnumerator" />。
            </summary>
      <returns>
              一个可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。
            </returns>
    </member>
    <member name="M:System.IO.Packaging.PackageProperties.#ctor">
      <summary>
              初始化 <see cref="T:System.IO.Packaging.PackageProperties" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.IO.Packaging.PackageProperties.Dispose">
      <summary>
              释放 <see cref="T:System.IO.Packaging.PackageProperties" /> 实例使用的所有资源。
            </summary>
    </member>
    <member name="M:System.IO.Packaging.PackageProperties.Dispose(System.Boolean)">
      <summary>
              释放使用的非托管的资源 <see cref="T:System.IO.Packaging.PackageProperties" /> 实例，并可以选择释放托管的资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.IO.Packaging.PackageRelationshipCollection.GetEnumerator">
      <summary>
              返回用于遍历集合中的关系的枚举。
            </summary>
      <returns>
              用于循环访问的枚举数 <see cref="T:System.IO.Packaging.PackageRelationship" /> 集合中的元素。
            </returns>
    </member>
    <member name="M:System.IO.Packaging.PackageRelationshipCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，但不可直接在代码中使用。
            </summary>
      <returns>
              请不要使用 — 使用 <see cref="M:System.IO.Packaging.PackageRelationshipCollection.GetEnumerator" />。
            </returns>
    </member>
    <member name="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)">
      <summary>
              初始化 <see cref="T:System.IO.Packaging.PackageRelationshipSelector" /> 类的新实例。
            </summary>
      <param name="sourceUri">
                
                  统一资源标识符 (URI) 的 <see cref="T:System.IO.Packaging.PackagePart" /> 或 <see cref="T:System.IO.Packaging.Package" /> (<paramref name="SourceUri" />="/") 拥有关系。
              </param>
      <param name="selectorType">
                一种 <paramref name="selectionCriteria" />, ，要么按关系 <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Id" /> 或关系 <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Type" />。
              </param>
      <param name="selectionCriteria">
                用于选择关系的限定字符串基于 <paramref name="selectorType" />。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="sourceUri" /> 或 <paramref name="selectionCriteria" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="selectorType" /> 参数无效。
                </exception>
      <exception cref="T:System.Xml.XmlException">
                  <paramref name="selectorType" /> 参数是 <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Id" /> 但 <paramref name="selectionCriteria" /> 不是有效 XML 架构定义 (XSD) 标识符 (ID)。 
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="selectionCriteria" /> 无效，无法为指定 <paramref name="selectorType" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="sourceUri" /> 不是 <see cref="T:System.IO.Packaging.Package" /> 根 （"/"），也不是有效 <see cref="T:System.IO.Packaging.PackagePart" /> URI。 
                </exception>
    </member>
    <member name="M:System.IO.Packaging.PackageRelationshipSelector.Select(System.IO.Packaging.Package)">
      <summary>
              返回的列表 <see cref="T:System.IO.Packaging.PackageRelationship" /> 匹配已定义的对象 <see cref="P:System.IO.Packaging.PackageRelationshipSelector.SourceUri" />, ，<see cref="P:System.IO.Packaging.PackageRelationshipSelector.SelectorType" />, ，和 <see cref="P:System.IO.Packaging.PackageRelationshipSelector.SelectionCriteria" />。
            </summary>
      <param name="package">
                从中选择基于选择条件的关系包。
              </param>
      <returns>
              为指定的选择参数匹配的关系的列表 <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> 构造函数。
            </returns>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.ComparePackUri(System.Uri,System.Uri)">
      <summary>
              返回一个值，该值指示两个包 URI 是否等效。
            </summary>
      <param name="firstPackUri">
                第一个包 URI。
              </param>
      <param name="secondPackUri">
                第二个包 URI。
              </param>
      <returns>
              一个带符号整数，指示 <paramref name="firstPackUri" /> 和 <paramref name="secondPackUri" /> 之间的关系。
            
                      值
                    
                      含义
                    
                      小于 0
                    
                      <paramref name="firstPackUri" /> 小于 <paramref name="secondPackUri" />。
                    
                      0
                    
                      <paramref name="firstPackUri" /> 与 <paramref name="secondPackUri" /> 相等。
                    
                      大于 0
                    
                      <paramref name="firstPackUri" /> 大于 <paramref name="secondPackUri" />。
                    </returns>
      <exception cref="T:System.ArgumentException">
                  <paramref name="firstPackUri" /> 或 <paramref name="secondPackUri" /> 不是绝对 URI。
                
                  - 或 -
                
                  <paramref name="firstPackUri" /> 或 <paramref name="secondPackUri" /> 不以“pack://”方案开头。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.ComparePartUri(System.Uri,System.Uri)">
      <summary>
              返回一个值，该值指示两个包一部分 URI 是等效的。
            </summary>
      <param name="firstPartUri">
                
                  URI 的第一个 <see cref="T:System.IO.Packaging.PackagePart" />。
              </param>
      <param name="secondPartUri">
                
                  URI 第二个 <see cref="T:System.IO.Packaging.PackagePart" />。
              </param>
      <returns>
              一个值，指示之间的关系 <paramref name="firstPartUri" /> 和 <paramref name="secondPartUri" />。
            
                      值
                    
                      含义
                    
                      小于 0
                    
                      <paramref name="firstPartUri" /> 小于 <paramref name="secondPartUri" />。
                    
                      0
                    
                      <paramref name="firstPartUri" /> 与 <paramref name="secondPartUri" /> 相等。
                    
                      大于 0
                    
                      <paramref name="firstPartUri" /> 大于 <paramref name="secondPartUri" />。
                    </returns>
      <exception cref="T:System.ArgumentException">
                  <paramref name="firstPartUri" /> 或 <paramref name="secondPartUri" /> 不是有效的一部分 URI 语法。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.Create(System.Uri)">
      <summary>
              创建一个指向包的新包 URI。
            </summary>
      <param name="packageUri">
                引用的 <see cref="T:System.IO.Packaging.Package" /> 的 URI。
              </param>
      <returns>
              由给定的 <paramref name="packageUri" /> 引用的 <see cref="T:System.IO.Packaging.Package" /> 的包 URI。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="packageUri" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="packageUri" /> 不是绝对 URI。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.Create(System.Uri,System.Uri)">
      <summary>
              已知 <see cref="T:System.IO.Packaging.Package" /> URI 及包中部件的 URI URI。
            </summary>
      <param name="packageUri">
                
                  URI 的 <see cref="T:System.IO.Packaging.Package" />。
              </param>
      <param name="partUri">
                包中 <see cref="T:System.IO.Packaging.PackagePart" /> 的 URI。
              </param>
      <returns>
              给定 <see cref="T:System.IO.Packaging.PackagePart" /> 的包 URI。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="packageUri" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="packageUri" /> 不是绝对 URI。
                
                  - 或 -
                
                  <paramref name="partUri" /> 不是有效的部件 URI 语法。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.Create(System.Uri,System.Uri,System.String)">
      <summary>
              在给定 <see cref="T:System.IO.Packaging.Package" /> URI、包中部件的 URI 以及要追加的“#”片段的情况下创建包 URI。
            </summary>
      <param name="packageUri">
                <see cref="T:System.IO.Packaging.Package" /> 的 URI。
              </param>
      <param name="partUri">
                包中 <see cref="T:System.IO.Packaging.PackagePart" /> 的 URI。
              </param>
      <param name="fragment">
                标识包部件中的元素的“#”引用。
              </param>
      <returns>
              标识指定包、包部件和片段的包 URI。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="packageUri" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="packageUri" /> 不是绝对 URI。
                
                  - 或 -
                
                  <paramref name="partUri" /> 不是有效的部件 URI 语法。
                
                  - 或 -
                
                  <paramref name="fragment" /> 为空或不以“#”开头。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)">
      <summary>
              创建一个格式化 <see cref="T:System.IO.Packaging.PackagePart" /> URI。
            </summary>
      <param name="partUri">
                URI 的 <see cref="T:System.IO.Packaging.PackagePart" /> 包内。
              </param>
      <returns>
              一个格式化 <see cref="T:System.IO.Packaging.PackagePart" /> URI。
            </returns>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetNormalizedPartUri(System.Uri)">
      <summary>
              返回指定的标准化的形式 <see cref="T:System.IO.Packaging.PackagePart" /> URI。
            </summary>
      <param name="partUri">
                <see cref="T:System.IO.Packaging.PackagePart" /> URI 进行规范化。
              </param>
      <returns>
              规范化的形式给定 <paramref name="partUri" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="partUri" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetPackageUri(System.Uri)">
      <summary>
              返回指向所指定包 URI 的整个程序包的内部 URI。
            </summary>
      <param name="packUri">
                从中返回 <see cref="T:System.IO.Packaging.Package" /> URI 的包 URI。
              </param>
      <returns>
              来自指定 <paramref name="packUri" /> 的 <see cref="T:System.IO.Packaging.Package" /> 的 URI。
            </returns>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)">
      <summary>
              返回指定包 URI 内的 <see cref="T:System.IO.Packaging.PackagePart" /> 的 URI。
            </summary>
      <param name="packUri">
                从中返回 <see cref="T:System.IO.Packaging.PackagePart" /> URI 的包 URI。
              </param>
      <returns>
              给定 <paramref name="packUri" /> 中 <see cref="T:System.IO.Packaging.PackagePart" /> 的 URI，如果 <paramref name="packUri" /> 指向包而不是 <see cref="T:System.IO.Packaging.PackagePart" />，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetRelationshipPartUri(System.Uri)">
      <summary>
              返回 URI 关联与指定的关系部件 <see cref="T:System.IO.Packaging.PackagePart" />。
            </summary>
      <param name="partUri">
                <see cref="P:System.IO.Packaging.PackagePart.Uri" /> 的 <see cref="T:System.IO.Packaging.PackagePart" /> 来返回的关联 URI <see cref="T:System.IO.Packaging.PackageRelationship" />。
              </param>
      <returns>
              URI 的 <see cref="T:System.IO.Packaging.PackageRelationship" /> 与相关联部件 <see cref="T:System.IO.Packaging.PackagePart" /> 由标识 <paramref name="partUri" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="partUri" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="partUri" /> 语法无效，不能为包部件 URI。
                
                  - 或 -
                
                  <paramref name="partUri" /> 是一个绝对 URI。
                
                  - 或 -
                
                  <paramref name="partUri" /> 引用关系部件。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetRelativeUri(System.Uri,System.Uri)">
      <summary>
              返回相对 URI 指定两个区域之间 <see cref="T:System.IO.Packaging.PackagePart" /> URI。 
            </summary>
      <param name="sourcePartUri">
                
                  URI 源部件。
              </param>
      <param name="targetPartUri">
                
                  URI 的目标部件。
              </param>
      <returns>
              使用相对 URI 从 <paramref name="sourcePartUri" /> 到 <paramref name="targetPartUri" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="sourcePartUri" /> 或 <paramref name="targetPartUri" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetSourcePartUriFromRelationshipPartUri(System.Uri)">
      <summary>
              返回 <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri" /> 从 <see cref="T:System.IO.Packaging.PackageRelationship" /> 与指定 URI。
            </summary>
      <param name="relationshipPartUri">
                
                  URI 要返回的关系部件的 <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri" /> 从。
              </param>
      <returns>
              <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri" /> 的 <see cref="T:System.IO.Packaging.PackagePart" /> 从具有指定关系 <paramref name="relationshipPartUri" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="relationshipPartUri" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="relationshipPartUri" /> 是绝对 URI。
                
                  - 或 -
                
                  <paramref name="relationshipPartUri" /> 语法无效，不能 <see cref="T:System.IO.Packaging.PackagePart" />。
                
                  - 或 -
                
                  <paramref name="relationshipPartUri" /> 不引用关系部件。
                
                  - 或 -
                
                  <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri" /> 的关系部件引用另一个关系部件 （不是有效，请参阅备注）。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.IsRelationshipPartUri(System.Uri)">
      <summary>
              返回一个值，该值指示是否指定 URI 是 URI 的 <see cref="T:System.IO.Packaging.PackageRelationship" /> 部件。
            </summary>
      <param name="partUri">
                
                  URI 检查 <see cref="T:System.IO.Packaging.PackageRelationship" /> 部件。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="partUri" /> 标识 <see cref="T:System.IO.Packaging.PackageRelationship" /> 部分; 否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="partUri" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="partUri" /> 是绝对 URI。
                
                  - 或 -
                
                  <paramref name="partUri" /> 是一个无效 <see cref="T:System.IO.Packaging.PackagePart" /> 语法。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)">
      <summary>
              返回部件 URI 给定源部件 URI 和 URI 的相对路径的目标部件。
            </summary>
      <param name="sourcePartUri">
                源部件 URI 或"/"以指定 <see cref="T:System.IO.Packaging.Package" /> 根。
              </param>
      <param name="targetUri">
                指向目标部件的相对 URI。
              </param>
      <returns>
              之间指定的目标部件 URI 解析 <paramref name="SourcePartUri" /> 和 <paramref name="targetUri" /> 参数。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="sourcePartUri" /> 或 <paramref name="targetUri" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="sourcePartUri" /> 不是有效的一部分的 URI。
                
                  - 或 -
                
                  <paramref name="targetUri" /> 不是有效的相对 URI。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.DeleteUseLicense(System.Security.RightsManagement.ContentUser)">
      <summary>
              删除 <see cref="T:System.Security.RightsManagement.UseLicense" /> 指定用户在从加密的权限管理数据流。
            </summary>
      <param name="userKey">
                用户 <see cref="T:System.Security.RightsManagement.UseLicense" />   被删除。
              </param>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.GetEmbeddedUseLicenses">
      <summary>
              返回用户的字典集合和 <see cref="T:System.Security.RightsManagement.UseLicense" /> 键/值对从加密的权限管理数据流。
            </summary>
      <returns>
              用户的集合和 <see cref="T:System.Security.RightsManagement.UseLicense" /> 权限管理中包含的键/值对受保护的包。
            </returns>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.LoadPublishLicense">
      <summary>
              返回嵌入 <see cref="T:System.Security.RightsManagement.PublishLicense" /> 从加密的权限管理数据流。
            </summary>
      <returns>
              嵌入 <see cref="T:System.Security.RightsManagement.PublishLicense" />; 或 <see langword="null" />, ，如果包不包含 <see cref="T:System.Security.RightsManagement.PublishLicense" />。
            </returns>
      <exception cref="T:System.IO.FileFormatException">
                  此类的当前版本无法读取此包中的权限管理信息。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.LoadUseLicense(System.Security.RightsManagement.ContentUser)">
      <summary>
              返回指定的用户的嵌入 <see cref="T:System.Security.RightsManagement.UseLicense" /> 从加密的权限管理数据流。
            </summary>
      <param name="userKey">
                要返回的用户或用户组 <see cref="T:System.Security.RightsManagement.UseLicense" /> 有关。
              </param>
      <returns>
              <see cref="T:System.Security.RightsManagement.UseLicense" /> 为指定的用户; 或 <see langword="null" />, ，如果包不包含 <see cref="T:System.Security.RightsManagement.UseLicense" /> 匹配给定 <paramref name="userKey" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="userKey" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IO.FileFormatException">
                  此类的当前版本无法读取此包中的权限管理信息。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.SavePublishLicense(System.Security.RightsManagement.PublishLicense)">
      <summary>
              将保存给定 <see cref="T:System.Security.RightsManagement.PublishLicense" /> 对加密的权限管理数据流。
            </summary>
      <param name="publishLicense">
                要存储和嵌入包中的发布许可证。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="publishLicense" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.IO.FileFormatException">
                  此类的当前版本无法读取此包中的权限管理信息。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.SaveUseLicense(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.UseLicense)">
      <summary>
              将保存给定 <see cref="T:System.Security.RightsManagement.UseLicense" /> 指定用户对加密的权限管理数据流。
            </summary>
      <param name="userKey">
                用户 <see cref="T:System.Security.RightsManagement.UseLicense" />。
              </param>
      <param name="useLicense">
                要存储和嵌入包中的使用许可证。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="userKey" /> 或 <paramref name="useLicense" /> 参数是 <see langword="null" />。
                </exception>
      <exception cref="T:System.IO.FileFormatException">
                  此类的当前版本无法读取此包中的权限管理信息。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.CreateStream(System.String)">
      <summary>
              具有给定名称创建一个新的流。
            </summary>
      <param name="name">
                新流的名称。
              </param>
      <returns>
              使用指定的新流 <paramref name="name" />。
            </returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.CreateStream(System.String,System.IO.Packaging.CompressionOption,System.IO.Packaging.EncryptionOption)">
      <summary>
              创建具有给定名称的新流 <see cref="T:System.IO.Packaging.CompressionOption" />, ，和 <see cref="T:System.IO.Packaging.EncryptionOption" />。
            </summary>
      <param name="name">
                新流的名称。
              </param>
      <param name="compressionOption">
                数据流压缩选项。
              </param>
      <param name="encryptionOption">
                用于数据流的加密选项。
              </param>
      <returns>
              使用指定的新流 <paramref name="name" />, ，<paramref name="compressionOption" />, ，和 <paramref name="encryptionOption" />。
            </returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.CreateSubStorage(System.String)">
      <summary>
              新建子级 <see cref="T:System.IO.Packaging.StorageInfo" />，使此 <see cref="T:System.IO.Packaging.StorageInfo" /> 作为父级。
            </summary>
      <param name="name">
                新的子级数据存储区的名称。
              </param>
      <returns>
              新的子级数据存储区。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="name" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.DeleteStream(System.String)">
      <summary>
              删除具有指定名称的流。
            </summary>
      <param name="name">
                <see cref="T:System.IO.Packaging.StreamInfo" /> 要删除的流的名称。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="name" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.DeleteSubStorage(System.String)">
      <summary>
              删除指定的子存储区。
            </summary>
      <param name="name">
                要删除的子存储区的名称。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="name" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetStreamInfo(System.String)">
      <summary>
              返回 <see cref="T:System.IO.Packaging.StreamInfo" /> 具有给定名称的实例。
            </summary>
      <param name="name">
                名称 <see cref="T:System.IO.Packaging.StreamInfo" /> 实例中要返回。
              </param>
      <returns>
              使用指定的流 <paramref name="name" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="name" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetStreams">
      <summary>
              返回的数组 <see cref="T:System.IO.Packaging.StreamInfo" /> 此存储区中当前包含的实例。
            </summary>
      <returns>
              一个数组 <see cref="T:System.IO.Packaging.StreamInfo" /> 对象时，在此存储内定义的每个都指向的 I/O 流。
            </returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetSubStorageInfo(System.String)">
      <summary>
              返回具有给定名称的子级子存储。
            </summary>
      <param name="name">
                要返回的子存储的名称。
              </param>
      <returns>
              具有指定 <paramref name="name" /> 的子级子存储。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="name" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetSubStorages">
      <summary>
              返回当前包含在此存储区中的子级子存储区的数组。
            </summary>
      <returns>
              <see cref="T:System.IO.Packaging.StorageInfo" /> 对象的数组，每个数组都指向在此存储区中定义的子存储区。
            </returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.StreamExists(System.String)">
      <summary>
              返回一个值，该值指示是否存在给定的流。
            </summary>
      <param name="name">
                <see cref="T:System.IO.Packaging.StreamInfo" /> 要检查的名称。
              </param>
      <returns>
              <see langword="true" /> 如果具有指定的流 <paramref name="name" /> 存在; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.SubStorageExists(System.String)">
      <summary>
              返回一个值，该值表示指定的子存储区是否存在。
            </summary>
      <param name="name">
                要检查的子存储区的 <see cref="T:System.IO.Packaging.StorageInfo" /> 名称。
              </param>
      <returns>
              如果存在具有指定 <paramref name="name" /> 的子存储区，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.IO.Packaging.StreamInfo.GetStream">
      <summary>
              默认情况下打开的流返回 <see cref="T:System.IO.FileMode" /> 和 <see cref="T:System.IO.FileAccess" />。
            </summary>
      <returns>
              默认情况下打开的 I/O 流 <see cref="T:System.IO.Packaging.Package" /> 根 <see cref="T:System.IO.FileMode" /> 和 <see cref="T:System.IO.FileAccess" />...
            </returns>
    </member>
    <member name="M:System.IO.Packaging.StreamInfo.GetStream(System.IO.FileMode)">
      <summary>
              返回在指定的打开的 I/O 流 <see cref="T:System.IO.FileMode" />。
            </summary>
      <param name="mode">
                要在其中打开流文件模式。
              </param>
      <returns>
              指定的文件中打开的流 <paramref name="mode" />。
            </returns>
    </member>
    <member name="M:System.IO.Packaging.StreamInfo.GetStream(System.IO.FileMode,System.IO.FileAccess)">
      <summary>
              返回在指定的打开的 I/O 流 <see cref="T:System.IO.FileMode" /> 和与给定 <see cref="T:System.IO.FileAccess" />。
            </summary>
      <param name="mode">
                要在其中打开流文件模式。
              </param>
      <param name="access">
                文件访问模式中进行读取或写入到流。
              </param>
      <returns>
              在指定的 I/O 流打开 <see cref="T:System.IO.FileMode" /> 和与给定 <see cref="T:System.IO.FileAccess" />。
            </returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Permissions.MediaPermission" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.MediaPermissionAudio)">
      <summary>
              通过指定音频权限级别，初始化 <see cref="T:System.Security.Permissions.MediaPermission" /> 类的新实例。
            </summary>
      <param name="permissionAudio">
                <see cref="T:System.Security.Permissions.MediaPermissionAudio" /> 的枚举值。
              </param>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.MediaPermissionAudio,System.Security.Permissions.MediaPermissionVideo,System.Security.Permissions.MediaPermissionImage)">
      <summary>
              通过指定音频、视频和图像权限级别，初始化 <see cref="T:System.Security.Permissions.MediaPermission" /> 类的新实例。
            </summary>
      <param name="permissionAudio">
                <see cref="T:System.Security.Permissions.MediaPermissionAudio" /> 的枚举值。
              </param>
      <param name="permissionVideo">
                <see cref="T:System.Security.Permissions.MediaPermissionVideo" /> 的枚举值。
              </param>
      <param name="permissionImage">
                <see cref="T:System.Security.Permissions.MediaPermissionImage" /> 的枚举值。
              </param>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.MediaPermissionImage)">
      <summary>
              通过指定一个图像权限级别，初始化 <see cref="T:System.Security.Permissions.MediaPermission" /> 类的一个新实例。
            </summary>
      <param name="permissionImage">
                <see cref="T:System.Security.Permissions.MediaPermissionImage" /> 的枚举值。
              </param>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.MediaPermissionVideo)">
      <summary>
              新实例初始化 <see cref="T:System.Security.Permissions.MediaPermission" /> 类通过指定视频的权限级别。
            </summary>
      <param name="permissionVideo">
                <see cref="T:System.Security.Permissions.MediaPermissionVideo" /> 的枚举值。
              </param>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>
              通过指定一个权限状态，初始化 <see cref="T:System.Security.Permissions.MediaPermission" /> 类的一个新实例。
            </summary>
      <param name="state">
                <see cref="T:System.Security.Permissions.PermissionState" /> 的枚举值。
              </param>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.Copy">
      <summary>
              创建并返回当前权限的相同副本。
            </summary>
      <returns>
              当前权限的副本。
            </returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.FromXml(System.Security.SecurityElement)">
      <summary>
              从 XML 编码重新构造具有指定状态的权限。
            </summary>
      <param name="securityElement">
                用于重新构造权限的 XML 编码。
              </param>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.Intersect(System.Security.IPermission)">
      <summary>
              创建并返回一个权限，该权限是当前权限与指定权限的交集。
            </summary>
      <param name="target">
                要与当前权限相交的权限。
                 它必须与当前权限属于同一类型。
              </param>
      <returns>
              两个权限的交集是一个权限，用于描述两者共同描述的状态。
               只有将传递两个原始权限的请求将对相交的权限有效。
            </returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>
              确定当前权限是否为指定权限的子集。
            </summary>
      <param name="target">
                将要测试子集关系的权限。
                 此权限必须与当前权限属于同一类型。
              </param>
      <returns>
              如果当前权限是指定权限的子集，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.IsUnrestricted">
      <summary>
              返回一个值，该值指示当前权限是否不受限制。
            </summary>
      <returns>
              <see langword="true" /> 如果音频、 图像和视频的权限将所有没有限制;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.ToXml">
      <summary>
              创建权限及其当前状态的 XML 编码。
            </summary>
      <returns>
              权限的 XML 编码，包括任何状态信息。
            </returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.Union(System.Security.IPermission)">
      <summary>
              创建一个权限，该权限是当前权限与指定权限的并集。
            </summary>
      <param name="target">
                与当前权限合并的权限。
                 它必须与当前权限属于同一类型。
              </param>
      <returns>
              表示同时兼具当前权限和指定权限的新权限。
            </returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>
              初始化 <see cref="T:System.Security.Permissions.MediaPermissionAttribute" /> 的新实例。
            </summary>
      <param name="action">
                <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。
              </param>
    </member>
    <member name="M:System.Security.Permissions.MediaPermissionAttribute.CreatePermission">
      <summary>
              创建并返回一个新的 <see cref="T:System.Security.Permissions.MediaPermission" />。
            </summary>
      <returns>
              与此属性对应的 <see cref="T:System.Security.Permissions.MediaPermission" />。
            </returns>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.Permissions.WebBrowserPermission" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>
              通过指定一个权限状态，初始化 <see cref="T:System.Security.Permissions.WebBrowserPermission" /> 类的一个新实例。
            </summary>
      <param name="state">
                <see cref="T:System.Security.Permissions.PermissionState" /> 的枚举值。
              </param>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.#ctor(System.Security.Permissions.WebBrowserPermissionLevel)">
      <summary>
              通过指定 Web 浏览器的权限级别，初始化 <see cref="T:System.Security.Permissions.WebBrowserPermission" /> 类的一个新实例。
            </summary>
      <param name="webBrowserPermissionLevel">
                <see cref="T:System.Security.Permissions.WebBrowserPermissionLevel" /> 的枚举值。
              </param>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.Copy">
      <summary>
              创建并返回当前权限的相同副本。
            </summary>
      <returns>
              当前权限的副本。
            </returns>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.FromXml(System.Security.SecurityElement)">
      <summary>
              从 XML 编码重新构造具有指定状态的权限。
            </summary>
      <param name="securityElement">
                用于重新构造权限的 XML 编码。
              </param>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.Intersect(System.Security.IPermission)">
      <summary>
              创建并返回一个权限，该权限是当前权限与指定权限的交集。
            </summary>
      <param name="target">
                要与当前权限相交的权限。
                 它必须与当前权限属于同一类型。
              </param>
      <returns>
              两个权限的交集是一个权限，用于描述两者共同描述的状态。
               只有将传递两个原始权限的请求将对相交的权限有效。
            </returns>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>
              确定当前权限是否为指定权限的子集。
            </summary>
      <param name="target">
                将要测试子集关系的权限。
                 此权限必须与当前权限属于同一类型。
              </param>
      <returns>
              如果当前权限是指定权限的子集，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.IsUnrestricted">
      <summary>
              返回一个值，该值指示当前权限是否不受限制。
            </summary>
      <returns>
              如果 <see cref="P:System.Security.Permissions.WebBrowserPermission.Level" /> 属性设置为 <see cref="F:System.Security.Permissions.WebBrowserPermissionLevel.Unrestricted" />，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.ToXml">
      <summary>
              创建权限及其当前状态的 XML 编码。
            </summary>
      <returns>
              权限的 XML 编码，包括任何状态信息。
            </returns>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.Union(System.Security.IPermission)">
      <summary>
              创建一个权限，该权限是当前权限与指定权限的并集。
            </summary>
      <param name="target">
                与当前权限合并的权限。
                 它必须与当前权限属于同一类型。
              </param>
      <returns>
              表示同时兼具当前权限和指定权限的新权限。
            </returns>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>
              使用指定的 <see cref="T:System.Security.Permissions.WebBrowserPermissionAttribute" /> 初始化 <see cref="T:System.Security.Permissions.SecurityAction" /> 类的新实例。
            </summary>
      <param name="action">
                <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。
              </param>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermissionAttribute.CreatePermission">
      <summary>
              创建并返回 <see cref="T:System.Security.Permissions.WebBrowserPermission" /> 类的新实例。
            </summary>
      <returns>
              与安全声明相对应的 <see cref="T:System.Security.Permissions.WebBrowserPermission" />。
            </returns>
    </member>
    <member name="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)">
      <summary>
              新实例初始化 <see cref="T:System.Security.RightsManagement.ContentGrant" /> 授予指定的类 <see cref="T:System.Security.RightsManagement.ContentUser" /> 指定 <see cref="T:System.Security.RightsManagement.ContentRight" />。
            </summary>
      <param name="user">
                授予用户访问权限。
              </param>
      <param name="right">
                访问权限被授予。
              </param>
    </member>
    <member name="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight,System.DateTime,System.DateTime)">
      <summary>
              新实例初始化 <see cref="T:System.Security.RightsManagement.ContentGrant" /> 授予指定的类 <see cref="T:System.Security.RightsManagement.ContentUser" /> 指定 <see cref="T:System.Security.RightsManagement.ContentRight" /> 是否有指定 <see cref="T:System.DateTime" /> 持续时间。
            </summary>
      <param name="user">
                授予用户访问权限。
              </param>
      <param name="right">
                访问权限被授予。
              </param>
      <param name="validFrom">
                起始日期和右侧开始的时间。
              </param>
      <param name="validUntil">
                结束日期和该权限到期的时间。
              </param>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)">
      <summary>
              初始化 <see cref="T:System.Security.RightsManagement.ContentUser" /> 类的新实例。
            </summary>
      <param name="name">
                用户或组的名称。
              </param>
      <param name="authenticationType">
                用于身份验证方法。
              </param>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.Equals(System.Object)">
      <summary>
              返回一个值，该值指示是否此 <see cref="T:System.Security.RightsManagement.ContentUser" /> 等效于另一个给定实例。
            </summary>
      <param name="obj">
                要比较相等的用户实例。
              </param>
      <returns>
              <see langword="true" /> 如果 <see cref="P:System.Security.RightsManagement.ContentUser.Name" /> 和 <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType" /> 都是相同的此用户，给定的用户; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.GetHashCode">
      <summary>
              返回计算所得的哈希代码基于用户 <see cref="P:System.Security.RightsManagement.ContentUser.Name" /> 和 <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType" />。
            </summary>
      <returns>
              从用户的哈希代码计算 <see cref="P:System.Security.RightsManagement.ContentUser.Name" /> 和 <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType" />。
            </returns>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.IsAuthenticated">
      <summary>
              返回一个值，该值指示是否对用户当前身份验证。
            </summary>
      <returns>
              <see langword="true" /> 如果用户当前通过身份验证;否则为 <see langword="false" />。
                默认值是 <see langword="false" /> 直到身份验证。
            </returns>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])">
      <summary>
              密码以明文形式的文本进行解密。
            </summary>
      <param name="cryptoText">
                要解密的密码文本。
              </param>
      <returns>
              解密明文 <paramref name="cryptoText" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="cipherText" /> 为 null。
                </exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">
                  未授予解密权限。
                </exception>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Dispose">
      <summary>
              释放由 <see cref="T:System.Security.RightsManagement.CryptoProvider" /> 使用的所有资源。
            </summary>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Dispose(System.Boolean)">
      <summary>
              释放由 <see cref="T:System.Security.RightsManagement.CryptoProvider" /> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])">
      <summary>
              将明文加密为密文。
            </summary>
      <param name="clearText">
                要加密的明文内容。
              </param>
      <returns>
              指定 <paramref name="clearText" /> 的已加密密文。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="clearText" /> 为 null。
                </exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">
                  不允许加密。
                </exception>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Finalize">
      <summary>
              释放资源并执行内部清理之前通过垃圾回收回收实例。
            </summary>
    </member>
    <member name="M:System.Security.RightsManagement.LocalizedNameDescriptionPair.#ctor(System.String,System.String)">
      <summary>
              初始化 <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair" /> 类的新实例。
            </summary>
      <param name="name">
                区域设置的值 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> 属性。
              </param>
      <param name="description">
                区域设置的值 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> 属性。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  要么 <paramref name="name" /> 参数或 <paramref name="description" /> 参数是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.RightsManagement.LocalizedNameDescriptionPair.Equals(System.Object)">
      <summary>
              指示是否 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> 和 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> 给定对象的属性匹配此 <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair" />。
            </summary>
      <param name="obj">
                要比较的对象 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> 和 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> 的属性。
              </param>
      <returns>
              <see langword="true" /> 如果 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> 和 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> 给定对象的属性与此实例的匹配; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Security.RightsManagement.LocalizedNameDescriptionPair.GetHashCode">
      <summary>
              获取基于 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> 和 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> 属性计算所得的哈希代码。
            </summary>
      <returns>
              基于此 <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair" />.的 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> 和 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> 属性计算所得的哈希代码。
            </returns>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Security.RightsManagement.PublishLicense" /> 类从指定序列化和签名 <see cref="T:System.Security.RightsManagement.PublishLicense" />。
            </summary>
      <param name="signedPublishLicense">
                已签名，并序列化发布许可证。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="signedPublishLicense" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">
                  许可证无效。
                </exception>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.AcquireUseLicense(System.Security.RightsManagement.SecureEnvironment)">
      <summary>
              尝试获取 <see cref="T:System.Security.RightsManagement.UseLicense" /> 为用户或用户组中指定 <see cref="T:System.Security.RightsManagement.SecureEnvironment" />。
            </summary>
      <param name="secureEnvironment">
                许可证激活和绑定的安全环境。
              </param>
      <returns>
              <see cref="T:System.Security.RightsManagement.UseLicense" /> 为用户或用户组中指定 <paramref name="secureEnvironment" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="secureEnvironment" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">
                  身份验证失败。
                </exception>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.AcquireUseLicenseNoUI(System.Security.RightsManagement.SecureEnvironment)">
      <summary>
              尝试获取 <see cref="T:System.Security.RightsManagement.UseLicense" /> 为用户或用户组中指定 <see cref="T:System.Security.RightsManagement.SecureEnvironment" />。
            </summary>
      <param name="secureEnvironment">
                许可证激活和绑定的安全环境。
              </param>
      <returns>
              <see cref="T:System.Security.RightsManagement.UseLicense" /> 为用户或用户组中指定 <paramref name="secureEnvironment" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="secureEnvironment" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">
                  身份验证失败。
                </exception>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.DecryptUnsignedPublishLicense(System.Security.RightsManagement.CryptoProvider)">
      <summary>
              返回一个已解密 <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" /> 已签名的此版本 <see cref="T:System.Security.RightsManagement.PublishLicense" />。
            </summary>
      <param name="cryptoProvider">
                要使用该许可证进行解密的权限管理服务。
              </param>
      <returns>
              此许可证解密后，未签名版本。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="cryptoProvider" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.ToString">
      <summary>
              返回用于创建此许可证的序列化 XrML 字符串。
            </summary>
      <returns>
              用于创建此许可证的序列化 Extensible Rights Markup Language (XrML) 字符串。
            </returns>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.RightsManagement.RightsManagementException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see cref="T:System.Security.RightsManagement.RightsManagementException" /> 类并设置 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存储的有关异常的信息。
            </summary>
      <param name="info">
                包含序列化数据的对象。
              </param>
      <param name="context">
                关于来源和目标的上下文信息
              </param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode)">
      <summary>
              新实例初始化 <see cref="T:System.Security.RightsManagement.RightsManagementException" /> 类与给定 <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" />。
            </summary>
      <param name="failureCode">
                失败的错误代码。
              </param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode,System.Exception)">
      <summary>
              新实例初始化 <see cref="T:System.Security.RightsManagement.RightsManagementException" /> 类与给定 <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" /> 和 <see cref="P:System.Exception.InnerException" />。
            </summary>
      <param name="failureCode">
                失败的错误代码。
              </param>
      <param name="innerException">
                导致错误的异常实例。
              </param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Security.RightsManagement.RightsManagementException" /> 类与给定 <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" /> 和 <see cref="P:System.Exception.Message" />。
            </summary>
      <param name="failureCode">
                失败的错误代码。
              </param>
      <param name="message">
                描述错误的消息。
              </param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode,System.String,System.Exception)">
      <summary>
              新实例初始化 <see cref="T:System.Security.RightsManagement.RightsManagementException" /> 类与给定 <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" />, ，<see cref="P:System.Exception.Message" /> 和 <see cref="P:System.Exception.InnerException" />。
            </summary>
      <param name="failureCode">
                失败的错误代码。
              </param>
      <param name="message">
                描述错误的消息。
              </param>
      <param name="innerException">
                导致错误的异常实例。
              </param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Security.RightsManagement.RightsManagementException" /> 使用给定的消息的类。
            </summary>
      <param name="message">
                描述错误的消息。
              </param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.String,System.Exception)">
      <summary>
              新实例初始化 <see cref="T:System.Security.RightsManagement.RightsManagementException" /> 类与给定 <see cref="P:System.Exception.Message" /> 和 <see cref="P:System.Exception.InnerException" />。
            </summary>
      <param name="message">
                描述错误的消息。
              </param>
      <param name="innerException">
                导致此异常的异常实例。
              </param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              集 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存储参数名称和有关异常的信息。
            </summary>
      <param name="info">
                包含序列化数据的对象。
              </param>
      <param name="context">
                关于来源和目标的上下文信息
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="info" /> 参数为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.AuthenticationType,System.Security.RightsManagement.UserActivationMode)">
      <summary>
              创建给定了应用程序权限清单 <see cref="T:System.Security.RightsManagement.AuthenticationType" /> 和 <see cref="T:System.Security.RightsManagement.UserActivationMode" /> 的安全客户端会话。
            </summary>
      <param name="applicationManifest">
                应用程序权限清单。
              </param>
      <param name="authentication">
                身份验证的方法。
              </param>
      <param name="userActivationMode">
                用户权限帐户证书的类型。
              </param>
      <returns>
              一个用于激活、许可证绑定和其他权限管理操作的安全客户端会话。
            </returns>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.ContentUser)">
      <summary>
              使用给定权限清单为指定用户创建安全客户端会话。
            </summary>
      <param name="applicationManifest">
                应用程序权限清单。
              </param>
      <param name="user">
                要为其授予权限管理内容访问权限的用户或用户组。
              </param>
      <returns>
              一个用于激活、许可证绑定和其他权限管理操作的安全客户端会话。
            </returns>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Dispose">
      <summary>
              释放由 <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> 使用的所有资源。
            </summary>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Dispose(System.Boolean)">
      <summary>
              释放由 <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> 占用的非托管资源，还可以另外再释放托管资源。
            </summary>
      <param name="disposing">
                若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers">
      <summary>
              返回激活用户的列表。
            </summary>
      <returns>
              当前活动用户的列表。
            </returns>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.IsUserActivated(System.Security.RightsManagement.ContentUser)">
      <summary>
              表示是否已激活访问权限管理内容的给定用户。
            </summary>
      <param name="user">
                要为其授予权限管理内容访问权限的用户或用户组。
              </param>
      <returns>
              如果已激活访问权限管理内容的给定 <paramref name="user" />，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.RemoveActivatedUser(System.Security.RightsManagement.ContentUser)">
      <summary>
              删除指定用户的许可证激活。
            </summary>
      <param name="user">
                要为其删除许可证激活的用户。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="user" /> 参数为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  给定的 <paramref name="user" /> 既未经过 Windows 身份验证也未经过 Passport 身份验证的验证。
                </exception>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.#ctor">
      <summary>
              初始化 <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" /> 从指定的类 XrML 发布许可证模板。 </summary>
      <param name="publishLicenseTemplate">
                
                  Extensible Rights Markup Language (XrML) 发布许可证模板用于创建此许可证。
              </param>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.Sign(System.Security.RightsManagement.SecureEnvironment,System.Security.RightsManagement.UseLicense@)">
      <summary>
              创建一个已签名 <see cref="T:System.Security.RightsManagement.PublishLicense" /> ，并返回 <see cref="T:System.Security.RightsManagement.UseLicense" /> 文档作者。
            </summary>
      <param name="secureEnvironment">
                许可证激活和绑定的安全环境。
              </param>
      <param name="authorUseLicense">
                返回 <see cref="T:System.Security.RightsManagement.UseLicense" /> 文档作者。
              </param>
      <returns>
              有符号的 <see cref="T:System.Security.RightsManagement.PublishLicense" /> ，它由签名这创建 <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" />。
            </returns>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.ToString">
      <summary>
              返回从 <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" /> 的 XrML 创建的序列化模板。
            </summary>
      <returns>
              从 <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" /> 的 XrML 创建的序列化模板。
            </returns>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.#ctor(System.String)">
      <summary>
              初始化 <see cref="T:System.Security.RightsManagement.UseLicense" /> 类的新实例。
            </summary>
      <param name="useLicense">
                使用许可证，以序列化 Extensible Rights Markup Language (XrML) 窗体。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="useLicense" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">
                  <paramref name="useLicense" /> 无效。
                </exception>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.Bind(System.Security.RightsManagement.SecureEnvironment)">
      <summary>
              将许可证绑定到给定的 <see cref="T:System.Security.RightsManagement.SecureEnvironment" />。
            </summary>
      <param name="secureEnvironment">
                要将许可证绑定到的环境。
              </param>
      <returns>
              如果许可证绑定成功，则为 <see cref="T:System.Security.RightsManagement.CryptoProvider" /> 实例；否则为 <see langword="null" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="secureEnvironment" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.Equals(System.Object)">
      <summary>
              指示此许可证是否等效于指定的另一个许可证。
            </summary>
      <param name="x">
                要比较的许可证。
              </param>
      <returns>
              <see langword="true" /> 如果这两种许可证等效项。否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.GetHashCode">
      <summary>
              返回与此许可证关联的哈希代码。
            </summary>
      <returns>
              此许可证的哈希代码。
            </returns>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.ToString">
      <summary>
              返回的序列化 XrML 字符串，用来创建此许可证。
            </summary>
      <returns>
              序列化 Extensible Rights Markup Language (XrML) 字符串最初传递到 <see cref="M:System.Security.RightsManagement.UseLicense.#ctor(System.String)" /> 构造函数。
            </returns>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.Windows.AttachedPropertyBrowsableAttribute" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableForTypeAttribute.#ctor(System.Type)">
      <summary>
              新实例初始化 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> 类，使用所提供 <paramref name="targetType" />。
            </summary>
      <param name="targetType">
                附加属性的使用范围的预期的类型，这 .NET Framework 特性 适用。
              </param>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableForTypeAttribute.Equals(System.Object)">
      <summary>
              确定是否当前 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> .NET Framework 特性 是否与指定对象相等。 
            </summary>
      <param name="obj">
                <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> 要与当前 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />。
              </param>
      <returns>
              如果指定的 <see langword="true" /> 等于当前的 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />，则为 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableForTypeAttribute.GetHashCode">
      <summary>
              返回此 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />.NET Framework 特性 的哈希代码。
            </summary>
      <returns>
              32 位无符号整数值。
            </returns>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.#ctor(System.Type)">
      <summary>
              初始化 <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> 类的新实例。
            </summary>
      <param name="attributeType">
                <see cref="T:System.Type" /> 的  .NET Framework 特性 还必须按顺序可在类上浏览的附加属性的类上应用，其中 <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> 应用...
              </param>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.Equals(System.Object)">
      <summary>
              确定是否当前 <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> .NET Framework 特性 是否与指定对象相等。 
            </summary>
      <param name="obj">
                <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> 要与当前 <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />。
              </param>
      <returns>
              如果指定的 <see langword="true" /> 等于当前的 <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />，则为 <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.GetHashCode">
      <summary>
              返回此 <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />.NET Framework 特性 的哈希代码。
            </summary>
      <returns>
              32 位无符号整数值。
            </returns>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.#ctor">
      <summary>
              初始化 <see cref="T:System.Windows.Converters.Int32RectValueSerializer" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>
              确定是否指定 <see cref="T:System.String" /> 可以转换为的一个实例 <see cref="T:System.Windows.Int32Rect" />。
            </summary>
      <param name="value">
                若要计算以供转换的字符串。
              </param>
      <param name="context">
                用于转换的上下文信息。
              </param>
      <returns>
              始终返回 <see langword="true" />。
            </returns>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
              确定是否指定 <see cref="T:System.Windows.Int32Rect" /> 可以转换为 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要进行计算以供转换的对象。
              </param>
      <param name="context">
                用于转换的上下文信息。
              </param>
      <returns>
              如果可将 <paramref name="value" /> 转换为 <see cref="T:System.String" />，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>
              将转换 <see cref="T:System.String" /> 到 <see cref="T:System.Windows.Int32Rect" />。
            </summary>
      <param name="value">
                要转换的字符串。
              </param>
      <param name="context">
                用于转换的上下文信息。
              </param>
      <returns>
              新实例 <see cref="T:System.Windows.Int32Rect" /> 基于提供 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
              将 <see cref="T:System.Windows.Int32Rect" /> 的实例转换为 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换为字符串的对象。
              </param>
      <param name="context">
                用于转换的上下文信息。
              </param>
      <returns>
              字符串表示形式指定 <see cref="T:System.Windows.Int32Rect" />。
            </returns>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.#ctor">
      <summary>
              初始化 <see cref="T:System.Windows.Converters.PointValueSerializer" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>
              确定是否指定 <see cref="T:System.String" /> 可以转换为的一个实例 <see cref="T:System.Windows.Point" />。
            </summary>
      <param name="value">
                若要计算以供转换的字符串。
              </param>
      <param name="context">
                用于转换的上下文信息。
              </param>
      <returns>
              始终返回 <see langword="true" />。
            </returns>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
              确定是否指定 <see cref="T:System.Windows.Point" /> 可以转换为 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要进行计算以供转换的对象。
              </param>
      <param name="context">
                用于转换的上下文信息。
              </param>
      <returns>
              如果可将 <paramref name="value" /> 转换为 <see cref="T:System.String" />，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>
              将转换 <see cref="T:System.String" /> 到 <see cref="T:System.Windows.Point" />。
            </summary>
      <param name="value">
                要转换的字符串。
              </param>
      <param name="context">
                用于转换的上下文信息。
              </param>
      <returns>
              新实例 <see cref="T:System.Windows.Point" /> 基于提供 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
              实例转换 <see cref="T:System.Windows.Point" /> 到 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换为字符串的对象。
              </param>
      <param name="context">
                用于转换的上下文信息。
              </param>
      <returns>
              字符串表示形式指定 <see cref="T:System.Windows.Point" />。
            </returns>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.#ctor">
      <summary>
              初始化 <see cref="T:System.Windows.Converters.RectValueSerializer" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>
              确定是否指定 <see cref="T:System.String" /> 可以转换为的一个实例 <see cref="T:System.Windows.Rect" />。
            </summary>
      <param name="value">
                若要计算以供转换的字符串。
              </param>
      <param name="context">
                用于转换的上下文信息。
              </param>
      <returns>
              始终返回 <see langword="true" />。
            </returns>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
              确定是否指定 <see cref="T:System.Windows.Rect" /> 可以转换为 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要进行计算以供转换的对象。
              </param>
      <param name="context">
                用于转换的上下文信息。
              </param>
      <returns>
              如果可将 <paramref name="value" /> 转换为 <see cref="T:System.String" />，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>
              将转换 <see cref="T:System.String" /> 到 <see cref="T:System.Windows.Rect" />。
            </summary>
      <param name="value">
                要转换的字符串。
              </param>
      <param name="context">
                用于转换的上下文信息。
              </param>
      <returns>
              新实例 <see cref="T:System.Windows.Rect" /> 基于提供 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
              将 <see cref="T:System.Windows.Rect" /> 的实例转换为 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换为字符串的对象。
              </param>
      <param name="context">
                用于转换的上下文信息。
              </param>
      <returns>
              字符串表示形式指定 <see cref="T:System.Windows.Rect" />。
            </returns>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.#ctor">
      <summary>
              初始化 <see cref="T:System.Windows.Converters.SizeValueSerializer" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>
              确定是否指定 <see cref="T:System.String" /> 可以转换为的一个实例 <see cref="T:System.Windows.Size" />。
            </summary>
      <param name="value">
                若要计算以供转换的字符串。
              </param>
      <param name="context">
                用于转换的上下文信息。
              </param>
      <returns>
              始终返回 <see langword="true" />。
            </returns>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
              确定是否指定 <see cref="T:System.Windows.Size" /> 可以转换为 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要进行计算以供转换的对象。
              </param>
      <param name="context">
                用于转换的上下文信息。
              </param>
      <returns>
              如果可将 <paramref name="value" /> 转换为 <see cref="T:System.String" />，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>
              将转换 <see cref="T:System.String" /> 到 <see cref="T:System.Windows.Size" />。
            </summary>
      <param name="value">
                要转换的字符串。
              </param>
      <param name="context">
                用于转换的上下文信息。
              </param>
      <returns>
              新实例 <see cref="T:System.Windows.Size" /> 基于提供 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
              实例转换 <see cref="T:System.Windows.Size" /> 到 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换为字符串的对象。
              </param>
      <param name="context">
                用于转换的上下文信息。
              </param>
      <returns>
              字符串表示形式指定 <see cref="T:System.Windows.Size" />。
            </returns>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.#ctor">
      <summary>
              初始化 <see cref="T:System.Windows.Converters.VectorValueSerializer" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>
              确定是否指定 <see cref="T:System.String" /> 可以转换为的一个实例 <see cref="T:System.Windows.Vector" />。
            </summary>
      <param name="value">
                若要计算以供转换的字符串。
              </param>
      <param name="context">
                用于转换的上下文信息。
              </param>
      <returns>
              始终返回 <see langword="true" />。
            </returns>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
              确定是否指定 <see cref="T:System.Windows.Vector" /> 可以转换为 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要进行计算以供转换的对象。
              </param>
      <param name="context">
                用于转换的上下文信息。
              </param>
      <returns>
              如果可将 <paramref name="value" /> 转换为 <see cref="T:System.String" />，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>
              将转换 <see cref="T:System.String" /> 到 <see cref="T:System.Windows.Vector" />。
            </summary>
      <param name="value">
                要转换的字符串。
              </param>
      <param name="context">
                用于转换的上下文信息。
              </param>
      <returns>
              新实例 <see cref="T:System.Windows.Vector" /> 基于提供 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
              将 <see cref="T:System.Windows.Vector" /> 的实例转换为 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换为字符串的对象。
              </param>
      <param name="context">
                用于转换的上下文信息。
              </param>
      <returns>
              指定的 <see cref="T:System.Windows.Vector" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.#ctor">
      <summary>
              初始化 <see cref="T:System.Windows.Data.DataSourceProvider" /> 类的新实例。
               这是受保护的构造函数。
            </summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.BeginInit">
      <summary>
              指示初始化此对象即将开始实施。没有隐式 <see cref="M:System.Windows.Data.DataSourceProvider.Refresh" /> 发生之前匹配 <see cref="M:System.Windows.Data.DataSourceProvider.EndInit" /> 调用方法。
            </summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.BeginQuery">
      <summary>
              当在派生类中重写时，此基类调用此方法时 <see cref="M:System.Windows.Data.DataSourceProvider.InitialLoad" /> 或 <see cref="M:System.Windows.Data.DataSourceProvider.Refresh" /> 已调用。
               如果刷新发生延迟或已禁用初始加载，基类会延迟调用。
            </summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.DeferRefresh">
      <summary>
              进入延迟循环，该循环可用于更改提供程序并延迟自动刷新的属性。
            </summary>
      <returns>
              一个可用于释放调用对象的 <see cref="T:System.IDisposable" /> 对象。
            </returns>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.EndInit">
      <summary>
              表示此对象的初始化已完成;这将导致 <see cref="M:System.Windows.Data.DataSourceProvider.Refresh" /> 当没有其他 <see cref="M:System.Windows.Data.DataSourceProvider.DeferRefresh" /> 未完成。
            </summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.InitialLoad">
      <summary>
              启动对基础数据模型的初始查询。
               在返回的结果 <see cref="P:System.Windows.Data.DataSourceProvider.Data" /> 属性。
            </summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
              引发 <see cref="E:System.Windows.Data.DataSourceProvider.PropertyChanged" /> 带有提供的参数的事件。
            </summary>
      <param name="e">
                要引发事件的参数。
              </param>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.OnQueryFinished(System.Object)">
      <summary>
              派生的类调用此方法以指示查询已完成。
            </summary>
      <param name="newData">
                查询的结果数据。
              </param>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.OnQueryFinished(System.Object,System.Exception,System.Windows.Threading.DispatcherOperationCallback,System.Object)">
      <summary>
              派生的类调用此方法以指示查询已完成。
            </summary>
      <param name="newData">
                查询的结果数据。
              </param>
      <param name="error">
                在运行查询时，出现错误。
                 此值是 <see langword="null" /> 是否存在任何错误。
              </param>
      <param name="completionWork">
                用于执行完成工作的可选委托 UI 线程，例如，若要设置其他属性。
              </param>
      <param name="callbackArguments">
                可选参数将作为一个参数，并且发送 <paramref name="completionWork" /> 委托。
              </param>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.Refresh">
      <summary>
              启动对基础数据模型刷新操作。
               在返回的结果 <see cref="P:System.Windows.Data.DataSourceProvider.Data" /> 属性。
            </summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.System#ComponentModel#ISupportInitialize#BeginInit">
      <summary>
              此成员支持 Windows Presentation Foundation (WPF) 基础结构，但不能在代码中直接使用。
            </summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.System#ComponentModel#ISupportInitialize#EndInit">
      <summary>
              此成员支持 Windows Presentation Foundation (WPF) 基础结构，但不能在代码中直接使用。
            </summary>
    </member>
    <member name="M:System.Windows.DependencyObject.#ctor">
      <summary>
              初始化 <see cref="T:System.Windows.DependencyObject" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)">
      <summary>
              清除属性的本地值。
               要清除的属性由 <see cref="T:System.Windows.DependencyProperty" /> 标识符指定。
            </summary>
      <param name="dp">
                要清除的由 <see cref="T:System.Windows.DependencyProperty" /> 对象引用指定的依赖属性。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  尝试对密封 <see cref="T:System.Windows.DependencyObject" /> 调用 <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" />。
                </exception>
    </member>
    <member name="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
      <summary>
              清除只读属性的本地值。
               要清除的属性由 <see cref="T:System.Windows.DependencyPropertyKey" /> 指定。
            </summary>
      <param name="key">
                要清除的依赖属性的关键字。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  尝试对密封 <see cref="T:System.Windows.DependencyObject" /> 调用 <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" />。
                </exception>
    </member>
    <member name="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
      <summary>
              对指定依赖属性的值进行强制。
               通过对调用方 <see cref="T:System.Windows.DependencyObject" /> 上存在的依赖属性的属性元数据中所指定的任何 <see cref="T:System.Windows.CoerceValueCallback" /> 函数进行调用来完成此操作。
            </summary>
      <param name="dp">
                要强制转换的依赖项属性的标识符。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  指定的 <paramref name="dp" /> 或其值无效或不存在。
                </exception>
    </member>
    <member name="M:System.Windows.DependencyObject.Equals(System.Object)">
      <summary>
              确定提供 <see cref="T:System.Windows.DependencyObject" /> 等同于当前 <see cref="T:System.Windows.DependencyObject" />。
            </summary>
      <param name="obj">
                <see cref="T:System.Windows.DependencyObject" />  要与当前实例进行比较。
              </param>
      <returns>
              <see langword="true" /> 如果两个实例是否相同，则为否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.DependencyObject.GetHashCode">
      <summary>
              获取此 <see cref="T:System.Windows.DependencyObject" /> 的哈希代码。
            </summary>
      <returns>
              带符号 32 位整数哈希代码。
            </returns>
    </member>
    <member name="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
      <summary>
              创建专用的枚举数，用于确定哪些依赖项属性具有本地设置值，对此 <see cref="T:System.Windows.DependencyObject" />。
            </summary>
      <returns>
              一个专用的本地值的枚举。
            </returns>
    </member>
    <member name="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
      <summary>
              对 <see cref="T:System.Windows.DependencyObject" /> 的此实例返回依赖属性的当前有效值。
            </summary>
      <param name="dp">
                要检索其值的属性的 <see cref="T:System.Windows.DependencyProperty" /> 标识符。
              </param>
      <returns>
              返回当前有效值。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  指定 <paramref name="dp" /> 或其值无效，或者指定 <paramref name="dp" /> 不存在。
                </exception>
    </member>
    <member name="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
      <summary>
              重新计算指定的依赖项属性的有效值
            </summary>
      <param name="dp">
                <see cref="T:System.Windows.DependencyProperty" /> 要使之无效的属性标识符。
              </param>
    </member>
    <member name="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
              每当更新此 <see cref="T:System.Windows.DependencyObject" /> 的任何依赖属性的有效值时调用。
               更改的特定依赖属性将在事件数据中报告。
            </summary>
      <param name="e">
                将包含相关依赖属性标识符、类型的属性元数据以及旧值和新值的事件数据。
              </param>
    </member>
    <member name="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
      <summary>
              如果存在，则返回依赖属性的本地值。
            </summary>
      <param name="dp">
                要检索其值的属性的 <see cref="T:System.Windows.DependencyProperty" /> 标识符。
              </param>
      <returns>
              返回本地值，或者如果未设置本地值，则返回 sentinel 值 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />。
            </returns>
    </member>
    <member name="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)">
      <summary>
              设置依赖属性的值而不更改其值源。
            </summary>
      <param name="dp">
                要设置的依赖属性的标识符。
              </param>
      <param name="value">
                新的本地值。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  尝试修改只读依赖属性或密封 <see cref="T:System.Windows.DependencyObject" /> 上的属性。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="value" /> 不是为 <paramref name="dp" /> 属性注册的正确类型。
                </exception>
    </member>
    <member name="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
      <summary>
              设置依赖属性的本地值，该值由其依赖属性标识符指定。
            </summary>
      <param name="dp">
                要设置的依赖属性的标识符。
              </param>
      <param name="value">
                新的本地值。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  尝试修改只读依赖属性或密封 <see cref="T:System.Windows.DependencyObject" /> 上的属性。
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="value" /> 不是为 <paramref name="dp" /> 属性注册的正确类型。
                </exception>
    </member>
    <member name="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
      <summary>
              设置一个只读依赖属性的本地值，该值由依赖属性的 <see cref="T:System.Windows.DependencyPropertyKey" /> 标识符指定。
            </summary>
      <param name="key">
                要设置的属性的 <see cref="T:System.Windows.DependencyPropertyKey" /> 标识符。
              </param>
      <param name="value">
                新的本地值。
              </param>
    </member>
    <member name="M:System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)">
      <summary>
              返回一个值，该值指示序列化进程是否应序列化所提供的依赖属性的值。
            </summary>
      <param name="dp">
                应被序列化的依赖项属性的标识符。
              </param>
      <returns>
              如果应对所提供的依赖属性的值进行序列化，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.DependencyObjectType.FromSystemType(System.Type)">
      <summary>
              返回 <see cref="T:System.Windows.DependencyObjectType" /> ，表示给定的系统 (CLR) 类型。
            </summary>
      <param name="systemType">
                系统 (CLR) 要转换类型。
              </param>
      <returns>
              一个 <see cref="T:System.Windows.DependencyObjectType" /> 表示系统 (CLR) 类型。
            </returns>
    </member>
    <member name="M:System.Windows.DependencyObjectType.GetHashCode">
      <summary>
              返回此 <see cref="T:System.Windows.DependencyObjectType" /> 的哈希代码。
            </summary>
      <returns>
              32 位有符号整数哈希代码。
            </returns>
    </member>
    <member name="M:System.Windows.DependencyObjectType.IsInstanceOfType(System.Windows.DependencyObject)">
      <summary>
              确定指定的对象是否是当前 <see cref="T:System.Windows.DependencyObjectType" /> 的实例。
            </summary>
      <param name="dependencyObject">
                将与当前 <see cref="T:System.Windows.DependencyObjectType" /> 进行比较的对象。
              </param>
      <returns>
              <see langword="true" /> 如果此类表示由当前 <see cref="T:System.Windows.DependencyObjectType" /> 的继承层次结构中是 <see cref="T:System.Windows.DependencyObject" /> 作为传递 <paramref name="d" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.DependencyObjectType.IsSubclassOf(System.Windows.DependencyObjectType)">
      <summary>
              确定当前 <see cref="T:System.Windows.DependencyObjectType" /> 是否派生自指定的 <see cref="T:System.Windows.DependencyObjectType" />。
            </summary>
      <param name="dependencyObjectType">
                要比较的 <see cref="T:System.Windows.DependencyObjectType" />。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="dependencyObjectType" /> 参数和当前 <see cref="T:System.Windows.DependencyObjectType" /> 表示类型的类，以及由当前类 <see cref="T:System.Windows.DependencyObjectType" /> 所表示的类都源自 <paramref name="dependencyObjectType" />。
               否则为 <see langword="false" />。
               此方法也返回 <see langword="false" /> 如果 <paramref name="dependencyObjectType" /> 和当前 <see cref="T:System.Windows.DependencyObjectType" /> 表示相同的类。
            </returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.AddOwner(System.Type)">
      <summary>
              将另一种类型添加为已注册的依赖属性的所有者。
            </summary>
      <param name="ownerType">
                要作为此依赖属性所有者添加的类型。
              </param>
      <returns>
              一个引用，它指向可标识依赖属性的原始 <see cref="T:System.Windows.DependencyProperty" /> 标识符。
               应通过将类添加为 <see langword="public static readonly" /> 字段来公开此标识符。
            </returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.AddOwner(System.Type,System.Windows.PropertyMetadata)">
      <summary>
              将其他类型添加为已注册的依赖对象所有者，从而为依赖属性提供依赖属性元数据使其存在于提供的所有者类型上。
            </summary>
      <param name="ownerType">
                要作为此依赖属性所有者添加的类型。
              </param>
      <param name="typeMetadata">
                在依赖属性存在于所提供的类型上时对其进行限定的元数据。
              </param>
      <returns>
              一个引用，它指向可标识依赖属性的原始 <see cref="T:System.Windows.DependencyProperty" /> 标识符。
               应通过将类添加为 <see langword="public static readonly" /> 字段来公开此标识符。
            </returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetHashCode">
      <summary>
              返回此 <see cref="T:System.Windows.DependencyProperty" /> 的哈希代码。
            </summary>
      <returns>
              此 <see cref="T:System.Windows.DependencyProperty" /> 的哈希代码。
            </returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetMetadata(System.Type)">
      <summary>
              返回此依赖属性的元数据，因为它存在于指定的现有类型上。
            </summary>
      <param name="forType">
                要从中检索依赖属性元数据的特定类型。
              </param>
      <returns>
              属性元数据对象。
            </returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObject)">
      <summary>
              返回此依赖属性的元数据，因为它存在于指定的对象实例上。
            </summary>
      <param name="dependencyObject">
                一个依赖对象，检查了其类型，以便确定元数据应来自依赖属性的哪个类型特定版本。
              </param>
      <returns>
              属性元数据对象。
            </returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObjectType)">
      <summary>
               为此依赖属性（当它位于指定的对象实例上时）返回元数据。
            </summary>
      <param name="dependencyObjectType">
                一个特定对象，该对象记录需要其中的依赖属性元数据的依赖项对象类型。
              </param>
      <returns>
              属性元数据对象。
            </returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.IsValidType(System.Object)">
      <summary>
              确定指定的值是否可接受的此依赖项属性的类型，原始的依赖关系属性注册中提供的属性类型相对照。
            </summary>
      <param name="value">
                要检查的值。
              </param>
      <returns>
              <see langword="true" /> 如果指定的值是已注册的属性类型或可接受的派生的类型;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.IsValidValue(System.Object)">
      <summary>
              确定是否将所提供的值接受类型的属性通过基本类型检查，而且还可能会允许该类型的值的范围内。
            </summary>
      <param name="value">
                要检查的值。
              </param>
      <returns>
              <see langword="true" /> 如果值是可以接受的并且是正确的类型或派生的类型;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)">
      <summary>
              当此依赖属性位于指定类型的实例上时为其指定替换元数据，以在该依赖属性继承自基类型时重写该属性已存在的元数据。
            </summary>
      <param name="forType">
                一种类型，在该类型上继承该依赖属性并将应用所提供的替换元数据。
              </param>
      <param name="typeMetadata">
                一种元数据，它将应用于重写类型上的依赖属性。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  尝试重写只读依赖属性的元数据（不能使用此签名完成该操作）。
                </exception>
      <exception cref="T:System.ArgumentException">
                  已为依赖属性建立元数据，因为它存在于所提供的类型上。
                </exception>
    </member>
    <member name="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)">
      <summary>
              当只读依赖属性位于指定类型的实例上时为其提供替换元数据，以便重写在最初注册依赖属性时提供的元数据。
               你必须为只读依赖属性传递 <see cref="T:System.Windows.DependencyPropertyKey" />，以免引发异常。
            </summary>
      <param name="forType">
                一种类型，在该类型上继承该依赖属性并将应用所提供的替换元数据。
              </param>
      <param name="typeMetadata">
                一种元数据，它将应用于重写类型上的依赖属性。
              </param>
      <param name="key">
                只读依赖属性的访问键。
              </param>
    </member>
    <member name="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)">
      <summary>
              使用指定的属性名称、属性类型和所有者类型注册依赖属性。
            </summary>
      <param name="name">
                要注册的依赖属性的名称。
                 名称必须在所有者类型的注册命名空间中是唯一的。
              </param>
      <param name="propertyType">
                属性的类型。
              </param>
      <param name="ownerType">
                正在注册依赖属性的所有者类型。
              </param>
      <returns>
              一个依赖属性标识符，应使用它来设置类中 <see langword="public static readonly" /> 字段的值。
               稍后将此标识符用来引用依赖属性，从而实现以编程方式设置其值或获取元数据等操作。
            </returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary>
              使用指定的属性名称、属性类型、所有者类型和属性元数据注册依赖属性。
            </summary>
      <param name="name">
                要注册的依赖属性的名称。
              </param>
      <param name="propertyType">
                属性的类型。
              </param>
      <param name="ownerType">
                正在注册依赖属性的所有者类型。
              </param>
      <param name="typeMetadata">
                依赖属性的属性元数据。
              </param>
      <returns>
              一个依赖属性标识符，应使用它来设置类中 <see langword="public static readonly" /> 字段的值。
               稍后将此标识符用来引用依赖属性，从而实现以编程方式设置其值或获取元数据等操作。
            </returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary>
              使用指定的属性名称、属性类型、所有者类型、属性元数据和属性的值验证回叫来注册依赖属性。
            </summary>
      <param name="name">
                要注册的依赖属性的名称。
              </param>
      <param name="propertyType">
                属性的类型。
              </param>
      <param name="ownerType">
                正在注册依赖属性的所有者类型。
              </param>
      <param name="typeMetadata">
                依赖属性的属性元数据。
              </param>
      <param name="validateValueCallback">
                对回调的引用，除了典型的类型验证之外，该引用还应执行依赖属性值的任何自定义验证。
              </param>
      <returns>
              一个依赖属性标识符，应使用它来设置类中 <see langword="public static readonly" /> 字段的值。
               稍后将此标识符用来引用依赖属性，从而实现以编程方式设置其值或获取元数据等操作。
            </returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)">
      <summary>
              使用指定的属性名称、属性类型和所有者类型注册附加属性。
            </summary>
      <param name="name">
                要注册的依赖属性的名称。
              </param>
      <param name="propertyType">
                属性的类型。
              </param>
      <param name="ownerType">
                正在注册依赖属性的所有者类型。
              </param>
      <returns>
              一个依赖属性标识符，应使用它来设置类中 <see langword="public static readonly" /> 字段的值。
               稍后将此标识符用来引用依赖属性，从而实现以编程方式设置其值或获取元数据等操作。
            </returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary>
              使用指定的属性名、属性类型、所有者类型和属性元数据注册附加的属性。
            </summary>
      <param name="name">
                要注册的依赖属性的名称。
              </param>
      <param name="propertyType">
                属性的类型。
              </param>
      <param name="ownerType">
                正在注册依赖属性的所有者类型。
              </param>
      <param name="defaultMetadata">
                依赖属性的属性元数据。
                 这可以包括默认值和其他特征。
              </param>
      <returns>
              一个依赖属性标识符，应使用它来设置类中 <see langword="public static readonly" /> 字段的值。
               稍后将此标识符用来引用依赖属性，从而实现以编程方式设置其值或获取元数据等操作。
            </returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary>
              使用指定的属性类型、所有者类型、属性元数据和属性的值验证回调来注册附加属性。
            </summary>
      <param name="name">
                要注册的依赖属性的名称。
              </param>
      <param name="propertyType">
                属性的类型。
              </param>
      <param name="ownerType">
                正在注册依赖属性的所有者类型。
              </param>
      <param name="defaultMetadata">
                依赖属性的属性元数据。
                 这可以包括默认值和其他特征。
              </param>
      <param name="validateValueCallback">
                对回调的引用，除了典型的类型验证之外，该引用还应执行依赖属性值的任何自定义验证。
              </param>
      <returns>
              一个依赖属性标识符，应使用它来设置类中 <see langword="public static readonly" /> 字段的值。
               稍后将此标识符用来引用依赖属性，从而实现以编程方式设置其值或获取元数据等操作。
            </returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary>
              使用指定的属性名称、所有者类型和属性元数据注册只读附加属性。
            </summary>
      <param name="name">
                要注册的依赖属性的名称。
              </param>
      <param name="propertyType">
                属性的类型。
              </param>
      <param name="ownerType">
                正在注册依赖属性的所有者类型。
              </param>
      <param name="defaultMetadata">
                依赖属性的属性元数据。
              </param>
      <returns>
              一个依赖属性键，此键应用于设置你的类中静态只读字段的值，该值稍后被用于引用该依赖属性。
            </returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary>
              使用指定的属性类型、所有者类型、属性元数据和验证回调来注册只读附加属性。
            </summary>
      <param name="name">
                要注册的依赖属性的名称。
              </param>
      <param name="propertyType">
                属性的类型。
              </param>
      <param name="ownerType">
                正在注册依赖属性的所有者类型。
              </param>
      <param name="defaultMetadata">
                依赖属性的属性元数据。
              </param>
      <param name="validateValueCallback">
                对用户创建的回调的引用，除了典型的类型验证之外，该引用还应执行依赖属性值的任何自定义验证。
              </param>
      <returns>
              一个依赖属性键，应使用它在类中设置静态只读字段的值，然后使用该字段的值引用依赖属性。
            </returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary>
               使用指定的属性名称、所有者类型和属性元数据注册只读依赖属性。
            </summary>
      <param name="name">
                要注册的依赖属性的名称。
              </param>
      <param name="propertyType">
                属性的类型。
              </param>
      <param name="ownerType">
                正在注册依赖属性的所有者类型。
              </param>
      <param name="typeMetadata">
                依赖属性的属性元数据。
              </param>
      <returns>
              一个依赖属性键，应使用它在类中设置静态只读字段的值，然后使用该字段的值引用依赖属性。
            </returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary>
              使用指定的属性类型、所有者类型、属性元数据和验证回叫来注册只读依赖属性。
            </summary>
      <param name="name">
                要注册的依赖属性的名称。
              </param>
      <param name="propertyType">
                属性的类型。
              </param>
      <param name="ownerType">
                正在注册依赖属性的所有者类型。
              </param>
      <param name="typeMetadata">
                依赖属性的属性元数据。
              </param>
      <param name="validateValueCallback">
                对用户创建的回调的引用，除了典型的类型验证之外，该引用还应执行依赖属性值的任何自定义验证。
              </param>
      <returns>
              一个依赖属性键，此键应用于设置你的类中静态只读字段的值，该值稍后被用于引用该依赖属性。
            </returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.ToString">
      <summary>
               返回依赖属性的字符串表示形式。
            </summary>
      <returns>
              依赖属性的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.#ctor(System.Windows.DependencyProperty,System.Object,System.Object)">
      <summary>
              初始化 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 类的新实例。
            </summary>
      <param name="property">
                更改的依赖项属性标识符。
              </param>
      <param name="oldValue">
                之前报告的状态更改的相关事件的更改的属性值。
              </param>
      <param name="newValue">
                报告相关的事件或状态更改的更改后的属性的值。
              </param>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Object)">
      <summary>
              确定所提供的对象是否等效于当前 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。
            </summary>
      <param name="obj">
                要与当前比较的对象 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。
              </param>
      <returns>
              <see langword="true" /> 如果所提供的对象等效于当前 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
              确定是否提供 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 等同于当前 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。
            </summary>
      <param name="args">
                <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 要与当前进行比较 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />
              </param>
      <returns>
              <see langword="true" /> 如果提供 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 等同于当前 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.GetHashCode">
      <summary>
              获取此 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 的哈希代码。
            </summary>
      <returns>
              带符号 32 位整数哈希代码。
            </returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.op_Equality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
              确定两个指定的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 对象是否具有相同的值。
            </summary>
      <param name="left">
                要比较的第一个 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。
              </param>
      <param name="right">
                要比较的第二个 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。
              </param>
      <returns>
              <see langword="true" /> 如果两个 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 实例是等效的; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.op_Inequality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
              确定两个指定 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 对象是否不同。
            </summary>
      <param name="left">
                要比较的第一个 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。
              </param>
      <param name="right">
                要比较的第二个 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。
              </param>
      <returns>
              <see langword="true" /> 如果两个 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 实例都是不同; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)">
      <summary>
              重写都由该依赖项属性标识符的只读依赖项属性的元数据。
            </summary>
      <param name="forType">
                在其存在此依赖项属性，并应重写元数据的类型。
              </param>
      <param name="typeMetadata">
                为此类型提供的元数据。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  尝试的元数据上读写依赖项属性重写 (不能使用此签名)。
                </exception>
      <exception cref="T:System.ArgumentException">
                  因为它位于所提供的类型，已建立该属性的元数据。
                </exception>
    </member>
    <member name="M:System.Windows.ExpressionConverter.#ctor">
      <summary>
              初始化 <see cref="T:System.Windows.ExpressionConverter" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Windows.ExpressionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              返回此转换器是否可以将源对象传递给从转换 <see cref="T:System.Windows.Expression" /> 对象。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="sourceType">
                一个 <see cref="T:System.Type" /> ，表示您希望从转换的类型。
              </param>
      <returns>
              总是为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.ExpressionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              返回此转换器是否可以转换 <see cref="T:System.Windows.Expression" /> 对象传递给特定的目标类型。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="destinationType">
                一个 <see cref="T:System.Type" /> ，表示您希望将转换为的类型。
              </param>
      <returns>
              总是为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.ExpressionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
              提供将值转换为 <see cref="T:System.Windows.Expression" /> 类型。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="culture">
                <see cref="T:System.Globalization.CultureInfo" /> 要用作当前区域性。
              </param>
      <param name="value">
                要转换的对象。
              </param>
      <returns>
              始终将引发异常并返回 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Windows.ExpressionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
              将转换提供 <see cref="T:System.Windows.Expression" /> 为指定类型的对象。
            </summary>
      <param name="context">
                一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。
              </param>
      <param name="culture">
                <see cref="T:System.Globalization.CultureInfo" /> 要用作当前区域性。
              </param>
      <param name="value">
                要转换的对象。
              </param>
      <param name="destinationType">
                一个 <see cref="T:System.Type" /> ，表示您希望将转换为的类型。
              </param>
      <returns>
              始终将引发异常并返回 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Windows.Freezable.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.Windows.Freezable" /> 派生的类。
            </summary>
    </member>
    <member name="M:System.Windows.Freezable.Clone">
      <summary>
              创建的可修改复本 <see cref="T:System.Windows.Freezable" />, ，从而深度复制对象的值。
               在复制此对象的依赖属性时，此方法会复制表达式（可能不再解析），但不复制动画或其当前值。
            </summary>
      <returns>
              当前对象的可修改复本。
               即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 <see langword="true." />，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 <see langword="false" />
            </returns>
    </member>
    <member name="M:System.Windows.Freezable.CloneCore(System.Windows.Freezable)">
      <summary>
              使用基（未经过动画处理的）属性值使该实例成为指定 <see cref="T:System.Windows.Freezable" /> 的克隆（深层复制）。
            </summary>
      <param name="sourceFreezable">
                要克隆的对象。
              </param>
    </member>
    <member name="M:System.Windows.Freezable.CloneCurrentValue">
      <summary>
              创建的可修改复本 （深层复制） <see cref="T:System.Windows.Freezable" /> 使用其当前值。
            </summary>
      <returns>
              当前对象的可修改复本。
               即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 <see langword="true." />，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 <see langword="false" />
            </returns>
    </member>
    <member name="M:System.Windows.Freezable.CloneCurrentValueCore(System.Windows.Freezable)">
      <summary>
              使用当前属性值使该实例成为指定 <see cref="T:System.Windows.Freezable" /> 的可修改克隆（深层复制）。
            </summary>
      <param name="sourceFreezable">
                要克隆的 <see cref="T:System.Windows.Freezable" />。
              </param>
    </member>
    <member name="M:System.Windows.Freezable.CreateInstance">
      <summary>
              初始化 <see cref="T:System.Windows.Freezable" /> 类的新实例。
            </summary>
      <returns>
              新实例。
            </returns>
    </member>
    <member name="M:System.Windows.Freezable.CreateInstanceCore">
      <summary>
              在派生类中实现时创建的新实例 <see cref="T:System.Windows.Freezable" /> 派生的类。
            </summary>
      <returns>
              新实例。
            </returns>
    </member>
    <member name="M:System.Windows.Freezable.Freeze">
      <summary>
              使当前对象不可修改，并且将其 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性设置为 <see langword="true" />。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  无法将 <see cref="T:System.Windows.Freezable" /> 设置为不可修改。
                </exception>
    </member>
    <member name="M:System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)">
      <summary>
              如果 <paramref name="isChecking" /> 参数是 <see langword="true" />, ，此方法指示是否指定 <see cref="T:System.Windows.Freezable" /> 可变为不可修改。
               如果 <paramref name="isChecking" /> 参数是 <see langword="false" />, ，此方法尝试将指定 <see cref="T:System.Windows.Freezable" /> 不可修改，并指示操作是否成功。
            </summary>
      <param name="freezable">
                进行检查，或者要变为不可修改的对象。
                 如果 <paramref name="isChecking" /> 是 <see langword="true" />, ，该对象进行检查以确定是否可以使其成为不可修改。
                 如果 <paramref name="isChecking" /> 是 <see langword="false" />, ，该对象变为不可修改，如有可能。
              </param>
      <param name="isChecking">
                <see langword="true" /> 若要返回相对值的指示是否可以 （但不实际冻结它） 冻结该对象; <see langword="false" /> 来实际冻结该对象。
              </param>
      <returns>
              如果 <paramref name="isChecking" /> 是 <see langword="true" />, ，此方法返回 <see langword="true" /> 如果指定 <see cref="T:System.Windows.Freezable" /> 可变为不可修改，或 <see langword="false" /> 如果不能将其变为不可修改。
               如果 <paramref name="isChecking" /> 是 <see langword="false" />, ，此方法返回 <see langword="true" /> 如果指定 <see cref="T:System.Windows.Freezable" /> 现在是不可修改，或 <see langword="false" /> 如果不能将其变为不可修改。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  当 <paramref name="isChecking" /> 是 <see langword="false" />, ，尝试使 <paramref name="freezable" /> 不可修改不成功; 对象现在处于未知状态 （它可能会部分冻结）。
                </exception>
    </member>
    <member name="M:System.Windows.Freezable.FreezeCore(System.Boolean)">
      <summary>
              使 <see cref="T:System.Windows.Freezable" /> 对象不可修改，或测试是否可使其成为不可修改。
            </summary>
      <param name="isChecking">
                <see langword="true" /> 若要返回相对值的指示是否可以 （但不实际冻结它） 冻结该对象; <see langword="false" /> 来实际冻结该对象。
              </param>
      <returns>
              如果 <paramref name="isChecking" /> 是 <see langword="true" />, ，此方法返回 <see langword="true" /> 如果 <see cref="T:System.Windows.Freezable" /> 可变为不可修改，或 <see langword="false" /> 如果不能将其变为不可修改。
               如果 <paramref name="isChecking" /> 是 <see langword="false" />, ，此方法返回 <see langword="true" /> 如果 if 指定 <see cref="T:System.Windows.Freezable" /> 现在是不可修改，或 <see langword="false" /> 如果不能将其变为不可修改。
            </returns>
    </member>
    <member name="M:System.Windows.Freezable.GetAsFrozen">
      <summary>
              创建冻结的副本 <see cref="T:System.Windows.Freezable" />, ，使用基 （非动画） 属性值。
               因为该副本将被冻结，任何已冻结的子对象是通过引用复制。
            </summary>
      <returns>
              冻结的副本 <see cref="T:System.Windows.Freezable" />。
               该副本的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性设置为 <see langword="true" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="T:System.Windows.Freezable" /> 无法冻结，因为它包含表达式或动画的属性。
                </exception>
    </member>
    <member name="M:System.Windows.Freezable.GetAsFrozenCore(System.Windows.Freezable)">
      <summary>
              让该实例成为指定的 <see cref="T:System.Windows.Freezable" /> 的冻结克隆，前者使用基（非动画的）属性值。
            </summary>
      <param name="sourceFreezable">
                要复制的实例。
              </param>
    </member>
    <member name="M:System.Windows.Freezable.GetCurrentValueAsFrozen">
      <summary>
              创建冻结的副本 <see cref="T:System.Windows.Freezable" /> 使用当前属性值。
               因为该副本将被冻结，任何已冻结的子对象是通过引用复制。
            </summary>
      <returns>
              冻结的副本 <see cref="T:System.Windows.Freezable" />。
               该副本的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性设置为 <see langword="true" />。
            </returns>
    </member>
    <member name="M:System.Windows.Freezable.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
      <summary>
              使当前实例成为指定 <see cref="T:System.Windows.Freezable" /> 的冻结克隆。
               如果对象具有动画依赖属性，则复制其当前的动画值。
            </summary>
      <param name="sourceFreezable">
                要复制和冻结的 <see cref="T:System.Windows.Freezable" />。
              </param>
    </member>
    <member name="M:System.Windows.Freezable.OnChanged">
      <summary>
              调用时当前 <see cref="T:System.Windows.Freezable" /> 修改对象。
            </summary>
    </member>
    <member name="M:System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)">
      <summary>
              确保为建立了适当的上下文指针 <see cref="T:System.Windows.DependencyObjectType" /> 只需设置的数据成员。
            </summary>
      <param name="oldValue">
                以前的数据成员的值。
              </param>
      <param name="newValue">
                数据成员的当前值。
              </param>
    </member>
    <member name="M:System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)">
      <summary>
              此成员支持 Windows Presentation Foundation (WPF) 基础结构，但不能在代码中直接使用。
            </summary>
      <param name="oldValue">
                以前的数据成员的值。
              </param>
      <param name="newValue">
                数据成员的当前值。
              </param>
      <param name="property">
                已更改的属性。
              </param>
    </member>
    <member name="M:System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
              重写 <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" /> 的 <see cref="T:System.Windows.DependencyObject" /> 实现以同时调用任何响应类型 <see cref="T:System.Windows.Freezable" /> 不断变化的依赖属性的 <see cref="E:System.Windows.Freezable.Changed" /> 处理程序。
            </summary>
      <param name="e">
                包含有关已更改的属性的信息及其旧值和新值的事件数据。
              </param>
    </member>
    <member name="M:System.Windows.Freezable.ReadPreamble">
      <summary>
              确保 <see cref="T:System.Windows.Freezable" /> 正在从有效的线程访问。
               继承者 <see cref="T:System.Windows.Freezable" /> 必须调用此方法的任何开头 API 读取也不是依赖项属性的数据成员。
            </summary>
    </member>
    <member name="M:System.Windows.Freezable.WritePostscript">
      <summary>
              引发 <see cref="T:System.Windows.Freezable" /> 的 <see cref="E:System.Windows.Freezable.Changed" /> 事件并调用其 <see cref="M:System.Windows.Freezable.OnChanged" /> 方法。
               从 <see cref="T:System.Windows.Freezable" /> 派生的类应在修改的类成员不存储为依赖属性的任何 API 的末尾调用此方法。
            </summary>
    </member>
    <member name="M:System.Windows.Freezable.WritePreamble">
      <summary>
              验证 <see cref="T:System.Windows.Freezable" /> 未被冻结并正在从有效的线程上下文访问。
              <see cref="T:System.Windows.Freezable" /> 继承者应调用此方法的任何开头 API ，它将写入到不是依赖项属性的数据成员。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="T:System.Windows.Freezable" /> 实例已被冻结且不能具有写入其成员。
                </exception>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.#ctor">
      <summary>
              初始化 <see cref="T:System.Windows.Input.Key" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              确定指定类型的对象是否可以转换为的一个实例 <see cref="T:System.Windows.Input.Key" />, ，使用指定的上下文。
            </summary>
      <param name="context">
                提供有关从中调用此转换器的环境的信息的一种格式上下文。
              </param>
      <param name="sourceType">
                计算用于转换类型。
              </param>
      <returns>
              如果 <see langword="true" /> 的类型是 <paramref name="sourceType" />，则为 <see cref="T:System.String" /> ；否则，为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              确定实例是否 <see cref="T:System.Windows.Input.Key" /> 可以转换为指定的类型，使用指定的上下文。
            </summary>
      <param name="context">
                提供有关从中调用此转换器的环境的信息的一种格式上下文。
              </param>
      <param name="destinationType">
                计算用于转换类型。
              </param>
      <returns>
              如果 <see langword="true" /> 的类型是 <paramref name="destinationType" />，则为 <see cref="T:System.String" /> ；否则，为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
              尝试将转换指定的对象与 <see cref="T:System.Windows.Input.Key" />, ，使用指定的上下文。
            </summary>
      <param name="context">
                提供有关从中调用此转换器的环境的信息的一种格式上下文。
              </param>
      <param name="culture">
                区域性特定信息。
              </param>
      <param name="source">
                要转换的对象。
              </param>
      <returns>
              被转换的对象。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  <paramref name="source" /> 不能转换。
                </exception>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
              尝试将转换 <see cref="T:System.Windows.Input.Key" /> 到指定的类型，使用指定的上下文。
            </summary>
      <param name="context">
                提供有关从中调用此转换器的环境的信息的一种格式上下文。
              </param>
      <param name="culture">
                区域性特定信息。
              </param>
      <param name="value">
                要转换的对象。
              </param>
      <param name="destinationType">
                对象要转换为的类型。
              </param>
      <returns>
              被转换的对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="destinationType" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  <paramref name="value" /> 不能转换为 <paramref name="destinationType" />。
                </exception>
    </member>
    <member name="M:System.Windows.Input.KeyInterop.KeyFromVirtualKey(System.Int32)">
      <summary>
              将转换 Win32 虚拟键到 WPF <see cref="T:System.Windows.Input.Key" />。 
            </summary>
      <param name="virtualKey">
                要转换的虚拟键。
              </param>
      <returns>
              
                WPF 键。
            </returns>
    </member>
    <member name="M:System.Windows.Input.KeyInterop.VirtualKeyFromKey(System.Windows.Input.Key)">
      <summary>
              将转换 WPF <see cref="T:System.Windows.Input.Key" /> 到 Win32 虚拟键。 
            </summary>
      <param name="key">
                要转换的 WPF。
              </param>
      <returns>
              
                Win32 虚拟键。
            </returns>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.#ctor">
      <summary>
              初始化 <see cref="T:System.Windows.Input.KeyValueSerializer" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>
              确定指定 <see cref="T:System.String" /> 可以转换为的一个实例 <see cref="T:System.Windows.Input.Key" />。
            </summary>
      <param name="value">
                若要计算以供转换的字符串。
              </param>
      <param name="context">
                用于转换的上下文信息。
              </param>
      <returns>
              始终返回 <see langword="true" />。
            </returns>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
              确定指定 <see cref="T:System.Windows.Input.Key" /> 可以转换为 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要计算以供转换的键。
              </param>
      <param name="context">
                用于转换的上下文信息。
              </param>
      <returns>
              如果可将 <paramref name="value" /> 转换为 <see cref="T:System.String" />，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>
              将转换 <see cref="T:System.String" /> 到 <see cref="T:System.Windows.Input.Key" />。
            </summary>
      <param name="value">
                要转换的字符串 <see cref="T:System.Windows.Input.Key" />。
              </param>
      <param name="context">
                用于转换的上下文信息。
              </param>
      <returns>
              新实例 <see cref="T:System.Windows.Input.Key" /> 基于提供 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
              实例转换 <see cref="T:System.Windows.Input.Key" /> 到 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要将转换为字符串的键。
              </param>
      <param name="context">
                用于转换的上下文信息。
              </param>
      <returns>
              指定的固定字符串表示 <see cref="T:System.Windows.Input.Key" />。
            </returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.#ctor">
      <summary>
              初始化 <see cref="T:System.Windows.Input.ModifierKeysConverter" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              确定指定类型的对象是否可以转换为的一个实例 <see cref="T:System.Windows.Input.ModifierKeys" />, ，使用指定的上下文。
            </summary>
      <param name="context">
                提供有关从中调用此转换器的环境的信息的一种格式上下文。
              </param>
      <param name="sourceType">
                计算用于转换类型。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="sourceType" /> 是类型 <see cref="T:System.String" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              确定实例是否 <see cref="T:System.Windows.Input.ModifierKeys" /> 可以转换为指定的类型，使用指定的上下文。
            </summary>
      <param name="context">
                提供有关从中调用此转换器的环境的信息的一种格式上下文。
              </param>
      <param name="destinationType">
                计算用于转换类型。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="destinationType" /> 是类型 <see cref="T:System.String" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
              尝试将转换指定的对象与 <see cref="T:System.Windows.Input.ModifierKeys" />, ，使用指定的上下文。
            </summary>
      <param name="context">
                提供有关从中调用此转换器的环境的信息的一种格式上下文。
              </param>
      <param name="culture">
                区域性特定信息。
              </param>
      <param name="source">
                要转换的对象。
              </param>
      <returns>
              被转换的对象。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  <paramref name="source" /> 不能转换。
                </exception>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
              尝试将转换 <see cref="T:System.Windows.Input.ModifierKeys" /> 到指定的类型，使用指定的上下文。
            </summary>
      <param name="context">
                提供有关从中调用此转换器的环境的信息的一种格式上下文。
              </param>
      <param name="culture">
                区域性特定信息。
              </param>
      <param name="value">
                要转换的对象。
              </param>
      <param name="destinationType">
                对象要转换为的类型。
              </param>
      <returns>
              被转换的对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="destinationType" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
                  <paramref name="value" /> 未映射到一个有效 <see cref="T:System.Windows.Input.ModifierKeys" />。
                </exception>
      <exception cref="T:System.NotSupportedException">
                  无法转换 <paramref name="value" />。
                </exception>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.IsDefinedModifierKeys(System.Windows.Input.ModifierKeys)">
      <summary>
              确定指定的值是否为有效 <see cref="T:System.Windows.Input.ModifierKeys" /> 值。
            </summary>
      <param name="modifierKeys">
                要检查文件有效的值。
              </param>
      <returns>
              <see langword="true" /> 如果输入是一个有效 <see cref="T:System.Windows.Input.ModifierKeys" /> 值; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.#ctor">
      <summary>
              初始化 <see cref="T:System.Windows.Input.ModifierKeysValueSerializer" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>
              确定指定 <see cref="T:System.String" /> 可以转换为的一个实例 <see cref="T:System.Windows.Input.ModifierKeys" />。
            </summary>
      <param name="value">
                若要计算以供转换的字符串。
              </param>
      <param name="context">
                用于转换的上下文信息。
              </param>
      <returns>
              始终返回 <see langword="true" />。
            </returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
              确定指定 <see cref="T:System.Windows.Input.ModifierKeys" /> 可以转换为 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                若要计算以供转换的修改键。
              </param>
      <param name="context">
                用于转换的上下文信息。
              </param>
      <returns>
              如果可将 <paramref name="value" /> 转换为 <see cref="T:System.String" />，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>
              将转换 <see cref="T:System.String" /> 到 <see cref="T:System.Windows.Input.ModifierKeys" /> 值。
            </summary>
      <param name="value">
                要转换的字符串 <see cref="T:System.Windows.Input.ModifierKeys" />。
              </param>
      <param name="context">
                用于转换的上下文信息。
              </param>
      <returns>
              新实例 <see cref="T:System.Windows.Input.ModifierKeys" /> 基于提供 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
              实例转换 <see cref="T:System.Windows.Input.ModifierKeys" /> 到 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要将转换为字符串的键。
              </param>
      <param name="context">
                用于转换的上下文信息。
              </param>
      <returns>
              指定的固定字符串表示 <see cref="T:System.Windows.Input.ModifierKeys" /> 值。
            </returns>
    </member>
    <member name="M:System.Windows.Input.TraversalRequest.#ctor(System.Windows.Input.FocusNavigationDirection)">
      <summary>
              初始化 <see cref="T:System.Windows.Input.TraversalRequest" /> 类的新实例。
            </summary>
      <param name="focusNavigationDirection">
                作为枚举的值的焦点遍历，预期的方向。
              </param>
    </member>
    <member name="M:System.Windows.Int32Rect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.Windows.Int32Rect" /> 具有指定 <see cref="P:System.Windows.Int32Rect.X" /> 和 <see cref="P:System.Windows.Int32Rect.Y" /> 坐标和指定 <see cref="P:System.Windows.Int32Rect.Width" /> 和 <see cref="P:System.Windows.Int32Rect.Height" />。
            </summary>
      <param name="x">
                <see cref="P:System.Windows.Int32Rect.X" /> 新 <see cref="T:System.Windows.Int32Rect" /> 实例，其中指定的矩形的左上角的 x 坐标。
              </param>
      <param name="y">
                <see cref="P:System.Windows.Int32Rect.Y" /> 新 <see cref="T:System.Windows.Int32Rect" /> 实例，其中指定的矩形的左上角的 y 坐标。
              </param>
      <param name="width">
                <see cref="P:System.Windows.Int32Rect.Width" /> 新 <see cref="T:System.Windows.Int32Rect" /> 实例指定的矩形的宽度。
              </param>
      <param name="height">
                <see cref="P:System.Windows.Int32Rect.Height" /> 新 <see cref="T:System.Windows.Int32Rect" /> 实例指定的矩形的高度。
              </param>
    </member>
    <member name="M:System.Windows.Int32Rect.Equals(System.Object)">
      <summary>
              确定指定的矩形是否等于此矩形。
            </summary>
      <param name="o">
                要与当前矩形进行比较的对象。
              </param>
      <returns>
              true 如果 o 是 <see cref="T:System.Windows.Int32Rect" /> 和相同 <see cref="P:System.Windows.Int32Rect.X" />, ，<see cref="P:System.Windows.Int32Rect.Y" />, ，<see cref="P:System.Windows.Int32Rect.Width" />, ，和 <see cref="P:System.Windows.Int32Rect.Height" /> 为此矩形; 否则为 false。
            </returns>
    </member>
    <member name="M:System.Windows.Int32Rect.Equals(System.Windows.Int32Rect)">
      <summary>
              确定指定的矩形是否等于此矩形。
            </summary>
      <param name="value">
                要与当前矩形进行比较的矩形。
              </param>
      <returns>
              true 如果这两个矩形具有相同 <see cref="P:System.Windows.Int32Rect.X" />, ，<see cref="P:System.Windows.Int32Rect.Y" />, ，<see cref="P:System.Windows.Int32Rect.Width" />, ，和 <see cref="P:System.Windows.Int32Rect.Height" /> 为此矩形; 否则为 false。
            </returns>
    </member>
    <member name="M:System.Windows.Int32Rect.Equals(System.Windows.Int32Rect,System.Windows.Int32Rect)">
      <summary>
              确定指定的矩形是否相等。
            </summary>
      <param name="int32Rect1">
                要比较的第一个矩形。
              </param>
      <param name="int32Rect2">
                要比较的第二个矩形。
              </param>
      <returns>
              true 如果 int32Rect1 和 int32Rect2 具有相同 <see cref="P:System.Windows.Int32Rect.X" />, ，<see cref="P:System.Windows.Int32Rect.Y" />, ，<see cref="P:System.Windows.Int32Rect.Width" />, ，和 <see cref="P:System.Windows.Int32Rect.Height" />; 否则为 false。
            </returns>
    </member>
    <member name="M:System.Windows.Int32Rect.GetHashCode">
      <summary>
              创建从此矩形的哈希代码 <see cref="P:System.Windows.Int32Rect.X" />, ，<see cref="P:System.Windows.Int32Rect.Y" />, ，<see cref="P:System.Windows.Int32Rect.Width" />, ，和 <see cref="P:System.Windows.Int32Rect.Height" /> 值。
            </summary>
      <returns>
              此矩形的哈希代码。
            </returns>
    </member>
    <member name="M:System.Windows.Int32Rect.op_Equality(System.Windows.Int32Rect,System.Windows.Int32Rect)">
      <summary>
              比较两个矩形完全相等。
            </summary>
      <param name="int32Rect1">
                要比较的第一个矩形。
              </param>
      <param name="int32Rect2">
                要比较的第二个矩形。
              </param>
      <returns>
              true 如果 int32Rect1 和 int32Rect2 具有相同 <see cref="P:System.Windows.Int32Rect.X" />, ，<see cref="P:System.Windows.Int32Rect.Y" />, ，<see cref="P:System.Windows.Int32Rect.Width" />, ，和 <see cref="P:System.Windows.Int32Rect.Height" />; 否则为 false。
            </returns>
    </member>
    <member name="M:System.Windows.Int32Rect.op_Inequality(System.Windows.Int32Rect,System.Windows.Int32Rect)">
      <summary>
              比较两个矩形不相等。
            </summary>
      <param name="int32Rect1">
                要比较的第一个矩形。
              </param>
      <param name="int32Rect2">
                要比较的第二个矩形。
              </param>
      <returns>
              false 如果 int32Rect1 和 int32Rect2 具有相同 <see cref="P:System.Windows.Int32Rect.X" />, ，<see cref="P:System.Windows.Int32Rect.Y" />, ，<see cref="P:System.Windows.Int32Rect.Width" />, ，和 <see cref="P:System.Windows.Int32Rect.Height" />; 否则为如果所有这些值都相同，然后 true。
            </returns>
    </member>
    <member name="M:System.Windows.Int32Rect.Parse(System.String)">
      <summary>
              创建 <see cref="T:System.Windows.Int32Rect" /> 从指定的结构 <see cref="T:System.String" /> 表示形式。
            </summary>
      <param name="source">
                字符串表示形式 <see cref="T:System.Windows.Int32Rect" />。
              </param>
      <returns>
              等效于 <see cref="T:System.Windows.Int32Rect" /> 结构。
            </returns>
    </member>
    <member name="M:System.Windows.Int32Rect.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>
              使用指定格式对当前实例的值设置格式。
            </summary>
      <param name="format">
                要使用的格式。
              </param>
      <param name="provider">
                要使用的值进行格式提供程序
              </param>
      <returns>
              采用指定格式的当前实例的值。
            </returns>
    </member>
    <member name="M:System.Windows.Int32Rect.ToString">
      <summary>
              创建的字符串表示形式 <see cref="T:System.Windows.Int32Rect" />。
            </summary>
      <returns>
              一个包含相同字符串 <see cref="P:System.Windows.Int32Rect.X" />, ，<see cref="P:System.Windows.Int32Rect.Y" />, ，<see cref="P:System.Windows.Int32Rect.Width" />, ，和 <see cref="P:System.Windows.Int32Rect.Height" /> 值 <see cref="T:System.Windows.Int32Rect" /> 结构。
            </returns>
    </member>
    <member name="M:System.Windows.Int32Rect.ToString(System.IFormatProvider)">
      <summary>
              创建的字符串表示形式 <see cref="T:System.Windows.Int32Rect" /> 基于提供 <see cref="T:System.IFormatProvider" />。
            </summary>
      <param name="provider">
                要使用的格式提供程序。
                 如果提供程序为 <see langword="null" />, ，则使用当前区域性。
              </param>
      <returns>
              此实例的字符串表示 <see cref="T:System.Windows.Int32Rect" />。
            </returns>
    </member>
    <member name="M:System.Windows.Int32RectConverter.#ctor">
      <summary>
              初始化 <see cref="T:System.Windows.Int32RectConverter" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Windows.Int32RectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              确定是否可以将对象从给定类型转换为的一个实例 <see cref="T:System.Windows.Int32Rect" />。
            </summary>
      <param name="context">
                描述类型的上下文信息。
              </param>
      <param name="sourceType">
                正在计算的转换的源的类型。
              </param>
      <returns>
              <see langword="true" /> 如果类型可以转换为 <see cref="T:System.Windows.Int32Rect" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Int32RectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              确定实例是否 <see cref="T:System.Windows.Int32Rect" /> 可以转换为其他类型。
            </summary>
      <param name="context">
                描述类型的上下文信息。
              </param>
      <param name="destinationType">
                所需类型这 <see cref="T:System.Windows.Int32Rect" /> 转换进行评估。
              </param>
      <returns>
              <see langword="true" /> 如果此 <see cref="T:System.Windows.Int32Rect" /> 可以转换为 <paramref name="destinationType" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Int32RectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
              尝试将转换到指定的类型 <see cref="T:System.Windows.Int32Rect" />。
            </summary>
      <param name="context">
                提供执行转换所需的上下文信息。
              </param>
      <param name="culture">
                若要在转换过程中考虑的区域性信息。
              </param>
      <param name="value">
                要转换的对象。
              </param>
      <returns>
              <see cref="T:System.Windows.Int32Rect" /> 从转换创建 <paramref name="value" />。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  如果指定的对象为 NULL 或为不能转换为的类型，则引发 <see cref="T:System.Windows.Int32Rect" />。
                </exception>
    </member>
    <member name="M:System.Windows.Int32RectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
              尝试将转换 <see cref="T:System.Windows.Int32Rect" /> 为指定的类型。
            </summary>
      <param name="context">
                提供执行转换所需的上下文信息。
              </param>
      <param name="culture">
                若要在转换过程中考虑的区域性信息。
              </param>
      <param name="value">
                要转换的 <see cref="T:System.Windows.Int32Rect" />。
              </param>
      <param name="destinationType">
                要转换的类型 <see cref="T:System.Windows.Int32Rect" /> 到。
              </param>
      <returns>
              创建将该表达式转换的对象 <see cref="T:System.Windows.Int32Rect" />。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  时引发 <paramref name="value" /> 是 <see langword="null" /> 或者不是 <see cref="T:System.Windows.Int32Rect" />, ，或者如果 <paramref name="destinationType" /> 不是要转换的有效类型之一。
                </exception>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.PopModal">
      <summary>
              调用以指示模式线程不再是模式。
            </summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.PushModal">
      <summary>
              调用以指示该线程是模式。
            </summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.RaiseIdle">
      <summary>
              调用以指示某线程处于空闲状态。
            </summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.RaiseThreadMessage(System.Windows.Interop.MSG@)">
      <summary>
              指示会对可能的处理显示新消息。
            </summary>
      <param name="msg">
                该消息及其关联数据。
              </param>
      <returns>
              如果侦听消息循环的任一模块已处理了该消息，则为 <see langword="true" />。
               消息循环的所有者应忽略该消息。
               如果未处理该消息，则为 <see langword="false" />。
               在这种情况下，消息泵的所有者应调用 Win32 函数 TranslateMessage 跟 DispatchMessage。 </returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.HasFocusWithin">
      <summary>
              获取一个值，该值指示是否接收器或所包含的组件之一具有焦点。
            </summary>
      <returns>
              <see langword="true" /> 如果接收器或所包含的组件之一具有焦点，则否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
      <summary>
              调用此接收器的助记键 （访问键） 之一时调用。
            </summary>
      <param name="msg">
                助记键和关联数据的的消息。
                 不要修改此消息结构。
                 它是通过只为了提高性能的引用进行传递。
              </param>
      <param name="modifiers">
                修改键。
              </param>
      <returns>
              <see langword="true" /> 如果该消息已处理;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.RegisterKeyboardInputSink(System.Windows.Interop.IKeyboardInputSink)">
      <summary>
              注册 <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> 包含组件的接口。
            </summary>
      <param name="sink">
                <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> 包含组件的接收器。
              </param>
      <returns>
              <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> 包含组件的站点。
            </returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.TabInto(System.Windows.Input.TraversalRequest)">
      <summary>
              将焦点设置在第一个制表位或接收器的最后一个制表位。
            </summary>
      <param name="request">
                指定是应该将焦点设置到第一项或最后一个制表位。
              </param>
      <returns>
              <see langword="true" /> 如果焦点已设为，请求; <see langword="false" />, ，如果不有任何制表位。
            </returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
      <summary>
              处理 keydown 消息级别的键盘输入。
            </summary>
      <param name="msg">
                消息和相关联的数据。
                 不要修改此结构。
                 它是通过只为了提高性能的引用进行传递。
              </param>
      <param name="modifiers">
                修改键。
              </param>
      <returns>
              <see langword="true" /> 如果该消息已处理的方法的实现过程;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
      <summary>
              处理 WM_CHAR 和 WM_SYSCHAR、 WM_DEADCHAR，和 WM_SYSDEADCHAR 输入的消息之前 <see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" /> 调用。
            </summary>
      <param name="msg">
                消息和相关联的数据。
                 不要修改此结构。
                 它是通过只为了提高性能的引用进行传递。
              </param>
      <param name="modifiers">
                修改键。
              </param>
      <returns>
              <see langword="true" /> 如果消息已处理和 <see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" /> 调用; 否则为不应为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSite.OnNoMoreTabStops(System.Windows.Input.TraversalRequest)">
      <summary>
              在到达其最后一个制表位，并且不再具有要 tab 键移动到的项目，由包含组件调用。
            </summary>
      <param name="request">
                指定是应该将焦点设置到第一项或最后一个制表位。
              </param>
      <returns>
              如果此方法返回 <see langword="true" />, ，该站点已将焦点移动到另一个组件。
               如果此方法返回 <see langword="false" />, ，重点是仍在调用组件。
               该组件应"环绕"，并将焦点设置到其第一个包含的制表位。
            </returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSite.Unregister">
      <summary>
              注销从此站点的子键盘输入的接收器。
            </summary>
    </member>
    <member name="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
      <summary>
              从集中式的事件管理器接收事件。
            </summary>
      <param name="managerType">
                一种 <see cref="T:System.Windows.WeakEventManager" /> 调用此方法。
              </param>
      <param name="sender">
                产生事件的对象。
              </param>
      <param name="e">
                事件数据。
              </param>
      <returns>
              <see langword="true" /> 如果侦听器已处理该事件。
               它被视为错误 <see cref="T:System.Windows.WeakEventManager" /> 中处理 WPF 以注册侦听器不会处理的事件侦听器。
               无论如何，该方法应返回 <see langword="false" /> 如果它收到无法识别或处理的事件。
            </returns>
    </member>
    <member name="M:System.Windows.LocalValueEntry.Equals(System.Object)">
      <summary>
              确定两个 <see cref="T:System.Windows.LocalValueEntry" /> 实例是否相等。
            </summary>
      <param name="obj">
                要与当前的 <see cref="T:System.Windows.LocalValueEntry" /> 进行比较的 <see cref="T:System.Windows.LocalValueEntry" />。
              </param>
      <returns>
              这 <see cref="M:System.Windows.LocalValueEntry.op_Equality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)" /> 实现比较的值 <see cref="P:System.Windows.LocalValueEntry.Property" />, ，并可能比较的值 <see cref="P:System.Windows.LocalValueEntry.Value" />。
              <see cref="P:System.Windows.LocalValueEntry.Property" /> 组件 <see cref="T:System.Windows.LocalValueEntry" /> 是值类型，因此将始终为按位比较。
               有关 <see cref="P:System.Windows.LocalValueEntry.Value" /> 组件，此实现将使用按位比较，如果它是值类型。
               对于具有引用类型的本地设置的属性，该行为将推迟到该类型的相等性确定机制，因为它只是使用内部 = = 运算符对两个值。
               默认情况下，为这些值的引用相等，因此的相等性的整个 <see cref="T:System.Windows.LocalValueEntry" /> 将变得引用相等性。
            </returns>
    </member>
    <member name="M:System.Windows.LocalValueEntry.GetHashCode">
      <summary>
              返回此 <see cref="T:System.Windows.LocalValueEntry" /> 的哈希代码。
            </summary>
      <returns>
              带符号的 32 位整数值。
            </returns>
    </member>
    <member name="M:System.Windows.LocalValueEntry.op_Equality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)">
      <summary>
              比较指定 <see cref="T:System.Windows.LocalValueEntry" /> 实例，以确定它们是否相同。
            </summary>
      <param name="obj1">
                要比较的第一个实例。
              </param>
      <param name="obj2">
                要比较的第二个实例。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="obj1" /> <see cref="T:System.Windows.LocalValueEntry" /> 是否等同于 <paramref name="obj2" /> <see cref="T:System.Windows.LocalValueEntry" />; 否则为 <see langword="false" />。  
            </returns>
    </member>
    <member name="M:System.Windows.LocalValueEntry.op_Inequality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)">
      <summary>
              比较指定 <see cref="T:System.Windows.LocalValueEnumerator" /> 实例，以确定它们是否不同。
            </summary>
      <param name="obj1">
                要比较的第一个实例。
              </param>
      <param name="obj2">
                要比较的第二个实例。
              </param>
      <returns>
              此实现将的值进行比较 <see cref="P:System.Windows.LocalValueEntry.Property" /> 和 <see cref="P:System.Windows.LocalValueEntry.Value" /> 组成部分 <see cref="T:System.Windows.LocalValueEntry" />。
              <see cref="P:System.Windows.LocalValueEntry.Property" /> 组件 <see cref="T:System.Windows.LocalValueEntry" /> 始终是值类型，所以此比较将始终是一个按位比较。
               有关 <see cref="P:System.Windows.LocalValueEntry.Value" /> 组件，此实现将使用按位比较，如果它是值类型。
            
              对于具有引用类型的本地设置的属性，该行为将推迟到该类型的相等性确定机制，因为它使用 <see langword="==" /> 运算符对两个内部值。
               默认情况下，这是值的引用相等性。
            </returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.Equals(System.Object)">
      <summary>
              确定是否提供 <see cref="T:System.Windows.LocalValueEnumerator" /> 等效于此 <see cref="T:System.Windows.LocalValueEnumerator" />。
            </summary>
      <param name="obj">
                要与当前的 <see cref="T:System.Windows.LocalValueEnumerator" /> 进行比较的 <see cref="T:System.Windows.LocalValueEnumerator" />。
              </param>
      <returns>
              如果指定的 <see langword="true" /> 等于当前的 <see cref="T:System.Windows.LocalValueEnumerator" />，则为 <see cref="T:System.Windows.LocalValueEnumerator" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.GetHashCode">
      <summary>
              返回当前 <see cref="T:System.Windows.LocalValueEnumerator" /> 的哈希代码。
            </summary>
      <returns>
              32 位整数哈希代码。
            </returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.MoveNext">
      <summary>
              将枚举数推进到集合的下一个元素。
            </summary>
      <returns>
              如果枚举数已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举数传递到集合的末尾，则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.op_Equality(System.Windows.LocalValueEnumerator,System.Windows.LocalValueEnumerator)">
      <summary>
              比较两个指定 <see cref="T:System.Windows.LocalValueEnumerator" /> 对象是否相同。
            </summary>
      <param name="obj1">
                要比较的第一个对象。
              </param>
      <param name="obj2">
                要比较的第二个对象。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="obj1" /><see cref="T:System.Windows.LocalValueEnumerator" /> 是否等同于 <paramref name="obj2" /><see cref="T:System.Windows.LocalValueEnumerator" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.op_Inequality(System.Windows.LocalValueEnumerator,System.Windows.LocalValueEnumerator)">
      <summary>
              比较两个指定 <see cref="T:System.Windows.LocalValueEnumerator" /> 对象来确定它们是否不相同。
            </summary>
      <param name="obj1">
                要比较的第一个对象。
              </param>
      <param name="obj2">
                要比较的第二个对象。
              </param>
      <returns>
              如果实例不相等，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.Reset">
      <summary>
              将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。
            </summary>
    </member>
    <member name="M:System.Windows.Markup.DesignerSerializationOptionsAttribute.#ctor(System.Windows.Markup.DesignerSerializationOptions)">
      <summary>
              初始化 <see cref="T:System.Windows.Markup.DesignerSerializationOptionsAttribute" /> 类的新实例。
            </summary>
      <param name="designerSerializationOptions">
                指定该属性是要序列化的方式。
              </param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
                  <paramref name="designerSerializationOptions" /> 不是有效的 <see cref="T:System.Windows.Markup.DesignerSerializationOptions" /> 值。
                </exception>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.#ctor">
      <summary>
              初始化 <see cref="T:System.Windows.Markup.InternalTypeHelper" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
      <summary>
              时 （生成） 派生的类中重写，会附加到一个内部事件的事件处理程序委托。
            </summary>
      <param name="eventInfo">
                事件 （CLR 反射信息） 的事件信息。
              </param>
      <param name="target">
                目标附加处理程序。
              </param>
      <param name="handler">
                事件处理程序。
              </param>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
      <summary>
              当在派生的 （生成） 类中重写，创建一个事件委托，它引用非公共处理程序方法。
            </summary>
      <param name="delegateType">
                <see cref="T:System.Type" /> 的委托。
              </param>
      <param name="target">
                目标附加处理程序。
              </param>
      <param name="handler">
                处理程序实现的名称。
              </param>
      <returns>
              委托的引用。
            </returns>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
      <summary>
              当在派生的 （生成） 类中重写时创建的内部类型的实例。
            </summary>
      <param name="type">
                要创建的 <see cref="T:System.Type" />。
              </param>
      <param name="culture">
                区域性特定信息。
              </param>
      <returns>
              所创建的实例。
            </returns>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
      <summary>
              当在派生的 （生成） 类中重写，目标对象上获取的内部属性的值
            </summary>
      <param name="propertyInfo">
                要获取的属性的属性信息。
              </param>
      <param name="target">
                包含所需的属性值的对象。
              </param>
      <param name="culture">
                区域性特定信息。
              </param>
      <returns>
              该属性的值。
            </returns>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
      <summary>
              当在派生的 （生成） 类中重写，设置目标对象上的内部属性的值。
            </summary>
      <param name="propertyInfo">
                要设置的属性的属性信息。
              </param>
      <param name="target">
                包含所需的属性值的对象。
              </param>
      <param name="value">
                要设置的值。
              </param>
      <param name="culture">
                区域性特定信息。
              </param>
    </member>
    <member name="M:System.Windows.Markup.IReceiveMarkupExtension.ReceiveMarkupExtension(System.String,System.Windows.Markup.MarkupExtension,System.IServiceProvider)">
      <summary>
              提供了用于提供属性值的标记扩展的处理。
               不要将用于 .NET Framework 4 实现; 请参阅备注中的 <see cref="T:System.Windows.Markup.IReceiveMarkupExtension" />。
            </summary>
      <param name="property">
                目标属性的名称。
              </param>
      <param name="markupExtension">
                传入的数据标记扩展实例。
              </param>
      <param name="serviceProvider">
                可以提供处理的属性值的标记扩展数据时应执行的其他服务。
              </param>
    </member>
    <member name="M:System.Windows.Markup.Primitives.MarkupObject.AssignRootContext(System.Windows.Markup.IValueSerializerContext)">
      <summary>
              当在派生类中重写，将分配根上下文 <see cref="T:System.Windows.Markup.ValueSerializer" /> 类。
            </summary>
      <param name="context">
                <see cref="T:System.Windows.Markup.IValueSerializerContext" /> 分配根上下文。
              </param>
    </member>
    <member name="M:System.Windows.Markup.ServiceProviders.#ctor">
      <summary>
              初始化 <see cref="T:System.Windows.Markup.ServiceProviders" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Windows.Markup.ServiceProviders.AddService(System.Type,System.Object)">
      <summary>
              将服务添加到列表。
            </summary>
      <param name="serviceType">
                新的服务的服务类型。
              </param>
      <param name="service">
                服务实现类。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="serviceType" /> 或 <paramref name="service" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  尝试在字典中添加已存在的服务。
                </exception>
    </member>
    <member name="M:System.Windows.Markup.ServiceProviders.GetService(System.Type)">
      <summary>
              获取指定类型的服务对象。
            </summary>
      <param name="serviceType">
                要获取的服务对象的类型。
              </param>
      <returns>
              该类型的服务实现 <paramref name="serviceType" />。
               可能是 <see langword="null" /> 如果没有为类型存储的服务 <paramref name="serviceType" />。
            </returns>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.#ctor">
      <summary>
              初始化 <see cref="T:System.Windows.Media.Converters.MatrixValueSerializer" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>
              确定是否从转换给定 <see cref="T:System.String" /> 实例 <see cref="T:System.Windows.Media.Matrix" /> 一点的。
            </summary>
      <param name="value">
                若要计算以供转换的字符串。
              </param>
      <param name="context">
                用于转换的上下文信息。
              </param>
      <returns>
              如果该值可以转换，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
              确定的实例时，如果 <see cref="T:System.Windows.Media.Matrix" /> 可以转换为 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                实例 <see cref="T:System.Windows.Media.Matrix" /> 要计算用于转换。
              </param>
      <param name="context">
                用于转换的上下文信息。
              </param>
      <returns>
              如果可将 <paramref name="value" /> 转换为 <see cref="T:System.String" />，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  发生时 <paramref name="value" /> 不是 <see cref="T:System.Windows.Media.Int32Collection" />。
                </exception>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>
              将转换 <see cref="T:System.String" /> 到 <see cref="T:System.Windows.Media.Matrix" />。
            </summary>
      <param name="value">
                <see cref="T:System.String" /> 值将转换为 <see cref="T:System.Windows.Media.Matrix" />。
              </param>
      <param name="context">
                用于转换的上下文信息。
              </param>
      <returns>
              新实例 <see cref="T:System.Windows.Media.Matrix" /> 基于提供 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
              实例转换 <see cref="T:System.Windows.Media.Matrix" /> 到 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                实例 <see cref="T:System.Windows.Media.Matrix" /> 要计算用于转换。
              </param>
      <param name="context">
                用于转换的上下文信息。
              </param>
      <returns>
              一个 <see cref="T:System.String" /> 所提供的表示形式 <see cref="T:System.Windows.Media.Matrix" /> 对象。
            </returns>
    </member>
    <member name="M:System.Windows.Media.DisableDpiAwarenessAttribute.#ctor">
      <summary>
              初始化 <see cref="T:System.Windows.Media.DisableDpiAwarenessAttribute" /> 的新实例。
            </summary>
    </member>
    <member name="M:System.Windows.Media.Matrix.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
               初始化 <see cref="T:System.Windows.Media.Matrix" /> 结构的新实例。
            </summary>
      <param name="m11">
                新的 <see cref="T:System.Windows.Media.Matrix" /> 结构的 <see cref="P:System.Windows.Media.Matrix.M11" /> 系数。
              </param>
      <param name="m12">
                新的 <see cref="T:System.Windows.Media.Matrix" /> 结构的 <see cref="P:System.Windows.Media.Matrix.M12" /> 系数。
              </param>
      <param name="m21">
                新的 <see cref="T:System.Windows.Media.Matrix" /> 结构的 <see cref="P:System.Windows.Media.Matrix.M21" /> 系数。
              </param>
      <param name="m22">
                新的 <see cref="T:System.Windows.Media.Matrix" /> 结构的 <see cref="P:System.Windows.Media.Matrix.M22" /> 系数。
              </param>
      <param name="offsetX">
                新的 <see cref="T:System.Windows.Media.Matrix" /> 结构的 <see cref="P:System.Windows.Media.Matrix.OffsetX" /> 系数。
              </param>
      <param name="offsetY">
                新的 <see cref="T:System.Windows.Media.Matrix" /> 结构的 <see cref="P:System.Windows.Media.Matrix.OffsetY" /> 系数。
              </param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Append(System.Windows.Media.Matrix)">
      <summary>
               指定将追加 <see cref="T:System.Windows.Media.Matrix" /> 到此结构 <see cref="T:System.Windows.Media.Matrix" /> 结构。
            </summary>
      <param name="matrix">
                <see cref="T:System.Windows.Media.Matrix" /> 结构要追加到此 <see cref="T:System.Windows.Media.Matrix" /> 结构。
              </param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Equals(System.Object)">
      <summary>
               确定是否指定 <see cref="T:System.Object" /> 是 <see cref="T:System.Windows.Media.Matrix" /> 结构，它是等同于此 <see cref="T:System.Windows.Media.Matrix" />。
            </summary>
      <param name="o">
                要比较的 <see cref="T:System.Object" />。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="o" /> 是 <see cref="T:System.Windows.Media.Matrix" /> 结构，它是等同于此 <see cref="T:System.Windows.Media.Matrix" /> 结构; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Equals(System.Windows.Media.Matrix)">
      <summary>
               确定是否指定 <see cref="T:System.Windows.Media.Matrix" /> 结构是否与此实例相同。
            </summary>
      <param name="value">
                实例 <see cref="T:System.Windows.Media.Matrix" /> 要与此实例进行比较。
              </param>
      <returns>
              <see langword="true" /> 如果实例相等，则否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Equals(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary>
               确定两个指定 <see cref="T:System.Windows.Media.Matrix" /> 结构是否相等。
            </summary>
      <param name="matrix1">
                要比较的第一个 <see cref="T:System.Windows.Media.Matrix" /> 结构。
              </param>
      <param name="matrix2">
                要比较的第二个 <see cref="T:System.Windows.Media.Matrix" /> 结构。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="matrix1" /> 和 <paramref name="matrix2" /> 相同; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.GetHashCode">
      <summary>
               返回此 <see cref="T:System.Windows.Media.Matrix" /> 结构的哈希代码。
            </summary>
      <returns>
              此实例的哈希代码。
            </returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Invert">
      <summary>
               反转此 <see cref="T:System.Windows.Media.Matrix" /> 结构。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="T:System.Windows.Media.Matrix" /> 结构不是可逆转。
                </exception>
    </member>
    <member name="M:System.Windows.Media.Matrix.Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary>
               乘以 <see cref="T:System.Windows.Media.Matrix" /> 由另一个结构 <see cref="T:System.Windows.Media.Matrix" /> 结构。
            </summary>
      <param name="trans1">
                第一个 <see cref="T:System.Windows.Media.Matrix" /> 结构进行乘法运算。
              </param>
      <param name="trans2">
                第二个 <see cref="T:System.Windows.Media.Matrix" /> 结构进行乘法运算。
              </param>
      <returns>
              <paramref name="trans1" /> 与 <paramref name="trans2" /> 相乘的结果。
            </returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.op_Equality(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary>
               确定两个指定 <see cref="T:System.Windows.Media.Matrix" /> 结构是否相等。
            </summary>
      <param name="matrix1">
                要比较的第一个 <see cref="T:System.Windows.Media.Matrix" /> 结构。
              </param>
      <param name="matrix2">
                要比较的第二个 <see cref="T:System.Windows.Media.Matrix" /> 结构。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="matrix1" /> 和 <paramref name="matrix2" /> 相同; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.op_Inequality(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary>
               确定两个指定 <see cref="T:System.Windows.Media.Matrix" /> 结构是否不相同。
            </summary>
      <param name="matrix1">
                要比较的第一个 <see cref="T:System.Windows.Media.Matrix" /> 结构。
              </param>
      <param name="matrix2">
                要比较的第二个 <see cref="T:System.Windows.Media.Matrix" /> 结构。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="matrix1" /> 和 <paramref name="matrix2" /> 不完全相同; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.op_Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary>
               乘以 <see cref="T:System.Windows.Media.Matrix" /> 由另一个结构 <see cref="T:System.Windows.Media.Matrix" /> 结构。
            </summary>
      <param name="trans1">
                第一个 <see cref="T:System.Windows.Media.Matrix" /> 结构进行乘法运算。
              </param>
      <param name="trans2">
                第二个 <see cref="T:System.Windows.Media.Matrix" /> 结构进行乘法运算。
              </param>
      <returns>
              <paramref name="trans1" /> 与 <paramref name="trans2" /> 相乘的结果。
            </returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Parse(System.String)">
      <summary>
               将转换 <see cref="T:System.String" /> 矩阵表示形式为等效 <see cref="T:System.Windows.Media.Matrix" /> 结构。
            </summary>
      <param name="source">
                <see cref="T:System.String" /> 矩阵表示形式。
              </param>
      <returns>
              等效于 <see cref="T:System.Windows.Media.Matrix" /> 结构。
            </returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Prepend(System.Windows.Media.Matrix)">
      <summary>
               将指定的前面添加 <see cref="T:System.Windows.Media.Matrix" /> 部署到此结构 <see cref="T:System.Windows.Media.Matrix" /> 结构。
            </summary>
      <param name="matrix">
                <see cref="T:System.Windows.Media.Matrix" /> 结构以预先计算此 <see cref="T:System.Windows.Media.Matrix" /> 结构。
              </param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Rotate(System.Double)">
      <summary>
               有关此源的指定角度旋转 <see cref="T:System.Windows.Media.Matrix" /> 结构。
            </summary>
      <param name="angle">
                旋转角度。
              </param>
    </member>
    <member name="M:System.Windows.Media.Matrix.RotateAt(System.Double,System.Double,System.Double)">
      <summary>
              有关指定点此矩阵的旋转。
            </summary>
      <param name="angle">
                角度 （以度为单位，旋转此矩阵）。
              </param>
      <param name="centerX">
                要围绕其旋转此矩阵的点的 x 坐标。
              </param>
      <param name="centerY">
                要围绕其旋转此矩阵的点的 y 坐标。
              </param>
    </member>
    <member name="M:System.Windows.Media.Matrix.RotateAtPrepend(System.Double,System.Double,System.Double)">
      <summary>
              前面添加到此指定点处的指定角度的旋转 <see cref="T:System.Windows.Media.Matrix" /> 结构。
            </summary>
      <param name="angle">
                旋转角度，以度为单位。
              </param>
      <param name="centerX">
                旋转中心 x 坐标。
              </param>
      <param name="centerY">
                旋转中心 y 坐标。
              </param>
    </member>
    <member name="M:System.Windows.Media.Matrix.RotatePrepend(System.Double)">
      <summary>
               前面添加旋转指定角度 <see cref="T:System.Windows.Media.Matrix" /> 结构。
            </summary>
      <param name="angle">
                要在前面添加的旋转角度。
              </param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Scale(System.Double,System.Double)">
      <summary>
               将指定的比例向量追加到此 <see cref="T:System.Windows.Media.Matrix" /> 结构。
            </summary>
      <param name="scaleX">
                值，通过它来调整此 <see cref="T:System.Windows.Media.Matrix" /> 沿 x 轴。
              </param>
      <param name="scaleY">
                值，通过它来调整此 <see cref="T:System.Windows.Media.Matrix" /> 沿 y 轴。
              </param>
    </member>
    <member name="M:System.Windows.Media.Matrix.ScaleAt(System.Double,System.Double,System.Double,System.Double)">
      <summary>
              可以扩展这 <see cref="T:System.Windows.Media.Matrix" /> 有关指定点指定的量。
            </summary>
      <param name="scaleX">
                缩放量 <see cref="T:System.Windows.Media.Matrix" /> 沿 x 轴。
              </param>
      <param name="scaleY">
                缩放量 <see cref="T:System.Windows.Media.Matrix" /> 沿 y 轴。
              </param>
      <param name="centerX">
                缩放操作的中心点的 x 坐标。
              </param>
      <param name="centerY">
                缩放操作的中心点的 y 坐标。
              </param>
    </member>
    <member name="M:System.Windows.Media.Matrix.ScaleAtPrepend(System.Double,System.Double,System.Double,System.Double)">
      <summary>
              将指定的小数位数围绕此指定的点前面添加 <see cref="T:System.Windows.Media.Matrix" />。
            </summary>
      <param name="scaleX">
                X 轴缩放比例。
              </param>
      <param name="scaleY">
                Y 轴缩放比例。
              </param>
      <param name="centerX">
                有关哪些执行缩放操作点的 x 坐标。
              </param>
      <param name="centerY">
                有关哪些执行缩放操作的点的 y 坐标值。
              </param>
    </member>
    <member name="M:System.Windows.Media.Matrix.ScalePrepend(System.Double,System.Double)">
      <summary>
               左乘指定的比例向量到此 <see cref="T:System.Windows.Media.Matrix" /> 结构。
            </summary>
      <param name="scaleX">
                值，通过它来调整此 <see cref="T:System.Windows.Media.Matrix" /> 沿 x 轴的结构。
              </param>
      <param name="scaleY">
                值，通过它来调整此 <see cref="T:System.Windows.Media.Matrix" /> 沿 y 轴的结构。
              </param>
    </member>
    <member name="M:System.Windows.Media.Matrix.SetIdentity">
      <summary>
               改变了这 <see cref="T:System.Windows.Media.Matrix" /> 结构单位矩阵。
            </summary>
    </member>
    <member name="M:System.Windows.Media.Matrix.Skew(System.Double,System.Double)">
      <summary>
               将 x 和 y 中指定角度的倾斜追加到此维度 <see cref="T:System.Windows.Media.Matrix" /> 结构。
            </summary>
      <param name="skewX">
                X 维度中进行扭曲此所依据的角度 <see cref="T:System.Windows.Media.Matrix" />。
              </param>
      <param name="skewY">
                Y 维度中进行扭曲此所依据的角度 <see cref="T:System.Windows.Media.Matrix" />。
              </param>
    </member>
    <member name="M:System.Windows.Media.Matrix.SkewPrepend(System.Double,System.Double)">
      <summary>
               将 x 和 y 中指定角度的倾斜前面添加到此维度 <see cref="T:System.Windows.Media.Matrix" /> 结构。
            </summary>
      <param name="skewX">
                X 维度中进行扭曲此所依据的角度 <see cref="T:System.Windows.Media.Matrix" />。
              </param>
      <param name="skewY">
                Y 维度中进行扭曲此所依据的角度 <see cref="T:System.Windows.Media.Matrix" />。
              </param>
    </member>
    <member name="M:System.Windows.Media.Matrix.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>
              使用指定格式对当前实例的值设置格式。
            </summary>
      <param name="format">
                要使用的格式。
              
                - 或 - 
              
                null 引用（在 Visual Basic 中为 <see langword="Nothing" />），用于使用为 <see cref="T:System.IFormattable" /> 实现的类型定义的默认格式。
              </param>
      <param name="provider">
                要用于对值设置格式的提供程序。
              
                - 或 - 
              
                null 引用（在 Visual Basic 中为 <see langword="Nothing" />），用于从操作系统的当前区域设置获取数字格式信息。
              </param>
      <returns>
              采用指定格式的当前实例的值。
            </returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.ToString">
      <summary>
               创建 <see cref="T:System.String" /> 这种表示形式 <see cref="T:System.Windows.Media.Matrix" /> 结构。
            </summary>
      <returns>
              一个 <see cref="T:System.String" /> 包含 <see cref="P:System.Windows.Media.Matrix.M11" />, ，<see cref="P:System.Windows.Media.Matrix.M12" />, ，<see cref="P:System.Windows.Media.Matrix.M21" />, ，<see cref="P:System.Windows.Media.Matrix.M22" />, ，<see cref="P:System.Windows.Media.Matrix.OffsetX" />, ，和 <see cref="P:System.Windows.Media.Matrix.OffsetY" /> 值 <see cref="T:System.Windows.Media.Matrix" />。
            </returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.ToString(System.IFormatProvider)">
      <summary>
               创建 <see cref="T:System.String" /> 这种表示形式 <see cref="T:System.Windows.Media.Matrix" /> 使用区域性特定格式设置信息的结构。
            </summary>
      <param name="provider">
                区域性特定格式设置信息。
              </param>
      <returns>
              一个 <see cref="T:System.String" /> 包含 <see cref="P:System.Windows.Media.Matrix.M11" />, ，<see cref="P:System.Windows.Media.Matrix.M12" />, ，<see cref="P:System.Windows.Media.Matrix.M21" />, ，<see cref="P:System.Windows.Media.Matrix.M22" />, ，<see cref="P:System.Windows.Media.Matrix.OffsetX" />, ，和 <see cref="P:System.Windows.Media.Matrix.OffsetY" /> 值 <see cref="T:System.Windows.Media.Matrix" />。
            </returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Point)">
      <summary>
              变换由指定的点 <see cref="T:System.Windows.Media.Matrix" /> 并返回结果。
            </summary>
      <param name="point">
                要变换的点。
              </param>
      <returns>
              转换的结果 <paramref name="point" /> 由此 <see cref="T:System.Windows.Media.Matrix" />。
            </returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Point[])">
      <summary>
              此转换指定的点 <see cref="T:System.Windows.Media.Matrix" />。
            </summary>
      <param name="points">
                要变换的点。
                 数组中的原始点将替换由其转换值。
              </param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Vector)">
      <summary>
              此转换指定的向量 <see cref="T:System.Windows.Media.Matrix" />。
            </summary>
      <param name="vector">
                要转换的向量。
              </param>
      <returns>
              转换的结果 <paramref name="vector" /> 由此 <see cref="T:System.Windows.Media.Matrix" />。
            </returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Vector[])">
      <summary>
              将指定的向量转换由此 <see cref="T:System.Windows.Media.Matrix" />。
            </summary>
      <param name="vectors">
                要变换的向量。
                 转换后的值替换为数组中的原始向量。
              </param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Translate(System.Double,System.Double)">
      <summary>
               将指定的偏移量的翻译追加到此 <see cref="T:System.Windows.Media.Matrix" /> 结构。
            </summary>
      <param name="offsetX">
                此偏移量 <see cref="T:System.Windows.Media.Matrix" /> 沿 x 轴。
              </param>
      <param name="offsetY">
                此偏移量 <see cref="T:System.Windows.Media.Matrix" /> 沿 y 轴。
              </param>
    </member>
    <member name="M:System.Windows.Media.Matrix.TranslatePrepend(System.Double,System.Double)">
      <summary>
               前面添加到此指定偏移量的平移 <see cref="T:System.Windows.Media.Matrix" /> 结构。
            </summary>
      <param name="offsetX">
                此偏移量 <see cref="T:System.Windows.Media.Matrix" /> 沿 x 轴。
              </param>
      <param name="offsetY">
                此偏移量 <see cref="T:System.Windows.Media.Matrix" /> 沿 y 轴。
              </param>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.#ctor">
      <summary>
              初始化 <see cref="T:System.Windows.Media.MatrixConverter" /> 的新实例。
            </summary>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              确定是否可以将对象从特定类型转换为的一个实例 <see cref="T:System.Windows.Media.Matrix" />。
            </summary>
      <param name="context">
                一种类型的上下文信息。
              </param>
      <param name="sourceType">
                正在计算的转换的源的类型。
              </param>
      <returns>
              <see langword="true" /> 如果类型可以转换为 <see cref="T:System.Windows.Media.Matrix" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              确定实例是否 <see cref="T:System.Windows.Media.Matrix" /> 可以转换为其他类型。
            </summary>
      <param name="context">
                一种类型的上下文信息。
              </param>
      <param name="destinationType">
                所需类型这 <see cref="T:System.Windows.Media.Matrix" /> 转换进行评估。
              </param>
      <returns>
              <see langword="true" /> 如果此 <see cref="T:System.Windows.Media.Matrix" /> 可以转换为 <paramref name="destinationType" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
              尝试将转换指定的对象与 <see cref="T:System.Windows.Media.Matrix" />。
            </summary>
      <param name="context">
                一种类型的上下文信息。
              </param>
      <param name="culture">
                要转换的类型的 <see cref="T:System.Globalization.CultureInfo" />。
              </param>
      <param name="value">
                要转换的对象。
              </param>
      <returns>
              <see cref="T:System.Windows.Media.Matrix" /> 从转换创建 <paramref name="value" />。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  指定的对象为 null 或为不能转换为一种 <see cref="T:System.Windows.Media.Matrix" />。
                </exception>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
              尝试将转换 <see cref="T:System.Windows.Media.Matrix" /> 为指定的类型。
            </summary>
      <param name="context">
                一种类型的上下文信息。
              </param>
      <param name="culture">
                要转换的类型的 <see cref="T:System.Globalization.CultureInfo" />。
              </param>
      <param name="value">
                要转换的 <see cref="T:System.Windows.Media.Matrix" />。
              </param>
      <param name="destinationType">
                要转换的类型 <see cref="T:System.Windows.Media.Matrix" /> 到。
              </param>
      <returns>
              创建将该表达式转换的对象 <see cref="T:System.Windows.Media.Matrix" />。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  <paramref name="value" /> 是 null 或不是 <see cref="T:System.Windows.Media.Matrix" />, ，或 <paramref name="destinationType" /> 不是有效的转换类型。
                </exception>
    </member>
    <member name="M:System.Windows.NameScope.#ctor">
      <summary>
              初始化 <see cref="T:System.Windows.NameScope" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Windows.NameScope.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>
              向集合中添加一项。
            </summary>
      <param name="item">
                一个 <see cref="T:System.Collections.Generic.KeyValuePair`2" />  (键是 <see cref="T:System.String" />, ，值是 <see cref="T:System.Object" />)，表示要添加到 XAML 名称范围的名称映射。
              </param>
      <exception cref="T:System.ArgumentException">
                  一个或两个组件 <paramref name="item" /> 是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Windows.NameScope.Add(System.String,System.Object)">
      <summary>
              向集合中添加一项。
            </summary>
      <param name="key">
                字符串键，这是要添加的 XAML 名称范围映射的名称。
              </param>
      <param name="value">
                对象值，该值是 XAML 名称范围映射，若要添加的对象引用。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="key" /> 或 <paramref name="value" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Windows.NameScope.Clear">
      <summary>
              从集合中移除所有项。
            </summary>
    </member>
    <member name="M:System.Windows.NameScope.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>
              确定集合是否包含指定的项。
            </summary>
      <param name="item">
                要查找与指定的集合中的项 <see cref="T:System.Collections.Generic.KeyValuePair`2" />  (键是 <see cref="T:System.String" />, ，值是 <see cref="T:System.Object" />)。
              </param>
      <returns>
              <see langword="true" /> 如果指定 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 标识在此现有映射 <see cref="T:System.Windows.NameScope" /> 。
              <see langword="false" /> 如果指定 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 中当前不存在 <see cref="T:System.Windows.NameScope" />。
            </returns>
      <exception cref="T:System.ArgumentException">
                  <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Windows.NameScope.ContainsKey(System.String)">
      <summary>
              返回提供的名称中是否存在此 <see cref="T:System.Windows.NameScope" />。
            </summary>
      <param name="key">
                要查找的字符串键。
              </param>
      <returns>
              <see langword="true" /> 如果指定 <paramref name="key" /> 标识在此现有映射的名称 <see cref="T:System.Windows.NameScope" />。
              <see langword="false" /> 如果指定 <paramref name="key" /> 中当前不存在 <see cref="T:System.Windows.NameScope" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="key" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Windows.NameScope.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>
              从特定的数组索引开始，将集合的元素复制到数组中。
            </summary>
      <param name="array">
                一维数组，它是数组从集合复制的元素的目标必须具有从零开始的索引。
              </param>
      <param name="arrayIndex">
                <paramref name="array" /> 中从零开始的索引，从此处开始复制。
              </param>
    </member>
    <member name="M:System.Windows.NameScope.FindName(System.String)">
      <summary>
              根据提供的名称字符串，返回由此 <see cref="T:System.Windows.NameScope" /> 保留的 XAML 名称范围中的相应对象。
            </summary>
      <param name="name">
                要检索其对象部分的现有映射的名称部分。
              </param>
      <returns>
              用 <paramref name="name" /> 映射的所请求对象。
               如果提供的 <paramref name="name" /> 为 <see langword="null" /> 或空字符串，或者未找到匹配的对象，则可返回 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Windows.NameScope.GetNameScope(System.Windows.DependencyObject)">
      <summary>
              为 <see cref="P:System.Windows.NameScope.NameScope" /> 附加属性提供附加属性 get 访问器。
            </summary>
      <param name="dependencyObject">
                要从中获取 XAML 名称范围的对象。
              </param>
      <returns>
              以 <see cref="T:System.Windows.Markup.INameScope" /> 实例表示的 XAML 名称范围。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="dependencyObject" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Windows.NameScope.RegisterName(System.String,System.Object)">
      <summary>
              将新的名称-对象对注册到当前的 XAML 名称范围中。
            </summary>
      <param name="name">
                要用于映射给定对象的名称。
              </param>
      <param name="scopedElement">
                要映射到所提供名称的对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  提供的 <paramref name="name" /> 或 <paramref name="scopedElement" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  提供的 <paramref name="name" /> 为空字符串
                
                  - 或 -
                
                  提供的 <paramref name="name" /> 包含对 XAML 名称无效的字符，因此被分析程序拒绝
                
                  - 或 -
                
                  提供的 <paramref name="name" /> 导致注册重复的名称。
                </exception>
    </member>
    <member name="M:System.Windows.NameScope.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>
              从集合中移除特定对象。
            </summary>
      <param name="item">
                要从集合中，指定为删除的对象 <see cref="T:System.Collections.Generic.KeyValuePair`2" />  (键是 <see cref="T:System.String" />, ，值是 <see cref="T:System.Object" />)。
              </param>
      <returns>
              <see langword="true" /> 如果成功移除了该项从集合中，否则 <see langword="false" />。
               也会返回 <see langword="false" /> 如果集合中找不到该项目。
            </returns>
    </member>
    <member name="M:System.Windows.NameScope.Remove(System.String)">
      <summary>
              从集合中移除具有指定名称的映射。
            </summary>
      <param name="key">
                字符串键，这是要移除的 XAML 名称范围映射的名称。
              </param>
      <returns>
              <see langword="true" /> 如果成功移除了该项从集合中，否则 <see langword="false" />。
               也会返回 <see langword="false" /> 如果集合中找不到该项目。
            </returns>
    </member>
    <member name="M:System.Windows.NameScope.SetNameScope(System.Windows.DependencyObject,System.Windows.Markup.INameScope)">
      <summary>
              为 <see cref="P:System.Windows.NameScope.NameScope" /> 附加属性提供附加属性 set 访问器。
            </summary>
      <param name="dependencyObject">
                要为其更改 XAML 名称范围的对象。
              </param>
      <param name="value">
                使用接口转换的新 XAML 名称范围。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="dependencyObject" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Windows.NameScope.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#GetEnumerator">
      <summary>
              返回循环访问集合的枚举数。
            </summary>
      <returns>
              用于循环访问集合的枚举器。
            </returns>
    </member>
    <member name="M:System.Windows.NameScope.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              返回循环访问集合的枚举数。
            </summary>
      <returns>
              用于循环访问集合的枚举器。
            </returns>
    </member>
    <member name="M:System.Windows.NameScope.TryGetValue(System.String,System.Object@)">
      <summary>
              获取与指定键关联的值。
            </summary>
      <param name="key">
                要获取的值的键。
              </param>
      <param name="value">
                此方法返回时，包含如果找到该键; 与指定键关联的值否则为 null 的对象。
                 此参数未经初始化即被传递。
              </param>
      <returns>
              true <see cref="T:System.Windows.NameScope" /> 包含形式提供的名称的映射 <paramref name="key" />。
               否则为 false。
            </returns>
    </member>
    <member name="M:System.Windows.NameScope.UnregisterName(System.String)">
      <summary>
              从 XAML 名称范围中删除名称对象映射。
            </summary>
      <param name="name">
                要删除的映射的名称。
              </param>
      <exception cref="T:System.ArgumentException">
                  <paramref name="name" /> 是作为空字符串提供的。
                
                  - 或 -
                
                  提供的 <paramref name="name" /> 尚未注册。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="name" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Windows.Point.#ctor(System.Double,System.Double)">
      <summary>
              创建一个新 <see cref="T:System.Windows.Point" /> 结构，其中包含指定的坐标。
            </summary>
      <param name="x">
                新的 x 坐标 <see cref="T:System.Windows.Point" /> 结构。
              </param>
      <param name="y">
                新的 y 坐标 <see cref="T:System.Windows.Point" /> 结构。
              </param>
    </member>
    <member name="M:System.Windows.Point.Add(System.Windows.Point,System.Windows.Vector)">
      <summary>
              添加 <see cref="T:System.Windows.Vector" /> 到 <see cref="T:System.Windows.Point" /> ，并返回结果作为 <see cref="T:System.Windows.Point" /> 结构。
            </summary>
      <param name="point">
                <see cref="T:System.Windows.Point" /> 可添加结构。
              </param>
      <param name="vector">
                <see cref="T:System.Windows.Vector" /> 可添加结构。
              </param>
      <returns>
              返回的总和 <paramref name="point" /> 和 <paramref name="vector" />。
            </returns>
    </member>
    <member name="M:System.Windows.Point.Equals(System.Object)">
      <summary>
              确定是否指定 <see cref="T:System.Object" /> 是 <see cref="T:System.Windows.Point" /> 以及它是否包含与此相同的坐标 <see cref="T:System.Windows.Point" />。
            </summary>
      <param name="o">
                要比较的 <see cref="T:System.Object" />。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="o" /> 是 <see cref="T:System.Windows.Point" /> 和包含相同 <see cref="P:System.Windows.Point.X" /> 和 <see cref="P:System.Windows.Point.Y" /> 值，则为此 <see cref="T:System.Windows.Point" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Point.Equals(System.Windows.Point)">
      <summary>
              比较两个 <see cref="T:System.Windows.Point" /> 结构是否相等。
            </summary>
      <param name="value">
                要与此实例进行比较的点。
              </param>
      <returns>
              <see langword="true" /> 如果两个 <see cref="T:System.Windows.Point" /> 结构都包含相同 <see cref="P:System.Windows.Point.X" /> 和 <see cref="P:System.Windows.Point.Y" /> 值; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Point.Equals(System.Windows.Point,System.Windows.Point)">
      <summary>
              比较两个 <see cref="T:System.Windows.Point" /> 结构是否相等。
            </summary>
      <param name="point1">
                要比较的第一个点。
              </param>
      <param name="point2">
                要比较的第二个点。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="point1" /> 和 <paramref name="point2" /> 包含相同 <see cref="P:System.Windows.Point.X" /> 和 <see cref="P:System.Windows.Point.Y" /> 值; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Point.GetHashCode">
      <summary>
              返回此 <see cref="T:System.Windows.Point" /> 的哈希代码。
            </summary>
      <returns>
              此哈希代码 <see cref="T:System.Windows.Point" /> 结构。
            </returns>
    </member>
    <member name="M:System.Windows.Point.Multiply(System.Windows.Point,System.Windows.Media.Matrix)">
      <summary>
              转换指定 <see cref="T:System.Windows.Point" /> 由指定的结构 <see cref="T:System.Windows.Media.Matrix" /> 结构。
            </summary>
      <param name="point">
                要变换的点。
              </param>
      <param name="matrix">
                变换矩阵。
              </param>
      <returns>
              已转换的点。
            </returns>
    </member>
    <member name="M:System.Windows.Point.Offset(System.Double,System.Double)">
      <summary>
              偏移量的点 <see cref="P:System.Windows.Point.X" /> 和 <see cref="P:System.Windows.Point.Y" /> 坐标指定的量。
            </summary>
      <param name="offsetX">
                该点的偏移量
              
                <see cref="P:System.Windows.Point.X" /> 坐标值。
              </param>
      <param name="offsetY">
                偏移量
              
                点的 <see cref="P:System.Windows.Point.Y" /> 协调。
              </param>
    </member>
    <member name="M:System.Windows.Point.op_Addition(System.Windows.Point,System.Windows.Vector)">
      <summary>
              将转换指定 <see cref="T:System.Windows.Point" /> 由指定 <see cref="T:System.Windows.Vector" /> 并返回结果。
            </summary>
      <param name="point">
                要转换的点。
              </param>
      <param name="vector">
                通过它转换量 <paramref name="point" />。
              </param>
      <returns>
              将指定的点翻译按指定向量的结果。
            </returns>
    </member>
    <member name="M:System.Windows.Point.op_Equality(System.Windows.Point,System.Windows.Point)">
      <summary>
              比较两个 <see cref="T:System.Windows.Point" /> 结构是否相等。
            </summary>
      <param name="point1">
                要比较的第一个 <see cref="T:System.Windows.Point" /> 结构。
              </param>
      <param name="point2">
                要比较的第二个 <see cref="T:System.Windows.Point" /> 结构。
              </param>
      <returns>
              <see langword="true" /> 如果两个 <see cref="P:System.Windows.Point.X" /> 和 <see cref="P:System.Windows.Point.Y" /> 坐标 <paramref name="point1" /> 和 <paramref name="point2" /> 相等; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Point.op_Explicit(System.Windows.Point)~System.Windows.Size">
      <summary>
              创建 <see cref="T:System.Windows.Size" /> 结构与 <see cref="P:System.Windows.Size.Width" /> 等于此点 <see cref="P:System.Windows.Point.X" /> 值和一个 <see cref="P:System.Windows.Size.Height" /> 等于此点 <see cref="P:System.Windows.Point.Y" /> 值。
            </summary>
      <param name="point">
                要转换的点。
              </param>
      <returns>
              一个 <see cref="T:System.Windows.Size" /> 结构与 <see cref="P:System.Windows.Size.Width" /> 等于此点 <see cref="P:System.Windows.Point.X" /> 值和一个 <see cref="P:System.Windows.Size.Height" /> 等于此点 <see cref="P:System.Windows.Point.Y" /> 值。
            </returns>
    </member>
    <member name="M:System.Windows.Point.op_Explicit(System.Windows.Point)~System.Windows.Vector">
      <summary>
              创建 <see cref="T:System.Windows.Vector" /> 结构与 <see cref="P:System.Windows.Vector.X" /> 值等于该点的 <see cref="P:System.Windows.Point.X" /> 值和一个 <see cref="P:System.Windows.Vector.Y" /> 值等于该点的 <see cref="P:System.Windows.Point.Y" /> 值。
            </summary>
      <param name="point">
                要转换的点。
              </param>
      <returns>
              一个具有向量 <see cref="P:System.Windows.Vector.X" /> 值等于该点的 <see cref="P:System.Windows.Point.X" /> 值和一个 <see cref="P:System.Windows.Vector.Y" /> 值等于该点的 <see cref="P:System.Windows.Point.Y" /> 值。
            </returns>
    </member>
    <member name="M:System.Windows.Point.op_Inequality(System.Windows.Point,System.Windows.Point)">
      <summary>
              比较两个 <see cref="T:System.Windows.Point" /> 结构是否不相等。
            </summary>
      <param name="point1">
                要比较的第一个点。
              </param>
      <param name="point2">
                要比较的第二个点。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="point1" /> 和 <paramref name="point2" /> 具有不同 <see cref="P:System.Windows.Point.X" /> 或 <see cref="P:System.Windows.Point.Y" /> 协调; <see langword="false" /> 如果 <paramref name="point1" /> 和 <paramref name="point2" /> 具有相同 <see cref="P:System.Windows.Point.X" /> 和 <see cref="P:System.Windows.Point.Y" /> 坐标。
            </returns>
    </member>
    <member name="M:System.Windows.Point.op_Multiply(System.Windows.Point,System.Windows.Media.Matrix)">
      <summary>
              转换指定 <see cref="T:System.Windows.Point" /> 由指定 <see cref="T:System.Windows.Media.Matrix" />。
            </summary>
      <param name="point">
                要变换的点。
              </param>
      <param name="matrix">
                变换矩阵。
              </param>
      <returns>
              转换使用指定的矩阵的指定的点的结果。
            </returns>
    </member>
    <member name="M:System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Point)">
      <summary>
              中减去指定 <see cref="T:System.Windows.Point" /> 从另一个指定 <see cref="T:System.Windows.Point" /> ，并返回的差异为 <see cref="T:System.Windows.Vector" />。
            </summary>
      <param name="point1">
                起始位置的点 <paramref name="point2" /> 中减去。
              </param>
      <param name="point2">
                要从中减去的点 <paramref name="point1" />。
              </param>
      <returns>
              之间的差异 <paramref name="point1" /> 和 <paramref name="point2" />。
            </returns>
    </member>
    <member name="M:System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Vector)">
      <summary>
              中减去指定 <see cref="T:System.Windows.Vector" /> 从指定 <see cref="T:System.Windows.Point" /> ，并返回结果 <see cref="T:System.Windows.Point" />。
            </summary>
      <param name="point">
                起始位置的点 <paramref name="vector" /> 中减去。
              </param>
      <param name="vector">
                要从中减去的向量 <paramref name="point1" />
              </param>
      <returns>
              之间的差异 <paramref name="point" /> 和 <paramref name="vector" />。
            </returns>
    </member>
    <member name="M:System.Windows.Point.Parse(System.String)">
      <summary>
              构造 <see cref="T:System.Windows.Point" /> 从指定 <see cref="T:System.String" />。
            </summary>
      <param name="source">
                点的字符串表示形式。
              </param>
      <returns>
              等效于 <see cref="T:System.Windows.Point" /> 结构。
            </returns>
      <exception cref="T:System.FormatException">
                  <paramref name="source" /> 不包含两个以逗号或空格分隔的双精度值。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> 不包含两个数字。
                
                  - 或 -
                
                  <paramref name="source" /> 包含太多的分隔符。
                </exception>
    </member>
    <member name="M:System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Point)">
      <summary>
              中减去指定 <see cref="T:System.Windows.Point" /> 从另一个指定 <see cref="T:System.Windows.Point" /> ，并返回的差异为 <see cref="T:System.Windows.Vector" />。
            </summary>
      <param name="point1">
                起始位置的点 <paramref name="point2" /> 中减去。
              </param>
      <param name="point2">
                要从中减去的点 <paramref name="point1" />。
              </param>
      <returns>
              之间的差异 <paramref name="point1" /> 和 <paramref name="point2" />。
            </returns>
    </member>
    <member name="M:System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Vector)">
      <summary>
              中减去指定 <see cref="T:System.Windows.Vector" /> 从指定 <see cref="T:System.Windows.Point" /> ，并返回结果 <see cref="T:System.Windows.Point" />。
            </summary>
      <param name="point">
                起始位置的点 <paramref name="vector" /> 中减去。
              </param>
      <param name="vector">
                <paramref name="vector" /> 要从中减去 <paramref name="point" />。
              </param>
      <returns>
              之间的差异 <paramref name="point" /> 和 <paramref name="vector" />。
            </returns>
    </member>
    <member name="M:System.Windows.Point.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>
              此成员支持 Windows Presentation Foundation (WPF) 基础结构，但不能在代码中直接使用。
               有关此成员的说明，请参阅 <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />。
            </summary>
      <param name="format">
                指定要使用的格式的字符串。
              
                - 或 - 
              
                <see langword="null" /> 若要使用的类型定义的默认格式 <see cref="T:System.IFormattable" /> 实现。
              </param>
      <param name="provider">
                <see langword="IFormatProvider" /> 要用于设置值的格式。
              
                - 或 - 
              
                <see langword="null" /> 若要获取从操作系统的当前区域设置的数字格式信息。
              </param>
      <returns>
              包含指定的格式中的当前实例的值的字符串。
            </returns>
    </member>
    <member name="M:System.Windows.Point.ToString">
      <summary>
              创建 <see cref="T:System.String" /> 这种表示形式 <see cref="T:System.Windows.Point" />。
            </summary>
      <returns>
              一个 <see cref="T:System.String" /> 包含 <see cref="P:System.Windows.Point.X" /> 和 <see cref="P:System.Windows.Point.Y" /> 值 <see cref="T:System.Windows.Point" /> 结构。
            </returns>
    </member>
    <member name="M:System.Windows.Point.ToString(System.IFormatProvider)">
      <summary>
              创建 <see cref="T:System.String" /> 这种表示形式 <see cref="T:System.Windows.Point" />。
            </summary>
      <param name="provider">
                区域性特定格式设置信息。
              </param>
      <returns>
              一个 <see cref="T:System.String" /> 包含 <see cref="P:System.Windows.Point.X" /> 和 <see cref="P:System.Windows.Point.Y" /> 值 <see cref="T:System.Windows.Point" /> 结构。
            </returns>
    </member>
    <member name="M:System.Windows.PointConverter.#ctor">
      <summary>
              初始化 <see cref="T:System.Windows.PointConverter" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Windows.PointConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              确定是否可以将对象从给定类型转换为的一个实例 <see cref="T:System.Windows.Point" />。
            </summary>
      <param name="context">
                描述类型的上下文信息。
              </param>
      <param name="sourceType">
                正在计算的转换的源的类型。
              </param>
      <returns>
              <see langword="true" /> 如果类型可以转换为 <see cref="T:System.Windows.Point" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.PointConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              确定实例是否 <see cref="T:System.Windows.Point" /> 可以转换为其他类型。
            </summary>
      <param name="context">
                描述类型的上下文信息。
              </param>
      <param name="destinationType">
                所需类型这 <see cref="T:System.Windows.Point" /> 转换进行评估。
              </param>
      <returns>
              <see langword="true" /> 如果此 <see cref="T:System.Windows.Point" /> 可以转换为 <paramref name="destinationType" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.PointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
              尝试将转换指定的对象与 <see cref="T:System.Windows.Point" />。
            </summary>
      <param name="context">
                提供执行转换所需的上下文信息。
              </param>
      <param name="culture">
                若要在转换过程中考虑的区域性信息。
              </param>
      <param name="value">
                要转换的对象。
              </param>
      <returns>
              <see cref="T:System.Windows.Point" /> 从转换创建 <paramref name="value" />。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  如果指定的对象为 NULL 或为不能转换为的类型，则引发 <see cref="T:System.Windows.Point" />。
                </exception>
    </member>
    <member name="M:System.Windows.PointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
              尝试将转换 <see cref="T:System.Windows.Point" /> 为指定的类型。
            </summary>
      <param name="context">
                提供执行转换所需的上下文信息。
              </param>
      <param name="culture">
                若要在转换过程中考虑的区域性信息。
              </param>
      <param name="value">
                要转换的 <see cref="T:System.Windows.Point" />。
              </param>
      <param name="destinationType">
                要转换的类型 <see cref="T:System.Windows.Point" /> 到。
              </param>
      <returns>
              创建将该表达式转换的对象 <see cref="T:System.Windows.Point" />。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  时引发 <paramref name="value" /> 是 <see langword="null" /> 或者不是 <see cref="T:System.Windows.Point" />, ，或者如果 <paramref name="destinationType" /> 不是要转换的有效类型之一。
                </exception>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor">
      <summary>
               初始化 <see cref="T:System.Windows.PropertyMetadata" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Object)">
      <summary>
               新实例初始化 <see cref="T:System.Windows.PropertyMetadata" /> 类，具有此元数据将应用到的依赖项属性指定的默认值。
            </summary>
      <param name="defaultValue">
                要指定作为某种特定类型的值通常提供的依赖项属性的默认值。
              </param>
      <exception cref="T:System.ArgumentException">
                  <paramref name="defaultValue" /> 不能设置为值 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />; 请参阅备注。
                </exception>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)">
      <summary>
               新实例初始化 <see cref="T:System.Windows.PropertyMetadata" /> 类，具有指定的默认值和 <see cref="T:System.Windows.PropertyChangedCallback" /> 实现引用。
            </summary>
      <param name="defaultValue">
                依赖项属性，作为某种特定类型的值通常提供默认值。
              </param>
      <param name="propertyChangedCallback">
                对是有效的属性值发生更改时由属性系统调用的处理程序实现的引用。
              </param>
      <exception cref="T:System.ArgumentException">
                  <paramref name="defaultValue" /> 不能设置为值 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />; 请参阅备注。
                </exception>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)">
      <summary>
              新实例初始化 <see cref="T:System.Windows.PropertyMetadata" /> 用指定的默认值和回调类。
            </summary>
      <param name="defaultValue">
                依赖项属性，作为某种特定类型的值通常提供默认值。
              </param>
      <param name="propertyChangedCallback">
                对是有效的属性值发生更改时由属性系统调用的处理程序实现的引用。
              </param>
      <param name="coerceValueCallback">
                引用是每当属性系统调用的处理程序实现 <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> 根据此属性。
              </param>
      <exception cref="T:System.ArgumentException">
                  <paramref name="defaultValue" /> 不能设置为值 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />; 请参阅备注。
                </exception>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)">
      <summary>
               新实例初始化 <see cref="T:System.Windows.PropertyMetadata" /> 类与指定 <see cref="T:System.Windows.PropertyChangedCallback" /> 实现引用。
            </summary>
      <param name="propertyChangedCallback">
                对是有效的属性值发生更改时由属性系统调用的处理程序实现的引用。
              </param>
    </member>
    <member name="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)">
      <summary>
              合并元数据包含基本元数据。
            </summary>
      <param name="baseMetadata">
                要与此实例的值合并的基本元数据。
              </param>
      <param name="dp">
                向其应用此元数据依赖项属性。
              </param>
    </member>
    <member name="M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)">
      <summary>
              此元数据已应用到属性，用于指示正在密封元数据时调用。
            </summary>
      <param name="dp">
                向其应用了元数据依赖项属性。
              </param>
      <param name="targetType">
                如果这是类型特定的元数据与此元数据关联的类型。
                 如果这是默认元数据，此值为空引用。
              </param>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
              新实例初始化 <see cref="T:System.Windows.Rect" /> 结构，它具有指定的 x 坐标，y 坐标、 宽度和高度。
            </summary>
      <param name="x">
                矩形左上角的 x 坐标。
              </param>
      <param name="y">
                矩形左上角的 y 坐标。
              </param>
      <param name="width">
                矩形的宽度。
              </param>
      <param name="height">
                矩形的高度。
              </param>
      <exception cref="T:System.ArgumentException">
                  <paramref name="width" /> 是负值。
                
                  - 或 -
                
                  <paramref name="height" /> 是负值。
                </exception>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Point)">
      <summary>
              新实例初始化 <see cref="T:System.Windows.Rect" /> 结构，它是刚好足以包含两个指定的点。
            </summary>
      <param name="point1">
                新添加的矩形必须包含的第一个点。
              </param>
      <param name="point2">
                新添加的矩形必须包含第二个点。
              </param>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Size)">
      <summary>
              新实例初始化 <see cref="T:System.Windows.Rect" /> 结构，它具有指定的左上角位置和指定的宽度和高度。
            </summary>
      <param name="location">
                一个指定的矩形的左上角的位置的点。
              </param>
      <param name="size">
                一个 <see cref="T:System.Windows.Size" /> 结构，它指定的宽度和矩形的高度。
              </param>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Vector)">
      <summary>
              新实例初始化 <see cref="T:System.Windows.Rect" /> 结构，它是刚好足以包含指定的点和指定的点和指定的向量的总和。
            </summary>
      <param name="point">
                必须包含该矩形的第一个点。
              </param>
      <param name="vector">
                若要指定的点的偏移量。
                 生成的矩形将刚好足以包含这两个点。
              </param>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Size)">
      <summary>
              新实例初始化 <see cref="T:System.Windows.Rect" /> 结构，它指定大小的是，它位于 (0，0)。
            </summary>
      <param name="size">
                一个 <see cref="T:System.Windows.Size" /> 结构，它指定的宽度和矩形的高度。
              </param>
    </member>
    <member name="M:System.Windows.Rect.Contains(System.Double,System.Double)">
      <summary>
              指示该矩形是否包含指定的 x 坐标和 y 坐标。
            </summary>
      <param name="x">
                要检查的点 x 坐标。
              </param>
      <param name="y">
                要检查的点的 y 坐标。
              </param>
      <returns>
              <see langword="true" /> 如果 (<paramref name="x" />, ，<paramref name="y" />) 包含由矩形; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Rect.Contains(System.Windows.Point)">
      <summary>
              指示该矩形是否包含指定的点。
            </summary>
      <param name="point">
                要检查的点。
              </param>
      <returns>
              <see langword="true" /> 如果矩形中包含指定的点;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Rect.Contains(System.Windows.Rect)">
      <summary>
              指示该矩形是否包含指定的矩形。
            </summary>
      <param name="rect">
                要检查的矩形。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="rect" /> 完全包含由矩形; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Rect.Equals(System.Object)">
      <summary>
              指示指定的对象是否等于当前的矩形。
            </summary>
      <param name="o">
                要与当前矩形进行比较的对象。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="o" /> 是 <see cref="T:System.Windows.Rect" /> 并具有相同 <see cref="P:System.Windows.Rect.Location" /> 和 <see cref="P:System.Windows.Rect.Size" /> 值作为当前矩形; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Rect.Equals(System.Windows.Rect)">
      <summary>
              指示指定的矩形是否等于当前的矩形。
            </summary>
      <param name="value">
                要与当前矩形进行比较的矩形。
              </param>
      <returns>
              <see langword="true" /> 如果指定的矩形具有相同 <see cref="P:System.Windows.Rect.Location" /> 和 <see cref="P:System.Windows.Rect.Size" /> 值作为当前矩形; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Rect.Equals(System.Windows.Rect,System.Windows.Rect)">
      <summary>
              指示指定的矩形是否相等。
            </summary>
      <param name="rect1">
                要比较的第一个矩形。
              </param>
      <param name="rect2">
                要比较的第二个矩形。
              </param>
      <returns>
              <see langword="true" /> 如果这些矩形具有相同 <see cref="P:System.Windows.Rect.Location" /> 和 <see cref="P:System.Windows.Rect.Size" /> 值; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Rect.GetHashCode">
      <summary>
              创建该矩形的哈希代码。
            </summary>
      <returns>
              当前的哈希代码 <see cref="T:System.Windows.Rect" /> 结构。
            </returns>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Double,System.Double)">
      <summary>
              展开或功能通过使用指定的宽度和高度值，请在所有方向来减小该矩形。
            </summary>
      <param name="width">
                若要展开或收缩的左侧和右侧的矩形的量。
              </param>
      <param name="height">
                若要展开或收缩该矩形的顶部和底部边的量。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  对调用此方法 <see cref="P:System.Windows.Rect.Empty" /> 矩形。
                </exception>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Windows.Rect,System.Double,System.Double)">
      <summary>
              创建扩展或缩小的指定的矩形的指定宽度和高度值，请在所有方向得到的一个矩形。
            </summary>
      <param name="rect">
                <see cref="T:System.Windows.Rect" /> 结构修改。
              </param>
      <param name="width">
                若要展开或收缩的左侧和右侧的矩形的量。
              </param>
      <param name="height">
                若要展开或收缩该矩形的顶部和底部边的量。
              </param>
      <returns>
              生成的矩形。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="rect" /> 是 <see cref="P:System.Windows.Rect.Empty" /> 矩形。
                </exception>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Windows.Rect,System.Windows.Size)">
      <summary>
              返回矩形是指定的矩形指定的矩形 <see cref="T:System.Windows.Size" />, ，在所有方向。
            </summary>
      <param name="rect">
                <see cref="T:System.Windows.Rect" /> 结构修改。
              </param>
      <param name="size">
                指定要扩展矩形的量。
                <see cref="T:System.Windows.Size" /> 结构的 <see cref="P:System.Windows.Size.Width" /> 属性指定要增加的矩形的量 <see cref="P:System.Windows.Rect.Left" /> 和 <see cref="P:System.Windows.Rect.Right" /> 属性。
                <see cref="T:System.Windows.Size" /> 结构的 <see cref="P:System.Windows.Size.Height" /> 属性指定要增加的矩形的量 <see cref="P:System.Windows.Rect.Top" /> 和 <see cref="P:System.Windows.Rect.Bottom" /> 属性。
              </param>
      <returns>
              生成的矩形。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="rect" /> 是 <see cref="P:System.Windows.Rect.Empty" /> 矩形。
                </exception>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Windows.Size)">
      <summary>
              使用指定的放大矩形 <see cref="T:System.Windows.Size" />, ，在所有方向。
            </summary>
      <param name="size">
                指定要扩展矩形的量。
                <see cref="T:System.Windows.Size" /> 结构的 <see cref="P:System.Windows.Size.Width" /> 属性指定要增加的矩形的量 <see cref="P:System.Windows.Rect.Left" /> 和 <see cref="P:System.Windows.Rect.Right" /> 属性。
                <see cref="T:System.Windows.Size" /> 结构的 <see cref="P:System.Windows.Size.Height" /> 属性指定要增加的矩形的量 <see cref="P:System.Windows.Rect.Top" /> 和 <see cref="P:System.Windows.Rect.Bottom" /> 属性。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  对调用此方法 <see cref="P:System.Windows.Rect.Empty" /> 矩形。
                </exception>
    </member>
    <member name="M:System.Windows.Rect.Intersect(System.Windows.Rect)">
      <summary>
              查找当前矩形的交集指定的矩形，并将结果存储为当前的矩形。
            </summary>
      <param name="rect">
                要与当前矩形相交的矩形。
              </param>
    </member>
    <member name="M:System.Windows.Rect.Intersect(System.Windows.Rect,System.Windows.Rect)">
      <summary>
              返回指定的矩形的交集。
            </summary>
      <param name="rect1">
                要比较的第一个矩形。
              </param>
      <param name="rect2">
                要比较的第二个矩形。
              </param>
      <returns>
              两个矩形交集或 <see cref="P:System.Windows.Rect.Empty" /> 如果不存在任何交集。
            </returns>
    </member>
    <member name="M:System.Windows.Rect.IntersectsWith(System.Windows.Rect)">
      <summary>
              指示指定的矩形是否与当前矩形相交。
            </summary>
      <param name="rect">
                要检查的矩形。
              </param>
      <returns>
              <see langword="true" /> 如果指定的矩形相交，与当前矩形;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Double,System.Double)">
      <summary>
              将矩形移动指定的水平和垂直量。
            </summary>
      <param name="offsetX">
                要水平移动矩形的量。
              </param>
      <param name="offsetY">
                要垂直移动矩形的量。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  对调用此方法 <see cref="P:System.Windows.Rect.Empty" /> 矩形。
                </exception>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Windows.Rect,System.Double,System.Double)">
      <summary>
              通过使用指定的水平和垂直量从指定的矩形返回偏移量的矩形。
            </summary>
      <param name="rect">
                要移动的矩形。
              </param>
      <param name="offsetX">
                新的矩形的水平偏移量。
              </param>
      <param name="offsetY">
                新的矩形的垂直偏移量。
              </param>
      <returns>
              生成的矩形。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="rect" /> 为 <see cref="P:System.Windows.Rect.Empty" />。
                </exception>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Windows.Rect,System.Windows.Vector)">
      <summary>
              通过使用指定的向量，从指定的矩形中返回的偏移量的矩形。
            </summary>
      <param name="rect">
                原始矩形。
              </param>
      <param name="offsetVector">
                一个指定新添加的矩形的水平和垂直偏移量的向量。
              </param>
      <returns>
              生成的矩形。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="rect" /> 为 <see cref="P:System.Windows.Rect.Empty" />。
                </exception>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Windows.Vector)">
      <summary>
              将矩形移动指定的向量。
            </summary>
      <param name="offsetVector">
                一个向量，指定要移动矩形水平和垂直的金额。
              </param>
      <exception cref="T:System.InvalidOperationException">
                  对调用此方法 <see cref="P:System.Windows.Rect.Empty" /> 矩形。
                </exception>
    </member>
    <member name="M:System.Windows.Rect.op_Equality(System.Windows.Rect,System.Windows.Rect)">
      <summary>
              比较两个矩形完全相等。
            </summary>
      <param name="rect1">
                要比较的第一个矩形。
              </param>
      <param name="rect2">
                要比较的第二个矩形。
              </param>
      <returns>
              <see langword="true" /> 如果这些矩形具有相同 <see cref="P:System.Windows.Rect.Location" /> 和 <see cref="P:System.Windows.Rect.Size" /> 值; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Rect.op_Inequality(System.Windows.Rect,System.Windows.Rect)">
      <summary>
              比较两个矩形不相等。
            </summary>
      <param name="rect1">
                要比较的第一个矩形。
              </param>
      <param name="rect2">
                要比较的第二个矩形。
              </param>
      <returns>
              <see langword="true" /> 如果这些矩形不具有相同 <see cref="P:System.Windows.Rect.Location" /> 和 <see cref="P:System.Windows.Rect.Size" /> 值; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Rect.Parse(System.String)">
      <summary>
              从指定的字符串表示形式创建一个新矩形。
            </summary>
      <param name="source">
                字符串表示形式要在窗体的矩形"x、 y、 宽度和高度"。
              </param>
      <returns>
              生成的矩形。
            </returns>
    </member>
    <member name="M:System.Windows.Rect.Scale(System.Double,System.Double)">
      <summary>
              当前矩形的大小乘以指定 x 和 y 值。
            </summary>
      <param name="scaleX">
                X 方向的缩放比例。
              </param>
      <param name="scaleY">
                Y 方向的缩放比例。
              </param>
    </member>
    <member name="M:System.Windows.Rect.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>
              使用指定格式对当前实例的值设置格式。
            </summary>
      <param name="format">
                要使用的格式。
              
                - 或 - 
              
                null 引用（在 Visual Basic 中为 <see langword="Nothing" />），用于使用为 <see cref="T:System.IFormattable" /> 实现的类型定义的默认格式。
              </param>
      <param name="provider">
                要用于对值设置格式的提供程序。
              
                - 或 - 
              
                null 引用（在 Visual Basic 中为 <see langword="Nothing" />），用于从操作系统的当前区域设置获取数字格式信息。
              </param>
      <returns>
              矩形的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Windows.Rect.ToString">
      <summary>
              返回的字符串表示形式的矩形。
            </summary>
      <returns>
              当前矩形的字符串表示形式。
               字符串具有以下形式:"<see cref="P:System.Windows.Rect.X" />,，<see cref="P:System.Windows.Rect.Y" />,，<see cref="P:System.Windows.Rect.Width" />,，<see cref="P:System.Windows.Rect.Height" />"。
            </returns>
    </member>
    <member name="M:System.Windows.Rect.ToString(System.IFormatProvider)">
      <summary>
              通过使用指定的格式提供程序返回的字符串表示形式的矩形。
            </summary>
      <param name="provider">
                区域性特定格式设置信息。
              </param>
      <returns>
              当前指定的格式提供商确定的矩形的字符串表示形式。
            </returns>
    </member>
    <member name="M:System.Windows.Rect.Transform(System.Windows.Media.Matrix)">
      <summary>
              将矩形转换通过应用指定的矩阵。
            </summary>
      <param name="matrix">
                指定要应用的变换矩阵。
              </param>
    </member>
    <member name="M:System.Windows.Rect.Transform(System.Windows.Rect,System.Windows.Media.Matrix)">
      <summary>
              返回通过指定的矩阵应用到指定的矩形所产生的矩形。
            </summary>
      <param name="rect">
                一个矩形，为转换的基础。
              </param>
      <param name="matrix">
                指定要应用的变换矩阵。
              </param>
      <returns>
              从操作生成的矩形。
            </returns>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Point)">
      <summary>
              放大当前矩形刚好足以包含指定的点。
            </summary>
      <param name="point">
                要包括的点。
              </param>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Rect)">
      <summary>
              刚好足以放大当前矩形包含指定的矩形。
            </summary>
      <param name="rect">
                要包括的矩形。
              </param>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Point)">
      <summary>
              创建正好包含指定的矩形和指定的点的矩形。
            </summary>
      <param name="rect">
                要包括的矩形。
              </param>
      <param name="point">
                要包括的点。
              </param>
      <returns>
              完全足够大，以指定的矩形和指定的点包含一个矩形。
            </returns>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Rect)">
      <summary>
              创建正好包含两个指定的矩形的矩形。
            </summary>
      <param name="rect1">
                要包含的第一个矩形。
              </param>
      <param name="rect2">
                要包含的第二个矩形。
              </param>
      <returns>
              生成的矩形。
            </returns>
    </member>
    <member name="M:System.Windows.RectConverter.#ctor">
      <summary>
              初始化 <see cref="T:System.Windows.RectConverter" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Windows.RectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              确定是否可以将对象从给定类型转换为的一个实例 <see cref="T:System.Windows.Rect" />。
            </summary>
      <param name="context">
                提供执行转换所需的上下文信息。
              </param>
      <param name="sourceType">
                正在计算的转换的源的类型。
              </param>
      <returns>
              <see langword="true" /> 如果类型可以转换为 <see cref="T:System.Windows.Rect" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.RectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              确定是否 <see cref="T:System.Windows.Rect" /> 可以转换为指定的类型。
            </summary>
      <param name="context">
                提供执行转换所需的上下文信息。
              </param>
      <param name="destinationType">
                所需类型这 <see cref="T:System.Windows.Rect" /> 转换进行评估。
              </param>
      <returns>
              <see langword="true" /> 如果 <see cref="T:System.Windows.Rect" /> 可以转换为 <paramref name="destinationType" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.RectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
              尝试将转换指定的对象与 <see cref="T:System.Windows.Rect" />。
            </summary>
      <param name="context">
                提供执行转换所需的上下文信息。
              </param>
      <param name="culture">
                在转换时考虑的区域性信息。
              </param>
      <param name="value">
                要转换的对象。
              </param>
      <returns>
              <see cref="T:System.Windows.Rect" /> 从转换创建 <paramref name="value" />。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  如果指定的对象为 NULL 或为不能转换为的类型，则引发 <see cref="T:System.Windows.Rect" />。
                </exception>
    </member>
    <member name="M:System.Windows.RectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
               尝试将转换 <see cref="T:System.Windows.Rect" /> 为指定的类型。
            </summary>
      <param name="context">
                提供执行转换所需的上下文信息。
              </param>
      <param name="culture">
                转换过程中考虑的区域性信息。
              </param>
      <param name="value">
                要转换的 <see cref="T:System.Windows.Rect" />。
              </param>
      <param name="destinationType">
                要转换的类型 <see cref="T:System.Windows.Rect" /> 到。
              </param>
      <returns>
              创建将该表达式转换的对象 <see cref="T:System.Windows.Rect" />。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  <paramref name="value" /> 为 <see langword="null" />。
                
                  - 或 - 
                
                  <paramref name="value" /> 不是 <see cref="T:System.Windows.Rect" />。
                
                  - 或 - 
                
                  <paramref name="destinationType" /> 不是要转换的有效类型之一。
                </exception>
    </member>
    <member name="M:System.Windows.Size.#ctor(System.Double,System.Double)">
      <summary>
              新实例初始化 <see cref="T:System.Windows.Size" /> 结构，并将其分配一个初始 <paramref name="width" /> 和 <paramref name="height" />。
            </summary>
      <param name="width">
                实例的初始宽度 <see cref="T:System.Windows.Size" />。
              </param>
      <param name="height">
                实例的初始高度 <see cref="T:System.Windows.Size" />。
              </param>
    </member>
    <member name="M:System.Windows.Size.Equals(System.Object)">
      <summary>
              比较对象的实例与 <see cref="T:System.Windows.Size" /> 是否相等。
            </summary>
      <param name="o">
                要比较的 <see cref="T:System.Object" />。
              </param>
      <returns>
              <see langword="true" /> 如果大小相等;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Size.Equals(System.Windows.Size)">
      <summary>
              比较值的实例和 <see cref="T:System.Windows.Size" /> 是否相等。
            </summary>
      <param name="value">
                要与此当前实例进行比较的大小 <see cref="T:System.Windows.Size" />。
              </param>
      <returns>
              如果 <see cref="T:System.Windows.Size" /> 的实例相等，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Size.Equals(System.Windows.Size,System.Windows.Size)">
      <summary>
              比较两个实例的 <see cref="T:System.Windows.Size" /> 是否相等。
            </summary>
      <param name="size1">
                要比较的第一个 <see cref="T:System.Windows.Size" /> 实例。
              </param>
      <param name="size2">
                要比较的第二个 <see cref="T:System.Windows.Size" /> 实例。
              </param>
      <returns>
              如果 <see cref="T:System.Windows.Size" /> 的实例相等，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Size.GetHashCode">
      <summary>
              获取 <see cref="T:System.Windows.Size" /> 的此实例的哈希代码。
            </summary>
      <returns>
              <see cref="T:System.Windows.Size" /> 的此实例的哈希代码。
            </returns>
    </member>
    <member name="M:System.Windows.Size.op_Equality(System.Windows.Size,System.Windows.Size)">
      <summary>
              比较两个实例的 <see cref="T:System.Windows.Size" /> 是否相等。
            </summary>
      <param name="size1">
                要比较的第一个 <see cref="T:System.Windows.Size" /> 实例。
              </param>
      <param name="size2">
                要比较的第二个 <see cref="T:System.Windows.Size" /> 实例。
              </param>
      <returns>
              为 true 的两个实例 <see cref="T:System.Windows.Size" /> 相等; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Size.op_Explicit(System.Windows.Size)~System.Windows.Point">
      <summary>
              实例显式转换 <see cref="T:System.Windows.Size" /> 实例 <see cref="T:System.Windows.Point" />。
            </summary>
      <param name="size">
                <see cref="T:System.Windows.Size" /> 要转换的值。
              </param>
      <returns>
              一个 <see cref="T:System.Windows.Point" /> 此实例的值等于 <see cref="T:System.Windows.Size" />。
            </returns>
    </member>
    <member name="M:System.Windows.Size.op_Explicit(System.Windows.Size)~System.Windows.Vector">
      <summary>
              实例显式转换 <see cref="T:System.Windows.Size" /> 实例 <see cref="T:System.Windows.Vector" />。
            </summary>
      <param name="size">
                <see cref="T:System.Windows.Size" /> 要转换的值。
              </param>
      <returns>
              一个 <see cref="T:System.Windows.Vector" /> 此实例的值等于 <see cref="T:System.Windows.Size" />。
            </returns>
    </member>
    <member name="M:System.Windows.Size.op_Inequality(System.Windows.Size,System.Windows.Size)">
      <summary>
              比较两个实例的 <see cref="T:System.Windows.Size" /> 是否不相等。
            </summary>
      <param name="size1">
                要比较的第一个 <see cref="T:System.Windows.Size" /> 实例。
              </param>
      <param name="size2">
                要比较的第二个 <see cref="T:System.Windows.Size" /> 实例。
              </param>
      <returns>
              <see langword="true" /> 如果实例 <see cref="T:System.Windows.Size" /> 不相等; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Size.Parse(System.String)">
      <summary>
              返回的实例 <see cref="T:System.Windows.Size" /> 从转换后 <see cref="T:System.String" />。
            </summary>
      <param name="source">
                一个 <see cref="T:System.String" /> 值分析到 <see cref="T:System.Windows.Size" /> 值。
              </param>
      <returns>
              <see cref="T:System.Windows.Size" /> 的一个实例。
            </returns>
    </member>
    <member name="M:System.Windows.Size.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>
              此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，但不可直接在代码中使用。
            </summary>
      <param name="format">
                 要使用的格式。
              </param>
      <param name="provider">
                 要用于对值设置格式的提供程序。
              </param>
      <returns>
               采用指定格式的当前实例的值。
            </returns>
    </member>
    <member name="M:System.Windows.Size.ToString">
      <summary>
              返回 <see cref="T:System.String" /> ，表示此 <see cref="T:System.Windows.Size" /> 对象。
            </summary>
      <returns>
              一个 <see cref="T:System.String" /> ，它指定跟高度的宽度。
            </returns>
    </member>
    <member name="M:System.Windows.Size.ToString(System.IFormatProvider)">
      <summary>
              返回 <see cref="T:System.String" /> ，它表示此实例的 <see cref="T:System.Windows.Size" />。
            </summary>
      <param name="provider">
                一个对象，提供一种方法，用于控制格式设置。
              </param>
      <returns>
              一个 <see cref="T:System.String" /> ，表示此 <see cref="T:System.Windows.Size" /> 对象。
            </returns>
    </member>
    <member name="M:System.Windows.SizeConverter.#ctor">
      <summary>
              初始化 <see cref="T:System.Windows.SizeConverter" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Windows.SizeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              确定是否可以将一个类从给定类型转换到的实例 <see cref="T:System.Windows.Size" />。
            </summary>
      <param name="context">
                提供有关组件的上下文信息。
              </param>
      <param name="sourceType">
                标识要计算以供转换的数据类型。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="sourceType" /> 可以转换为的一个实例 <see cref="T:System.Windows.Size" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.SizeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              确定实例是否 <see cref="T:System.Windows.Size" /> 可以转换为其他类型。
            </summary>
      <param name="context">
                提供有关组件的上下文信息。
              </param>
      <param name="destinationType">
                标识要计算以供转换的数据类型。
              </param>
      <returns>
              <see langword="true" /> 如果此实例的 <see cref="T:System.Windows.Size" /> 可以转换为 <paramref name="destinationType" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.SizeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
              尝试将指定的对象转换为的一个实例 <see cref="T:System.Windows.Size" />。
            </summary>
      <param name="context">
                提供有关组件的上下文信息。
              </param>
      <param name="culture">
                在转换过程中应考虑的区域性特定信息。
              </param>
      <param name="value">
                要转换的源对象。
              </param>
      <returns>
              实例 <see cref="T:System.Windows.Size" /> ，它是从已转换创建 <paramref name="source" />。
            </returns>
    </member>
    <member name="M:System.Windows.SizeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
              尝试将转换的一个实例 <see cref="T:System.Windows.Size" /> 为指定的类型。
            </summary>
      <param name="context">
                提供有关组件的上下文信息。
              </param>
      <param name="culture">
                在转换过程中应考虑的区域性特定信息。
              </param>
      <param name="value">
                实例 <see cref="T:System.Windows.Size" /> 将转换。
              </param>
      <param name="destinationType">
                指示此实例的类型的 <see cref="T:System.Windows.Size" /> 转换为。
              </param>
      <returns>
              转换后的实例创建的对象 <see cref="T:System.Windows.Size" />。
            </returns>
      <exception cref="T:System.NotSupportedException">
                  <paramref name="value" /> 是 <see langword="null" /> 或者不是实例 <see cref="T:System.Windows.Size" />, ，或者如果 <paramref name="destinationType" /> 不是有效的目标类型之一。
                </exception>
    </member>
    <member name="M:System.Windows.SplashScreen.#ctor(System.Reflection.Assembly,System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Windows.SplashScreen" /> 与指定的资源程序集的类。
            </summary>
      <param name="resourceAssembly">
                包含嵌入的资源的程序集。
              </param>
      <param name="resourceName">
                嵌入的资源的名称。
              </param>
    </member>
    <member name="M:System.Windows.SplashScreen.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:System.Windows.SplashScreen" /> 使用指定的资源的类。
            </summary>
      <param name="resourceName">
                嵌入的资源的名称。
              </param>
    </member>
    <member name="M:System.Windows.SplashScreen.Close(System.TimeSpan)">
      <summary>
              关闭初始屏幕。
            </summary>
      <param name="fadeoutDuration">
                一个 <see cref="T:System.TimeSpan" /> ，它指定需要多长时间它将为初始屏幕以淡入淡出后关闭操作已启动。
              </param>
    </member>
    <member name="M:System.Windows.SplashScreen.Show(System.Boolean)">
      <summary>
              显示初始屏幕。
            </summary>
      <param name="autoClose">
                <see langword="true" /> 若要自动关闭初始屏幕上。 <see langword="false" /> 若要手动关闭初始屏幕。
              </param>
      <exception cref="T:System.IO.IOException">
                  找不到构造函数中指定的资源。
                </exception>
    </member>
    <member name="M:System.Windows.SplashScreen.Show(System.Boolean,System.Boolean)">
      <summary>
              显示初始屏幕。
            </summary>
      <param name="autoClose">
                <see langword="true" /> 若要自动关闭初始屏幕上。 <see langword="false" /> 若要手动关闭初始屏幕。
              </param>
      <param name="topMost">
                <see langword="true" /> 如果初始屏幕窗口应使用 WS_EX_TOPMOST 样式中;否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])">
      <summary>
              在线程上执行以异步方式使用指定的参数指定的委托， <see cref="T:System.Windows.Threading.Dispatcher" /> 上创建了。
            </summary>
      <param name="method">
                采用指定参数的方法委托 <paramref name="args" />, ，它将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列。
              </param>
      <param name="args">
                作为给定方法的自变量传递的对象数组。
                 可以为 <see langword="null" />。
              </param>
      <returns>
              一个对象，它之后立即返回 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 调用时，可用来按原样执行挂起在事件队列的委托交互。
            </returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])">
      <summary>
              在线程上执行指定的委托使用指定的参数，按指定的优先级，以异步方式， <see cref="T:System.Windows.Threading.Dispatcher" /> 上创建了。
            </summary>
      <param name="method">
                采用指定参数的方法委托 <paramref name="args" />, ，它将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列。
              </param>
      <param name="priority">
                相对于其他中挂起的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中，指定的方法调用。
              </param>
      <param name="args">
                作为给定方法的自变量传递的对象数组。
                 可以为 <see langword="null" />。
              </param>
      <returns>
              一个对象，它之后立即返回 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 调用时，可用来按原样执行挂起在事件队列的委托交互。
            </returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)">
      <summary>
              在线程上执行指定的委托以异步方式按指定的优先级 <see cref="T:System.Windows.Threading.Dispatcher" /> 与相关联。
            </summary>
      <param name="priority">
                相对于其他中挂起的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中，指定的方法调用。
              </param>
      <param name="method">
                一个方法委托不采用任何参数，它将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列。
              </param>
      <returns>
              一个对象，它之后立即返回 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 调用时，可用来按原样执行挂起在事件队列的委托交互。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="method" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
                  <paramref name="priority" /> 不是有效 <see cref="T:System.Windows.Threading.DispatcherPriority" />。
                </exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)">
      <summary>
              在线程上执行指定的委托以异步方式按指定的优先级并使用指定的参数 <see cref="T:System.Windows.Threading.Dispatcher" /> 与相关联。
            </summary>
      <param name="priority">
                相对于其他中挂起的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中，指定的方法调用。
              </param>
      <param name="method">
                带一个参数，将被推送到方法的委托 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列。
              </param>
      <param name="arg">
                要将作为参数传递给指定的方法的对象。
              </param>
      <returns>
              一个对象，它之后立即返回 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 调用时，可用来按原样执行挂起在事件队列的委托交互。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="method" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
                  <paramref name="priority" /> 不是有效 <see cref="T:System.Windows.Threading.DispatcherPriority" />。
                </exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])">
      <summary>
              在线程上执行指定的委托以异步方式在指定的优先级并且指定的参数数组 <see cref="T:System.Windows.Threading.Dispatcher" /> 与相关联。
            </summary>
      <param name="priority">
                相对于其他中挂起的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中，指定的方法调用。
              </param>
      <param name="method">
                一种方法的委托采用多个参数，它将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列。
              </param>
      <param name="arg">
                要将作为参数传递给指定的方法的对象。
              </param>
      <param name="args">
                作为指定方法的自变量传递的对象数组。
              </param>
      <returns>
              一个对象，它之后立即返回 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 调用时，可用来按原样中挂起执行的委托交互 <see cref="T:System.Windows.Threading.Dispatcher" /> 队列。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="method" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
                  <see cref="T:System.Windows.Threading.DispatcherPriority" /> 不是有效的优先级。
                </exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)">
      <summary>
              启动关机的 <see cref="T:System.Windows.Threading.Dispatcher" /> 以异步方式。
            </summary>
      <param name="priority">
                从此处开始关闭调度程序优先级。
              </param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.CheckAccess">
      <summary>
              确定调用线程是否与此相关的线程 <see cref="T:System.Windows.Threading.Dispatcher" />。
            </summary>
      <returns>
              <see langword="true" /> 调用线程是否与此相关的线程 <see cref="T:System.Windows.Threading.Dispatcher" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.DisableProcessing">
      <summary>
              禁用处理 <see cref="T:System.Windows.Threading.Dispatcher" /> 队列。
            </summary>
      <returns>
              用于重新启用调度程序处理的结构。
            </returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.ExitAllFrames">
      <summary>
              退出所有帧，包括嵌套的帧的请求。
            </summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)">
      <summary>
              获取 <see cref="T:System.Windows.Threading.Dispatcher" /> 指定的线程。
            </summary>
      <param name="thread">
                若要获取的线程 <see cref="T:System.Windows.Threading.Dispatcher" /> 从。
              </param>
      <returns>
              调度程序 <paramref name="thread" />。
            </returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Action)">
      <summary>
              执行指定 <see cref="T:System.Action" /> 线程上同步 <see cref="T:System.Windows.Threading.Dispatcher" /> 与相关联。
            </summary>
      <param name="callback">
                要通过调度程序调用的委托。
              </param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority)">
      <summary>
              执行指定 <see cref="T:System.Action" /> 以同步方式按指定的优先级的线程上 <see cref="T:System.Windows.Threading.Dispatcher" /> 与相关联。
            </summary>
      <param name="callback">
                要通过调度程序调用的委托。
              </param>
      <param name="priority">
                确定以何种顺序指定的回调调用相对于其他中挂起的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" />。
              </param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)">
      <summary>
              执行指定 <see cref="T:System.Action" /> 以同步方式按指定的优先级的线程上 <see cref="T:System.Windows.Threading.Dispatcher" /> 与相关联。
            </summary>
      <param name="callback">
                要通过调度程序调用的委托。
              </param>
      <param name="priority">
                确定以何种顺序指定的回调调用相对于其他中挂起的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" />。
              </param>
      <param name="cancellationToken">
                一个对象，该值指示是否要取消的操作。
              </param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)">
      <summary>
              执行指定 <see cref="T:System.Action" /> 以同步方式按指定的优先级的线程上 <see cref="T:System.Windows.Threading.Dispatcher" /> 与相关联。
            </summary>
      <param name="callback">
                要通过调度程序调用的委托。
              </param>
      <param name="priority">
                确定以何种顺序指定的回调调用相对于其他中挂起的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" />。
              </param>
      <param name="cancellationToken">
                一个对象，该值指示是否要取消的操作。
              </param>
      <param name="timeout">
                要启动的操作等待的时间最小数量。
              </param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])">
      <summary>
              在线程上异步执行指定的参数指定的委托 <see cref="T:System.Windows.Threading.Dispatcher" /> 与相关联。
            </summary>
      <param name="method">
                采用指定参数的方法的委托 <paramref name="args" />, ，它将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列。
              </param>
      <param name="args">
                作为给定方法的自变量传递的对象数组。
                 可以为 <see langword="null" />。
              </param>
      <returns>
              正在调用的委托的返回值或 <see langword="null" /> 如果委托没有返回值。
            </returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Object[])">
      <summary>
              在线程上异步执行指定的委托以使用指定的参数指定的优先级的指定的时间跨度内 <see cref="T:System.Windows.Threading.Dispatcher" /> 与相关联。
            </summary>
      <param name="method">
                采用指定参数的方法的委托 <paramref name="args" />, ，它将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列。
              </param>
      <param name="timeout">
                最大，无法完成操作等待的时间量。
              </param>
      <param name="args">
                作为给定方法的自变量传递的对象数组。
                 可以为 <see langword="null" />。
              </param>
      <returns>
              正在调用的委托的返回值或 <see langword="null" /> 如果委托没有返回值。
            </returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])">
      <summary>
              在该线程上异步执行以使用指定的参数指定的优先级的指定的时间跨度内指定的委托 <see cref="T:System.Windows.Threading.Dispatcher" /> 与相关联。
            </summary>
      <param name="method">
                采用指定参数的方法的委托 <paramref name="args" />, ，它将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列。
              </param>
      <param name="timeout">
                最大，无法完成操作等待的时间量。
              </param>
      <param name="priority">
                相对于其他中挂起的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中，指定的方法调用。
              </param>
      <param name="args">
                作为给定方法的自变量传递的对象数组。
                 可以为 <see langword="null" />。
              </param>
      <returns>
              正在调用的委托的返回值或 <see langword="null" /> 如果委托没有返回值。
            </returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])">
      <summary>
              在该线程上异步执行指定的委托以使用指定的参数指定的优先级 <see cref="T:System.Windows.Threading.Dispatcher" /> 与相关联。
            </summary>
      <param name="method">
                采用指定参数的方法的委托 <paramref name="args" />, ，它将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列。
              </param>
      <param name="priority">
                相对于其他中挂起的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中，指定的方法调用。
              </param>
      <param name="args">
                作为给定方法的自变量传递的对象数组。
                 可以为 <see langword="null" />。
              </param>
      <returns>
              正在调用的委托的返回值或 <see langword="null" /> 如果委托没有返回值。
            </returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)">
      <summary>
              在其上的线程上执行指定的委托以同步方式按指定的优先级 <see cref="T:System.Windows.Threading.Dispatcher" /> 与相关联。
            </summary>
      <param name="priority">
                相对于其他中挂起的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中，指定的方法调用。
              </param>
      <param name="method">
                一种方法的委托不采用任何参数，它将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列。
              </param>
      <returns>
              正在调用的委托的返回值或 <see langword="null" /> 如果委托没有返回值。
            </returns>
      <exception cref="T:System.ArgumentException">
                  <paramref name="priority" /> 等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。
                </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
                  <paramref name="priority" /> 不是有效的优先级。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="method" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)">
      <summary>
              在该线程上异步执行指定的委托，以使用指定的参数指定的优先级 <see cref="T:System.Windows.Threading.Dispatcher" /> 与相关联。
            </summary>
      <param name="priority">
                相对于其他中挂起的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中，指定的方法调用。
              </param>
      <param name="method">
                带一个参数，将被推送到方法的委托 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列。
              </param>
      <param name="arg">
                要将作为参数传递给给定方法的对象。
              </param>
      <returns>
              正在调用的委托的返回值或 <see langword="null" /> 如果委托没有返回值。
            </returns>
      <exception cref="T:System.ArgumentException">
                  <paramref name="priority" /> 等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。
                </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
                  <paramref name="priority" /> 不是有效的优先级。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="method" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])">
      <summary>
              在线程上异步执行指定的委托，以使用指定的参数指定的优先级 <see cref="T:System.Windows.Threading.Dispatcher" /> 与相关联。
            </summary>
      <param name="priority">
                相对于其他中挂起的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中，指定的方法调用。
              </param>
      <param name="method">
                一种方法的委托采用多个参数，它将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列。
              </param>
      <param name="arg">
                要将作为参数传递给给定方法的对象。
              </param>
      <param name="args">
                作为给定方法的自变量传递的对象数组。
              </param>
      <returns>
              正在调用的委托的返回值或 <see langword="null" /> 如果委托没有返回值。
            </returns>
      <exception cref="T:System.ArgumentException">
                  <paramref name="priority" /> 等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。
                </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
                  <paramref name="priority" /> 不是有效的优先级。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="method" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)">
      <summary>
              在线程上执行指定的委托以同步方式按指定的优先级并使用指定的超时值 <see cref="T:System.Windows.Threading.Dispatcher" /> 已创建。
            </summary>
      <param name="priority">
                相对于其他中挂起的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中，指定的方法调用。
              </param>
      <param name="timeout">
                最长时间等待操作完成。
              </param>
      <param name="method">
                一个方法委托不采用任何参数，它将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列。
              </param>
      <returns>
              正在调用的委托的返回值或 <see langword="null" /> 如果委托没有返回值。
            </returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)">
      <summary>
              在该线程上异步执行指定的委托，以使用指定的参数指定的优先级 <see cref="T:System.Windows.Threading.Dispatcher" /> 与相关联。
            </summary>
      <param name="priority">
                相对于其他中挂起的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中，指定的方法调用。
              </param>
      <param name="timeout">
                最长时间等待操作完成。
              </param>
      <param name="method">
                一种方法的委托采用多个参数，它将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列。
              </param>
      <param name="arg">
                要将作为参数传递给给定方法的对象。
                 如果不需要参数，则可以为 <see langword="null" />。
              </param>
      <returns>
              正在调用的委托的返回值或 <see langword="null" /> 如果委托没有返回值。
            </returns>
      <exception cref="T:System.ArgumentException">
                  <paramref name="priority" /> 等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。
                </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
                  <paramref name="priority" /> 不是有效的优先级。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="method" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])">
      <summary>
              在该线程上异步执行指定的委托以使用指定的参数指定的优先级 <see cref="T:System.Windows.Threading.Dispatcher" /> 与相关联。
            </summary>
      <param name="priority">
                相对于其他中挂起的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中，指定的方法调用。
              </param>
      <param name="timeout">
                最长时间等待操作完成。
              </param>
      <param name="method">
                一种方法的委托采用多个参数，它将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列。
              </param>
      <param name="arg">
                要将作为参数传递给指定的方法的对象。
              </param>
      <param name="args">
                作为指定方法的自变量传递的对象数组。
              </param>
      <returns>
              正在调用的委托的返回值或 <see langword="null" /> 如果委托没有返回值。
            </returns>
      <exception cref="T:System.ArgumentException">
                  <paramref name="priority" /> 等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。
                </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
                  <paramref name="priority" /> 不是有效的 <see cref="T:System.Windows.Threading.DispatcherPriority" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="method" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0})">
      <summary>
              执行指定 <see cref="T:System.Func`1" /> 线程上同步 <see cref="T:System.Windows.Threading.Dispatcher" /> 与相关联。
            </summary>
      <param name="callback">
                要通过调度程序调用的委托。
              </param>
      <typeparam name="TResult">
                指定的委托的返回值类型。
              </typeparam>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)">
      <summary>
              执行指定 <see cref="T:System.Func`1" /> 同步按指定的优先级的线程上 <see cref="T:System.Windows.Threading.Dispatcher" /> 与相关联。
            </summary>
      <param name="callback">
                要通过调度程序调用的委托。
              </param>
      <param name="priority">
                确定以何种顺序指定的回调调用相对于其他中挂起的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" />。
              </param>
      <typeparam name="TResult">
                指定的委托的返回值类型。
              </typeparam>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)">
      <summary>
              执行指定 <see cref="T:System.Func`1" /> 以同步方式按指定的优先级的线程上 <see cref="T:System.Windows.Threading.Dispatcher" /> 与相关联。
            </summary>
      <param name="callback">
                要通过调度程序调用的委托。
              </param>
      <param name="priority">
                确定以何种顺序指定的回调调用相对于其他中挂起的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" />。
              </param>
      <param name="cancellationToken">
                一个对象，该值指示是否取消该操作。
              </param>
      <typeparam name="TResult">
                指定的委托的返回值类型。
              </typeparam>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)">
      <summary>
              执行指定 <see cref="T:System.Func`1" /> 以同步方式按指定的优先级的线程上 <see cref="T:System.Windows.Threading.Dispatcher" /> 与相关联。
            </summary>
      <param name="callback">
                要通过调度程序调用的委托。
              </param>
      <param name="priority">
                确定以何种顺序指定的回调调用相对于其他中挂起的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" />。
              </param>
      <param name="cancellationToken">
                一个对象，该值指示是否取消该操作。
              </param>
      <param name="timeout">
                要启动的操作等待的时间最小数量。
              </param>
      <typeparam name="TResult">
                指定的委托的返回值类型。
              </typeparam>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)">
      <summary>
              执行指定 <see cref="T:System.Action" /> 在线程上异步 <see cref="T:System.Windows.Threading.Dispatcher" /> 与相关联。
            </summary>
      <param name="callback">
                要通过调度程序调用的委托。
              </param>
      <returns>
              一个对象，它之后立即返回 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" /> 调用时，可用来按原样执行挂起在事件队列的委托交互。
            </returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)">
      <summary>
              执行指定 <see cref="T:System.Action" /> 以异步方式按指定的优先级的线程上 <see cref="T:System.Windows.Threading.Dispatcher" /> 与相关联。
            </summary>
      <param name="callback">
                要通过调度程序调用的委托。
              </param>
      <param name="priority">
                确定以何种顺序指定的回调调用相对于其他中挂起的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" />。
              </param>
      <returns>
              一个对象，它之后立即返回 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" /> 调用时，可用来按原样执行挂起在事件队列的委托交互。
            </returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)">
      <summary>
              执行指定 <see cref="T:System.Action" /> 以异步方式按指定的优先级的线程上 <see cref="T:System.Windows.Threading.Dispatcher" /> 与相关联。
            </summary>
      <param name="callback">
                要通过调度程序调用的委托。
              </param>
      <param name="priority">
                确定以何种顺序指定的回调调用相对于其他中挂起的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" />。
              </param>
      <param name="cancellationToken">
                一个对象，该值指示是否要取消的操作。
              </param>
      <returns>
              一个对象，它之后立即返回 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> 调用时，可用来按原样执行挂起在事件队列的委托交互。
            </returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})">
      <summary>
              执行指定 <see cref="T:System.Func`1" /> 在线程上异步 <see cref="T:System.Windows.Threading.Dispatcher" /> 与相关联。
            </summary>
      <param name="callback">
                要通过调度程序调用的委托。
              </param>
      <typeparam name="TResult">
                指定的委托的返回值类型。
              </typeparam>
      <returns>
              一个对象，它之后立即返回 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" /> 调用时，可用来按原样执行挂起在事件队列的委托交互。
            </returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)">
      <summary>
              执行指定 <see cref="T:System.Func`1" /> 以异步方式按指定的优先级的线程上 <see cref="T:System.Windows.Threading.Dispatcher" /> 与相关联。
            </summary>
      <param name="callback">
                要通过调度程序调用的委托。
              </param>
      <param name="priority">
                确定以何种顺序指定的回调调用相对于其他中挂起的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" />。
              </param>
      <typeparam name="TResult">
                指定的委托的返回值类型。
              </typeparam>
      <returns>
              一个对象，它之后立即返回 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" /> 调用时，可用来按原样执行挂起在事件队列的委托交互。
            </returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)">
      <summary>
              执行指定 <see cref="T:System.Func`1" /> 以同步方式按指定的优先级的线程上 <see cref="T:System.Windows.Threading.Dispatcher" /> 与相关联。
            </summary>
      <param name="callback">
                要通过调度程序调用的委托。
              </param>
      <param name="priority">
                确定以何种顺序指定的回调调用相对于其他中挂起的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" />。
              </param>
      <param name="cancellationToken">
                一个对象，该值指示是否取消该操作。
              </param>
      <typeparam name="TResult">
                指定的委托的返回值类型。
              </typeparam>
      <returns>
              一个对象，它之后立即返回 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> 调用时，可用来按原样执行挂起在事件队列的委托交互。
            </returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeShutdown">
      <summary>
              启动的关闭过程 <see cref="T:System.Windows.Threading.Dispatcher" /> 以同步方式。
            </summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)">
      <summary>
              进入执行循环。
            </summary>
      <param name="frame">
                为处理调度程序帧。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="frame" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> 为 <see langword="true" />
                
                  - 或 -
                
                  <paramref name="frame" /> 运行于不同 <see cref="T:System.Windows.Threading.Dispatcher" />。
                
                  - 或 -
                
                  调度程序处理已被禁用。
                </exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Run">
      <summary>
              将主执行帧推送的事件队列 <see cref="T:System.Windows.Threading.Dispatcher" />。
            </summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)">
      <summary>
              确定是否指定 <see cref="T:System.Windows.Threading.DispatcherPriority" /> 是有效的优先级。
            </summary>
      <param name="priority">
                要检查的优先级。
              </param>
      <param name="parameterName">
                如果优先级无效则会发生的异常将返回一个字符串。
              </param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
                  <paramref name="priority" /> 不是有效的 <see cref="T:System.Windows.Threading.DispatcherPriority" />。
                </exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.VerifyAccess">
      <summary>
              确定调用线程是否有权访问此 <see cref="T:System.Windows.Threading.Dispatcher" />。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  调用线程不能访问此 <see cref="T:System.Windows.Threading.Dispatcher" />。
                </exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Yield">
      <summary>
              创建异步会将控制权出让回/当前调度程序，并为要处理其他事件的调度程序提供了机会的等待对象。
            </summary>
      <returns>
              一个可等待操作对象，以异步方式会将控制权出让回/当前调度程序和为处理其他事件的调度程序提供了机会。
            </returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Yield(System.Windows.Threading.DispatcherPriority)">
      <summary>
              创建异步会将控制权出让回/当前调度程序，并为要处理其他事件的调度程序提供了机会的等待对象。
                用指定的优先级计划时发生控制返回到等待此方法的结果代码的工作。
            </summary>
      <param name="priority">
                在安排延续任务优先级。
              </param>
      <returns>
              一个可等待操作对象，以异步方式会将控制权出让回/当前调度程序和为处理其他事件的调度程序提供了机会。
            </returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherFrame.#ctor">
      <summary>
              初始化 <see cref="T:System.Windows.Threading.DispatcherFrame" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherFrame.#ctor(System.Boolean)">
      <summary>
              新实例初始化 <see cref="T:System.Windows.Threading.DispatcherFrame" /> 类中，使用指定的退出请求标志。
            </summary>
      <param name="exitWhenRequested">
                指示是否所有帧都请求退出时将退出此帧。
              </param>
    </member>
    <member name="M:System.Windows.Threading.DispatcherHookEventArgs.#ctor(System.Windows.Threading.DispatcherOperation)">
      <summary>
              初始化 <see cref="T:System.Windows.Threading.DispatcherHookEventArgs" /> 类的新实例。
            </summary>
      <param name="operation">
                与事件关联的操作。
              </param>
    </member>
    <member name="M:System.Windows.Threading.DispatcherObject.#ctor">
      <summary>
              初始化 <see cref="T:System.Windows.Threading.DispatcherObject" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherObject.CheckAccess">
      <summary>
              确定调用线程是否有权访问此 <see cref="T:System.Windows.Threading.DispatcherObject" />。
            </summary>
      <returns>
              <see langword="true" /> 如果调用线程可以访问此对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherObject.VerifyAccess">
      <summary>
              强制执行调用线程可以访问此 <see cref="T:System.Windows.Threading.DispatcherObject" />。
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  调用线程不能访问此 <see cref="T:System.Windows.Threading.DispatcherObject" />。
                </exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.Abort">
      <summary>
              将中止此操作。
            </summary>
      <returns>
              <see langword="true" /> 如果操作已中止。否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.GetAwaiter">
      <summary>
              返回一个异步操作完成时通知的对象。
            </summary>
      <returns>
              一个异步操作完成时通知的对象。
            </returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.InvokeDelegateCore">
      <summary>
              开始操作，这与该键关联 <see cref="T:System.Windows.Threading.DispatcherOperation" />。
            </summary>
      <returns>
              在所有情况下均为 <see langword="null" />。
            </returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.Wait">
      <summary>
              等待要完成的操作
            </summary>
      <returns>
              操作的状态。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.Windows.Threading.DispatcherOperation.Status" /> 等于 <see cref="F:System.Windows.Threading.DispatcherOperationStatus.Executing" />。
                    这会等待已在同一线程执行某个操作时发生。
                </exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.Wait(System.TimeSpan)">
      <summary>
              等待要在指定的时间段内完成的操作。
            </summary>
      <param name="timeout">
                最大等待时间段。
              </param>
      <returns>
              操作的状态。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.Windows.Threading.DispatcherOperation.Status" /> 等于 <see cref="F:System.Windows.Threading.DispatcherOperationStatus.Executing" />。
                    这会等待已在同一线程执行某个操作时发生。
                </exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation`1.GetAwaiter">
      <summary>
              返回一个等待返回的结果的异步操作的对象。
            </summary>
      <returns>
              等待异步操作的对象，它返回的结果。
            </returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation`1.InvokeDelegateCore">
      <summary>
              开始操作，这与该键关联 <see cref="T:System.Windows.Threading.DispatcherOperation" />。
            </summary>
      <returns>
              操作的结果。
            </returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherPriorityAwaitable.GetAwaiter">
      <summary>
              返回的异步任务完成后等待的对象。
            </summary>
      <returns>
              一个对象，等待异步任务完成。
            </returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherPriorityAwaiter.GetResult">
      <summary>
              结束异步任务完成之前的等待。
            </summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherPriorityAwaiter.OnCompleted(System.Action)">
      <summary>
              设置时应执行的操作 <see cref="T:System.Windows.Threading.DispatcherPriorityAwaiter" /> 对象停止等待异步任务完成。
            </summary>
      <param name="continuation">
                要在等待操作完成时执行的操作。
              </param>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.Dispose">
      <summary>
              重新启用调度程序处理。
            </summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.Equals(System.Object)">
      <summary>
              确定是否指定 <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> 对象是否等于此 <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> 对象。
            </summary>
      <param name="obj">
                要评估相等的对象。
              </param>
      <returns>
              <see langword="true" /> 如果指定的对象是否等同于此 <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> 对象; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.GetHashCode">
      <summary>
              获取此实例的哈希代码。
            </summary>
      <returns>
              带符号 32 位整数哈希代码。
            </returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.op_Equality(System.Windows.Threading.DispatcherProcessingDisabled,System.Windows.Threading.DispatcherProcessingDisabled)">
      <summary>
              确定两个 <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> 对象是否相等。
            </summary>
      <param name="left">
                要比较的第一个对象。
              </param>
      <param name="right">
                要比较的第二个对象。
              </param>
      <returns>
              <see langword="true" /> 如果 <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> 对象是否相等; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.op_Inequality(System.Windows.Threading.DispatcherProcessingDisabled,System.Windows.Threading.DispatcherProcessingDisabled)">
      <summary>
              确定两个 <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> 对象是否不相等。
            </summary>
      <param name="left">
                要比较的第一个对象。
              </param>
      <param name="right">
                要比较的第二个对象。
              </param>
      <returns>
              <see langword="true" /> 如果 <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> 对象是否不相等; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.#ctor">
      <summary>
              新实例初始化 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> 类通过使用当前 <see cref="T:System.Windows.Threading.Dispatcher" />。
            </summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.#ctor(System.Windows.Threading.Dispatcher)">
      <summary>
              使用指定的 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> 初始化 <see cref="T:System.Windows.Threading.Dispatcher" /> 类的新实例。
            </summary>
      <param name="dispatcher">
                <see cref="T:System.Windows.Threading.Dispatcher" /> 关联这 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> 与。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="dispatcher" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.#ctor(System.Windows.Threading.Dispatcher,System.Windows.Threading.DispatcherPriority)">
      <summary>
              使用指定的 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> 初始化 <see cref="T:System.Windows.Threading.Dispatcher" /> 类的新实例。
            </summary>
      <param name="dispatcher">
                <see cref="T:System.Windows.Threading.Dispatcher" /> 关联这 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> 与。
              </param>
      <param name="priority">
                与用来发送和发布回调方法的优先级。
              </param>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.CreateCopy">
      <summary>
              会创建一份 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />。
            </summary>
      <returns>
              此同步上下文的副本。
            </returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
      <summary>
              以异步方式调用同步上下文中的回调。
            </summary>
      <param name="d">
                要调用的委托。
              </param>
      <param name="state">
                传递给委托的对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="d" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
      <summary>
              以同步方式调用同步上下文中的回调。
            </summary>
      <param name="d">
                要调用的委托。
              </param>
      <param name="state">
                传递给委托的对象。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="d" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.Wait(System.IntPtr[],System.Boolean,System.Int32)">
      <summary>
              等待指定数组中的任一元素或所有元素接收信号。
            </summary>
      <param name="waitHandles">
                一个数组，包含本机操作系统句柄。
              </param>
      <param name="waitAll">
                如果等待所有句柄，则为 <see langword="true" />；如果等待任一句柄，则为 <see langword="false" />。
              </param>
      <param name="millisecondsTimeout">
                等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。
              </param>
      <returns>
              满足等待的对象的数组索引。
            </returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor">
      <summary>
              初始化 <see cref="T:System.Windows.Threading.DispatcherTimer" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor(System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.EventHandler,System.Windows.Threading.Dispatcher)">
      <summary>
              新实例初始化 <see cref="T:System.Windows.Threading.DispatcherTimer" /> 类该类使用指定的时间间隔、 优先级别、 事件处理程序和 <see cref="T:System.Windows.Threading.Dispatcher" />。
            </summary>
      <param name="interval">
                计时周期之间的时间段。
              </param>
      <param name="priority">
                与在其调用计时器的优先级。
              </param>
      <param name="callback">
                事件处理程序时调用 <see cref="E:System.Windows.Threading.DispatcherTimer.Tick" /> 事件发生。
              </param>
      <param name="dispatcher">
                调度程序计时器相关联。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="dispatcher" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="callback" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="interval" /> 小于 0 或大于 <see cref="F:System.Int32.MaxValue" />。
                </exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority)">
      <summary>
              新实例初始化 <see cref="T:System.Windows.Threading.DispatcherTimer" /> 处理按指定的优先级的计时器事件的类。
            </summary>
      <param name="priority">
                与在其调用计时器的优先级。
              </param>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority,System.Windows.Threading.Dispatcher)">
      <summary>
              新实例初始化 <see cref="T:System.Windows.Threading.DispatcherTimer" /> 类上指定运行 <see cref="T:System.Windows.Threading.Dispatcher" /> 按指定的优先级。
            </summary>
      <param name="priority">
                与在其调用计时器的优先级。
              </param>
      <param name="dispatcher">
                调度程序计时器相关联。
              </param>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="dispatcher" /> 为 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.Start">
      <summary>
              启动 <see cref="T:System.Windows.Threading.DispatcherTimer" />。
            </summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.Stop">
      <summary>
              停止 <see cref="T:System.Windows.Threading.DispatcherTimer" />。
            </summary>
    </member>
    <member name="M:System.Windows.Vector.#ctor(System.Double,System.Double)">
      <summary>
              初始化 <see cref="T:System.Windows.Vector" /> 结构的新实例。
            </summary>
      <param name="x">
                <see cref="P:System.Windows.Vector.X" />-新的偏移量 <see cref="T:System.Windows.Vector" />。
              </param>
      <param name="y">
                <see cref="P:System.Windows.Vector.Y" />-新的偏移量 <see cref="T:System.Windows.Vector" />。
              </param>
    </member>
    <member name="M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Point)">
      <summary>
              按指定向量平移指定的点并返回所产生的点。
            </summary>
      <param name="vector">
                要指定的点的平移的量。
              </param>
      <param name="point">
                要转换的点。
              </param>
      <returns>
              将转换结果 <paramref name="point" /> 通过 <paramref name="vector" />。
            </returns>
    </member>
    <member name="M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Vector)">
      <summary>
              添加两个向量，并返回结果作为 <see cref="T:System.Windows.Vector" /> 结构。
            </summary>
      <param name="vector1">
                要相加的第一个向量。
              </param>
      <param name="vector2">
                要相加的第二个向量。
              </param>
      <returns>
              <paramref name="vector1" /> 与 <paramref name="vector2" /> 的和。
            </returns>
    </member>
    <member name="M:System.Windows.Vector.AngleBetween(System.Windows.Vector,System.Windows.Vector)">
      <summary>
              检索以度数 （介于两个指定向量） 表示的角。
            </summary>
      <param name="vector1">
                要评估的第一个向量。
              </param>
      <param name="vector2">
                要评估的第二个向量。
              </param>
      <returns>
              以度为单位的角度之间 <paramref name="vector1" /> 和 <paramref name="vector2" />。
            </returns>
    </member>
    <member name="M:System.Windows.Vector.CrossProduct(System.Windows.Vector,System.Windows.Vector)">
      <summary>
              计算两个向量的叉积。
            </summary>
      <param name="vector1">
                要评估的第一个向量。
              </param>
      <param name="vector2">
                要评估的第二个向量。
              </param>
      <returns>
              叉积的 <paramref name="vector1" /> 和 <paramref name="vector2" />。
               下面的公式用于计算叉积︰
            
              (Vector1.X * Vector2.Y) - (Vector1.Y * Vector2.X)
            </returns>
    </member>
    <member name="M:System.Windows.Vector.Determinant(System.Windows.Vector,System.Windows.Vector)">
      <summary>
              计算两个向量的行列式。
            </summary>
      <param name="vector1">
                要评估的第一个向量。
              </param>
      <param name="vector2">
                要评估的第二个向量。
              </param>
      <returns>
              行列式 <paramref name="vector1" /> 和 <paramref name="vector2" />。
            </returns>
    </member>
    <member name="M:System.Windows.Vector.Divide(System.Windows.Vector,System.Double)">
      <summary>
              将指定的向量除以指定标量，并返回结果作为 <see cref="T:System.Windows.Vector" />。
            </summary>
      <param name="vector">
                将向量结构。
              </param>
      <param name="scalar">
                所根据的数量 <paramref name="vector" /> 划分。
              </param>
      <returns>
              <paramref name="vector" /> 除以 <paramref name="scalar" /> 的结果。
            </returns>
    </member>
    <member name="M:System.Windows.Vector.Equals(System.Object)">
      <summary>
              确定是否指定 <see cref="T:System.Object" /> 是 <see cref="T:System.Windows.Vector" /> 结构，并且，如果是，它是否具有相同 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 与此向量的值。
            </summary>
      <param name="o">
                要比较的向量。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="o" /> 是 <see cref="T:System.Windows.Vector" /> 并具有相同 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 值作为此向量; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Vector.Equals(System.Windows.Vector)">
      <summary>
               比较两个向量相等。
            </summary>
      <param name="value">
                要与此向量比较的向量。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="value" /> 具有相同 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 值作为此向量; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Vector.Equals(System.Windows.Vector,System.Windows.Vector)">
      <summary>
              比较两个指定的向量相等。
            </summary>
      <param name="vector1">
                要比较的第一个向量。
              </param>
      <param name="vector2">
                要比较的第二个向量。
              </param>
      <returns>
              <see langword="true" /> 如果 t 他 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 组成部分 <paramref name="vector1" /> 和 <paramref name="vector2" /> 相等; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Vector.GetHashCode">
      <summary>
              返回此向量的哈希代码。
            </summary>
      <returns>
              此实例的哈希代码。
            </returns>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)">
      <summary>
               将指定向量乘以指定的标量，并返回结果 <see cref="T:System.Windows.Vector" />。
            </summary>
      <param name="scalar">
                要相乘的标量。
              </param>
      <param name="vector">
                要相乘的向量。
              </param>
      <returns>
              <paramref name="scalar" /> 与 <paramref name="vector" /> 相乘的结果。
            </returns>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Double)">
      <summary>
               将指定的向量乘以指定标量，并返回结果 <see cref="T:System.Windows.Vector" />。
            </summary>
      <param name="vector">
                要相乘的向量。
              </param>
      <param name="scalar">
                要相乘的标量。
              </param>
      <returns>
              <paramref name="vector" /> 与 <paramref name="scalar" /> 相乘的结果。
            </returns>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Media.Matrix)">
      <summary>
              将指定向量使用指定的坐标空间转换 <see cref="T:System.Windows.Media.Matrix" />。
            </summary>
      <param name="vector">
                要变换的向量结构。
              </param>
      <param name="matrix">
                要应用于转换 <paramref name="vector" />。
              </param>
      <returns>
              转换的结果 <paramref name="vector" /> 通过 <paramref name="matrix" />。
            </returns>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Vector)">
      <summary>
              计算两个指定的点积向量，并返回结果作为 <see cref="T:System.Double" />。
            </summary>
      <param name="vector1">
                要相乘的第一个向量。
              </param>
      <param name="vector2">
                要相乘的第二个向量结构。
              </param>
      <returns>
              一个 <see cref="T:System.Double" /> 包含标量的点乘积的 <paramref name="vector1" /> 和 <paramref name="vector2" />, ，使用以下公式计算︰
            
               (vector1.X * vector2.X) + (vector1.Y * vector2.Y) 
            </returns>
    </member>
    <member name="M:System.Windows.Vector.Negate">
      <summary>
              对此向量求反。
               向量具有相同的量级为之前，但其方向现在相反。
            </summary>
    </member>
    <member name="M:System.Windows.Vector.Normalize">
      <summary>
               规范化此向量。
            </summary>
    </member>
    <member name="M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Point)">
      <summary>
               将指定向量平移的一个点，并返回所产生的点。
            </summary>
      <param name="vector">
                用于转换的向量 <paramref name="point" />。
              </param>
      <param name="point">
                要转换的点。
              </param>
      <returns>
              将转换结果 <paramref name="point" /> 通过 <paramref name="vector" />。
            </returns>
    </member>
    <member name="M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Vector)">
      <summary>
              添加两个向量，并返回一个向量的结果。
            </summary>
      <param name="vector1">
                要相加的第一个向量。
              </param>
      <param name="vector2">
                要相加的第二个向量。
              </param>
      <returns>
              <paramref name="vector1" /> 与 <paramref name="vector2" /> 的和。
            </returns>
    </member>
    <member name="M:System.Windows.Vector.op_Division(System.Windows.Vector,System.Double)">
      <summary>
               将指定的向量除以指定标量并返回所得的向量。
            </summary>
      <param name="vector">
                除数的向量。
              </param>
      <param name="scalar">
                依据标量 <paramref name="vector" /> 被除数。
              </param>
      <returns>
              <paramref name="vector" /> 除以 <paramref name="scalar" /> 的结果。
            </returns>
    </member>
    <member name="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)">
      <summary>
               比较两个向量相等。
            </summary>
      <param name="vector1">
                要比较的第一个向量。
              </param>
      <param name="vector2">
                要比较的第二个向量。
              </param>
      <returns>
              <see langword="true" /> 如果 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 组成部分 <paramref name="vector1" /> 和 <paramref name="vector2" /> 相等; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Point">
      <summary>
              创建 <see cref="T:System.Windows.Point" /> 与 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 此向量的值。
            </summary>
      <param name="vector">
                要变换的向量。
              </param>
      <returns>
              一个具有点 <see cref="P:System.Windows.Point.X" />-和 <see cref="P:System.Windows.Point.Y" />-坐标值等于 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 的偏移量值 <paramref name="vector" />。
            </returns>
    </member>
    <member name="M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Size">
      <summary>
              创建 <see cref="T:System.Windows.Size" /> 此向量的偏移量。
            </summary>
      <param name="vector">
                要变换的向量。
              </param>
      <returns>
              一个 <see cref="T:System.Windows.Size" /> 与 <see cref="P:System.Windows.Size.Width" /> 等于此向量的绝对值 <see cref="P:System.Windows.Vector.X" /> 属性和一个 <see cref="P:System.Windows.Size.Height" /> 等于此向量的绝对值 <see cref="P:System.Windows.Vector.Y" /> 属性。
            </returns>
    </member>
    <member name="M:System.Windows.Vector.op_Inequality(System.Windows.Vector,System.Windows.Vector)">
      <summary>
              比较两个向量不相等。
            </summary>
      <param name="vector1">
                要比较的第一个向量。
              </param>
      <param name="vector2">
                要比较的第二个向量。
              </param>
      <returns>
              <see langword="true" /> 如果 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 组成部分 <paramref name="vector1" /> 和 <paramref name="vector2" /> 不同; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)">
      <summary>
               将指定向量乘以指定的标量，并返回所得的向量。
            </summary>
      <param name="scalar">
                要相乘的标量。
              </param>
      <param name="vector">
                要相乘的向量。
              </param>
      <returns>
              <paramref name="scalar" /> 与 <paramref name="vector" /> 相乘的结果。
            </returns>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Double)">
      <summary>
              将指定的向量乘以指定标量，并返回所得的向量。
            </summary>
      <param name="vector">
                要相乘的向量。
              </param>
      <param name="scalar">
                要相乘的标量。
              </param>
      <returns>
              <paramref name="vector" /> 与 <paramref name="scalar" /> 相乘的结果。
            </returns>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Media.Matrix)">
      <summary>
               将指定向量使用指定的坐标空间转换 <see cref="T:System.Windows.Media.Matrix" />。
            </summary>
      <param name="vector">
                要变换的向量。
              </param>
      <param name="matrix">
                要应用于转换 <paramref name="vector" />。
              </param>
      <returns>
              转换的结果 <paramref name="vector" /> 通过 <paramref name="matrix" />。
            </returns>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Vector)">
      <summary>
               计算两个指定的向量结构的点积，并返回结果作为 <see cref="T:System.Double" />。
            </summary>
      <param name="vector1">
                要相乘的第一个向量。
              </param>
      <param name="vector2">
                要相乘的第二个向量。
              </param>
      <returns>
              返回 <see cref="T:System.Double" /> 包含标量的点乘积的 <paramref name="vector1" /> 和 <paramref name="vector2" />, ，使用以下公式计算︰
            
              vector1.X * vector2.X + vector1.Y * vector2.Y
            </returns>
    </member>
    <member name="M:System.Windows.Vector.op_Subtraction(System.Windows.Vector,System.Windows.Vector)">
      <summary>
              从另一个指定的向量中减去。
            </summary>
      <param name="vector1">
                从该向量 <paramref name="vector2" /> 中减去。
              </param>
      <param name="vector2">
                要从中减去的向量 <paramref name="vector1" />。
              </param>
      <returns>
              之间的差异 <paramref name="vector1" /> 和 <paramref name="vector2" />。
            </returns>
    </member>
    <member name="M:System.Windows.Vector.op_UnaryNegation(System.Windows.Vector)">
      <summary>
              对指定向量求反。
            </summary>
      <param name="vector">
                要求反的向量。
              </param>
      <returns>
              一个具有向量 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 相反的值的 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 值 <paramref name="vector" />。
            </returns>
    </member>
    <member name="M:System.Windows.Vector.Parse(System.String)">
      <summary>
              将向量的字符串表示形式转换为等效 <see cref="T:System.Windows.Vector" /> 结构。
            </summary>
      <param name="source">
                向量的字符串表示形式。
              </param>
      <returns>
              等效于 <see cref="T:System.Windows.Vector" /> 结构。
            </returns>
    </member>
    <member name="M:System.Windows.Vector.Subtract(System.Windows.Vector,System.Windows.Vector)">
      <summary>
              从向量中减去指定另一个指定向量。
            </summary>
      <param name="vector1">
                从该向量 <paramref name="vector2" /> 中减去。
              </param>
      <param name="vector2">
                要从中减去的向量 <paramref name="vector1" />。
              </param>
      <returns>
              之间的差异 <paramref name="vector1" /> 和 <paramref name="vector2" />。
            </returns>
    </member>
    <member name="M:System.Windows.Vector.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>
              此成员支持 Windows Presentation Foundation (WPF) 基础结构，但不能在代码中直接使用。
               有关此成员的说明，请参阅 <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />。
            </summary>
      <param name="format">
                指定要使用的格式的字符串。
              
                - 或 - 
              
                <see langword="null" /> 若要使用的类型定义的默认格式 <see cref="T:System.IFormattable" /> 实现。
              </param>
      <param name="provider">
                <see langword="IFormatProvider" /> 要用于设置值的格式。
              
                - 或 - 
              
                <see langword="null" /> 若要获取从操作系统的当前区域设置的数字格式信息。
              </param>
      <returns>
              包含指定的格式中的当前实例的值的字符串。
            </returns>
    </member>
    <member name="M:System.Windows.Vector.ToString">
      <summary>
              返回的字符串表示形式 <see cref="T:System.Windows.Vector" /> 结构。
            </summary>
      <returns>
              一个字符串，表示 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 值 <see cref="T:System.Windows.Vector" />。
            </returns>
    </member>
    <member name="M:System.Windows.Vector.ToString(System.IFormatProvider)">
      <summary>
              返回的字符串表示形式 <see cref="T:System.Windows.Vector" /> 与指定的格式设置信息的结构。
            </summary>
      <param name="provider">
                区域性特定格式设置信息。
              </param>
      <returns>
              一个字符串，表示 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 值 <see cref="T:System.Windows.Vector" />。
            </returns>
    </member>
    <member name="M:System.Windows.VectorConverter.#ctor">
      <summary>
              初始化 <see cref="T:System.Windows.Vector" /> 结构的新实例。
            </summary>
    </member>
    <member name="M:System.Windows.VectorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              指示是否可以将对象从给定类型转换到的实例 <see cref="T:System.Windows.Vector" />。
            </summary>
      <param name="context">
                描述类型的上下文信息。
              </param>
      <param name="sourceType">
                源 <see cref="T:System.Type" /> 正被查询转换支持。
              </param>
      <returns>
              <see langword="true" /> 如果指定类型的对象可以转换为 <see cref="T:System.Windows.Vector" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.VectorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
              确定是否的实例 <see cref="T:System.Windows.Vector" /> 可以转换为指定的类型。
            </summary>
      <param name="context">
                描述类型的上下文信息。
              </param>
      <param name="destinationType">
                所需类型这 <see cref="T:System.Windows.Vector" /> 转换进行评估。
              </param>
      <returns>
              <see langword="true" /> 如果实例 <see cref="T:System.Windows.Vector" /> 可以转换为 <paramref name="destinationType" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.VectorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
              将指定对象转换为 <see cref="T:System.Windows.Vector" />。
            </summary>
      <param name="context">
                描述类型的上下文信息。
              </param>
      <param name="culture">
                描述 <see cref="T:System.Globalization.CultureInfo" /> 正在转换的类型。
              </param>
      <param name="value">
                要转换的对象。
              </param>
      <returns>
              <see cref="T:System.Windows.Vector" /> 从转换创建 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:System.Windows.VectorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
               将指定 <see cref="T:System.Windows.Vector" /> 为指定的类型。
            </summary>
      <param name="context">
                描述类型的上下文信息。
              </param>
      <param name="culture">
                描述 <see cref="T:System.Globalization.CultureInfo" /> 正在转换的类型。
              </param>
      <param name="value">
                要转换的 <see cref="T:System.Windows.Vector" />。
              </param>
      <param name="destinationType">
                要转换的类型 <see cref="T:System.Windows.Vector" /> 到。
              </param>
      <returns>
              创建将该表达式转换的对象 <see cref="T:System.Windows.Vector" />。
            </returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.#ctor">
      <summary>
              由派生类的构造函数使用为初始值设定项时，初始化基类值。
            </summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
      <summary>
              托管代码流向每个侦听器的事件传送。
            </summary>
      <param name="sender">
                在其处理该事件的对象。
              </param>
      <param name="args">
                <see cref="T:System.EventArgs" /> ，其中包含要传递的事件的事件数据。
              </param>
    </member>
    <member name="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
      <summary>
              托管代码流向每个侦听器提供的列表中的事件传送。
            </summary>
      <param name="sender">
                在其处理该事件的对象。
              </param>
      <param name="args">
                包含事件数据的 <see cref="T:System.EventArgs" />。
              </param>
      <param name="list">
                提供 <see cref="T:System.Windows.WeakEventManager.ListenerList" />。
              </param>
    </member>
    <member name="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)">
      <summary>
              返回 <see cref="T:System.Windows.WeakEventManager" /> 用于所提供的类型的实现。
            </summary>
      <param name="managerType">
                要获取的类型 <see cref="T:System.Windows.WeakEventManager" /> 有关。
              </param>
      <returns>
              匹配 <see cref="T:System.Windows.WeakEventManager" /> 实现。
            </returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.#ctor">
      <summary>
              初始化 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.#ctor(System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 类具有指定的初始容量。
            </summary>
      <param name="capacity">
                应在初始列表中分配的项目数。
              </param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)">
      <summary>
              添加 <see cref="T:System.Windows.IWeakEventListener" /> 对象传递给 <see cref="T:System.Windows.WeakEventManager.ListenerList" />。
            </summary>
      <param name="listener">
                要添加到侦听器元素 <see cref="T:System.Windows.WeakEventManager.ListenerList" />。
              </param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.AddHandler(System.Delegate)">
      <summary>
              添加到一个事件处理程序 <see cref="T:System.Windows.WeakEventManager.ListenerList" />。
            </summary>
      <param name="handler">
                事件处理程序将添加到 <see cref="T:System.Windows.WeakEventManager.ListenerList" />。
              </param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.BeginUse">
      <summary>
              声明要使用的列表。
               这可防止直接更改对列表的列表项的迭代过程。
            </summary>
      <returns>
              <see langword="true" /> 如果列表已被声明为个人识别信息。否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Clone">
      <summary>
              创建的可修改复本 <see cref="T:System.Windows.WeakEventManager.ListenerList" />。
            </summary>
      <returns>
              当前对象的可修改复本。
            </returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.CopyTo(System.Windows.WeakEventManager.ListenerList)">
      <summary>
              复制当前 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 到指定 <see cref="T:System.Windows.WeakEventManager.ListenerList" />
            </summary>
      <param name="newList">
                要将复制到的对象。
              </param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)">
      <summary>
              托管代码流向中每个侦听器的事件传送 <see cref="T:System.Windows.WeakEventManager.ListenerList" />。
            </summary>
      <param name="sender">
                引发事件的对象。
              </param>
      <param name="args">
                包含事件数据的对象。
              </param>
      <param name="managerType">
                一种 <see cref="T:System.Windows.WeakEventManager" /> 调用此方法。
              </param>
      <returns>
              <see langword="true" /> 如果侦听器中任一 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 引用对象已被垃圾收集; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.EndUse">
      <summary>
              解除锁定的状态由启动 <see cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />。
            </summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
      <summary>
              检查以确定是否正在使用中，为提供的列表以及如果是这样，将列表引用参数设置为该列表，而不是原始的副本。
            </summary>
      <param name="list">
                要检查的可用状态，并且可能副本的列表。
              </param>
      <returns>
              <see langword="true" /> 如果在调用时在使用过程中提供的列表，因此 <paramref name="list" /> 参数引用被重置为一个副本。
              <see langword="false" /> 如果提供的列表未在使用中，在这种情况下 <paramref name="list" /> 参数引用保持不变。
            </returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Purge">
      <summary>
              从基础引用目标位置为空引用列表中移除所有项。
            </summary>
      <returns>
              返回 <see langword="true" /> 任何项都已清除; 否则为如果 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)">
      <summary>
              删除侦听器中的项的第一个匹配项 <see cref="T:System.Windows.WeakEventManager.ListenerList" />。
            </summary>
      <param name="listener">
                要移除的项。
              </param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.RemoveHandler(System.Delegate)">
      <summary>
              移除事件处理程序从 <see cref="T:System.Windows.WeakEventManager.ListenerList" />。
            </summary>
      <param name="handler">
                要移除的事件处理程序 <see cref="T:System.Windows.WeakEventManager.ListenerList" />。
              </param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList`1.#ctor">
      <summary>
              初始化 <see cref="T:System.Windows.WeakEventManager.ListenerList`1" /> 类的新实例。
            </summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList`1.#ctor(System.Int32)">
      <summary>
              新实例初始化 <see cref="T:System.Windows.WeakEventManager.ListenerList`1" /> 类具有指定的初始容量。
            </summary>
      <param name="capacity">
                应在初始列表中分配的项目数。
              </param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList`1.Clone">
      <summary>
              创建的可修改复本 <see cref="T:System.Windows.WeakEventManager.ListenerList" />, ，从而深度复制的值。
            </summary>
      <returns>
              当前对象的可修改复本。
               即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 <see langword="true" />，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList`1.DeliverEvent(System.Object,System.EventArgs,System.Type)">
      <summary>
              托管代码流向中每个侦听器的事件传送 <see cref="T:System.Windows.WeakEventManager.ListenerList`1" />。
            </summary>
      <param name="sender">
                引发事件的对象。
              </param>
      <param name="e">
                包含事件数据的对象。
              </param>
      <param name="managerType">
                一种 <see cref="T:System.Windows.WeakEventManager" /> 调用此方法。
              </param>
      <returns>
              <see langword="true" /> 如果侦听器中任一 <see cref="T:System.Windows.WeakEventManager.ListenerList`1" /> 引用对象已被垃圾收集; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.NewListenerList">
      <summary>
              返回一个新对象来包含与一个事件侦听器。
            </summary>
      <returns>
              一个新对象来包含与一个事件侦听器。
            </returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)">
      <summary>
              将指定的委托添加为指定的源的事件处理程序。
            </summary>
      <param name="source">
                处理程序委托订阅源对象。
              </param>
      <param name="handler">
                处理引发的事件的委托 <paramref name="source" />。
              </param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
      <summary>
              将提供的侦听器添加到被管理的事件提供的源。
            </summary>
      <param name="source">
                要附加到侦听器的源。
              </param>
      <param name="listener">
                侦听类 (它必须实现 <see cref="T:System.Windows.IWeakEventListener" />)。
              </param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)">
      <summary>
              从指定的源中删除以前添加处理程序。
            </summary>
      <param name="source">
                要移除处理程序的源。
              </param>
      <param name="handler">
                要移除的委托 <paramref name="source" />。
              </param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
      <summary>
              从提供的源中删除以前添加的侦听器。
            </summary>
      <param name="source">
                要从中移除侦听器的源。
              </param>
      <param name="listener">
                侦听类 (它必须实现 <see cref="T:System.Windows.IWeakEventListener" />)。
              </param>
    </member>
    <member name="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
      <summary>
              从提供的源的数据列表中删除不活动的侦听器条目。
               返回 <see langword="true" /> 如果某些条目实际上已经从列表中移除。
            </summary>
      <param name="source">
                正在侦听的事件源。
              </param>
      <param name="data">
                要检查的数据。
                 此对象预期为 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 实现。
              </param>
      <param name="purgeAll">
                <see langword="true" /> 若要停止侦听 <paramref name="source" />, ，并完全移除所有项从 <paramref name="data" />。
              </param>
      <returns>
              <see langword="true" /> 如果实际上已经移除某些条目;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.Remove(System.Object)">
      <summary>
              移除指定的源的所有侦听器。
            </summary>
      <param name="source">
                要删除侦听器信息的源。
              </param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ScheduleCleanup">
      <summary>
              未使用的项的基础侦听器列表中清除，在较低优先级线程上执行的请求。
            </summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)">
      <summary>
              将当前的管理器设置为指定的管理器类型。
            </summary>
      <param name="managerType">
                要设置新的事件管理器的类型。
              </param>
      <param name="manager">
                新的事件管理器。
              </param>
    </member>
    <member name="M:System.Windows.WeakEventManager.StartListening(System.Object)">
      <summary>
              当在派生类中重写，开始侦听管理事件。
               之后 <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> 首次调用方法时，该管理器应该处于调用状态 <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> 或 <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> 每当处理所提供的源中的相关事件。
            </summary>
      <param name="source">
                要开始侦听的源。
              </param>
    </member>
    <member name="M:System.Windows.WeakEventManager.StopListening(System.Object)">
      <summary>
              当在派生类中重写，将停止侦听被托管的事件所提供的源。
            </summary>
      <param name="source">
                要停止侦听的源。
              </param>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.AddHandler(`0,System.String,System.EventHandler{`1})">
      <summary>
              将指定的事件处理程序添加到指定的事件。
            </summary>
      <param name="source">
                引发指定的事件源对象。
              </param>
      <param name="eventName">
                要订阅的事件的名称。
              </param>
      <param name="handler">
                用于处理事件的委托。
              </param>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.NewListenerList">
      <summary>
              返回一个新对象来包含与一个事件侦听器。
            </summary>
      <returns>
              一个新对象来包含与一个事件侦听器。
            </returns>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.RemoveHandler(`0,System.String,System.EventHandler{`1})">
      <summary>
              从指定的事件中删除指定的事件处理程序。
            </summary>
      <param name="source">
                引发指定的事件源对象。
              </param>
      <param name="eventName">
                要移除处理程序的事件的名称。
              </param>
      <param name="handler">
                要移除的委托
              </param>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.StartListening(System.Object)">
      <summary>
              开始侦听指定的对象上的事件。
            </summary>
      <param name="source">
                与对象引发该事件。
              </param>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.StopListening(System.Object)">
      <summary>
              停止侦听指定的对象上的事件。
            </summary>
      <param name="source">
                与对象引发该事件。
              </param>
    </member>
    <member name="P:System.ComponentModel.CurrentChangingEventArgs.Cancel">
      <summary>
              获取或设置一个值，它指示是否取消事件。
            </summary>
      <returns>
              如果要取消事件，则为 <see langword="true" />；否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  如果 <see cref="P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable" /> 的值为 <see langword="false" />。
                </exception>
    </member>
    <member name="P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable">
      <summary>
              获取一个值，该值指示事件是否可取消。
            </summary>
      <returns>
              如果事件可取消，则为 <see langword="true" />；否则为 <see langword="false" />。
               默认值为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Attributes">
      <summary>
              获取此成员的特性的集合。
            </summary>
      <returns>
              <see cref="T:System.ComponentModel.AttributeCollection" /> 的特性集合。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Category">
      <summary>
              获取该成员所属的类别的名称中指定 <see cref="T:System.ComponentModel.CategoryAttribute" />。
            </summary>
      <returns>
              该成员所属的类别的名称。
               如果没有任何 <see cref="T:System.ComponentModel.CategoryAttribute" />, ，类别名称设置为默认类别 <see langword="Misc" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.ComponentType">
      <summary>
              获取此属性绑定到的组件的类型。
            </summary>
      <returns>
              一个 <see cref="T:System.Type" /> ，它表示此属性绑定到的组件的类型。
               当 <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.GetValue(System.Object)" /> 或 <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)" /> 被调用，指定的对象可能是这种类型的实例。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Converter">
      <summary>
              获取此属性的类型转换器。
            </summary>
      <returns>
              一个 <see cref="T:System.ComponentModel.TypeConverter" /> 用于将转换 <see cref="T:System.Type" /> 此属性。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DependencyProperty">
      <summary>
              返回依赖属性标识符。
            </summary>
      <returns>
              依赖属性标识符。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Description">
      <summary>
              获取在指定将成员的说明 <see cref="T:System.ComponentModel.DescriptionAttribute" />。
            </summary>
      <returns>
              成员的说明。
               如果没有任何 <see cref="T:System.ComponentModel.DescriptionAttribute" />, ，属性值设置为默认情况下，将为空字符串 ("")。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DesignerCoerceValueCallback">
      <summary>
              获取或设置设计器修改依赖项属性的有效值，然后将依赖项属性值存储在依赖项属性引擎将使用的回调。
            </summary>
      <returns>
              设计人员使用来修改依赖项属性的有效值，然后将依赖项属性值存储在依赖项属性引擎回调。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DesignTimeOnly">
      <summary>
              获取是否应仅在设计时，指定在设置此成员 <see cref="T:System.ComponentModel.DesignOnlyAttribute" />。
            </summary>
      <returns>
              <see langword="true" /> 如果此成员应设置只能在设计时; <see langword="false" /> 如果成员可以在运行时设置。
               如果没有任何 <see cref="T:System.ComponentModel.DesignOnlyAttribute" />, ，则返回值是默认值，即 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DisplayName">
      <summary>
              获取可以在一个窗口，如属性窗口中显示的名称。
            </summary>
      <returns>
              要显示的属性的名称。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsAttached">
      <summary>
              获取一个值，该值指示是否属性注册为附加属性并通过附加用法进行使用。
            </summary>
      <returns>
              如果属性是附加属性，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsBrowsable">
      <summary>
              获取一个值，该值指示的值 <see cref="T:System.ComponentModel.BrowsableAttribute" /> 的属性。
            </summary>
      <returns>
              <see langword="true" /> 如果 <see cref="T:System.ComponentModel.BrowsableAttribute" /> 指定的属性; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsLocalizable">
      <summary>
              获取一个值，该值指示是否应本地化该属性，根据中的指定 <see cref="T:System.ComponentModel.LocalizableAttribute" />。
            </summary>
      <returns>
              <see langword="true" /> 如果该成员标记有 <see cref="T:System.ComponentModel.LocalizableAttribute" /> 构造函数的值为 true，否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsReadOnly">
      <summary>
              获取一个值，该值指示此属性只读的。
            </summary>
      <returns>
              <see langword="true" /> 如果该属性是只读的;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Metadata">
      <summary>
              获取与依赖属性关联的元数据。
            </summary>
      <returns>
              依赖属性元数据。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.PropertyType">
      <summary>
              获取依赖属性的表示的 <see cref="T:System.Type" />。
            </summary>
      <returns>
              依赖属性的 <see cref="T:System.Type" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.SupportsChangeEvents">
      <summary>
              指示此属性的值更改通知可能源自外部属性描述符，例如源自组件本身，还是是否通知只源自直接调用对 <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)" />。
            </summary>
      <returns>
              <see langword="true" /> 如果此属性的通知可能源自外部属性描述符，例如源自组件本身。
              <see langword="false" /> 如果通知仅源自对所做的直接调用 <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.GroupDescription.CustomSort">
      <summary>
              获取或设置使用实现 <see cref="T:System.Collections.IComparer" /> 的对象对组进行排序的自定义比较器。
            </summary>
      <returns>
               使用实现 <see cref="T:System.Collections.IComparer" /> 的对象对组进行排序的自定义比较器。
            </returns>
    </member>
    <member name="P:System.ComponentModel.GroupDescription.GroupNames">
      <summary>
              获取名称的集合，这些名称用于初始化包含一系列具有给定名称的子组的组。
            </summary>
      <returns>
              名称的集合，这些名称用于初始化包含一系列具有给定名称的子组的组。
            </returns>
    </member>
    <member name="P:System.ComponentModel.GroupDescription.SortDescriptions">
      <summary>
              获取要按照其对组进行排序的排序条件集合。
            </summary>
      <returns>
              要按照其对组进行排序的排序条件集合。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanFilter">
      <summary>
              获取一个值，该值指示此视图是否支持通过 <see cref="P:System.ComponentModel.ICollectionView.Filter" /> 属性进行筛选。
            </summary>
      <returns>
              如果此视图支持筛选，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanGroup">
      <summary>
              获取一个值，该值指示此视图是否支持通过 <see cref="P:System.ComponentModel.ICollectionView.GroupDescriptions" /> 属性进行分组。
            </summary>
      <returns>
              如果此视图支持分组，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanSort">
      <summary>
              获取一个值，该值指示此视图是否支持通过 <see cref="P:System.ComponentModel.ICollectionView.SortDescriptions" /> 属性进行排序。
            </summary>
      <returns>
              如果此视图支持排序，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Culture">
      <summary>
              获取或设置根据区域性而可能不同的视图的任何操作（如排序）的区域性信息。
            </summary>
      <returns>
              要在排序过程中使用的区域性。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CurrentItem">
      <summary>
              获取视图中的当前项。
            </summary>
      <returns>
              视图中的当前项，如果没有当前项则为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CurrentPosition">
      <summary>
              获取视图中 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 的序号位置。
            </summary>
      <returns>
              视图中 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 的序号位置。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Filter">
      <summary>
              获取或设置用于确定某个项是否适合包含在视图中的回调。
            </summary>
      <returns>
              用于确定某个项是否适合包含在视图中的方法。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.GroupDescriptions">
      <summary>
              获取 <see cref="T:System.ComponentModel.GroupDescription" /> 对象的集合，这些对象描述集合中的项在视图中的分组方式。
            </summary>
      <returns>
              <see cref="T:System.ComponentModel.GroupDescription" /> 对象的集合，这些对象描述集合中的项在视图中的分组方式。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Groups">
      <summary>
              获取顶级组。
            </summary>
      <returns>
              顶级组的只读集合；如果没有任何组，则为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsCurrentAfterLast">
      <summary>
              获取一个值，该值指示视图的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 是否超出集合的末尾。
            </summary>
      <returns>
              如果视图的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 超出集合的末尾，则返回 <see langword="true" />；否则返回 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsCurrentBeforeFirst">
      <summary>
              获取一个值，该值指示视图的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 是否超出集合的开头。
            </summary>
      <returns>
              如果视图的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 超出集合开始处，则返回 <see langword="true" />；否则返回 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsEmpty">
      <summary>
              返回一个值，该值指示获得的视图是否为空。
            </summary>
      <returns>
              如果获得的视图为空，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.SortDescriptions">
      <summary>
              获取 <see cref="T:System.ComponentModel.SortDescription" /> 对象的集合，这些对象描述集合中的项在视图中的排序方式。
            </summary>
      <returns>
              <see cref="T:System.ComponentModel.SortDescription" /> 对象的集合，这些对象描述集合中的项在视图中的排序方式。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.SourceCollection">
      <summary>
              返回基础集合。
            </summary>
      <returns>
              属于基础集合的 <see cref="T:System.Collections.IEnumerable" /> 对象。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.CanChangeLiveFiltering">
      <summary>
              获取一个值，该值指示集合视图是否支持打开或关闭实时筛选数据。
            </summary>
      <returns>
              如果集合视图支持打开或关闭实时筛选，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.CanChangeLiveGrouping">
      <summary>
              获取一个值，该值指示集合视图是否支持启用实时对数据进行分组，打开或关闭。
            </summary>
      <returns>
              <see langword="true" /> 如果集合视图支持启用实时分组，打开或关闭;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.CanChangeLiveSorting">
      <summary>
              获取一个值，该值指示集合视图是否支持启用或禁用实时的数据进行排序。
            </summary>
      <returns>
              <see langword="true" /> 如果集合视图支持启用实时排序打开或关闭;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.IsLiveFiltering">
      <summary>
              获取或设置一个值，该值指示是否启用实时中筛选数据。
            </summary>
      <returns>
              <see langword="true" /> 如果启用筛选的实时数据; <see langword="false" /> 如果未启用实时筛选; <see langword="null" /> 如果无法确定集合视图是否实现，实时筛选。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.IsLiveGrouping">
      <summary>
              获取或设置一个值，该值指示是否启用对实时数据进行分组。
            </summary>
      <returns>
              <see langword="true" /> 如果对实时数据进行分组为，启用; <see langword="false" /> 如果未启用实时的分组; <see langword="null" /> 如果无法确定集合视图是否实现，实时分组。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.IsLiveSorting">
      <summary>
              获取或设置一个值，该值指示是否启用实时进行排序。
            </summary>
      <returns>
              <see langword="true" /> 如果对实时数据进行排序是，启用; <see langword="false" /> 如果未启用实时排序; <see langword="null" /> 如果无法确定集合视图是否实现，实时排序。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.LiveFilteringProperties">
      <summary>
              获取指定中筛选数据实时参与的属性的字符串的集合。
            </summary>
      <returns>
              指定参与的属性中的筛选操作的实时数据字符串的集合。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.LiveGroupingProperties">
      <summary>
              获取指定实时数据分组中加入的属性的字符串的集合。
            </summary>
      <returns>
              指定对实时数据进行分组中加入的属性的字符串的集合。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.LiveSortingProperties">
      <summary>
              获取指定的属性的参与中对实时数据进行排序的字符串的集合。
            </summary>
      <returns>
              指定在对实时数据进行排序的属性的参与字符串的集合。
            </returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CanAddNew">
      <summary>
              获取一个值，该值指示是否可以将新项添加到集合中。
            </summary>
      <returns>
              如果可以将新项添加到集合中，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CanCancelEdit">
      <summary>
              获取一个值，该值指示集合视图是否可以放弃挂起的更改并还原所编辑对象的原始值。
            </summary>
      <returns>
              如果集合视图可以放弃挂起的更改并还原所编辑对象的原始值，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CanRemove">
      <summary>
              获取一个值，该值指示是否可以从集合中移除项。
            </summary>
      <returns>
              如果可以从集合中移除项，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CurrentAddItem">
      <summary>
              获取当前添加事务过程中正在添加的项。
            </summary>
      <returns>
              如果要添加的项 <see cref="P:System.ComponentModel.IEditableCollectionView.IsAddingNew" /> 是 <see langword="true" />; 否则为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CurrentEditItem">
      <summary>
              获取集合中正在编辑的项。
            </summary>
      <returns>
              如果 <see cref="P:System.ComponentModel.IEditableCollectionView.IsEditingItem" /> 是 <see langword="true" />，则为集合中正在编辑的项；否则为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.IsAddingNew">
      <summary>
              获取一个值，该值指示是否正在执行添加事务。
            </summary>
      <returns>
              如果正在执行添加事务，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.IsEditingItem">
      <summary>
              获取一个值，该值指示是否正在执行编辑事务。
            </summary>
      <returns>
              如果正在执行编辑事务，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.NewItemPlaceholderPosition">
      <summary>
              获取或设置集合视图中新项占位符的位置。
            </summary>
      <returns>
              用于指定集合视图中新项占位符位置的枚举值之一。
            </returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionViewAddNewItem.CanAddNewItem">
      <summary>
              获取一个值，该值指示是否可以将指定的对象添加到集合。
            </summary>
      <returns>
              <see langword="true" /> 如果指定的对象可以添加到集合。否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.IItemProperties.ItemProperties">
      <summary>
              获取一个集合包含位于集合中项的属性有关的信息。
            </summary>
      <returns>
              包含有关可用集合中的项的属性的信息集合。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ItemPropertyInfo.Descriptor">
      <summary>
              获取一个对象，包含有关属性的其他信息。
            </summary>
      <returns>
              包含有关属性的其他信息的对象。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ItemPropertyInfo.Name">
      <summary>
              获取属性的名称。
            </summary>
      <returns>
              属性的名称。
            </returns>
    </member>
    <member name="P:System.ComponentModel.ItemPropertyInfo.PropertyType">
      <summary>
              获取属性的类型。
            </summary>
      <returns>
              属性的类型。
            </returns>
    </member>
    <member name="P:System.ComponentModel.PropertyFilterAttribute.Filter">
      <summary>
              获取此筛选器选项 <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> .NET Framework 特性。 
            </summary>
      <returns>
              属性筛选器选项。
            </returns>
    </member>
    <member name="P:System.ComponentModel.SortDescription.Direction">
      <summary>
              获取或设置一个值，该值指示是按升序还是降序进行排序。
            </summary>
      <returns>
              一个 <see cref="T:System.ComponentModel.ListSortDirection" /> 值，指示是按升序还是降序进行排序。
            </returns>
    </member>
    <member name="P:System.ComponentModel.SortDescription.IsSealed">
      <summary>
              获取一个值，该值指示此对象是否为不可变状态。
            </summary>
      <returns>
              如果此对象在使用中，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.ComponentModel.SortDescription.PropertyName">
      <summary>
              获取或设置要用作排序条件的属性名称。
            </summary>
      <returns>
              默认值为 null。
            </returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.AnimationSource">
      <summary>
              获取动画跟踪源。
            </summary>
      <returns>
              动画跟踪源。
            </returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.DataBindingSource">
      <summary>
              获取数据绑定跟踪源。
            </summary>
      <returns>
              数据绑定跟踪源。
            </returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.DependencyPropertySource">
      <summary>
              获取依赖属性跟踪源。
            </summary>
      <returns>
              依赖属性跟踪源。
            </returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.DocumentsSource">
      <summary>
              获取文档跟踪源。
            </summary>
      <returns>
              文档跟踪源。
            </returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.FreezableSource">
      <summary>
              获取可冻结的跟踪源。
            </summary>
      <returns>
              Freezable 跟踪源。
            </returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.HwndHostSource">
      <summary>
              获取一个 hwnd 承载跟踪源。
            </summary>
      <returns>
              Hwnd 主机跟踪源。
            </returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.MarkupSource">
      <summary>
              获取标记跟踪源。
            </summary>
      <returns>
              标记跟踪源。
            </returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.NameScopeSource">
      <summary>
              获取名称范围跟踪源。
            </summary>
      <returns>
              名称范围跟踪源。
            </returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.ResourceDictionarySource">
      <summary>
              获取资源字典跟踪源。
            </summary>
      <returns>
              资源字典跟踪源。
            </returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.RoutedEventSource">
      <summary>
              获取路由事件跟踪源。
            </summary>
      <returns>
              路由事件跟踪源。
            </returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.ShellSource">
      <summary>
              获取命令行程序跟踪源。
            </summary>
      <returns>
              命令行程序跟踪源。
            </returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.TraceLevel">
      <summary>
              获取或设置一个值，指定有关特定对象的跟踪的详细级别。
            </summary>
      <returns>
              一个 <see cref="T:System.Diagnostics.PresentationTraceLevel" /> 值，该值指示对特定对象的跟踪的详细级别。
            </returns>
    </member>
    <member name="P:System.IO.FileFormatException.SourceUri">
      <summary>
              获取导致的文件的名称 <see cref="T:System.IO.FileFormatException" />。
            </summary>
      <returns>
              一个 <see cref="T:System.Uri" /> ，表示导致异常的文件的名称。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess">
      <summary>
              获取一个值，指定是否与和 / 或访问以读取、 写入、 打开文件。
            </summary>
      <returns>
              <see cref="T:System.IO.FileAccess" /> 值，该值用于打开该文件。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties">
      <summary>
              获取核心包的属性 （如标题和主题） 的权限管理文档。
            </summary>
      <returns>
              <see cref="T:System.IO.Packaging.PackageProperties" /> 包。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation">
      <summary>
              获取的权限管理信息存储在 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />; 具体而言， <see cref="T:System.Security.RightsManagement.PublishLicense" /> 和 <see cref="T:System.Security.RightsManagement.UseLicense" />s 存储在 OLE 复合文件，它包含 rights management 保护包
            </summary>
      <returns>
              <see cref="T:System.IO.Packaging.RightsManagementInformation" /> 包。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo">
      <summary>
              获取一个对象，提供对加密的包外部的复合文件流访问。
            </summary>
      <returns>
              一个 <see cref="T:System.IO.Packaging.StorageInfo" /> 表示 OLE 复合文件可能会超出加密包的流。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.Package.FileOpenAccess">
      <summary>
              获取为包设置的文件访问权限。
            </summary>
      <returns>
              其中一个 <see cref="T:System.IO.FileAccess" /> 值︰ <see cref="F:System.IO.FileAccess.Read" />, ，<see cref="F:System.IO.FileAccess.Write" />, ，或 <see cref="F:System.IO.FileAccess.ReadWrite" />。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" /> 已调用)。
                </exception>
    </member>
    <member name="P:System.IO.Packaging.Package.PackageProperties">
      <summary>
              获取包的核心属性。
            </summary>
      <returns>
              包的核心属性。
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" /> 已调用)。
                </exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.CertificateEmbeddingOption">
      <summary>
              获取 X.509 证书嵌入选项。
            </summary>
      <returns>
              <see cref="T:System.IO.Packaging.CertificateEmbeddingOption" /> 值之一，指定数字签名的选项。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 已被删除。
                </exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.Signature">
      <summary>
              获取或设置 XML 数字签名。
            </summary>
      <returns>
              XML 数字签名。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 已被删除。
                </exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignaturePart">
      <summary>
              获取 <see cref="T:System.IO.Packaging.PackagePart" /> 包含签名。
            </summary>
      <returns>
              包含签名的包部分。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 已被删除。
                </exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignatureType">
      <summary>
              获取 URI 标识签名类型的字符串。 </summary>
      <returns>
              一个 URI 标识签名类型的字符串。
               默认值为 <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 已被删除。
                </exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignatureValue">
      <summary>
              获取加密的哈希值 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />。
            </summary>
      <returns>
              包含加密的哈希值的一个字节数组 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 已被删除。
                </exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignedParts">
      <summary>
              获取所有的集合 <see cref="T:System.IO.Packaging.PackagePart" /> 对象签名的签名。
            </summary>
      <returns>
              包含所有包部件的集合已使用进行签名。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 已被删除。
                </exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignedRelationshipSelectors">
      <summary>
              获取的列表 <see cref="T:System.IO.Packaging.PackageRelationship" /> 部件使用的签名进行过签名。
            </summary>
      <returns>
              列表 <see cref="T:System.IO.Packaging.PackageRelationship" /> 部件使用的签名进行过签名。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 已被删除。
                </exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.Signer">
      <summary>
              获取签名程序的 X.509 证书。
            </summary>
      <returns>
              签名程序的数字证书，或者，如果证书未存储于 <see cref="T:System.IO.Packaging.Package" />，则为<see langword="null" />。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 已被删除。
                </exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SigningTime">
      <summary>
              获取日期和创建签名的时间。
            </summary>
      <returns>
              日期和创建签名的时间。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 已被删除。
                </exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.TimeFormat">
      <summary>
              获取格式的日期和时间返回 <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" /> 属性。
            </summary>
      <returns>
              格式的日期和时间返回 <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" /> 属性。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 已被删除。
                </exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.CertificateOption">
      <summary>
              获取或设置由 <see cref="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri})" /> 方法使用的 X.509 证书嵌入选项以对包部件进行数字签名。
            </summary>
      <returns>
              <see cref="T:System.IO.Packaging.CertificateEmbeddingOption" /> 值之一。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.DefaultHashAlgorithm">
      <summary>
              获取 URI 标识用于创建和验证签名的默认哈希算法的字符串。
            </summary>
      <returns>
              一个 URI 标识用于创建和验证签名的默认哈希算法的字符串。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm">
      <summary>
              获取或设置 URI 标识符 <see cref="T:System.Security.Cryptography.HashAlgorithm" /> 实例，用于创建和验证签名。
            </summary>
      <returns>
              <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> URI 标识符 <see cref="T:System.Security.Cryptography.HashAlgorithm" /> 实例，用于创建和验证签名。 
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  字符串 URI 设置 <see langword="null" />。
                </exception>
      <exception cref="T:System.ArgumentException">
                  字符串 URI 设置为空。
                </exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.IsSigned">
      <summary>
              获取一个值，该值指示包是否包含任何签名。
            </summary>
      <returns>
              <see langword="true" /> 如果包中包含签名;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.ParentWindow">
      <summary>
              获取或设置用于显示证书选择对话框中的父窗口的句柄。
            </summary>
      <returns>
              要用于显示证书选择对话框的父窗口的句柄。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.SignatureOrigin">
      <summary>
              获取 统一资源标识符 (URI) 签名源部件。
            </summary>
      <returns>
              
                URI 签名源部件。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.SignatureOriginRelationshipType">
      <summary>
              获取默认签名源关系的类型。
            </summary>
      <returns>
              默认签名源关系类型。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.Signatures">
      <summary>
              获取集合的包中包含的所有签名。
            </summary>
      <returns>
              所有的集合 <see cref="T:System.IO.Packaging.PackageDigitalSignature" /> 对象。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.TimeFormat">
      <summary>
              获取或设置用于创建签名的日期/时间格式 <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" />。
            </summary>
      <returns>
              用于创建签名的日期/时间格式 <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" />。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping">
      <summary>
              获取一个字典，其中包含每个定义 <see cref="P:System.IO.Packaging.PackagePart.ContentType" /> 及其关联 XML <see cref="T:System.Security.Cryptography.Xml.Transform" />。<see cref="P:System.Security.Cryptography.Xml.Transform.Algorithm" /> 标识符。 
            </summary>
      <returns>
              一个字典，其中包含每个定义 <see cref="P:System.IO.Packaging.PackagePart.ContentType" /> 及其关联 XML <see cref="T:System.Security.Cryptography.Xml.Transform" />。<see cref="P:System.Security.Cryptography.Xml.Transform.Algorithm" /> 标识符。 
            </returns>
    </member>
    <member name="P:System.IO.Packaging.PackagePart.CompressionOption">
      <summary>
              获取部分内容流的压缩选项。
            </summary>
      <returns>
              部分内容流压缩选项。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  该部件已被删除。
                
                  - 或 -
                
                  <see cref="P:System.IO.Packaging.PackagePart.Package" /> 未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" /> 已调用)。
                </exception>
    </member>
    <member name="P:System.IO.Packaging.PackagePart.ContentType">
      <summary>
              获取 MIME 内容流的类型。
            </summary>
      <returns>
              
                MIME 部分的内容数据流的类型。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  该部件已被删除。
                
                  - 或 -
                
                  <see cref="P:System.IO.Packaging.PackagePart.Package" /> 未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" /> 已调用)。
                
                  - 或 -
                
                  由派生类中返回的字符串 <see cref="M:System.IO.Packaging.PackagePart.GetContentTypeCore" /> 方法为空。
                </exception>
    </member>
    <member name="P:System.IO.Packaging.PackagePart.Package">
      <summary>
              获取父 <see cref="T:System.IO.Packaging.Package" /> 的部分。
            </summary>
      <returns>
              父包的部件。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  该部件已被删除。
                
                  - 或 -
                
                  <see cref="P:System.IO.Packaging.PackagePart.Package" /> 未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" /> 已调用)。
                </exception>
    </member>
    <member name="P:System.IO.Packaging.PackagePart.Uri">
      <summary>
              获取 URI 的部分。
            </summary>
      <returns>
              
                URI 相对于程序包根目录的部分。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  该部件已被删除。
                
                  - 或 -
                
                  <see cref="P:System.IO.Packaging.PackagePart.Package" /> 未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> 或 <see cref="M:System.IO.Packaging.Package.Close" /> 已调用)。
                </exception>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Category">
      <summary>
              当在派生类中重写，获取或设置的类别 <see cref="T:System.IO.Packaging.Package" />。
            </summary>
      <returns>
              中包含的内容的类别 <see cref="T:System.IO.Packaging.Package" />。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.ContentStatus">
      <summary>
              当在派生类中重写，获取或设置一个值，表示状态的 <see cref="T:System.IO.Packaging.Package" />。
            </summary>
      <returns>
              状态 <see cref="T:System.IO.Packaging.Package" /> 内容。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.ContentType">
      <summary>
              当在派生类中重写，获取或设置一个值，表示的内容中包含的类型 <see cref="T:System.IO.Packaging.Package" />。
            </summary>
      <returns>
              中包含的内容类型 <see cref="T:System.IO.Packaging.Package" />。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Created">
      <summary>
              当在派生类中重写，获取或设置的日期和时间 <see cref="T:System.IO.Packaging.Package" /> 已创建。
            </summary>
      <returns>
              日期和时间 <see cref="T:System.IO.Packaging.Package" /> 最初创建。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Creator">
      <summary>
              当在派生类中重写，获取或设置一个值，标识的个人或实体创建 <see cref="T:System.IO.Packaging.Package" /> 及其内容。
            </summary>
      <returns>
              个人或实体创建 <see cref="T:System.IO.Packaging.Package" /> 及其内容。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Description">
      <summary>
              当在派生类中重写，获取或设置的说明中包含的内容 <see cref="T:System.IO.Packaging.Package" />。
            </summary>
      <returns>
              中包含的内容的说明 <see cref="T:System.IO.Packaging.Package" />。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Identifier">
      <summary>
              当在派生类中重写，获取或设置一个值，可以明确地标识 <see cref="T:System.IO.Packaging.Package" /> 及其内容。
            </summary>
      <returns>
              一个值，可以明确地标识 <see cref="T:System.IO.Packaging.Package" /> 及其内容。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Keywords">
      <summary>
              当在派生类中重写，获取或设置一个值，定义要支持搜索和索引的关键字分隔的集 <see cref="T:System.IO.Packaging.Package" /> 及其内容。
            </summary>
      <returns>
              要支持搜索和索引的关键字分隔的集 <see cref="T:System.IO.Packaging.Package" /> 和内容。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Language">
      <summary>
              当在派生类中重写，获取或设置一个值，标识的语言 <see cref="T:System.IO.Packaging.Package" /> 内容。
            </summary>
      <returns>
              一个标识值 <see cref="T:System.IO.Packaging.Package" /> 内容语言。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.LastModifiedBy">
      <summary>
              当在派生类中重写，获取或设置一个值，标识的用户的上次修改 <see cref="T:System.IO.Packaging.Package" /> 内容。
            </summary>
      <returns>
              上次修改的用户的 <see cref="T:System.IO.Packaging.Package" /> 内容。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.LastPrinted">
      <summary>
              当在派生类中重写，获取或设置的日期和时间 <see cref="T:System.IO.Packaging.Package" /> 上次打印内容。
            </summary>
      <returns>
              日期和时间 <see cref="T:System.IO.Packaging.Package" /> 上次打印内容。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Modified">
      <summary>
              当在派生类中重写，获取或设置的日期和时间 <see cref="T:System.IO.Packaging.Package" /> 上次更改。
            </summary>
      <returns>
              日期和时间 <see cref="T:System.IO.Packaging.Package" /> 上次更改。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Revision">
      <summary>
              当在派生类中重写，获取或设置的修订号 <see cref="T:System.IO.Packaging.Package" />。
            </summary>
      <returns>
              修订号 <see cref="T:System.IO.Packaging.Package" />。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Subject">
      <summary>
              当在派生类中重写，获取或设置主题的 <see cref="T:System.IO.Packaging.Package" /> 内容。
            </summary>
      <returns>
              主题的 <see cref="T:System.IO.Packaging.Package" /> 内容。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Title">
      <summary>
              当在派生类中重写，获取或设置为指定的名称 <see cref="T:System.IO.Packaging.Package" /> 及其内容。
            </summary>
      <returns>
              为指定的名称 <see cref="T:System.IO.Packaging.Package" /> 及其内容。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Version">
      <summary>
              当在派生类中重写，获取或设置版本数 <see cref="T:System.IO.Packaging.Package" />。
            </summary>
      <returns>
              版本号 <see cref="T:System.IO.Packaging.Package" />。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.Id">
      <summary>
              获取一个字符串，标识关系。
            </summary>
      <returns>
              一个字符串，标识关系。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.Package">
      <summary>
              获取 <see cref="T:System.IO.Packaging.Package" /> ，其中包含此关系。
            </summary>
      <returns>
              包含此关系的包。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.RelationshipType">
      <summary>
              获取关系的限定的类型名称。
            </summary>
      <returns>
              关系的限定的类型名称。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.SourceUri">
      <summary>
              获取 URI 的数据包或部件拥有关系。
            </summary>
      <returns>
              
                URI 的 <see cref="T:System.IO.Packaging.Package" /> 或 <see cref="T:System.IO.Packaging.PackagePart" /> 拥有关系。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.TargetMode">
      <summary>
              获取一个值，该值指示关系的目标是 <see cref="F:System.IO.Packaging.TargetMode.Internal" /> 或 <see cref="F:System.IO.Packaging.TargetMode.External" /> 指向 <see cref="T:System.IO.Packaging.Package" />。
            </summary>
      <returns>
              一个枚举值，它指示 <see cref="P:System.IO.Packaging.PackageRelationship.TargetUri" /> 是否引用指向 <see cref="T:System.IO.Packaging.Package" /> 的 <see cref="F:System.IO.Packaging.TargetMode.Internal" /> 或 <see cref="F:System.IO.Packaging.TargetMode.External" />。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.TargetUri">
      <summary>
              获取关系的目标资源的 URI。
            </summary>
      <returns>
              目标资源的 URI。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationshipSelector.SelectionCriteria">
      <summary>
              获取为指定的选择标准 <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> 构造函数。
            </summary>
      <returns>
              选择条件基于 <see cref="P:System.IO.Packaging.PackageRelationshipSelector.SelectorType" /> 的 <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Id" /> 或 <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Type" /> 指定给 <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> 构造函数。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationshipSelector.SelectorType">
      <summary>
              获取 <see cref="T:System.IO.Packaging.PackageRelationshipSelectorType" /> 指定给 <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> 构造函数。
            </summary>
      <returns>
              选择器类型 <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Id" /> 或 <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Type" /> 指定给 <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> 构造函数。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationshipSelector.SourceUri">
      <summary>
              获取根打包 URI （"/"） 或部件 <see cref="P:System.IO.Packaging.PackagePart.Uri" /> 指定给 <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> 构造函数中的关系的所有者。
            </summary>
      <returns>
              根软件包 URI （"/"） 或部分 <see cref="P:System.IO.Packaging.PackagePart.Uri" /> 指定给 <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> 构造函数中的关系的所有者。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.RightsManagementInformation.CryptoProvider">
      <summary>
              获取或设置 <see cref="T:System.Security.RightsManagement.CryptoProvider" /> 访问包的加密权限管理数据流。
            </summary>
      <returns>
              <see cref="T:System.Security.RightsManagement.CryptoProvider" /> 访问的权限管理信息。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.SignatureVerificationEventArgs.Signature">
      <summary>
               获取要验证数字签名。
            </summary>
      <returns>
              要验证数字签名。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.SignatureVerificationEventArgs.VerifyResult">
      <summary>
               获取签名验证错误。
            </summary>
      <returns>
              签名验证错误。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.StorageInfo.Name">
      <summary>
              获取存储区的名称。
            </summary>
      <returns>
              此存储区的名称。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.StreamInfo.CompressionOption">
      <summary>
              获取 <see cref="T:System.IO.Packaging.CompressionOption" /> 设置为流。
            </summary>
      <returns>
              针对包流的压缩选项设置。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.StreamInfo.EncryptionOption">
      <summary>
              获取 <see cref="T:System.IO.Packaging.EncryptionOption" /> 设置为流。
            </summary>
      <returns>
              加密选项设置为包的流的。
            </returns>
    </member>
    <member name="P:System.IO.Packaging.StreamInfo.Name">
      <summary>
              获取流的名称。
            </summary>
      <returns>
              此流的名称。
            </returns>
    </member>
    <member name="P:System.Security.Permissions.MediaPermission.Audio">
      <summary>
              获取音频权限级别的当前值。
            </summary>
      <returns>
              音频权限级别。
            </returns>
    </member>
    <member name="P:System.Security.Permissions.MediaPermission.Image">
      <summary>
              获取图像权限级别的当前值。
            </summary>
      <returns>
              图像权限级别。
            </returns>
    </member>
    <member name="P:System.Security.Permissions.MediaPermission.Video">
      <summary>
              获取视频权限级别的当前值。
            </summary>
      <returns>
              媒体权限级别。
            </returns>
    </member>
    <member name="P:System.Security.Permissions.MediaPermissionAttribute.Audio">
      <summary>
              获取或设置 <see cref="T:System.Security.Permissions.MediaPermissionAttribute" /> 的音频权限级别。
            </summary>
      <returns>
              <see cref="T:System.Security.Permissions.MediaPermissionAudio" /> 的状态。
            </returns>
    </member>
    <member name="P:System.Security.Permissions.MediaPermissionAttribute.Image">
      <summary>
              获取或设置 <see cref="T:System.Security.Permissions.MediaPermissionAttribute" /> 的图像权限级别。
            </summary>
      <returns>
              <see cref="T:System.Security.Permissions.MediaPermissionImage" /> 的状态。
            </returns>
    </member>
    <member name="P:System.Security.Permissions.MediaPermissionAttribute.Video">
      <summary>
              为 <see cref="T:System.Security.Permissions.MediaPermissionAttribute" /> 获取或设置视频权限级别。
            </summary>
      <returns>
              <see cref="T:System.Security.Permissions.MediaPermissionVideo" /> 的状态。
            </returns>
    </member>
    <member name="P:System.Security.Permissions.WebBrowserPermission.Level">
      <summary>
              获取或设置 Web 浏览器的权限级别的当前值。
            </summary>
      <returns>
              Web 浏览器的权限级别的当前值。
            </returns>
    </member>
    <member name="P:System.Security.Permissions.WebBrowserPermissionAttribute.Level">
      <summary>
              为 <see cref="T:System.Security.Permissions.WebBrowserPermissionAttribute" /> 获取或设置当前 Web 浏览器权限级别。
            </summary>
      <returns>
              当前 Web 浏览器权限级别的状态。
            </returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.Right">
      <summary>
              获取 <see cref="T:System.Security.RightsManagement.ContentRight" /> 所授予。
            </summary>
      <returns>
              访问权限授予 <see cref="P:System.Security.RightsManagement.ContentGrant.User" />, 、 指定给 <see cref="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)" /> 构造函数。
            </returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.User">
      <summary>
              获取被授予访问权限的用户 <see cref="P:System.Security.RightsManagement.ContentGrant.Right" />。
            </summary>
      <returns>
              用户的访问权限 <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> 授予，指定给 <see cref="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)" /> 构造函数。
            </returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.ValidFrom">
      <summary>
              获取开始日期和时间所授予 <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> 开始。
            </summary>
      <returns>
              开始日期和时间所授予 <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> 开始时，或 <see cref="T:System.DateTime" />。<see cref="F:System.DateTime.MinValue" /> 没有是否没有开始限制。
            </returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.ValidUntil">
      <summary>
              获取结束的日期和时间所授予 <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> 过期。
            </summary>
      <returns>
              结束日期和时间所授予 <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> 到期，或 <see cref="T:System.DateTime" />。<see cref="F:System.DateTime.MaxValue" /> 如果没有结束日期和时间限制。
            </returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.AnyoneUser">
      <summary>
              获取实例的"任何人" <see cref="T:System.Security.RightsManagement.ContentUser" /> 角色。
            </summary>
      <returns>
              "任何人"的实例 <see cref="T:System.Security.RightsManagement.ContentUser" /> 角色。
            </returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.AuthenticationType">
      <summary>
              获取 <see cref="T:System.Security.RightsManagement.AuthenticationType" /> 指定给 <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" /> 构造函数。
            </summary>
      <returns>
              <see cref="T:System.Security.RightsManagement.AuthenticationType" /> 指定给 <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" /> 构造函数。
            </returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.Name">
      <summary>
              获取指定的用户或组名称 <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" /> 构造函数。
            </summary>
      <returns>
              为指定的用户或组名称 <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" /> 构造函数。
            </returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.OwnerUser">
      <summary>
              获取实例的"所有者" <see cref="T:System.Security.RightsManagement.ContentUser" /> 角色。
            </summary>
      <returns>
              "所有者"的实例 <see cref="T:System.Security.RightsManagement.ContentUser" /> 角色。
            </returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.BlockSize">
      <summary>
              获取密码块大小，以字节为单位。
            </summary>
      <returns>
              密码块大小，以字节为单位。
                默认块大小为 高级加密标准 (AES) 为 8。
            </returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.BoundGrants">
      <summary>
              获取一个集合，列出通过验证，并向用户授予的权限。
            </summary>
      <returns>
              一个集合，枚举通过验证并的权限都授予用户。
            </returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.CanDecrypt">
      <summary>
              获取一个值，该值指示用户是否具有权限进行解密。
            </summary>
      <returns>
              true 如果 <see cref="T:System.Security.RightsManagement.UseLicense" /> 授予用户权限进行解密; 否则为 false。
            </returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.CanEncrypt">
      <summary>
              获取一个值，该值指示用户是否具有权限进行加密。
            </summary>
      <returns>
              true 如果 <see cref="T:System.Security.RightsManagement.UseLicense" /> 授予用户权限进行加密; 否则为 false。
            </returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.CanMergeBlocks">
      <summary>
              获取一个值，该值指示是否 <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" /> 和 <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" /> 可以接受不同的缓冲区块大小的长度。
            </summary>
      <returns>
              true 如果缓冲区传递给 <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" /> 可以是传递给的缓冲区的长度不同 <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" />; 否则为 false 如果缓冲区传递给 <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" /> 和 <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" /> 必须是完全相同的长度。
                有关 高级加密标准 (AES) 默认值是 true。
            </returns>
    </member>
    <member name="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description">
      <summary>
              获取区域设置说明。
            </summary>
      <returns>
              区域设置说明。
            </returns>
    </member>
    <member name="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name">
      <summary>
              获取区域设置名称。
            </summary>
      <returns>
              区域设置名称。
            </returns>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.ContentId">
      <summary>
              获取发布服务器上创建内容标识符。
            </summary>
      <returns>
              发布服务器上创建的内容标识符。
            </returns>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.ReferralInfoName">
      <summary>
              获取作者或内容的发布者的联系人姓名。
            </summary>
      <returns>
              作者或内容的发布者的联系人名称。
            </returns>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.ReferralInfoUri">
      <summary>
              获取联系人 URI 作者或发布服务器上的内容。
            </summary>
      <returns>
              联系人 统一资源标识符 (URI) 作者或发布服务器上的内容。
            </returns>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.UseLicenseAcquisitionUrl">
      <summary>
              获取 URI 用于获取 <see cref="T:System.Security.RightsManagement.UseLicense" />。
            </summary>
      <returns>
              
                URI 用于获取 <see cref="T:System.Security.RightsManagement.UseLicense" />。
            </returns>
    </member>
    <member name="P:System.Security.RightsManagement.RightsManagementException.FailureCode">
      <summary>
              获取 <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" /> 错误。
            </summary>
      <returns>
              失败的错误代码。
            </returns>
    </member>
    <member name="P:System.Security.RightsManagement.SecureEnvironment.ApplicationManifest">
      <summary>
              获取 <see cref="P:System.Security.RightsManagement.SecureEnvironment.ApplicationManifest" /> 时指定 <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> 已创建。
            </summary>
      <returns>
              为指定的应用程序清单 <see cref="Overload:System.Security.RightsManagement.SecureEnvironment.Create" /> 方法时 <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> 创建。
            </returns>
    </member>
    <member name="P:System.Security.RightsManagement.SecureEnvironment.User">
      <summary>
              获取用户组时，指定 <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> 已创建。
            </summary>
      <returns>
              用户组指定了对 <see cref="M:System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.ContentUser)" /> 方法时 <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> 已创建。
            </returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.ContentId">
      <summary>
              获取或设置发布者创建的内容标识符。
            </summary>
      <returns>
              发布者创建的权限管理内容标识符。
            </returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.Grants">
      <summary>
              获取分配的用户权限的集合。
            </summary>
      <returns>
              此许可证中提供的分配的用户权限的集合。
            </returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.LocalizedNameDescriptionDictionary">
      <summary>
              获取名称和描述对的集合。
            </summary>
      <returns>
              名称和说明对一个集合。
            </returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.Owner">
      <summary>
              获取或设置内容所有者。
            </summary>
      <returns>
              拥有已发布的内容的用户。
            </returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.ReferralInfoName">
      <summary>
              获取或设置作者或内容的发布者的联系人姓名。
            </summary>
      <returns>
              作者或内容的发布者的联系人名称。
            </returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.ReferralInfoUri">
      <summary>
              获取或设置联系人 URI 作者或发布服务器上的内容。
            </summary>
      <returns>
              联系人 统一资源标识符 (URI) 作者或发布服务器上的内容。
            </returns>
    </member>
    <member name="P:System.Security.RightsManagement.UseLicense.ApplicationData">
      <summary>
              获取应用程序数据字典，其中包含从向使用方应用程序的发布应用程序传递的键/值对。
            </summary>
      <returns>
              发布应用程序中对使用方应用程序传递应用程序数据字典，其中包含键/值对。
            </returns>
    </member>
    <member name="P:System.Security.RightsManagement.UseLicense.ContentId">
      <summary>
              获取发布者创建的内容标识符。
            </summary>
      <returns>
              创建发布服务器上的内容标识符。
            </returns>
    </member>
    <member name="P:System.Security.RightsManagement.UseLicense.Owner">
      <summary>
              获取许可证的所有者。
            </summary>
      <returns>
              许可证的所有者。
            </returns>
    </member>
    <member name="P:System.Windows.AttachedPropertyBrowsableForTypeAttribute.TargetType">
      <summary>
              获取基类型，该类型设定此 .NET Framework 特性 应用的附加属性的使用范围。
            </summary>
      <returns>
              请求的 <see cref="T:System.Type" />。
            </returns>
    </member>
    <member name="P:System.Windows.AttachedPropertyBrowsableForTypeAttribute.TypeId">
      <summary>
              获取此的唯一类型标识符 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> .NET Framework 特性。 
            </summary>
      <returns>
              一个对象，它的唯一标识符 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />。
            </returns>
    </member>
    <member name="P:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.AttributeType">
      <summary>
              获取的类型  .NET Framework 特性 还必须在类上应用程序。
            </summary>
      <returns>
                .NET Framework 特性 类型。
            </returns>
    </member>
    <member name="P:System.Windows.BaseCompatibilityPreferences.FlowDispatcherSynchronizationContextPriority">
      <summary>
              获取或设置一个值，该值指示是否有关的信息 <see cref="P:System.Windows.Threading.DispatcherOperation.Priority" /> 保存到 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />。
            </summary>
      <returns>
              <see langword="true" /> 如果有关的信息 <see cref="P:System.Windows.Threading.DispatcherOperation.Priority" /> 保存到 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Windows.BaseCompatibilityPreferences.InlineDispatcherSynchronizationContextSend">
      <summary>
              获取或设置一个值，该值指示是否 <see cref="M:System.Windows.Threading.DispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" /> 方法将委托放在调度程序队列中或直接调用委托时。
            </summary>
      <returns>
              <see langword="true" /> 如果 <see cref="M:System.Windows.Threading.DispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" /> 方法将委托放在调度程序队列中或如果该委托是直接调用; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Windows.BaseCompatibilityPreferences.ReuseDispatcherSynchronizationContextInstance">
      <summary>
              获取或设置一个值，该值指示是否单个 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> 用于多个调度程序操作。
            </summary>
      <returns>
              如果一个为 true <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> 用于多个 dispatcher 操作; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.Data">
      <summary>
              获取基础数据对象。
            </summary>
      <returns>
              属于基础数据对象的类型 <see cref="T:System.Object" /> 的值。
            </returns>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.Dispatcher">
      <summary>
              获取或设置当前 <see cref="T:System.Windows.Threading.Dispatcher" /> 对象传递给 UI 线程使用。
            </summary>
      <returns>
              当前 <see cref="T:System.Windows.Threading.Dispatcher" /> 对象传递给 UI 线程使用。
               默认情况下，这是 <see cref="T:System.Windows.Threading.Dispatcher" /> 与在其创建此实例的线程关联的对象。
            </returns>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.Error">
      <summary>
              获取最新的查询操作的错误。
            </summary>
      <returns>
              类型的值 <see cref="T:System.Exception" /> ，它是最新的查询操作，该错误或 <see langword="null" /> 如果没有错误。
            </returns>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.IsInitialLoadEnabled">
      <summary>
              获取或设置一个值，该值指示是否可以阻止或延迟自动加载的数据。
            </summary>
      <returns>
              <see langword="false" /> 若要阻止或延迟的数据; 自动加载否则为 <see langword="true" />。
               默认值为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.IsRefreshDeferred">
      <summary>
              获取一个值，该值指示是否存在某个未完成 <see cref="M:System.Windows.Data.DataSourceProvider.DeferRefresh" /> 正在使用。
            </summary>
      <returns>
              <see langword="true" /> 如果没有未完成 <see cref="M:System.Windows.Data.DataSourceProvider.DeferRefresh" /> 中使用; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Windows.DependencyObject.DependencyObjectType">
      <summary>
              获取 <see cref="T:System.Windows.DependencyObjectType" /> 包装 CLR 此实例的类型。 </summary>
      <returns>
              一个 <see cref="T:System.Windows.DependencyObjectType" /> 包装 CLR 此实例的类型。
            </returns>
    </member>
    <member name="P:System.Windows.DependencyObject.IsSealed">
      <summary>
              获取一个值，该值指示是否此实例当前密封 （只读）。
            </summary>
      <returns>
              <see langword="true" /> 如果此实例密封的;，否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Windows.DependencyObjectType.BaseType">
      <summary>
              获取 <see cref="T:System.Windows.DependencyObjectType" /> 当前即时基类 <see cref="T:System.Windows.DependencyObjectType" />。
            </summary>
      <returns>
              基本类的类型。
            </returns>
    </member>
    <member name="P:System.Windows.DependencyObjectType.Id">
      <summary>
              这对于定时数组查找操作中获取的从零开始的唯一标识符。
            </summary>
      <returns>
              一个内部标识符。
            </returns>
    </member>
    <member name="P:System.Windows.DependencyObjectType.Name">
      <summary>
              获取表示的名称 公共语言运行时 (CLR) 系统类型。
            </summary>
      <returns>
              名称表示 CLR 系统类型。
            </returns>
    </member>
    <member name="P:System.Windows.DependencyObjectType.SystemType">
      <summary>
               获取 公共语言运行时 (CLR) 由此所表示的系统类型 <see cref="T:System.Windows.DependencyObjectType" />。
            </summary>
      <returns>
              
                CLR 由此所表示的系统类型 <see cref="T:System.Windows.DependencyObjectType" />。
            </returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.DefaultMetadata">
      <summary>
              获取依赖项属性的默认元数据。
            </summary>
      <returns>
              依赖项属性的默认元数据。
            </returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.GlobalIndex">
      <summary>
              获取唯一标识依赖项属性的内部生成的值。
            </summary>
      <returns>
              唯一的数字标识符。
            </returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.Name">
      <summary>
              获取依赖属性的名称。
            </summary>
      <returns>
              属性的名称。
            </returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.OwnerType">
      <summary>
              获取使用属性系统注册依赖属性或者将自己作为属性所有者添加的对象的类型。
            </summary>
      <returns>
              注册属性或者将自己作为属性所有者添加的对象的类型。
            </returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.PropertyType">
      <summary>
              获取用于其值的依赖项属性的类型。
            </summary>
      <returns>
              <see cref="T:System.Type" /> 属性值。
            </returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.ReadOnly">
      <summary>
              获取一个值，该值指示是否依赖项属性标识由此 <see cref="T:System.Windows.DependencyProperty" /> 实例是只读的依赖项属性。
            </summary>
      <returns>
              <see langword="true" /> 如果依赖项属性是只读的;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.ValidateValueCallback">
      <summary>
              获取依赖项属性的值验证回调。
            </summary>
      <returns>
              此依赖项属性，为提供的值验证回调 <paramref name="validateValueCallback" /> 原始的依赖关系属性注册中的参数。
            </returns>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.NewValue">
      <summary>
              在更改后获取属性的值。
            </summary>
      <returns>
              更改后的属性值。
            </returns>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.OldValue">
      <summary>
              获取更改之前的属性的值。
            </summary>
      <returns>
              更改之前的属性值。
            </returns>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.Property">
      <summary>
              获取发生值更改依赖项属性的标识符。
            </summary>
      <returns>
              依赖项属性标识符字段，其中的值更改时发生。
            </returns>
    </member>
    <member name="P:System.Windows.DependencyPropertyKey.DependencyProperty">
      <summary>
              获取与此专用的只读依赖项属性标识符关联的依赖项属性标识符。
            </summary>
      <returns>
              相关的依赖项属性标识符。
            </returns>
    </member>
    <member name="P:System.Windows.Freezable.CanFreeze">
      <summary>
              获取一个值，该值指示是否可将对象变为不可修改。
            </summary>
      <returns>
              如果当前对象可以变为不可修改，或者已经不可修改，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Windows.Freezable.IsFrozen">
      <summary>
              获取一个值，该值指示对象当前是否可修改。
            </summary>
      <returns>
              如果该对象已被冻结且无法修改，则为 <see langword="true" />；如果可以修改该对象，则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Windows.Input.TraversalRequest.FocusNavigationDirection">
      <summary>
              获取遍历方向。
            </summary>
      <returns>
              遍历方向的枚举值之一。
            </returns>
    </member>
    <member name="P:System.Windows.Input.TraversalRequest.Wrapped">
      <summary>
               获取或设置一个值，指示焦点遍历是否已达到可以具有焦点的子元素的末尾。
            </summary>
      <returns>
              <see langword="true" /> 如果这种遍历已到达子元素可以具有焦点，则末尾否则为 <see langword="false" />。
               默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Windows.Int32Rect.Empty">
      <summary>
              获取空的矩形中，一个特殊值，表示一个矩形，有没有位置或区域。
            </summary>
      <returns>
              任何位置或区域为空矩形。
            </returns>
    </member>
    <member name="P:System.Windows.Int32Rect.HasArea">
      <summary>
              获取一个值，该值指示是否 <see cref="P:System.Windows.Int32Rect.Width" /> 和 <see cref="P:System.Windows.Int32Rect.Height" /> 属性 <see cref="T:System.Windows.Int32Rect" /> 大于 0。
            </summary>
      <returns>
              true <see cref="P:System.Windows.Int32Rect.Width" /> 和 <see cref="P:System.Windows.Int32Rect.Height" /> 属性 <see cref="T:System.Windows.Int32Rect" /> 大于 0; 否则为 <paramref name="false" />。
            </returns>
    </member>
    <member name="P:System.Windows.Int32Rect.Height">
      <summary>
              获取或设置矩形的高度。
            </summary>
      <returns>
              矩形的高度。
               默认值为 0。
            </returns>
    </member>
    <member name="P:System.Windows.Int32Rect.IsEmpty">
      <summary>
              获取一个值，该值指示是否为空矩形。
            </summary>
      <returns>
              true 如果矩形为空; 否则为 false。
               默认值为 true。
            </returns>
    </member>
    <member name="P:System.Windows.Int32Rect.Width">
      <summary>
              获取或设置矩形的宽度。
            </summary>
      <returns>
              矩形的宽度。
               默认值为 0。
            </returns>
    </member>
    <member name="P:System.Windows.Int32Rect.X">
      <summary>
              获取或设置矩形左上角的 x 坐标。
            </summary>
      <returns>
              矩形左上角的 x 坐标。
               默认值为 0。
            </returns>
    </member>
    <member name="P:System.Windows.Int32Rect.Y">
      <summary>
              获取或设置矩形左上角的 y 坐标。
            </summary>
      <returns>
              矩形左上角的 y 坐标。
               默认值为 0。
            </returns>
    </member>
    <member name="P:System.Windows.Interop.ComponentDispatcher.CurrentKeyboardMessage">
      <summary>
              获取已引发的最后一条消息。
            </summary>
      <returns>
              最后一条消息。
            </returns>
    </member>
    <member name="P:System.Windows.Interop.ComponentDispatcher.IsThreadModal">
      <summary>
              获取一个值，该值指示线程是否是模式。
            </summary>
      <returns>
              如果线程是模式，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Windows.Interop.IKeyboardInputSink.KeyboardInputSite">
      <summary>
              获取或设置对组件的容器的引用 <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> 接口。
            </summary>
      <returns>
              对容器的引用 <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> 接口。
            </returns>
    </member>
    <member name="P:System.Windows.Interop.IKeyboardInputSite.Sink">
      <summary>
              获取与此站点相关联的键盘接收器。
            </summary>
      <returns>
              当前站点的 <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> 接口。
            </returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.hwnd">
      <summary>
              获取或设置为其窗口过程接收消息窗口的窗口句柄 (HWND)。
            </summary>
      <returns>
              窗口句柄 (HWND)。
            </returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.lParam">
      <summary>
              获取或设置 <paramref name="lParam" /> 值，该值指定消息有关的其他信息。
               值的确切含义取决于 <see cref="P:System.Windows.Interop.MSG.message" /> 成员。
            </summary>
      <returns>
              <paramref name="lParam" /> 用于消息的值。
            </returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.message">
      <summary>
              获取或设置消息标识符。
            </summary>
      <returns>
              消息的标识符。
            </returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.pt_x">
      <summary>
              获取或设置发送消息之后在屏幕上、 在光标位置的 x 坐标。
            </summary>
      <returns>
              光标位置的 x 坐标。
            </returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.pt_y">
      <summary>
              获取或设置发送消息之后在屏幕上、 在光标位置的 y 坐标。
            </summary>
      <returns>
              光标位置的 y 坐标。
            </returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.time">
      <summary>
              获取或设置发送消息之后的时间。
            </summary>
      <returns>
              所发送消息之后的时间。
            </returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.wParam">
      <summary>
              获取或设置 <paramref name="wParam" /> 值为消息，该值指定消息有关的其他信息。
               确切含义取决于消息的值。
            </summary>
      <returns>
              <paramref name="wParam" /> 用于消息的值。
            </returns>
    </member>
    <member name="P:System.Windows.LocalValueEntry.Property">
      <summary>
              获取该条目表示的本地设置的依赖项属性的标识符。
            </summary>
      <returns>
              本地设置的依赖项属性的标识符。
            </returns>
    </member>
    <member name="P:System.Windows.LocalValueEntry.Value">
      <summary>
              获取本地设置的依赖属性的值。
            </summary>
      <returns>
              对象形式的本地设置的依赖属性的值。
            </returns>
    </member>
    <member name="P:System.Windows.LocalValueEnumerator.Count">
      <summary>
              获取集合中表示的项的数目。
            </summary>
      <returns>
              集合中项的数目。
            </returns>
    </member>
    <member name="P:System.Windows.LocalValueEnumerator.Current">
      <summary>
              获取集合中的当前元素。
            </summary>
      <returns>
              当前 <see cref="T:System.Windows.LocalValueEntry" /> 集合中。
            </returns>
    </member>
    <member name="P:System.Windows.LocalValueEnumerator.System#Collections#IEnumerator#Current">
      <summary>
              有关此成员的说明，请参阅 <see cref="P:System.Collections.IEnumerator.Current" />。
            </summary>
      <returns>
              集合中的当前元素。
            </returns>
    </member>
    <member name="P:System.Windows.Markup.DesignerSerializationOptionsAttribute.DesignerSerializationOptions">
      <summary>
              获取 <see cref="T:System.Windows.Markup.DesignerSerializationOptions" /> 设置的属性。
            </summary>
      <returns>
              序列化选项，作为枚举的值。
            </returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.Attributes">
      <summary>
              当在派生类中重写时获取与此相关联的属性 <see cref="T:System.Windows.Markup.Primitives.MarkupObject" />。
            </summary>
      <returns>
              特性的集合。
            </returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.Instance">
      <summary>
              当在派生类中重写时获取由此对象的实例 <see cref="T:System.Windows.Markup.Primitives.MarkupObject" />。
            </summary>
      <returns>
              对象的实例
            </returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.ObjectType">
      <summary>
              当在派生类中重写时获取的一种 <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> 实例。
            </summary>
      <returns>
              对象的类型。
            </returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.Properties">
      <summary>
              当在派生类中重写时获取此属性 <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> 应写入的实例 XAML。
            </summary>
      <returns>
              属性。
            </returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Attributes">
      <summary>
              当在派生类中重写时获取与此相关联的属性 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />。
            </summary>
      <returns>
              特性的集合。
            </returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty">
      <summary>
              当在派生类中重写时获取 <see cref="T:System.Windows.DependencyProperty" /> 标记属性，如果此属性实现为依赖项属性标识符
            </summary>
      <returns>
              依赖属性标识符。
            </returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsAttached">
      <summary>
              当在派生类中重写，确定是否这 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 是一个附加 <see cref="T:System.Windows.DependencyProperty" />。
            </summary>
      <returns>
              <see langword="true" /> 如果该属性是一个附加 <see cref="T:System.Windows.DependencyProperty" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsComposite">
      <summary>
              当在派生类中重写，确定是否这 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 是一个复合属性。
            </summary>
      <returns>
              <see langword="true" /> 此属性为复合属性;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsConstructorArgument">
      <summary>
              当在派生类中重写，确定是否这 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 表示构造函数参数。
            </summary>
      <returns>
              <see langword="true" /> 如果此属性表示的构造函数参数;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsContent">
      <summary>
              当在派生类中重写，确定是否这 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 表示直接集合的内容。
            </summary>
      <returns>
              <see langword="true" /> 如果该属性表示直接内容;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsKey">
      <summary>
              当在派生类中重写，确定是否这 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 表示使用的密钥 <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> 以便存储在字典中的项。
            </summary>
      <returns>
              <see langword="true" /> 如果此属性表示一个密钥;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsValueAsString">
      <summary>
              当在派生类中重写，确定是否这 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 表示传递给类型转换器来创建该属性的实例的文本是否应使用的构造函数。
            </summary>
      <returns>
              <see langword="true" />, 如果此 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 表示的字符串; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Items">
      <summary>
              当在派生类中重写，获取对此属性的值构成的项。
            </summary>
      <returns>
              将此属性的值构成的项。
            </returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Name">
      <summary>
              当在派生类中重写时获取用于诊断和错误报告的名称。
            </summary>
      <returns>
              标识符属性名称。
            </returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor">
      <summary>
              当在派生类中重写时获取 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 标记属性。
            </summary>
      <returns>
              属性描述符。
            </returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.PropertyType">
      <summary>
              当在派生类中重写时获取的属性的 CLR 类型。
            </summary>
      <returns>
              CLR 类型。
            </returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.StringValue">
      <summary>
              当在派生类中重写时获取的字符串值 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />。
            </summary>
      <returns>
              字符串值。
            </returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.TypeReferences">
      <summary>
              当在派生类中重写时获取的类型集，这 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 时它将序列化为一个字符串作为其值将引用。
            </summary>
      <returns>
              类型集合。
            </returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Value">
      <summary>
              当在派生类中重写时获取的当前值 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />。
            </summary>
      <returns>
              当前值。
            </returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.Determinant">
      <summary>
               获取此决定 <see cref="T:System.Windows.Media.Matrix" /> 结构。
            </summary>
      <returns>
              此决定 <see cref="T:System.Windows.Media.Matrix" />。
            </returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.HasInverse">
      <summary>
               获取一个值，该值指示是否此 <see cref="T:System.Windows.Media.Matrix" /> 结构是可逆转。
            </summary>
      <returns>
              <see langword="true" /> 如果 <see cref="T:System.Windows.Media.Matrix" /> 具有逆实例; 否则为 <see langword="false" />。
               默认值为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.Identity">
      <summary>
               获取一个标识 <see cref="T:System.Windows.Media.Matrix" />。
            </summary>
      <returns>
              恒等矩阵。
            </returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.IsIdentity">
      <summary>
               获取一个值，该值指示是否此 <see cref="T:System.Windows.Media.Matrix" /> 结构是单位矩阵。
            </summary>
      <returns>
              <see langword="true" /> 如果 <see cref="T:System.Windows.Media.Matrix" /> 结构是单位矩阵; 否则为 <see langword="false" />。
               默认值为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M11">
      <summary>
              获取或设置的值的第一行和第一列这 <see cref="T:System.Windows.Media.Matrix" /> 结构。
            </summary>
      <returns>
              值的第一行和第一列这 <see cref="T:System.Windows.Media.Matrix" />。
               默认值为 1。
            </returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M12">
      <summary>
               获取或设置此第一的行和第二列的值 <see cref="T:System.Windows.Media.Matrix" /> 结构。
            </summary>
      <returns>
              这第一个行和第二列的值 <see cref="T:System.Windows.Media.Matrix" />。
               默认值为 0。
            </returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M21">
      <summary>
               获取或设置第二个行和这第一列的值 <see cref="T:System.Windows.Media.Matrix" /> 结构。
            </summary>
      <returns>
              这第一列的第二行的值 <see cref="T:System.Windows.Media.Matrix" />。
               默认值为 0。
            </returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M22">
      <summary>
              获取或设置此的第二行和第二列的值 <see cref="T:System.Windows.Media.Matrix" /> 结构。
            </summary>
      <returns>
              这第二个行和第二列的值 <see cref="T:System.Windows.Media.Matrix" /> 结构。
               默认值为 1。
            </returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.OffsetX">
      <summary>
              获取或设置第三行、 第一列，此值 <see cref="T:System.Windows.Media.Matrix" /> 结构。
            </summary>
      <returns>
              第三行、 第一列，此值 <see cref="T:System.Windows.Media.Matrix" /> 结构。
               默认值为 0。
            </returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.OffsetY">
      <summary>
              获取或设置此第三个行和第二列的值 <see cref="T:System.Windows.Media.Matrix" /> 结构。
            </summary>
      <returns>
              这第三个行和第二列的值 <see cref="T:System.Windows.Media.Matrix" /> 结构。
               默认值为 0。
            </returns>
    </member>
    <member name="P:System.Windows.NameScope.Count">
      <summary>
              在此映射名称的集合中返回的项数 <see cref="T:System.Windows.NameScope" />。
            </summary>
      <returns>
              集合中项的数目。
            </returns>
    </member>
    <member name="P:System.Windows.NameScope.IsReadOnly">
      <summary>
              获取一个值，该值指示集合是否为只读。
            </summary>
      <returns>
              始终返回 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Windows.NameScope.Item(System.String)">
      <summary>
              获取或设置具有指定键的项。
            </summary>
      <param name="key">
                XAML 的字符串名称的名称映射以获取或设置。
              </param>
      <returns>
              映射的形式提供的 XAML 名称的对象的值 <paramref name="key" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="key" /> 作为提供 <see langword="null" />。
                
                  - 或 -
                
                  <paramref name="value" /> 作为提供 <see langword="null" /> 为 set 操作。
                </exception>
    </member>
    <member name="P:System.Windows.NameScope.Keys">
      <summary>
              获取集合中的键 <see cref="T:System.Windows.NameScope" /> 字典。
            </summary>
      <returns>
              中的键的集合 <see cref="T:System.Windows.NameScope" /> 字典。
            </returns>
    </member>
    <member name="P:System.Windows.NameScope.NameScope">
      <summary>
              获取或设置动态附加 <see cref="T:System.Windows.NameScope" /> 实例。
            </summary>
      <returns>
              在特定对象上附加的名称范围。
            </returns>
    </member>
    <member name="P:System.Windows.NameScope.Values">
      <summary>
              获取集合中的值 <see cref="T:System.Windows.NameScope" /> 字典。
            </summary>
      <returns>
              中的值的集合 <see cref="T:System.Windows.NameScope" /> 字典。
            </returns>
    </member>
    <member name="P:System.Windows.Point.X">
      <summary>
              获取或设置 <see cref="P:System.Windows.Point.X" />-协调此值的 <see cref="T:System.Windows.Point" /> 结构。
            </summary>
      <returns>
              <see cref="P:System.Windows.Point.X" />-协调此值的 <see cref="T:System.Windows.Point" /> 结构。
                默认值为 0。
            </returns>
    </member>
    <member name="P:System.Windows.Point.Y">
      <summary>
              获取或设置 <see cref="P:System.Windows.Point.Y" />-协调此值的 <see cref="T:System.Windows.Point" />。
            </summary>
      <returns>
              <see cref="P:System.Windows.Point.Y" />-协调此值的 <see cref="T:System.Windows.Point" /> 结构。
                默认值为 0。
            </returns>
    </member>
    <member name="P:System.Windows.PropertyMetadata.CoerceValueCallback">
      <summary>
              获取或设置一个引用， <see cref="T:System.Windows.CoerceValueCallback" /> 此元数据中指定的实现。
            </summary>
      <returns>
              一个 <see cref="T:System.Windows.CoerceValueCallback" /> 实现引用。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  将元数据属性应用于依赖属性操作后，无法设置该属性。
                </exception>
    </member>
    <member name="P:System.Windows.PropertyMetadata.DefaultValue">
      <summary>
               获取或设置依赖属性的默认值。
            </summary>
      <returns>
              属性的默认值。
               用无参数构造函数创建的 <see cref="T:System.Windows.PropertyMetadata" /> 实例上的默认值将为 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />；请参阅“备注”。
            </returns>
      <exception cref="T:System.ArgumentException">
                  创建之后无法设置为值 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />；请参阅“备注”。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  将元数据属性应用于依赖属性操作后，无法设置该属性。
                </exception>
    </member>
    <member name="P:System.Windows.PropertyMetadata.IsSealed">
      <summary>
              获取一个值，确定元数据是否已应用于以某种方式，从而导致该元数据实例的不可变状态的属性。
            </summary>
      <returns>
              <see langword="true" /> 如果元数据实例是不可变;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Windows.PropertyMetadata.PropertyChangedCallback">
      <summary>
              获取或设置一个引用， <see cref="T:System.Windows.PropertyChangedCallback" /> 此元数据中指定的实现。
            </summary>
      <returns>
              一个 <see cref="T:System.Windows.PropertyChangedCallback" /> 实现引用。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  将元数据属性应用于依赖属性操作后，无法设置该属性。
                </exception>
    </member>
    <member name="P:System.Windows.Rect.Bottom">
      <summary>
              获取该矩形的底部的 y 轴值。
            </summary>
      <returns>
              该矩形的底部 y 轴的值。
               如果该矩形为空，则值是 <see cref="F:System.Double.NegativeInfinity" /> 。
            </returns>
    </member>
    <member name="P:System.Windows.Rect.BottomLeft">
      <summary>
              获取矩形的左下角的位置 
            </summary>
      <returns>
              矩形的左下角的位置。
            </returns>
    </member>
    <member name="P:System.Windows.Rect.BottomRight">
      <summary>
              获取矩形的右下角的位置。
            </summary>
      <returns>
              矩形的右下角的位置。
            </returns>
    </member>
    <member name="P:System.Windows.Rect.Empty">
      <summary>
              获取一个特殊值，表示一个矩形，有没有位置或区域。
            </summary>
      <returns>
              具有空矩形 <see cref="P:System.Windows.Rect.X" /> 和 <see cref="P:System.Windows.Rect.Y" /> 属性值 <see cref="F:System.Double.PositiveInfinity" />, ，并且具有 <see cref="P:System.Windows.Rect.Width" /> 和 <see cref="P:System.Windows.Rect.Height" /> 属性值 <see cref="F:System.Double.NegativeInfinity" />。
            </returns>
    </member>
    <member name="P:System.Windows.Rect.Height">
      <summary>
              获取或设置矩形的高度。
            </summary>
      <returns>
              正数，表示矩形的高度。
               默认值为 0。
            </returns>
      <exception cref="T:System.ArgumentException">
                  <see cref="P:System.Windows.Rect.Height" /> 设置为负值。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.Windows.Rect.Height" /> 在上设置 <see cref="P:System.Windows.Rect.Empty" /> 矩形。
                </exception>
    </member>
    <member name="P:System.Windows.Rect.IsEmpty">
      <summary>
              获取一个值，该值指示是否为该矩形 <see cref="P:System.Windows.Rect.Empty" /> 矩形。
            </summary>
      <returns>
              <see langword="true" /> 如果此矩形 <see cref="P:System.Windows.Rect.Empty" /> 矩形; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Windows.Rect.Left">
      <summary>
              获取矩形的左侧的 x 轴值。
            </summary>
      <returns>
              左侧的矩形的 x 轴值。
            </returns>
    </member>
    <member name="P:System.Windows.Rect.Location">
      <summary>
              获取或设置的矩形的左上角的位置。
            </summary>
      <returns>
              该矩形的左上角的位置。
               默认值为 (0, 0)。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.Windows.Rect.Location" /> 在上设置 <see cref="P:System.Windows.Rect.Empty" /> 矩形。
                </exception>
    </member>
    <member name="P:System.Windows.Rect.Right">
      <summary>
              获取矩形的右端的 x 轴值。
            </summary>
      <returns>
              右侧的矩形的 x 轴值。
            </returns>
    </member>
    <member name="P:System.Windows.Rect.Size">
      <summary>
              获取或设置宽度和矩形的高度。
            </summary>
      <returns>
              一个 <see cref="T:System.Windows.Size" /> 结构，它指定的宽度和矩形的高度。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.Windows.Rect.Size" /> 在上设置 <see cref="P:System.Windows.Rect.Empty" /> 矩形。
                </exception>
    </member>
    <member name="P:System.Windows.Rect.Top">
      <summary>
              获取矩形的顶部的 y 轴位置。
            </summary>
      <returns>
              Y 轴位置的矩形的顶部。
            </returns>
    </member>
    <member name="P:System.Windows.Rect.TopLeft">
      <summary>
              获取矩形的左上角的位置。
            </summary>
      <returns>
              该矩形的左上角的位置。
            </returns>
    </member>
    <member name="P:System.Windows.Rect.TopRight">
      <summary>
              获取矩形的右上角的位置。
            </summary>
      <returns>
              矩形右上角的位置。
            </returns>
    </member>
    <member name="P:System.Windows.Rect.Width">
      <summary>
              获取或设置矩形的宽度。
            </summary>
      <returns>
              正数，表示矩形的宽度。
               默认值为 0。
            </returns>
      <exception cref="T:System.ArgumentException">
                  <see cref="P:System.Windows.Rect.Width" /> 设置为负值。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.Windows.Rect.Width" /> 在上设置 <see cref="P:System.Windows.Rect.Empty" /> 矩形。
                </exception>
    </member>
    <member name="P:System.Windows.Rect.X">
      <summary>
              获取或设置矩形的左侧的 x 轴值。
            </summary>
      <returns>
              左侧的矩形的 x 轴值。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.Windows.Rect.X" /> 在上设置 <see cref="P:System.Windows.Rect.Empty" /> 矩形。
                </exception>
    </member>
    <member name="P:System.Windows.Rect.Y">
      <summary>
              获取或设置矩形的顶边的 y 轴值。
            </summary>
      <returns>
              该矩形的顶边 y 轴的值。
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.Windows.Rect.Y" /> 在上设置 <see cref="P:System.Windows.Rect.Empty" /> 矩形。
                </exception>
    </member>
    <member name="P:System.Windows.Size.Empty">
      <summary>
              获取一个值，表示静态空 <see cref="T:System.Windows.Size" />。
            </summary>
      <returns>
              空实例 <see cref="T:System.Windows.Size" />。
            </returns>
    </member>
    <member name="P:System.Windows.Size.Height">
      <summary>
              获取或设置 <see cref="P:System.Windows.Size.Height" /> 的此实例的 <see cref="T:System.Windows.Size" />。
            </summary>
      <returns>
              <see cref="P:System.Windows.Size.Height" /> 的此实例的 <see cref="T:System.Windows.Size" />。
               默认值为 0。
               值不能为负数。
            </returns>
    </member>
    <member name="P:System.Windows.Size.IsEmpty">
      <summary>
              获取一个值，该值指示是否此实例的 <see cref="T:System.Windows.Size" /> 是 <see cref="P:System.Windows.Size.Empty" />。
            </summary>
      <returns>
              <see langword="true" /> 如果此实例的大小为 <see cref="P:System.Windows.Size.Empty" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Windows.Size.Width">
      <summary>
              获取或设置 <see cref="P:System.Windows.Size.Width" /> 的此实例的 <see cref="T:System.Windows.Size" />。
            </summary>
      <returns>
              <see cref="P:System.Windows.Size.Width" /> 的此实例的 <see cref="T:System.Windows.Size" />。
               默认值为 0。
               值不能为负数。
            </returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.CurrentDispatcher">
      <summary>
              获取 <see cref="T:System.Windows.Threading.Dispatcher" /> 线程当前正在执行，并创建新 <see cref="T:System.Windows.Threading.Dispatcher" /> 如果尚未与该线程关联。
            </summary>
      <returns>
              与当前线程关联的调度程序。
            </returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.HasShutdownFinished">
      <summary>
              确定是否 <see cref="T:System.Windows.Threading.Dispatcher" /> 已经完成关闭。
            </summary>
      <returns>
              <see langword="true" /> 如果调度程序已关闭，则完成否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.HasShutdownStarted">
      <summary>
              确定是否 <see cref="T:System.Windows.Threading.Dispatcher" /> 正在关闭。
            </summary>
      <returns>
              <see langword="true" /> 如果 <see cref="T:System.Windows.Threading.Dispatcher" /> 已开始关闭; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.Hooks">
      <summary>
              获取的挂钩，它们提供了一些额外的事件信息的集合 <see cref="T:System.Windows.Threading.Dispatcher" />。
            </summary>
      <returns>
              与此相关的挂钩 <see cref="T:System.Windows.Threading.Dispatcher" />。
            </returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.Thread">
      <summary>
              获取线程此 <see cref="T:System.Windows.Threading.Dispatcher" /> 与相关联。
            </summary>
      <returns>
              线程。
            </returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherEventArgs.Dispatcher">
      <summary>
              <see cref="T:System.Windows.Threading.Dispatcher" /> 与此事件关联。
            </summary>
      <returns>
              调度程序。
            </returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherFrame.Continue">
      <summary>
              获取或设置一个值，该值指示是否此 <see cref="T:System.Windows.Threading.DispatcherFrame" /> 应继续。
            </summary>
      <returns>
              <see langword="true" /> 如果应继续框架;否则为 <see langword="false" />。
                默认值为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherHookEventArgs.Dispatcher">
      <summary>
              获取 <see cref="T:System.Windows.Threading.Dispatcher" /> 与此事件关联。
            </summary>
      <returns>
              <see cref="T:System.Windows.Threading.Dispatcher" /> 与此事件关联。
            </returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherHookEventArgs.Operation">
      <summary>
              获取 <see cref="T:System.Windows.Threading.DispatcherOperation" /> 与此事件关联。
            </summary>
      <returns>
              操作。
            </returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherObject.Dispatcher">
      <summary>
              获取 <see cref="T:System.Windows.Threading.Dispatcher" /> 这 <see cref="T:System.Windows.Threading.DispatcherObject" /> 与相关联。
            </summary>
      <returns>
              调度程序。
            </returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Dispatcher">
      <summary>
              获取 <see cref="T:System.Windows.Threading.Dispatcher" /> 投递该操作。
            </summary>
      <returns>
              调度程序。
            </returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Priority">
      <summary>
              获取或设置中的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" /> 队列。
            </summary>
      <returns>
              在队列中的委托的优先级。
            </returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Result">
      <summary>
              完成后，请获取操作的结果。
            </summary>
      <returns>
              操作的结果- <see langword="null" /> 如果该操作尚未完成。
            </returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Status">
      <summary>
              获取该操作的当前状态...
            </summary>
      <returns>
              操作的状态。
            </returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Task">
      <summary>
              获取 <see cref="T:System.Threading.Tasks.Task`1" /> ，表示当前操作。
            </summary>
      <returns>
              一个表示当前操作的对象。
            </returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation`1.Result">
      <summary>
              完成后，请获取操作的结果。
            </summary>
      <returns>
              操作的结果。
            </returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation`1.Task">
      <summary>
              获取 <see cref="T:System.Threading.Tasks.Task`1" /> ，表示当前操作。
            </summary>
      <returns>
              一个表示当前操作的对象。
            </returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherPriorityAwaiter.IsCompleted">
      <summary>
              获取一个值，该值指示是否已完成的异步任务。
            </summary>
      <returns>
              在所有情况下均为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.Dispatcher">
      <summary>
              获取与此 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的 <see cref="T:System.Windows.Threading.DispatcherTimer" />。
            </summary>
      <returns>
              调度程序。
            </returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.Interval">
      <summary>
              获取或设置计时器刻度之间的时间段。
            </summary>
      <returns>
              计时周期之间的时间段。
               默认值为“00:00:00”。
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="interval" /> 小于 0 或大于 <see cref="F:System.Int32.MaxValue" /> 毫秒为单位。
                </exception>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.IsEnabled">
      <summary>
              获取或设置一个值，指示计时器是否正在运行。
            </summary>
      <returns>
              <see langword="true" /> 如果计时器处于启用状态;否则为 <see langword="false" />。
                默认值为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.Tag">
      <summary>
              获取或设置用户定义数据对象。
            </summary>
      <returns>
              用户定义的数据。
                默认值为 <see langword="null" />。
            </returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Exception">
      <summary>
              获取执行的代码通过调度程序时引发的异常。
            </summary>
      <returns>
              异常。
            </returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled">
      <summary>
              获取或设置是否已处理的异常事件。
            </summary>
      <returns>
              <see langword="true" /> 如果处理了该异常;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.Exception">
      <summary>
              获取执行的代码通过调度程序时引发的异常。
            </summary>
      <returns>
              异常。
            </returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch">
      <summary>
              获取或设置是否应捕获的异常和调用事件处理程序。
            </summary>
      <returns>
              <see langword="true" /> 如果 <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> 应引发; 否则为 <see langword="false" />。
                默认值为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:System.Windows.Vector.Length">
      <summary>
              获取此向量的长度。
            </summary>
      <returns>
              此向量的长度。
            </returns>
    </member>
    <member name="P:System.Windows.Vector.LengthSquared">
      <summary>
              获取此向量的长度的平方。
            </summary>
      <returns>
              平方 <see cref="P:System.Windows.Vector.Length" /> 此向量。
            </returns>
    </member>
    <member name="P:System.Windows.Vector.X">
      <summary>
              获取或设置 <see cref="P:System.Windows.Vector.X" /> 此向量的组件。
            </summary>
      <returns>
              <see cref="P:System.Windows.Vector.X" /> 此向量的组件。
               默认值为 0。
            </returns>
    </member>
    <member name="P:System.Windows.Vector.Y">
      <summary>
              获取或设置 <see cref="P:System.Windows.Vector.Y" /> 此向量的组件。
            </summary>
      <returns>
              <see cref="P:System.Windows.Vector.Y" /> 此向量的组件。
               默认值为 0。
            </returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.Item(System.Object)">
      <summary>
              获取或设置为指定的源存储的数据。
            </summary>
      <param name="source">
                请求的源的从零开始的索引。
              </param>
      <returns>
              为此源管理器存储数据。
            </returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.Count">
      <summary>
              获取 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中包含的项的数量。
            </summary>
      <returns>
              <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中包含的项的数量。
            </returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.Empty">
      <summary>
              获取一个值，表示用于比较空列表。
            </summary>
      <returns>
              空列表表示形式。
            </returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.IsEmpty">
      <summary>
              获取一个值，声明是否这 <see cref="T:System.Windows.WeakEventManager.ListenerList" />  为空。
            </summary>
      <returns>
              如果列表为空，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.Item(System.Int32)">
      <summary>
              获取或设置中的特定侦听器项 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 。
            </summary>
      <param name="index">
                侦听器在列表中的从零开始的索引。
              </param>
      <returns>
              该索引，则该索引处没有项是否为 null 引用处的项。
            </returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.ReadLock">
      <summary>
              建立的基础数据表上的读锁，并返回 <see cref="T:System.IDisposable" />。
            </summary>
      <returns>
              一个对象，可用来建立数据表成员上的锁，然后相应地释放与 <see langword="using" /> 构造。
            </returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.WriteLock">
      <summary>
              建立的基础数据表上的写入锁，并返回<see cref="T:System.IDisposable" />。
            </summary>
      <returns>
              一个对象，可用来建立数据表成员上的锁，然后相应地释放与 <see langword="using" /> 构造。
            </returns>
    </member>
    <member name="T:System.Collections.Specialized.CollectionChangedEventManager">
      <summary>
              提供了 <see cref="T:System.Windows.WeakEventManager" /> 实现，以便您可以使用"弱事件侦听器"模式将附加的侦听器 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 事件。
            </summary>
    </member>
    <member name="T:System.ComponentModel.CurrentChangedEventManager">
      <summary>
              提供了 <see cref="T:System.Windows.WeakEventManager" /> 实现，以便您可以使用"弱事件侦听器"模式将附加的侦听器 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 事件。
            </summary>
    </member>
    <member name="T:System.ComponentModel.CurrentChangingEventArgs">
      <summary>
              提供有关 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 事件的信息。
            </summary>
    </member>
    <member name="T:System.ComponentModel.CurrentChangingEventHandler">
      <summary>
              表示 <see cref="E:System.Windows.Data.CollectionView.CurrentChanging" /> 事件的处理方法。
            </summary>
      <param name="sender">
                引发事件的对象。
              </param>
      <param name="e">
                有关事件的信息。
              </param>
    </member>
    <member name="T:System.ComponentModel.CurrentChangingEventManager">
      <summary>
              提供了 <see cref="T:System.Windows.WeakEventManager" /> 实现，以便您可以使用"弱事件侦听器"模式将附加的侦听器 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 事件。
            </summary>
    </member>
    <member name="T:System.ComponentModel.DependencyPropertyDescriptor">
      <summary>
              提供用于说明依赖属性的其他属性特征的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的扩展。
            </summary>
    </member>
    <member name="T:System.ComponentModel.ErrorsChangedEventManager">
      <summary>
              提供了 <see cref="T:System.Windows.WeakEventManager" /> 实现，以便您可以使用弱事件侦听器模式要附加的侦听器 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 事件。
            </summary>
    </member>
    <member name="T:System.ComponentModel.GroupDescription">
      <summary>
              为描述如何将集合中的项划分到各个组中的类型提供抽象基类。
            </summary>
    </member>
    <member name="T:System.ComponentModel.ICollectionView">
      <summary>
              使集合具有当前记录管理、自定义排序、筛选和分组功能。
            </summary>
    </member>
    <member name="T:System.ComponentModel.ICollectionViewFactory">
      <summary>
              一个接口，使实现的集合来创建对其数据的视图。
               通常情况下，用户代码不在此接口上调用方法。
            </summary>
    </member>
    <member name="T:System.ComponentModel.ICollectionViewLiveShaping">
      <summary>
              定义使排序、 分组和筛选的属性 <see cref="T:System.Windows.Data.CollectionView" /> 实时。
            </summary>
    </member>
    <member name="T:System.ComponentModel.IEditableCollectionView">
      <summary>
              定义一些方法和属性，<see cref="T:System.Windows.Data.CollectionView" /> 实现它们以向集合提供编辑功能。
            </summary>
    </member>
    <member name="T:System.ComponentModel.IEditableCollectionViewAddNewItem">
      <summary>
              定义方法和属性， <see cref="T:System.Windows.Data.CollectionView" /> 实现以便指定特定类型的添加项。
            </summary>
    </member>
    <member name="T:System.ComponentModel.IItemProperties">
      <summary>
              定义一个属性，它提供了有关对象的属性的信息。
            </summary>
    </member>
    <member name="T:System.ComponentModel.ItemPropertyInfo">
      <summary>
              包含有关属性的信息。
            </summary>
    </member>
    <member name="T:System.ComponentModel.NewItemPlaceholderPosition">
      <summary>
              指定新项的占位符在集合中的显示的位置。
            </summary>
    </member>
    <member name="F:System.ComponentModel.NewItemPlaceholderPosition.None">
      <summary>
              集合不使用新项占位符。
               所添加项的位置取决于基础集合。
                通常情况下，它们将添加到集合的末尾。
            </summary>
    </member>
    <member name="F:System.ComponentModel.NewItemPlaceholderPosition.AtBeginning">
      <summary>
              新项的占位符出现在集合的开头。
                新项位于集合开头的新项占位符之后。
            </summary>
    </member>
    <member name="F:System.ComponentModel.NewItemPlaceholderPosition.AtEnd">
      <summary>
              新项的占位符出现在集合的末尾。
               在集合末尾的新项占位符之前添加新项。
            </summary>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventManager">
      <summary>
              提供了 <see cref="T:System.Windows.WeakEventManager" /> 实现，以便您可以使用"弱事件侦听器"模式将附加的侦听器 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 事件。
            </summary>
    </member>
    <member name="T:System.ComponentModel.PropertyFilterAttribute">
      <summary>
              指定哪些属性应由类型描述符报告，尤其是 <see cref="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)" /> 方法。
            </summary>
    </member>
    <member name="T:System.ComponentModel.PropertyFilterOptions">
      <summary>
              指定哪些属性应由类型描述符报告，尤其是 <see cref="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)" /> 方法。
               此枚举用于指定 <see cref="P:System.ComponentModel.PropertyFilterAttribute.Filter" /> 属性的值。
            </summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.None">
      <summary>
              不返回任何属性
            </summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.Invalid">
      <summary>
              仅返回在对象的给定当前上下文中无效的属性。
               请参阅“备注”。
            </summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.SetValues">
      <summary>
              仅返回当前设置了本地值的属性。
            </summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.UnsetValues">
      <summary>
              仅返回未设置本地值或者未在外部表达式存储（如绑定或延迟资源）中设置属性的属性。
            </summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.Valid">
      <summary>
              返回在当前范围内的对象上有效的任何属性。
               请参阅“备注”。
            </summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.All">
      <summary>
              返回所有属性。
            </summary>
    </member>
    <member name="T:System.ComponentModel.SortDescription">
      <summary>
              定义要用作集合排序条件的方向和属性名。
            </summary>
    </member>
    <member name="T:System.ComponentModel.SortDescriptionCollection">
      <summary>
              表示 <see cref="T:System.ComponentModel.SortDescription" /> 对象集合。
            </summary>
    </member>
    <member name="T:System.Diagnostics.PresentationTraceLevel">
      <summary>
              有关特定对象描述跟踪的详细级别。
            </summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.None">
      <summary>
              跟踪没有可用的附加信息。
            </summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.Low">
      <summary>
              跟踪一些附加信息。
            </summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.Medium">
      <summary>
              跟踪中等数量的附加信息。
            </summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.High">
      <summary>
              跟踪所有附加信息。
            </summary>
    </member>
    <member name="T:System.Diagnostics.PresentationTraceSources">
      <summary>
              提供专门针对 Windows Presentation Foundation (WPF) 应用程序的调试跟踪支持。
            </summary>
    </member>
    <member name="T:System.IO.FileFormatException">
      <summary>
              输入的文件或应符合某种文件格式规范的数据流的格式不正确时，将引发异常。
            </summary>
    </member>
    <member name="T:System.IO.Packaging.CertificateEmbeddingOption">
      <summary>
              指定一个位置，其中存储了签名时所用的 X.509 证书。
            </summary>
    </member>
    <member name="F:System.IO.Packaging.CertificateEmbeddingOption.InCertificatePart">
      <summary>
              该证书嵌入在自己的 <see cref="T:System.IO.Packaging.PackagePart" /> 中。
            </summary>
    </member>
    <member name="F:System.IO.Packaging.CertificateEmbeddingOption.InSignaturePart">
      <summary>
              该证书嵌入到为要添加的签名创建的 <see cref="P:System.IO.Packaging.PackageDigitalSignature.SignaturePart" /> 中。
            </summary>
    </member>
    <member name="F:System.IO.Packaging.CertificateEmbeddingOption.NotEmbedded">
      <summary>
              包中未嵌入证书。
            </summary>
    </member>
    <member name="T:System.IO.Packaging.CompressionOption">
      <summary>
              指定存储中的内容的压缩级别 <see cref="T:System.IO.Packaging.PackagePart" />。
            </summary>
    </member>
    <member name="F:System.IO.Packaging.CompressionOption.NotCompressed">
      <summary>
              压缩处于关闭状态。
            </summary>
    </member>
    <member name="F:System.IO.Packaging.CompressionOption.Normal">
      <summary>
              压缩进行了优化大小和性能之间取得平衡。
            </summary>
    </member>
    <member name="F:System.IO.Packaging.CompressionOption.Maximum">
      <summary>
              压缩大小进行了优化。
            </summary>
    </member>
    <member name="F:System.IO.Packaging.CompressionOption.Fast">
      <summary>
              压缩进行了优化性能。
            </summary>
    </member>
    <member name="F:System.IO.Packaging.CompressionOption.SuperFast">
      <summary>
              为了获得高性能优化了压缩。
            </summary>
    </member>
    <member name="T:System.IO.Packaging.EncryptedPackageEnvelope">
      <summary>
              表示包含已加密的数据包的 OLE 复合文件。
            </summary>
    </member>
    <member name="T:System.IO.Packaging.EncryptionOption">
      <summary>
              指定加密选项中的部件 <see cref="T:System.IO.Packaging.Package" />。
            </summary>
    </member>
    <member name="F:System.IO.Packaging.EncryptionOption.None">
      <summary>
              不是加密。
            </summary>
    </member>
    <member name="F:System.IO.Packaging.EncryptionOption.RightsManagement">
      <summary>
              通过权限管理支持的加密。
            </summary>
    </member>
    <member name="T:System.IO.Packaging.InvalidSignatureEventHandler">
      <summary>
              表示用于处理的方法 <see cref="E:System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent" /> 即时引发 <see cref="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)" /> 检测到无效的签名。
            </summary>
      <param name="sender">
                无效 <see cref="T:System.IO.Packaging.PackageDigitalSignature" /> 事件源。
              </param>
      <param name="e">
                事件数据。
              </param>
    </member>
    <member name="T:System.IO.Packaging.Package">
      <summary>
              表示一个可以存储多个数据对象的容器。
            </summary>
    </member>
    <member name="T:System.IO.Packaging.PackageDigitalSignature">
      <summary>
              表示应用于一组包部件和关系的数字签名。
            </summary>
    </member>
    <member name="T:System.IO.Packaging.PackageDigitalSignatureManager">
      <summary>
              提供实用工具类，用于创建和验证中的数字签名 <see cref="T:System.IO.Packaging.Package" />。
            </summary>
    </member>
    <member name="T:System.IO.Packaging.PackagePart">
      <summary>
              提供一个基类，部件存储在 <see cref="T:System.IO.Packaging.Package" />。
                此类为抽象类。
            </summary>
    </member>
    <member name="T:System.IO.Packaging.PackagePartCollection">
      <summary>
              表示 <see cref="T:System.IO.Packaging.PackagePart" /> 对象集合。
            </summary>
    </member>
    <member name="T:System.IO.Packaging.PackageProperties">
      <summary>
              表示的核心属性 <see cref="T:System.IO.Packaging.Package" />。
            </summary>
    </member>
    <member name="T:System.IO.Packaging.PackageRelationship">
      <summary>
              表示一个源之间的关联 <see cref="T:System.IO.Packaging.Package" /> 或 <see cref="T:System.IO.Packaging.PackagePart" />, ，和一个目标对象，它可以是 <see cref="T:System.IO.Packaging.PackagePart" /> 或外部资源。
            </summary>
    </member>
    <member name="T:System.IO.Packaging.PackageRelationshipCollection">
      <summary>
              表示一套 <see cref="T:System.IO.Packaging.PackageRelationship" /> 元素所拥有的给定 <see cref="T:System.IO.Packaging.PackagePart" /> 或 <see cref="T:System.IO.Packaging.Package" />。
            </summary>
    </member>
    <member name="T:System.IO.Packaging.PackageRelationshipSelector">
      <summary>
              定义 <see cref="T:System.IO.Packaging.PackageRelationship" /> 条件来选择一部分级别或数据包级关系。
            </summary>
    </member>
    <member name="T:System.IO.Packaging.PackageRelationshipSelectorType">
      <summary>
              指定用于匹配，并返回的选择条件类型 <see cref="T:System.IO.Packaging.PackageRelationship" /> 通过选择 <see cref="T:System.IO.Packaging.PackageRelationshipSelector" />。
            </summary>
    </member>
    <member name="F:System.IO.Packaging.PackageRelationshipSelectorType.Id">
      <summary>
              <see cref="T:System.IO.Packaging.PackageRelationship" /> 选择是通过 <see cref="P:System.IO.Packaging.PackageRelationship.Id" />。
            </summary>
    </member>
    <member name="F:System.IO.Packaging.PackageRelationshipSelectorType.Type">
      <summary>
              <see cref="T:System.IO.Packaging.PackageRelationship" /> 选择是通过 <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />。
            </summary>
    </member>
    <member name="T:System.IO.Packaging.PackUriHelper">
      <summary>
              提供实用工具方法来撰写和分析 pack URI 对象。
            </summary>
    </member>
    <member name="T:System.IO.Packaging.RightsManagementInformation">
      <summary>
              表示存储在 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> 中的数字版权管理 (DRM) 信息。
            </summary>
    </member>
    <member name="T:System.IO.Packaging.SignatureVerificationEventArgs">
      <summary>
               指定事件参数提供给 <see cref="T:System.IO.Packaging.InvalidSignatureEventHandler" />。
            </summary>
    </member>
    <member name="T:System.IO.Packaging.StorageInfo">
      <summary>
              提供访问和操作数据存储区中的信息 <see cref="T:System.IO.Packaging.Package" />。
            </summary>
    </member>
    <member name="T:System.IO.Packaging.StreamInfo">
      <summary>
              提供访问和操作中的 I/O 流信息 <see cref="T:System.IO.Packaging.Package" />。
            </summary>
    </member>
    <member name="T:System.IO.Packaging.TargetMode">
      <summary>
              指定是否目标的 <see cref="T:System.IO.Packaging.PackageRelationship" /> 是内部或外部 <see cref="T:System.IO.Packaging.Package" />。
            </summary>
    </member>
    <member name="F:System.IO.Packaging.TargetMode.Internal">
      <summary>
              关系引用在包内的部件。
            </summary>
    </member>
    <member name="F:System.IO.Packaging.TargetMode.External">
      <summary>
              关系引用是对该包的外部的资源。
            </summary>
    </member>
    <member name="T:System.IO.Packaging.VerifyResult">
      <summary>
              指定证书或签名验证的结果。
            </summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.Success">
      <summary>
              验证成功。
            </summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.InvalidSignature">
      <summary>
              该签名无效。
            </summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.CertificateRequired">
      <summary>
              X.509 证书不可用于验证签名。
            </summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.InvalidCertificate">
      <summary>
              X.509 证书无效。
            </summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.ReferenceNotFound">
      <summary>
              找不到签名的引用关系。
            </summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.NotSigned">
      <summary>
              指定的包或部件不具有签名。
            </summary>
    </member>
    <member name="T:System.IO.Packaging.ZipPackage">
      <summary>
              实现抽象的派生的子类 <see cref="T:System.IO.Packaging.Package" /> 基类 — <see cref="T:System.IO.Packaging.ZipPackage" /> 类用作容器存储使用 ZIP 存档。
               此类不能被继承。
            </summary>
    </member>
    <member name="T:System.IO.Packaging.ZipPackagePart">
      <summary>
              表示存储在一部分 <see cref="T:System.IO.Packaging.ZipPackage" />。
            </summary>
    </member>
    <member name="T:System.Security.Permissions.MediaPermission">
      <summary>
              <see cref="T:System.Security.Permissions.MediaPermission" /> 描述一组安全权限，该权限用于控制音频、图像和视频媒体在部分信任的 Windows Presentation Foundation (WPF) 应用程序中运行的功能。
            </summary>
    </member>
    <member name="T:System.Security.Permissions.MediaPermissionAttribute">
      <summary>
              允许的操作安全 <see cref="T:System.Security.Permissions.MediaPermission" /> 要应用于代码中使用声明性安全。
            </summary>
    </member>
    <member name="T:System.Security.Permissions.MediaPermissionAudio">
      <summary>
              指定音频的权限级别。
            </summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionAudio.NoAudio">
      <summary>
              拒绝所有音频播放的权限。
            </summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionAudio.SiteOfOriginAudio">
      <summary>
              只允许音频播放的文件位于应用程序的源站点的权限。
            </summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionAudio.SafeAudio">
      <summary>
              允许对安全的权限有限音频播放，其中包括拒绝对该图像文件流访问。
            </summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionAudio.AllAudio">
      <summary>
              允许音频播放不受限制的权限。
            </summary>
    </member>
    <member name="T:System.Security.Permissions.MediaPermissionImage">
      <summary>
              指定图像的权限级别。
            </summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionImage.NoImage">
      <summary>
              拒绝要显示的所有映像的权限。
            </summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionImage.SiteOfOriginImage">
      <summary>
              只允许显示的图像位于应用程序的源站点的权限。
            </summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionImage.SafeImage">
      <summary>
              允许对安全的权限有限的图像显示，其中包括拒绝对该图像文件流访问。
            </summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionImage.AllImage">
      <summary>
              允许不受限制的映像显示的权限。
            </summary>
    </member>
    <member name="T:System.Security.Permissions.MediaPermissionVideo">
      <summary>
              指定视频的权限级别。
            </summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionVideo.NoVideo">
      <summary>
              拒绝所有视频播放的权限。
            </summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionVideo.SiteOfOriginVideo">
      <summary>
              只允许视频播放的文件位于应用程序的源站点的权限。
            </summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionVideo.SafeVideo">
      <summary>
              允许对安全的权限有限视频播放，其中包括拒绝对该图像文件流访问。
            </summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionVideo.AllVideo">
      <summary>
              允许视频播放不受限制的权限。
            </summary>
    </member>
    <member name="T:System.Security.Permissions.WebBrowserPermission">
      <summary>
              <see cref="T:System.Security.Permissions.WebBrowserPermission" /> 对象控制创建 WebBrowser 控件的能力。
            </summary>
    </member>
    <member name="T:System.Security.Permissions.WebBrowserPermissionAttribute">
      <summary>
              允许的操作安全 <see cref="T:System.Security.Permissions.WebBrowserPermission" /> 要应用于代码中使用声明性安全。
            </summary>
    </member>
    <member name="T:System.Security.Permissions.WebBrowserPermissionLevel">
      <summary>
              指定 Web 浏览器的权限级别。
            </summary>
    </member>
    <member name="F:System.Security.Permissions.WebBrowserPermissionLevel.None">
      <summary>
              不能帧导航至 HTML Web 浏览器。
            </summary>
    </member>
    <member name="F:System.Security.Permissions.WebBrowserPermissionLevel.Safe">
      <summary>
              Web 浏览器可以安全地定位帧于 HTML，但有几个限制条件。
            </summary>
    </member>
    <member name="F:System.Security.Permissions.WebBrowserPermissionLevel.Unrestricted">
      <summary>
              Web 浏览器，可以通过浏览不受限制。
            </summary>
    </member>
    <member name="T:System.Security.RightsManagement.AuthenticationType">
      <summary>
              指定权限管理身份验证的方法。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.Windows">
      <summary>
              公司域环境中的 Windows 身份验证。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.Passport">
      <summary>
              
                Windows Live ID 身份验证。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.WindowsPassport">
      <summary>
              
                Windows 身份验证或 Windows Live ID 身份验证。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.Internal">
      <summary>
              对所有请求用户执行隐式身份验证。
            </summary>
    </member>
    <member name="T:System.Security.RightsManagement.ContentGrant">
      <summary>
              表示向用户授予的一个权限，该权限使用户可访问权限管理文档中的信息。
            </summary>
    </member>
    <member name="T:System.Security.RightsManagement.ContentRight">
      <summary>
              指定可授予用户访问权限管理文档中内容的权限。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.View">
      <summary>
              用户可以查看受保护的内容。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Edit">
      <summary>
              用户可以编辑和加密受保护的内容。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Print">
      <summary>
              用户可以打印受保护的内容。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Extract">
      <summary>
              用户可以解压缩（复制和粘贴）受保护的内容。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.ObjectModel">
      <summary>
              用户可以控制对受保护内容的编程访问。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Owner">
      <summary>
              用户是内容所有者。
                内容所有者可以对受保护的内容进行编辑和加密，并可以对已签名的 <see cref="T:System.Security.RightsManagement.PublishLicense" /> 进行解密。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.ViewRightsData">
      <summary>
              用户可以对已签名的 <see cref="T:System.Security.RightsManagement.PublishLicense" /> 中指定的权限进行解密并查看这些权限。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Forward">
      <summary>
              用户可以将受保护的内容转发给其他用户。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Reply">
      <summary>
              用户可以答复受保护内容的发送方。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.ReplyAll">
      <summary>
              用户可以“全部答复”受保护内容的接收方。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Sign">
      <summary>
              用户可以对受保护的内容进行数字签名。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.DocumentEdit">
      <summary>
              用户可以编辑包含受保护内容的文档。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Export">
      <summary>
              用户可以导出受保护的内容。
            </summary>
    </member>
    <member name="T:System.Security.RightsManagement.ContentUser">
      <summary>
              表示要为其授予权限管理内容访问权限的用户或用户组。
            </summary>
    </member>
    <member name="T:System.Security.RightsManagement.CryptoProvider">
      <summary>
              为加密和解密受保护的内容提供数字权限管理服务。
            </summary>
    </member>
    <member name="T:System.Security.RightsManagement.LocalizedNameDescriptionPair">
      <summary>
              表示“Name”和“Description”字符串的不可变（只读）对。
            </summary>
    </member>
    <member name="T:System.Security.RightsManagement.PublishLicense">
      <summary>
              表示已签名的权限管理发布许可证。
            </summary>
    </member>
    <member name="T:System.Security.RightsManagement.RightsManagementException">
      <summary>
              当权限管理操作无法成功完成时，则表示出现错误。
            </summary>
    </member>
    <member name="T:System.Security.RightsManagement.RightsManagementFailureCode">
      <summary>
              指定执行权限管理操作时可能出现的错误条件。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.Success">
      <summary>
              已成功完成操作。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLicense">
      <summary>
              其中一个证书的许可证结构无效。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InfoNotInLicense">
      <summary>
              创建绑定许可证时，指定发行许可证，而不是最终用户许可证。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLicenseSignature">
      <summary>
              无法验证权限管理签名的数字证书。
               （已签名证书可能已遭到篡改。）
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EncryptionNotPermitted">
      <summary>
              不允许加密。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RightNotGranted">
      <summary>
              当前用户没有权限访问受保护的内容。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidVersion">
      <summary>
              权限管理版本不正确。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidEncodingType">
      <summary>
              指定的编码类型无效。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidNumericalValue">
      <summary>
              指定的数值无效。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidAlgorithmType">
      <summary>
              指定的算法类型无效。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EnvironmentNotLoaded">
      <summary>
              无法加载 <see cref="T:System.Security.RightsManagement.SecureEnvironment" />。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EnvironmentCannotLoad">
      <summary>
              无法加载 <see cref="T:System.Security.RightsManagement.SecureEnvironment" />。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.TooManyLoadedEnvironments">
      <summary>
              已创建太多 <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> 实例。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.IncompatibleObjects">
      <summary>
              传递的对象类型与此操作不兼容。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LibraryFail">
      <summary>
              库操作失败。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EnablingPrincipalFailure">
      <summary>
              无法启用指定主体
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InfoNotPresent">
      <summary>
              丢失了某些信息。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BadGetInfoQuery">
      <summary>
              传递了一个无效常量。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.KeyTypeUnsupported">
      <summary>
              在键/值对中指定的键类型不受支持。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.CryptoOperationUnsupported">
      <summary>
              请求的加密操作不受支持。
               例如，传递 RMS 加密对象用于解密。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ClockRollbackDetected">
      <summary>
              检测到时钟回滚。
               无法访问受保护的内容。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.QueryReportsNoResults">
      <summary>
              请求的属性不存在实例。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.UnexpectedException">
      <summary>
              发生了未指定的错误。
                在调试模式下运行应用程序时也会引发。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindValidityTimeViolated">
      <summary>
              受保护内容的定义时间段已到期；不再允许访问。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BrokenCertChain">
      <summary>
              权限管理的证书链已中断。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindPolicyViolation">
      <summary>
              当前用户没有权限访问受保护的内容。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ManifestPolicyViolation">
      <summary>
              操作违反权限管理清单策略。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedLicense">
      <summary>
              当前用户没有权限访问受保护的内容。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedIssuer">
      <summary>
              当前用户没有权限访问受保护的内容。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedPrincipal">
      <summary>
              当前用户没有权限访问受保护的内容。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedResource">
      <summary>
              当前用户没有权限访问受保护的内容。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedModule">
      <summary>
              未正确配置权限管理服务。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindContentNotInEndUseLicense">
      <summary>
              指定的资源不包含在许可证的任何工作节点中。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindAccessPrincipalNotEnabling">
      <summary>
              访问条件与递交给该绑定的启用主体不匹配。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindAccessUnsatisfied">
      <summary>
              当前用户不满足在最终用户许可证 (EUL) 中所定义的条件。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindIndicatedPrincipalMissing">
      <summary>
              启用主体与最终用户许可证 (EUL) 的颁布主体不匹配。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindMachineNotFoundInGroupIdentity">
      <summary>
              当前计算机未在权限管理组标识中定义。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LibraryUnsupportedPlugIn">
      <summary>
              不支持指定的库插件。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevocationListStale">
      <summary>
              该许可证要求必须获取新的吊销列表。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindNoApplicableRevocationList">
      <summary>
              当前用户没有权限访问受保护的内容。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidHandle">
      <summary>
              环境或启用主体句柄无效。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindIntervalTimeViolated">
      <summary>
              受保护内容的定义时间段已到期；不再允许访问。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindNoSatisfiedRightsGroup">
      <summary>
              指定的权限组不包含在最终用户许可证 (EUL) 中。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindSpecifiedWorkMissing">
      <summary>
              最终用户许可证 (EUL) 不包含工作节点。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoMoreData">
      <summary>
              指定索引处不存在许可证或证书。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LicenseAcquisitionFailed">
      <summary>
              无法从权限管理服务器获取最终用户许可证 (EUL)。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.IdMismatch">
      <summary>
              许可证中的内容 ID 与许可证存储会话的内容 ID 不匹配
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.TooManyCertificates">
      <summary>
              证书数量已超过允许的最大数量。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoDistributionPointUrlFound">
      <summary>
              受保护的内容已损坏。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.AlreadyInProgress">
      <summary>
              请求的操作已在进行中。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.GroupIdentityNotSet">
      <summary>
              未向客户端会话指定用户名
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RecordNotFound">
      <summary>
              未找到指定许可证。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoConnect">
      <summary>
              权限管理无法连接到为许可证服务器指定的 URI。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoLicense">
      <summary>
              所需许可证不可用。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NeedsMachineActivation">
      <summary>
              必须先激活计算机，才能激活用户。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NeedsGroupIdentityActivation">
      <summary>
              未激活用户，或者未提交任何权限帐户证书 (RAC)，并且未在许可证存储中找到匹配此会话所关联许可证的证书。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ActivationFailed">
      <summary>
              许可证激活失败；未正确配置权限管理服务。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.Aborted">
      <summary>
              已取消异步操作，或出现不可恢复的错误。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.OutOfQuota">
      <summary>
              已达到最终用户许可证 (EUL) 的许可证服务器的最大配额。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.AuthenticationFailed">
      <summary>
              Internet 请求返回可能的身份验证错误（HTTP 错误 401）。
               或者，当前用户在无提示用户激活尝试中没有有效的域凭据。
               或者，无提示用户激活中的认证服务器不在本地 Intranet 或受信任的站点区域中。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServerError">
      <summary>
              未正确配置权限管理服务。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InstallationFailed">
      <summary>
              安装操作失败。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.HidCorrupted">
      <summary>
              在计算机激活尝试中使用的硬件 ID (HID) 的格式不正确。
               未正确配置权限管理服务。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidServerResponse">
      <summary>
              未正确配置权限管理服务。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServiceNotFound">
      <summary>
              未正确配置权限管理服务。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.UseDefault">
      <summary>
              如果为计算机激活或权限帐户证书发出请求，接收 <see cref="F:System.Security.RightsManagement.RightsManagementFailureCode.UseDefault" /> 则表示该应用程序应将 <see langword="null" /> 传递到 ActServInfo 参数
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServerNotFound">
      <summary>
              未正确配置权限管理服务。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidEmail">
      <summary>
              RMS 服务器的电子邮件地址验证失败。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ValidityTimeViolation">
      <summary>
              受保护内容的定义时间段已到期；不再允许访问。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.OutdatedModule">
      <summary>
              未正确配置权限管理服务。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServiceMoved">
      <summary>
              未正确配置权限管理服务。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServiceGone">
      <summary>
              未正确配置权限管理服务。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.AdEntryNotFound">
      <summary>
              未在 Windows 身份验证下证书的 Active Directory (AD) 中找到当前用户。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NotAChain">
      <summary>
              权限管理的内容已损坏。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RequestDenied">
      <summary>
              权限管理服务器不允许当前用户的临时证书。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NotSet">
      <summary>
              请求删除的项目不存在。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.MetadataNotSet">
      <summary>
              无法设置指定元数据。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RevocationInfoNotSet">
      <summary>
              尚未设置证书或许可证吊销信息。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidTimeInfo">
      <summary>
              指定的时间信息无效。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RightNotSet">
      <summary>
              使用权限管理发布内容时，未指定请求的权限。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LicenseBindingToWindowsIdentityFailed">
      <summary>
              当前用户凭据对于获取许可证无效。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidIssuanceLicenseTemplate">
      <summary>
              权限管理服务模板包含一个或多个错误。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidKeyLength">
      <summary>
              在键/值对中指定的键长度无效。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ExpiredOfficialIssuanceLicenseTemplate">
      <summary>
              在发行许可证模板中定义的授权时间段已到期；不再允许访问。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidClientLicensorCertificate">
      <summary>
              未正确配置权限管理服务。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.HidInvalid">
      <summary>
              在计算机激活尝试中使用的硬件 ID (HID) 无效。
               未正确配置权限管理服务。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EmailNotVerified">
      <summary>
              无法验证用户的电子邮件地址。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.DebuggerDetected">
      <summary>
              由于检测到调试器，因此无法使用受限权限打开或发布内容。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLockboxType">
      <summary>
              未正确配置权限管理服务。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLockboxPath">
      <summary>
              未正确配置权限管理服务。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidRegistryPath">
      <summary>
              指定的注册表路径无效。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoAesCryptoProvider">
      <summary>
              未正确配置权限管理服务。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.GlobalOptionAlreadySet">
      <summary>
              已设置指定的选项。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.OwnerLicenseNotFound">
      <summary>
              该文档不包含所有者许可证。
            </summary>
    </member>
    <member name="T:System.Security.RightsManagement.SecureEnvironment">
      <summary>
              表示一个用于用户激活、许可证绑定和其他权限管理操作的安全客户端会话。
            </summary>
    </member>
    <member name="T:System.Security.RightsManagement.UnsignedPublishLicense">
      <summary>
              表示一个未签名的权限管理 <see cref="T:System.Security.RightsManagement.PublishLicense" /> 或未签名的 <see cref="T:System.Security.RightsManagement.PublishLicense" /> 模板。
            </summary>
    </member>
    <member name="T:System.Security.RightsManagement.UseLicense">
      <summary>
              表示使用户可以访问受保护的权限管理内容的许可证。
            </summary>
    </member>
    <member name="T:System.Security.RightsManagement.UserActivationMode">
      <summary>
              指定的用户权限帐户证书，以请求激活权限管理的类型。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.UserActivationMode.Permanent">
      <summary>
              永久的权限帐户证书。
            </summary>
    </member>
    <member name="F:System.Security.RightsManagement.UserActivationMode.Temporary">
      <summary>
              临时权限帐户证书。
            </summary>
    </member>
    <member name="T:System.Windows.AttachedPropertyBrowsableAttribute">
      <summary>
              为报告附加属性使用范围的 .NET Framework 特性 提供基类。
            </summary>
    </member>
    <member name="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute">
      <summary>
              指定附加属性只能供从指定类型派生的元素浏览。
            </summary>
    </member>
    <member name="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute">
      <summary>
              指定附加的属性仅在一个元素上可浏览，该元素还具有另一个特定 .NET Framework 特性 应用到其类定义。
            </summary>
    </member>
    <member name="T:System.Windows.BaseCompatibilityPreferences">
      <summary>
              包含指定应用程序相对于 WindowsBase 程序集中的新的 WPF 功能的行为方式的属性。
            </summary>
    </member>
    <member name="T:System.Windows.CoerceValueCallback">
      <summary>
              每当重新计算的依赖项属性值，或强制专门请求时调用的方法提供一个模板。
            </summary>
      <param name="d">
                属性存在于该对象。
                 当调用该回调时，属性系统将传递此值。
              </param>
      <param name="baseValue">
                该属性，在任何强制尝试之前新值。
              </param>
      <returns>
              强制转换后的值 （采用适当的类型）。
            </returns>
    </member>
    <member name="T:System.Windows.Converters.Int32RectValueSerializer">
      <summary>
              实例之间进行转换 <see cref="T:System.String" /> 的实例与 <see cref="T:System.Windows.Int32Rect" />。
            </summary>
    </member>
    <member name="T:System.Windows.Converters.PointValueSerializer">
      <summary>
              实例之间进行转换 <see cref="T:System.String" /> 的实例与 <see cref="T:System.Windows.Point" />。
            </summary>
    </member>
    <member name="T:System.Windows.Converters.RectValueSerializer">
      <summary>
              实例之间进行转换 <see cref="T:System.String" /> 的实例与 <see cref="T:System.Windows.Rect" />。
            </summary>
    </member>
    <member name="T:System.Windows.Converters.SizeValueSerializer">
      <summary>
              实例之间进行转换 <see cref="T:System.String" /> 的实例与 <see cref="T:System.Windows.Size" />。
            </summary>
    </member>
    <member name="T:System.Windows.Converters.VectorValueSerializer">
      <summary>
              实例之间进行转换 <see cref="T:System.String" /> 的实例与 <see cref="T:System.Windows.Vector" />。
            </summary>
    </member>
    <member name="T:System.Windows.Data.DataSourceProvider">
      <summary>
              <see cref="T:System.Windows.Data.DataSourceProvider" /> 对象的公共基类和协定，它们是执行某些查询以生成可以用作绑定源对象的单个对象或对象列表的工厂。
            </summary>
    </member>
    <member name="T:System.Windows.DependencyObject">
      <summary>
              表示参与依赖属性系统的对象。
            </summary>
    </member>
    <member name="T:System.Windows.DependencyObjectType">
      <summary>
              实现所有的基础类型缓存 <see cref="T:System.Windows.DependencyObject" /> 派生类型。
            </summary>
    </member>
    <member name="T:System.Windows.DependencyProperty">
      <summary>
              表示可通过诸如样式、数据绑定、动画和继承等方法设置的属性。
            </summary>
    </member>
    <member name="T:System.Windows.DependencyPropertyChangedEventArgs">
      <summary>
              提供各种属性更改事件的数据。
               通常这些事件对只读依赖属性的值中的有效值更改进行报告。
               另一个用法是用作 <see cref="T:System.Windows.PropertyChangedCallback" /> 实现的一部分。
            </summary>
    </member>
    <member name="T:System.Windows.DependencyPropertyChangedEventHandler">
      <summary>
              表示将处理某些事件的方法，这些事件在特定 <see cref="T:System.Windows.DependencyObject" /> 实现上的 <see cref="T:System.Windows.DependencyProperty" /> 发生更改时引发。
            </summary>
      <param name="sender">
                事件源。
              </param>
      <param name="e">
                事件数据。
              </param>
    </member>
    <member name="T:System.Windows.DependencyPropertyKey">
      <summary>
              提供有限的写访问权限的只读依赖项属性的依赖项属性标识符。
            </summary>
    </member>
    <member name="T:System.Windows.Expression">
      <summary>
              此类型支持 Windows Presentation Foundation (WPF) 基础结构，但不可直接在代码中使用。
            </summary>
    </member>
    <member name="T:System.Windows.ExpressionConverter">
      <summary>
              实例之间进行转换 <see cref="T:System.Windows.Expression" />  与其他类型。
            </summary>
    </member>
    <member name="T:System.Windows.Freezable">
      <summary>
              定义具有可修改状态和只读（冻结）状态的对象。
               从 <see cref="T:System.Windows.Freezable" /> 派生的类提供详细更改通知，可以设置为不可变，并且可以克隆自身。
            </summary>
    </member>
    <member name="T:System.Windows.Input.FocusNavigationDirection">
      <summary>
              指定在方向 用户界面 (UI) 在其中尝试所需的焦点更改请求。
               方向基于或者 tab 键顺序根据布局中的相对方向。
            </summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Next">
      <summary>
              将焦点移至 tab 键顺序中下一步焦点的元素。
               不支持 <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />。
            </summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Previous">
      <summary>
              将焦点移至 tab 键顺序以前焦点的元素。
               不支持 <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />。
            </summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.First">
      <summary>
              将焦点移至 tab 键顺序中第一个焦点的元素。
               不支持 <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />。
            </summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Last">
      <summary>
              将焦点移至 tab 键顺序中最后一个焦点的元素。
               不支持 <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />。
            </summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Left">
      <summary>
              将焦点移至当前具有焦点的元素的左侧的另一个焦点的元素。
            </summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Right">
      <summary>
              将焦点移至当前具有焦点的元素右侧的另一个焦点的元素。
            </summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Up">
      <summary>
              将焦点移到另一个可获得焦点元素向上从当前具有焦点的元素。
            </summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Down">
      <summary>
              将焦点移到另一个设定焦点的元素可以向下从当前具有焦点的元素。
            </summary>
    </member>
    <member name="T:System.Windows.Input.Key">
      <summary>
              指定键盘上可能的键值。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.None">
      <summary>
              不按任何键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Cancel">
      <summary>
              Cancel 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Back">
      <summary>
              Backspace 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Tab">
      <summary>
              Tab 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.LineFeed">
      <summary>
              Linefeed 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Clear">
      <summary>
              Clear 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Return">
      <summary>
              Return 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Enter">
      <summary>
              Enter 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Pause">
      <summary>
              Pause 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Capital">
      <summary>
              Caps Lock 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.CapsLock">
      <summary>
              Caps Lock 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.KanaMode">
      <summary>
              IME Kana 模式键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.HangulMode">
      <summary>
              IME Hangul 模式键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.JunjaMode">
      <summary>
              IME Junja 模式键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.FinalMode">
      <summary>
              IME Final 模式键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.HanjaMode">
      <summary>
              IME Hanja 模式键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.KanjiMode">
      <summary>
              IME Kanji 模式键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Escape">
      <summary>
              ESC 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeConvert">
      <summary>
              IME Convert 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeNonConvert">
      <summary>
              IME NonConvert 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeAccept">
      <summary>
              IME Accept 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeModeChange">
      <summary>
              IME 模式更改请求。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Space">
      <summary>
              Spacebar 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Prior">
      <summary>
              Page Up 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.PageUp">
      <summary>
              Page Up 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Next">
      <summary>
              Page Down 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.PageDown">
      <summary>
              Page Down 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.End">
      <summary>
              End 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Home">
      <summary>
              Home 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Left">
      <summary>
              Left Arrow 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Up">
      <summary>
              Up Arrow 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Right">
      <summary>
              Right Arrow 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Down">
      <summary>
              Down Arrow 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Select">
      <summary>
              Select 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Print">
      <summary>
              Print 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Execute">
      <summary>
              Execute 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Snapshot">
      <summary>
              Print Screen 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.PrintScreen">
      <summary>
              Print Screen 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Insert">
      <summary>
              Insert 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Delete">
      <summary>
               Delete 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Help">
      <summary>
              Help 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D0">
      <summary>
              0 （零）键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D1">
      <summary>
              1 （一）键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D2">
      <summary>
              2 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D3">
      <summary>
              3 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D4">
      <summary>
              4 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D5">
      <summary>
              5 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D6">
      <summary>
              6 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D7">
      <summary>
              7 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D8">
      <summary>
              8 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D9">
      <summary>
              9 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.A">
      <summary>
              A 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.B">
      <summary>
              B 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.C">
      <summary>
              C 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.D">
      <summary>
              D 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.E">
      <summary>
              E 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F">
      <summary>
              F 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.G">
      <summary>
              G 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.H">
      <summary>
              H 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.I">
      <summary>
              I 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.J">
      <summary>
              J 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.K">
      <summary>
              K 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.L">
      <summary>
              L 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.M">
      <summary>
              M 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.N">
      <summary>
              N 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.O">
      <summary>
              O 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.P">
      <summary>
              P 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Q">
      <summary>
              Q 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.R">
      <summary>
              R 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.S">
      <summary>
              S 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.T">
      <summary>
              T 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.U">
      <summary>
              U 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.V">
      <summary>
              V 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.W">
      <summary>
              W 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.X">
      <summary>
              X 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Y">
      <summary>
              Y 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Z">
      <summary>
              Z 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.LWin">
      <summary>
              左 Windows 徽标键 (Microsoft Natural Keyboard)。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.RWin">
      <summary>
              右 Windows 徽标键 (Microsoft Natural Keyboard)。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Apps">
      <summary>
              应用程序键 (Microsoft Natural Keyboard)。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Sleep">
      <summary>
              计算机休眠键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad0">
      <summary>
              数字键盘上的 0 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad1">
      <summary>
              数字键盘上的 1 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad2">
      <summary>
              数字键盘上的 2 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad3">
      <summary>
              数字键盘上的 3 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad4">
      <summary>
              数字键盘上的 4 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad5">
      <summary>
              数字键盘上的 5 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad6">
      <summary>
              数字键盘上的 6 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad7">
      <summary>
              数字键盘上的 7 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad8">
      <summary>
              数字键盘上的 8 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad9">
      <summary>
              数字键盘上的 9 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Multiply">
      <summary>
              乘号键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Add">
      <summary>
              加号键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Separator">
      <summary>
              分隔符键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Subtract">
      <summary>
              减号键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Decimal">
      <summary>
              句点键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Divide">
      <summary>
              除号键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F1">
      <summary>
              F1 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F2">
      <summary>
              F2 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F3">
      <summary>
              F3 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F4">
      <summary>
              F4 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F5">
      <summary>
              F5 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F6">
      <summary>
              F6 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F7">
      <summary>
              F7 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F8">
      <summary>
              F8 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F9">
      <summary>
              F9 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F10">
      <summary>
              F10 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F11">
      <summary>
              F11 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F12">
      <summary>
              F12 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F13">
      <summary>
              F13 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F14">
      <summary>
              F14 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F15">
      <summary>
              F15 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F16">
      <summary>
              F16 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F17">
      <summary>
              F17 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F18">
      <summary>
              F18 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F19">
      <summary>
              F19 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F20">
      <summary>
              F20 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F21">
      <summary>
              F21 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F22">
      <summary>
              F22 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F23">
      <summary>
              F23 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.F24">
      <summary>
              F24 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumLock">
      <summary>
              Num Lock 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Scroll">
      <summary>
              Scroll Lock 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.LeftShift">
      <summary>
              左 Shift 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.RightShift">
      <summary>
              右 Shift 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.LeftCtrl">
      <summary>
              左 CTRL 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.RightCtrl">
      <summary>
              右 CTRL 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.LeftAlt">
      <summary>
              左 ALT 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.RightAlt">
      <summary>
              右 ALT 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserBack">
      <summary>
              浏览器后退键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserForward">
      <summary>
              浏览器前进键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserRefresh">
      <summary>
              浏览器刷新键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserStop">
      <summary>
              浏览器停止键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserSearch">
      <summary>
              浏览器搜索键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserFavorites">
      <summary>
              浏览器收藏键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserHome">
      <summary>
              浏览器主页键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.VolumeMute">
      <summary>
              静音键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.VolumeDown">
      <summary>
              音量减小键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.VolumeUp">
      <summary>
              音量增大键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaNextTrack">
      <summary>
              媒体下一曲目键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaPreviousTrack">
      <summary>
              媒体上一曲目键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaStop">
      <summary>
              媒体停止键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaPlayPause">
      <summary>
              媒体暂停播放键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.LaunchMail">
      <summary>
              启动邮件键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.SelectMedia">
      <summary>
              选择媒体键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.LaunchApplication1">
      <summary>
              启动应用程序 1 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.LaunchApplication2">
      <summary>
              启动应用程序 2 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem1">
      <summary>
              OEM 1 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemSemicolon">
      <summary>
              OEM 分号键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemPlus">
      <summary>
              OEM 加号键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemComma">
      <summary>
              OEM 逗号键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemMinus">
      <summary>
              OEM 减号键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemPeriod">
      <summary>
              OEM 句号键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem2">
      <summary>
              OEM 2 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemQuestion">
      <summary>
              OEM 问号键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem3">
      <summary>
              OEM 3 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemTilde">
      <summary>
              OEM 颚化符键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.AbntC1">
      <summary>
              ABNT_C1（巴西）键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.AbntC2">
      <summary>
              ABNT_C2（巴西）键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem4">
      <summary>
              OEM 4 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemOpenBrackets">
      <summary>
              OEM 左大括号键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem5">
      <summary>
              OEM 5 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemPipe">
      <summary>
              OEM 管道键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem6">
      <summary>
              OEM 6 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemCloseBrackets">
      <summary>
              OEM 右大括号键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem7">
      <summary>
              OEM 7 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemQuotes">
      <summary>
              OEM 引号键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem8">
      <summary>
              OEM 8 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem102">
      <summary>
              OEM 102 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemBackslash">
      <summary>
              OEM 反斜杠键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeProcessed">
      <summary>
              用于屏蔽 IME 正在处理的真实键的特殊键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.System">
      <summary>
              用于屏蔽作为系统键处理的真实键的特殊键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemAttn">
      <summary>
              OEM ATTN 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeAlphanumeric">
      <summary>
              DBE_ALPHANUMERIC 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemFinish">
      <summary>
              OEM FINISH 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeKatakana">
      <summary>
              DBE_KATAKANA 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemCopy">
      <summary>
              OEM COPY 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeHiragana">
      <summary>
              DBE_HIRAGANA 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemAuto">
      <summary>
              OEM AUTO 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeSbcsChar">
      <summary>
              DBE_SBCSCHAR 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemEnlw">
      <summary>
              OEM ENLW 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeDbcsChar">
      <summary>
              DBE_DBCSCHAR 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemBackTab">
      <summary>
              OEM BACKTAB 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeRoman">
      <summary>
              DBE_ROMAN 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Attn">
      <summary>
              ATTN 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeNoRoman">
      <summary>
              DBE_NOROMAN 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.CrSel">
      <summary>
              CRSEL 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeEnterWordRegisterMode">
      <summary>
              DBE_ENTERWORDREGISTERMODE 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.ExSel">
      <summary>
              EXSEL 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeEnterImeConfigureMode">
      <summary>
              DBE_ENTERIMECONFIGMODE 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.EraseEof">
      <summary>
              ERASE EOF 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeFlushString">
      <summary>
              DBE_FLUSHSTRING 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Play">
      <summary>
              播放键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeCodeInput">
      <summary>
              DBE_CODEINPUT 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Zoom">
      <summary>
              缩放键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeNoCodeInput">
      <summary>
              DBE_NOCODEINPUT 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.NoName">
      <summary>
              留待将来使用的常数。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeDetermineString">
      <summary>
              DBE_DETERMINESTRING 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.Pa1">
      <summary>
              PA1 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeEnterDialogConversionMode">
      <summary>
              DBE_ENTERDLGCONVERSIONMODE 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemClear">
      <summary>
              OEM 清除键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.Key.DeadCharProcessed">
      <summary>
              该键与另一个键配合使用，用于创建单一的组合字符。
            </summary>
    </member>
    <member name="T:System.Windows.Input.KeyConverter">
      <summary>
              将转换 <see cref="T:System.Windows.Input.Key" /> 对象与其他类型。
            </summary>
    </member>
    <member name="T:System.Windows.Input.KeyInterop">
      <summary>
              提供静态方法之间进行转换 Win32 虚拟键和 WPF <see cref="T:System.Windows.Input.Key" /> 枚举。 
            </summary>
    </member>
    <member name="T:System.Windows.Input.KeyValueSerializer">
      <summary>
              实例之间进行转换 <see cref="T:System.String" /> 的实例与 <see cref="T:System.Windows.Input.Key" />。
            </summary>
    </member>
    <member name="T:System.Windows.Input.ModifierKeys">
      <summary>
              指定修改键集。
            </summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.None">
      <summary>
              按下没有任何修饰符。
            </summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Alt">
      <summary>
              ALT 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Control">
      <summary>
              CTRL 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Shift">
      <summary>
              SHIFT 键。
            </summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Windows">
      <summary>
              Windows 徽标键。
            </summary>
    </member>
    <member name="T:System.Windows.Input.ModifierKeysConverter">
      <summary>
              将转换 <see cref="T:System.Windows.Input.ModifierKeys" /> 对象与其他类型。
            </summary>
    </member>
    <member name="T:System.Windows.Input.ModifierKeysValueSerializer">
      <summary>
              实例之间进行转换 <see cref="T:System.String" /> 的实例与 <see cref="T:System.Windows.Input.ModifierKeys" />。
            </summary>
    </member>
    <member name="T:System.Windows.Input.TraversalRequest">
      <summary>
              表示要将焦点移到另一个控件的请求。
            </summary>
    </member>
    <member name="T:System.Windows.Int32Rect">
      <summary>
              描述整数矩形的宽度、高度和位置。
            </summary>
    </member>
    <member name="T:System.Windows.Int32RectConverter">
      <summary>
              其他类型的实例之间来回进行转换 <see cref="T:System.Windows.Int32Rect" />。
            </summary>
    </member>
    <member name="T:System.Windows.Interop.ComponentDispatcher">
      <summary>
              在互操作方案中，启用 Win32 与 WPF 之间的消息泵的共享控件。
            </summary>
    </member>
    <member name="T:System.Windows.Interop.IKeyboardInputSink">
      <summary>
              跨互操作边界和 Hwnd 之间管理 tab 键次序、 加速器、 助记键的组件提供键盘接收器。
               此接口实现中的键盘消息管理 WPF-Win32 互操作方案。
            </summary>
    </member>
    <member name="T:System.Windows.Interop.IKeyboardInputSite">
      <summary>
              管理容器中的键盘焦点。
                此接口实现中的键盘消息管理 WPF-Win32 互操作方案。
            </summary>
    </member>
    <member name="T:System.Windows.Interop.MSG">
      <summary>
              包含从线程的消息队列的消息信息。
            </summary>
    </member>
    <member name="T:System.Windows.Interop.ThreadMessageEventHandler">
      <summary>
              表示处理 <see cref="E:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage" /> 和 <see cref="E:System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage" /> 事件的方法。
            </summary>
      <param name="msg">
                具有消息数据的结构。
              </param>
      <param name="handled">
                如果消息已处理，则为 <see langword="true" />；否则为 <see langword="false" />。
              </param>
    </member>
    <member name="T:System.Windows.IWeakEventListener">
      <summary>
              预计可以收到事件通过 WeakEvent 模式的类提供事件侦听支持和 <see cref="T:System.Windows.WeakEventManager" />。
            </summary>
    </member>
    <member name="T:System.Windows.LocalValueEntry">
      <summary>
              表示本地设置的依赖属性的属性标识符和属性值。
            </summary>
    </member>
    <member name="T:System.Windows.LocalValueEnumerator">
      <summary>
              为 <see cref="T:System.Windows.DependencyObject" /> 上存在的任何依赖属性的本地值提供枚举支持。
            </summary>
    </member>
    <member name="T:System.Windows.Markup.DesignerSerializationOptions">
      <summary>
              指定要序列化属性的方式。
            </summary>
    </member>
    <member name="F:System.Windows.Markup.DesignerSerializationOptions.SerializeAsAttribute">
      <summary>
              应将属性序列化为一个属性。
            </summary>
    </member>
    <member name="T:System.Windows.Markup.DesignerSerializationOptionsAttribute">
      <summary>
              指定属性的序列化标志。
            </summary>
    </member>
    <member name="T:System.Windows.Markup.InternalTypeHelper">
      <summary>
              WPF XAML 编译器在内部用来支持内部类型使用的抽象类。
            </summary>
    </member>
    <member name="T:System.Windows.Markup.IReceiveMarkupExtension">
      <summary>
              从标记扩展，其中的输出是与目标属性的另一个属性，类型提供类型，由此可以声明表达式 （或另一个类） 可以接收的机制。
               不要将用于 .NET Framework 4 实现; 请参阅备注。
            </summary>
    </member>
    <member name="T:System.Windows.Markup.Primitives.MarkupObject">
      <summary>
              表示可用于导航树中的对象的对象的抽象类。
            </summary>
    </member>
    <member name="T:System.Windows.Markup.Primitives.MarkupProperty">
      <summary>
              提供在编写标记后者中封装对属性及相应值的访问时要使用的属性说明的抽象类。
            </summary>
    </member>
    <member name="T:System.Windows.Markup.ServiceProviders">
      <summary>
              提供一个实现 <see cref="T:System.IServiceProvider" /> 接口使用的方法来添加服务。
            </summary>
    </member>
    <member name="T:System.Windows.Media.Converters.MatrixValueSerializer">
      <summary>
              实例之间进行转换 <see cref="T:System.String" /> 的实例与 <see cref="T:System.Windows.Media.Matrix" />。
            </summary>
    </member>
    <member name="T:System.Windows.Media.DisableDpiAwarenessAttribute">
      <summary>
              允许 WPF 禁用以每英寸点数 (dpi) 适用于所有用户界面元素的感知的应用程序。
            </summary>
    </member>
    <member name="T:System.Windows.Media.Matrix">
      <summary>
               表示用于在 二维 空间中进行转换的 3x3 仿射转换矩阵。
            </summary>
    </member>
    <member name="T:System.Windows.Media.MatrixConverter">
      <summary>
              其他类型的实例之间来回进行转换 <see cref="T:System.Windows.Media.Matrix" />。
            </summary>
    </member>
    <member name="T:System.Windows.NameScope">
      <summary>
              实现对 <see cref="T:System.Windows.Markup.INameScope" /> 方法的基本 WPF 支持，这些方法用于向特定 XAML 名称范围中存储名称-对象映射或检索此类映射。
               添加附加属性支持，以便更简单地在元素级别动态获取或设置 XAML 名称范围的名称。
            </summary>
    </member>
    <member name="T:System.Windows.Point">
      <summary>
              表示二维空间中的 x 坐标和 y 坐标对。
            </summary>
    </member>
    <member name="T:System.Windows.PointConverter">
      <summary>
              其他类型的实例之间来回进行转换 <see cref="T:System.Windows.Point" />。
            </summary>
    </member>
    <member name="T:System.Windows.PropertyChangedCallback">
      <summary>
              表示在依赖属性的有效属性值更改时调用的回调。
            </summary>
      <param name="d">
                属性值已更改的 <see cref="T:System.Windows.DependencyObject" />。
              </param>
      <param name="e">
                跟踪对此属性有效值的更改的任何事件发出的事件数据。
              </param>
    </member>
    <member name="T:System.Windows.PropertyMetadata">
      <summary>
              定义依赖属性在应用于特定类型（包括该属性向其注册的条件）时行为的某些方面。
            </summary>
    </member>
    <member name="T:System.Windows.Rect">
      <summary>
              描述矩形的宽度、高度和位置。
            </summary>
    </member>
    <member name="T:System.Windows.RectConverter">
      <summary>
              将为其他类型的实例的实例与 <see cref="T:System.Windows.Rect" />。
            </summary>
    </member>
    <member name="T:System.Windows.Size">
      <summary>
              实现一个结构，该结构用于描述对象的 <see cref="T:System.Windows.Size" />。
            </summary>
    </member>
    <member name="T:System.Windows.SizeConverter">
      <summary>
              将为其他类型的实例的实例与 <see cref="T:System.Windows.Size" /> 类。
            </summary>
    </member>
    <member name="T:System.Windows.SplashScreen">
      <summary>
              提供 Windows Presentation Foundation (WPF) 应用程序启动屏幕。
            </summary>
    </member>
    <member name="T:System.Windows.Threading.Dispatcher">
      <summary>
              为管理的线程的工作项队列提供服务。
            </summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherEventArgs">
      <summary>
              提供事件数据供 <see cref="T:System.Windows.Threading.Dispatcher" /> 相关的事件。
            </summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherFrame">
      <summary>
              表示在执行循环 <see cref="T:System.Windows.Threading.Dispatcher" />。
            </summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherHookEventArgs">
      <summary>
              提供事件数据供 <see cref="T:System.Windows.Threading.DispatcherHooks" /> 事件。
            </summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherHookEventHandler">
      <summary>
              表示将处理的方法 <see cref="T:System.Windows.Threading.DispatcherHooks" /> 相关的事件。
            </summary>
      <param name="sender">
                事件源。
              </param>
      <param name="e">
                事件数据。
              </param>
    </member>
    <member name="T:System.Windows.Threading.DispatcherHooks">
      <summary>
              提供有关的附加事件信息 <see cref="T:System.Windows.Threading.Dispatcher" /> 处理。
            </summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherObject">
      <summary>
              表示与关联的对象 <see cref="T:System.Windows.Threading.Dispatcher" />。
            </summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperation">
      <summary>
              表示用于与已发送到的操作进行交互的对象 <see cref="T:System.Windows.Threading.Dispatcher" /> 队列。
            </summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperation`1">
      <summary>
              表示用于与已发送到的操作进行交互的对象 <see cref="T:System.Windows.Threading.Dispatcher" /> 排队，并包含 <see cref="T:System.Threading.Tasks.Task`1" />。
            </summary>
      <typeparam name="TResult">
                返回的类型 <see cref="T:System.Threading.Tasks.Task`1" />。
              </typeparam>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperationCallback">
      <summary>
              表示一个用于调度程序操作的委托。
            </summary>
      <param name="arg">
                一个传递到回叫的参数。
              </param>
      <returns>
              由回叫返回的对象。
            </returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperationStatus">
      <summary>
              描述的状态的可能值 <see cref="T:System.Windows.Threading.DispatcherOperation" />。
            </summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Pending">
      <summary>
              该操作处于挂起状态，并且仍位于 <see cref="T:System.Windows.Threading.Dispatcher" /> 队列。
            </summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Aborted">
      <summary>
              该操作已中止。
            </summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Completed">
      <summary>
              完成该操作。
            </summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Executing">
      <summary>
              该操作已开始执行，但尚未完成。
            </summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherPriority">
      <summary>
              描述从该处可以通过调用操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" />。
            </summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Invalid">
      <summary>
              枚举值为-1。
                这是一个无效的优先级。
            </summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Inactive">
      <summary>
              枚举值为 0。
                未处理的操作。
            </summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.SystemIdle">
      <summary>
              枚举值为 1。
                在系统处于空闲状态时处理操作。
            </summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.ApplicationIdle">
      <summary>
              枚举值为 2。
                当应用程序处于空闲状态时处理操作。
            </summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.ContextIdle">
      <summary>
              枚举值为 3。
                在后台操作完成后处理操作。
            </summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Background">
      <summary>
              枚举值为 4。
                所有其他非空闲操作完成之后也会处理操作。
            </summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Input">
      <summary>
              枚举值为 5。
                作为输入相同的优先级处理操作。
            </summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Loaded">
      <summary>
              枚举值为 6。
                当布局和呈现已完成，但提供服务时输入优先级项之前处理操作。
               这专门用于当引发 Loaded 的事件。
            </summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Render">
      <summary>
              枚举值为 7。
                与呈现相同的优先级级别处理的操作。
            </summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.DataBind">
      <summary>
              枚举值为 8。
                在与数据绑定相同的优先级进行处理操作。
            </summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Normal">
      <summary>
              枚举值为 9。
                以正常的优先级处理操作。
                这是典型的应用程序优先级。
            </summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Send">
      <summary>
              枚举值为 10。
                在其他异步操作之前处理操作。
                这是最高优先级。
            </summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherPriorityAwaitable">
      <summary>
              表示异步会将控制权出让回/当前调度程序，并为要处理其他事件的调度程序提供了机会的等待对象
            </summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherPriorityAwaiter">
      <summary>
              表示等待异步任务完成的对象。
            </summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherProcessingDisabled">
      <summary>
              当它处于禁用状态，并提供一种方法来重新启用调度程序处理，则表示调度程序。
            </summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherSynchronizationContext">
      <summary>
              提供同步上下文 Windows Presentation Foundation (WPF)。
            </summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherTimer">
      <summary>
              集成到一个计时器 <see cref="T:System.Windows.Threading.Dispatcher" /> 在指定时间间隔和指定的优先级处理的队列。
            </summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs">
      <summary>
              将提供数据供 <see cref="T:System.Windows.Threading.Dispatcher" /> <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> 事件。 
            </summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionEventHandler">
      <summary>
              表示用来处理 <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> 事件的方法。
            </summary>
      <param name="sender">
                事件源。
              </param>
      <param name="e">
                事件数据。
              </param>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs">
      <summary>
              将提供数据供 <see cref="T:System.Windows.Threading.Dispatcher" /> <see cref="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" /> 事件。 
            </summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler">
      <summary>
              表示用来处理 <see cref="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" /> 事件的方法。
            </summary>
      <param name="sender">
                事件源。
              </param>
      <param name="e">
                事件数据。
              </param>
    </member>
    <member name="T:System.Windows.ValidateValueCallback">
      <summary>
              表示用作验证依赖属性有效值的回调的方法。
            </summary>
      <param name="value">
                要验证的值。
              </param>
      <returns>
              如果验证了值，则为 <see langword="true" />；如果提交的值无效，则为 <see langword="false" />。
            </returns>
    </member>
    <member name="T:System.Windows.Vector">
      <summary>
              表示中的位移 二维 空间。
            </summary>
    </member>
    <member name="T:System.Windows.VectorConverter">
      <summary>
               其他类型的实例之间来回进行转换 <see cref="T:System.Windows.Vector" />。
            </summary>
    </member>
    <member name="T:System.Windows.WeakEventManager">
      <summary>
              提供基本类中使用的事件管理 弱事件模式。
               该管理器添加和移除的事件 （或回调） 也使用该模式的侦听器。
            </summary>
    </member>
    <member name="T:System.Windows.WeakEventManager.ListenerList">
      <summary>
              提供用于存储侦听程序的内置集合列表 <see cref="T:System.Windows.WeakEventManager" />。
            </summary>
    </member>
    <member name="T:System.Windows.WeakEventManager.ListenerList`1">
      <summary>
              提供用于存储侦听程序的类型安全的集合列表 <see cref="T:System.Windows.WeakEventManager" />。
               此类定义使用的事件数据的类型参数。
            </summary>
      <typeparam name="TEventArgs">
                包含事件数据类型。
              </typeparam>
    </member>
    <member name="T:System.Windows.WeakEventManager`2">
      <summary>
              提供类型安全 <see cref="T:System.Windows.WeakEventManager" /> ，可用于指定要用于"弱事件侦听器"模式的事件处理程序。
               此类定义事件源的类型参数和使用事件数据的类型参数。
            </summary>
      <typeparam name="TEventSource">
                引发事件的类型。
              </typeparam>
      <typeparam name="TEventArgs">
                包含事件数据类型。
              </typeparam>
    </member>
  </members>
</doc>