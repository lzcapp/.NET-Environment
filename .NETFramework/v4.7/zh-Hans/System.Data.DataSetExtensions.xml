<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Data.DataSetExtensions</name>
  </assembly>
  <members>
    <member name="M:System.Data.DataRowComparer`1.Equals(`0,`0)">
      <summary>
              比较两个 <see cref="T:System.Data.DataRow" /> 通过使用按列、 基于值的比较的对象。
            </summary>
      <param name="leftRow">
                要比较的第一个 <see cref="T:System.Data.DataRow" /> 对象。
              </param>
      <param name="rightRow">
                要比较的第二个 <see cref="T:System.Data.DataRow" /> 对象。
              </param>
      <returns>
              <see langword="true" /> 如果两个 <see cref="T:System.Data.DataRow" /> 对象有序集的列的值相等; 否则为<see langword=" false" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  一个或两个源 <see cref="T:System.Data.DataRow" /> 对象 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.DataRowComparer`1.GetHashCode(`0)">
      <summary>
              返回指定的哈希代码 <see cref="T:System.Data.DataRow" /> 对象。
            </summary>
      <param name="row">
                <see cref="T:System.Data.DataRow" /> 来计算哈希代码。
              </param>
      <returns>
              <see cref="T:System.Int32" /> 值，该值表示行的哈希代码。
            </returns>
      <exception cref="T:System.ArgumentException">
                  源 <see cref="T:System.Data.DataRow" /> 对象不属于 <see cref="T:System.Data.DataTable" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  源 <see cref="T:System.Data.DataRow" /> 对象是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Data.DataColumn)">
      <summary>
              提供了每个指定行中的列的值的强类型化访问。
              <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Data.DataColumn)" /> 方法还支持可以为 null 的类型。
            </summary>
      <param name="row">
                输入 <see cref="T:System.Data.DataRow" />, ，将其用作 <see langword="this" /> 的扩展方法的实例。
              </param>
      <param name="column">
                输入 <see cref="T:System.Data.DataColumn" /> 对象，它指定要返回的值的列。
              </param>
      <typeparam name="T">
                一个指定列的返回类型的泛型参数。
              </typeparam>
      <returns>
              类型的值 <paramref name="T" />, 的 <see cref="T:System.Data.DataColumn" /> 由指定 <paramref name="column" />。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  基础列的值类型无法转换为泛型参数指定的类型 <paramref name="T" />。
                </exception>
      <exception cref="T:System.IndexOutOfRangeException">
                  指定的列 <paramref name="column" /> 未发生在 <see cref="T:System.Data.DataTable" /> ， <see cref="T:System.Data.DataRow" /> 是的一部分。
                </exception>
      <exception cref="T:System.NullReferenceException">
                  一个 null 值赋给不可以为 null 的类型。
                </exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)">
      <summary>
              提供了每个指定行中的列的值的强类型化访问。
              <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)" /> 方法还支持可以为 null 的类型。
            </summary>
      <param name="row">
                输入 <see cref="T:System.Data.DataRow" />, ，将其用作 <see langword="this" /> 的扩展方法的实例。
              </param>
      <param name="column">
                输入 <see cref="T:System.Data.DataColumn" /> 对象，它指定要返回的值的列。
              </param>
      <param name="version">
                一个 <see cref="T:System.Data.DataRowVersion" /> 枚举，用于指定列要返回的值，如版本 <see langword="Current" /> 或 <see langword="Original" /> 版本。
              </param>
      <typeparam name="T">
                一个指定列的返回类型的泛型参数。
              </typeparam>
      <returns>
              类型的值 <paramref name="T" />, 的 <see cref="T:System.Data.DataColumn" /> 由指定 <paramref name="column" /> 和 <paramref name="version" />。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  基础列的值类型无法转换为泛型参数指定的类型 <paramref name="T" />。
                </exception>
      <exception cref="T:System.IndexOutOfRangeException">
                  指定的列 <paramref name="column" /> 中不存在 <see cref="T:System.Data.DataTable" /> ， <see cref="T:System.Data.DataRow" /> 是的一部分。
                </exception>
      <exception cref="T:System.NullReferenceException">
                  一个 null 值赋给不可以为 null 的类型。
                </exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Int32)">
      <summary>
              提供了每个指定行中的列的值的强类型化访问。
              <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Int32)" /> 方法还支持可以为 null 的类型。
            </summary>
      <param name="row">
                输入 <see cref="T:System.Data.DataRow" />, ，将其用作 <see langword="this" /> 的扩展方法的实例。
              </param>
      <param name="columnIndex">
                列索引中。
              </param>
      <typeparam name="T">
                一个指定列的返回类型的泛型参数。
              </typeparam>
      <returns>
              类型的值 <paramref name="T" />, 的 <see cref="T:System.Data.DataColumn" /> 由指定 <paramref name="columnIndex" />。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  基础列的值类型无法转换为泛型参数指定的类型 <paramref name="T" />。
                </exception>
      <exception cref="T:System.IndexOutOfRangeException">
                  指定的列 <paramref name="ordinal" /> 中不存在 <see cref="T:System.Data.DataTable" /> ， <see cref="T:System.Data.DataRow" /> 是的一部分。
                </exception>
      <exception cref="T:System.NullReferenceException">
                  一个 null 值赋给不可以为 null 的类型。
                </exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)">
      <summary>
              提供了每个指定行中的列的值的强类型化访问。
              <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)" /> 方法还支持可以为 null 的类型。
            </summary>
      <param name="row">
                输入 <see cref="T:System.Data.DataRow" />, ，将其用作 <see langword="this" /> 的扩展方法的实例。
              </param>
      <param name="columnIndex">
                要返回的值的列的从零开始的序号。
              </param>
      <param name="version">
                一个 <see cref="T:System.Data.DataRowVersion" /> 枚举，用于指定列要返回的值，如版本 <see langword="Current" /> 或 <see langword="Original" /> 版本。
              </param>
      <typeparam name="T">
                一个指定列的返回类型的泛型参数。
              </typeparam>
      <returns>
              类型的值 <paramref name="T" />, 的 <see cref="T:System.Data.DataColumn" /> 由指定 <paramref name="ordinal" /> 和 <paramref name="version" />。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  基础列的值类型无法转换为泛型参数指定的类型 <paramref name="T" />。
                </exception>
      <exception cref="T:System.IndexOutOfRangeException">
                  指定的列 <paramref name="ordinal" /> 中不存在 <see cref="T:System.Data.DataTable" /> ， <see cref="T:System.Data.DataRow" /> 是的一部分。
                </exception>
      <exception cref="T:System.NullReferenceException">
                  一个 null 值赋给不可以为 null 的类型。
                </exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.String)">
      <summary>
              提供了每个指定行中的列的值的强类型化访问。
              <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.String)" /> 方法还支持可以为 null 的类型。
            </summary>
      <param name="row">
                输入 <see cref="T:System.Data.DataRow" />, ，将其用作 <see langword="this" /> 的扩展方法的实例。
              </param>
      <param name="columnName">
                要返回的值的列的名称。
              </param>
      <typeparam name="T">
                一个指定列的返回类型的泛型参数。
              </typeparam>
      <returns>
              类型的值 <paramref name="T" />, 的 <see cref="T:System.Data.DataColumn" /> 由指定 <paramref name="columnName" />。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  基础列的值类型无法转换为泛型参数指定的类型 <paramref name="T" />。
                </exception>
      <exception cref="T:System.IndexOutOfRangeException">
                  指定的列 <paramref name="columnName" /> 未发生在 <see cref="T:System.Data.DataTable" /> ， <see cref="T:System.Data.DataRow" /> 是的一部分。
                </exception>
      <exception cref="T:System.NullReferenceException">
                  一个 <see langword="null" /> 值赋给不可以为 null 的类型。
                </exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.String,System.Data.DataRowVersion)">
      <summary>
              提供了每个指定行中的列的值的强类型化访问。
              <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.String,System.Data.DataRowVersion)" /> 方法还支持可以为 null 的类型。
            </summary>
      <param name="row">
                输入 <see cref="T:System.Data.DataRow" />, ，将其用作 <see langword="this" /> 的扩展方法的实例。
              </param>
      <param name="columnName">
                要返回的值的列的名称。
              </param>
      <param name="version">
                一个 <see cref="T:System.Data.DataRowVersion" /> 枚举，用于指定列要返回的值，如版本 <see langword="Current" /> 或 <see langword="Original" /> 版本。
              </param>
      <typeparam name="T">
                一个指定列的返回类型的泛型参数。
              </typeparam>
      <returns>
              类型的值 <paramref name="T" />, 的 <see cref="T:System.Data.DataColumn" /> 由指定 <paramref name="columnName" /> 和 <paramref name="version" />。
            </returns>
      <exception cref="T:System.InvalidCastException">
                  基础列的值类型无法转换为泛型参数指定的类型 <paramref name="T" />。
                </exception>
      <exception cref="T:System.IndexOutOfRangeException">
                  指定的列 <paramref name="columnName" /> 中不存在 <see cref="T:System.Data.DataTable" /> ， <see cref="T:System.Data.DataRow" /> 是的一部分。
                </exception>
      <exception cref="T:System.NullReferenceException">
                  一个 null 值赋给不可以为 null 的类型。
                </exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.Data.DataColumn,``0)">
      <summary>
              设置指定列中的新值 <see cref="T:System.Data.DataRow" />。
              <see cref="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.Data.DataColumn,``0)" /> 方法还支持可以为 null 的类型。
            </summary>
      <param name="row">
                输入 <see cref="T:System.Data.DataRow" />, ，将其用作 <see langword="this" /> 的扩展方法的实例。
              </param>
      <param name="column">
                输入 <see cref="T:System.Data.DataColumn" /> 指定要检索的行值。
              </param>
      <param name="value">
                类型的指定列的新行值 <paramref name="T" />。
              </param>
      <typeparam name="T">
                一个指定列的值类型的泛型参数。
              </typeparam>
      <exception cref="T:System.ArgumentException">
                  指定的列 <paramref name="column" /> 找不到。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="column" /> 是 null。
                </exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">
                  当尝试对已删除的行中设置一个值时出现。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  基础列的值类型无法转换为泛型参数指定的类型 <paramref name="T" />。
                </exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.Int32,``0)">
      <summary>
              设置指定列中的新值 <see cref="T:System.Data.DataRow" /> 上调用该方法。
              <see cref="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.Int32,``0)" /> 方法还支持可以为 null 的类型。
            </summary>
      <param name="row">
                输入 <see cref="T:System.Data.DataRow" />, ，将其用作 <see langword="this" /> 的扩展方法的实例。
              </param>
      <param name="columnIndex">
                要设置的值的列的从零开始的序号。
              </param>
      <param name="value">
                类型的指定列的新行值 <paramref name="T" />。
              </param>
      <typeparam name="T">
                一个指定列的值类型的泛型参数。
              </typeparam>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">
                  当尝试对已删除的行中设置一个值时出现。
                </exception>
      <exception cref="T:System.IndexOutOfRangeException">
                  <paramref name="ordinal" /> 参数不在范围。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  基础列的值类型可能不强制转换为指定的泛型参数的类型 <paramref name="T" />。
                </exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.String,``0)">
      <summary>
              设置指定列中的新值 <see cref="T:System.Data.DataRow" />。
              <see cref="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.String,``0)" /> 方法还支持可以为 null 的类型。
            </summary>
      <param name="row">
                输入 <see cref="T:System.Data.DataRow" />, ，将其用作 <see langword="this" /> 的扩展方法的实例。
              </param>
      <param name="columnName">
                要设置的值的列的名称。
              </param>
      <param name="value">
                类型的指定列的新行值 <paramref name="T" />。
              </param>
      <typeparam name="T">
                一个指定列的值类型的泛型参数。
              </typeparam>
      <exception cref="T:System.ArgumentException">
                  指定的列 <paramref name="columnName" /> 找不到。
                </exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">
                  当尝试对已删除的行设置一个值时出现。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  基础列的值类型无法转换为泛型参数指定的类型 <paramref name="T" />。
                </exception>
    </member>
    <member name="M:System.Data.DataTableExtensions.AsDataView(System.Data.DataTable)">
      <summary>
              创建并返回启用 LINQ 的 <see cref="T:System.Data.DataView" /> 对象。
            </summary>
      <param name="table">
                源 <see cref="T:System.Data.DataTable" /> 从中启用 LINQ 的 <see cref="T:System.Data.DataView" /> 创建。
              </param>
      <returns>
              启用 LINQ 的 <see cref="T:System.Data.DataView" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.DataTableExtensions.AsDataView``1(System.Data.EnumerableRowCollection{``0})">
      <summary>
              创建并返回启用 LINQ 的 <see cref="T:System.Data.DataView" /> 对象，表示 LINQ to DataSet 查询。
            </summary>
      <param name="source">
                源 LINQ to DataSet 从中查询启用 LINQ 的 <see cref="T:System.Data.DataView" /> 创建。
              </param>
      <typeparam name="T">
                源中的对象的类型进行排序，通常 <see cref="T:System.Data.DataRow" />。
              </typeparam>
      <returns>
              启用 LINQ 的 <see cref="T:System.Data.DataView" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.DataTableExtensions.AsEnumerable(System.Data.DataTable)">
      <summary>
              返回 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象，其中泛型参数 <paramref name="T" /> 是 <see cref="T:System.Data.DataRow" />。
               此对象可以在使用 LINQ 表达式或方法查询。
            </summary>
      <param name="source">
                源 <see cref="T:System.Data.DataTable" /> 可枚举。
              </param>
      <returns>
              <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象，其中泛型参数 <paramref name="T" /> 是 <see cref="T:System.Data.DataRow" />。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  源 <see cref="T:System.Data.DataTable" /> 是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              返回 <see cref="T:System.Data.DataTable" /> ，其中包含的副本 <see cref="T:System.Data.DataRow" /> 对象，给定输入 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象其中泛型参数 <paramref name="T" /> 是 <see cref="T:System.Data.DataRow" />。
            </summary>
      <param name="source">
                源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列。
              </param>
      <typeparam name="T">
                源中的对象的类型进行排序，通常 <see cref="T:System.Data.DataRow" />。
              </typeparam>
      <returns>
              一个 <see cref="T:System.Data.DataTable" /> ，其中包含输入的序列的类型为 <see cref="T:System.Data.DataRow" /> 对象。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列是 <see langword="null" /> ，不能创建一个新表。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  一个 <see cref="T:System.Data.DataRow" /> 序列源中具有的状态的 <see cref="F:System.Data.DataRowState.Deleted" />。
                
                  源序列不包含任何 <see cref="T:System.Data.DataRow" /> 对象。
                
                  一个 <see cref="T:System.Data.DataRow" /> 在源中序列是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)">
      <summary>
              副本 <see cref="T:System.Data.DataRow" /> 对象传递给指定 <see cref="T:System.Data.DataTable" />, ，给定输入 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象其中泛型参数 <paramref name="T" /> 是 <see cref="T:System.Data.DataRow" />。
            </summary>
      <param name="source">
                源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列。
              </param>
      <param name="table">
                目标 <see cref="T:System.Data.DataTable" />。
              </param>
      <param name="options">
                一个 <see cref="T:System.Data.LoadOption" /> 枚举，用于指定 <see cref="T:System.Data.DataTable" /> 负载选项。
              </param>
      <typeparam name="T">
                源中的对象的类型进行排序，通常 <see cref="T:System.Data.DataRow" />。
              </typeparam>
      <exception cref="T:System.ArgumentException">
                  复制 <see cref="T:System.Data.DataRow" /> 对象不能容纳的目标架构 <see cref="T:System.Data.DataTable" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列是 <see langword="null" /> 或目标 <see cref="T:System.Data.DataTable" /> 是 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  一个 <see cref="T:System.Data.DataRow" /> 序列源中具有的状态的 <see cref="F:System.Data.DataRowState.Deleted" />。
                
                  源序列不包含任何 <see cref="T:System.Data.DataRow" /> 对象。
                
                  一个 <see cref="T:System.Data.DataRow" /> 在源中序列是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
      <summary>
              副本 <see cref="T:System.Data.DataRow" /> 对象传递给指定 <see cref="T:System.Data.DataTable" />, ，给定输入 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象其中泛型参数 <paramref name="T" /> 是 <see cref="T:System.Data.DataRow" />。
            </summary>
      <param name="source">
                源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列。
              </param>
      <param name="table">
                目标 <see cref="T:System.Data.DataTable" />。
              </param>
      <param name="options">
                一个 <see cref="T:System.Data.LoadOption" /> 枚举，用于指定 <see cref="T:System.Data.DataTable" /> 负载选项。
              </param>
      <param name="errorHandler">
                一个 <see cref="T:System.Data.FillErrorEventHandler" /> 委托，表示将处理错误的方法。
              </param>
      <typeparam name="T">
                源中的对象的类型进行排序，通常 <see cref="T:System.Data.DataRow" />。
              </typeparam>
      <exception cref="T:System.ArgumentException">
                  复制 <see cref="T:System.Data.DataRow" /> 对象不能容纳的目标架构 <see cref="T:System.Data.DataTable" />。
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列是 <see langword="null" /> 或目标 <see cref="T:System.Data.DataTable" /> 是 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  一个 <see cref="T:System.Data.DataRow" /> 序列源中具有的状态的 <see cref="F:System.Data.DataRowState.Deleted" />。
                
                  - 或 -
                
                  源序列不包含任何 <see cref="T:System.Data.DataRow" /> 对象。
                
                  - 或 -
                
                  一个 <see cref="T:System.Data.DataRow" /> 在源中序列是 <see langword="null" />。
                </exception>
    </member>
    <member name="M:System.Data.EnumerableRowCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              返回的集合的枚举数 <see cref="T:System.Data.DataRow" /> 对象。
               此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。
            </summary>
      <returns>
              <see cref="T:System.Collections.IEnumerator" /> 可用于遍历集合的 <see cref="T:System.Data.DataRow" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollection`1.GetEnumerator">
      <summary>
              返回包含的行对象的集合的枚举数。
               此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。
            </summary>
      <returns>
              一个强类型 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 可用于遍历集合的 <paramref name="TRow" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              返回的集合的枚举数 <see cref="T:System.Data.DataRow" /> 对象。
               此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。
            </summary>
      <returns>
              <see cref="T:System.Collections.IEnumerator" /> 可用于遍历集合的 <see cref="T:System.Data.DataRow" /> 对象。
            </returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.Cast``1(System.Data.EnumerableRowCollection)">
      <summary>
              将元素转换 <see cref="T:System.Data.EnumerableRowCollection" /> 为指定的类型。
               此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。
            </summary>
      <param name="source">
                <see cref="T:System.Data.EnumerableRowCollection" /> ，其中包含要转换的元素。
              </param>
      <typeparam name="TResult">
                要转换到的源的元素的类型。
              </typeparam>
      <returns>
              <see cref="T:System.Data.EnumerableRowCollection" /> ，其中包含每个元素均转换为指定类型的源序列。
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> 为 <see langword="null" />。
                </exception>
      <exception cref="T:System.InvalidCastException">
                  序列中的元素不能转换为类型 <paramref name="TResult" />。
                </exception>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.OrderBy``2(System.Data.EnumerableRowCollection{``0},System.Func{``0,``1})">
      <summary>
              对的行进行排序 <see cref="T:System.Data.EnumerableRowCollection" /> 指定键按升序排序。
               此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。
            </summary>
      <param name="source">
                <see cref="T:System.Data.EnumerableRowCollection" /> 包含 <see cref="T:System.Data.DataRow" /> 元素进行排序。
              </param>
      <param name="keySelector">
                用于从元素中提取键的函数。
              </param>
      <typeparam name="TRow">
                中的行元素的类型 <paramref name="source" />, ，通常 <see cref="T:System.Data.DataRow" />。
              </typeparam>
      <typeparam name="TKey">
                返回的键的类型 <paramref name="keySelector" />。
              </typeparam>
      <returns>
              <see cref="T:System.Data.OrderedEnumerableRowCollection`1" /> 的元素进行排序由指定键。
            </returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.OrderBy``2(System.Data.EnumerableRowCollection{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
              对的行进行排序 <see cref="T:System.Data.EnumerableRowCollection" /> 指定的键和比较器按升序排序。
               此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。
            </summary>
      <param name="source">
                <see cref="T:System.Data.EnumerableRowCollection" /> 包含 <see cref="T:System.Data.DataRow" /> 元素进行排序。
              </param>
      <param name="keySelector">
                用于从元素中提取键的函数。
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IComparer`1" /> 对键进行比较。
              </param>
      <typeparam name="TRow">
                中的行元素的类型 <paramref name="source" />, ，通常 <see cref="T:System.Data.DataRow" />。
              </typeparam>
      <typeparam name="TKey">
                返回的键的类型 <paramref name="keySelector" />。
              </typeparam>
      <returns>
              <see cref="T:System.Data.OrderedEnumerableRowCollection`1" /> 的元素进行排序由指定的键和比较器。
            </returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.OrderByDescending``2(System.Data.EnumerableRowCollection{``0},System.Func{``0,``1})">
      <summary>
              对的行进行排序 <see cref="T:System.Data.EnumerableRowCollection" /> 按降序顺序根据指定的键。
               此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。
            </summary>
      <param name="source">
                <see cref="T:System.Data.EnumerableRowCollection" /> 包含 <see cref="T:System.Data.DataRow" /> 元素进行排序。
              </param>
      <param name="keySelector">
                用于从元素中提取键的函数。
              </param>
      <typeparam name="TRow">
                中的行元素的类型 <paramref name="source" />, ，通常 <see cref="T:System.Data.DataRow" />。
              </typeparam>
      <typeparam name="TKey">
                返回的键的类型 <paramref name="keySelector" />。
              </typeparam>
      <returns>
              <see cref="T:System.Data.OrderedEnumerableRowCollection`1" /> 的元素进行排序由指定键。
            </returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.OrderByDescending``2(System.Data.EnumerableRowCollection{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
              对的行进行排序 <see cref="T:System.Data.EnumerableRowCollection" /> 中根据指定的键和比较器按降序。
               此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。
            </summary>
      <param name="source">
                <see cref="T:System.Data.EnumerableRowCollection" /> 包含 <see cref="T:System.Data.DataRow" /> 元素进行排序。
              </param>
      <param name="keySelector">
                用于从元素中提取键的函数。
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IComparer`1" /> 对键进行比较。
              </param>
      <typeparam name="TRow">
                中的行元素的类型 <paramref name="source" />, ，通常 <see cref="T:System.Data.DataRow" />。
              </typeparam>
      <typeparam name="TKey">
                返回的键的类型 <paramref name="keySelector" />。
              </typeparam>
      <returns>
              <see cref="T:System.Data.OrderedEnumerableRowCollection`1" /> 的元素进行排序由指定的键和比较器。
            </returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.Select``2(System.Data.EnumerableRowCollection{``0},System.Func{``0,``1})">
      <summary>
              每个元素投影 <see cref="T:System.Data.EnumerableRowCollection`1" /> 到一个新窗体。
               此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。
            </summary>
      <param name="source">
                <see cref="T:System.Data.EnumerableRowCollection`1" /> 包含 <see cref="T:System.Data.DataRow" /> 元素调用转换函数。
              </param>
      <param name="selector">
                应用于每个元素的转换函数。
              </param>
      <typeparam name="TRow">
                中的行元素的类型 <paramref name="source" />, ，通常 <see cref="T:System.Data.DataRow" />。
              </typeparam>
      <typeparam name="S">
                该类型的 <paramref name="TRow" /> 将转换为。
              </typeparam>
      <returns>
              <see cref="T:System.Data.EnumerableRowCollection`1" /> 其元素是调用转换函数的每个元素的结果 <paramref name="source" />。
            </returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.ThenBy``2(System.Data.OrderedEnumerableRowCollection{``0},System.Func{``0,``1})">
      <summary>
              第二行进行排序的 <see cref="T:System.Data.EnumerableRowCollection" /> 指定键按升序排序。
               此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。
            </summary>
      <param name="source">
                <see cref="T:System.Data.EnumerableRowCollection" /> 包含 <see cref="T:System.Data.DataRow" /> 元素进行排序。
              </param>
      <param name="keySelector">
                用于从元素中提取键的函数。
              </param>
      <typeparam name="TRow">
                中的行元素的类型 <paramref name="source" />, ，通常 <see cref="T:System.Data.DataRow" />。
              </typeparam>
      <typeparam name="TKey">
                返回的键的类型 <paramref name="keySelector" />。
              </typeparam>
      <returns>
              <see cref="T:System.Data.OrderedEnumerableRowCollection`1" /> 的元素进行排序由指定键。
            </returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.ThenBy``2(System.Data.OrderedEnumerableRowCollection{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
              第二行进行排序的 <see cref="T:System.Data.EnumerableRowCollection" /> 指定的键和比较器按升序排序。
               此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。
            </summary>
      <param name="source">
                <see cref="T:System.Data.EnumerableRowCollection" /> 包含 <see cref="T:System.Data.DataRow" /> 元素进行排序。
              </param>
      <param name="keySelector">
                用于从元素中提取键的函数。
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IComparer`1" /> 对键进行比较。
              </param>
      <typeparam name="TRow">
                中的行元素的类型 <paramref name="source" />, ，通常 <see cref="T:System.Data.DataRow" />。
              </typeparam>
      <typeparam name="TKey">
                返回的键的类型 <paramref name="keySelector" />。
              </typeparam>
      <returns>
              <see cref="T:System.Data.OrderedEnumerableRowCollection`1" /> 的元素进行排序由指定的键和比较器。
            </returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.ThenByDescending``2(System.Data.OrderedEnumerableRowCollection{``0},System.Func{``0,``1})">
      <summary>
              第二行进行排序的 <see cref="T:System.Data.EnumerableRowCollection" /> 按降序顺序根据指定的键。
               此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。
            </summary>
      <param name="source">
                <see cref="T:System.Data.EnumerableRowCollection" /> 包含 <see cref="T:System.Data.DataRow" /> 元素进行排序。
              </param>
      <param name="keySelector">
                用于从元素中提取键的函数。
              </param>
      <typeparam name="TRow">
                中的行元素的类型 <paramref name="source" />, ，通常 <see cref="T:System.Data.DataRow" />。
              </typeparam>
      <typeparam name="TKey">
                返回的键的类型 <paramref name="keySelector" />。
              </typeparam>
      <returns>
              <see cref="T:System.Data.OrderedEnumerableRowCollection`1" /> 的元素进行排序由指定键。
            </returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.ThenByDescending``2(System.Data.OrderedEnumerableRowCollection{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
              第二行进行排序的 <see cref="T:System.Data.EnumerableRowCollection" /> 中根据指定的键和比较器按降序。
               此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。
            </summary>
      <param name="source">
                <see cref="T:System.Data.EnumerableRowCollection" /> 包含 <see cref="T:System.Data.DataRow" /> 元素进行排序。
              </param>
      <param name="keySelector">
                用于从元素中提取键的函数。
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IComparer`1" /> 对键进行比较。
              </param>
      <typeparam name="TRow">
                中的行元素的类型 <paramref name="source" />, ，通常 <see cref="T:System.Data.DataRow" />。
              </typeparam>
      <typeparam name="TKey">
                返回的键的类型 <paramref name="keySelector" />。
              </typeparam>
      <returns>
              <see cref="T:System.Data.OrderedEnumerableRowCollection`1" /> 的元素进行排序由指定的键和比较器。
            </returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.Where``1(System.Data.EnumerableRowCollection{``0},System.Func{``0,System.Boolean})">
      <summary>
              筛选基于指定的谓词的行的序列。
               此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。
            </summary>
      <param name="source">
                <see cref="T:System.Data.EnumerableRowCollection" /> 包含 <see cref="T:System.Data.DataRow" /> 元素进行筛选。
              </param>
      <param name="predicate">
                用于测试每个元素是否满足条件的函数。
              </param>
      <typeparam name="TRow">
                中的行元素的类型 <paramref name="source" />, ，通常 <see cref="T:System.Data.DataRow" />。
              </typeparam>
      <returns>
              <see cref="T:System.Data.OrderedEnumerableRowCollection`1" /> ，其中包含输入序列中满足条件的行。
            </returns>
    </member>
    <member name="M:System.Data.TypedTableBase`1.#ctor">
      <summary>
              初始化新的 <see cref="T:System.Data.TypedTableBase'1" />。
               此方法支持类型化的<see cref="T:System.Data.DataTable" /> 对象生成 Visual Studio 和 XSD.exe .NET Framework 工具。
               此类型不应在代码中直接使用。
            </summary>
    </member>
    <member name="M:System.Data.TypedTableBase`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              初始化新的 <see cref="T:System.Data.TypedTableBase'1" />。
               此方法支持类型化的<see cref="T:System.Data.DataTable" /> 对象生成 Visual Studio 和 XSD.exe .NET Framework 工具。
               此方法不应在代码中直接使用。
            </summary>
      <param name="info">
                一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 其中包含用于构造对象数据。
              </param>
      <param name="context">
                正在进行反序列化的对象流上下文。
              </param>
    </member>
    <member name="M:System.Data.TypedTableBase`1.Cast``1">
      <summary>
              将 <see cref="T:System.Data.TypedTableBase`1" /> 的元素转换为指定的类型。
               此方法支持由 Visual Studio 和 Xsd.exe .NET Framework 工具实现的类型化 <see cref="T:System.Data.DataTable" /> 对象生成。
               此方法不能直接在代码中使用。
            </summary>
      <returns>
              一个 <see cref="T:System.Data.EnumerableRowCollection" />，其中包含已转换为指定类型的源序列的每个元素。
            </returns>
    </member>
    <member name="M:System.Data.TypedTableBase`1.GetEnumerator">
      <summary>
              返回的枚举器的类型化-<see cref="T:System.Data.DataRow" />。
               此方法支持类型化的<see cref="T:System.Data.DataTable" /> 对象生成 Visual Studio 和 XSD.exe .NET Framework 工具。
               此方法不应在代码中直接使用。
            </summary>
      <returns>
              一个实现 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 接口的对象。
            </returns>
    </member>
    <member name="M:System.Data.TypedTableBase`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              返回的枚举器的类型化-<see cref="T:System.Data.DataRow" />。
               此方法支持类型化的<see cref="T:System.Data.DataTable" /> 对象生成 Visual Studio 和 XSD.exe .NET Framework 工具。
               此方法不应在代码中直接使用。
            </summary>
      <returns>
              一个实现 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 接口的对象。
            </returns>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.AsEnumerable``1(System.Data.TypedTableBase{``0})">
      <summary>
              枚举中的数据行元素 <see cref="T:System.Data.TypedTableBase`1" /> ，并返回 <see cref="T:System.Data.EnumerableRowCollection`1" /> 对象，其中泛型参数 <paramref name="T" /> 是 <see cref="T:System.Data.DataRow" />。
               此对象可以在使用 LINQ 表达式或方法查询。 </summary>
      <param name="source">
                源 <see cref="T:System.Data.TypedTableBase`1" /> 可枚举。
              </param>
      <typeparam name="TRow">
                要转换的源的元素的类型。
              </typeparam>
      <returns>
              <see cref="T:System.Data.EnumerableRowCollection`1" /> 对象，其中泛型参数 <paramref name="T" /> 是 <see cref="T:System.Data.DataRow" />。
            </returns>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.ElementAtOrDefault``1(System.Data.TypedTableBase{``0},System.Int32)">
      <summary>
              返回位于指定行处的元素中的序列或默认值，如果行是超出范围。
            </summary>
      <param name="source">
                要返回元素的可枚举对象。
              </param>
      <param name="index">
                要检索的从零开始的元素索引。
              </param>
      <typeparam name="TRow">
                元素或行的类型。
              </typeparam>
      <returns>
              序列中指定的行处的元素。
            </returns>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.OrderBy``2(System.Data.TypedTableBase{``0},System.Func{``0,``1})">
      <summary>
              对的行进行排序 <see cref="T:System.Data.TypedTableBase`1" /> 指定键按升序排序。
            </summary>
      <param name="source">
                一个 <see cref="T:System.Data.TypedTableBase`1" /> ，其中包含 <see cref="T:System.Data.DataRow" /> 元素进行排序。
              </param>
      <param name="keySelector">
                用于从元素中提取键的函数。
              </param>
      <typeparam name="TRow">
                中的行元素的类型 <paramref name="source" />, ，通常 <see cref="T:System.Data.DataRow" />。
              </typeparam>
      <typeparam name="TKey">
                返回的键的类型 <paramref name="keySelector" />。
              </typeparam>
      <returns>
              <see cref="T:System.Data.OrderedEnumerableRowCollection`1" /> 的元素进行排序由指定键。
            </returns>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.OrderBy``2(System.Data.TypedTableBase{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
              对的行进行排序 <see cref="T:System.Data.TypedTableBase`1" /> 指定的键和比较器按升序排序。
            </summary>
      <param name="source">
                一个 <see cref="T:System.Data.TypedTableBase`1" /> ，其中包含 <see cref="T:System.Data.DataRow" /> 元素进行排序。
              </param>
      <param name="keySelector">
                用于从元素中提取键的函数。
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IComparer`1" /> 对键进行比较。
              </param>
      <typeparam name="TRow">
                中的行元素的类型 <paramref name="source" />, ，通常 <see cref="T:System.Data.DataRow" />。
              </typeparam>
      <typeparam name="TKey">
                返回的键的类型 <paramref name="keySelector" />。
              </typeparam>
      <returns>
              <see cref="T:System.Data.OrderedEnumerableRowCollection`1" /> 的元素进行排序由指定的键和比较器。
            </returns>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.OrderByDescending``2(System.Data.TypedTableBase{``0},System.Func{``0,``1})">
      <summary>
              对的行进行排序 <see cref="T:System.Data.TypedTableBase`1" /> 按降序顺序根据指定的键。
            </summary>
      <param name="source">
                一个 <see cref="T:System.Data.TypedTableBase`1" /> ，其中包含 <see cref="T:System.Data.DataRow" /> 元素进行排序。
              </param>
      <param name="keySelector">
                用于从元素中提取键的函数。
              </param>
      <typeparam name="TRow">
                中的行元素的类型 <paramref name="source" />, ，通常 <see cref="T:System.Data.DataRow" />。
              </typeparam>
      <typeparam name="TKey">
                返回的键的类型 <paramref name="keySelector" />。
              </typeparam>
      <returns>
              <see cref="T:System.Data.OrderedEnumerableRowCollection`1" /> 的元素进行排序由指定键。
            </returns>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.OrderByDescending``2(System.Data.TypedTableBase{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
              对的行进行排序 <see cref="T:System.Data.TypedTableBase`1" /> 中根据指定的键和比较器按降序。
            </summary>
      <param name="source">
                一个 <see cref="T:System.Data.TypedTableBase`1" /> ，其中包含 <see cref="T:System.Data.DataRow" /> 元素进行排序。
              </param>
      <param name="keySelector">
                用于从元素中提取键的函数。
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IComparer`1" /> 对键进行比较。
              </param>
      <typeparam name="TRow">
                中的行元素的类型 <paramref name="source" />, ，通常 <see cref="T:System.Data.DataRow" />。
              </typeparam>
      <typeparam name="TKey">
                返回的键的类型 <paramref name="keySelector" />。
              </typeparam>
      <returns>
              <see cref="T:System.Data.OrderedEnumerableRowCollection`1" /> 的元素进行排序由指定的键和比较器。
            </returns>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.Select``2(System.Data.TypedTableBase{``0},System.Func{``0,``1})">
      <summary>
              每个元素投影 <see cref="T:System.Data.TypedTableBase`1" /> 到一个新窗体。
            </summary>
      <param name="source">
                一个 <see cref="T:System.Data.TypedTableBase`1" /> ，其中包含 <see cref="T:System.Data.DataRow" /> 元素调用转换函数。
              </param>
      <param name="selector">
                用于将应用于每个元素的转换函数。
              </param>
      <typeparam name="TRow">
                中的行元素的类型 <paramref name="source" />, ，<see cref="T:System.Data.DataRow" />。
              </typeparam>
      <returns>
              <see cref="T:System.Data.EnumerableRowCollection`1" /> 其元素是调用转换函数的每个元素的结果 <paramref name="source" />。
            </returns>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.Where``1(System.Data.TypedTableBase{``0},System.Func{``0,System.Boolean})">
      <summary>
              筛选基于指定的谓词的行的序列。
            </summary>
      <param name="source">
                一个 <see cref="T:System.Data.TypedTableBase`1" /> ，其中包含 <see cref="T:System.Data.DataRow" /> 元素进行筛选。
              </param>
      <param name="predicate">
                用于测试每个元素是否满足条件的函数。
              </param>
      <typeparam name="TRow">
                中的行元素的类型 <paramref name="source" />, ，<see cref="T:System.Data.DataRow" />。
              </typeparam>
      <returns>
              <see cref="T:System.Data.OrderedEnumerableRowCollection`1" /> ，其中包含输入序列中满足条件的行。
            </returns>
    </member>
    <member name="P:System.Data.DataRowComparer.Default">
      <summary>
              获取的单一实例 <see cref="T:System.Data.DataRowComparer`1" />。
               此属性是只读的。
            </summary>
      <returns>
              一个实例 <see cref="T:System.Data.DataRowComparer`1" />。
            </returns>
    </member>
    <member name="P:System.Data.DataRowComparer`1.Default">
      <summary>
              获取的单一实例 <see cref="T:System.Data.DataRowComparer`1" />。
               此属性是只读的。
            </summary>
      <returns>
              一个实例 <see cref="T:System.Data.DataRowComparer`1" />。
            </returns>
    </member>
    <member name="T:System.Data.DataRowComparer">
      <summary>
              返回的单一实例 <see cref="T:System.Data.DataRowComparer`1" /> 类。
            </summary>
    </member>
    <member name="T:System.Data.DataRowComparer`1">
      <summary>
              比较两个 <see cref="T:System.Data.DataRow" /> 对象是否相等，通过使用基于值的比较。
            </summary>
      <typeparam name="TRow">
                要进行比较，通常的对象类型 <see cref="T:System.Data.DataRow" />。
              </typeparam>
    </member>
    <member name="T:System.Data.DataRowExtensions">
      <summary>
              定义的扩展方法 <see cref="T:System.Data.DataRow" /> 类。
               这是一个静态类。
            </summary>
    </member>
    <member name="T:System.Data.DataTableExtensions">
      <summary>
              定义的扩展方法 <see cref="T:System.Data.DataTable" /> 类。
              <see cref="T:System.Data.DataTableExtensions" /> 是一个静态类。
            </summary>
    </member>
    <member name="T:System.Data.EnumerableRowCollection">
      <summary>
              表示一套 <see cref="T:System.Data.DataRow" /> 从返回的对象 LINQ to DataSet 查询。
               此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。 </summary>
    </member>
    <member name="T:System.Data.EnumerableRowCollection`1">
      <summary>
              表示一套 <see cref="T:System.Data.DataRow" /> 从查询返回的对象。
               此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。
            </summary>
      <typeparam name="TRow">
                源中的对象的类型进行排序，通常 <see cref="T:System.Data.DataRow" />。
              </typeparam>
    </member>
    <member name="T:System.Data.EnumerableRowCollectionExtensions">
      <summary>
              包含数据行集合类的扩展方法。
               此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。
            </summary>
    </member>
    <member name="T:System.Data.OrderedEnumerableRowCollection`1">
      <summary>
              此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。
               表示从查询返回的有序 <see cref="T:System.Data.DataRow" /> 对象的集合。
            </summary>
      <typeparam name="TRow">
                源序列中的对象类型（通常为 <see cref="T:System.Data.DataRow" />）。
              </typeparam>
    </member>
    <member name="T:System.Data.TypedTableBase`1">
      <summary>
              
                Visual Studio 和 XSD.exe .NET Framework 工具将此类型用作特型 <see cref="T:System.Data.DataTable" /> 对象生成的基类，并且不能直接从代码中使用此类型。
            </summary>
      <typeparam name="T">
                源序列中由表格表示的对象的类型（通常为 <see cref="T:System.Data.DataRow" />）。
              </typeparam>
    </member>
    <member name="T:System.Data.TypedTableBaseExtensions">
      <summary>
              包含的扩展方法 <see cref="T:System.Data.TypedTableBase`1" /> 类。
            </summary>
    </member>
  </members>
</doc>