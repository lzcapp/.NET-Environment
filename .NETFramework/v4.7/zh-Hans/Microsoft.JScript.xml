<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.JScript</name>
  </assembly>
  <members>
    <member name="F:Microsoft.JScript.ActivationObject.field_table">
      <summary>
              将存储在范围内的变量的数组。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.ArgumentsObject.callee">
      <summary>
              一个表示正在调用的函数的闭包函数。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.ArgumentsObject.caller">
      <summary>
              调用堆栈帧中的范围信息。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.ArgumentsObject.length">
      <summary>
              自变量的数量。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.BinaryOp.operand1">
      <summary>
              表示该操作的第一个操作数。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.BinaryOp.operand2">
      <summary>
              表示操作的第二个操作数。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.BinaryOp.operatorMeth">
      <summary>
              表示实际执行的操作。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.BinaryOp.operatorTok">
      <summary>
              表示请求的操作。
              <see cref="T:Microsoft.JScript.JSToken" /> 枚举值之一。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.BinaryOp.type1">
      <summary>
              表示该操作的第一个操作数的数据类型。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.BinaryOp.type2">
      <summary>
              表示操作的第二个操作数的数据类型。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Binding.defaultMember">
      <summary>
              存储一个对默认值引用的索引属性。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Binding.isAssignmentToDefaultIndexedProperty">
      <summary>
              存储一个值，该值指示绑定引用是否为默认值的索引属性。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Binding.isFullyResolved">
      <summary>
              存储一个值，该值指示是否对绑定引用进行完全解析。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Binding.isNonVirtual">
      <summary>
              存储一个值，该值指示是否绑定引用重写基类中的成员的成员。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Binding.name">
      <summary>
              存储标识绑定引用一个字符串。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.BreakOutOfFinally.target">
      <summary>
              存储异常的目标。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Closure.arguments">
      <summary>
              要使用的函数的参数。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Closure.caller">
      <summary>
              调用堆栈帧中的范围信息。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.COMMethodInfo._comObject">
      <summary>
              存储支持 JScript 进行通信，此外部 COM 方法的托管的对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.COMMethodInfo._name">
      <summary>
              存储此对象表示的外部 COM 方法的名称。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.COMMethodInfo.EmptyParams">
      <summary>
              将存储的数组 <see cref="T:System.Reflection.ParameterInfo" /> 具有零个元素的对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.ContinueOutOfFinally.target">
      <summary>
              存储异常的目标。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.DynamicFieldInfo.fieldTypeName">
      <summary>
              字段的类型。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.DynamicFieldInfo.name">
      <summary>
              字段的名称。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.DynamicFieldInfo.value">
      <summary>
              字段的值。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Empty.Value">
      <summary>
              指定未实例化的变量的值。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.EnumeratorObject.enumerator">
      <summary>
              包含所表示的枚举数 <see cref="T:Microsoft.JScript.EnumeratorObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.ErrorObject.description">
      <summary>
              指定说明错误的原因的消息。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.ErrorObject.message">
      <summary>
              指定说明错误的原因的消息。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.ErrorObject.number">
      <summary>
              指定错误号或错误代码。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.ErrorPrototype.name">
      <summary>
              指定的错误类型的名称。
               可能值包括错误、 EvalError、 RangeError、 ReferenceError、 SyntaxError、 TypeError 和 URIError。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.Infinity">
      <summary>
              表示正无穷。
               此字段为常数。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.NaN">
      <summary>
              表示一个值，不是数字 (NaN)。
               此字段为常数。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalActiveXObjectField">
      <summary>
              将一个引用存储 <see cref="T:Microsoft.JScript.ActiveXObjectConstructor" /> 对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalArrayField">
      <summary>
              将一个引用存储 <see cref="T:Microsoft.JScript.ArrayConstructor" /> 对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalBooleanField">
      <summary>
              将一个引用存储 <see cref="T:Microsoft.JScript.BooleanConstructor" /> 对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalDateField">
      <summary>
              将一个引用存储 <see cref="T:Microsoft.JScript.DateConstructor" /> 对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalEnumeratorField">
      <summary>
              将一个引用存储 <see cref="T:Microsoft.JScript.EnumeratorConstructor" /> 对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalErrorField">
      <summary>
              将一个引用存储 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalEvalErrorField">
      <summary>
              将一个引用存储 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象。
               对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.EvalError" />。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalFunctionField">
      <summary>
              将一个引用存储 <see cref="T:Microsoft.JScript.FunctionConstructor" /> 对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalNumberField">
      <summary>
              将一个引用存储 <see cref="T:Microsoft.JScript.NumberConstructor" /> 对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalObjectField">
      <summary>
              将一个引用存储 <see cref="T:Microsoft.JScript.ObjectConstructor" /> 对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalObjectPrototypeField">
      <summary>
              将一个引用存储 <see cref="T:Microsoft.JScript.ObjectPrototype" /> 对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalRangeErrorField">
      <summary>
              将一个引用存储 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象。
               对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.RangeError" />。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalReferenceErrorField">
      <summary>
              将一个引用存储 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象。
               对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.ReferenceError" />。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalRegExpField">
      <summary>
              将一个引用存储 <see cref="T:Microsoft.JScript.RegExpConstructor" /> 对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalStringField">
      <summary>
              将一个引用存储 <see cref="T:Microsoft.JScript.StringConstructor" /> 对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalSyntaxErrorField">
      <summary>
              将一个引用存储 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象。
               对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.SyntaxError" />。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalTypeErrorField">
      <summary>
              将一个引用存储 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象。
               对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.TypeError" />。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalURIErrorField">
      <summary>
              将一个引用存储 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象。
               对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.URIError" />。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalVBArrayField">
      <summary>
              将一个引用存储 <see cref="T:Microsoft.JScript.VBArrayConstructor" /> 对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.undefined">
      <summary>
              表示为 null 的值。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Globals.contextEngine">
      <summary>
              存储到单个的当前上下文中运行的脚本引擎的全局引用。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSObject.field_table">
      <summary>
              将存储动态添加和删除从对象的字段的列表。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSPrototypeObject.constructor">
      <summary>
              存储构造函数的函数对象的定义基于原型的对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LateBinding.obj">
      <summary>
              将存储在定义的绑定引用对象的引用。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.concat">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.ArrayPrototype.concat(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object[])" /> 方法 <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.constructor">
      <summary>
              将一个引用存储 <see cref="T:Microsoft.JScript.ArrayConstructor" /> 对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.join">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.ArrayPrototype.join(System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.pop">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.ArrayPrototype.pop(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.push">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.ArrayPrototype.push(System.Object,System.Object[])" /> 方法 <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.reverse">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.ArrayPrototype.reverse(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.shift">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.ArrayPrototype.shift(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.slice">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.ArrayPrototype.slice(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Double,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.sort">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.ArrayPrototype.sort(System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.splice">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.ArrayPrototype.splice(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Double,System.Double,System.Object[])" /> 方法 <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.toLocaleString">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.ArrayPrototype.toLocaleString(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.toString">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.ArrayPrototype.toString(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.unshift">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.ArrayPrototype.unshift(System.Object,System.Object[])" /> 方法 <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientBooleanPrototype.constructor">
      <summary>
              将一个引用存储 <see cref="T:Microsoft.JScript.BooleanConstructor" /> 对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientBooleanPrototype.toString">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.BooleanPrototype.toString(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.BooleanPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientBooleanPrototype.valueOf">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.BooleanPrototype.valueOf(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.BooleanPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDateConstructor.parse">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DateConstructor.parse(System.String)" /> 方法 <see cref="T:Microsoft.JScript.DateConstructor" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDateConstructor.UTC">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DateConstructor.UTC(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DateConstructor" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.constructor">
      <summary>
              将一个引用存储 <see cref="T:Microsoft.JScript.DateConstructor" /> 对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getDate">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.getDate(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getDay">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.getDay(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getFullYear">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.getFullYear(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getHours">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.getHours(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getMilliseconds">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.getMilliseconds(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getMinutes">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.getMinutes(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getMonth">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.getMonth(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getSeconds">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.getSeconds(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getTime">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.getTime(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getTimezoneOffset">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.getTimezoneOffset(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getUTCDate">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.getUTCDate(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getUTCDay">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.getUTCDay(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getUTCFullYear">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.getUTCFullYear(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getUTCHours">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.getUTCHours(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getUTCMilliseconds">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.getUTCMilliseconds(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getUTCMinutes">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.getUTCMinutes(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getUTCMonth">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.getUTCMonth(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getUTCSeconds">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.getUTCSeconds(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getVarDate">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.getVarDate(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getYear">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.getYear(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setDate">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.setDate(System.Object,System.Double)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setFullYear">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.setFullYear(System.Object,System.Double,System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setHours">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.setHours(System.Object,System.Double,System.Object,System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setMilliseconds">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.setMilliseconds(System.Object,System.Double)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setMinutes">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.setMinutes(System.Object,System.Double,System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setMonth">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.setMonth(System.Object,System.Double,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setSeconds">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.setSeconds(System.Object,System.Double,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setTime">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.setTime(System.Object,System.Double)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setUTCDate">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.setUTCDate(System.Object,System.Double)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setUTCFullYear">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.setUTCFullYear(System.Object,System.Double,System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setUTCHours">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.setUTCHours(System.Object,System.Double,System.Object,System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setUTCMilliseconds">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.setUTCMilliseconds(System.Object,System.Double)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setUTCMinutes">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.setUTCMinutes(System.Object,System.Double,System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setUTCMonth">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.setUTCMonth(System.Object,System.Double,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setUTCSeconds">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.setUTCSeconds(System.Object,System.Double,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setYear">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.setYear(System.Object,System.Double)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.toDateString">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.toDateString(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.toGMTString">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.toGMTString(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.toLocaleDateString">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.toLocaleDateString(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.toLocaleString">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.toLocaleString(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.toLocaleTimeString">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.toLocaleTimeString(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.toString">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.toString(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.toTimeString">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.toTimeString(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.toUTCString">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.toUTCString(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.valueOf">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.valueOf(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientEnumeratorPrototype.atEnd">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.EnumeratorPrototype.atEnd(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.EnumeratorPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientEnumeratorPrototype.constructor">
      <summary>
              将一个引用存储 <see cref="T:Microsoft.JScript.EnumeratorConstructor" /> 对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientEnumeratorPrototype.item">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.EnumeratorPrototype.item(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.EnumeratorPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientEnumeratorPrototype.moveFirst">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.EnumeratorPrototype.moveFirst(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.EnumeratorPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientEnumeratorPrototype.moveNext">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.EnumeratorPrototype.moveNext(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.EnumeratorPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientErrorPrototype.constructor">
      <summary>
              将一个引用存储 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientErrorPrototype.name">
      <summary>
              将包含错误的子类型的名称的字符串存储。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientErrorPrototype.toString">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.ErrorPrototype.toString(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.ErrorPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientFunctionPrototype.apply">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.FunctionPrototype.apply(System.Object,System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.FunctionPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientFunctionPrototype.call">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.FunctionPrototype.call(System.Object,System.Object,System.Object[])" /> 方法 <see cref="T:Microsoft.JScript.FunctionPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientFunctionPrototype.constructor">
      <summary>
              将一个引用存储 <see cref="T:Microsoft.JScript.FunctionConstructor" /> 对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientFunctionPrototype.toString">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.FunctionPrototype.toString(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.FunctionPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.boolean">
      <summary>
              将存储的托管的类型对应于 JScript <see langword="boolean" /> 数据类型。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.byte">
      <summary>
              将存储的托管的类型对应于 JScript <see langword="byte" /> 数据类型。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.char">
      <summary>
              将存储的托管的类型对应于 JScript <see langword="char" /> 数据类型。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.decimal">
      <summary>
              将存储的托管的类型对应于 JScript <see langword="decimal" /> 数据类型。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.decodeURI">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.GlobalObject.decodeURI(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.GlobalObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.decodeURIComponent">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.GlobalObject.decodeURIComponent(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.GlobalObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.double">
      <summary>
              将存储的托管的类型对应于 JScript <see langword="double" /> 数据类型。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.encodeURI">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.GlobalObject.encodeURI(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.GlobalObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.encodeURIComponent">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.GlobalObject.encodeURIComponent(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.GlobalObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.escape">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.GlobalObject.escape(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.GlobalObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.eval">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.GlobalObject.eval(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.GlobalObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.float">
      <summary>
              将存储的托管的类型对应于 JScript <see langword="float" /> 数据类型。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.GetObject">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.GlobalObject.GetObject(System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.GlobalObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.Infinity">
      <summary>
              表示正无穷。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.int">
      <summary>
              将存储的托管的类型对应于 JScript <see langword="int" /> 数据类型。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.isFinite">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.GlobalObject.isFinite(System.Double)" /> 方法 <see cref="T:Microsoft.JScript.GlobalObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.isNaN">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.GlobalObject.isNaN(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.GlobalObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.long">
      <summary>
              将存储的托管的类型对应于 JScript <see langword="long" /> 数据类型。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.NaN">
      <summary>
              表示一个值，不是数字 (NaN)。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.parseFloat">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.GlobalObject.parseFloat(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.GlobalObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.parseInt">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.GlobalObject.parseInt(System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.GlobalObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.sbyte">
      <summary>
              将存储的托管的类型对应于 JScript <see langword="sbyte" /> 数据类型。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.ScriptEngine">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.GlobalObject.ScriptEngine" /> 方法 <see cref="T:Microsoft.JScript.GlobalObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.ScriptEngineBuildVersion">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.GlobalObject.ScriptEngineBuildVersion" /> 方法 <see cref="T:Microsoft.JScript.GlobalObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.ScriptEngineMajorVersion">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.GlobalObject.ScriptEngineMajorVersion" /> 方法 <see cref="T:Microsoft.JScript.GlobalObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.ScriptEngineMinorVersion">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.GlobalObject.ScriptEngineMinorVersion" /> 方法 <see cref="T:Microsoft.JScript.GlobalObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.short">
      <summary>
              将存储的托管的类型对应于 JScript <see langword="short" /> 数据类型。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.uint">
      <summary>
              将存储的托管的类型对应于 JScript <see langword="uint" /> 数据类型。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.ulong">
      <summary>
              将存储的托管的类型对应于 JScript <see langword="ulong" /> 数据类型。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.undefined">
      <summary>
              表示为 null 的值。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.unescape">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.GlobalObject.unescape(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.GlobalObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.ushort">
      <summary>
              将存储的托管的类型对应于 JScript <see langword="ushort" /> 数据类型。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.void">
      <summary>
              存储不返回值的函数的返回值对应的托管的类型。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.abs">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.MathObject.abs(System.Double)" /> 方法 <see cref="T:Microsoft.JScript.MathObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.acos">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.MathObject.acos(System.Double)" /> 方法 <see cref="T:Microsoft.JScript.MathObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.asin">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.MathObject.asin(System.Double)" /> 方法 <see cref="T:Microsoft.JScript.MathObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.atan">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.MathObject.atan(System.Double)" /> 方法 <see cref="T:Microsoft.JScript.MathObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.atan2">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.MathObject.atan2(System.Double,System.Double)" /> 方法 <see cref="T:Microsoft.JScript.MathObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.ceil">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.MathObject.ceil(System.Double)" /> 方法 <see cref="T:Microsoft.JScript.MathObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.cos">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.MathObject.cos(System.Double)" /> 方法 <see cref="T:Microsoft.JScript.MathObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.E">
      <summary>
              存储一个值，表示欧拉常量，由常数 e 是自然对数的基数。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.exp">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.MathObject.exp(System.Double)" /> 方法 <see cref="T:Microsoft.JScript.MathObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.floor">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.MathObject.floor(System.Double)" /> 方法 <see cref="T:Microsoft.JScript.MathObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.LN10">
      <summary>
              存储一个值，该值表示对数底 e 为 10，10 的自然对数。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.LN2">
      <summary>
              存储一个值，该值表示对数底 e 2，2 的自然对数。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.log">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.MathObject.log(System.Double)" /> 方法 <see cref="T:Microsoft.JScript.MathObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.LOG10E">
      <summary>
              存储一个值，该值表示对数的底 10 e, 的常用对数 e。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.LOG2E">
      <summary>
              存储一个值，该值表示对数的底 2 e, 的二进制对数 e。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.max">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.MathObject.max(System.Object,System.Object,System.Object[])" /> 方法 <see cref="T:Microsoft.JScript.MathObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.min">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.MathObject.min(System.Object,System.Object,System.Object[])" /> 方法 <see cref="T:Microsoft.JScript.MathObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.PI">
      <summary>
              存储一个值，表示的比率圆的周长与其直径，由常量指定 π。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.pow">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.MathObject.pow(System.Double,System.Double)" /> 方法 <see cref="T:Microsoft.JScript.MathObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.random">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.MathObject.random" /> 方法 <see cref="T:Microsoft.JScript.MathObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.round">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.MathObject.round(System.Double)" /> 方法 <see cref="T:Microsoft.JScript.MathObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.sin">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.MathObject.sin(System.Double)" /> 方法 <see cref="T:Microsoft.JScript.MathObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.sqrt">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.MathObject.sqrt(System.Double)" /> 方法 <see cref="T:Microsoft.JScript.MathObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.SQRT1_2">
      <summary>
              存储一个值，表示以下等效值: (√ 2) / 2，√(½) 和 1/(√2)。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.SQRT2">
      <summary>
              存储一个值，该值表示 √ 2。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.tan">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.MathObject.tan(System.Double)" /> 方法 <see cref="T:Microsoft.JScript.MathObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientNumberPrototype.constructor">
      <summary>
              将一个引用存储 <see cref="T:Microsoft.JScript.NumberConstructor" /> 对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientNumberPrototype.toExponential">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.NumberPrototype.toExponential(System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.NumberPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientNumberPrototype.toFixed">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.NumberPrototype.toFixed(System.Object,System.Double)" /> 方法 <see cref="T:Microsoft.JScript.NumberPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientNumberPrototype.toLocaleString">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.NumberPrototype.toLocaleString(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.NumberPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientNumberPrototype.toPrecision">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.NumberPrototype.toPrecision(System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.NumberPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientNumberPrototype.toString">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.NumberPrototype.toString(System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.NumberPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientNumberPrototype.valueOf">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.NumberPrototype.valueOf(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.NumberPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientObjectPrototype.constructor">
      <summary>
              将一个引用存储 <see cref="T:Microsoft.JScript.ObjectConstructor" /> 对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientObjectPrototype.hasOwnProperty">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.ObjectPrototype.hasOwnProperty(System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.ObjectPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientObjectPrototype.isPrototypeOf">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.ObjectPrototype.isPrototypeOf(System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.ObjectPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientObjectPrototype.propertyIsEnumerable">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.ObjectPrototype.propertyIsEnumerable(System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.ObjectPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientObjectPrototype.toLocaleString">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.ObjectPrototype.toLocaleString(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.ObjectPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientObjectPrototype.toString">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.ObjectPrototype.toString(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.ObjectPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientObjectPrototype.valueOf">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.ObjectPrototype.valueOf(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.ObjectPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientRegExpPrototype.compile">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.RegExpPrototype.compile(System.Object,System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.RegExpPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientRegExpPrototype.constructor">
      <summary>
              将一个引用存储 <see cref="T:Microsoft.JScript.RegExpConstructor" /> 对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientRegExpPrototype.exec">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.RegExpPrototype.exec(System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.RegExpPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientRegExpPrototype.test">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.RegExpPrototype.test(System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.RegExpPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientRegExpPrototype.toString">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.RegExpPrototype.toString(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.RegExpPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringConstructor.fromCharCode">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringConstructor.fromCharCode(System.Object[])" /> 方法 <see cref="T:Microsoft.JScript.StringConstructor" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.anchor">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.anchor(System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.big">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.big(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.blink">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.blink(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.bold">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.bold(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.charAt">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.charAt(System.Object,System.Double)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.charCodeAt">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.charCodeAt(System.Object,System.Double)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.concat">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.concat(System.Object,System.Object[])" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.constructor">
      <summary>
              将一个引用存储 <see cref="T:Microsoft.JScript.StringConstructor" /> 对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.fixed">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.fixed(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.fontcolor">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.fontcolor(System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.fontsize">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.fontsize(System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.indexOf">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.indexOf(System.Object,System.Object,System.Double)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.italics">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.italics(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.lastIndexOf">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.lastIndexOf(System.Object,System.Object,System.Double)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.link">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.link(System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.localeCompare">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.localeCompare(System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.match">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.match(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.replace">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.replace(System.Object,System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.search">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.search(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.slice">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.slice(System.Object,System.Double,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.small">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.small(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.split">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.split(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.strike">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.strike(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.sub">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.sub(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.substr">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.substr(System.Object,System.Double,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.substring">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.substring(System.Object,System.Double,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.sup">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.sup(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.toLocaleLowerCase">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.toLocaleLowerCase(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.toLocaleUpperCase">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.toLocaleUpperCase(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.toLowerCase">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.toLowerCase(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.toString">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.toString(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.toUpperCase">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.toUpperCase(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.valueOf">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.valueOf(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientVBArrayPrototype.constructor">
      <summary>
              将一个引用存储 <see cref="T:Microsoft.JScript.VBArrayConstructor" /> 对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientVBArrayPrototype.dimensions">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.VBArrayPrototype.dimensions(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.VBArrayPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientVBArrayPrototype.getItem">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.VBArrayPrototype.getItem(System.Object,System.Object[])" /> 方法 <see cref="T:Microsoft.JScript.VBArrayPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientVBArrayPrototype.lbound">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.VBArrayPrototype.lbound(System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.VBArrayPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientVBArrayPrototype.toArray">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.VBArrayPrototype.toArray(System.Object,Microsoft.JScript.Vsa.VsaEngine)" /> 方法 <see cref="T:Microsoft.JScript.VBArrayPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.LenientVBArrayPrototype.ubound">
      <summary>
              将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.VBArrayPrototype.ubound(System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.VBArrayPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.MathObject.E">
      <summary>
              存储一个值，表示欧拉常量，即自然对数的底，由常量指定基 e。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.MathObject.LN10">
      <summary>
              存储一个值，该值表示对数底 e 为 10，10 的自然对数。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.MathObject.LN2">
      <summary>
              存储一个值，该值表示对数底 e 2，2 的自然对数。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.MathObject.LOG10E">
      <summary>
              存储一个值，该值表示对数的底 10 e, 的常用对数 e。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.MathObject.LOG2E">
      <summary>
              存储一个值，该值表示对数的底 2 e, 的二进制对数 e。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.MathObject.PI">
      <summary>
              存储一个值，表示的比率圆的周长与其直径，由常量指定 π。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.MathObject.SQRT1_2">
      <summary>
              存储一个值，表示以下等效值: (√ 2) / 2，√(½) 和 1/(√2)。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.MathObject.SQRT2">
      <summary>
              存储一个值，该值表示 √ 2。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Missing.Value">
      <summary>
              指定已实例化，但尚未设置其值的变量的值。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.NumberConstructor.MAX_VALUE">
      <summary>
              表示 <see cref="T:System.Double" /> 的最大可能值。
               此字段为常数。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.NumberConstructor.MIN_VALUE">
      <summary>
              表示大于零的最小正 <see cref="T:System.Double" /> 值。
               此字段为常数。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.NumberConstructor.NaN">
      <summary>
              表示一个值，不是数字 (NaN)。
               此字段为常数。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.NumberConstructor.NEGATIVE_INFINITY">
      <summary>
              表示负无穷。
               此字段为常数。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.NumberConstructor.POSITIVE_INFINITY">
      <summary>
              表示正无穷。
               此字段为常数。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.ReferenceAttribute.reference">
      <summary>
              指定对程序集的引用。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.ScriptFunction.ilength">
      <summary>
              将存储中的元素数目 <paramref name="args" /> 参数 <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" /> 方法。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.ScriptObject.engine">
      <summary>
              存储对脚本引擎的引用。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.ScriptObject.parent">
      <summary>
              存储对父对象的引用。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.ScriptStream.Error">
      <summary>
              存储对标准控制台的引用 <see cref="P:System.Console.Error" /> 流或自定义 <see cref="T:Microsoft.JScript.COMCharStream" />。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.ScriptStream.Out">
      <summary>
              存储对标准控制台的引用 <see cref="P:System.Console.Out" /> 流或自定义 <see cref="T:Microsoft.JScript.COMCharStream" />。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.StackFrame.closureInstance">
      <summary>
              存储到当前堆栈帧的调用方的引用。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.StackFrame.localVars">
      <summary>
              将存储此堆栈帧的局部变量。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.UnaryOp.operand">
      <summary>
              表示的操作数。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.applicationPath">
      <summary>
              获取或设置应用程序的路径。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.assemblyVersion">
      <summary>
              获取或设置程序集版本。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.compiledRootNamespace">
      <summary>
              获取或设置已编译的根命名空间。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.engineMoniker">
      <summary>
              获取或设置引擎名字对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.engineName">
      <summary>
              获取或设置引擎名称。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.engineSite">
      <summary>
              获取或设置引擎站点
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.errorLocale">
      <summary>
              获取或设置错误号。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.executionEvidence">
      <summary>
              获取或设置执行 id。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.failedCompilation">
      <summary>
              获取或设置一个值，该值指示是否在编译失败。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.genDebugInfo">
      <summary>
              获取或设置一个值，该值指示是否生成调试信息。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.haveCompiledState">
      <summary>
              获取或设置一个值，该值指示是否已编译的状态。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.isClosed">
      <summary>
              获取或设置一个值，该值指示是否关闭了该引擎。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.isDebugInfoSupported">
      <summary>
              获取或设置一个值，该值指示是否支持调试信息。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.isEngineCompiled">
      <summary>
              获取或设置一个值，指示引擎是否已编译。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.isEngineDirty">
      <summary>
              获取或设置一个值，该值指示该项的当前内存中表示是否从保留的表示形式不同。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.isEngineInitialized">
      <summary>
              获取或设置一个值，该值指示是否初始化该引擎。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.isEngineRunning">
      <summary>
              获取或设置一个值，指示引擎是否正在运行。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.loadedAssembly">
      <summary>
              获取或设置加载的程序集。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.nameTable">
      <summary>
              获取或设置的名称表。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.rootNamespace">
      <summary>
              获取或设置的根命名空间。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.scriptLanguage">
      <summary>
              获取或设置的脚本语言。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.startupClass">
      <summary>
              获取或设置启动类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.startupInstance">
      <summary>
              获取或设置启动实例。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.vsaItems">
      <summary>
              获取或设置子对象的集合。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaStartup.site">
      <summary>
              此引擎 VSA 站点。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.ResInfo.filename">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.ResInfo.fullpath">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.ResInfo.isLinked">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.ResInfo.isPublic">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.ResInfo.name">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.VsaItem.flag">
      <summary>
              指定的形式表示的项的类型 <see cref="F:Microsoft.Vsa.VsaItemFlag.Class" />, ，<see cref="F:Microsoft.Vsa.VsaItemFlag.Module" />, ，或 <see cref="F:Microsoft.Vsa.VsaItemFlag.None" />。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.VsaItem.isDirty">
      <summary>
              指定的项的当前内存中表示是否从保留的表示形式不同。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.VsaItem.name">
      <summary>
              指定项的名称。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.VsaItem.type">
      <summary>
              指定的形式表示的项的类型 <see cref="F:Microsoft.Vsa.VsaItemType.Code" />, ，<see cref="F:Microsoft.Vsa.VsaItemType.Reference" />, ，或 <see cref="F:Microsoft.Vsa.VsaItemType.AppGlobal" />。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.ActivationObject.CreateField(System.String,System.Reflection.FieldAttributes,System.Object)">
      <summary>
              创建一个新的全局变量，使用指定的名称、 值和属性。
            </summary>
      <param name="name">
                字段的名称。
              </param>
      <param name="attributeFlags">
                描述字段的特性的枚举值的按位组合。
                <see cref="F:System.Reflection.FieldAttributes.Static" /> 会自动添加。
              </param>
      <param name="value">
                字段的值。
              </param>
      <returns>
              具有指定的名称、 值和属性的全局变量。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ActivationObject.GetDefaultThisObject">
      <summary>
              获取包含的对象的当前默认作用域，可以是 <see langword="with" /> 语句范围或全局范围。
            </summary>
      <returns>
              当前的默认作用域。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ActivationObject.GetField(System.String,System.Int32)">
      <summary>
              返回通过搜索作用域层次结构中具有指定的名称的字段。
               此方法搜索的词法级别指定的作用域。
            </summary>
      <param name="name">
                要搜索的字段的名称。
              </param>
      <param name="lexLevel">
                要搜索的词法级别。
              </param>
      <returns>
              一个 <see cref="T:System.Reflection.FieldInfo" /> 具有指定的名称的对象。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ActivationObject.GetGlobalScope">
      <summary>
              获取通过搜索作用域层次结构，直到它找到一个范围，包括静态变量，例如，模块作用域的全局作用域。
            </summary>
      <returns>
              全局作用域。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ActivationObject.GetLocalField(System.String)">
      <summary>
              获取具有指定的名称的字段的局部声明。
               这用于编译时错误检查。
            </summary>
      <param name="name">
                字段的名称。
              </param>
      <returns>
              本地字段的声明。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ActivationObject.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>
              检索的数组 <see cref="T:System.Reflection.MemberInfo" /> 对应于指定的名称匹配的所有成员的对象。
            </summary>
      <param name="name">
                要搜索的成员的名称。
              </param>
      <param name="bindingAttr">
                指定搜索成员通过反射的执行方式的枚举值的按位组合。
              </param>
      <returns>
              匹配的对象的数组 <paramref name="name" /> 参数。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ActivationObject.GetMembers(System.Reflection.BindingFlags)">
      <summary>
              检索的数组 <see cref="T:System.Reflection.MemberInfo" /> 对应于当前对象的所有成员的对象。
            </summary>
      <param name="bindingAttr">
                指定搜索成员通过反射的执行方式的枚举值的按位组合。
              </param>
      <returns>
              包含当前对象的所有成员的对象数组。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ActivationObject.GetMemberValue(System.String,System.Int32)">
      <summary>
              获取通过搜索作用域层次结构的指定成员的值。
               此方法搜索的词法级别指定的作用域。
            </summary>
      <param name="name">
                要搜索的成员的名称。
              </param>
      <param name="lexlevel">
                要搜索的词法级别。
              </param>
      <returns>
              成员值 <paramref name="name" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ActiveXObjectConstructor.CreateInstance(System.Object[])">
      <summary>
              创建基于原型的对象，在指定的参数中传递的实例。
            </summary>
      <param name="args">
                要传递给构造函数的实参。
              </param>
      <returns>
              对象的实例。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ActiveXObjectConstructor.Invoke">
      <summary>
              在所有情况下均返回 null。
            </summary>
      <returns>
              null。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ArrayConstructor.ConstructArray(System.Object[])">
      <summary>
              帮助器方法，创建一个新数组，并使用指定的值填充它。
            </summary>
      <param name="args">
                要填充该数组的值。
              </param>
      <returns>
              新数组。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ArrayConstructor.CreateInstance(System.Object[])">
      <summary>
              创建基于原型的对象，在指定的参数中传递的实例。
            </summary>
      <param name="args">
                要传递给构造函数的实参。
              </param>
      <returns>
              对象的实例。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ArrayConstructor.Invoke(System.Object[])">
      <summary>
              调用基于原型的对象，在指定的参数中传递的方法。
            </summary>
      <param name="args">
                要传递给方法的参数。
              </param>
      <returns>
              对方法调用的结果。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ArrayLiteral.#ctor(Microsoft.JScript.Context,Microsoft.JScript.ASTList)">
      <summary>
              新实例初始化 <see cref="T:Microsoft.JScript.ArrayLiteral" /> 类，同时指定的上下文和元素。
            </summary>
      <param name="context">
                当前文档上下文中。
              </param>
      <param name="elements">
                数组的元素。
              </param>
    </member>
    <member name="M:Microsoft.JScript.ArrayObject.SpliceSlowly(System.UInt32,System.UInt32,System.Object[],Microsoft.JScript.ArrayObject,System.UInt32,System.UInt32)">
      <summary>
              添加和移除一个数组，数组中指定的位置中的元素。
               可以添加元素和 / 或删除元素。
            </summary>
      <param name="start">
                在此处添加和移除元素的此数组中的位置。
              </param>
      <param name="deleteCount">
                若要删除，如果有的元素数。
              </param>
      <param name="args">
                若要添加，如果任何元素。
              </param>
      <param name="outArray">
                一个数组，包含从该数组中移除的元素，如果有已被删除。
              </param>
      <param name="oldLength">
                以前的此数组长度。
              </param>
      <param name="newLength">
                此数组中的新长度。
              </param>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.concat(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object[])">
      <summary>
              连接对象或数组的指定的对象或数组的末尾。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="engine">
                对脚本引擎的引用。
              </param>
      <param name="args">
                对象或数组来将追加到 <paramref name="thisob" />。
              </param>
      <returns>
              <paramref name="thisob" /> 和 <paramref name="args" /> 串联在一起。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.join(System.Object,System.Object)">
      <summary>
              将指定数组的元素连接成一个字符串。
               指定的分隔符分隔元素。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="separator">
                要用于分隔元素的字符串。
                 默认值是逗号。
              </param>
      <returns>
              一个字符串，串联的元素 <paramref name="thisob" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.pop(System.Object)">
      <summary>
              从指定数组中移除最后一个元素并将其返回。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              最后一个元素的 <paramref name="thisob" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.push(System.Object,System.Object[])">
      <summary>
              将新元素添加到指定数组的末尾。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="args">
                要添加到元素 <paramref name="thisob" />。
              </param>
      <returns>
              新长度 <paramref name="thisob" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.reverse(System.Object)">
      <summary>
              反转指定数组的元素。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              <paramref name="thisob" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.shift(System.Object)">
      <summary>
              从指定数组中移除的第一个元素并将其返回。
               将剩余元素位移到前面的位置。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              第一个元素 <paramref name="thisob" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.slice(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Double,System.Object)">
      <summary>
              创建一个新数组，其中包含从指定数组的指定连续元素。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="engine">
                对脚本引擎的引用。
              </param>
      <param name="start">
                要获取的第一个连续元素。
              </param>
      <param name="end">
                要获取的最后一个连续元素。
              </param>
      <returns>
              一个新数组，包含之间的连续元素 <paramref name="thisob" />[<paramref name="start" />] 和 <paramref name="thisob" />[<paramref name="end" />]。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.sort(System.Object,System.Object)">
      <summary>
              使用指定的函数用于比较元素的指定数组的元素进行排序。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="function">
                要用于比较元素的函数。
              </param>
      <returns>
              <paramref name="thisob" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.splice(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Double,System.Double,System.Object[])">
      <summary>
              添加和移除数组中的指定位置处的数组中的元素。
               可以添加元素和 / 或删除元素。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="engine">
                对脚本引擎的引用。
              </param>
      <param name="start">
                要添加和移除元素的数组中的位置。
              </param>
      <param name="deleteCnt">
                若要删除，如果有的元素数。
              </param>
      <param name="args">
                若要添加，如果任何元素。
              </param>
      <returns>
              一个新数组，包含从已移除元素 <paramref name="thisob" />, ，如果任何已被删除。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.toLocaleString(System.Object)">
      <summary>
              创建的字符串表示形式的指定对象的串联元素并将它们与分开 <see cref="P:System.Globalization.TextInfo.ListSeparator" /> 和一个空格。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              一个字符串，串联的元素 <paramref name="thisob" /> 分隔这些与 <see cref="P:System.Globalization.TextInfo.ListSeparator" /> 和一个空格。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.toString(System.Object)">
      <summary>
              创建的字符串表示形式的指定对象的串联元素，并用逗号分隔它们。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              一个字符串，串联的元素 <paramref name="thisob" /> 并用逗号分隔这些。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.unshift(System.Object,System.Object[])">
      <summary>
              将新元素添加到指定数组的开头。
               将现有元素位移到后面的位置。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="args">
                要添加到元素 <paramref name="thisob" />。
              </param>
      <returns>
              新长度 <paramref name="thisob" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ArrayWrapper.GetType">
      <summary>
              获取数组的类型。
            </summary>
      <returns>
              一种 <see cref="T:System.Array" /> 或 <see cref="T:Microsoft.JScript.ArrayObject" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.BinaryOp.GetOperator(System.Reflection.IReflect,System.Reflection.IReflect)">
      <summary>
              确定对基于请求的操作的调用和操作数的数据类型的最佳方法。
            </summary>
      <param name="ir1">
                第一个操作数数据类型。
              </param>
      <param name="ir2">
                第二个操作数数据类型。
              </param>
      <returns>
              要调用对操作数的推荐的方法。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Binding.GetObject">
      <summary>
              当在派生类中重写，获取定义的绑定引用的对象。
            </summary>
      <returns>
              在定义的绑定引用对象。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Binding.HandleNoSuchMemberError">
      <summary>
              当在派生类中重写，处理其中的绑定引用成员不能存在的情况。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.Binding.IsMissing(System.Object)">
      <summary>
              确定指定的对象是否等效于 <see cref="T:Microsoft.JScript.Missing" />。
            </summary>
      <param name="value">
                要比较的对象。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="value" /> 等同于 <see cref="T:Microsoft.JScript.Missing" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Binding.ResolveRHValue">
      <summary>
              解析绑定引用的右侧。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.Binding.TranslateToILObject(System.Reflection.Emit.ILGenerator,System.Type,System.Boolean)">
      <summary>
              当在派生类中重写生成 Microsoft 中间语言 (MSIL) 代码上定义的绑定引用的对象。
            </summary>
      <param name="il">
                一个生成 Microsoft 中间语言 (MSIL) 指令的对象。
              </param>
      <param name="obtype">
                对象的类型。
              </param>
      <param name="noValue">
                <see langword="true" /> 如果没有一个值; 如果该对象。否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Binding.TranslateToILWithDupOfThisOb(System.Reflection.Emit.ILGenerator)">
      <summary>
              当在派生类中重写生成的绑定引用的 Microsoft 中间语言 (MSIL) 代码。
               必要时，将复制到计算堆栈上当前最顶端的值，然后将推送到计算堆栈上的副本。
            </summary>
      <param name="il">
                一个生成 Microsoft 中间语言 (MSIL) 指令的对象。
              </param>
    </member>
    <member name="M:Microsoft.JScript.BitwiseBinary.#ctor(System.Int32)">
      <summary>
              初始化 <see cref="T:Microsoft.JScript.BitwiseBinary" /> 类的新实例。
            </summary>
      <param name="operatorTok">
                <see cref="T:Microsoft.JScript.JSToken" /> 枚举值之一。
                 指定要执行的操作。
              </param>
    </member>
    <member name="M:Microsoft.JScript.BitwiseBinary.EvaluateBitwiseBinary(System.Object,System.Object)">
      <summary>
              执行按位二元运算。
            </summary>
      <param name="v1">
                第一个操作数。
              </param>
      <param name="v2">
                第二个操作数。
              </param>
      <returns>
              操作的结果。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.BlockScope.#ctor(Microsoft.JScript.ScriptObject,System.String,System.Int32)">
      <summary>
              初始化 <see cref="T:Microsoft.JScript.BlockScope" /> 类的新实例。
            </summary>
      <param name="parent">
                作用域的父级。
              </param>
      <param name="name">
                作用域的名称。
              </param>
      <param name="scopeId">
                作用域的 ID。
              </param>
    </member>
    <member name="M:Microsoft.JScript.BlockScope.CreateField(System.String,System.Reflection.FieldAttributes,System.Object)">
      <summary>
              创建一个新的作用域变量，使用指定的名称、 值和属性。
            </summary>
      <param name="name">
                字段的名称。
              </param>
      <param name="attributeFlags">
                描述字段的特性的枚举值的按位组合。
              </param>
      <param name="value">
                字段的值。
              </param>
      <returns>
              具有指定的名称、 值和属性的作用域变量。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.BooleanConstructor.CreateInstance(System.Object[])">
      <summary>
              创建基于原型的对象，在指定的参数中传递的实例。
            </summary>
      <param name="args">
                要传递给构造函数的实参。
              </param>
      <returns>
              对象的实例。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.BooleanConstructor.Invoke(System.Object)">
      <summary>
              调用基于原型的对象，在指定的参数中传递的方法。
            </summary>
      <param name="arg">
                要传递给方法的参数。
              </param>
      <returns>
              对方法调用的结果。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.BooleanObject.#ctor(Microsoft.JScript.ScriptObject,System.Type)">
      <summary>
              新实例初始化 <see cref="T:Microsoft.JScript.BooleanObject" /> 类，同时指定的父和子类型。
            </summary>
      <param name="prototype">
                对象的父级。
              </param>
      <param name="subType">
                对象的子类型。
              </param>
    </member>
    <member name="M:Microsoft.JScript.BooleanObject.GetType">
      <summary>
              返回 <see cref="T:System.Boolean" /> 或 <see cref="T:Microsoft.JScript.BooleanObject" />。
            </summary>
      <returns>
              <see cref="T:System.Boolean" /> 或 <see cref="T:Microsoft.JScript.BooleanObject" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.BooleanPrototype.#ctor(Microsoft.JScript.ObjectPrototype,System.Type)">
      <summary>
              初始化 <see cref="T:Microsoft.JScript.BooleanPrototype" /> 类的新实例。
            </summary>
      <param name="parent">
                此类的父类一个静态实例。
              </param>
      <param name="baseType">
                此类的类型的实例。
              </param>
    </member>
    <member name="M:Microsoft.JScript.BooleanPrototype.toString(System.Object)">
      <summary>
              通过使用创建的字符串表示形式指定的对象 <see cref="T:Microsoft.JScript.Convert" /> 类。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              字符串表示形式 <paramref name="thisob" /> ，它由创建 <see cref="T:Microsoft.JScript.Convert" /> 类。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.BooleanPrototype.valueOf(System.Object)">
      <summary>
              返回指定的对象作为 <see cref="T:Microsoft.JScript.BooleanObject" /> 或 <see cref="T:System.Boolean" />。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              <paramref name="thisob" /> 作为 <see cref="T:Microsoft.JScript.BooleanObject" /> 或 <see cref="T:System.Boolean" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.BreakOutOfFinally.#ctor(System.Int32)">
      <summary>
              新实例初始化 <see cref="T:Microsoft.JScript.BreakOutOfFinally" /> 类，使用指定的目标。
            </summary>
      <param name="target">
                异常的目标。
              </param>
    </member>
    <member name="M:Microsoft.JScript.BreakOutOfFinally.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:Microsoft.JScript.BreakOutOfFinally" /> 类，使用指定的错误消息。
            </summary>
      <param name="m">
                描述错误的消息。
              </param>
    </member>
    <member name="M:Microsoft.JScript.BreakOutOfFinally.#ctor(System.String,System.Exception)">
      <summary>
              新实例初始化 <see cref="T:Microsoft.JScript.BreakOutOfFinally" /> 类，使用指定的错误消息和对导致此异常的内部异常的引用。
            </summary>
      <param name="m">
                描述错误的消息。
              </param>
      <param name="e">
                导致当前异常的异常。
              </param>
    </member>
    <member name="M:Microsoft.JScript.BreakOutOfFinally.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              存储中的异常有关的信息 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。
               存储的信息包括 <see cref="F:Microsoft.JScript.ContinueOutOfFinally.target" /> 值。
            </summary>
      <param name="s">
                有关所引发的异常的序列化的对象数据。
              </param>
      <param name="c">
                有关源或目标的上下文信息。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Closure.#ctor(Microsoft.JScript.FunctionObject)">
      <summary>
              初始化 <see cref="T:Microsoft.JScript.Closure" /> 类的新实例。
            </summary>
      <param name="func">
                此闭包表示的函数。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Closure.ToString">
      <summary>
              创建的字符串表示形式的函数，例如函数或上下文的名称。
            </summary>
      <returns>
              函数的字符串表示形式。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.CmdLineException.#ctor">
      <summary>
              初始化 <see cref="T:Microsoft.JScript.CmdLineException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.CmdLineException.#ctor(Microsoft.JScript.CmdLineError,System.Globalization.CultureInfo)">
      <summary>
              初始化的新实例 <see cref="T:Microsoft.JScript.CmdLineException" /> 类，使用指定的错误代码和区域性信息。
            </summary>
      <param name="errorCode">
                枚举值之一。
                 指定错误的类型。
              </param>
      <param name="culture">
                特定于区域性的信息。
              </param>
    </member>
    <member name="M:Microsoft.JScript.CmdLineException.#ctor(Microsoft.JScript.CmdLineError,System.String,System.Globalization.CultureInfo)">
      <summary>
              新实例初始化 <see cref="T:Microsoft.JScript.CmdLineException" /> 类，使用指定的错误代码、 上下文和区域性信息。
            </summary>
      <param name="errorCode">
                枚举值之一。
                 指定错误的类型。
              </param>
      <param name="context">
                错误发生的上下文。
              </param>
      <param name="culture">
                特定于区域性的信息。
              </param>
    </member>
    <member name="M:Microsoft.JScript.CmdLineException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see cref="T:Microsoft.JScript.CmdLineException" /> 类，使用序列化的数据。
            </summary>
      <param name="s">
                有关所引发的异常的序列化的对象数据。
              </param>
      <param name="c">
                有关源或目标的上下文信息。
              </param>
    </member>
    <member name="M:Microsoft.JScript.CmdLineException.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:Microsoft.JScript.CmdLineException" /> 类，使用指定的错误消息。
            </summary>
      <param name="m">
                描述错误的消息。
              </param>
    </member>
    <member name="M:Microsoft.JScript.CmdLineException.#ctor(System.String,System.Exception)">
      <summary>
              新实例初始化 <see cref="T:Microsoft.JScript.CmdLineException" /> 类，使用指定的错误消息和对导致此异常的内部异常的引用。
            </summary>
      <param name="m">
                描述错误的消息。
              </param>
      <param name="e">
                如果不指定任何内部异常，则当前异常，则为 null 的原因的异常。
              </param>
    </member>
    <member name="M:Microsoft.JScript.CmdLineException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              存储序列化有关所引发的异常对象数据。
            </summary>
      <param name="s">
                有关所引发的异常的序列化的对象数据。
              </param>
      <param name="c">
                有关源或目标的上下文信息
              </param>
    </member>
    <member name="M:Microsoft.JScript.CmdLineException.ResourceKey(Microsoft.JScript.CmdLineError)">
      <summary>
              在资源文件中返回指定的错误的键。
            </summary>
      <param name="errorCode">
                枚举值之一。
                 指定要获取的项的错误。
              </param>
      <returns>
              密钥 <paramref name="errorCode" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.CmdLineOptionParser.#ctor">
      <summary>
              初始化 <see cref="T:Microsoft.JScript.CmdLineOptionParser" /> 类的新实例。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.CmdLineOptionParser.IsArgumentOption(System.String,System.String)">
      <summary>
              从指定的命令行选项中获取的参数。
               适用于只具有一个名称，如选项 /out:&lt;filename&gt;。
            </summary>
      <param name="option">
                用户指定的命令行选项。
              </param>
      <param name="prefix">
                选项名称。
              </param>
      <returns>
              参数，""如果该参数不指定，或者，如果数据库的选项或参数格式不正确。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.CmdLineOptionParser.IsArgumentOption(System.String,System.String,System.String)">
      <summary>
              从指定的命令行选项中获取的参数。
               适用于选项可以指定通过长期或短期格式的选项名称，如 /r 或 /reference 为 /r[eference]:&lt;file list&gt;。
            </summary>
      <param name="option">
                用户指定的命令行选项。
              </param>
      <param name="shortPrefix">
                选项名缩写形式。
              </param>
      <param name="longPrefix">
                选项名称长格式。
              </param>
      <returns>
              参数，""如果该参数不指定，或者，如果数据库的选项或参数格式不正确。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.CmdLineOptionParser.IsBooleanOption(System.String,System.String)">
      <summary>
              获取 + 或 - 参数从指定的命令行选项。
               适用于只具有一个名称，如选项 /debug[+|-]。
            </summary>
      <param name="option">
                用户指定的命令行选项。
              </param>
      <param name="prefix">
                选项名称。
              </param>
      <returns>
              <see langword="false" /> 有关 -; <see langword="true" /> 为 + 或如果未指定的参数; 如果值为 null 的选项或参数格式不正确。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.CmdLineOptionParser.IsBooleanOption(System.String,System.String,System.String)">
      <summary>
              获取 + 或 - 参数从指定的命令行选项。
               适用于可以通过长期或短期格式的选项名称指定的选项。
            </summary>
      <param name="option">
                用户指定的命令行选项。
              </param>
      <param name="shortPrefix">
                选项名缩写形式。
              </param>
      <param name="longPrefix">
                选项名称长格式。
              </param>
      <returns>
              <see langword="false" /> 有关 -; <see langword="true" /> 为 + 或如果未指定的参数; 如果值为 null 的选项或参数格式不正确。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.CmdLineOptionParser.IsSimpleOption(System.String,System.String)">
      <summary>
              验证指定的选项的位置正确。
            </summary>
      <param name="option">
                用户指定的命令行选项。
              </param>
      <param name="prefix">
                选项名称。
              </param>
      <returns>
              <see langword="true" /> 如果该选项是否正确;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.COMCharStream.#ctor(Microsoft.JScript.IMessageReceiver)">
      <summary>
              初始化 <see cref="T:Microsoft.JScript.COMCharStream" /> 类的新实例。
            </summary>
      <param name="messageReceiver">
                流的数据的接收者。
              </param>
    </member>
    <member name="M:Microsoft.JScript.COMCharStream.Close">
      <summary>
              此流将数据发送到 <see cref="T:Microsoft.JScript.IMessageReceiver" /> 并清除其缓冲区。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.COMCharStream.Flush">
      <summary>
              此流将数据发送到 <see cref="T:Microsoft.JScript.IMessageReceiver" /> 并清除其缓冲区。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.COMCharStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
              在所有情况下都会引发 <see cref="T:System.NotSupportedException" /> 异常。
            </summary>
      <param name="buffer">
                要在其中存储从流中读取的数据的字节数组。
              </param>
      <param name="offset">
                中的从零开始的字节偏移量 <paramref name="buffer" /> 从此处开始存储从流中读取的数据。
              </param>
      <param name="count">
                最大要从流中读取的字节数。
              </param>
      <returns>
              在所有情况下都会引发 <see cref="T:System.NotSupportedException" /> 异常。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.COMCharStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>
              设置当前流中的位置。
               此方法不执行任何操作。
               它始终返回 0。
            </summary>
      <param name="offset">
                相对于 <paramref name="origin" /> 参数的字节偏移量。
              </param>
      <param name="origin">
                一个值，指示用于获取新位置的参考点。
              </param>
      <returns>
              在所有情况下均为 0。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.COMCharStream.SetLength(System.Int64)">
      <summary>
              设置流的长度。
            </summary>
      <param name="value">
                流的新长度。
              </param>
    </member>
    <member name="M:Microsoft.JScript.COMCharStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
              将指定的字节数据写入流。
            </summary>
      <param name="buffer">
                若要将复制到当前流的字节数据的数组。
              </param>
      <param name="offset">
                <paramref name="buffer" /> 中的从零开始的字节偏移量，从此处开始将字节复制到当前流。
              </param>
      <param name="count">
                要从复制的字节数 <paramref name="buffer" /> 写入当前流。
              </param>
    </member>
    <member name="M:Microsoft.JScript.COMFieldInfo.#ctor">
      <summary>
              初始化 <see cref="T:Microsoft.JScript.COMFieldInfo" /> 类的新实例。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.COMFieldInfo.GetCOMMemberInfo">
      <summary>
              获取支持 JScript 与该外部 COM 字段进行通信的托管的对象。
            </summary>
      <returns>
              支持 JScript 与该外部 COM 字段进行通信的托管的对象。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.COMFieldInfo.GetCustomAttributes(System.Boolean)">
      <summary>
              返回一个数组，包含附加到此字段的自定义特性。
            </summary>
      <param name="inherit">
                <see langword="true" /> 搜索此成员继承层次结构以查找这些特性。
              </param>
      <returns>
              一个数组 <see cref="T:System.Reflection.FieldInfo" /> 具有零个元素的对象。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.COMFieldInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>
              返回一个数组，包含附加到此字段，只搜索指定类型的特性的自定义特性。
            </summary>
      <param name="t">
                要搜索的属性的类型。
              </param>
      <param name="inherit">
                <see langword="true" /> 搜索此成员继承层次结构以查找这些特性。
              </param>
      <returns>
              一个数组 <see cref="T:System.Reflection.FieldInfo" /> 具有零个元素的对象。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.COMFieldInfo.GetValue(System.Object)">
      <summary>
              获取外部 COM 字段的值，通过使用 <see cref="T:Microsoft.JScript.COMMemberInfo" /> 指定给 <see cref="M:Microsoft.JScript.COMFieldInfo.Initialize(System.String,Microsoft.JScript.COMMemberInfo)" /> 方法。
            </summary>
      <param name="obj">
                要传递给外部 COM 字段的参数列表。
                 忽略此参数。
              </param>
      <returns>
              外部 COM 字段的值。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.COMFieldInfo.Initialize(System.String,Microsoft.JScript.COMMemberInfo)">
      <summary>
              初始化使 JScript 与该外部 COM 字段进行通信的信息。
            </summary>
      <param name="name">
                此对象表示的外部 COM 字段的名称。
              </param>
      <param name="dispatch">
                使 JScript 能够访问的外部 COM 字段的信息。
              </param>
    </member>
    <member name="M:Microsoft.JScript.COMFieldInfo.IsDefined(System.Type,System.Boolean)">
      <summary>
              确定指定的特性类型附加到此字段。
            </summary>
      <param name="t">
                要搜索的属性类型。
              </param>
      <param name="inherit">
                <see langword="true" /> 搜索此成员继承层次结构以查找这些特性。
              </param>
      <returns>
              在所有情况下均为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.COMFieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
      <summary>
              通过设置外部 COM 字段的值 <see cref="T:Microsoft.JScript.COMMemberInfo" /> 指定给 <see cref="M:Microsoft.JScript.COMFieldInfo.Initialize(System.String,Microsoft.JScript.COMMemberInfo)" /> 方法。
            </summary>
      <param name="obj">
                将设置其字段值的对象。
                 忽略此参数。
              </param>
      <param name="value">
                外部 COM 成员的新值。
              </param>
      <param name="invokeAttr">
                用于控制绑定的枚举值的按位组合。
              </param>
      <param name="binder">
                一个对象，将类型从实参类型转换为形参类型。
              </param>
      <param name="culture">
                提供有关特定区域性或区域设置信息。
                 用于正确地设置数字、 日期和字符串的格式。
              </param>
    </member>
    <member name="M:Microsoft.JScript.COMMemberInfo.Call(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>
              一个类中实现时，使 JScript 能够调用外部 COM 成员。
               使用指定的绑定信息。
            </summary>
      <param name="invokeAttr">
                用于控制绑定的枚举值的按位组合。
              </param>
      <param name="binder">
                一个对象，执行从实参类型到形参类型的类型转换。
              </param>
      <param name="arguments">
                要传递给外部 COM 成员的参数列表。
              </param>
      <param name="culture">
                提供有关特定区域性或区域设置来正确地设置数字、 日期和字符串的格式信息。
              </param>
      <returns>
              对外部 COM 成员的调用的值。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.COMMemberInfo.GetValue(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>
              一个类中实现时，使 JScript 能够获取使用指定的绑定信息的外部 COM 成员的值。
            </summary>
      <param name="invokeAttr">
                用于控制绑定的枚举值的按位组合。
              </param>
      <param name="binder">
                一个对象，执行从实参类型到形参类型的类型转换。
              </param>
      <param name="index">
                要传递给外部 COM 成员的参数列表。
              </param>
      <param name="culture">
                提供有关特定区域性或区域设置来正确地设置数字、 日期和字符串的格式信息。
              </param>
      <returns>
              外部 COM 成员的值。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.COMMemberInfo.SetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>
              一个类中实现时，启用 JScript 将外部 COM 成员的值设置为指定的新值，使用指定的绑定信息。
            </summary>
      <param name="value">
                外部 COM 成员的新值。
              </param>
      <param name="invokeAttr">
                用于控制绑定的枚举值的按位组合。
              </param>
      <param name="binder">
                一个对象，执行从实参类型到形参类型的类型转换。
              </param>
      <param name="index">
                要传递给外部 COM 成员的参数列表。
              </param>
      <param name="culture">
                提供有关特定区域性或区域设置来正确地设置数字、 日期和字符串的格式信息。
              </param>
    </member>
    <member name="M:Microsoft.JScript.COMMethodInfo.#ctor">
      <summary>
              初始化 <see cref="T:Microsoft.JScript.COMMethodInfo" /> 类的新实例。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.COMMethodInfo.GetBaseDefinition">
      <summary>
              返回 <see cref="T:System.Reflection.MethodInfo" /> 首先声明此方法的直接或间接基类上的方法的对象。
            </summary>
      <returns>
              在所有情况下均为 <see langword="this" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.COMMethodInfo.GetCOMMemberInfo">
      <summary>
              获取支持 JScript 进行通信，此外部 COM 方法的托管的对象。
            </summary>
      <returns>
              支持 JScript 进行通信，此外部 COM 方法的托管的对象。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.COMMethodInfo.GetMethodImplementationFlags">
      <summary>
              返回有关此方法的实现的信息。
            </summary>
      <returns>
              <see cref="F:System.Reflection.MethodImplAttributes.Managed" /> 和 <see cref="F:System.Reflection.MethodImplAttributes.IL" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.COMMethodInfo.GetParameters">
      <summary>
              获取此外部 COM 方法的参数。
            </summary>
      <returns>
              一个数组 <see cref="T:System.Reflection.ParameterInfo" /> 具有零个元素的对象。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.COMMethodInfo.Initialize(System.String,Microsoft.JScript.COMMemberInfo)">
      <summary>
              初始化使 JScript 进行通信，此外部 COM 方法的信息。
            </summary>
      <param name="name">
                此对象表示的外部 COM 方法的名称。
              </param>
      <param name="dispatch">
                使 JScript 能够访问的外部 COM 方法的信息。
              </param>
    </member>
    <member name="M:Microsoft.JScript.COMMethodInfo.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>
              通过使用调用外部 COM 方法 <see cref="T:Microsoft.JScript.COMMemberInfo" /> 指定给 <see cref="M:Microsoft.JScript.COMMethodInfo.Initialize(System.String,Microsoft.JScript.COMMemberInfo)" /> 方法。
            </summary>
      <param name="obj">
                要调用的方法的对象。
                 忽略此参数。
              </param>
      <param name="invokeAttr">
                用于控制绑定的枚举值的按位组合。
              </param>
      <param name="binder">
                一个对象，将类型从实参类型转换为形参类型。
              </param>
      <param name="parameters">
                要传递给外部 COM 成员的参数列表。
              </param>
      <param name="culture">
                提供有关特定区域性或区域设置信息。
                 用于正确地设置数字、 日期和字符串的格式。
              </param>
      <returns>
              对外部 COM 方法的调用返回值。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.COMMethodInfo.ToString">
      <summary>
              返回一个字符串，表示当前方法。
            </summary>
      <returns>
              空字符串。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.#ctor">
      <summary>
              初始化 <see cref="T:Microsoft.JScript.COMPropertyInfo" /> 类的新实例。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.GetAccessors(System.Boolean)">
      <summary>
              获取一个数组，其元素包含 get 和 set 访问器的此对象表示的外部 COM 属性。
            </summary>
      <param name="nonPublic">
                <see langword="true" /> 若要包括非公共访问器。
              </param>
      <returns>
              两个元素的数组 <see cref="T:System.Reflection.MethodInfo" /> 对象，它包含 get 和 set 方法的此属性。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.GetCOMMemberInfo">
      <summary>
              获取支持 JScript 与该外部 COM 属性进行通信的托管的对象。
            </summary>
      <returns>
              支持 JScript 与该外部 COM 属性进行通信的托管的对象。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.GetCustomAttributes(System.Boolean)">
      <summary>
              返回一个数组，包含附加到此属性的自定义特性。
            </summary>
      <param name="inherit">
                <see langword="true" /> 搜索此成员继承层次结构以查找这些特性。
              </param>
      <returns>
              一个数组 <see cref="T:System.Reflection.FieldInfo" /> 具有零个元素的对象。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>
              返回一个数组，包含附加到此属性，只搜索指定类型的特性的自定义特性。
            </summary>
      <param name="t">
                要搜索的属性的类型。
              </param>
      <param name="inherit">
                <see langword="true" /> 搜索此成员继承层次结构以查找这些特性。
              </param>
      <returns>
              一个数组 <see cref="T:System.Reflection.FieldInfo" /> 具有零个元素的对象。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.GetGetMethod(System.Boolean)">
      <summary>
              返回此属性的 get 访问器。
            </summary>
      <param name="nonPublic">
                <see langword="true" /> 若要包括非公共访问器。
              </param>
      <returns>
              此属性的 get 访问器。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.GetIndexParameters">
      <summary>
              返回数组的属性的所有索引参数。
            </summary>
      <returns>
              一个数组 <see cref="T:System.Reflection.ParameterInfo" /> 具有零个元素的对象。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.GetSetMethod(System.Boolean)">
      <summary>
              返回此属性的 set 访问器。
            </summary>
      <param name="nonPublic">
                <see langword="true" /> 若要包括非公共访问器。
              </param>
      <returns>
              此属性的 set 访问器。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>
              通过使用获取的外部 COM 属性的值 <see cref="T:Microsoft.JScript.COMMemberInfo" /> 指定给 <see cref="M:Microsoft.JScript.COMPropertyInfo.Initialize(System.String,Microsoft.JScript.COMMemberInfo)" /> 方法。
            </summary>
      <param name="obj">
                你想要获取其属性值的对象。
                 忽略此参数。
              </param>
      <param name="invokeAttr">
                用于控制绑定的枚举值的按位组合。
              </param>
      <param name="binder">
                一个对象，将类型从实参类型转换为形参类型。
              </param>
      <param name="index">
                要传递给外部 COM 属性的参数列表。
              </param>
      <param name="culture">
                提供有关特定区域性或区域设置信息。
                 用于正确地设置数字、 日期和字符串的格式。
              </param>
      <returns>
              外部 COM 属性的值。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.Initialize(System.String,Microsoft.JScript.COMMemberInfo)">
      <summary>
              初始化使 JScript 与该外部 COM 属性进行通信的信息。
            </summary>
      <param name="name">
                此对象表示的外部 COM 属性的名称。
              </param>
      <param name="dispatch">
                使 JScript 能够访问的外部 COM 属性的信息。
              </param>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.IsDefined(System.Type,System.Boolean)">
      <summary>
              确定指定的特性类型附加到此属性。
            </summary>
      <param name="t">
                要搜索的属性类型。
              </param>
      <param name="inherit">
                <see langword="true" /> 搜索此成员继承层次结构以查找这些特性。
              </param>
      <returns>
              在所有情况下均为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>
              通过设置外部 COM 属性的值 <see cref="T:Microsoft.JScript.COMMemberInfo" /> 指定给 <see cref="M:Microsoft.JScript.COMPropertyInfo.Initialize(System.String,Microsoft.JScript.COMMemberInfo)" /> 方法。
            </summary>
      <param name="obj">
                将设置其属性值的对象。
                 忽略此参数。
              </param>
      <param name="value">
                外部 COM 成员的新值。
              </param>
      <param name="invokeAttr">
                用于控制绑定的枚举值的按位组合。
              </param>
      <param name="binder">
                一个对象，将类型从实参类型转换为形参类型。
              </param>
      <param name="index">
                要传递给外部 COM 属性的参数列表。
              </param>
      <param name="culture">
                提供有关特定区域性或区域设置信息。
                 用于正确地设置数字、 日期和字符串的格式。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Context.GetCode">
      <summary>
              获取包含上下文，并丢弃任何空白的代码。
            </summary>
      <returns>
              用于上下文所包含的代码。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Context.GetToken">
      <summary>
              获取代码的单个单元或 令牌, ，上下文所包含。
            </summary>
      <returns>
              代码中，各个单元或 令牌, ，上下文所包含。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ContinueOutOfFinally.#ctor">
      <summary>
              初始化 <see cref="T:Microsoft.JScript.ContinueOutOfFinally" /> 类的新实例。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.ContinueOutOfFinally.#ctor(System.Int32)">
      <summary>
              初始化的新实例 <see cref="T:Microsoft.JScript.ContinueOutOfFinally" /> 类，使用指定的目标。
            </summary>
      <param name="target">
                异常的目标。
              </param>
    </member>
    <member name="M:Microsoft.JScript.ContinueOutOfFinally.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:Microsoft.JScript.ContinueOutOfFinally" /> 类，使用指定的错误消息。
            </summary>
      <param name="m">
                描述错误的消息。
              </param>
    </member>
    <member name="M:Microsoft.JScript.ContinueOutOfFinally.#ctor(System.String,System.Exception)">
      <summary>
              新实例初始化 <see cref="T:Microsoft.JScript.ContinueOutOfFinally" /> 类，使用指定的错误消息和对导致此异常的内部异常的引用。
            </summary>
      <param name="m">
                描述错误的消息。
              </param>
      <param name="e">
                导致当前异常的异常。
              </param>
    </member>
    <member name="M:Microsoft.JScript.ContinueOutOfFinally.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              存储中的异常有关的信息 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。
               存储的信息包括 <see cref="F:Microsoft.JScript.ContinueOutOfFinally.target" /> 值。
            </summary>
      <param name="s">
                有关所引发的异常的序列化的对象数据。
              </param>
      <param name="c">
                有关源或目标的上下文信息。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Convert.#ctor">
      <summary>
              初始化 <see cref="T:Microsoft.JScript.Convert" /> 类的新实例。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.Convert.CheckIfDoubleIsInteger(System.Double)">
      <summary>
              确定是否 <see cref="T:System.Double" /> 变量包含一个整数值。
            </summary>
      <param name="d">
                要测试的 <see cref="T:System.Double" />。
              </param>
      <returns>
              如果 <paramref name="d" /> 包含一个整数值， <paramref name="d" /> 返回。
               否则，将引发异常。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Convert.CheckIfSingleIsInteger(System.Single)">
      <summary>
              确定是否 <see cref="T:System.Single" /> 变量包含一个整数值。
            </summary>
      <param name="s">
                要测试的 <see cref="T:System.Single" />。
              </param>
      <returns>
              如果 <paramref name="s" /> 包含一个整数值， <paramref name="s" /> 返回。
               否则，将引发异常。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Convert.Coerce(System.Object,System.Object)">
      <summary>
              将指定的值转换为指定的类型。
            </summary>
      <param name="value">
                要转换为新类型的值。
              </param>
      <param name="type">
                要转换的类型 <paramref name="value" /> 到。
              </param>
      <returns>
              <paramref name="value" /> 转换为 <paramref name="type" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Convert.Coerce2(System.Object,System.TypeCode,System.Boolean)">
      <summary>
              将指定的值转换为指定 <see cref="T:System.TypeCode" />, ，还可以选择允许丢失数据。
            </summary>
      <param name="value">
                要转换为新类型的值。
              </param>
      <param name="target">
                要转换的类型 <paramref name="value" /> 到。
              </param>
      <param name="truncationPermitted">
                <see langword="true" /> 若要允许的数据丢失。否则为 <see langword="false" />。
              </param>
      <returns>
              <paramref name="value" /> 转换为 <paramref name="target" /> 类型。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Convert.CoerceT(System.Object,System.Type,System.Boolean)">
      <summary>
              将指定的值转换为指定 <see cref="T:System.Type" />, ，还可以选择允许丢失数据。
            </summary>
      <param name="value">
                要转换为新类型的值。
              </param>
      <param name="t">
                要转换的类型 <paramref name="value" /> 到。
              </param>
      <param name="explicitOK">
                <see langword="true" /> 若要允许的数据丢失。否则为 <see langword="false" />。
              </param>
      <returns>
              <paramref name="value" /> 转换为类型 <paramref name="t" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Convert.IsBadIndex(Microsoft.JScript.AST)">
      <summary>
              确定变量是否包含数组索引值。
            </summary>
      <param name="ast">
                要测试的变量。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="ast" /> 包含数组的索引值; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Convert.ThrowTypeMismatch(System.Object)">
      <summary>
              引发 <see cref="T:Microsoft.JScript.JScriptException" /> 在所有情况下的异常。
            </summary>
      <param name="val">
                导致异常的源代码。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToBoolean(System.Double)">
      <summary>
              将指定的 <see cref="T:System.Double" /> 转换为 <see cref="T:System.Boolean" />。
            </summary>
      <param name="d">
                要转换的值。
              </param>
      <returns>
              <see langword="false" /> 如果 <paramref name="d" /> 0; 否则为 <see langword="true" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToBoolean(System.Object)">
      <summary>
              将指定的 <see cref="T:System.Object" /> 转换为 <see cref="T:System.Boolean" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <returns>
              <paramref name="value" /> 转换为 <see cref="T:System.Boolean" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToBoolean(System.Object,System.Boolean)">
      <summary>
              将指定 <see cref="T:System.Object" /> 值赋给 <see cref="T:System.Boolean" /> 结构，可以选择允许丢失数据。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <param name="explicitConversion">
                <see langword="true" /> 若要允许的数据丢失。否则为 <see langword="false" />。
              </param>
      <returns>
              <paramref name="value" /> 转换为 <see cref="T:System.Boolean" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToForInObject(System.Object,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>
              指定将值转换为 <see cref="T:System.Object" /> 表示一套 <see cref="T:Microsoft.JScript.AST" /> 对象。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <param name="engine">
                对脚本引擎的引用。
              </param>
      <returns>
              <paramref name="value" /> 转换为 <see cref="T:System.Object" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToInt32(System.Object)">
      <summary>
              指定将值转换为 <see cref="T:System.Int32" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <returns>
              <paramref name="value" /> 转换为 <see cref="T:System.Int32" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToNativeArray(System.Object,System.RuntimeTypeHandle)">
      <summary>
              将指定 <see cref="T:Microsoft.JScript.ArrayObject" /> 对类型化 <see cref="T:System.Array" />。
            </summary>
      <param name="value">
                要转换的 <see cref="T:Microsoft.JScript.ArrayObject" />。
              </param>
      <param name="handle">
                数组中元素的类型。
              </param>
      <returns>
              <paramref name="value" /> 转换为 <see cref="T:System.Array" /> 这是否可能; 否则为 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToNumber(System.Object)">
      <summary>
              将指定的 <see cref="T:System.Object" /> 转换为 <see cref="T:System.Double" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <returns>
              <paramref name="value" /> 转换为 <see cref="T:System.Double" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToNumber(System.String)">
      <summary>
              将指定的 <see cref="T:System.String" /> 转换为 <see cref="T:System.Double" />。
            </summary>
      <param name="str">
                要转换的值。
              </param>
      <returns>
              <paramref name="str" /> 转换为 <see cref="T:System.Double" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToObject(System.Object,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>
              指定将值转换为 <see cref="T:System.Object" />。
               如果它无法执行转换，将引发错误。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <param name="engine">
                对脚本引擎的引用。
              </param>
      <returns>
              <paramref name="value" /> 转换为 <see cref="T:System.Object" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToObject2(System.Object,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>
              指定将值转换为 <see cref="T:System.Object" />。
               如果它不能执行转换，，返回 null。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <param name="engine">
                对脚本引擎的引用。
              </param>
      <returns>
              <paramref name="value" /> 转换为 <see cref="T:System.Object" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToString(System.Boolean)">
      <summary>
              将指定的 <see cref="T:System.Boolean" /> 转换为 <see cref="T:System.String" />。
            </summary>
      <param name="b">
                要转换的值。
              </param>
      <returns>
              <paramref name="b" /> 转换为 <see cref="T:System.String" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToString(System.Double)">
      <summary>
              将指定的 <see cref="T:System.Double" /> 转换为 <see cref="T:System.String" />。
            </summary>
      <param name="d">
                要转换的值。
              </param>
      <returns>
              <paramref name="d" /> 转换为 <see cref="T:System.String" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToString(System.Object,System.Boolean)">
      <summary>
              将指定 <see cref="T:System.Object" /> 到 <see cref="T:System.String" />, ，还可以选择允许丢失数据。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <param name="explicitOK">
                <see langword="true" /> 若要允许的数据丢失。否则为 <see langword="false" />。
              </param>
      <returns>
              <paramref name="value" /> 转换为 <see cref="T:System.String" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DateConstructor.CreateInstance(System.Object[])">
      <summary>
              创建基于原型的对象，在指定的参数中传递的实例。
            </summary>
      <param name="args">
                要传递给构造函数的实参。
              </param>
      <returns>
              对象的实例。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DateConstructor.Invoke">
      <summary>
              返回自 1970 年 1 月 1 日以来经过的毫秒数。
            </summary>
      <returns>
              自 1970 年 1 月 1 日以来经过的毫秒数。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DateConstructor.parse(System.String)">
      <summary>
              将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.Double" />。
            </summary>
      <param name="str">
                包含要转换的日期和时间的字符串。
              </param>
      <returns>
              一个 <see cref="T:System.Double" /> 等效的日期和时间中包含的 <paramref name="str" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DateConstructor.UTC(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
      <summary>
              将指定的日期和时间转换为其 <see cref="T:System.Double" /> 等效。
            </summary>
      <param name="year">
                要转换的日期和时间的年份。
              </param>
      <param name="month">
                要转换的日期和时间的月份。
              </param>
      <param name="date">
                要转换的日期和时间的日期。
              </param>
      <param name="hours">
                要转换的日期和时间的小时。
              </param>
      <param name="minutes">
                要转换的日期和时间的分钟数。
              </param>
      <param name="seconds">
                要转换的日期和时间的秒数。
              </param>
      <param name="ms">
                要转换的日期和时间 （毫秒)。
              </param>
      <returns>
              一个 <see cref="T:System.Double" /> 等效的指定的日期和时间。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getDate(System.Object)">
      <summary>
              获取指定的日期值 <see cref="T:Microsoft.JScript.DateObject" />。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              日期值 <paramref name="thisob" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getDay(System.Object)">
      <summary>
              获取指定的周日期值 <see cref="T:Microsoft.JScript.DateObject" />。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              周日期值 <paramref name="thisob" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getFullYear(System.Object)">
      <summary>
              获取指定的年份值 <see cref="T:Microsoft.JScript.DateObject" />。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              年份值 <paramref name="thisob" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getHours(System.Object)">
      <summary>
              获取指定的小时值 <see cref="T:Microsoft.JScript.DateObject" />。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              小时值为 <paramref name="thisob" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getMilliseconds(System.Object)">
      <summary>
              获取指定的毫秒值 <see cref="T:Microsoft.JScript.DateObject" />。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              毫秒值 <paramref name="thisob" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getMinutes(System.Object)">
      <summary>
              获取指定的分钟值 <see cref="T:Microsoft.JScript.DateObject" />。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              分钟值 <paramref name="thisob" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getMonth(System.Object)">
      <summary>
              获取指定的月份值 <see cref="T:Microsoft.JScript.DateObject" />。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              月份值 <paramref name="thisob" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getSeconds(System.Object)">
      <summary>
              获取指定的值的秒的 <see cref="T:Microsoft.JScript.DateObject" />。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              秒的值的 <paramref name="thisob" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getTime(System.Object)">
      <summary>
              获取指定的时间值 <see cref="T:Microsoft.JScript.DateObject" />。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              时间值 <paramref name="thisob" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getTimezoneOffset(System.Object)">
      <summary>
              获取指定的偏移量 <see cref="T:Microsoft.JScript.DateObject" /> 与协调世界时 (UTC)。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              之间的差异 <paramref name="thisob" /> 与协调世界时 (UTC)。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getUTCDate(System.Object)">
      <summary>
              获取指定的日期值 <see cref="T:Microsoft.JScript.DateObject" />, ，以协调世界时 (UTC) 表示。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              日期值 <paramref name="thisob" />, 以 UTC 表示。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getUTCDay(System.Object)">
      <summary>
              获取指定的周日期值 <see cref="T:Microsoft.JScript.DateObject" />, ，以协调世界时 (UTC) 表示。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              周日期值 <paramref name="thisob" />, 以 UTC 表示。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getUTCFullYear(System.Object)">
      <summary>
              获取指定的年份值 <see cref="T:Microsoft.JScript.DateObject" />, ，以协调世界时 (UTC) 表示。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              年份值 <paramref name="thisob" />, 以 UTC 表示。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getUTCHours(System.Object)">
      <summary>
              获取指定的小时值 <see cref="T:Microsoft.JScript.DateObject" />, ，以协调世界时 (UTC) 表示。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              小时值为 <paramref name="thisob" />, 以 UTC 表示。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getUTCMilliseconds(System.Object)">
      <summary>
              获取指定的毫秒值 <see cref="T:Microsoft.JScript.DateObject" />, ，以协调世界时 (UTC) 表示。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              毫秒值 <paramref name="thisob" />, 以 UTC 表示。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getUTCMinutes(System.Object)">
      <summary>
              获取指定的分钟值 <see cref="T:Microsoft.JScript.DateObject" />, ，以协调世界时 (UTC) 表示。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              分钟值 <paramref name="thisob" />, 以 UTC 表示。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getUTCMonth(System.Object)">
      <summary>
              获取指定的月份值 <see cref="T:Microsoft.JScript.DateObject" />, ，以协调世界时 (UTC) 表示。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              月份值 <paramref name="thisob" />, 以 UTC 表示。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getUTCSeconds(System.Object)">
      <summary>
              获取指定的值的秒的 <see cref="T:Microsoft.JScript.DateObject" />, ，以协调世界时 (UTC) 表示。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              秒的值的 <paramref name="thisob" />, 以 UTC 表示。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getVarDate(System.Object)">
      <summary>
              返回指定 <see cref="T:Microsoft.JScript.DateObject" /> 作为 <see cref="T:System.DateTime" /> 对象。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              值 <paramref name="thisob" />, ，表示为 <see cref="T:System.DateTime" /> 对象。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getYear(System.Object)">
      <summary>
              获取指定的年份值 <see cref="T:Microsoft.JScript.DateObject" />, ，以协调世界时 (UTC) 表示。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              年份值 <paramref name="thisob" />, 以 UTC 表示。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setDate(System.Object,System.Double)">
      <summary>
              设置的日期值 <see cref="T:Microsoft.JScript.DateObject" /> 为指定的日期值。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="ddate">
                要为设置日期值 <paramref name="thisob" />。
              </param>
      <returns>
              新值 <paramref name="thisob" /> 设置的值之后。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setFullYear(System.Object,System.Double,System.Object,System.Object)">
      <summary>
              设置的年份值 <see cref="T:Microsoft.JScript.DateObject" /> 为指定的年份值。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="dyear">
                若要为设置的年份值 <paramref name="thisob" />。
              </param>
      <param name="month">
                若要为设置的月份值 <paramref name="thisob" />。
              </param>
      <param name="date">
                要为设置日期值 <paramref name="thisob" />。
              </param>
      <returns>
              为设置的年份值 <paramref name="thisob" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setHours(System.Object,System.Double,System.Object,System.Object,System.Object)">
      <summary>
              设置小时值为 <see cref="T:Microsoft.JScript.DateObject" /> 为指定的小时值。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="dhour">
                要为设置小时值 <paramref name="thisob" />。
              </param>
      <param name="min">
                分钟值设置为 <paramref name="thisob" />。
              </param>
      <param name="sec">
                秒的值设置为 <paramref name="thisob" />。
              </param>
      <param name="msec">
                毫秒数的值设置为 <paramref name="thisob" />。
              </param>
      <returns>
              新值 <paramref name="thisob" /> 设置的值之后。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setMilliseconds(System.Object,System.Double)">
      <summary>
              设置的毫秒值 <see cref="T:Microsoft.JScript.DateObject" /> 为指定的毫秒值。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="dmsec">
                要为设置毫秒值 <paramref name="thisob" />。
              </param>
      <returns>
              新值 <paramref name="thisob" /> 设置的值之后。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setMinutes(System.Object,System.Double,System.Object,System.Object)">
      <summary>
              设置的分钟值 <see cref="T:Microsoft.JScript.DateObject" /> 为指定的分钟值。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="dmin">
                分钟值设置为 <paramref name="thisob" />。
              </param>
      <param name="sec">
                秒的值设置为 <paramref name="thisob" />。
              </param>
      <param name="msec">
                毫秒数的值设置为 <paramref name="thisob" />。
              </param>
      <returns>
              新值 <paramref name="thisob" /> 设置的值之后。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setMonth(System.Object,System.Double,System.Object)">
      <summary>
              设置的月份值 <see cref="T:Microsoft.JScript.DateObject" /> 为指定的月份值。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="dmonth">
                若要为设置的月份值 <paramref name="thisob" />。
              </param>
      <param name="date">
                要为设置日期值 <paramref name="thisob" />。
              </param>
      <returns>
              新值 <paramref name="thisob" /> 设置的值之后。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setSeconds(System.Object,System.Double,System.Object)">
      <summary>
              设置值的秒的 <see cref="T:Microsoft.JScript.DateObject" /> 为指定的秒值。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="dsec">
                秒的值设置为 <paramref name="thisob" />。
              </param>
      <param name="msec">
                毫秒数的值设置为 <paramref name="thisob" />。
              </param>
      <returns>
              新值 <paramref name="thisob" /> 设置的值之后。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setTime(System.Object,System.Double)">
      <summary>
              设置的时间值 <see cref="T:Microsoft.JScript.DateObject" /> 到指定的时间值。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="time">
                若要为设置的时间值 <paramref name="thisob" />。
              </param>
      <returns>
              新值 <paramref name="thisob" /> 设置的值之后。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setUTCDate(System.Object,System.Double)">
      <summary>
              设置的日期值 <see cref="T:Microsoft.JScript.DateObject" /> 为指定的日期值，表示以协调世界时 (UTC)。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="ddate">
                要为设置日期值 <paramref name="thisob" />。
              </param>
      <returns>
              新值 <paramref name="thisob" /> 设置的值后，以表示 UTC。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setUTCFullYear(System.Object,System.Double,System.Object,System.Object)">
      <summary>
              设置的年份值 <see cref="T:Microsoft.JScript.DateObject" /> 为指定的年份值，表示以协调世界时 (UTC)。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="dyear">
                若要为设置的年份值 <paramref name="thisob" />。
              </param>
      <param name="month">
                若要为设置的月份值 <paramref name="thisob" />。
              </param>
      <param name="date">
                要为设置日期值 <paramref name="thisob" />。
              </param>
      <returns>
              新值 <paramref name="thisob" /> 设置的值后，以表示 UTC。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setUTCHours(System.Object,System.Double,System.Object,System.Object,System.Object)">
      <summary>
              设置小时值为 <see cref="T:Microsoft.JScript.DateObject" /> 为指定的小时值，表示以协调世界时 (UTC)。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="dhour">
                要为设置小时值 <paramref name="thisob" />。
              </param>
      <param name="min">
                分钟值设置为 <paramref name="thisob" />。
              </param>
      <param name="sec">
                秒的值设置为 <paramref name="thisob" />。
              </param>
      <param name="msec">
                毫秒数的值设置为 <paramref name="thisob" />。
              </param>
      <returns>
              新值 <paramref name="thisob" /> 设置的值后，以表示 UTC。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setUTCMilliseconds(System.Object,System.Double)">
      <summary>
              设置的毫秒值 <see cref="T:Microsoft.JScript.DateObject" /> 为指定的毫秒的值，以协调世界时 (UTC) 表示。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="dmsec">
                要为设置毫秒值 <paramref name="thisob" />。
              </param>
      <returns>
              新值 <paramref name="thisob" /> 设置的值后，以表示 UTC。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setUTCMinutes(System.Object,System.Double,System.Object,System.Object)">
      <summary>
              设置的分钟值 <see cref="T:Microsoft.JScript.DateObject" /> 为指定的分钟值，表示以协调世界时 (UTC)。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="dmin">
                分钟值设置为 <paramref name="thisob" />。
              </param>
      <param name="sec">
                秒的值设置为 <paramref name="thisob" />。
              </param>
      <param name="msec">
                毫秒数的值设置为 <paramref name="thisob" />。
              </param>
      <returns>
              新值 <paramref name="thisob" /> 设置的值后，以表示 UTC。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setUTCMonth(System.Object,System.Double,System.Object)">
      <summary>
              设置的月份值 <see cref="T:Microsoft.JScript.DateObject" /> 为指定的月份值，表示以协调世界时 (UTC)。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="dmonth">
                若要为设置的月份值 <paramref name="thisob" />。
              </param>
      <param name="date">
                要为设置日期值 <paramref name="thisob" />。
              </param>
      <returns>
              新值 <paramref name="thisob" /> 设置的值后，以表示 UTC。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setUTCSeconds(System.Object,System.Double,System.Object)">
      <summary>
              设置值的秒的 <see cref="T:Microsoft.JScript.DateObject" /> 为指定的秒的值，表示以协调世界时 (UTC)。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="dsec">
                秒的值设置为 <paramref name="thisob" />。
              </param>
      <param name="msec">
                毫秒数的值设置为 <paramref name="thisob" />。
              </param>
      <returns>
              新值 <paramref name="thisob" /> 设置的值后，以表示 UTC。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setYear(System.Object,System.Double)">
      <summary>
              设置的年份值 <see cref="T:Microsoft.JScript.DateObject" /> 为指定的年份值。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="dyear">
                若要为设置的年份值 <paramref name="thisob" />。
              </param>
      <returns>
              新值 <paramref name="thisob" /> 设置的值之后。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.toDateString(System.Object)">
      <summary>
              创建的字符串表示形式指定 <see cref="T:Microsoft.JScript.DateObject" /> ，其中包含每周、 月份、 日期和年的某一天。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              字符串表示形式 <paramref name="thisob" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.toGMTString(System.Object)">
      <summary>
              创建的字符串表示形式指定 <see cref="T:Microsoft.JScript.DateObject" /> ，其中包含的一周、 月份、 日期、 一年中和时间，以协调世界时 (UTC) 表示。
               使用 <see cref="M:Microsoft.JScript.DatePrototype.toUTCString(System.Object)" /> 而是可以。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              字符串表示形式 <paramref name="thisob" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.toLocaleDateString(System.Object)">
      <summary>
              创建的字符串表示形式指定 <see cref="T:Microsoft.JScript.DateObject" /> 包含日期而不是时间。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              字符串表示形式 <paramref name="thisob" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.toLocaleString(System.Object)">
      <summary>
              创建的字符串表示形式指定 <see cref="T:Microsoft.JScript.DateObject" /> ，其中包含的日期和时间。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              字符串表示形式 <paramref name="thisob" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.toLocaleTimeString(System.Object)">
      <summary>
              创建的字符串表示形式指定 <see cref="T:Microsoft.JScript.DateObject" /> 包含时间而非日期。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              字符串表示形式 <paramref name="thisob" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.toString(System.Object)">
      <summary>
              创建的字符串表示形式指定 <see cref="T:Microsoft.JScript.DateObject" /> ，其中包含每周、 月份、 日期、 时间、 时区、 和年的某一天。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              字符串表示形式 <paramref name="thisob" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.toTimeString(System.Object)">
      <summary>
              创建的字符串表示形式指定 <see cref="T:Microsoft.JScript.DateObject" /> ，其中包含的时间和时区。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              字符串表示形式 <paramref name="thisob" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.toUTCString(System.Object)">
      <summary>
              创建的字符串表示形式指定 <see cref="T:Microsoft.JScript.DateObject" /> ，其中包含的一周、 月份、 日期、 一年中和时间，以协调世界时 (UTC) 表示。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              字符串表示形式 <paramref name="thisob" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.valueOf(System.Object)">
      <summary>
              返回指定的值 <see cref="T:Microsoft.JScript.DateObject" />。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              <paramref name="thisob" /> 的值。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.#ctor">
      <summary>
              初始化 <see cref="T:Microsoft.JScript.DebugConvert" /> 类的新实例。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.BooleanToString(System.Boolean)">
      <summary>
              将指定 <see cref="T:System.Boolean" /> 值赋给 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <returns>
              文字字符串"true"或文字字符串"false"。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.ByteToString(System.Byte,System.Int32)">
      <summary>
              将指定 <see cref="T:System.Byte" /> 值赋给 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <param name="radix">
                返回的值的基数。
                 基类必须是 2、 8、 10 或 16。
              </param>
      <returns>
              以 <paramref name="value" /> 为基数的 <paramref name="radix" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.DecimalToString(System.Decimal)">
      <summary>
              将指定 <see cref="T:System.Decimal" /> 值赋给 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <returns>
              <paramref name="value" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.DoubleToDateString(System.Double)">
      <summary>
              创建的字符串表示形式指定 <see cref="T:System.Double" />。
               字符串表示形式包含在一周、 月份、 日期、 时间、 时区和年的某一天。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <returns>
              <paramref name="value" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.DoubleToString(System.Double)">
      <summary>
              将指定 <see cref="T:System.Double" /> 值赋给 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <returns>
              <paramref name="value" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.GetErrorMessageForHR(System.Int32,Microsoft.JScript.Vsa.IJSVsaEngine)">
      <summary>
              获取错误消息，它是创建从指定 <see cref="P:System.Exception.HResult" /> 和 <see cref="T:System.Globalization.CultureInfo" /> 指定 <see cref="T:Microsoft.JScript.Vsa.IJSVsaEngine" />。
            </summary>
      <param name="hr">
                HRESULT 错误代码。
              </param>
      <param name="engine">
                对脚本引擎的引用。
              </param>
      <returns>
              包含有关错误的信息的本地化的字符串。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.GetManagedCharObject(System.UInt16)">
      <summary>
              创建一个具有指定的基元的托管的对象 <see cref="T:System.Char" /> 值。
            </summary>
      <param name="i">
                要转换的值。
              </param>
      <returns>
              <paramref name="i" /> 转换为 <see cref="T:System.Char" /> 然后 <see cref="T:System.Object" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.GetManagedInt64Object(System.Int64)">
      <summary>
              创建一个具有指定的基元的托管的对象 <see cref="T:System.Int64" /> 值。
            </summary>
      <param name="i">
                要转换的值。
              </param>
      <returns>
              <paramref name="i" /> 转换为 <see cref="T:System.Object" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.GetManagedObject(System.Object)">
      <summary>
              创建具有指定的基元值的托管的对象。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <returns>
              <paramref name="value" /> 转换为托管 <see cref="T:System.Object" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.GetManagedUInt64Object(System.UInt64)">
      <summary>
              创建一个具有指定的基元的托管的对象 <see cref="T:System.UInt64" /> 值。
            </summary>
      <param name="i">
                要转换的值。
              </param>
      <returns>
              <paramref name="i" /> 转换为 <see cref="T:System.Object" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.Int16ToString(System.Int16,System.Int32)">
      <summary>
              将指定 <see cref="T:System.Int16" /> 值赋给 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <param name="radix">
                返回的值的基数。
                 基类必须是 2、 8、 10 或 16。
              </param>
      <returns>
              以 <paramref name="value" /> 为基数的 <paramref name="radix" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.Int32ToString(System.Int32,System.Int32)">
      <summary>
              将指定 <see cref="T:System.Int32" /> 值赋给 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <param name="radix">
                返回的值的基数。
                 基类必须是 2、 8、 10 或 16。
              </param>
      <returns>
              以 <paramref name="value" /> 为基数的 <paramref name="radix" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.Int64ToString(System.Int64,System.Int32)">
      <summary>
              将指定 <see cref="T:System.Int64" /> 值赋给 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <param name="radix">
                返回的值的基数。
                 基类必须是 2、 8、 10 或 16。
              </param>
      <returns>
              以 <paramref name="value" /> 为基数的 <paramref name="radix" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.RegexpToString(System.String,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
              指定正则表达式将信息转换为 <see cref="T:System.String" />。
            </summary>
      <param name="source">
                要匹配的正则表达式模式。
              </param>
      <param name="ignoreCase">
                <see langword="true" /> 若要使用不区分大小写匹配;否则为 <see langword="false" />。
              </param>
      <param name="global">
                <see langword="true" /> 若要使用全局匹配项，则否则为 <see langword="false" />。
              </param>
      <param name="multiline">
                <see langword="true" /> 若要使用多行匹配项，则否则为 <see langword="false" />。
              </param>
      <returns>
              字符串表示形式的正则表达式的信息。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.SByteToString(System.SByte,System.Int32)">
      <summary>
              将指定 <see cref="T:System.SByte" /> 值赋给 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <param name="radix">
                返回的值的基数。
                 基类必须是 2、 8、 10 或 16。
              </param>
      <returns>
              以 <paramref name="value" /> 为基数的 <paramref name="radix" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.SingleToString(System.Single)">
      <summary>
              将指定 <see cref="T:System.Single" /> 值赋给 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <returns>
              <paramref name="value" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.StringToPrintable(System.String)">
      <summary>
              将指定 <see cref="T:System.String" /> 到 <see cref="T:System.String" /> 包含不可打印的字符的转义符。
            </summary>
      <param name="source">
                要转换的值。
              </param>
      <returns>
              字符串表示形式 <paramref name="source" /> 包含转义字符。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.ToPrimitive(System.Object,System.TypeCode,System.Boolean)">
      <summary>
              将指定的值转换为指定 <see cref="T:System.TypeCode" />, ，还可以选择允许丢失数据。
            </summary>
      <param name="value">
                要转换为新类型的值。
              </param>
      <param name="typeCode">
                要转换的类型 <paramref name="value" /> 到。
              </param>
      <param name="truncationPermitted">
                <see langword="true" /> 若要允许的数据丢失。否则为 <see langword="false" />。
              </param>
      <returns>
              <paramref name="value" /> 转换为 <paramref name="typeCode" /> 类型。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.UInt16ToString(System.UInt16,System.Int32)">
      <summary>
              将指定 <see cref="T:System.UInt16" /> 值赋给 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <param name="radix">
                返回的值的基数。
                 基类必须是 2、 8、 10 或 16。
              </param>
      <returns>
              以 <paramref name="value" /> 为基数的 <paramref name="radix" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.UInt32ToString(System.UInt32,System.Int32)">
      <summary>
              将指定 <see cref="T:System.UInt32" /> 值赋给 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <param name="radix">
                返回的值的基数。
                 基类必须是 2、 8、 10 或 16。
              </param>
      <returns>
              以 <paramref name="value" /> 为基数的 <paramref name="radix" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.UInt64ToString(System.UInt64,System.Int32)">
      <summary>
              将指定 <see cref="T:System.UInt64" /> 值赋给 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <param name="radix">
                返回的值的基数。
                 基类必须是 2、 8、 10 或 16。
              </param>
      <returns>
              以 <paramref name="value" /> 为基数的 <paramref name="radix" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.DynamicFieldInfo.#ctor(System.String,System.Object)">
      <summary>
              新实例初始化 <see cref="T:Microsoft.JScript.DynamicFieldInfo" /> 类，使用指定的名称和值。
            </summary>
      <param name="name">
                字段的名称。
              </param>
      <param name="value">
                字段的值。
              </param>
    </member>
    <member name="M:Microsoft.JScript.DynamicFieldInfo.#ctor(System.String,System.Object,System.String)">
      <summary>
              新实例初始化 <see cref="T:Microsoft.JScript.DynamicFieldInfo" /> 类，使用指定的名称、 值和类型。
            </summary>
      <param name="name">
                字段的名称。
              </param>
      <param name="value">
                字段的值。
              </param>
      <param name="fieldTypeName">
                字段的类型。
              </param>
    </member>
    <member name="M:Microsoft.JScript.EnumeratorConstructor.CreateInstance(System.Object[])">
      <summary>
              创建基于原型的对象，在指定的参数中传递的实例。
            </summary>
      <param name="args">
                要传递给构造函数的实参。
              </param>
      <returns>
              对象的实例。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.EnumeratorConstructor.Invoke">
      <summary>
              在所有情况下均返回 null。
            </summary>
      <returns>
              null。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.EnumeratorObject.LoadObject">
      <summary>
              将枚举数推进到集合的下一个元素并将存储到集合中的当前元素的引用。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.EnumeratorPrototype.atEnd(System.Object)">
      <summary>
              确定是否枚举器已通过集合的最后一项。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              <see langword="true" /> 如果枚举器已通过集合的最后一项否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.EnumeratorPrototype.item(System.Object)">
      <summary>
              获取集合中的当前元素。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              集合中的当前元素。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.EnumeratorPrototype.moveFirst(System.Object)">
      <summary>
              将枚举数移到其初始位置，即在集合中的第一个元素之前。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
    </member>
    <member name="M:Microsoft.JScript.EnumeratorPrototype.moveNext(System.Object)">
      <summary>
              将枚举数推进到集合的下一个元素。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Equality.#ctor(System.Int32)">
      <summary>
              初始化 <see cref="T:Microsoft.JScript.Equality" /> 类的新实例。
            </summary>
      <param name="operatorTok">
                <see cref="T:Microsoft.JScript.JSToken" /> 枚举值之一。
                 指定要执行的比较。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Equality.EvaluateEquality(System.Object,System.Object)">
      <summary>
              执行比较运算。
            </summary>
      <param name="v1">
                第一个操作数。
              </param>
      <param name="v2">
                第二个操作数。
              </param>
      <returns>
              操作的结果。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Equality.JScriptEquals(System.Object,System.Object)">
      <summary>
              执行比较运算。
            </summary>
      <param name="v1">
                第一个操作数。
              </param>
      <param name="v2">
                第二个操作数。
              </param>
      <returns>
              操作的结果。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ErrorConstructor.CreateInstance(System.Object[])">
      <summary>
              创建基于原型的对象，在指定的参数中传递的实例。
            </summary>
      <param name="args">
                要传递给构造函数的实参。
              </param>
      <returns>
              对象的实例。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ErrorConstructor.Invoke(System.Object[])">
      <summary>
              创建基于原型的对象，在指定的参数中传递的实例。
            </summary>
      <param name="args">
                要传递给构造函数的实参。
              </param>
      <returns>
              对象的实例。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ErrorObject.op_Explicit(Microsoft.JScript.ErrorObject)~System.Exception">
      <summary>
              将转换 <see cref="T:Microsoft.JScript.ErrorObject" /> 到 <see cref="T:System.Exception" />, ，显式。
            </summary>
      <param name="err">
                要转换的对象。
              </param>
      <returns>
              转换后 <see cref="T:Microsoft.JScript.ErrorObject" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ErrorObject.ToException(Microsoft.JScript.ErrorObject)">
      <summary>
              将转换 <see cref="T:Microsoft.JScript.ErrorObject" /> 到 <see cref="T:System.Exception" />, 、 隐式。
            </summary>
      <param name="err">
                要转换的对象。
              </param>
      <returns>
              转换后 <see cref="T:Microsoft.JScript.ErrorObject" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ErrorPrototype.toString(System.Object)">
      <summary>
              创建指定对象的字符串表示形式。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              字符串表示形式 <paramref name="thisob" /> 如果有一个包含名称的类型的错误对象，以及一条错误消息。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Eval.JScriptEvaluate(System.Object,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>
              通过使用指定的引擎将评估指定的 JScript 代码。
            </summary>
      <param name="source">
                要计算的代码。
              </param>
      <param name="engine">
                对要用于评估的脚本引擎的引用 <paramref name="source" />。
              </param>
      <returns>
              计算的结果。
               如果 <paramref name="source" /> 不是一个字符串，返回值是 <paramref name="source" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Eval.JScriptEvaluate(System.Object,System.Object,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>
              计算指定的 JScript 代码通过使用指定的引擎和安全选项。
            </summary>
      <param name="source">
                要计算的代码。
              </param>
      <param name="unsafeOption">
                字符串文字 unsafe 以启用不安全的计算; 否则为 <see langword="false" />。
              </param>
      <param name="engine">
                对要用于评估的脚本引擎的引用 <paramref name="source" />。
              </param>
      <returns>
              计算的结果。
               如果 <paramref name="source" /> 不是一个字符串，返回值是 <paramref name="source" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Expando.#ctor">
      <summary>
              新实例初始化 <see cref="T:Microsoft.JScript.Expando" /> 特性类。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.FieldAccessor.#ctor">
      <summary>
              初始化 <see cref="T:Microsoft.JScript.FieldAccessor" /> 类的新实例。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.FieldAccessor.GetValue(System.Object)">
      <summary>
              当在派生类中重写，获取指定对象的字段值。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              为字段的值 <paramref name="thisob" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.FieldAccessor.SetValue(System.Object,System.Object)">
      <summary>
              当在派生类中重写，将设置为指定的对象的字段指定的值。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="value">
                要设置为该字段的值。
              </param>
    </member>
    <member name="M:Microsoft.JScript.ForIn.JScriptGetEnumerator(System.Object)">
      <summary>
              返回循环访问指定集合的枚举。
            </summary>
      <param name="coll">
                要为其获取一个枚举器集合。
              </param>
      <returns>
              枚举数循环访问 <paramref name="coll" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.FunctionConstructor.CreateInstance(System.Object[])">
      <summary>
              创建基于原型的对象，在指定的参数中传递的实例。
            </summary>
      <param name="args">
                要传递给构造函数的实参。
              </param>
      <returns>
              对象的实例。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.FunctionConstructor.Invoke(System.Object[])">
      <summary>
              创建基于原型的对象，在指定的参数中传递的实例。
            </summary>
      <param name="args">
                要传递给构造函数的实参。
              </param>
      <returns>
              对象的实例。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.FunctionDeclaration.JScriptFunctionDeclaration(System.RuntimeTypeHandle,System.String,System.String,System.String[],Microsoft.JScript.JSLocalField[],System.Boolean,System.Boolean,System.String,System.Object,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>
              创建一个新的闭包函数，使用指定的信息。
            </summary>
      <param name="handle">
                函数的类型的句柄。
              </param>
      <param name="name">
                函数名。
              </param>
      <param name="method_name">
                函数名。
              </param>
      <param name="formal_parameters">
                函数的参数。
              </param>
      <param name="fields">
                该函数的字段。
              </param>
      <param name="must_save_stack_locals">
                <see langword="true" /> 若要保存局部堆栈变量。
                 这一点很重要的嵌套函数对于访问其中一个局部变量或用于 <see langword="eval" /> 语句。
              </param>
      <param name="hasArgumentsObject">
                <see langword="true" /> 如果函数具有一个参数数组。
              </param>
      <param name="text">
                函数声明的文本。
              </param>
      <param name="declaringObject">
                获取声明此方法的类型。
              </param>
      <param name="engine">
                对脚本引擎的引用。
              </param>
      <returns>
              表示函数声明一个新结束函数。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.FunctionExpression.JScriptFunctionExpression(System.RuntimeTypeHandle,System.String,System.String,System.String[],Microsoft.JScript.JSLocalField[],System.Boolean,System.Boolean,System.String,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>
              创建一个新的函数对象，并使用指定的信息。
            </summary>
      <param name="handle">
                函数的类型的句柄。
              </param>
      <param name="name">
                函数名。
              </param>
      <param name="method_name">
                函数名。
              </param>
      <param name="formal_params">
                函数的参数。
              </param>
      <param name="fields">
                该函数的字段。
              </param>
      <param name="must_save_stack_locals">
                <see langword="true" /> 若要保存局部堆栈变量。
                 这一点很重要的嵌套函数对于访问其中一个局部变量，或用于 <see langword="eval" /> 语句。
              </param>
      <param name="hasArgumentsObject">
                <see langword="true" /> 如果函数具有一个参数数组。
              </param>
      <param name="text">
                函数声明的文本。
              </param>
      <param name="engine">
                对脚本引擎的引用。
              </param>
      <returns>
              一个新的函数对象。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.FunctionObject.ToString">
      <summary>
              返回此函数对象的字符串表示。
            </summary>
      <returns>
              此函数对象，其中包含该函数的文本字符串表示形式。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.FunctionPrototype.apply(System.Object,System.Object,System.Object)">
      <summary>
              调用此对象表示，将指定的参数对象转换为参数的数组，如有的函数。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="thisarg">
                当前的默认作用域。
                 包含的对象 <see langword="with" /> 语句范围或全局范围。
              </param>
      <param name="argArray">
                要作为传递给该函数的参数 <see cref="T:Microsoft.JScript.ArgumentsObject" /> 或 <see cref="T:Microsoft.JScript.ArrayObject" />。
              </param>
      <returns>
              对此对象表示的函数的调用返回值。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.FunctionPrototype.call(System.Object,System.Object,System.Object[])">
      <summary>
              调用此对象表示的函数。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="thisarg">
                当前的默认作用域。
                 包含的对象 <see langword="with" /> 语句范围或全局范围。
              </param>
      <param name="args">
                要传递给数组作为函数的参数。
              </param>
      <returns>
              对此对象表示的函数的调用返回值。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.FunctionPrototype.toString(System.Object)">
      <summary>
              创建指定对象的字符串表示形式。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              字符串表示形式 <paramref name="thisob" /> ，其中包含函数的名称。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.FunctionWrapper.ToString">
      <summary>
              创建的函数的字符串表示形式。
            </summary>
      <returns>
              包含函数源、 函数成员和函数名称的函数的字符串表示形式。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.CollectGarbage">
      <summary>
              调用垃圾回收器。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.decodeURI(System.Object)">
      <summary>
              将解码指定统一资源标识符 (URI)，考虑保留字符。
            </summary>
      <param name="encodedURI">
                要解码的 URI。
              </param>
      <returns>
              已解码的版本 <paramref name="encodedURI" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.decodeURIComponent(System.Object)">
      <summary>
              对指定的统一资源标识符 (URI) 进行解码。
            </summary>
      <param name="encodedURI">
                要解码的 URI。
              </param>
      <returns>
              已解码的版本 <paramref name="encodedURI" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.encodeURI(System.Object)">
      <summary>
              对指定统一资源标识符 (URI)，考虑保留字符进行编码。
            </summary>
      <param name="uri">
                要编码的 URI。
              </param>
      <returns>
              编码的版本 <paramref name="uri" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.encodeURIComponent(System.Object)">
      <summary>
              对指定的统一资源标识符 (URI) 进行编码。
            </summary>
      <param name="uriComponent">
                要编码的 URI。
              </param>
      <returns>
              编码的版本 <paramref name="uriComponent" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.escape(System.Object)">
      <summary>
              转换指定的字符串使用 %字符进行转义保留的字符 (@，*，_、 +、-、。，/) 和 express 以 Unicode 表示法。
            </summary>
      <param name="string">
                要转换的字符串。
              </param>
      <returns>
              一份新 <paramref name="string" /> 中并以 Unicode 表示的由 %字符转义保留的字符是。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.eval(System.Object)">
      <summary>
              引发 <see cref="F:Microsoft.JScript.JSError.IllegalEval" /> 在所有情况下的异常。
            </summary>
      <param name="x">
                要计算的表达式。
              </param>
      <returns>
              引发 <see cref="F:Microsoft.JScript.JSError.IllegalEval" /> 在所有情况下的异常。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.GetObject(System.Object,System.Object)">
      <summary>
              使用名字对象或 ProgID 从非托管对象创建托管的对象。
            </summary>
      <param name="moniker">
                对象的标记。
              </param>
      <param name="progId">
                将对象的 ProgID。
              </param>
      <returns>
              托管的对象。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.isFinite(System.Double)">
      <summary>
              确定指定的数目是否表示无穷大。
            </summary>
      <param name="number">
                要检查的数字。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="number" /> 不是 <see cref="F:System.Double.NaN" />, ，而不 <see cref="F:System.Double.PositiveInfinity" />, ，而不 <see cref="F:System.Double.NegativeInfinity" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.isNaN(System.Object)">
      <summary>
              确定是否可为一个 JScript 的数字转换指定的数目。
            </summary>
      <param name="num">
                要检查的数字。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="num" /> 可被转换为 JScript 数; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.parseFloat(System.Object)">
      <summary>
              指定将字符串转换为其 <see cref="T:System.Double" /> 等效。
            </summary>
      <param name="string">
                要转换的字符串。
              </param>
      <returns>
              中包含的值相等的值 <paramref name="string" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.parseInt(System.Object,System.Object)">
      <summary>
              指定将字符串转换为其 <see cref="T:System.Double" /> 等效项，使用指定的基数。
            </summary>
      <param name="string">
                要转换的字符串。
              </param>
      <param name="radix">
                一个介于之间的数字 2 和 36 表示数字系统的基数， <paramref name="string" /> 以表示。
                 默认值为 10。
              </param>
      <returns>
              一个值，它等效于中包含的值 <paramref name="string" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.ScriptEngine">
      <summary>
              获取脚本引擎的名称。
            </summary>
      <returns>
              字符串文字"JScript"。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.ScriptEngineBuildVersion">
      <summary>
              获取脚本引擎的内部版本号。
            </summary>
      <returns>
              脚本引擎的内部版本号。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.ScriptEngineMajorVersion">
      <summary>
              获取脚本引擎的主版本号。
            </summary>
      <returns>
              脚本引擎的主要版本号。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.ScriptEngineMinorVersion">
      <summary>
              获取脚本引擎的次版本号。
            </summary>
      <returns>
              脚本引擎的次版本号。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.unescape(System.Object)">
      <summary>
              转换为 %的转义字符 (@，*，_、 +、-，。，/) 中对其原始形式的指定字符串。
               转义的字符都以 Unicode 表示法表示。
            </summary>
      <param name="string">
                要转换的字符串。
              </param>
      <returns>
              一份新 <paramref name="string" /> 中而转义的字符转换为其原始格式。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Globals.ConstructArray(System.Object[])">
      <summary>
              提供对全局访问 <see cref="M:Microsoft.JScript.ArrayConstructor.CreateInstance(System.Object[])" /> 方法。
            </summary>
      <param name="args">
                要填充该数组的值。
              </param>
      <returns>
              JScript 的新实例 <see cref="T:Microsoft.JScript.ArrayObject" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Globals.ConstructArrayLiteral(System.Object[])">
      <summary>
              提供对全局访问 <see cref="M:Microsoft.JScript.ArrayConstructor.ConstructArray(System.Object[])" /> 方法。
            </summary>
      <param name="args">
                要填充该数组的值。
              </param>
      <returns>
              JScript 的新实例 <see cref="T:Microsoft.JScript.ArrayObject" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.#ctor(Microsoft.JScript.GlobalScope,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>
              初始化 <see cref="T:Microsoft.JScript.GlobalScope" /> 类的新实例。
            </summary>
      <param name="parent">
                对父对象的引用。
              </param>
      <param name="engine">
                对脚本引擎的引用。
              </param>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.AddField(System.String)">
      <summary>
              将指定的字段添加到全局作用域。
            </summary>
      <param name="name">
                要添加的字段的名称。
              </param>
      <returns>
              新的字段中，如果已成功添加。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.GetDefaultThisObject">
      <summary>
              获取包含的对象的当前默认作用域，可以是 <see langword="with" /> 语句范围或全局范围。
            </summary>
      <returns>
              此对象。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.GetField(System.String,System.Int32)">
      <summary>
              获取通过搜索作用域层次结构中具有指定的名称的字段。
               此方法搜索的词法级别指定的作用域。
            </summary>
      <param name="name">
                要搜索的字段的名称。
              </param>
      <param name="lexLevel">
                要搜索的词法级别。
              </param>
      <returns>
              具有指定的名称的字段。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.GetFields(System.Reflection.BindingFlags)">
      <summary>
              获取一个数组 <see cref="T:System.Reflection.FieldInfo" /> 对应于全局范围的所有字段的对象。
            </summary>
      <param name="bindingAttr">
                指定搜索成员通过反射的执行方式的枚举值的按位组合。
              </param>
      <returns>
              包含全局范围内的所有字段的对象数组。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.GetGlobalScope">
      <summary>
              通过返回对此对象的引用来获取全局作用域。
            </summary>
      <returns>
              此对象。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.GetLocalField(System.String)">
      <summary>
              获取具有指定的名称的字段的局部声明。
               这用于编译时错误检查。
            </summary>
      <param name="name">
                字段的名称。
              </param>
      <returns>
              本地字段的声明。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>
              获取一个数组 <see cref="T:System.Reflection.MemberInfo" /> 对应于指定的名称匹配的所有成员的对象。
            </summary>
      <param name="name">
                要搜索的成员的名称。
              </param>
      <param name="bindingAttr">
                指定搜索成员通过反射的执行方式的枚举值的按位组合。
              </param>
      <returns>
              匹配的对象的数组 <paramref name="name" /> 参数。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.GetMembers(System.Reflection.BindingFlags)">
      <summary>
              获取一个数组 <see cref="T:System.Reflection.MemberInfo" /> 对应于全局范围的所有成员的对象。
            </summary>
      <param name="bindingAttr">
                指定搜索成员通过反射的执行方式的枚举值的按位组合。
              </param>
      <returns>
              包含全局范围内的所有成员的对象数组。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.GetMethods(System.Reflection.BindingFlags)">
      <summary>
              获取一个数组 <see cref="T:System.Reflection.MethodInfo" /> 对应于全局范围内的所有方法的对象。
            </summary>
      <param name="bindingAttr">
                指定搜索成员通过反射的执行方式的枚举值的按位组合。
              </param>
      <returns>
              包含全局范围内的所有方法的对象数组。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.GetProperties(System.Reflection.BindingFlags)">
      <summary>
              获取一个数组 <see cref="T:System.Reflection.PropertyInfo" /> 对应于全局范围的所有属性的对象。
            </summary>
      <param name="bindingAttr">
                指定搜索成员通过反射的执行方式的枚举值的按位组合。
              </param>
      <returns>
              包含全局范围内的所有属性的对象数组。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.System#Runtime#InteropServices#Expando#IExpando#AddMethod(System.String,System.Delegate)">
      <summary>
              将指定的方法添加到全局作用域。
               在 JScript 中未实现此方法。
            </summary>
      <param name="name">
                要添加的方法的名称。
              </param>
      <param name="method">
                给该方法委托。
              </param>
      <returns>
              在所有情况下，则为 null。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.System#Runtime#InteropServices#Expando#IExpando#AddProperty(System.String)">
      <summary>
              将指定的属性添加到全局作用域。
               在 JScript 中未实现此方法。
            </summary>
      <param name="name">
                要添加的属性的名称。
              </param>
      <returns>
              在所有情况下，则为 null。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.System#Runtime#InteropServices#Expando#IExpando#RemoveMember(System.Reflection.MemberInfo)">
      <summary>
              从全局范围中移除指定的成员。
            </summary>
      <param name="m">
                要删除的成员的名称。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Hide.#ctor">
      <summary>
              新实例初始化 <see cref="T:Microsoft.JScript.Hide" /> 特性类。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.IActivationObject.GetDefaultThisObject">
      <summary>
              一个类中实现时，获取当前的默认作用域。
               包含的对象 <see langword="with" /> 语句范围或全局范围。
            </summary>
      <returns>
              当前的默认作用域。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IActivationObject.GetField(System.String,System.Int32)">
      <summary>
              一个类中实现时，返回通过搜索作用域层次结构中具有指定的名称的字段。
               此方法搜索的词法级别指定的作用域。
            </summary>
      <param name="name">
                要搜索的字段的名称。
              </param>
      <param name="lexLevel">
                要搜索的词法级别。
              </param>
      <returns>
              一个 <see cref="T:System.Reflection.FieldInfo" /> 具有指定的名称的对象。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IActivationObject.GetGlobalScope">
      <summary>
              类中实现时，获取通过搜索作用域层次结构，直到它找到一个范围，包括静态变量，例如，模块作用域的全局作用域。
            </summary>
      <returns>
              全局作用域。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IActivationObject.GetLocalField(System.String)">
      <summary>
              一个类中实现时，获取具有指定的名称的字段的局部声明。
               这用于编译时错误检查。
            </summary>
      <param name="name">
                字段的名称。
              </param>
      <returns>
              本地字段的声明。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IActivationObject.GetMemberValue(System.String,System.Int32)">
      <summary>
              一个类中实现时，通过搜索作用域层次结构中获取指定成员的值。
               此方法搜索的词法级别指定的作用域。
            </summary>
      <param name="name">
                要搜索的成员的名称。
              </param>
      <param name="lexlevel">
                要搜索的词法级别。
              </param>
      <returns>
              成员值 <paramref name="name" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IAuthorServices.GetCodeSense">
      <summary>
              一个类中实现时，获取一个对象，用于将 IntelliSense 添加到文本编辑器中创作 JScript 代码时。
            </summary>
      <returns>
              一个对象，用于将 IntelliSense 添加为文本。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IAuthorServices.GetColorizer">
      <summary>
              一个类中实现时，获取一个对象，用于在编辑器中创作 JScript 代码时为文本着色。
            </summary>
      <returns>
              一个对象，用于为文本着色。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IColorizeText.Colorize(System.String,Microsoft.JScript.SourceState)">
      <summary>
              一个类中实现时，将扫描单个代码单元指定的源代码并标识颜色每都应当有。
            </summary>
      <param name="sourceCode">
                要为着色的源代码。
              </param>
      <param name="state">
                对源代码的当前状态 （正常、 注释、 字符串）。
              </param>
      <returns>
              枚举 <see cref="T:Microsoft.JScript.ITokenColorInfo" /> 这些对象表示要着色的代码的单元。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IColorizeText.GetStateForText(System.String,Microsoft.JScript.SourceState)">
      <summary>
              一个类中实现时，将扫描单个代码单元指定的源代码并标识指定的代码的状态 （正常、 注释、 字符串）。
            </summary>
      <param name="sourceCode">
                要分析的源代码。
              </param>
      <param name="currentState">
                对源代码的当前状态 （正常、 注释、 字符串）。
              </param>
      <returns>
              对源代码的状态。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.BooleanToString(System.Boolean)">
      <summary>
              一个类中实现时，将指定 <see cref="T:System.Boolean" /> 值赋给 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <returns>
              文字字符串"true"或文字字符串"false"。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.ByteToString(System.Byte,System.Int32)">
      <summary>
              一个类中实现时，将指定 <see cref="T:System.Byte" /> 值赋给 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <param name="radix">
                返回的值的基数。
                 基类必须是 2、 8、 10 或 16。
              </param>
      <returns>
              以 <paramref name="value" /> 为基数的 <paramref name="radix" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.DoubleToDateString(System.Double)">
      <summary>
              一个类中实现时，创建的字符串表示形式指定 <see cref="T:System.Double" />。
               字符串表示形式包含在一周、 月份、 日期、 时间、 时区和年的某一天。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <returns>
              <paramref name="value" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.DoubleToString(System.Double)">
      <summary>
              一个类中实现时，将指定 <see cref="T:System.Double" /> 值赋给 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <returns>
              <paramref name="value" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.GetErrorMessageForHR(System.Int32,Microsoft.JScript.Vsa.IJSVsaEngine)">
      <summary>
              获取错误消息，它是一个类中实现时，创建从指定 <see cref="P:System.Exception.HResult" /> 和 <see cref="T:System.Globalization.CultureInfo" /> 指定 <see cref="T:Microsoft.JScript.Vsa.IJSVsaEngine" />。
            </summary>
      <param name="hr">
                HRESULT 错误代码。
              </param>
      <param name="engine">
                对脚本引擎的引用。
              </param>
      <returns>
              包含有关错误的信息的本地化的字符串。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.GetManagedCharObject(System.UInt16)">
      <summary>
              一个类中实现时，创建具有指定的基元一个托管的对象 <see cref="T:System.Char" /> 值。
            </summary>
      <param name="i">
                要转换的值。
              </param>
      <returns>
              <paramref name="i" /> 转换为 <see cref="T:System.Char" /> 然后 <see cref="T:System.Object" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.GetManagedInt64Object(System.Int64)">
      <summary>
              一个类中实现时，创建具有指定的基元一个托管的对象 <see cref="T:System.Int64" /> 值。
            </summary>
      <param name="i">
                要转换的值。
              </param>
      <returns>
              <paramref name="i" /> 转换为 <see cref="T:System.Object" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.GetManagedObject(System.Object)">
      <summary>
              一个类中实现时，创建具有指定的基元值的托管的对象。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <returns>
              <paramref name="value" /> 转换为托管 <see cref="T:System.Object" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.GetManagedUInt64Object(System.UInt64)">
      <summary>
              一个类中实现时，创建具有指定的基元一个托管的对象 <see cref="T:System.UInt64" /> 值。
            </summary>
      <param name="i">
                要转换的值。
              </param>
      <returns>
              <paramref name="i" /> 转换为 <see cref="T:System.Object" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.Int16ToString(System.Int16,System.Int32)">
      <summary>
              一个类中实现时，将指定 <see cref="T:System.Int16" /> 值赋给 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <param name="radix">
                返回的值的基数。
                 基类必须是 2、 8、 10 或 16。
              </param>
      <returns>
              以 <paramref name="value" /> 为基数的 <paramref name="radix" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.Int32ToString(System.Int32,System.Int32)">
      <summary>
              一个类中实现时，将指定 <see cref="T:System.Int32" /> 值赋给 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <param name="radix">
                返回的值的基数。
                 基类必须是 2、 8、 10 或 16。
              </param>
      <returns>
              以 <paramref name="value" /> 为基数的 <paramref name="radix" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.Int64ToString(System.Int64,System.Int32)">
      <summary>
              一个类中实现时，将指定 <see cref="T:System.Int64" /> 值赋给 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <param name="radix">
                返回的值的基数。
                 基类必须是 2、 8、 10 或 16。
              </param>
      <returns>
              以 <paramref name="value" /> 为基数的 <paramref name="radix" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.RegexpToString(System.String,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
              一个类中实现时，指定正则表达式将信息转换为 <see cref="T:System.String" />。
            </summary>
      <param name="source">
                要匹配的正则表达式模式。
              </param>
      <param name="ignoreCase">
                <see langword="true" /> 若要使用不区分大小写匹配;否则为 <see langword="false" />。
              </param>
      <param name="global">
                <see langword="true" /> 若要使用全局匹配项，则否则为 <see langword="false" />。
              </param>
      <param name="multiline">
                <see langword="true" /> 若要使用多行匹配项，则否则为 <see langword="false" />。
              </param>
      <returns>
              字符串表示形式的正则表达式的信息。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.SByteToString(System.SByte,System.Int32)">
      <summary>
              一个类中实现时，将指定 <see cref="T:System.SByte" /> 值赋给 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <param name="radix">
                返回的值的基数。
                 基类必须是 2、 8、 10 或 16。
              </param>
      <returns>
              以 <paramref name="value" /> 为基数的 <paramref name="radix" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.SingleToString(System.Single)">
      <summary>
              一个类中实现时，将指定 <see cref="T:System.Single" /> 值赋给 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <returns>
              <paramref name="value" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.StringToPrintable(System.String)">
      <summary>
              一个类中实现时，将指定 <see cref="T:System.String" /> 到 <see cref="T:System.String" /> 包含不可打印的字符的转义符。
            </summary>
      <param name="source">
                要转换的值。
              </param>
      <returns>
              字符串表示形式 <paramref name="source" /> 包含转义字符。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.ToPrimitive(System.Object,System.TypeCode,System.Boolean)">
      <summary>
              一个类中实现时，将指定的值转换为指定 <see cref="T:System.TypeCode" />, ，还可以选择允许丢失数据。
            </summary>
      <param name="value">
                要转换为新类型的值。
              </param>
      <param name="typeCode">
                要转换的类型 <paramref name="value" /> 到。
              </param>
      <param name="truncationPermitted">
                <see langword="true" /> 若要允许的数据丢失。否则为 <see langword="false" />。
              </param>
      <returns>
              <paramref name="value" /> 转换为 <paramref name="typeCode" /> 类型。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.UInt16ToString(System.UInt16,System.Int32)">
      <summary>
              一个类中实现时，将指定 <see cref="T:System.UInt16" /> 值赋给 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <param name="radix">
                返回的值的基数。
                 基类必须是 2、 8、 10 或 16。
              </param>
      <returns>
              以 <paramref name="value" /> 为基数的 <paramref name="radix" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.UInt32ToString(System.UInt32,System.Int32)">
      <summary>
              一个类中实现时，将指定 <see cref="T:System.UInt32" /> 值赋给 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <param name="radix">
                返回的值的基数。
                 基类必须是 2、 8、 10 或 16。
              </param>
      <returns>
              以 <paramref name="value" /> 为基数的 <paramref name="radix" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.UInt64ToString(System.UInt64,System.Int32)">
      <summary>
              一个类中实现时，将指定 <see cref="T:System.UInt64" /> 值赋给 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <param name="radix">
                返回的值的基数。
                 基类必须是 2、 8、 10 或 16。
              </param>
      <returns>
              以 <paramref name="value" /> 为基数的 <paramref name="radix" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert2.DecimalToString(System.Decimal)">
      <summary>
              一个类中实现时，将指定 <see cref="T:System.Decimal" /> 值赋给 <see cref="T:System.String" />。
            </summary>
      <param name="value">
                要转换的值。
              </param>
      <returns>
              <paramref name="value" /> 的字符串表示形式。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IDebuggerObject.HasEnumerableMember(System.String)">
      <summary>
              一个类中实现时，确定当前对象是否具有指定的名称，并且可枚举的成员。
            </summary>
      <param name="name">
                要搜索的成员的名称。
              </param>
      <returns>
              <see langword="true" /> 如果当前对象具有名为的可枚举成员 <paramref name="name" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IDebuggerObject.IsCOMObject">
      <summary>
              一个类中实现时，确定当前对象是真正的 COM 对象或一个托管对象的代理。
            </summary>
      <returns>
              <see langword="true" /> 如果当前对象是 COM 对象; <see langword="false" /> 如果当前对象的托管对象的代理。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IDebuggerObject.IsEqual(Microsoft.JScript.IDebuggerObject)">
      <summary>
              一个类中实现时，确定当前对象是否等于指定的对象。
            </summary>
      <param name="o">
                要测试相等的对象。
              </param>
      <returns>
              <see langword="true" /> 表示当前对象是否相同 <paramref name="o" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IDebuggerObject.IsScriptFunction">
      <summary>
              一个类中实现时，确定当前对象是否为托管的 JScript 函数的代理。
            </summary>
      <returns>
              <see langword="true" /> 如果当前对象是托管的 JScript 函数; 的代理否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IDebuggerObject.IsScriptObject">
      <summary>
              一个类中实现时，确定当前对象是否为托管的 JScript 对象的代理。
            </summary>
      <returns>
              <see langword="true" /> 如果当前对象的代理托管的 JScript 对象;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IDebugScriptScope.SetThisValue(System.Object)">
      <summary>
              一个类中实现时，设置 <see langword="this" /> 具有全局作用域相关联的值。
            </summary>
      <param name="thisValue">
                该值将用作 <see langword="this" /> 全局作用域的对象。
              </param>
    </member>
    <member name="M:Microsoft.JScript.IDebugType.HasInstance(System.Object)">
      <summary>
              一个类中实现时，确定指定的对象是否为当前类型的实例。
            </summary>
      <param name="o">
                要测试的对象。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="o" /> 是当前类型的实例; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate">
      <summary>
              一个类中实现时，计算块、 表达式或代码项目所表示的语句并返回的值。
               它通常会调用由调试器计算的表达式 （在监视窗口中，例如） 所需。
               对于表达式，则这是该表达式的结果。
               对于块和语句中，所得到的表达式是通过代码块或语句的最后一个表达式。
            </summary>
      <returns>
              返回一个值，表示语句、 表达式或块的计算。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)">
      <summary>
              一个类中实现时，分析字符串并返回分析出的信息。
               此方法通常由调试器需要用来分析信息表示为一个断点调用 <see langword="string" />。
               调试器中可能存在键入用户在窗体中的断点 -参数 Il。
               命名的断点字符串可以包含复杂的格式，例如， F.B(C.D[], int, arg : double ) : C.Abc + 123. 参数列表是可选的按原样的 IL 偏移量。
            </summary>
      <param name="input">
                格式良好的命名断点字符串，它提供一个函数，可选参数列表和可选的 IL 偏移量。
              </param>
      <param name="functionName">
                输出参数返回的函数名称出输入的字符串或空字符串时分析输入的字符串的格式不正确。
              </param>
      <param name="nargs">
                输出参数返回可选的参数列表中的参数的数目。
                 如果没有参数列表或字符串的格式不正确，则返回零。
              </param>
      <param name="arguments">
                Out 参数的类型的所有参数的名称以空格分隔的列表中的参数列表中或空字符串时返回参数列表缺失或格式不正确的输入的字符串。
              </param>
      <param name="returnType">
                输出参数返回一个包含命名的输入中的函数的返回类型的字符串或空字符串，如果返回类型已丢失或输入的字符串的格式不正确。
              </param>
      <param name="offset">
                给定的 IL 偏移量从输入的字符串内，则为零，如果没有 IL 偏移量或该字符串的格式不正确的无符号长整数。
              </param>
      <returns>
              返回 <see langword="true" /> 如果成功地分析了命名的断点， <see langword="false" /> 否则为。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IDefineEvent.AddEvent(System.String,System.Int32)">
      <summary>
              由活动脚本宿主来定义事件。
            </summary>
      <param name="code">
                包含该事件的代码。
              </param>
      <param name="startLine">
                该代码的开始位置的行号。
              </param>
      <returns>
              该事件，如果已成功添加。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.Clone(System.AppDomain)">
      <summary>
              一个类中实现时，创建一个新的相同引擎，在具有相同的编译的状态和已命名的项的新的应用程序域中运行。
               这不是在 JScript 中实现的。
            </summary>
      <param name="domain">
                要在其中创建新的引擎应用程序域。
              </param>
      <returns>
              新的引擎。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.CompileEmpty">
      <summary>
              一个类中实现时，会触发当前在引擎中的所有状态的编译。
               所有引用、 代码项、 宿主项和资源通过编译器都运行。
            </summary>
      <returns>
              <see langword="true" /> 如果编译成功，否则， <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.ConnectEvents">
      <summary>
              一个类中实现时，应该通知引擎它能够连接到任何全局事件处理程序的事件的任何已注册的事件源。
               这不是在 JScript 中实现的。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.DisconnectEvents">
      <summary>
              一个类中实现时，指示引擎解除挂钩事件处理程序从事件源。
               这不是在 JScript 中实现的。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.GetAssembly">
      <summary>
              一个类中实现时，获取编译的程序集生成的编译步骤。
            </summary>
      <returns>
              编译的程序集。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.GetGlobalScope">
      <summary>
              一个类中实现时，获取全局作用域对象。
            </summary>
      <returns>
              全局作用域对象中。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.GetModule">
      <summary>
              一个类中实现时，从编译的程序集获取的代码模块。
            </summary>
      <returns>
              从编译的程序集代码模块。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.InitVsaEngine(System.String,Microsoft.JScript.Vsa.IJSVsaSite)">
      <summary>
              一个类中实现时，初始化 <see cref="T:Microsoft.JScript.Vsa.VsaEngine" />。
            </summary>
      <param name="rootMoniker">
                脚本引擎的根名字对象。
                 有关详细信息，请参阅<see cref="P:Microsoft.Vsa.IVsaEngine.RootMoniker" />。
              </param>
      <param name="site">
                由宿主实现 <see cref="T:Microsoft.Vsa.IVsaSite" /> 脚本引擎用于与主机通信的对象。
                 有关详细信息，请参阅<see cref="P:Microsoft.Vsa.IVsaEngine.Site" />。
              </param>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.Interrupt">
      <summary>
              一个类中实现时，调用 <see cref="M:System.Threading.Thread.Abort" /> 正在运行的脚本代码的线程上。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.RegisterEventSource(System.String)">
      <summary>
              一个类中实现时，作为事件源，指定为标记的项的名称，以便 <see cref="M:Microsoft.JScript.IEngine2.ConnectEvents" /> 方法可以确定要连接的事件。
               这不是在 JScript 中实现的。
            </summary>
      <param name="name">
                提供事件的添加项的名称。
              </param>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.Restart">
      <summary>
              一个类中实现时，在其引擎重置为干净状态在计算一个新的表达式之前由调试器调用此方法。
               该方法将返回到其原始状态重置添加的项和全局作用域。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.Run(System.AppDomain)">
      <summary>
              一个类中实现时，指定的应用程序域中运行的已编译的代码。
               这是未实现在 JScript 中因为托管的引擎不支持用户提供应用程序域中运行的代码。
            </summary>
      <param name="domain">
                在其上运行的已编译的代码的应用程序域。
              </param>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.RunEmpty">
      <summary>
              一个类中实现时，在当前运行的已编译的代码 <see cref="T:System.AppDomain" />。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.IErrorHandler.OnCompilerError(Microsoft.JScript.IVsaFullErrorInfo)">
      <summary>
              一个类中实现时，确定如何处理发生在分析代码时的错误。
            </summary>
      <param name="error">
                包含有关错误的信息的对象。
              </param>
      <returns>
              <see langword="false" /> 若要处理错误; <see langword="true" /> 忽略错误并继续进行分析。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IMessageReceiver.Message(System.String)">
      <summary>
              一个类中实现时，捕获指定的输出。
            </summary>
      <param name="strValue">
                要捕获的输出。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Import.JScriptImport(System.String,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>
              将指定的命名空间用于导入由指定的脚本引擎。
            </summary>
      <param name="name">
                要导入的命名空间。
              </param>
      <param name="engine">
                对脚本引擎的引用。
              </param>
    </member>
    <member name="M:Microsoft.JScript.In.JScriptIn(System.Object,System.Object)">
      <summary>
              确定第一个指定的对象是否包含第二个指定对象中。
            </summary>
      <param name="v1">
                要搜索的对象。
              </param>
      <param name="v2">
                要在中搜索的对象。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="v1" /> 中包含 <paramref name="v2" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.INeedEngine.GetEngine">
      <summary>
              一个类中实现时，获取对脚本引擎的引用。
            </summary>
      <returns>
              对脚本引擎的引用。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.INeedEngine.SetEngine(Microsoft.JScript.Vsa.VsaEngine)">
      <summary>
              一个类中实现时，设置对脚本引擎的引用。
            </summary>
      <param name="engine">
                对脚本引擎的引用。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Instanceof.JScriptInstanceof(System.Object,System.Object)">
      <summary>
              确定第一个指定的对象是否可强制转换为第二个指定对象的类型。
            </summary>
      <param name="v1">
                要强制转换为对象的类型的对象 <paramref name="v2" />。
              </param>
      <param name="v2">
                具有所需的类型的对象。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="v1" /> 可强制转换为对象的类型 v2; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IParseText.Parse(System.String,Microsoft.JScript.IErrorHandler)">
      <summary>
              一个类中实现时，将会分析指定的源代码。
            </summary>
      <param name="code">
                要分析的源代码。
              </param>
      <param name="error">
                一个对象，包含有关发生的错误的信息时 <paramref name="code" /> 正在分析。
              </param>
    </member>
    <member name="M:Microsoft.JScript.IRedirectOutput.SetOutputStream(Microsoft.JScript.IMessageReceiver)">
      <summary>
              一个类中实现时，将指定的输出流重定向到新的流或数据存储。
            </summary>
      <param name="output">
                要重定向的输出。
              </param>
    </member>
    <member name="M:Microsoft.JScript.ISite2.GetParentChain(System.Object)">
      <summary>
              一个类中实现时，获取父对象层次结构中指定的对象。
            </summary>
      <param name="obj">
                <see cref="T:System.Reflection.IReflect" /> 要获取的父层次结构对象。
              </param>
      <returns>
              包含的父对象的数组 <paramref name="obj" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ITokenEnumerator.GetNext">
      <summary>
              一个类中实现时，返回的集合中的下一项 <see cref="T:Microsoft.JScript.ITokenColorInfo" /> 对象。
            </summary>
      <returns>
              集合中的下一个项。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ITokenEnumerator.Reset">
      <summary>
              一个类中实现时，将枚举数设置为集合中的第一项之前其初始位置 <see cref="T:Microsoft.JScript.ITokenColorInfo" /> 对象。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.IVsaScriptCodeItem.Execute">
      <summary>
              一个类中实现时，将编译并运行此代码。
            </summary>
      <returns>
              从运行该代码，如果存在任何; 返回的值否则，为 null。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IVsaScriptScope.AddItem(System.String,Microsoft.JScript.Vsa.JSVsaItemType)">
      <summary>
              一个类中实现时，将项添加到作用域。
            </summary>
      <param name="itemName">
                项的名称。
              </param>
      <param name="type">
                枚举值之一。
                 指定要添加的项的类型。
              </param>
      <returns>
              新的项目中，如果已成功添加。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IVsaScriptScope.CreateDynamicItem(System.String,Microsoft.JScript.Vsa.JSVsaItemType)">
      <summary>
              一个类中实现时，将项添加到作用域。
              <see cref="T:Microsoft.JScript.Vsa.VsaEngine" /> 必须运行才能使用此方法。
            </summary>
      <param name="itemName">
                项的名称。
              </param>
      <param name="type">
                枚举值之一。
                 指定要添加的项的类型。
              </param>
      <returns>
              新的项目中，如果已成功添加。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IVsaScriptScope.GetItem(System.String)">
      <summary>
              一个类中实现时，从指定的名称由指定的作用域中获取的项。
            </summary>
      <param name="itemName">
                要获取的项的名称。
              </param>
      <returns>
              项名为 <paramref name="itemName" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IVsaScriptScope.GetItemAtIndex(System.Int32)">
      <summary>
              一个类中实现时，从指定的索引值指定的作用域中获取的项。
            </summary>
      <param name="index">
                要获取的项的索引。
              </param>
      <returns>
              处的项 <paramref name="index" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IVsaScriptScope.GetItemCount">
      <summary>
              一个类中实现时，获取范围内的项的数目。
            </summary>
      <returns>
              作用域中的项的数目。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IVsaScriptScope.GetObject">
      <summary>
              一个类中实现时，获取对全局作用域的引用。
            </summary>
      <returns>
              对全局作用域的引用。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.IVsaScriptScope.RemoveItem(Microsoft.JScript.Vsa.IJSVsaItem)">
      <summary>
              一个类中实现时中, 移除指定 <see cref="T:Microsoft.JScript.Vsa.IJSVsaItem" /> 从作用域的对象。
            </summary>
      <param name="item">
                要移除的项。
              </param>
    </member>
    <member name="M:Microsoft.JScript.IVsaScriptScope.RemoveItem(System.String)">
      <summary>
              一个类中实现时，移除由指定的名称范围从指定的项。
            </summary>
      <param name="itemName">
                要移除的项的名称。
              </param>
    </member>
    <member name="M:Microsoft.JScript.IVsaScriptScope.RemoveItemAtIndex(System.Int32)">
      <summary>
              一个类中实现时，移除由指定的索引值的范围中指定的项。
            </summary>
      <param name="index">
                要移除的项的索引。
              </param>
    </member>
    <member name="M:Microsoft.JScript.IWrappedMember.GetWrappedObject">
      <summary>
              一个类中实现时，返回的成员定义的对象。
            </summary>
      <returns>
              成员定义的对象。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSAuthor.#ctor">
      <summary>
              初始化 <see cref="T:Microsoft.JScript.JSAuthor" /> 类的新实例。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.JSAuthor.GetCodeSense">
      <summary>
              获取用于在编辑器中创作 JScript 代码时，将 IntelliSense 添加到文本的对象。
            </summary>
      <returns>
              一个对象，用于将 IntelliSense 添加为文本。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSAuthor.GetColorizer">
      <summary>
              获取用于在编辑器中创作 JScript 代码时为文本着色的对象。
            </summary>
      <returns>
              一个对象，用于为文本着色。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSConstructor.GetCustomAttributes(System.Boolean)">
      <summary>
              返回一个数组，包含附加到此构造函数的自定义特性。
            </summary>
      <param name="inherit">
                <see langword="true" /> 搜索此成员继承层次结构以查找这些特性。
              </param>
      <returns>
              包含附加到此方法的自定义特性的数组; 如果没有任何一个数组，其中包含零个元素。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSConstructor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>
              返回一个数组，包含附加到此构造函数中，只搜索指定类型的特性的自定义特性。
            </summary>
      <param name="t">
                要搜索的属性的类型。
              </param>
      <param name="inherit">
                <see langword="true" /> 搜索此成员继承层次结构以查找这些特性。
              </param>
      <returns>
              一个数组 <see cref="T:System.Object" /> 具有零个元素的对象。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSConstructor.GetMethodImplementationFlags">
      <summary>
              返回有关此方法的实现的信息。
            </summary>
      <returns>
              <see cref="F:System.Reflection.MethodImplAttributes.Managed" /> 和 <see cref="F:System.Reflection.MethodImplAttributes.IL" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSConstructor.GetParameters">
      <summary>
              获取此构造函数的参数。
            </summary>
      <returns>
              一个数组，包含与此构造函数的签名匹配的信息。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSConstructor.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>
              调用构造函数，对指定的对象，使用指定的区域性和绑定信息。
            </summary>
      <param name="obj">
                要在调用构造函数的对象。
              </param>
      <param name="options">
                用于控制绑定的枚举值的按位组合。
              </param>
      <param name="binder">
                一个对象，将类型从实参类型转换为形参类型。
              </param>
      <param name="parameters">
                要传递给构造函数的参数列表。
              </param>
      <param name="culture">
                提供有关特定区域性或区域设置信息。
                 用于正确地设置数字、 日期和字符串的格式。
              </param>
      <returns>
              与构造函数关联的类的实例。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSConstructor.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>
              调用构造函数中，使用指定的区域性和绑定信息。
            </summary>
      <param name="options">
                用于控制绑定的枚举值的按位组合。
              </param>
      <param name="binder">
                一个对象，将类型从实参类型转换为形参类型。
              </param>
      <param name="parameters">
                要传递给构造函数的参数列表。
              </param>
      <param name="culture">
                提供有关特定区域性或区域设置信息。
                 用于正确地设置数字、 日期和字符串的格式。
              </param>
      <returns>
              与构造函数关联的类的实例。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSConstructor.IsDefined(System.Type,System.Boolean)">
      <summary>
              确定指定的属性类型是否已附加到此构造函数。
            </summary>
      <param name="type">
                要搜索的属性类型。
              </param>
      <param name="inherit">
                <see langword="true" /> 搜索此成员继承层次结构以查找这些特性。
              </param>
      <returns>
              在所有情况下均为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JScriptCodeProvider.#ctor">
      <summary>
              初始化 <see cref="T:Microsoft.JScript.JScriptCodeProvider" /> 类的新实例。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.JScriptCodeProvider.CreateCompiler">
      <summary>
              返回 JScript 代码编译器的实例。
            </summary>
      <returns>
              JScript 代码编译器的实例。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JScriptCodeProvider.CreateGenerator">
      <summary>
              返回 JScript 代码生成器的一个实例。
            </summary>
      <returns>
              JScript 代码生成器的实例。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JScriptException.#ctor">
      <summary>
              初始化 <see cref="T:Microsoft.JScript.JScriptException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.JScriptException.#ctor(Microsoft.JScript.JSError)">
      <summary>
              使用指定的 <see cref="T:Microsoft.JScript.JSError" /> 初始化 <see cref="T:Microsoft.JScript.JScriptException" /> 类的新实例。
            </summary>
      <param name="errorNumber">
                枚举值之一。
                 值指定的错误。
              </param>
    </member>
    <member name="M:Microsoft.JScript.JScriptException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see cref="T:Microsoft.JScript.JScriptException" /> 类，使用指定的序列化的数据。
            </summary>
      <param name="info">
                有关所引发的异常的序列化的对象数据。
              </param>
      <param name="context">
                有关源或目标的上下文信息。
              </param>
    </member>
    <member name="M:Microsoft.JScript.JScriptException.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:Microsoft.JScript.JScriptException" /> 类，使用指定的错误消息。
            </summary>
      <param name="m">
                描述错误的消息。
              </param>
    </member>
    <member name="M:Microsoft.JScript.JScriptException.#ctor(System.String,System.Exception)">
      <summary>
              新实例初始化 <see cref="T:Microsoft.JScript.JScriptException" /> 类，使用指定的错误消息和对导致此异常的内部异常的引用。
            </summary>
      <param name="m">
                描述错误的消息。
              </param>
      <param name="e">
                导致当前异常的异常。
              </param>
    </member>
    <member name="M:Microsoft.JScript.JScriptException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              存储有关该异常的信息包括 IsError 和 Code 值，在 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。
            </summary>
      <param name="info">
                有关所引发的异常的序列化的对象数据。
              </param>
      <param name="context">
                有关源或目标的上下文信息。
              </param>
    </member>
    <member name="M:Microsoft.JScript.JSField.#ctor">
      <summary>
              初始化 <see cref="T:Microsoft.JScript.JSField" /> 类的新实例。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.JSField.GetCustomAttributes(System.Boolean)">
      <summary>
              返回一个数组，包含附加到此字段的自定义特性。
            </summary>
      <param name="inherit">
                <see langword="true" /> 搜索此成员继承层次结构以查找这些特性。
              </param>
      <returns>
              一个数组 <see cref="T:System.Reflection.FieldInfo" /> 具有零个元素的对象。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSField.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>
              返回一个数组，包含附加到此字段，只搜索指定类型的特性的自定义特性。
            </summary>
      <param name="t">
                要搜索的属性的类型。
              </param>
      <param name="inherit">
                <see langword="true" /> 搜索此成员继承层次结构以查找这些特性。
              </param>
      <returns>
              一个数组 <see cref="T:System.Reflection.FieldInfo" /> 具有零个元素的对象。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSField.IsDefined(System.Type,System.Boolean)">
      <summary>
              确定指定的特性类型附加到此字段。
            </summary>
      <param name="type">
                要搜索的属性类型。
              </param>
      <param name="inherit">
                <see langword="true" /> 搜索此成员继承层次结构以查找这些特性。
              </param>
      <returns>
              在所有情况下均为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSFieldInfo.GetCustomAttributes(System.Boolean)">
      <summary>
              返回一个数组，包含附加到此字段的自定义特性。
            </summary>
      <param name="inherit">
                <see langword="true" /> 搜索此成员继承层次结构以查找这些特性。
              </param>
      <returns>
              一个数组 <see cref="T:System.Reflection.FieldInfo" /> 具有零个元素的对象。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSFieldInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>
              返回一个数组，包含附加到此字段，只搜索指定类型的特性的自定义特性。
            </summary>
      <param name="t">
                要搜索的属性的类型。
              </param>
      <param name="inherit">
                <see langword="true" /> 搜索此成员继承层次结构以查找这些特性。
              </param>
      <returns>
              一个数组 <see cref="T:System.Reflection.FieldInfo" /> 具有零个元素的对象。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSFieldInfo.GetValue(System.Object)">
      <summary>
              获取字段的值。
            </summary>
      <param name="obj">
                将返回其字段值的对象。
              </param>
      <returns>
              字段的值。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSFieldInfo.IsDefined(System.Type,System.Boolean)">
      <summary>
              确定指定的特性类型附加到此字段。
            </summary>
      <param name="type">
                要搜索的属性类型。
              </param>
      <param name="inherit">
                <see langword="true" /> 搜索此成员继承层次结构以查找这些特性。
              </param>
      <returns>
              在所有情况下均为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSFieldInfo.SetValue(System.Object,System.Object)">
      <summary>
              设置字段中，使用指定的值的值。
            </summary>
      <param name="obj">
                将设置其字段值的对象。
              </param>
      <param name="value">
                要分配给字段的值。
              </param>
    </member>
    <member name="M:Microsoft.JScript.JSFieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
      <summary>
              设置的值字段中，使用指定的值、 区域性和绑定信息。
            </summary>
      <param name="obj">
                将设置其字段值的对象。
              </param>
      <param name="value">
                要分配给字段的值。
              </param>
      <param name="invokeAttr">
                用于控制绑定的枚举值的按位组合。
              </param>
      <param name="binder">
                启用绑定、 强制参数类型和成员通过反射调用的属性集。
              </param>
      <param name="culture">
                提供有关特定区域性或区域设置信息。
                 用于正确地设置数字、 日期和字符串的格式。
              </param>
    </member>
    <member name="M:Microsoft.JScript.JSFunctionAttribute.#ctor(Microsoft.JScript.JSFunctionAttributeEnum)">
      <summary>
              新实例初始化 <see cref="T:Microsoft.JScript.JSFunctionAttribute" /> 类，使用指定的调用约定。
            </summary>
      <param name="value">
                方法或构造函数的调用约定。
              </param>
    </member>
    <member name="M:Microsoft.JScript.JSFunctionAttribute.#ctor(Microsoft.JScript.JSFunctionAttributeEnum,Microsoft.JScript.JSBuiltin)">
      <summary>
              新实例初始化 <see cref="T:Microsoft.JScript.JSFunctionAttribute" /> 类，使用指定的调用约定。
               该属性标识指定的内置函数。
            </summary>
      <param name="value">
                方法或构造函数的调用约定。
              </param>
      <param name="builtinFunction">
                此属性标识的内置函数。
              </param>
    </member>
    <member name="M:Microsoft.JScript.JSFunctionAttribute.GetAttributeValue">
      <summary>
              获取该方法或构造函数的调用约定。
            </summary>
      <returns>
              方法或构造函数的调用约定。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSLocalField.#ctor(System.String,System.RuntimeTypeHandle,System.Int32)">
      <summary>
              新实例初始化 <see cref="T:Microsoft.JScript.JSLocalField" /> 类，使用指定的名称、 句柄和插槽编号。
            </summary>
      <param name="name">
                此字段的名称。
              </param>
      <param name="handle">
                此字段的内部元数据表示句柄。
              </param>
      <param name="slotNumber">
                变量的槽数。
              </param>
    </member>
    <member name="M:Microsoft.JScript.JSLocalField.GetValue(System.Object)">
      <summary>
              获取字段的值。
            </summary>
      <param name="obj">
                将返回其字段值的对象。
              </param>
      <returns>
              字段的值。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSLocalField.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
      <summary>
              设置的值字段中，使用指定的值、 区域性和绑定信息。
            </summary>
      <param name="obj">
                将设置其字段值的对象。
              </param>
      <param name="value">
                要分配给字段的值。
              </param>
      <param name="invokeAttr">
                用于控制绑定的枚举值的按位组合。
              </param>
      <param name="binder">
                启用绑定、 强制参数类型和成员通过反射调用的属性集。
              </param>
      <param name="locale">
                提供有关特定区域性或区域设置信息。
                 用于正确地设置数字、 日期和字符串的格式。
              </param>
    </member>
    <member name="M:Microsoft.JScript.JSMethod.GetBaseDefinition">
      <summary>
              返回 <see cref="T:System.Reflection.MethodInfo" /> 首先声明此方法的直接或间接基类上的方法的对象。
            </summary>
      <returns>
              在所有情况下均为 <see langword="this" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSMethod.GetCustomAttributes(System.Boolean)">
      <summary>
              返回一个数组，包含附加到此方法的自定义特性。
            </summary>
      <param name="inherit">
                <see langword="true" /> 搜索此成员继承层次结构以查找这些特性。
              </param>
      <returns>
              一个数组 <see cref="T:System.Object" /> 具有零个元素的对象。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSMethod.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>
              返回一个数组，包含附加到此方法，只搜索指定类型的特性的自定义特性。
            </summary>
      <param name="t">
                要搜索的属性的类型。
              </param>
      <param name="inherit">
                <see langword="true" /> 搜索此成员继承层次结构以查找这些特性。
              </param>
      <returns>
              一个数组 <see cref="T:System.Object" /> 具有零个元素的对象。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSMethod.GetMethodImplementationFlags">
      <summary>
              返回有关此方法的实现的信息。
            </summary>
      <returns>
              <see cref="F:System.Reflection.MethodImplAttributes.Managed" /> 和 <see cref="F:System.Reflection.MethodImplAttributes.IL" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>
              调用的方法，使用指定的信息。
            </summary>
      <param name="obj">
                要调用的方法的对象。
              </param>
      <param name="options">
                用于控制绑定的枚举值的按位组合。
              </param>
      <param name="binder">
                一个对象，将类型从实参类型转换为形参类型。
              </param>
      <param name="parameters">
                要传递给方法的参数列表。
              </param>
      <param name="culture">
                提供有关特定区域性或区域设置信息。
                 用于正确地设置数字、 日期和字符串的格式。
              </param>
      <returns>
              对方法的调用返回值。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSMethod.IsDefined(System.Type,System.Boolean)">
      <summary>
              确定指定的特性类型附加到此方法。
            </summary>
      <param name="type">
                要搜索的属性类型。
              </param>
      <param name="inherit">
                <see langword="true" /> 搜索此成员继承层次结构以查找这些特性。
              </param>
      <returns>
              在所有情况下均为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSMethodInfo.GetBaseDefinition">
      <summary>
              返回 <see cref="T:System.Reflection.MethodInfo" /> 对象直接或间接基类最先声明此方法的方法。
            </summary>
      <returns>
              此方法在层次结构中的第一种实现。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSMethodInfo.GetCustomAttributes(System.Boolean)">
      <summary>
              返回一个数组，包含附加到此方法的自定义特性。
            </summary>
      <param name="inherit">
                <see langword="true" /> 搜索此成员继承层次结构以查找这些特性。
              </param>
      <returns>
              一个数组，包含自定义特性附加到这种方法，或者，如果没有任何一个数组，其中包含零个元素。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSMethodInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>
              返回一个数组，包含附加到此方法，只搜索指定类型的特性的自定义特性。
            </summary>
      <param name="type">
                要搜索的属性的类型。
              </param>
      <param name="inherit">
                <see langword="true" /> 搜索此成员继承层次结构以查找这些特性。
              </param>
      <returns>
              一个数组，包含自定义特性附加到这种方法，或者，如果没有任何一个数组，其中包含零个元素。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSMethodInfo.GetMethodImplementationFlags">
      <summary>
              返回有关此方法的实现的信息。
            </summary>
      <returns>
              枚举值的按位组合。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSMethodInfo.GetParameters">
      <summary>
              获取此方法的参数。
            </summary>
      <returns>
              一个数组，包含与此方法的签名匹配的信息。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSMethodInfo.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>
              调用的方法，使用指定的信息。
            </summary>
      <param name="obj">
                要调用的方法的对象。
              </param>
      <param name="options">
                用于控制绑定的枚举值的按位组合。
              </param>
      <param name="binder">
                一个对象，将类型从实参类型转换为形参类型。
              </param>
      <param name="parameters">
                要传递给方法的参数列表。
              </param>
      <param name="culture">
                提供有关特定区域性或区域设置信息。
                 用于正确地设置数字、 日期和字符串的格式。
              </param>
      <returns>
              对方法的调用返回值。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSMethodInfo.IsDefined(System.Type,System.Boolean)">
      <summary>
              确定指定的特性类型附加到此方法。
            </summary>
      <param name="type">
                要搜索的属性类型。
              </param>
      <param name="inherit">
                <see langword="true" /> 搜索此成员继承层次结构以查找这些特性。
              </param>
      <returns>
              <see langword="true" /> 如果指定的属性的一个或多个实例 <paramref name="type" /> 附加到此方法; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSMethodInfo.ToString">
      <summary>
              返回一个字符串，表示该方法。
            </summary>
      <returns>
              一个字符串，表示的方法。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSObject.#ctor">
      <summary>
              初始化 <see cref="T:Microsoft.JScript.JSObject" /> 类的新实例。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.JSObject.AddField(System.String)">
      <summary>
              将指定的字段添加到该对象。
            </summary>
      <param name="name">
                要添加的字段的名称。
              </param>
      <returns>
              新的字段中，如果已成功添加。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSObject.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>
              获取一个数组 <see cref="T:System.Reflection.MemberInfo" /> 对应于匹配指定的名称的所有成员的对象。
            </summary>
      <param name="name">
                要搜索的成员的名称。
              </param>
      <param name="bindingAttr">
                指定搜索成员通过反射的执行方式的枚举值的按位组合。
              </param>
      <returns>
              匹配的成员的数组 <paramref name="name" /> 参数。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSObject.GetMembers(System.Reflection.BindingFlags)">
      <summary>
              获取一个数组 <see cref="T:System.Reflection.MemberInfo" /> 对应于当前的脚本对象的所有成员的对象。
            </summary>
      <param name="bindingAttr">
                指定搜索成员通过反射的执行方式的枚举值的按位组合。
              </param>
      <returns>
              包含当前对象的所有成员的对象数组。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSObject.SetMemberValue2(System.String,System.Object)">
      <summary>
              设置的值的字段，可动态添加到对象并存储在 <see cref="F:Microsoft.JScript.JSObject.field_table" />。
            </summary>
      <param name="name">
                为其设置的值的字段的名称。
              </param>
      <param name="value">
                新字段的值。
              </param>
    </member>
    <member name="M:Microsoft.JScript.JSObject.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              返回循环访问对象的成员的枚举。
            </summary>
      <returns>
              一个枚举器对象，用于循环访问对象的成员。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSObject.System#Runtime#InteropServices#Expando#IExpando#AddMethod(System.String,System.Delegate)">
      <summary>
              将指定的方法添加到该对象。
              <see cref="M:Microsoft.JScript.JSObject.System#Runtime#InteropServices#Expando#IExpando#AddMethod(System.String,System.Delegate)" /> 在 JScript 中未实现。
            </summary>
      <param name="name">
                要添加的方法的名称。
              </param>
      <param name="method">
                给该方法委托。
              </param>
      <returns>
              在所有情况下，则为 null。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSObject.System#Runtime#InteropServices#Expando#IExpando#AddProperty(System.String)">
      <summary>
              将指定的属性添加到该对象。
               在 JScript 中未实现此方法。
            </summary>
      <param name="name">
                要添加的属性的名称。
              </param>
      <returns>
              在所有情况下，则为 null。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSObject.System#Runtime#InteropServices#Expando#IExpando#RemoveMember(System.Reflection.MemberInfo)">
      <summary>
              从对象中移除指定的成员。
            </summary>
      <param name="m">
                要删除的成员的名称。
              </param>
    </member>
    <member name="M:Microsoft.JScript.JSObject.ToString">
      <summary>
              返回表示当前对象的字符串。
            </summary>
      <returns>
              表示当前对象的字符串。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSParser.#ctor(Microsoft.JScript.Context)">
      <summary>
              新实例初始化 <see cref="T:Microsoft.JScript.JSParser" /> 类，同时指定要分析的源代码。
            </summary>
      <param name="context">
                要分析的源代码。
              </param>
    </member>
    <member name="M:Microsoft.JScript.JSParser.Parse">
      <summary>
              分析源代码。
            </summary>
      <returns>
              通过分析代码创建的抽象语法树的根。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSParser.ParseEvalBody">
      <summary>
              分析源代码。
               使用此方法，而不是 <see cref="M:Microsoft.JScript.JSParser.Parse" /> 的源代码位于 <see langword="eval" /> 方法调用。
            </summary>
      <returns>
              通过分析代码创建的抽象语法树的根。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.#ctor">
      <summary>
              初始化 <see cref="T:Microsoft.JScript.JSScanner" /> 类的新实例。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.#ctor(Microsoft.JScript.Context)">
      <summary>
              新实例初始化 <see cref="T:Microsoft.JScript.JSScanner" /> 类，同时指定要扫描的源代码。
            </summary>
      <param name="sourceContext">
                要扫描的源代码。
              </param>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.GetCurrentLine">
      <summary>
              在代码中获取当前行号。
               这是一个指针，它根据扫描代码时移动。
            </summary>
      <returns>
              当前在代码中的行号。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.GetCurrentPosition(System.Boolean)">
      <summary>
              获取代码字符串中的当前位置。
               这是一个指针，它根据扫描代码时移动。
            </summary>
      <param name="absolute">
                忽略此参数。
              </param>
      <returns>
              Code 字符串中的当前位置。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.GetNextToken">
      <summary>
              扫描在代码中的下一个标记。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.GetSourceCode">
      <summary>
              获取与此扫描仪对象相关联的源代码。
            </summary>
      <returns>
              要扫描的源代码。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.GetStartLinePosition">
      <summary>
              获取代码字符串中的当前代码的第一行的开始处的位置。
               所有代码行都存储在单个字符串中。
               这是一个指针，它根据扫描代码时移动。
            </summary>
      <returns>
              Code 字符串中的当前代码的第一行的开始处的位置。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.GetStringLiteral">
      <summary>
              获取一个字符串，已经过扫描并已替换为其转义序列。
            </summary>
      <returns>
              一个字符串，已经过扫描并已替换为其转义序列。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.GotEndOfLine">
      <summary>
              指示扫描程序扫描，或查看标记后是否达到行尾。
            </summary>
      <returns>
              <see langword="true" /> 如果已达到行尾？否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.IsKeyword(Microsoft.JScript.JSToken)">
      <summary>
              确定指定的标记是否 JScript 语言中的关键字。
            </summary>
      <param name="token">
                要检查的标记。
              </param>
      <returns>
              <see langword="true" /> 如果该令牌是一个关键字;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.IsOperator(Microsoft.JScript.JSToken)">
      <summary>
              确定指定的标记是否 JScript 语言中的一个运算符。
            </summary>
      <param name="token">
                要检查的标记。
              </param>
      <returns>
              <see langword="true" /> 如果该令牌是一个运算符;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.SetAuthoringMode(System.Boolean)">
      <summary>
              设置一个标志，指示是否在创作模式下运行扫描程序。
            </summary>
      <param name="mode">
                <see langword="true" /> 若要指示创作模式;否则为 <see langword="false" />。
              </param>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.SetSource(Microsoft.JScript.Context)">
      <summary>
              设置要扫描的源代码。
            </summary>
      <param name="sourceContext">
                要扫描的源代码。
              </param>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.SkipMultiLineComment">
      <summary>
              跳过跨越多个行，并提升识别代码中的当前位置的指针的注释。
            </summary>
      <returns>
              代码字符串中新的当前位置。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.JSVariableField.GetCustomAttributes(System.Boolean)">
      <summary>
              返回一个数组，包含附加到此字段的自定义特性。
            </summary>
      <param name="inherit">
                <see langword="true" /> 搜索此成员继承层次结构以查找这些特性。
              </param>
      <returns>
              一个数组，包含自定义特性附加到此字段中，或者，如果没有任何一个数组，其中包含零个元素。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:Microsoft.JScript.LateBinding" /> 类，使用指定的标识符。
            </summary>
      <param name="name">
                一个字符串，标识绑定引用。
              </param>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.#ctor(System.String,System.Object)">
      <summary>
              新实例初始化 <see cref="T:Microsoft.JScript.LateBinding" /> 类，使用指定的标识符和对象。
            </summary>
      <param name="name">
                一个字符串，标识绑定引用。
              </param>
      <param name="obj">
                在定义的绑定引用对象。
              </param>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.Call(System.Object[],System.Boolean,System.Boolean,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>
              将该绑定引用解析通过调用成员。
            </summary>
      <param name="arguments">
                要传递给成员的参数。
              </param>
      <param name="construct">
                <see langword="true" /> 若要使用的构造方法;否则为 <see langword="false" />。
              </param>
      <param name="brackets">
                <see langword="true" /> 如果绑定引用包含方括号;否则为 <see langword="false" />。
              </param>
      <param name="engine">
                对脚本引擎的引用。
              </param>
      <returns>
              对该成员的调用返回值。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.CallValue(System.Object,System.Object,System.Object[],System.Boolean,System.Boolean,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>
              将该绑定引用解析通过调用成员。
            </summary>
      <param name="thisob">
                在定义的绑定引用对象。
              </param>
      <param name="val">
                有关要调用的成员的信息。
              </param>
      <param name="arguments">
                要传递给成员的参数。
              </param>
      <param name="construct">
                <see langword="true" /> 若要使用的构造方法;否则为 <see langword="false" />。
              </param>
      <param name="brackets">
                <see langword="true" /> 如果绑定引用包含方括号;否则为 <see langword="false" />。
              </param>
      <param name="engine">
                对脚本引擎的引用。
              </param>
      <returns>
              对该成员的调用返回值。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.CallValue2(System.Object,System.Object,System.Object[],System.Boolean,System.Boolean,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>
              将该绑定引用解析通过调用成员。
            </summary>
      <param name="val">
                有关要调用的成员的信息。
              </param>
      <param name="thisob">
                在定义的绑定引用对象。
              </param>
      <param name="arguments">
                要传递给成员的参数。
              </param>
      <param name="construct">
                <see langword="true" /> 若要使用的构造方法;否则为 <see langword="false" />。
              </param>
      <param name="brackets">
                <see langword="true" /> 如果绑定引用包含方括号;否则为 <see langword="false" />。
              </param>
      <param name="engine">
                对脚本引擎的引用。
              </param>
      <returns>
              对该成员的调用返回值。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.Delete">
      <summary>
              从对象上定义的绑定引用中删除绑定引用成员。
            </summary>
      <returns>
              <see langword="true" /> 如果成功删除该成员;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.DeleteMember(System.Object,System.String)">
      <summary>
              从指定的对象中删除指定的成员。
            </summary>
      <param name="obj">
                要删除的对象。
              </param>
      <param name="name">
                要删除的成员。
              </param>
      <returns>
              <see langword="true" /> 如果成功删除该成员;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.GetNonMissingValue">
      <summary>
              获取绑定引用的值，并将转换 <see cref="T:Microsoft.JScript.Missing" /> 值与 null。
            </summary>
      <returns>
              绑定引用中; 的值否则，为 null。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.GetValue2">
      <summary>
              获取绑定引用的值并引发异常，如果无法解析。
            </summary>
      <returns>
              绑定引用的值。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.SetIndexedPropertyValueStatic(System.Object,System.Object[],System.Object)">
      <summary>
              设置索引的属性。
            </summary>
      <param name="obj">
                在定义的绑定引用对象。
              </param>
      <param name="arguments">
                要传递给成员的参数。
              </param>
      <param name="value">
                属性的新值。
              </param>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.SetValue(System.Object)">
      <summary>
              设置的属性。
            </summary>
      <param name="value">
                属性的新值。
              </param>
    </member>
    <member name="M:Microsoft.JScript.MathObject.abs(System.Double)">
      <summary>
              计算指定的数字的绝对值。
            </summary>
      <param name="d">
                要计算其绝对值的数字。
              </param>
      <returns>
              数值的绝对值 <paramref name="d" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.MathObject.acos(System.Double)">
      <summary>
              计算指定的数字的反余弦值。
            </summary>
      <param name="x">
                要计算的反余弦值的数字。
              </param>
      <returns>
              反余弦值 <paramref name="x" />, ，以弧度为单位。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.MathObject.asin(System.Double)">
      <summary>
              计算指定的数字的反正弦值。
            </summary>
      <param name="x">
                要计算的反正弦值的数字。
              </param>
      <returns>
              反正弦值 <paramref name="x" />, ，以弧度为单位。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.MathObject.atan(System.Double)">
      <summary>
              计算指定的数字的反正切值。
            </summary>
      <param name="x">
                要计算的反正切值的数字。
              </param>
      <returns>
              反正切值 <paramref name="x" />, ，以弧度为单位。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.MathObject.atan2(System.Double,System.Double)">
      <summary>
              计算指定数字的商的反正切值。
            </summary>
      <param name="dy">
                要计算反正切值的商的分子。
              </param>
      <param name="dx">
                要计算反正切值的商的分母。
              </param>
      <returns>
              反正切值 <paramref name="dy" />/<paramref name="dx" />, ，以弧度为单位。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.MathObject.ceil(System.Double)">
      <summary>
              计算指定的数字，它是大于或等于指定数字的最小整数的上限。
            </summary>
      <param name="x">
                若要计算的上限数。
              </param>
      <returns>
              上限 <paramref name="x" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.MathObject.cos(System.Double)">
      <summary>
              计算指定角度的余弦值。
            </summary>
      <param name="x">
                以弧度计量的角度。
              </param>
      <returns>
              <paramref name="x" /> 的余弦值。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.MathObject.exp(System.Double)">
      <summary>
              计算数 e 的指定次幂，其中 e 是欧拉常量，是自然对数的底数。
            </summary>
      <param name="x">
                幂数 <paramref name="e" /> 到。
              </param>
      <returns>
              数 e 提升到 <paramref name="x" /> 电源。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.MathObject.floor(System.Double)">
      <summary>
              计算的下限指定数字小于或等于指定数字的最大整数。
            </summary>
      <param name="x">
                要计算的下限的数字。
              </param>
      <returns>
              基底 <paramref name="x" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.MathObject.log(System.Double)">
      <summary>
              计算对数底 e 指定的数字，即指定数字的自然对数。
            </summary>
      <param name="x">
                要计算的自然对数的数字。
              </param>
      <returns>
              自然对数 <paramref name="x" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.MathObject.max(System.Object,System.Object,System.Object[])">
      <summary>
              返回两个或多个指定数字的最大值。
            </summary>
      <param name="x">
                要比较的第一个数字。
              </param>
      <param name="y">
                要比较的第二个数字。
              </param>
      <param name="args">
                要比较的其他号码。
              </param>
      <returns>
              最大的 <paramref name="x" />, ，<paramref name="y" />, ，和中包含的数字 <paramref name="args" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.MathObject.min(System.Object,System.Object,System.Object[])">
      <summary>
              返回两个或多个指定数字的最小值。
            </summary>
      <param name="x">
                要比较的第一个数字。
              </param>
      <param name="y">
                要比较的第二个数字。
              </param>
      <param name="args">
                要比较的其他号码。
              </param>
      <returns>
              最小的 <paramref name="x" />, ，<paramref name="y" />, ，和中包含的数字 <paramref name="args" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.MathObject.pow(System.Double,System.Double)">
      <summary>
              计算某数的指定次幂。
            </summary>
      <param name="dx">
                编号，以将提升为 <paramref name="dy" /> 电源。
              </param>
      <param name="dy">
                幂数 <paramref name="dx" /> 到。
              </param>
      <returns>
              数 <paramref name="dx" /> 提升到 <paramref name="dy" /> 电源。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.MathObject.random">
      <summary>
              生成一个介于 0 和 1 之间的随机数字。
               此方法不生成加密性极安全的随机数字。
            </summary>
      <returns>
              一个大于或等于 0，且小于 1 的数字。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.MathObject.round(System.Double)">
      <summary>
              将指定的数字舍入关闭，或最接近的整数。
            </summary>
      <param name="d">
                要舍入数字。
              </param>
      <returns>
              如果的小数部分 <paramref name="d" /> 为到下一个整数，小于偶数 <paramref name="d" /> 向下舍入。
               如果的小数部分 <paramref name="d" /> 二者中的偶数上或更多的下一个整数， <paramref name="d" /> 向上舍入。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.MathObject.sin(System.Double)">
      <summary>
              计算指定角度的正弦值。
            </summary>
      <param name="x">
                以弧度计量的角度。
              </param>
      <returns>
              <paramref name="x" /> 的正弦值。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.MathObject.sqrt(System.Double)">
      <summary>
              计算指定的数字的平方根。
            </summary>
      <param name="x">
                要计算平方根的数字。
              </param>
      <returns>
              平方根 <paramref name="x" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.MathObject.tan(System.Double)">
      <summary>
              计算指定角度的正切值。
            </summary>
      <param name="x">
                以弧度计量的角度。
              </param>
      <returns>
              <paramref name="x" /> 的正切值。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.MemberInfoInitializer.GetCOMMemberInfo">
      <summary>
              一个类中实现时，获取支持 JScript 与外部 COM 成员进行通信的托管的对象。
            </summary>
      <returns>
              支持 JScript 与外部 COM 成员进行通信的托管的对象。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.MemberInfoInitializer.Initialize(System.String,Microsoft.JScript.COMMemberInfo)">
      <summary>
              一个类中实现时，初始化使 JScript 与指定的外部 COM 成员进行通信的信息。
            </summary>
      <param name="name">
                外部 COM 成员的名称。
              </param>
      <param name="dispatch">
                使 JScript 能够调用时，信息获取，并设置外部 COM 成员。
              </param>
    </member>
    <member name="M:Microsoft.JScript.MethodInvoker.#ctor">
      <summary>
              初始化 <see cref="T:Microsoft.JScript.MethodInvoker" /> 类的新实例。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.MethodInvoker.Invoke(System.Object,System.Object[])">
      <summary>
              当在派生类中重写时，将调用该方法。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="parameters">
                要使用的方法的参数。
              </param>
      <returns>
              调用该方法的结果。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Namespace.GetNamespace(System.String,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>
              创建并返回的新实例 <see cref="T:Microsoft.JScript.Namespace" /> 类。
            </summary>
      <param name="name">
                命名空间的名称。
              </param>
      <param name="engine">
                对脚本引擎的引用。
              </param>
      <returns>
              <see cref="T:Microsoft.JScript.Namespace" /> 类的新实例。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.NoContextException.#ctor">
      <summary>
              初始化 <see cref="T:Microsoft.JScript.NoContextException" /> 类的新实例。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.NoContextException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              新实例初始化 <see cref="T:Microsoft.JScript.NoContextException" /> 类，使用指定的序列化的数据。
            </summary>
      <param name="s">
                有关所引发的异常的序列化的对象数据。
              </param>
      <param name="c">
                有关源或目标的上下文信息。
              </param>
    </member>
    <member name="M:Microsoft.JScript.NoContextException.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:Microsoft.JScript.NoContextException" /> 类，使用指定的错误消息。
            </summary>
      <param name="m">
                描述错误的消息。
              </param>
    </member>
    <member name="M:Microsoft.JScript.NoContextException.#ctor(System.String,System.Exception)">
      <summary>
              新实例初始化 <see cref="T:Microsoft.JScript.NoContextException" /> 类，使用指定的错误消息和对导致此异常的内部异常的引用。
            </summary>
      <param name="m">
                描述错误的消息。
              </param>
      <param name="e">
                导致当前异常的异常。
              </param>
    </member>
    <member name="M:Microsoft.JScript.NotRecommended.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:Microsoft.JScript.NotRecommended" /> 特性类。
            </summary>
      <param name="message">
                建议不要使用字段的方法的名称。
              </param>
    </member>
    <member name="M:Microsoft.JScript.NumberConstructor.CreateInstance(System.Object[])">
      <summary>
              创建基于原型的对象，在指定的参数中传递的实例。
            </summary>
      <param name="args">
                要传递给构造函数的实参。
              </param>
      <returns>
              对象的实例。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.NumberConstructor.Invoke(System.Object)">
      <summary>
              将指定的对象转换为一个数字。
            </summary>
      <param name="arg">
                要转换的对象。
              </param>
      <returns>
              <paramref name="arg" /> 如果这是可能的则表示为一个数字。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.NumberObject.#ctor(Microsoft.JScript.ScriptObject,System.Object)">
      <summary>
              初始化 <see cref="T:Microsoft.JScript.NumberObject" /> 类的新实例。
            </summary>
      <param name="parent">
                对象的父级。
              </param>
      <param name="value">
                类表示的基础值。
              </param>
    </member>
    <member name="M:Microsoft.JScript.NumberObject.GetType">
      <summary>
              返回基础值对象的类型，则返回 <see cref="T:Microsoft.JScript.NumberObject" />。
            </summary>
      <returns>
              基础值对象的类型或 <see cref="T:Microsoft.JScript.NumberObject" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.NumberPrototype.toExponential(System.Object,System.Object)">
      <summary>
              创建的字符串表示形式指定 <see cref="T:Microsoft.JScript.NumberObject" /> 使用科学记数法 (E) 表示法。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="fractionDigits">
                表示要显示的小数位数数字 0 到 20 之间数字。
                 默认值为 16。
              </param>
      <returns>
              字符串表示形式 <paramref name="thisob" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.NumberPrototype.toFixed(System.Object,System.Double)">
      <summary>
              创建的字符串表示形式指定 <see cref="T:Microsoft.JScript.NumberObject" /> 它显示指定的数字的小数位数。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="fractionDigits">
                表示要显示的小数位数数字 0 到 20 之间数字。
                 默认值为 0。
              </param>
      <returns>
              字符串表示形式 <paramref name="thisob" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.NumberPrototype.toLocaleString(System.Object)">
      <summary>
              创建基于指定对象的字符串表示 <see cref="P:System.Globalization.NumberFormatInfo.CurrentInfo" /> 和 <see cref="T:System.Globalization.CultureInfo" />。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              字符串表示形式 <paramref name="thisob" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.NumberPrototype.toPrecision(System.Object,System.Object)">
      <summary>
              创建的字符串表示形式指定 <see cref="T:Microsoft.JScript.NumberObject" /> 显示指定的位数的精度数字。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="precision">
                一个介于 0 和 21 之间的数字表示的精度位数，以显示。
                <paramref name="Precision digits" /> 在小数点的数字和指数组合。
              </param>
      <returns>
              字符串表示形式 <paramref name="thisob" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.NumberPrototype.toString(System.Object,System.Object)">
      <summary>
              创建指定对象的字符串表示形式。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="radix">
                一个介于之间的数字 2 和 36 表示数字系统的基数， <paramref name="thisob" /> 以表示。
                 默认值为 10。
              </param>
      <returns>
              字符串表示形式 <paramref name="thisob" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.NumberPrototype.valueOf(System.Object)">
      <summary>
              返回指定的值 <see cref="T:Microsoft.JScript.NumberObject" />。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              <paramref name="thisob" /> 的值。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.NumericBinary.#ctor(System.Int32)">
      <summary>
              初始化 <see cref="T:Microsoft.JScript.NumericBinary" /> 类的新实例。
            </summary>
      <param name="operatorTok">
                <see cref="T:Microsoft.JScript.JSToken" /> 枚举值之一。
                 指定要执行的操作。
              </param>
    </member>
    <member name="M:Microsoft.JScript.NumericBinary.DoOp(System.Object,System.Object,Microsoft.JScript.JSToken)">
      <summary>
              对指定的数值操作数执行指定的二元运算。
            </summary>
      <param name="v1">
                第一个操作数。
              </param>
      <param name="v2">
                第二个操作数。
              </param>
      <param name="operatorTok">
                <see cref="T:Microsoft.JScript.JSToken" /> 枚举值之一。
                 指定要执行的操作。
              </param>
      <returns>
              操作的结果。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.NumericBinary.EvaluateNumericBinary(System.Object,System.Object)">
      <summary>
              对指定的数值操作数执行二元运算。
            </summary>
      <param name="v1">
                第一个操作数。
              </param>
      <param name="v2">
                第二个操作数。
              </param>
      <returns>
              操作的结果。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.NumericUnary.#ctor(System.Int32)">
      <summary>
              初始化 <see cref="T:Microsoft.JScript.NumericUnary" /> 类的新实例。
            </summary>
      <param name="operatorTok">
                <see cref="T:Microsoft.JScript.JSToken" /> 枚举值之一。
                 指定要执行的操作。
              </param>
    </member>
    <member name="M:Microsoft.JScript.NumericUnary.EvaluateUnary(System.Object)">
      <summary>
              执行一元运算对数值操作数。
            </summary>
      <param name="v">
                操作数。
              </param>
      <returns>
              操作的结果。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ObjectConstructor.ConstructObject">
      <summary>
              创建基于原型的对象的实例。
            </summary>
      <returns>
              对象的实例。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ObjectConstructor.CreateInstance(System.Object[])">
      <summary>
              创建基于原型的对象，在指定的参数中传递的实例。
            </summary>
      <param name="args">
                要传递给构造函数的实参。
              </param>
      <returns>
              对象的实例。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ObjectConstructor.Invoke(System.Object[])">
      <summary>
              调用基于原型的对象，在指定的参数中传递的方法。
            </summary>
      <param name="args">
                要传递给方法的参数。
              </param>
      <returns>
              对方法调用的结果。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ObjectPrototype.hasOwnProperty(System.Object,System.Object)">
      <summary>
              确定指定的对象是否包含指定的属性。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="name">
                要搜索的属性。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="name" /> 是一个属性 <paramref name="thisob" /> 和已设置; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ObjectPrototype.isPrototypeOf(System.Object,System.Object)">
      <summary>
              确定第一个指定的对象是否可以作为第二个指定对象的类型实例化。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="ob">
                具有所需的类型的对象。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="ob" /> 是继承层次结构中 <paramref name="thisob" />; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ObjectPrototype.propertyIsEnumerable(System.Object,System.Object)">
      <summary>
              确定指定的对象的指定的属性是否可枚举。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="name">
                要测试的属性。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="name" /> 是一个可枚举属性; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ObjectPrototype.toLocaleString(System.Object)">
      <summary>
              通过使用创建的字符串表示形式指定的对象 <see cref="T:Microsoft.JScript.Convert" /> 类。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              字符串表示形式 <paramref name="thisob" /> ，它由创建 <see cref="T:Microsoft.JScript.Convert" /> 类。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ObjectPrototype.toString(System.Object)">
      <summary>
              创建指定对象的字符串表示形式。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              该对象，它定义了一个; 如果类的名称否则为 <see cref="P:System.Reflection.MemberInfo.Name" /> 的 <see cref="T:System.Type" /> 的对象。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ObjectPrototype.valueOf(System.Object)">
      <summary>
              返回指定的对象。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              <paramref name="thisob" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Override.#ctor">
      <summary>
              初始化 <see cref="T:Microsoft.JScript.Override" /> 类的新实例。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.Package.JScriptPackage(System.String,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>
              使用指定的脚本引擎来创建指定的包。
            </summary>
      <param name="rootName">
                包的名称。
              </param>
      <param name="engine">
                对脚本引擎的引用。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Plus.#ctor">
      <summary>
              初始化 <see cref="T:Microsoft.JScript.Plus" /> 类的新实例。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.Plus.DoOp(System.Object,System.Object)">
      <summary>
              执行的加法或串联运算。
            </summary>
      <param name="v1">
                第一个操作数。
              </param>
      <param name="v2">
                第二个操作数。
              </param>
      <returns>
              操作的结果。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Plus.EvaluatePlus(System.Object,System.Object)">
      <summary>
              执行的加法或串联运算。
            </summary>
      <param name="v1">
                第一个操作数。
              </param>
      <param name="v2">
                第二个操作数。
              </param>
      <returns>
              操作的结果。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.PostOrPrefixOperator.#ctor(System.Int32)">
      <summary>
              初始化 <see cref="T:Microsoft.JScript.PostOrPrefixOperator" /> 类的新实例。
            </summary>
      <param name="operatorTok">
                <see cref="T:Microsoft.JScript.JSToken" /> 枚举值之一。
                 指定要执行的操作。
              </param>
    </member>
    <member name="M:Microsoft.JScript.PostOrPrefixOperator.EvaluatePostOrPrefix(System.Object@)">
      <summary>
              执行对指定的操作数的递增或递减操作。
            </summary>
      <param name="v">
                操作数。
              </param>
      <returns>
              操作的结果。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ReferenceAttribute.#ctor(System.String)">
      <summary>
              初始化 <see cref="T:Microsoft.JScript.ReferenceAttribute" /> 类的新实例。
            </summary>
      <param name="reference">
                对程序集的引用。
              </param>
    </member>
    <member name="M:Microsoft.JScript.RegExpConstructor.Construct(System.String,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
              创建一个新 <see cref="T:Microsoft.JScript.RegExpObject" /> 指定正则表达式模式和标志的对象。
            </summary>
      <param name="pattern">
                要匹配的正则表达式模式。
              </param>
      <param name="ignoreCase">
                <see langword="true" /> 若要使用不区分大小写匹配;否则为 <see langword="false" />。
              </param>
      <param name="global">
                <see langword="true" /> 若要使用全局匹配项，则否则为 <see langword="false" />。
              </param>
      <param name="multiline">
                <see langword="true" /> 若要使用多行匹配项，则否则为 <see langword="false" />。
              </param>
      <returns>
              一个新 <see cref="T:Microsoft.JScript.RegExpObject" /> 对象。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.RegExpConstructor.CreateInstance(System.Object[])">
      <summary>
              创建基于原型的对象，在指定的参数中传递的实例。
            </summary>
      <param name="args">
                要传递给构造函数的实参。
              </param>
      <returns>
              对象的实例。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.RegExpConstructor.Invoke(System.Object[])">
      <summary>
              创建基于原型的对象，在指定的参数中传递的实例。
            </summary>
      <param name="args">
                要传递给构造函数的实参。
              </param>
      <returns>
              对象的实例。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.RegExpObject.ToString">
      <summary>
              创建此对象，它包含正则表达式模式和标志的字符串表示。
            </summary>
      <returns>
              此对象的字符串表示形式。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.RegExpPrototype.compile(System.Object,System.Object,System.Object)">
      <summary>
              创建并编译一个新 <see cref="T:Microsoft.JScript.RegExpObject" /> 指定正则表达式模式和标志的对象。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="source">
                要搜索的正则表达式模式。
              </param>
      <param name="flags">
                忽略大小写、 全局、 标志和多行模式。
              </param>
      <returns>
              一个新 <see cref="T:Microsoft.JScript.RegExpObject" /> 对象。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.RegExpPrototype.exec(System.Object,System.Object)">
      <summary>
              在指定的对象上运行指定的正则表达式模式的搜索。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="input">
                要搜索的正则表达式模式。
              </param>
      <returns>
              正则表达式模式搜索的结果。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.RegExpPrototype.test(System.Object,System.Object)">
      <summary>
              测试搜索指定对象上指定正则表达式模式。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="input">
                要搜索的正则表达式模式。
              </param>
      <returns>
              <see langword="true" /> 如果搜索成功，则否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.RegExpPrototype.toString(System.Object)">
      <summary>
              创建的字符串表示形式的指定对象的包含正则表达式模式和标志。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              字符串表示形式 <paramref name="thisob" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Relational.#ctor(System.Int32)">
      <summary>
              初始化 <see cref="T:Microsoft.JScript.Relational" /> 类的新实例。
            </summary>
      <param name="operatorTok">
                <see cref="T:Microsoft.JScript.JSToken" /> 枚举值之一。
                 指定要执行的比较。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Relational.EvaluateRelational(System.Object,System.Object)">
      <summary>
              执行对指定的操作数的关系比较操作。
            </summary>
      <param name="v1">
                第一个操作数。
              </param>
      <param name="v2">
                第二个操作数。
              </param>
      <returns>
              操作的结果。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Relational.JScriptCompare(System.Object,System.Object)">
      <summary>
              执行对指定的操作数的关系比较操作。
            </summary>
      <param name="v1">
                第一个操作数。
              </param>
      <param name="v2">
                第二个操作数。
              </param>
      <returns>
              操作的结果。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ReturnOutOfFinally.#ctor">
      <summary>
              初始化 <see cref="T:Microsoft.JScript.ReturnOutOfFinally" /> 类的新实例。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.ReturnOutOfFinally.#ctor(System.String)">
      <summary>
              新实例初始化 <see cref="T:Microsoft.JScript.ReturnOutOfFinally" /> 类，使用指定的错误消息。
            </summary>
      <param name="m">
                描述错误的消息。
              </param>
    </member>
    <member name="M:Microsoft.JScript.ReturnOutOfFinally.#ctor(System.String,System.Exception)">
      <summary>
              新实例初始化 <see cref="T:Microsoft.JScript.ReturnOutOfFinally" /> 类，使用指定的错误消息和对导致此异常的内部异常的引用。
            </summary>
      <param name="m">
                描述错误的消息。
              </param>
      <param name="e">
                导致当前异常的异常。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Runtime.DoubleToInt64(System.Double)">
      <summary>
              将指定 <see cref="T:System.Double" /> 值赋给 <see cref="T:System.Int64" />。
            </summary>
      <param name="val">
                要转换的值。
              </param>
      <returns>
              <paramref name="val" /> 转换为 <see cref="T:System.Int64" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Runtime.Equals(System.Object,System.Object)">
      <summary>
              确定两个指定的值是否相等。
            </summary>
      <param name="v1">
                第一个操作数。
              </param>
      <param name="v2">
                第二个操作数。
              </param>
      <returns>
              <see langword="true" /> 如果这些值是否相等。 <see langword="false" /> 如果值是否不相等。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Runtime.UncheckedDecimalToInt64(System.Decimal)">
      <summary>
              将指定 <see cref="T:System.Decimal" /> 值赋给 <see cref="T:System.Int64" />。
            </summary>
      <param name="val">
                要转换的值。
              </param>
      <returns>
              <paramref name="val" /> 转换为 <see cref="T:System.Int64" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ScriptFunction.#ctor(Microsoft.JScript.ScriptObject,System.String)">
      <summary>
              初始化 <see cref="T:Microsoft.JScript.ScriptFunction" /> 类的新实例。
            </summary>
      <param name="parent">
                此函数所构造的对象的父原型。
              </param>
      <param name="name">
                此函数所构造的对象的名称。
              </param>
    </member>
    <member name="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])">
      <summary>
              创建基于原型的对象，在指定的参数中传递的实例。
            </summary>
      <param name="args">
                要传递给构造函数的实参。
              </param>
      <returns>
              对象的实例。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ScriptFunction.GetPrototypeForConstructedObject">
      <summary>
              获取此构造函数的原型对象。
            </summary>
      <returns>
              此构造函数的的原型对象。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ScriptFunction.Invoke(System.Object,System.Object[])">
      <summary>
              调用基于原型的对象，在指定的参数中传递的方法。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="args">
                要传递给方法的参数。
              </param>
      <returns>
              对方法调用的结果。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ScriptFunction.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>
              调用指定的成员。
            </summary>
      <param name="name">
                要调用的成员的名称。
              </param>
      <param name="invokeAttr">
                指定搜索成员通过反射的执行方式的枚举值的按位组合。
              </param>
      <param name="binder">
                一个对象，执行从实参类型到形参类型的类型转换。
              </param>
      <param name="target">
                对其调用成员的对象。
                 这必须是当前的脚本对象。
              </param>
      <param name="args">
                包含要调用个数、 顺序和类型成员的参数的对象数组。
                 如果没有任何参数，这是一个空数组。
              </param>
      <param name="modifiers">
                具有相同的长度的数组的 <paramref name="args" /> 参数。
                 它表示被调用的成员的元数据中的参数属性。
              </param>
      <param name="culture">
                提供有关特定区域性或区域设置信息。
                 用于正确地设置数字、 日期和字符串的格式。
              </param>
      <param name="namedParameters">
                参数的数组。
              </param>
      <returns>
              对该成员的调用返回值。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ScriptFunction.ToString">
      <summary>
              返回的字符串表示形式的构造函数。
            </summary>
      <returns>
              一个字符串，包含代码的构造函数和占位符的名称。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>
              获取具有指定的名称的字段。
            </summary>
      <param name="name">
                要获取的字段的名称。
              </param>
      <param name="bindingAttr">
                指定搜索成员通过反射的执行方式的枚举值的按位组合。
              </param>
      <returns>
              具有指定的字段 <paramref name="name" />, ，或如果该脚本对象不包含该字段，则为 null。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetFields(System.Reflection.BindingFlags)">
      <summary>
              获取一个数组 <see cref="T:System.Reflection.FieldInfo" /> 对应于当前的脚本对象的所有字段的对象。
            </summary>
      <param name="bindingAttr">
                指定搜索成员通过反射的执行方式的枚举值的按位组合。
              </param>
      <returns>
              包含当前的脚本对象的所有字段的对象数组。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>
              当在派生类中重写，获取一个数组 <see cref="T:System.Reflection.MemberInfo" /> 对应于指定的名称匹配的所有成员的对象。
            </summary>
      <param name="name">
                要搜索的成员的名称。
              </param>
      <param name="bindingAttr">
                指定搜索成员通过反射的执行方式的枚举值的按位组合。
              </param>
      <returns>
              匹配的对象的数组 <paramref name="name" /> 参数。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetMembers(System.Reflection.BindingFlags)">
      <summary>
              当在派生类中重写，获取一个数组 <see cref="T:System.Reflection.MemberInfo" /> 对应于当前的脚本对象的所有成员的对象。
            </summary>
      <param name="bindingAttr">
                指定搜索成员通过反射的执行方式的枚举值的按位组合。
              </param>
      <returns>
              包含当前的脚本对象的所有成员的对象数组。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetMethod(System.String,System.Reflection.BindingFlags)">
      <summary>
              获取具有指定的名称的方法。
            </summary>
      <param name="name">
                要获取的方法的名称。
              </param>
      <param name="bindingAttr">
                指定搜索成员通过反射的执行方式的枚举值的按位组合。
              </param>
      <returns>
              具有指定的方法 <paramref name="name" />, ，或如果该脚本对象不包含该方法，则为 null。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
              获取具有指定的名称，通过使用指定的选择条件的方法。
            </summary>
      <param name="name">
                要搜索的方法的名称。
              </param>
      <param name="bindingAttr">
                指定搜索成员通过反射的执行方式的枚举值的按位组合。
              </param>
      <param name="binder">
                一个对象，执行从实参类型到形参类型的类型转换。
              </param>
      <param name="types">
                用于查找匹配的方法参数类型。
              </param>
      <param name="modifiers">
                使绑定能够处理的参数签名已在其中修改类型的参数修饰符的数组。
              </param>
      <returns>
              具有指定的方法 <paramref name="name" />, ，或如果该脚本对象不包含该方法，则为 null。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetMethods(System.Reflection.BindingFlags)">
      <summary>
              获取一个数组 <see cref="T:System.Reflection.MethodInfo" /> 对应于当前的脚本对象的所有方法的对象。
            </summary>
      <param name="bindingAttr">
                指定搜索成员通过反射的执行方式的枚举值的按位组合。
              </param>
      <returns>
              包含当前的脚本对象的所有方法的对象数组。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetParent">
      <summary>
              获取对父对象的引用。
            </summary>
      <returns>
              对父对象的引用。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetProperties(System.Reflection.BindingFlags)">
      <summary>
              获取一个数组 <see cref="T:System.Reflection.PropertyInfo" /> 对应于当前的脚本对象的所有属性的对象。
            </summary>
      <param name="bindingAttr">
                指定搜索成员通过反射的执行方式的枚举值的按位组合。
              </param>
      <returns>
              包含当前的脚本对象的所有属性的对象数组。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetProperty(System.String,System.Reflection.BindingFlags)">
      <summary>
              获取具有指定的名称的属性。
            </summary>
      <param name="name">
                要获取的属性的名称。
              </param>
      <param name="bindingAttr">
                指定搜索成员通过反射的执行方式的枚举值的按位组合。
              </param>
      <returns>
              具有指定的属性 <paramref name="name" />, ，或如果该脚本对象不包含该属性，则为 null。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
              获取具有指定的名称，通过使用指定的选择条件的属性。
            </summary>
      <param name="name">
                要搜索的属性的名称。
              </param>
      <param name="bindingAttr">
                指定搜索成员通过反射的执行方式的枚举值的按位组合。
              </param>
      <param name="binder">
                一个对象，执行从实参类型到形参类型的类型转换。
              </param>
      <param name="returnType">
                该属性必须具有返回值的类型。
              </param>
      <param name="types">
                要搜索的属性索引类型。
                 索引化属性，例如一个类的索引器的使用。
              </param>
      <param name="modifiers">
                使绑定能够处理的参数签名已在其中修改类型的参数修饰符的数组。
              </param>
      <returns>
              具有指定的属性 <paramref name="name" />, ，或如果该脚本对象不包含该属性，则为 null。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>
              调用指定的成员。
            </summary>
      <param name="name">
                要调用的成员的名称。
              </param>
      <param name="invokeAttr">
                指定搜索成员通过反射的执行方式的枚举值的按位组合。
              </param>
      <param name="binder">
                一个对象，执行从实参类型到形参类型的类型转换。
              </param>
      <param name="target">
                对其调用成员的对象。
                 这必须是当前的脚本对象。
              </param>
      <param name="args">
                包含要调用个数、 顺序和类型成员的参数的对象数组。
                 如果没有任何参数，这是一个空数组。
              </param>
      <param name="modifiers">
                具有相同的长度作为 args 参数数组。
                 它表示被调用的成员的元数据中的参数属性。
              </param>
      <param name="locale">
                提供有关特定区域性或区域设置信息。
                 用于正确地设置数字、 日期和字符串的格式。
              </param>
      <param name="namedParameters">
                参数的数组。
              </param>
      <returns>
              对该成员的调用返回值。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.WrapMembers(System.Reflection.MemberInfo,System.Object)">
      <summary>
              创建包装的对象，其中包含指定的成员以及指定的对象。
            </summary>
      <param name="member">
                要包装的成员。
              </param>
      <param name="obj">
                该对象的 <paramref name="member" /> 上定义。
              </param>
      <returns>
              已包装的对象，其中包含成员信息的单一元素数组和 <paramref name="obj" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.WrapMembers(System.Reflection.MemberInfo[],System.Object)">
      <summary>
              创建包含指定的成员以及指定的对象的已包装对象的数组。
            </summary>
      <param name="members">
                要包装的成员。
              </param>
      <param name="obj">
                该对象的 <paramref name="members" /> 上定义。
              </param>
      <returns>
              包装对象的数组，其中每个包含成员信息和一份 <paramref name="obj" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.WrapMembers(System.Reflection.MemberInfo[],System.Object,Microsoft.JScript.SimpleHashtable)">
      <summary>
              创建包含指定的成员以及指定的对象，将结果缓存在指定的数据存储的已包装对象的数组。
            </summary>
      <param name="members">
                要包装的成员。
              </param>
      <param name="obj">
                该对象的 <paramref name="members" /> 上定义。
              </param>
      <param name="cache">
                已包装的对象临时数据存储区。
              </param>
      <returns>
              包装对象的数组，其中每个包含成员信息和一份 <paramref name="obj" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.ScriptStream.#ctor">
      <summary>
              初始化 <see cref="T:Microsoft.JScript.ScriptStream" /> 类的新实例。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.ScriptStream.PrintStackTrace">
      <summary>
              写入一个字符串，描述调用堆栈的当前内容。
               该字符串写入到 <see cref="F:Microsoft.JScript.ScriptStream.Out" /> 流。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.ScriptStream.PrintStackTrace(System.Exception)">
      <summary>
              写入一个字符串，描述在引发指定的异常时调用堆栈的内容。
               该字符串写入到 <see cref="F:Microsoft.JScript.ScriptStream.Out" /> 流。
            </summary>
      <param name="e">
                抛出的异常。
              </param>
    </member>
    <member name="M:Microsoft.JScript.ScriptStream.Write(System.String)">
      <summary>
              将指定的字符串写入流。
               该字符串写入到 <see cref="F:Microsoft.JScript.ScriptStream.Out" /> 流。
            </summary>
      <param name="str">
                要写入流的字符串。
              </param>
    </member>
    <member name="M:Microsoft.JScript.ScriptStream.WriteLine(System.String)">
      <summary>
              将指定的字符串写入流，后面带有行结束符。
               该字符串写入到 <see cref="F:Microsoft.JScript.ScriptStream.Out" /> 流。
            </summary>
      <param name="str">
                要写入流的字符串。
              </param>
    </member>
    <member name="M:Microsoft.JScript.SimpleHashtable.#ctor(System.UInt32)">
      <summary>
              新实例初始化 <see cref="T:Microsoft.JScript.SimpleHashtable" /> 类，使用指定的阈值。
            </summary>
      <param name="threshold">
                此时必须调整大小的哈希表的项目数。
              </param>
    </member>
    <member name="M:Microsoft.JScript.SimpleHashtable.GetEnumerator">
      <summary>
              获取哈希表的枚举数。
            </summary>
      <returns>
              一个用于哈希表的枚举。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.SimpleHashtable.Remove(System.Object)">
      <summary>
              从哈希表中移除具有指定键的项。
            </summary>
      <param name="key">
                要移除的项的键。
              </param>
    </member>
    <member name="M:Microsoft.JScript.StackFrame.GetDefaultThisObject">
      <summary>
              获取包含的对象的当前的默认作用域，将为 <see langword="with" /> 语句范围或全局范围。
            </summary>
      <returns>
              当前的默认作用域。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StackFrame.GetField(System.String,System.Int32)">
      <summary>
              获取通过搜索作用域层次结构中具有指定的名称的字段。
               此方法搜索的词法级别指定的作用域。
            </summary>
      <param name="name">
                要搜索的字段的名称。
              </param>
      <param name="lexLevel">
                要搜索的词法级别。
              </param>
      <returns>
              在所有情况下，则为 null。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StackFrame.GetGlobalScope">
      <summary>
              获取通过搜索作用域层次结构，直到它找到一个范围，包括静态变量，例如，模块作用域的全局作用域。
            </summary>
      <returns>
              全局作用域。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StackFrame.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>
              检索的数组 <see cref="T:System.Reflection.MemberInfo" /> 对应于指定的名称匹配的所有成员的对象。
            </summary>
      <param name="name">
                要搜索的成员名称。
              </param>
      <param name="bindingAttr">
                指定搜索成员通过反射的执行方式的枚举值的按位组合。
              </param>
      <returns>
              匹配的对象的数组 <paramref name="name" /> 参数。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StackFrame.GetMembers(System.Reflection.BindingFlags)">
      <summary>
              检索的数组 <see cref="T:System.Reflection.MemberInfo" /> 对应于当前对象的所有成员的对象。
            </summary>
      <param name="bindingAttr">
                指定搜索成员通过反射的执行方式的枚举值的按位组合。
              </param>
      <returns>
              包含当前对象的所有成员的对象数组。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StackFrame.GetMemberValue(System.String,System.Int32)">
      <summary>
              获取通过搜索作用域层次结构的指定成员的值。
               此方法搜索的词法级别指定的作用域。
            </summary>
      <param name="name">
                要搜索的成员的名称。
              </param>
      <param name="lexlevel">
                要搜索的词法级别。
              </param>
      <returns>
              成员值 <paramref name="name" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StackFrame.Microsoft#JScript#IActivationObject#GetLocalField(System.String)">
      <summary>
              获取具有指定的名称的字段的局部声明。
               此方法使用编译时错误检查。
            </summary>
      <param name="name">
                字段的名称。
              </param>
      <returns>
              本地字段的声明。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StackFrame.PushStackFrameForMethod(System.Object,Microsoft.JScript.JSLocalField[],Microsoft.JScript.Vsa.VsaEngine)">
      <summary>
              创建一个新 <see cref="T:Microsoft.JScript.StackFrame" /> 方法的对象并将结果推送到全局作用域堆栈上。
            </summary>
      <param name="thisob">
                包含该方法的对象。
              </param>
      <param name="fields">
                堆栈帧的局部变量。
              </param>
      <param name="engine">
                对脚本引擎的引用。
              </param>
    </member>
    <member name="M:Microsoft.JScript.StackFrame.PushStackFrameForStaticMethod(System.RuntimeTypeHandle,Microsoft.JScript.JSLocalField[],Microsoft.JScript.Vsa.VsaEngine)">
      <summary>
              创建一个新 <see cref="T:Microsoft.JScript.StackFrame" /> 对一个静态方法的对象并将结果推送到全局作用域堆栈上。
            </summary>
      <param name="thisclass">
                包含静态方法的类。
              </param>
      <param name="fields">
                堆栈帧的局部变量。
              </param>
      <param name="engine">
                对脚本引擎的引用。
              </param>
    </member>
    <member name="M:Microsoft.JScript.StrictEquality.JScriptStrictEquals(System.Object,System.Object)">
      <summary>
              执行比较运算。
            </summary>
      <param name="v1">
                第一个操作数。
              </param>
      <param name="v2">
                第二个操作数。
              </param>
      <returns>
              操作的结果。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StringConstructor.CreateInstance(System.Object[])">
      <summary>
              创建基于原型的对象，在指定的参数中传递的实例。
            </summary>
      <param name="args">
                要传递给构造函数的实参。
              </param>
      <returns>
              对象的实例。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StringConstructor.fromCharCode(System.Object[])">
      <summary>
              将指定数组的每个元素转换为一个字符并将它们连接起来。
            </summary>
      <param name="args">
                要转换为字符串的元素。
              </param>
      <returns>
              字符串表示形式 <paramref name="arg" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StringConstructor.Invoke(System.Object)">
      <summary>
              将指定的对象转换为字符串。
            </summary>
      <param name="arg">
                要转换为字符串的对象。
              </param>
      <returns>
              字符串表示形式 <paramref name="arg" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StringObject.#ctor(Microsoft.JScript.ScriptObject,System.String)">
      <summary>
              初始化 <see cref="T:Microsoft.JScript.StringObject" /> 类的新实例。
            </summary>
      <param name="prototype">
                对象的父级。
              </param>
      <param name="value">
                类表示的基础值。
              </param>
    </member>
    <member name="M:Microsoft.JScript.StringObject.Equals(System.Object)">
      <summary>
              确定此字符串与指定的字符串是否具有相同的值。
            </summary>
      <param name="ob">
                要比较的字符串。
              </param>
      <returns>
              <see langword="true" /> 如果此字符串和 <paramref name="ob" /> 具有相同的值; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StringObject.GetHashCode">
      <summary>
              返回该字符串的哈希代码。
            </summary>
      <returns>
              此字符串哈希代码。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StringObject.GetType">
      <summary>
              返回 <see cref="T:System.String" /> 或 <see cref="T:Microsoft.JScript.StringObject" />。
            </summary>
      <returns>
              <see cref="T:System.String" /> 或 <see cref="T:Microsoft.JScript.StringObject" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.anchor(System.Object,System.Object)">
      <summary>
              将指定的对象转换为文本括在定位点标记中，并提供指定的名称特性的定位元素。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="anchorName">
                定位元素的名称特性。
              </param>
      <returns>
              窗体中的字符串 "&lt;A NAME=\""+ <paramref name="anchorName" /> +"\"&gt;"+ <paramref name="thisob" /> +"&lt;/A&gt;"。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.big(System.Object)">
      <summary>
              将指定的对象转换为文本括在大文本标记中。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              窗体中的字符串 "&lt;BIG&gt;"+ <paramref name="thisob" /> +"&lt;/BIG&gt;"。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.blink(System.Object)">
      <summary>
              将指定的对象与文本括在闪烁标记中。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              窗体中的字符串 "&lt;BLINK&gt;"+ <paramref name="thisob" /> +"&lt;/BLINK&gt;"。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.bold(System.Object)">
      <summary>
              将指定的对象转换为文本括在显示为粗体文本标记中。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              窗体中的字符串 "&lt;B&gt;"+ <paramref name="thisob" /> +"&lt;/B&gt;"。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.charAt(System.Object,System.Double)">
      <summary>
              返回位于指定对象中的指定位置处的字符。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="pos">
                要返回的字符的位置。
              </param>
      <returns>
              处的字符 <paramref name="pos" />, ，如果有。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.charCodeAt(System.Object,System.Double)">
      <summary>
              返回位于指定对象中的指定位置处的字符的 ASCII 代码。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="pos">
                你想要返回其代码的字符的位置。
              </param>
      <returns>
              处的字符代码 <paramref name="pos" />, ，如果有。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.concat(System.Object,System.Object[])">
      <summary>
              将指定的参数追加到指定的对象。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="args">
                要追加到的参数 <paramref name="thisob" />。
              </param>
      <returns>
              字符串表示形式 <paramref name="thisob" />, ，与 <paramref name="args" /> 追加。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.fixed(System.Object)">
      <summary>
              将指定的对象转换为文本括在固定宽度的文本标记中。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              窗体中的字符串 "&lt;TT&gt;"+ <paramref name="thisob" /> +"&lt;/TT&gt;"。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.fontcolor(System.Object,System.Object)">
      <summary>
              将指定的对象转换为文本括在字体标记中，为元素提供指定的颜色属性。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="colorName">
                Font 元素的颜色属性。
              </param>
      <returns>
              窗体中的字符串 "&lt;FONT COLOR=\""+ <paramref name="colorName" /> +"\"&gt;"+ <paramref name="thisob" /> +"&lt;/FONT&gt;"。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.fontsize(System.Object,System.Object)">
      <summary>
              将指定的对象转换为文本括在字体标记中，为元素提供指定的大小属性。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="fontSize">
                Font 元素大小属性。
              </param>
      <returns>
              窗体中的字符串 "&lt;FONT SIZE=\""+ <paramref name="fontSize" /> +"\"&gt;"+ <paramref name="thisob" /> +"&lt;/FONT&gt;"。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.indexOf(System.Object,System.Object,System.Double)">
      <summary>
              搜索中指定的对象，从指定的字符位置开始的指定字符串的第一个匹配项。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="searchString">
                要搜索的字符串。
              </param>
      <param name="position">
                在该处开始搜索的位置。
              </param>
      <returns>
              第一个匹配项的位置 <paramref name="searchString" />, ，如果找到它。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.italics(System.Object)">
      <summary>
              将指定的对象转换为文本括在斜体文本标记中。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              窗体中的字符串 "&lt;I&gt;"+ <paramref name="thisob" /> +"&lt;/I&gt;"。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.lastIndexOf(System.Object,System.Object,System.Double)">
      <summary>
              搜索中指定的对象，从指定的字符位置开始的指定字符串的最后一个匹配项。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="searchString">
                要搜索的字符串。
              </param>
      <param name="position">
                在该处开始搜索的位置。
              </param>
      <returns>
              最后一个匹配项的位置 <paramref name="searchString" />, ，如果找到它。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.link(System.Object,System.Object)">
      <summary>
              将指定的对象转换为文本括在定位点标记中，并提供指定的链接目标特性的定位元素。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="linkRef">
                目标属性的定位元素。
              </param>
      <returns>
              窗体中的字符串 "&lt;A HREF=\""+ <paramref name="linkRef" /> +"\"&gt;"+ <paramref name="thisob" /> +"&lt;/A&gt;"。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.localeCompare(System.Object,System.Object)">
      <summary>
              比较两个指定的字符串并返回一个整数，指示它们之间的词法关系。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="thatob">
                要比较的字符串 <paramref name="thisob" />。
              </param>
      <returns>
              负值时 <paramref name="thisob" /> 是小于 <paramref name="thatob" />; 零在 <paramref name="thisob" /> 等于 <paramref name="thatob" />; 值为正时，值 <paramref name="thisob" /> 大于 <paramref name="thatob" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.match(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object)">
      <summary>
              在指定的对象上运行指定的正则表达式模式的搜索。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="engine">
                对脚本引擎的引用。
              </param>
      <param name="regExp">
                要搜索的正则表达式模式。
              </param>
      <returns>
              正则表达式模式搜索的结果。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.replace(System.Object,System.Object,System.Object)">
      <summary>
              在第一个指定的对象上运行指定的正则表达式模式的搜索，将任何匹配项替换为第三个指定的对象。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="regExp">
                要搜索的正则表达式模式。
              </param>
      <param name="replacement">
                对任何匹配项替换。
              </param>
      <returns>
              新的字符串中之后进行替换。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.search(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object)">
      <summary>
              在指定的对象上运行指定的正则表达式模式的搜索。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="engine">
                对脚本引擎的引用。
              </param>
      <param name="regExp">
                要搜索的正则表达式模式。
              </param>
      <returns>
              如果搜索未成功的匹配项，则索引否则为-1。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.slice(System.Object,System.Double,System.Object)">
      <summary>
              创建一个新字符串，包含指定字符串中指定的连续字符。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="start">
                要获取的第一个连续字符。
              </param>
      <param name="end">
                要获取的最后一个连续字符。
              </param>
      <returns>
              一个新字符串，包含之间的连续字符 <paramref name="start" /> 和 <paramref name="end" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.small(System.Object)">
      <summary>
              将指定的对象转换为文本括在较小的文本标记中。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              窗体中的字符串 "&lt;SMALL&gt;"+ <paramref name="thisob" /> +"&lt;/SMALL&gt;"。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.split(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object,System.Object)">
      <summary>
              返回一个包含由指定的字符分隔的子字符串中指定的对象的数组。
               数组中的子字符串的数量受指定的限制。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="engine">
                对脚本引擎的引用。
              </param>
      <param name="separator">
                用作分隔符中的子字符串的字符 <paramref name="thisob" />。
              </param>
      <param name="limit">
                要返回的子字符串的最大数量。
              </param>
      <returns>
              一个数组，包含中的子字符串 <paramref name="thisob" /> 由分隔 <paramref name="separator" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.strike(System.Object)">
      <summary>
              将指定的对象转换为文本括在带删除线标记中。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              窗体中的字符串 "&lt;STRIKE&gt;"+ <paramref name="thisob" /> +"&lt;/STRIKE&gt;"。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.sub(System.Object)">
      <summary>
              将指定的对象转换为文本括在下标标记中。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              窗体中的字符串 "&lt;SUB&gt;"+ <paramref name="thisob" /> +"&lt;/SUB&gt;"。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.substr(System.Object,System.Double,System.Object)">
      <summary>
              创建一个新字符串，包含从指定的字符位置开始的指定字符串中的连续字符数指定。
               使用 <see cref="M:Microsoft.JScript.StringPrototype.substring(System.Object,System.Double,System.Object)" /> 相反，如果您知道如何操作。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="start">
                要获取的第一个连续字符。
              </param>
      <param name="count">
                要获取的字符数。
              </param>
      <returns>
              一个新字符串，包含 <paramref name="count" /> 处开始的连续字符 <paramref name="start" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.substring(System.Object,System.Double,System.Object)">
      <summary>
              创建一个新字符串，包含指定字符串中指定的连续字符。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="start">
                要获取的第一个连续字符。
              </param>
      <param name="end">
                要获取的最后一个连续字符。
              </param>
      <returns>
              一个新字符串，包含之间的连续字符 <paramref name="start" /> 和 <paramref name="end" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.sup(System.Object)">
      <summary>
              将指定的对象转换为文本括在上标标记中。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              窗体中的字符串 "&lt;SUP&gt;"+ <paramref name="thisob" /> +"&lt;/SUP&gt;"。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.toLocaleLowerCase(System.Object)">
      <summary>
              返回一个副本指定的字符串转换为小写字符、 根据使用的大小写规则 <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              一个小写字符串。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.toLocaleUpperCase(System.Object)">
      <summary>
              返回一个副本指定的字符串转换为大写形式，并根据的大小写规则 <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              大写的字符串。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.toLowerCase(System.Object)">
      <summary>
              返回一个副本指定的字符串转换为小写字符、 根据使用的大小写规则 <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              一个小写字符串。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.toString(System.Object)">
      <summary>
              创建指定对象的字符串表示形式。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              字符串表示形式 <paramref name="thisob" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.toUpperCase(System.Object)">
      <summary>
              返回一个副本指定的字符串转换为大写形式，并根据的大小写规则 <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              大写的字符串。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.valueOf(System.Object)">
      <summary>
              返回指定对象的值。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              <paramref name="thisob" /> 的值。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Throw.JScriptThrow(System.Object)">
      <summary>
              作为异常，如果有，则转换将返回指定的对象。
            </summary>
      <param name="value">
                要引发的异常。
              </param>
      <returns>
              一个异常，表示 <paramref name="value" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Try.JScriptExceptionValue(System.Object,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>
              返回指定的对象将作为异常，将其转换为特定 <see cref="T:Microsoft.JScript.JScriptException" /> 如果它知道如何操作。
            </summary>
      <param name="e">
                表示异常的对象。
              </param>
      <param name="engine">
                对脚本引擎的引用。
              </param>
      <returns>
              异常 <paramref name="e" />, 、 转换为特定 <see cref="T:Microsoft.JScript.JScriptException" /> 是否可能。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Try.PushHandlerScope(Microsoft.JScript.Vsa.VsaEngine,System.String,System.Int32)">
      <summary>
              创建一个新 <see cref="T:Microsoft.JScript.BlockScope" /> 对象 <see langword="try" /> 块并将结果推送到全局作用域堆栈上。
            </summary>
      <param name="engine">
                对脚本引擎的引用。
              </param>
      <param name="id">
                作用域的名称 <see langword="try" /> 块。
              </param>
      <param name="scopeId">
                作用域的 ID <see langword="try" /> 块。
              </param>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.#ctor(System.Reflection.IReflect,System.Int32)">
      <summary>
              初始化 <see cref="T:Microsoft.JScript.TypedArray" /> 类的新实例。
            </summary>
      <param name="elementType">
                类型化数组的元素类型。
              </param>
      <param name="rank">
                数组的秩 （维数）。
              </param>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.Equals(System.Object)">
      <summary>
              确定指定的类型化的数组具有相同的元素类型和作为当前的类型化数组的级别。
            </summary>
      <param name="obj">
                要与当前类型化数组进行比较的类型化的数组。
              </param>
      <returns>
              <see langword="true" /> 如果 <paramref name="obj" /> 具有相同的元素类型和秩作为当前的类型化数组; 否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>
              获取字段的 <see cref="T:System.Array" /> 类具有指定的名称的类型。
            </summary>
      <param name="name">
                要获取的字段的名称。
              </param>
      <param name="bindingAttr">
                指定搜索成员通过反射的执行方式的枚举值的按位组合。
              </param>
      <returns>
              如果找到一个，则具有指定的名称的字段否则，为 null。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetFields(System.Reflection.BindingFlags)">
      <summary>
              获取一个数组 <see cref="T:System.Reflection.FieldInfo" /> 对象所对应的所有字段 <see cref="T:System.Array" /> 类类型。
            </summary>
      <param name="bindingAttr">
                指定搜索成员通过反射的执行方式的枚举值的按位组合。
              </param>
      <returns>
              包含的所有字段的对象的数组 <see cref="T:System.Array" /> 类类型。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetHashCode">
      <summary>
              可作为类型化数组的元素类型的哈希函数。
            </summary>
      <returns>
              当前对象的哈希代码。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>
              获取一个数组 <see cref="T:System.Reflection.MemberInfo" /> 对象相对应的所有成员的 <see cref="T:System.Array" /> 类类型的指定的名称匹配。
            </summary>
      <param name="name">
                要搜索的成员的名称。
              </param>
      <param name="bindingAttr">
                指定搜索成员通过反射的执行方式的枚举值的按位组合。
              </param>
      <returns>
              匹配的对象的数组 <paramref name="name" /> 参数。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetMembers(System.Reflection.BindingFlags)">
      <summary>
              获取一个数组 <see cref="T:System.Reflection.MemberInfo" /> 对象相对应的所有成员的 <see cref="T:System.Array" /> 类类型。
            </summary>
      <param name="bindingAttr">
                指定搜索成员通过反射的执行方式的枚举值的按位组合。
              </param>
      <returns>
              包含的所有成员的对象的数组 <see cref="T:System.Array" /> 类类型。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetMethod(System.String,System.Reflection.BindingFlags)">
      <summary>
              获取方法的 <see cref="T:System.Array" /> 类具有指定的名称的类型。
            </summary>
      <param name="name">
                要获取的方法的名称。
              </param>
      <param name="bindingAttr">
                指定搜索成员通过反射的执行方式的枚举值的按位组合。
              </param>
      <returns>
              如果找到一个，则具有指定的名称的方法否则，为 null。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
              获取方法的 <see cref="T:System.Array" /> 类通过使用指定的选择条件具有指定的名称的类型。
            </summary>
      <param name="name">
                要获取的方法的名称。
              </param>
      <param name="bindingAttr">
                指定搜索成员通过反射的执行方式的枚举值的按位组合。
              </param>
      <param name="binder">
                一个对象，执行从实参类型到形参类型的类型转换。
              </param>
      <param name="types">
                用于查找匹配的方法参数类型。
              </param>
      <param name="modifiers">
                使绑定能够处理的参数签名已在其中修改类型的参数修饰符的数组。
              </param>
      <returns>
              如果找到一个，则具有指定的名称的方法否则，为 null。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetMethods(System.Reflection.BindingFlags)">
      <summary>
              获取一个数组 <see cref="T:System.Reflection.MethodInfo" /> 对应于的所有方法的对象 <see cref="T:System.Array" /> 类类型。
            </summary>
      <param name="bindingAttr">
                指定搜索成员通过反射的执行方式的枚举值的按位组合。
              </param>
      <returns>
              包含的所有方法的对象的数组 <see cref="T:System.Array" /> 类类型。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetProperties(System.Reflection.BindingFlags)">
      <summary>
              获取一个数组 <see cref="T:System.Reflection.PropertyInfo" /> 对象相对应的所有属性的 <see cref="T:System.Array" /> 类类型。
            </summary>
      <param name="bindingAttr">
                指定搜索成员通过反射的执行方式的枚举值的按位组合。
              </param>
      <returns>
              包含的所有属性的对象的数组 <see cref="T:System.Array" /> 类类型。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetProperty(System.String,System.Reflection.BindingFlags)">
      <summary>
              获取的属性 <see cref="T:System.Array" /> 类具有指定的名称的类型。
            </summary>
      <param name="name">
                要获取的属性的名称。
              </param>
      <param name="bindingAttr">
                指定搜索成员通过反射的执行方式的枚举值的按位组合。
              </param>
      <returns>
              如果找到一个，则具有指定的名称的属性否则，为 null。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>
              获取的属性 <see cref="T:System.Array" /> 类通过使用指定的选择条件具有指定的名称的类型。
            </summary>
      <param name="name">
                要获取的属性的名称。
              </param>
      <param name="bindingAttr">
                指定搜索成员通过反射的执行方式的枚举值的按位组合。
              </param>
      <param name="binder">
                一个对象，执行从实参类型到形参类型的类型转换。
              </param>
      <param name="returnType">
                该属性必须具有返回值的类型。
              </param>
      <param name="types">
                要搜索的属性索引类型。
                 索引化属性，例如一个类的索引器的使用。
              </param>
      <param name="modifiers">
                使绑定能够处理的参数签名已在其中修改类型的参数修饰符的数组。
              </param>
      <returns>
              如果找到一个，则具有指定的名称的属性否则，为 null。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>
              调用指定的成员的元素类型或 <see cref="T:System.Array" /> 类类型。
            </summary>
      <param name="name">
                要调用的成员的名称。
              </param>
      <param name="flags">
                指定搜索成员通过反射的执行方式的枚举值的按位组合。
              </param>
      <param name="binder">
                一个对象，执行从实参类型到形参类型的类型转换。
              </param>
      <param name="target">
                对其调用成员的对象。
                 这必须是当前的脚本对象。
              </param>
      <param name="args">
                包含要调用个数、 顺序和类型成员的参数的对象数组。
                 如果没有任何参数，这是一个空数组。
              </param>
      <param name="modifiers">
                具有相同的长度的数组的 <paramref name="args" /> 参数。
                 它表示被调用的成员的元数据中的参数属性。
              </param>
      <param name="locale">
                提供有关特定区域性或区域设置信息。
                 用于正确地设置数字、 日期和字符串的格式。
              </param>
      <param name="namedParameters">
                参数的数组。
              </param>
      <returns>
              对该成员的调用返回值。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.ToString">
      <summary>
              返回一个字符串，包含类型化的数组和排名信息的元素类型。
            </summary>
      <returns>
              一个字符串，包含的元素类型的类型化的数组和排名的信息。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Typeof.JScriptTypeof(System.Object)">
      <summary>
              确定指定的对象的数据类型。
            </summary>
      <param name="value">
                要确定的类型的对象。
              </param>
      <returns>
              <paramref name="value" /> 的类型。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.TypeReflector.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>
              对于指定的成员，请使用指定的绑定约束搜索。
            </summary>
      <param name="name">
                要搜索的成员的名称。
              </param>
      <param name="bindingAttr">
                指定在其中进行成员和类型搜索由反射操作的方式的枚举值的按位组合。
              </param>
      <returns>
              一个数组 <see cref="T:System.Reflection.MemberInfo" /> 表示如果找到; 否则为具有指定的名称的公共成员的对象、 一个空数组。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.TypeReflector.GetMembers(System.Reflection.BindingFlags)">
      <summary>
              在所有情况下都会引发 <see cref="T:Microsoft.JScript.JScriptException" /> 异常。
            </summary>
      <param name="bindingAttr">
                指定在其中进行成员和类型搜索由反射操作的方式的枚举值的按位组合。
              </param>
      <returns>
              在所有情况下都会引发 <see cref="T:Microsoft.JScript.JScriptException" /> 异常。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.VBArrayConstructor.CreateInstance(System.Object[])">
      <summary>
              创建基于原型的对象，在指定的参数中传递的实例。
            </summary>
      <param name="args">
                要传递给构造函数的实参。
              </param>
      <returns>
              对象的实例。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.VBArrayObject.#ctor(Microsoft.JScript.VBArrayPrototype,System.Array)">
      <summary>
              初始化 <see cref="T:Microsoft.JScript.VBArrayObject" /> 类的新实例。
            </summary>
      <param name="parent">
                对象的父级。
              </param>
      <param name="array">
                类表示的基础数组。
              </param>
    </member>
    <member name="M:Microsoft.JScript.VBArrayPrototype.dimensions(System.Object)">
      <summary>
              确定指定数组中的维度数。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <returns>
              中的维度数 <paramref name="thisob" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.VBArrayPrototype.getItem(System.Object,System.Object[])">
      <summary>
              获取位于指定数组中的指定位置的值。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="args">
                一个数组，表示指定要获取的元素的位置的每个维度的索引。
              </param>
      <returns>
              中的指定位置处的值 <paramref name="thisob" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.VBArrayPrototype.lbound(System.Object,System.Object)">
      <summary>
              获取指定数组中指定维度的下限。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="dimension">
                确定其下限的维度。
              </param>
      <returns>
              下限为 <paramref name="dimension" /> 中 <paramref name="thisob" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.VBArrayPrototype.toArray(System.Object,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>
              将转换 <see cref="T:Microsoft.JScript.VBArrayObject" /> 对象传递给 <see cref="T:Microsoft.JScript.ArrayObject" /> 对象。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="engine">
                对脚本引擎的引用。
              </param>
      <returns>
              <paramref name="thisob" /> 表示为 <see cref="T:Microsoft.JScript.ArrayObject" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.VBArrayPrototype.ubound(System.Object,System.Object)">
      <summary>
              获取指定数组中指定维度的上限。
            </summary>
      <param name="thisob">
                此方法作用于该对象。
              </param>
      <param name="dimension">
                确定其上限的维度。
              </param>
      <returns>
              上限 <paramref name="dimension" /> 中 <paramref name="thisob" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.Close">
      <summary>
              关闭该引擎。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.Compile">
      <summary>
              使引擎编译现有的源状态。
            </summary>
      <returns>
              <see langword="true" /> 在成功编译;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.DoClose">
      <summary>
              关闭该引擎。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.DoCompile">
      <summary>
              使脚本引擎编译现有的源状态。
            </summary>
      <returns>
              <see langword="true" /> 在成功编译;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.DoLoadSourceState(Microsoft.JScript.Vsa.IJSVsaPersistSite)">
      <summary>
              指示引擎加载源项。
            </summary>
      <param name="site">
                从中加载指定的源项的站点。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.DoSaveCompiledState(System.Byte[]@,System.Byte[]@)">
      <summary>
              保存脚本引擎的编译状态；它还可选择保存调试信息。
            </summary>
      <param name="pe">
                 引擎的编译的状态。
              </param>
      <param name="debugInfo">
                 指定中包含的调试信息。PDB 文件。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.DoSaveSourceState(Microsoft.JScript.Vsa.IJSVsaPersistSite)">
      <summary>
              指示脚本引擎来持久保存到指定的对象其源状态。
            </summary>
      <param name="site">
                 状态保存到数据集的源站点。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.Error(Microsoft.JScript.Vsa.JSVsaError)">
      <summary>
              返回一个错误。
            </summary>
      <param name="vsaErrorNumber">
                要返回的错误号。
              </param>
      <returns>
              具有指定的错误号的异常。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.GetCustomOption(System.String)">
      <summary>
              获取引擎特定于实现的选项。
            </summary>
      <param name="name">
                要获取的选项的名称。
              </param>
      <returns>
              选项的值。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.GetOption(System.String)">
      <summary>
              获取引擎特定于实现的选项。
            </summary>
      <param name="name">
                要获取的选项的名称。
              </param>
      <returns>
              选项的值。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.InitNew">
      <summary>
              提供初始化阶段已完成的通知。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.IsValidIdentifier(System.String)">
      <summary>
              检查提供的标识符是否对引擎有效。
            </summary>
      <param name="ident">
                作为标识符提供的字符串值。
              </param>
      <returns>
              <see langword="true" /> 如果标识符有效，则为否则，它将返回 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.IsValidNamespaceName(System.String)">
      <summary>
              检查提供的命名空间是否为有效的引擎。
            </summary>
      <param name="name">
                作为标识符提供的字符串值。
              </param>
      <returns>
              <see langword="true" /> 如果命名空间有效;否则，它将返回 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.LoadCompiledState">
      <summary>
              加载的已编译的状态。
            </summary>
      <returns>
              已编译的状态。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.LoadSourceState(Microsoft.JScript.Vsa.IJSVsaPersistSite)">
      <summary>
              指示引擎从持久性提供主机的对象由指定点加载源项。
            </summary>
      <param name="site">
                从中加载指定源项的站点。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.Preconditions(Microsoft.JScript.Vsa.BaseVsaEngine.Pre)">
      <summary>
              设置不满足前提条件标志。
            </summary>
      <param name="flags">
                要设置的标志。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.Reset">
      <summary>
              从正在运行状态中移除引擎并断开连接自动绑定的事件处理程序。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.ResetCompiledState">
      <summary>
              重置已编译的状态。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.RevokeCache">
      <summary>
              使无效的引擎，其根名字对象由指定的缓存程序集。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.Run">
      <summary>
              启动在引擎中的已编译代码的执行，并绑定所有事件处理程序
            </summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.SaveCompiledState(System.Byte[]@,System.Byte[]@)">
      <summary>
              保存引擎; 的编译的状态（可选） 它还保存调试信息。
            </summary>
      <param name="pe">
                脚本引擎的编译状态。
              </param>
      <param name="debugInfo">
                指定与 PE（可移植可执行文件）对应的 .PDB 文件中包含的调试信息。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.SaveSourceState(Microsoft.JScript.Vsa.IJSVsaPersistSite)">
      <summary>
              指示引擎来持久保存其源状态。
            </summary>
      <param name="site">
                状态保存到数据集的源站点。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.SetCustomOption(System.String,System.Object)">
      <summary>
              设置特定于实现的引擎的选项。
            </summary>
      <param name="name">
                要设置的选项的名称。
              </param>
      <param name="value">
                所设置的选项的值。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.SetOption(System.String,System.Object)">
      <summary>
              设置特定于实现的引擎的选项。
            </summary>
      <param name="name">
                要设置的选项的名称。
              </param>
      <param name="value">
                所设置的选项的值。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.ValidateRootMoniker(System.String)">
      <summary>
              验证根名字对象。
            </summary>
      <param name="rootMoniker">
                要验证的根名字对象。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaSite.#ctor">
      <summary>
              创建一个新网站。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaSite.GetCompiledState(System.Byte[]@,System.Byte[]@)">
      <summary>
              设置为此网站集和调试信息。
            </summary>
      <param name="pe">
                将程序集。
              </param>
      <param name="debugInfo">
                调试要设置信息对象。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaSite.GetEventSourceInstance(System.String,System.String)">
      <summary>
              获取对先前使用 <see cref="M:Microsoft.Vsa.IVsaCodeItem.AddEventSource(System.String,System.String)" /> 方法添加到脚本引擎中的事件源的引用。
            </summary>
      <param name="itemName">
                指定的项名称。
              </param>
      <param name="eventSourceName">
                指定的事件源名称。
              </param>
      <returns>
              将事件源返回到引擎。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaSite.GetGlobalInstance(System.String)">
      <summary>
              获取对全局项的引用，例如主机提供的应用程序对象。
            </summary>
      <param name="name">
                获取对全局项的引用，例如主机提供的应用程序对象。
              </param>
      <returns>
              返回对全局对象的引用。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaSite.Notify(System.String,System.Object)">
      <summary>
              通知主机有关由脚本引擎生成的事件。
            </summary>
      <param name="notify">
                通知主机有关由脚本引擎生成的事件。
              </param>
      <param name="optional">
                通知主机有关由引擎生成的事件。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaSite.OnCompilerError(Microsoft.JScript.Vsa.IJSVsaError)">
      <summary>
              通知主机如何对脚本引擎遇到的编译器错误作出响应。
            </summary>
      <param name="error">
                表示有害错误的 <see cref="T:Microsoft.Vsa.IVsaError" /> 对象。
              </param>
      <returns>
              如果指示编译器继续向 <see cref="T:Microsoft.Vsa.IVsaSite" /> 对象报告进一步的错误，则返回 TRUE。
               如果指示编译器停止向 <see langword="IVsaSite" /> 对象报告进一步的错误，则返回 FALSE。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaStartup.#ctor">
      <summary>
              创建此类的新对象。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaStartup.SetSite(Microsoft.JScript.Vsa.IJSVsaSite)">
      <summary>
              设置此引擎的 VSA 站点。
            </summary>
      <param name="site">
                此引擎 VSA 站点。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaStartup.Shutdown">
      <summary>
              用于关闭引擎在执行操作。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaStartup.Startup">
      <summary>
              用于执行在引擎启动时的操作。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaCodeItem.AddEventSource(System.String,System.String)">
      <summary>
              将事件源添加到代码项中。
               代码项通过调用 IVsaSite.GetEventSourceInstance 方法（由宿主实现），使用事件源将事件挂钩到命名事件源。
            </summary>
      <param name="eventSourceName">
                事件源的编程名称。
              </param>
      <param name="eventSourceType">
                事件源的类型名称。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaCodeItem.AppendSourceText(System.String)">
      <summary>
              将指定的文本追加到代码项尾部。
            </summary>
      <param name="text">
                要追加到代码项的文本。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaCodeItem.RemoveEventSource(System.String)">
      <summary>
              从代码项中移除指定的事件源。
            </summary>
      <param name="eventSourceName">
                要移除的事件源的编程名称。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.Close">
      <summary>
              关闭该引擎。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.Compile">
      <summary>
              使引擎编译现有的源状态。
            </summary>
      <returns>
              <see langword="true" /> 在成功编译;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.GetOption(System.String)">
      <summary>
              获取引擎特定于实现的选项。
            </summary>
      <param name="name">
                要获取的选项的名称。
              </param>
      <returns>
              选项的值。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.InitNew">
      <summary>
              提供初始化阶段已完成的通知。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.IsValidIdentifier(System.String)">
      <summary>
              检查提供的标识符是否对引擎有效。
            </summary>
      <param name="identifier">
                作为标识符提供的字符串值。
              </param>
      <returns>
              <see langword="true" /> 如果标识符有效，则为否则，它将返回 <see langword="false" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.LoadSourceState(Microsoft.JScript.Vsa.IJSVsaPersistSite)">
      <summary>
              指示引擎从持久性提供主机的对象由指定点加载源项。
            </summary>
      <param name="site">
                从中加载指定源项的站点。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.Reset">
      <summary>
              从运行状态中移除脚本引擎，并自动断开与绑定事件处理程序的连接。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.RevokeCache">
      <summary>
              使无效的引擎，其根名字对象由指定的缓存程序集。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.Run">
      <summary>
              启动脚本引擎中已编译代码的执行，并绑定所有事件处理程序。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.SaveCompiledState(System.Byte[]@,System.Byte[]@)">
      <summary>
              保存脚本引擎的编译状态；它还可选择保存调试信息。
            </summary>
      <param name="pe">
                脚本引擎的编译状态。
              </param>
      <param name="pdb">
                指定与 PE（可移植可执行文件）对应的 .PDB 文件中包含的调试信息。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.SaveSourceState(Microsoft.JScript.Vsa.IJSVsaPersistSite)">
      <summary>
              指示脚本引擎来持久保存其源状态。
            </summary>
      <param name="site">
                状态保存到数据集的源站点。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.SetOption(System.String,System.Object)">
      <summary>
              设置脚本引擎特定于实现的选项。
            </summary>
      <param name="name">
                要设置的选项的名称。
              </param>
      <param name="value">
                所设置的选项的值。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaItem.GetOption(System.String)">
      <summary>
              获取脚本引擎实现特定的选项。
            </summary>
      <param name="name">
                要检索的选项的名称。
              </param>
      <returns>
              返回指定选项的值。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaItem.SetOption(System.String,System.Object)">
      <summary>
              设置脚本引擎特定于实现的选项。
            </summary>
      <param name="name">
                要设置的选项的名称。
              </param>
      <param name="value">
                选项的新值。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaItems.CreateItem(System.String,Microsoft.JScript.Vsa.JSVsaItemType,Microsoft.JScript.Vsa.JSVsaItemFlag)">
      <summary>
              按照 <see cref="T:Microsoft.JScript.Vsa.JSVsaItemType" /> 枚举中的定义，创建其中一个<see cref="T:Microsoft.JScript.Vsa.IJSVsaItem" />  类型的新实例。
            </summary>
      <param name="name">
                要与新项关联的名称。
              
                项是引用项类型时，名称参数必须与被引用程序集的名称（使用 <see cref="P:Microsoft.JScript.Vsa.IJSVsaReferenceItem.AssemblyName" /> 属性设置）完全相同。
                 但是，在 JScript 中，如果不指定 AssemblyName，则 JScript 会将 ItemName 用作程序集的名称。
              </param>
      <param name="itemType">
                在 <see cref="T:Microsoft.JScript.Vsa.JSVsaItemType" /> 枚举中定义的所创建的项类型。
              </param>
      <param name="itemFlag">
                用于指定代码项初始内容的可选标志。
              </param>
      <returns>
              返回对创建的 <see cref="T:Microsoft.JScript.Vsa.IJSVsaItem" /> 对象的引用。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaItems.Remove(System.Int32)">
      <summary>
              从集合中移除按照项的索引值指定的项。
            </summary>
      <param name="index">
                要移除的项的索引值。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaItems.Remove(System.String)">
      <summary>
              从集合中移除按照项的名称指定的项。
            </summary>
      <param name="name">
                要从集合中移除的项的名称。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaPersistSite.LoadElement(System.String)">
      <summary>
              获取以前使用 <see cref="M:Microsoft.JScript.Vsa.IJSVsaPersistSite.SaveElement(System.String,System.String)" /> 方法保存的源字符串。
            </summary>
      <param name="name">
                要加载的代码项的名称。
                 加载项目文件时，此名称可以是空引用。
              </param>
      <returns>
              返回与名称参数关联的源代码元素的内容。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaPersistSite.SaveElement(System.String,System.String)">
      <summary>
              使用给定名称参数保存任意源字符串，然后可在调用 <see cref="M:Microsoft.JScript.Vsa.IJSVsaPersistSite.LoadElement(System.String)" /> 方法时使用以便重载该字符串。
            </summary>
      <param name="name">
                要与指定的源项关联的名称。
                 保存项目文件时，此名称可以是空引用。
              </param>
      <param name="source">
                项的源字符串。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaSite.GetCompiledState(System.Byte[]@,System.Byte[]@)">
      <summary>
              获取脚本引擎的已编译状态和关联的调试信息（可选）。
            </summary>
      <param name="pe">
                引擎的已编译状态；字节格式的程序集。
              </param>
      <param name="debugInfo">
                程序集的调试信息；如果此类信息不存在或不可用，则为空引用。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaSite.GetEventSourceInstance(System.String,System.String)">
      <summary>
              获取对先前使用 <see cref="M:Microsoft.JScript.Vsa.IJSVsaCodeItem.AddEventSource(System.String,System.String)" /> 方法添加到脚本引擎中的事件源的引用。
            </summary>
      <param name="itemName">
                指定的项名称。
              </param>
      <param name="eventSourceName">
                指定的事件源名称。
              </param>
      <returns>
              将事件源返回到引擎。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaSite.GetGlobalInstance(System.String)">
      <summary>
              获取对全局项的引用，例如主机提供的应用程序对象。
            </summary>
      <param name="name">
                获取对全局项的引用，例如主机提供的应用程序对象。
              </param>
      <returns>
              返回对全局对象的引用。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaSite.Notify(System.String,System.Object)">
      <summary>
              通知主机有关由 .NET 脚本引擎生成的事件。
            </summary>
      <param name="notify">
                通知主机有关由 .NET 脚本引擎生成的事件。
              </param>
      <param name="info">
                通知主机有关由 .NET 脚本引擎生成的事件。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaSite.OnCompilerError(Microsoft.JScript.Vsa.IJSVsaError)">
      <summary>
              通知主机如何对脚本引擎遇到的编译器错误作出响应。
            </summary>
      <param name="error">
                表示有害错误的 <see cref="T:Microsoft.JScript.Vsa.IJSVsaError" /> 对象。
              </param>
      <returns>
              如果指示编译器继续向 <see cref="T:Microsoft.JScript.Vsa.IJSVsaSite" /> 对象报告进一步的错误，则返回 TRUE。
               如果指示编译器停止向 <see langword="IVsaSite" /> 对象报告进一步的错误，则返回 FALSE。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Vsa.JSVsaException.#ctor">
      <summary>
              使用由系统提供的用于描述错误的消息初始化 <see cref="T:Microsoft.JScript.Vsa.JSVsaException" /> 类的新实例。
               此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.JSVsaException.#ctor(Microsoft.JScript.Vsa.JSVsaError)">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <param name="error">
                一个 <see cref="T:Microsoft.JScript.Vsa.JSVsaError" /> 值，该值描述异常的原因。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.JSVsaException.#ctor(Microsoft.JScript.Vsa.JSVsaError,System.String)">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <param name="error">
                一个 <see cref="T:Microsoft.JScript.Vsa.JSVsaError" /> 值，该值描述异常的原因。
              </param>
      <param name="message">
                描述该异常的消息。
                 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.JSVsaException.#ctor(Microsoft.JScript.Vsa.JSVsaError,System.String,System.Exception)">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <param name="error">
                一个 <see cref="T:Microsoft.JScript.Vsa.JSVsaError" /> 值，该值描述异常的原因。
              </param>
      <param name="message">
                描述该异常的消息。
                 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。
              </param>
      <param name="innerException">
                导致当前异常的异常。
                 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.JSVsaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              用序列化数据初始化 <see cref="T:Microsoft.JScript.Vsa.JSVsaException" /> 类的新实例。
               此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <param name="info">
                承载序列化对象数据的对象。
              </param>
      <param name="context">
                关于来源和目标的上下文信息
              </param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.JSVsaException.#ctor(System.String)">
      <summary>
              使用指定的描述错误的消息初始化 <see cref="T:Microsoft.JScript.Vsa.JSVsaException" /> 类的新实例。
               此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <param name="message">
                描述该异常的消息。
                 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.JSVsaException.#ctor(System.String,System.Exception)">
      <summary>
              使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:Microsoft.JScript.Vsa.JSVsaException" /> 类的新实例。
               此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <param name="message">
                描述该异常的消息。
                 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。
              </param>
      <param name="innerException">
                导致当前异常的异常。
                 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。
              </param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.JSVsaException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              用序列化数据初始化 <see cref="T:Microsoft.JScript.Vsa.JSVsaException" /> 类的新实例。
               此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <param name="info">
                承载序列化对象数据的对象。
              </param>
      <param name="context">
                关于来源和目标的上下文信息
              </param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.JSVsaException.ToString">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <returns>
              当前异常的字符串表示形式。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Vsa.ResInfo.#ctor(System.String,System.Boolean)">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
      <param name="resinfo" />
      <param name="isLinked" />
    </member>
    <member name="M:Microsoft.JScript.Vsa.ResInfo.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
      <param name="filename" />
      <param name="name" />
      <param name="isPublic" />
      <param name="isLinked" />
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.#ctor">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.#ctor(System.Boolean)">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
      <param name="fast" />
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.Clone(System.AppDomain)">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
      <param name="domain" />
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.CompileEmpty">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.ConnectEvents">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.CreateEngine">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.CreateEngineAndGetGlobalScope(System.Boolean,System.String[])">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
      <param name="fast" />
      <param name="assemblyNames" />
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.CreateEngineAndGetGlobalScopeWithType(System.Boolean,System.String[],System.RuntimeTypeHandle)">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
      <param name="fast" />
      <param name="assemblyNames" />
      <param name="callingTypeHandle" />
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.CreateEngineAndGetGlobalScopeWithTypeAndRootNamespace(System.Boolean,System.String[],System.RuntimeTypeHandle,System.String)">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
      <param name="fast" />
      <param name="assemblyNames" />
      <param name="callingTypeHandle" />
      <param name="rootNamespace" />
      <returns>
              返回 <see cref="T:Microsoft.JScript.GlobalScope" />。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.CreateEngineWithType(System.RuntimeTypeHandle)">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
      <param name="callingTypeHandle" />
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.DisconnectEvents">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.GetAssembly">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.GetGlobalScope">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.GetItem(System.String)">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
      <param name="itemName" />
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.GetItemAtIndex(System.Int32)">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
      <param name="index" />
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.GetItemCount">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.GetMainScope">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.GetModule">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.GetOriginalArrayConstructor">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.GetOriginalObjectConstructor">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.GetOriginalRegExpConstructor">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.InitVsaEngine(System.String,Microsoft.JScript.Vsa.IJSVsaSite)">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
      <param name="rootMoniker" />
      <param name="site" />
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.Interrupt">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.IsValidIdentifier(System.String)">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
      <param name="ident" />
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.PopScriptObject">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.PushScriptObject(Microsoft.JScript.ScriptObject)">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
      <param name="obj" />
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.RegisterEventSource(System.String)">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
      <param name="name" />
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.Reset">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.Restart">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.Run(System.AppDomain)">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
      <param name="domain" />
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.RunEmpty">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.ScriptObjectStackTop">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.SetOutputStream(Microsoft.JScript.IMessageReceiver)">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
      <param name="output" />
    </member>
    <member name="M:Microsoft.JScript.VsaItem.GetOption(System.String)">
      <summary>
              获取 codebase 选项。
            </summary>
      <param name="name">
                字符串文字"基本代码"。
              </param>
      <returns>
              值 codebase 选项。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.VsaItem.SetOption(System.String,System.Object)">
      <summary>
              集 codebase 选项。
            </summary>
      <param name="name">
                字符串文字"基本代码"。
              </param>
      <param name="value">
                选项的新值。
              </param>
    </member>
    <member name="M:Microsoft.JScript.VsaItems.#ctor(Microsoft.JScript.Vsa.VsaEngine)">
      <summary>
              初始化 <see cref="T:Microsoft.JScript.VsaItems" /> 类的新实例。
            </summary>
      <param name="engine">
                对脚本引擎的引用。
              </param>
    </member>
    <member name="M:Microsoft.JScript.VsaItems.Close">
      <summary>
              断开与脚本引擎的集合中的每个项。
            </summary>
    </member>
    <member name="M:Microsoft.JScript.VsaItems.CreateItem(System.String,Microsoft.JScript.Vsa.JSVsaItemType,Microsoft.JScript.Vsa.JSVsaItemFlag)">
      <summary>
              创建一个新项并将其添加到集合。
            </summary>
      <param name="name">
                新项的名称。
              </param>
      <param name="itemType">
                枚举值之一。
                 值指定为新项的类型 <see cref="F:Microsoft.JScript.Vsa.JSVsaItemType.Code" />, ，<see cref="F:Microsoft.JScript.Vsa.JSVsaItemType.Reference" />, ，或 <see cref="F:Microsoft.JScript.Vsa.JSVsaItemType.AppGlobal" />。
              </param>
      <param name="itemFlag">
                枚举值之一。
                 值指定的初始内容 <see cref="F:Microsoft.JScript.Vsa.JSVsaItemType.Code" /> 项作为 <see cref="F:Microsoft.JScript.Vsa.JSVsaItemFlag.Class" />, ，<see cref="F:Microsoft.JScript.Vsa.JSVsaItemFlag.Module" />, ，或 <see cref="F:Microsoft.JScript.Vsa.JSVsaItemFlag.None" />。
              </param>
      <returns>
              新创建的项。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.VsaItems.GetEnumerator">
      <summary>
              获取循环的枚举器对的集合。
            </summary>
      <returns>
              一个循环访问集合的枚举。
            </returns>
    </member>
    <member name="M:Microsoft.JScript.VsaItems.Remove(System.Int32)">
      <summary>
              移除指定集合中的指定的索引值的项。
            </summary>
      <param name="itemIndex">
                要移除的项的索引。
              </param>
    </member>
    <member name="M:Microsoft.JScript.VsaItems.Remove(System.String)">
      <summary>
              移除由指定的名称从集合的项。
            </summary>
      <param name="itemName">
                要移除的项的名称。
              </param>
    </member>
    <member name="M:Microsoft.JScript.With.JScriptWith(System.Object,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>
              默认值为建立对象 <see langword="with" /> 通过将其添加到范围堆栈的语句块。
            </summary>
      <param name="withOb">
                默认对象。
              </param>
      <param name="engine">
                对脚本引擎的引用。
              </param>
      <returns>
              <paramref name="withOb" /> 转换为对象。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.ArrayObject.length">
      <summary>
              获取或设置数组的长度。
            </summary>
      <returns>
              数组的长度。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.ArrayPrototype.constructor">
      <summary>
              获取对基于原型的对象，该对象正在使用此原型的引用。
            </summary>
      <returns>
              对基于原型的对象的引用。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.ArrayWrapper.length">
      <summary>
              获取数组的长度。
            </summary>
      <returns>
              数组的长度。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.BooleanPrototype.constructor">
      <summary>
              获取对基于原型的对象，该对象正在使用此原型的引用。
            </summary>
      <returns>
              对基于原型的对象的引用。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.CmdLineException.Message">
      <summary>
              获取描述当前异常的消息。
            </summary>
      <returns>
              解释异常原因的错误消息。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.COMCharStream.CanRead">
      <summary>
              获取一个值，该值指示当前流是否支持读取。
            </summary>
      <returns>
              在所有情况下均为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.COMCharStream.CanSeek">
      <summary>
              获取一个值，该值指示当前流是否支持查找。
            </summary>
      <returns>
              在所有情况下均为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.COMCharStream.CanWrite">
      <summary>
              获取一个值，该值指示当前流是否支持写入。
            </summary>
      <returns>
              在所有情况下均为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.COMCharStream.Length">
      <summary>
              获取流的长度。
            </summary>
      <returns>
              流的长度。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.COMCharStream.Position">
      <summary>
              获取当前流中的位置。
               Set 方法不执行任何操作。
            </summary>
      <returns>
              流中的当前新位置。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.COMFieldInfo.Attributes">
      <summary>
              获取与此字段相关联的属性。
            </summary>
      <returns>
              <see cref="F:System.Reflection.FieldAttributes.Public" />
            </returns>
    </member>
    <member name="P:Microsoft.JScript.COMFieldInfo.DeclaringType">
      <summary>
              获取声明此字段的类型。
            </summary>
      <returns>
              为 null，因为声明此字段的类型为外部 COM 对象。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.COMFieldInfo.FieldHandle">
      <summary>
              引发 <see cref="F:Microsoft.JScript.JSError.InternalError" /> 在所有情况下的异常。
            </summary>
      <returns>
              引发 <see cref="F:Microsoft.JScript.JSError.InternalError" /> 在所有情况下的异常。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.COMFieldInfo.FieldType">
      <summary>
              获取此字段的类型。
            </summary>
      <returns>
              <see cref="T:System.Object" /> 的类型。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.COMFieldInfo.MemberType">
      <summary>
              获取此字段的成员的类型。
               标识类型的类派生自 <see cref="T:System.Reflection.MemberInfo" /> ，此类派生。
            </summary>
      <returns>
              <see cref="F:System.Reflection.MemberTypes.Field" />, 因为此类派生自 <see cref="T:System.Reflection.FieldInfo" />。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.COMFieldInfo.Name">
      <summary>
              获取此对象表示的外部 COM 字段的名称。
            </summary>
      <returns>
              此对象表示的外部 COM 字段的名称。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.COMFieldInfo.ReflectedType">
      <summary>
              获取用于获取通过反射此实例的类对象。
            </summary>
      <returns>
              为 null，因为未通过反射获取此实例。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.COMMethodInfo.Attributes">
      <summary>
              获取与此方法关联的属性。
            </summary>
      <returns>
              <see cref="F:System.Reflection.MethodAttributes.Public" />
            </returns>
    </member>
    <member name="P:Microsoft.JScript.COMMethodInfo.DeclaringType">
      <summary>
              获取声明此方法的类型。
            </summary>
      <returns>
              为 null，因为声明此方法的类型为外部 COM 对象。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.COMMethodInfo.MemberType">
      <summary>
              获取此方法的成员的类型。
               标识类型的类派生自 <see cref="T:System.Reflection.MemberInfo" /> ，此类派生。
            </summary>
      <returns>
              <see cref="F:System.Reflection.MemberTypes.Method" />, 因为此类派生自 <see cref="T:System.Reflection.MethodInfo" />。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.COMMethodInfo.MethodHandle">
      <summary>
              引发 <see cref="F:Microsoft.JScript.JSError.InternalError" /> 在所有情况下的异常。
            </summary>
      <returns>
              引发 <see cref="F:Microsoft.JScript.JSError.InternalError" /> 在所有情况下的异常。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.COMMethodInfo.Name">
      <summary>
              获取此对象表示的外部 COM 方法的名称。
            </summary>
      <returns>
              此对象表示的外部 COM 方法的名称。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.COMMethodInfo.ReflectedType">
      <summary>
              获取用于获取通过反射此实例的类对象。
            </summary>
      <returns>
              为 null，因为未通过反射获取此实例。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.COMMethodInfo.ReturnType">
      <summary>
              获取此方法的返回值的类型。
            </summary>
      <returns>
              在所有情况下，则为 null。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.COMMethodInfo.ReturnTypeCustomAttributes">
      <summary>
              获取此方法的返回值的类型的自定义特性。
            </summary>
      <returns>
              在所有情况下，则为 null。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.COMPropertyInfo.Attributes">
      <summary>
              获取与此属性相关联的属性。
            </summary>
      <returns>
              <see cref="F:System.Reflection.PropertyAttributes.None" />
            </returns>
    </member>
    <member name="P:Microsoft.JScript.COMPropertyInfo.CanRead">
      <summary>
              获取一个值，该值指示是否可以读取该属性。
            </summary>
      <returns>
              在所有情况下均为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.COMPropertyInfo.CanWrite">
      <summary>
              获取一个值，该值指示属性是否可写。
            </summary>
      <returns>
              在所有情况下均为 <see langword="true" />。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.COMPropertyInfo.DeclaringType">
      <summary>
              获取声明此属性的类型。
            </summary>
      <returns>
              为 null，因为声明此属性的类型为外部 COM 对象。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.COMPropertyInfo.MemberType">
      <summary>
              获取此属性的成员的类型。
               标识类型的类派生自 <see cref="T:System.Reflection.MemberInfo" /> ，此类派生。
            </summary>
      <returns>
              <see cref="F:System.Reflection.MemberTypes.Property" />, 因为此类派生自 <see cref="T:System.Reflection.PropertyInfo" />。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.COMPropertyInfo.Name">
      <summary>
              获取此对象表示的外部 COM 属性的名称。
            </summary>
      <returns>
              此对象表示的外部 COM 属性的名称。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.COMPropertyInfo.PropertyType">
      <summary>
              获取此属性的类型。
            </summary>
      <returns>
              <see cref="T:System.Object" /> 的类型。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.COMPropertyInfo.ReflectedType">
      <summary>
              获取用于获取通过反射此实例的类对象。
            </summary>
      <returns>
              为 null，因为未通过反射获取此实例。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Context.EndColumn">
      <summary>
              获取此代码的结尾处的行中的列号。
               这包括在行开头的空格。
            </summary>
      <returns>
              此代码的结尾处的列号。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Context.EndLine">
      <summary>
              获取此代码的结束行号。
            </summary>
      <returns>
              此代码的结束行号。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Context.EndPosition">
      <summary>
              获取代码字符串中此代码的结束位置的位置，因为所有代码行均都存储在单个字符串中。
            </summary>
      <returns>
              此代码的结尾处代码字符串中的位置。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Context.StartColumn">
      <summary>
              获取此代码开始所在行中的列号。
               这包括在行开头的空格。
            </summary>
      <returns>
              此代码开始所在的列号。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Context.StartLine">
      <summary>
              获取此代码开始所在的行号。
            </summary>
      <returns>
              此代码的开始位置的行号。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Context.StartPosition">
      <summary>
              获取代码字符串中的位置，此代码可启动，因为所有代码行均都存储在单个字符串中。
            </summary>
      <returns>
              此代码开始所在代码字符串中的位置。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.DatePrototype.constructor">
      <summary>
              获取对基于原型的对象，该对象正在使用此原型的引用。
            </summary>
      <returns>
              对基于原型的对象的引用。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.EnumeratorPrototype.constructor">
      <summary>
              获取对基于原型的对象，该对象正在使用此原型的引用。
            </summary>
      <returns>
              对基于原型的对象的引用。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.ErrorPrototype.constructor">
      <summary>
              获取对基于原型的对象，该对象正在使用此原型的引用。
            </summary>
      <returns>
              对基于原型的对象的引用。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.FunctionPrototype.constructor">
      <summary>
              获取对基于原型的对象，该对象正在使用此原型的引用。
            </summary>
      <returns>
              对基于原型的对象的引用。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.ActiveXObject">
      <summary>
              获取对 <see cref="T:Microsoft.JScript.ActiveXObjectConstructor" /> 对象。
            </summary>
      <returns>
              对引用 <see cref="T:Microsoft.JScript.ActiveXObjectConstructor" /> 对象。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.Array">
      <summary>
              获取对 <see cref="T:Microsoft.JScript.ArrayConstructor" /> 对象。
            </summary>
      <returns>
              对引用 <see cref="T:Microsoft.JScript.ArrayConstructor" /> 对象。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.boolean">
      <summary>
              获取与 JScript <see langword="boolean" /> 数据类型相对应的托管类型。
            </summary>
      <returns>
              与 JScript <see langword="boolean" /> 数据类型相对应的托管类型。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.Boolean">
      <summary>
              获取对 <see cref="T:Microsoft.JScript.BooleanConstructor" /> 对象。
            </summary>
      <returns>
              对 <see cref="T:Microsoft.JScript.BooleanConstructor" /> 对象的引用。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.byte">
      <summary>
              获取与 JScript 相对应的托管的类型 <see langword="byte" /> 数据类型。
            </summary>
      <returns>
              托管的类型对应于 JScript <see langword="byte" /> 数据类型。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.char">
      <summary>
              获取与 JScript 相对应的托管的类型 <see langword="char" /> 数据类型。
            </summary>
      <returns>
              托管的类型对应于 JScript <see langword="char" /> 数据类型。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.Date">
      <summary>
              获取对 <see cref="T:Microsoft.JScript.DateConstructor" /> 对象。
            </summary>
      <returns>
              对 <see cref="T:Microsoft.JScript.DateConstructor" /> 对象的引用。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.decimal">
      <summary>
              获取与 JScript 相对应的托管的类型 <see langword="decimal" /> 数据类型。
            </summary>
      <returns>
              托管的类型对应于 JScript <see langword="decimal" /> 数据类型。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.double">
      <summary>
              获取与 JScript 相对应的托管的类型 <see langword="double" /> 数据类型。
            </summary>
      <returns>
              托管的类型对应于 JScript <see langword="double" /> 数据类型。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.Enumerator">
      <summary>
              获取对 <see cref="T:Microsoft.JScript.EnumeratorConstructor" /> 对象。
            </summary>
      <returns>
              对引用 <see cref="T:Microsoft.JScript.EnumeratorConstructor" /> 对象。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.Error">
      <summary>
              获取对 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象。
            </summary>
      <returns>
              对引用 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.EvalError">
      <summary>
              获取对 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象。
               对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.EvalError" />。
            </summary>
      <returns>
              对引用 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象。
               对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.EvalError" />。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.float">
      <summary>
              获取与 JScript 相对应的托管的类型 <see langword="float" /> 数据类型。
            </summary>
      <returns>
              托管的类型对应于 JScript <see langword="float" /> 数据类型。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.Function">
      <summary>
              获取对 <see cref="T:Microsoft.JScript.FunctionConstructor" /> 对象。
            </summary>
      <returns>
              对 <see cref="T:Microsoft.JScript.FunctionConstructor" /> 对象的引用。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.int">
      <summary>
              获取与 JScript 相对应的托管的类型 <see langword="int" /> 数据类型。
            </summary>
      <returns>
              托管的类型对应于 JScript <see langword="int" /> 数据类型。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.long">
      <summary>
              获取与 JScript 相对应的托管的类型 <see langword="long" /> 数据类型。
            </summary>
      <returns>
              托管的类型对应于 JScript <see langword="long" /> 数据类型。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.Math">
      <summary>
              获取对 <see cref="T:Microsoft.JScript.MathObject" /> 对象。
            </summary>
      <returns>
              对 <see cref="T:Microsoft.JScript.MathObject" /> 对象的引用。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.Number">
      <summary>
              获取对 <see cref="T:Microsoft.JScript.NumberConstructor" /> 对象。
            </summary>
      <returns>
              对 <see cref="T:Microsoft.JScript.NumberConstructor" /> 对象的引用。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.Object">
      <summary>
              获取对 <see cref="T:Microsoft.JScript.ObjectConstructor" /> 对象。
            </summary>
      <returns>
              对引用 <see cref="T:Microsoft.JScript.ObjectConstructor" /> 对象。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.RangeError">
      <summary>
              获取对 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象。
               对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.RangeError" />。
            </summary>
      <returns>
              对引用 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象。
               对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.RangeError" />。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.ReferenceError">
      <summary>
              获取对 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象。
               对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.ReferenceError" />。
            </summary>
      <returns>
              对引用 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象。
               对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.ReferenceError" />。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.RegExp">
      <summary>
              获取对 <see cref="T:Microsoft.JScript.RegExpConstructor" /> 对象。
            </summary>
      <returns>
              对 <see cref="T:Microsoft.JScript.RegExpConstructor" /> 对象的引用。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.sbyte">
      <summary>
              获取与 JScript 相对应的托管的类型 <see langword="sbyte" /> 数据类型。
            </summary>
      <returns>
              托管的类型对应于 JScript <see langword="sbyte" /> 数据类型。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.short">
      <summary>
              获取与 JScript 相对应的托管的类型 <see langword="short" /> 数据类型。
            </summary>
      <returns>
              托管的类型对应于 JScript <see langword="short" /> 数据类型。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.String">
      <summary>
              获取对 <see cref="T:Microsoft.JScript.StringConstructor" /> 对象。
            </summary>
      <returns>
              对 <see cref="T:Microsoft.JScript.StringConstructor" /> 对象的引用。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.SyntaxError">
      <summary>
              获取对 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象。
               对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.SyntaxError" />。
            </summary>
      <returns>
              对引用 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象。
               对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.SyntaxError" />。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.TypeError">
      <summary>
              获取对 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象。
               对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.TypeError" />。
            </summary>
      <returns>
              对引用 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象。
               对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.TypeError" />。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.uint">
      <summary>
              获取与 JScript 相对应的托管的类型 <see langword="uint" /> 数据类型。
            </summary>
      <returns>
              托管的类型对应于 JScript <see langword="uint" /> 数据类型。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.ulong">
      <summary>
              获取与 JScript 相对应的托管的类型 <see langword="ulong" /> 数据类型。
            </summary>
      <returns>
              托管的类型对应于 JScript <see langword="ulong" /> 数据类型。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.URIError">
      <summary>
              获取对 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象。
               对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.URIError" />。
            </summary>
      <returns>
              对引用 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象。
               对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.URIError" />。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.ushort">
      <summary>
              获取与 JScript 相对应的托管的类型 <see langword="ushort" /> 数据类型。
            </summary>
      <returns>
              托管的类型对应于 JScript <see langword="ushort" /> 数据类型。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.VBArray">
      <summary>
              获取对 <see cref="T:Microsoft.JScript.VBArrayConstructor" /> 对象。
            </summary>
      <returns>
              对 <see cref="T:Microsoft.JScript.VBArrayConstructor" /> 对象的引用。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.void">
      <summary>
              不返回值的函数的返回值获取相对应的托管的类型。
            </summary>
      <returns>
              不返回值的函数的返回值相对应的托管的类型。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.ITokenColorInfo.Color">
      <summary>
              一个类中实现时，获取应该用于显示的代码单元的颜色。
            </summary>
      <returns>
              应该用于显示代码单元的颜色。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.ITokenColorInfo.EndPosition">
      <summary>
              一个类中实现时，获取代码单元的结尾处的位置。
            </summary>
      <returns>
              代码单元的结束位置。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.ITokenColorInfo.StartPosition">
      <summary>
              一个类中实现时，获取代码单元的开始处的位置。
            </summary>
      <returns>
              其中的代码的单元开始的位置。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.IVsaFullErrorInfo.EndLine">
      <summary>
              一个类中实现时，获取的代码时出错的结束行。
            </summary>
      <returns>
              出现错误代码的结束行。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.IVsaScriptCodeItem.StartColumn">
      <summary>
              一个类中实现时，获取或设置此代码开始所在行中的列号。
            </summary>
      <returns>
              此代码开始所在的列号。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.IVsaScriptCodeItem.StartLine">
      <summary>
              一个类中实现时，获取或设置此代码开始所在的行号。
            </summary>
      <returns>
              此代码的开始位置的行号。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.IVsaScriptScope.Parent">
      <summary>
              一个类中实现时，获取对父对象的引用。
            </summary>
      <returns>
              父作用域。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JSConstructor.Attributes">
      <summary>
              获取与此构造函数相关联的属性。
            </summary>
      <returns>
              枚举值的按位组合。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JSConstructor.DeclaringType">
      <summary>
              获取声明此构造函数的类型。
            </summary>
      <returns>
              <see langword="Type" /> 对象为声明此成员的类。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JSConstructor.MemberType">
      <summary>
              获取此方法的成员的类型。
               标识类型的类派生自 <see cref="T:System.Reflection.MemberInfo" /> ，此类派生。
            </summary>
      <returns>
              <see cref="F:System.Reflection.MemberTypes.Constructor" />, 因为此类派生自 <see cref="T:System.Reflection.ConstructorInfo" />。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JSConstructor.MethodHandle">
      <summary>
              获取此构造函数的内部元数据表示的句柄。
            </summary>
      <returns>
              此构造函数的内部元数据表示句柄。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JSConstructor.Name">
      <summary>
              获取此构造函数的名称。
            </summary>
      <returns>
              此构造函数的名称。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JSConstructor.ReflectedType">
      <summary>
              获取用于获取通过反射此实例的类对象。
            </summary>
      <returns>
              <see langword="Type" /> 对象为声明此成员的类。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptCodeProvider.FileExtension">
      <summary>
              获取 JScript 代码文件的文件扩展名。
            </summary>
      <returns>
              字符串文字"js"。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.Column">
      <summary>
              获取在代码中发生错误的列。
            </summary>
      <returns>
              中的代码在其中出现错误，或者，如果列 <see cref="T:Microsoft.JScript.Context" /> 为 null。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.Description">
      <summary>
              获取描述错误的消息。
            </summary>
      <returns>
              描述错误的消息。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.EndColumn">
      <summary>
              获取在其中结束错误代码中的列。
            </summary>
      <returns>
              中的列顺序错误结束，该代码或 0 <see cref="T:Microsoft.JScript.Context" /> 为 null。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.EndLine">
      <summary>
              获取在其中结束错误代码的行。
            </summary>
      <returns>
              在其中错误结束，代码，或者，如果行 <see cref="T:Microsoft.JScript.Context" /> 为 null。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.ErrorNumber">
      <summary>
              获取 <see cref="P:System.Exception.HResult" /> 错误代码。
            </summary>
      <returns>
              <see cref="P:System.Exception.HResult" /> 错误代码。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.Line">
      <summary>
              获取的代码发生错误的行。
            </summary>
      <returns>
              代码中发生错误，或者，如果行 <see cref="T:Microsoft.JScript.Context" /> 为 null。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.LineText">
      <summary>
              获取发生错误的代码的文本。
            </summary>
      <returns>
              该代码或为空字符串的文本如果 <see cref="T:Microsoft.JScript.Context" /> 为 null。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.Message">
      <summary>
              获取描述错误的消息。
            </summary>
      <returns>
              描述错误的消息。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.Microsoft#JScript#Vsa#IJSVsaError#Description">
      <summary>
              获取描述错误的消息。
            </summary>
      <returns>
              描述错误的消息。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.Microsoft#JScript#Vsa#IJSVsaError#Number">
      <summary>
              获取 <see cref="P:System.Exception.HResult" /> 错误代码。
            </summary>
      <returns>
              <see cref="P:System.Exception.HResult" /> 错误代码。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.Number">
      <summary>
              获取 <see cref="P:System.Exception.HResult" /> 错误代码。
            </summary>
      <returns>
              <see cref="P:System.Exception.HResult" /> 错误代码。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.Severity">
      <summary>
              获取一个介于 0 （最严重） 和 4 （最不严重） 之间的数字，该值指示错误的严重级别。
               默认值为 0。
            </summary>
      <returns>
              介于 0 和 4 之间的数字。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.SourceItem">
      <summary>
              获取导致了错误的源的代码项。
            </summary>
      <returns>
              源的代码项;否则会引发 <see cref="T:Microsoft.JScript.NoContextException" /> 如果 <see cref="T:Microsoft.JScript.Context" /> 为 null。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.SourceMoniker">
      <summary>
              获取包含错误的源代码文件的名称。
            </summary>
      <returns>
              源的名称的代码文件或字符串文字"无源"如果 <see cref="T:Microsoft.JScript.Context" /> 为 null。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.StackTrace">
      <summary>
              获取在错误发生时的堆栈跟踪信息。
            </summary>
      <returns>
              堆栈跟踪信息。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.StartColumn">
      <summary>
              获取在代码中发生错误的列。
            </summary>
      <returns>
              中的代码在其中出现错误，或者，如果列 <see cref="T:Microsoft.JScript.Context" /> 为 null。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JSField.Attributes">
      <summary>
              获取与此字段相关联的属性。
            </summary>
      <returns>
              <see cref="F:System.Reflection.FieldAttributes.PrivateScope" />
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JSField.DeclaringType">
      <summary>
              获取声明此字段的类型。
            </summary>
      <returns>
              在所有情况下，则为 null。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JSField.FieldHandle">
      <summary>
              获取此字段的内部元数据表示的句柄。
            </summary>
      <returns>
              此字段的内部元数据表示句柄。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JSField.FieldType">
      <summary>
              获取此字段的类型。
            </summary>
      <returns>
              <see cref="T:System.Object" /> 的类型。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JSField.MemberType">
      <summary>
              获取此字段的成员的类型。
               标识类型的类派生自 <see cref="T:System.Reflection.MemberInfo" /> ，此类派生。
            </summary>
      <returns>
              <see cref="F:System.Reflection.MemberTypes.Field" />, 因为此类派生自 <see cref="T:System.Reflection.FieldInfo" />。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JSField.Name">
      <summary>
              获取此字段的名称。
            </summary>
      <returns>
              此字段的名称。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JSField.ReflectedType">
      <summary>
              获取用于获取通过反射此实例的类对象。
            </summary>
      <returns>
              声明此方法的类型。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JSFieldInfo.Attributes">
      <summary>
              获取与此字段相关联的属性。
            </summary>
      <returns>
              枚举值的按位组合。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JSFieldInfo.DeclaringType">
      <summary>
              获取声明此字段的类型。
            </summary>
      <returns>
              <see langword="Type" /> 对象为声明此成员的类。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JSFieldInfo.FieldHandle">
      <summary>
              获取此字段的内部元数据表示的句柄。
            </summary>
      <returns>
              此字段的内部元数据表示句柄。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JSFieldInfo.FieldType">
      <summary>
              获取此字段的类型。
            </summary>
      <returns>
              此字段的类型。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JSFieldInfo.MemberType">
      <summary>
              获取此字段的成员的类型。
               标识类型的类派生自 <see cref="T:System.Reflection.MemberInfo" /> ，此类派生。
            </summary>
      <returns>
              <see cref="F:System.Reflection.MemberTypes.Field" />, 因为此类派生自 <see cref="T:System.Reflection.FieldInfo" />。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JSFieldInfo.Name">
      <summary>
              获取此字段的名称。
            </summary>
      <returns>
              此字段的名称。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JSFieldInfo.ReflectedType">
      <summary>
              获取用于获取通过反射此实例的类对象。
            </summary>
      <returns>
              <see langword="Type" /> 用于获取此方法的对象。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JSLocalField.FieldType">
      <summary>
              获取此字段的类型。
            </summary>
      <returns>
              此字段的类型。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JSMethod.MemberType">
      <summary>
              获取此方法的成员的类型。
               标识类型的类派生自 <see cref="T:System.Reflection.MemberInfo" /> ，此类派生。
            </summary>
      <returns>
              <see cref="F:System.Reflection.MemberTypes.Method" />, 因为此类派生自 <see cref="T:System.Reflection.MethodInfo" />。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JSMethod.MethodHandle">
      <summary>
              获取此方法的内部元数据表示的句柄。
            </summary>
      <returns>
              此方法的内部元数据表示句柄。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JSMethod.ReflectedType">
      <summary>
              获取用于获取通过反射此实例的类对象。
            </summary>
      <returns>
              声明此方法的类型。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JSMethod.ReturnTypeCustomAttributes">
      <summary>
              获取此方法的返回值的类型的自定义特性。
            </summary>
      <returns>
              在所有情况下，则为 null。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JSMethodInfo.Attributes">
      <summary>
              获取与此方法关联的属性。
            </summary>
      <returns>
              枚举值的按位组合。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JSMethodInfo.DeclaringType">
      <summary>
              获取声明此方法的类型。
            </summary>
      <returns>
              <see langword="Type" /> 对象为声明此成员的类。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JSMethodInfo.MemberType">
      <summary>
              获取此方法的成员的类型。
               标识类型的类派生自 <see cref="T:System.Reflection.MemberInfo" /> ，此类派生。
            </summary>
      <returns>
              <see cref="F:System.Reflection.MemberTypes.Method" />, 因为此类派生自 <see cref="T:System.Reflection.MethodInfo" />。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JSMethodInfo.MethodHandle">
      <summary>
              获取此方法的内部元数据表示的句柄。
            </summary>
      <returns>
              此方法的内部元数据表示句柄。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JSMethodInfo.Name">
      <summary>
              获取此方法的名称。
            </summary>
      <returns>
              此方法的名称。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JSMethodInfo.ReflectedType">
      <summary>
              获取用于获取通过反射此实例的类对象。
            </summary>
      <returns>
              <see langword="Type" /> 用于获取此方法的对象。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JSMethodInfo.ReturnType">
      <summary>
              获取此方法的返回值的类型。
            </summary>
      <returns>
              此方法的返回值的类型。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JSMethodInfo.ReturnTypeCustomAttributes">
      <summary>
              获取此方法的返回值的类型的自定义特性。
            </summary>
      <returns>
              此方法的返回值的类型的自定义特性。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JSVariableField.Attributes">
      <summary>
              获取与此字段相关联的属性。
            </summary>
      <returns>
              枚举值的按位组合。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JSVariableField.DeclaringType">
      <summary>
              获取声明此字段的类型。
            </summary>
      <returns>
              <see langword="Type" /> 对象为声明此成员的类。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JSVariableField.FieldType">
      <summary>
              获取此字段的类型。
            </summary>
      <returns>
              此字段的类型。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.JSVariableField.Name">
      <summary>
              获取此字段的名称。
            </summary>
      <returns>
              此字段的名称。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.ActiveXObject">
      <summary>
              获取或设置一个基于原型的对象定义的 <see cref="T:Microsoft.JScript.ActiveXObjectConstructor" /> 构造函数对象。
            </summary>
      <returns>
              一个 <see cref="T:Microsoft.JScript.ActiveXObjectConstructor" /> 对象。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.Array">
      <summary>
              获取或设置一个基于原型的对象定义的 <see cref="T:Microsoft.JScript.ArrayConstructor" /> 构造函数对象。
            </summary>
      <returns>
              一个 <see cref="T:Microsoft.JScript.ArrayConstructor" /> 对象。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.Boolean">
      <summary>
              获取或设置一个基于原型的对象定义的 <see cref="T:Microsoft.JScript.BooleanConstructor" /> 构造函数对象。
            </summary>
      <returns>
              一个 <see cref="T:Microsoft.JScript.BooleanConstructor" /> 对象。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.Date">
      <summary>
              获取或设置基于原型的对象，该对象由定义 <see cref="T:Microsoft.JScript.LenientDateConstructor" /> 构造函数对象。
            </summary>
      <returns>
              一个 <see cref="T:Microsoft.JScript.LenientDateConstructor" /> 对象。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.Enumerator">
      <summary>
              获取或设置一个基于原型的对象定义的 <see cref="T:Microsoft.JScript.EnumeratorConstructor" /> 构造函数对象。
            </summary>
      <returns>
              一个 <see cref="T:Microsoft.JScript.EnumeratorConstructor" /> 对象。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.Error">
      <summary>
              获取或设置一个基于原型的对象定义的 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 构造函数对象。
            </summary>
      <returns>
              一个 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.EvalError">
      <summary>
              获取或设置一个基于原型的对象定义的 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 构造函数对象，并且被初始化为 <see cref="F:Microsoft.JScript.ErrorType.EvalError" />。
            </summary>
      <returns>
              一个 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.Function">
      <summary>
              获取或设置基于原型的对象，该对象由定义 <see cref="T:Microsoft.JScript.FunctionConstructor" /> 构造函数对象。
            </summary>
      <returns>
              一个 <see cref="T:Microsoft.JScript.FunctionConstructor" /> 对象。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.Math">
      <summary>
              获取或设置 <see cref="T:Microsoft.JScript.LenientMathObject" /> 对象。
            </summary>
      <returns>
              一个 <see cref="T:Microsoft.JScript.LenientMathObject" /> 对象。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.Number">
      <summary>
              获取或设置基于原型的对象，该对象由定义 <see cref="T:Microsoft.JScript.NumberConstructor" /> 构造函数对象。
            </summary>
      <returns>
              一个 <see cref="T:Microsoft.JScript.NumberConstructor" /> 对象。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.Object">
      <summary>
              获取或设置一个基于原型的对象定义的 <see cref="T:Microsoft.JScript.ObjectConstructor" /> 构造函数对象。
            </summary>
      <returns>
              一个 <see cref="T:Microsoft.JScript.ObjectConstructor" /> 对象。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.RangeError">
      <summary>
              获取或设置一个基于原型的对象定义的 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 构造函数对象，并且被初始化为 <see cref="F:Microsoft.JScript.ErrorType.RangeError" />。
            </summary>
      <returns>
              一个 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.ReferenceError">
      <summary>
              获取或设置一个基于原型的对象定义的 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 构造函数对象，并且被初始化为 <see cref="F:Microsoft.JScript.ErrorType.ReferenceError" />。
            </summary>
      <returns>
              一个 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.RegExp">
      <summary>
              获取或设置基于原型的对象，该对象由定义 <see cref="T:Microsoft.JScript.RegExpConstructor" /> 构造函数对象。
            </summary>
      <returns>
              一个 <see cref="T:Microsoft.JScript.RegExpConstructor" /> 对象。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.String">
      <summary>
              获取或设置基于原型的对象，该对象由定义 <see cref="T:Microsoft.JScript.LenientStringConstructor" /> 构造函数对象。
            </summary>
      <returns>
              一个 <see cref="T:Microsoft.JScript.LenientStringConstructor" /> 对象。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.SyntaxError">
      <summary>
              获取或设置一个基于原型的对象定义的 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 构造函数对象，并且被初始化为 <see cref="F:Microsoft.JScript.ErrorType.SyntaxError" />。
            </summary>
      <returns>
              一个 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.TypeError">
      <summary>
              获取或设置一个基于原型的对象定义的 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 构造函数对象，并且被初始化为 <see cref="F:Microsoft.JScript.ErrorType.TypeError" />。
            </summary>
      <returns>
              一个 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.URIError">
      <summary>
              获取或设置一个基于原型的对象定义的 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 构造函数对象，并且被初始化为 <see cref="F:Microsoft.JScript.ErrorType.URIError" />。
            </summary>
      <returns>
              一个 <see cref="T:Microsoft.JScript.ErrorConstructor" /> 对象。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.VBArray">
      <summary>
              获取或设置基于原型的对象，该对象由定义 <see cref="T:Microsoft.JScript.VBArrayConstructor" /> 构造函数对象。
            </summary>
      <returns>
              一个 <see cref="T:Microsoft.JScript.VBArrayConstructor" /> 对象。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.NotRecommended.IsError">
      <summary>
              获取一个值，该值指示是否使用方法或字段，不建议为一个错误。
            </summary>
      <returns>
              在所有情况下均为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.NotRecommended.Message">
      <summary>
              获取的方法或不建议使用的字段的名称。
            </summary>
      <returns>
              建议不要使用字段的方法的名称。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.NumberPrototype.constructor">
      <summary>
              获取对基于原型的对象，该对象正在使用此原型的引用。
            </summary>
      <returns>
              对基于原型的对象的引用。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.ObjectPrototype.constructor">
      <summary>
              获取对基于原型的对象，该对象正在使用此原型的引用。
            </summary>
      <returns>
              对基于原型的对象的引用。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.RegExpConstructor.index">
      <summary>
              获取前移索引之前的最后一个成功的匹配索引。
            </summary>
      <returns>
              如果有的话的最后一个成功匹配的索引。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.RegExpConstructor.input">
      <summary>
              获取或设置正则表达式搜索的输入的字符串。
            </summary>
      <returns>
              正则表达式搜索输入的字符串。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.RegExpConstructor.lastIndex">
      <summary>
              获取前移索引后的最后一个成功的匹配索引。
            </summary>
      <returns>
              如果有的话的最后一个成功匹配的索引。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.RegExpConstructor.lastMatch">
      <summary>
              获取最后一个成功匹配的字符串表示。
            </summary>
      <returns>
              如果有的话的最后一个成功匹配的字符串表示形式。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.RegExpConstructor.lastParen">
      <summary>
              获取最后一个 <see cref="T:System.Text.RegularExpressions.Group" /> 从 <see cref="P:System.Text.RegularExpressions.Match.Groups" /> 的最后一个匹配项。
            </summary>
      <returns>
              最后一个组 （如果有的话） 的字符串表示形式。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.RegExpConstructor.leftContext">
      <summary>
              获取输入开始日期和最后一个成功匹配的开始之间的输入字符串中子字符串。
            </summary>
      <returns>
              如果没有一个输入字符串中子字符串。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.RegExpConstructor.rightContext">
      <summary>
              获取最后一个成功匹配的开始日期和输入结尾之间的输入字符串中的子字符串。
            </summary>
      <returns>
              如果没有一个输入字符串中子字符串。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.RegExpObject.global">
      <summary>
              获取一个值，该值指示是否使用了全局标志来执行搜索 (/g)，匹配所有匹配项。
            </summary>
      <returns>
              <see langword="true" /> 如果执行全局搜索;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.RegExpObject.ignoreCase">
      <summary>
              获取一个值，该值指示是否使用不区分大小写标志来执行搜索 (/i)。
            </summary>
      <returns>
              <see langword="true" /> 如果执行不区分大小写的搜索;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.RegExpObject.lastIndex">
      <summary>
              获取或设置最后一个成功匹配的索引。
            </summary>
      <returns>
              如果有的话的最后一个成功匹配的索引。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.RegExpObject.multiline">
      <summary>
              获取一个值，该值指示是否有多行的标志来执行搜索 (/m)。
            </summary>
      <returns>
              <see langword="true" /> 如果执行搜索，在多行模式下;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.RegExpObject.source">
      <summary>
              获取由此对象表示的正则表达式模式。
            </summary>
      <returns>
              此对象表示正则表达式模式。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.RegExpPrototype.constructor">
      <summary>
              获取对基于原型的对象，该对象正在使用此原型的引用。
            </summary>
      <returns>
              对基于原型的对象的引用。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.ScriptFunction.length">
      <summary>
              获取或设置中的元素数目 <paramref name="args" /> 参数 <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" /> 方法。
            </summary>
      <returns>
              中的元素数目 <paramref name="args" /> 参数 <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" /> 方法。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.ScriptFunction.prototype">
      <summary>
              获取或设置此构造函数的原型对象。
            </summary>
      <returns>
              此构造函数的的原型对象。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.ScriptObject.Item(System.Double)">
      <summary>
              获取或设置属于脚本对象，该对象指定由指定 <see cref="T:System.Double" /> 索引值。
            </summary>
      <param name="index">
                成员的索引。
              </param>
      <returns>
              位于该成员的值 <paramref name="index" />。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.ScriptObject.Item(System.Int32)">
      <summary>
              获取或设置属于脚本对象，该对象指定由指定 <see cref="T:System.Int32" /> 索引值。
            </summary>
      <param name="index">
                成员的索引。
              </param>
      <returns>
              位于该成员的值 <paramref name="index" />。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.ScriptObject.Item(System.Object[])">
      <summary>
              获取或设置由指定的名称，该脚本对象的成员 <see cref="T:System.Double" /> 索引值，或 <see cref="T:System.Int32" /> 索引值。
            </summary>
      <param name="pars">
                名称或成员的索引。
              </param>
      <returns>
              中指定的成员的值 <paramref name="pars" />。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.ScriptObject.Item(System.String)">
      <summary>
              获取或设置由指定的名称指定该脚本对象的成员。
            </summary>
      <param name="name">
                成员名。
              </param>
      <returns>
              名为成员的值 <paramref name="name" />。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.ScriptObject.UnderlyingSystemType">
      <summary>
              获取脚本对象的类型。
            </summary>
      <returns>
              该脚本对象的类型。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.SimpleHashtable.Item(System.Object)">
      <summary>
              获取或设置具有指定的键的项。
            </summary>
      <param name="key">
                要获取或设置的项的键。
              </param>
      <returns>
              具有指定的项的值 <paramref name="key" />。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.StringObject.length">
      <summary>
              获取字符串中的字符数。
            </summary>
      <returns>
              在字符串中的字符数。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.StringPrototype.constructor">
      <summary>
              获取对基于原型的对象，该对象正在使用此原型的引用。
            </summary>
      <returns>
              对基于原型的对象的引用。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.TypedArray.UnderlyingSystemType">
      <summary>
              获取的类型 <see cref="T:Microsoft.JScript.TypedArray" /> 对象。
            </summary>
      <returns>
              一种 <see cref="T:Microsoft.JScript.TypedArray" /> 对象。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.VBArrayPrototype.constructor">
      <summary>
              获取对基于原型的对象，该对象正在使用此原型的引用。
            </summary>
      <returns>
              对基于原型的对象的引用。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.AppDomain">
      <summary>
              获取或设置应用程序域。
            </summary>
      <returns>
              应用程序域中。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.ApplicationBase">
      <summary>
              获取或设置该应用程序基。
            </summary>
      <returns>
              应用程序基中。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.Assembly">
      <summary>
              获取生成的 Run 方法的运行程序集的引用。
            </summary>
      <returns>
              对当前正在运行的程序集的引用。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.Evidence">
      <summary>
              提供用于验证当前对象的标识的证据。
            </summary>
      <returns>
              返回对 Evidence 对象的引用。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.GenerateDebugInfo">
      <summary>
              设置或获取一个布尔值，表示调用编译方法时，脚本引擎是否生成调试信息。
            </summary>
      <returns>
              <see langword="true" /> 生成调试信息;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.IsCompiled">
      <summary>
              获取或设置一个值，指示源是否被编译。
            </summary>
      <returns>
              <see langword="true" /> 如果源被编译;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.IsDirty">
      <summary>
              获取或设置一个值，该值指示该项的当前内存中表示是否从保留的表示形式不同。
            </summary>
      <returns>
              <see langword="true" /> 如果内存中表示不同于保留的表示形式;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.IsRunning">
      <summary>
              获取一个布尔值，则引擎当前是否处于运行模式下将进行相应报告。
            </summary>
      <returns>
              <see langword="true" /> 如果引擎处于运行模式下;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.Items">
      <summary>
              获取 IJSVsaItem 对象，它表示添加到引擎的所有项的集合。
            </summary>
      <returns>
              项的集合。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.Language">
      <summary>
              获取由该引擎支持的编程语言的名称。
            </summary>
      <returns>
              编程语言的名称。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.LCID">
      <summary>
              获取或设置在报告异常消息时所使用的地理区域设置和语言。
            </summary>
      <returns>
              一个整数值表示内的异常的消息都要报告的区域设置。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.Name">
      <summary>
              设置或获取该引擎的显示名称。
            </summary>
      <returns>
              引擎的名称。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.RootMoniker">
      <summary>
              设置或获取脚本引擎的根名字对象。
            </summary>
      <returns>
              引擎的根名字对象。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.RootNamespace">
      <summary>
              设置或获取由引擎使用的根命名空间。
            </summary>
      <returns>
              引擎的命名空间。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.Site">
      <summary>
              设置或获取的宿主实现 IJSVsaSite 对象，该引擎用于与主机通信。
            </summary>
      <returns>
              宿主实现的对象。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.Version">
      <summary>
              获取由引擎使用，在窗体支持的语言编译器的当前版本 Major.Minor.Revision.Build。
            </summary>
      <returns>
              最新版本。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaSite.Assembly">
      <summary>
              此站点的的程序集。
            </summary>
      <returns>
              此站点的的程序集。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaSite.DebugInfo">
      <summary>
              调试此站点的信息。
            </summary>
      <returns>
              调试此站点的信息。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaCodeItem.CodeDOM">
      <summary>
              获取在代码项中表示的代码文档对象模型 (CodeDOM)。
            </summary>
      <returns>
              返回代码项的 CodeDOM。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaCodeItem.SourceText">
      <summary>
              设置或获取指定的代码项的文本，包括自动生成的代码（如果有）。
            </summary>
      <returns>
              返回代码项的源文本。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.Assembly">
      <summary>
              获取生成的 Run 方法的运行程序集的引用。
            </summary>
      <returns>
              对当前正在运行的程序集的引用。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.Evidence">
      <summary>
              提供用于验证当前对象的标识的证据。
            </summary>
      <returns>
              返回对 Evidence 对象的引用。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.GenerateDebugInfo">
      <summary>
              设置或获取一个布尔值，表示调用编译方法时，脚本引擎是否生成调试信息。
            </summary>
      <returns>
              <see langword="true" /> 生成调试信息;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.IsCompiled">
      <summary>
              获取或设置一个值，指示源是否被编译。
            </summary>
      <returns>
              <see langword="true" /> 如果源被编译;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.IsDirty">
      <summary>
              获取或设置一个值，该值指示该项的当前内存中表示是否从保留的表示形式不同。
            </summary>
      <returns>
              <see langword="true" /> 如果内存中表示不同于保留的表示形式;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.IsRunning">
      <summary>
              获取一个布尔值，该值报告脚本引擎当前是否处于运行模式。
            </summary>
      <returns>
              <see langword="true" /> 如果引擎处于运行模式下;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.Items">
      <summary>
              获取 IJSVsaItem 对象，它表示添加到脚本引擎的所有项的集合。
            </summary>
      <returns>
              项的集合。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.Language">
      <summary>
              获取脚本引擎支持的编程语言的名称。
            </summary>
      <returns>
              编程语言的名称。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.LCID">
      <summary>
              获取或设置在报告异常消息时所使用的地理区域设置和语言。
            </summary>
      <returns>
              一个整数值表示内的异常的消息都要报告的区域设置。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.Name">
      <summary>
              设置或获取脚本引擎的显示名称。
            </summary>
      <returns>
              引擎的名称。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.RootMoniker">
      <summary>
              设置或获取脚本引擎的根名字对象。
            </summary>
      <returns>
              引擎的根名字对象。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.RootNamespace">
      <summary>
              设置或获取脚本引擎使用的根命名空间。
            </summary>
      <returns>
              引擎的命名空间。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.Site">
      <summary>
              设置或获取脚本引擎用于与主机通信的主机实现 IJSVsaSite 对象。
            </summary>
      <returns>
              宿主实现的对象。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.Version">
      <summary>
              获取脚本引擎支持的语言编译器的当前版本，以 Major.Minor.Revision.Build 形式表示。
            </summary>
      <returns>
              最新版本。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaError.Description">
      <summary>
              获取对错误的简短说明，在某些情况下会返回对源代码中引起错误的标记的引用。
            </summary>
      <returns>
              返回错误的字符串说明。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaError.EndColumn">
      <summary>
              获取引发错误的源文本的结束列号（如果可用）。
            </summary>
      <returns>
              返回引发错误的源文本的结束列号（如果可用）。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaError.Line">
      <summary>
              获取发生错误的行号。
            </summary>
      <returns>
              返回发生错误的行号。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaError.LineText">
      <summary>
              从引起错误的行获取源代码文本。
            </summary>
      <returns>
              从引起错误的行返回字符串源代码。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaError.Number">
      <summary>
              获取唯一标识错误的编号。
            </summary>
      <returns>
              返回唯一标识错误的编号。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaError.Severity">
      <summary>
              设置错误严重级别。
            </summary>
      <returns>
              返回表示错误严重级别的整数 (0-4)。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaError.SourceItem">
      <summary>
              获取对 IVsaItem 生成错误的对象。
            </summary>
      <returns>
              返回对生成错误的对象的引用。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaError.SourceMoniker">
      <summary>
              获取包含错误的源项的完全限定名，采用脚本引擎可以识别的格式。
            </summary>
      <returns>
              返回包含错误的源项的完全限定名。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaError.StartColumn">
      <summary>
              获取引发错误的源文本的起始列号（如果可用）。
            </summary>
      <returns>
              返回引发错误的源文本的起始列号（如果可用）。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaGlobalItem.ExposeMembers">
      <summary>
              设置一个值，该值指示是否应当使全局对象的成员对脚本引擎可用。
               [目前尚不支持。]
            </summary>
      <returns>
              如果全局对象的公共成员无需限定即可供脚本引擎使用，就如同它们是全局命名空间的一部分，则返回 TRUE。
               如果必须用对象名称限定全局对象的成员，则返回 FALSE。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaGlobalItem.TypeString">
      <summary>
              获取或设置全局项的类型。
            </summary>
      <returns>
              返回全局项的项类型。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaItem.IsDirty">
      <summary>
              返回一个值，它指示该项的当前内存中表示形式是否与保留的表示形式不同。
            </summary>
      <returns>
              如果该项已更新并因而需要保存，则返回 <see langword="true" />；如果该项未更新，则返回 <see langword="false" />。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaItem.ItemType">
      <summary>
              获取指定对象的类型（如 <see cref="M:Microsoft.JScript.Vsa.IJSVsaItems.CreateItem(System.String,Microsoft.JScript.Vsa.JSVsaItemType,Microsoft.JScript.Vsa.JSVsaItemFlag)" /> 方法所确定的那样）。
            </summary>
      <returns>
              <see cref="T:Microsoft.JScript.Vsa.JSVsaItemType" /> 枚举所枚举的类型。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaItem.Name">
      <summary>
              获取或设置项的名称。
            </summary>
      <returns>
              返回项的字符串名称。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaItems.Count">
      <summary>
              获取指定集合的项数。
            </summary>
      <returns>
              返回表示集合中的项数的整数值。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaItems.Item(System.Int32)">
      <summary>
              通过项的索引值从集合中获取项。
            </summary>
      <param name="index">
                可检索项的索引（从 0 开始）。
              </param>
      <returns>
              返回位于指定索引处的项。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaItems.Item(System.String)">
      <summary>
              通过项的名称从集合中获取项。
            </summary>
      <param name="name">
                要从集合中检索的项的名称。
              </param>
      <returns>
              返回通过名称指定的项。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaReferenceItem.AssemblyName">
      <summary>
              获取或设置被引用程序集的名称。
            </summary>
      <returns>
              返回被引用程序集的字符串名称。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.JSVsaException.ErrorCode">
      <summary>
              此成员支持 .NET Framework 结构，不能在代码中直接使用。
            </summary>
      <returns>
              一个 <see cref="T:Microsoft.JScript.Vsa.JSVsaError" /> 值，该值描述异常的原因。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.Vsa.VsaEngine.LenientGlobalObject">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
    </member>
    <member name="P:Microsoft.JScript.VsaItem.IsDirty">
      <summary>
              获取或设置一个值，该值指示该项的当前内存中表示是否从保留的表示形式不同。
            </summary>
      <returns>
              <see langword="true" /> 如果内存中表示不同于保留的表示形式;否则为 <see langword="false" />。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.VsaItem.ItemType">
      <summary>
              获取项的类型。
            </summary>
      <returns>
              枚举值之一。
               值指示项的类型。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.VsaItem.Name">
      <summary>
              获取或设置项的名称。
            </summary>
      <returns>
              项的字符串文字名称。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.VsaItems.Count">
      <summary>
              获取集合中的项数。
            </summary>
      <returns>
              集合中项的数目。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.VsaItems.Item(System.Int32)">
      <summary>
              从指定的索引值指定集合中获取的项。
            </summary>
      <param name="index">
                要获取的项的索引。
              </param>
      <returns>
              处的项 <paramref name="index" />。
            </returns>
    </member>
    <member name="P:Microsoft.JScript.VsaItems.Item(System.String)">
      <summary>
              获取由指定的名称指定集合中的项。
            </summary>
      <param name="itemName">
                要获取的项的名称。
              </param>
      <returns>
              项名为 <paramref name="itemName" />。
            </returns>
    </member>
    <member name="T:Microsoft.JScript.ActivationObject">
      <summary>
              表示正在部分在作用域层次结构中的对象。
               此类包含用于解析范围以及用于获取成员的信息的方法。
               它属于编译和运行时状态类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.ActiveXObjectConstructor">
      <summary>
              表示基于原型的对象定义的构造函数。
               此类所属的内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.ArgumentsObject">
      <summary>
              表示用于调用的函数的信息。
               这包括函数、 调用方、 参数以及有关堆栈帧的信息。
               此类所属的对象和函数的类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.ArrayConstructor">
      <summary>
              表示基于原型的对象定义的构造函数。
               此类所属的内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.ArrayLiteral">
      <summary>
              此类由 JScript 分析器用于表示数组文本。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.ArrayObject">
      <summary>
              表示一个数组对象。
               此类所属的内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.ArrayPrototype">
      <summary>
              提供用于静态方法和属性 <see cref="T:Microsoft.JScript.ArrayObject" /> 对象。
               通过传入到正在请求对方法的访问的对象引用来调用此类的所有方法。
               此类所属的内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.ArrayWrapper">
      <summary>
              将数组创建过程的 JScript 包装 <see cref="T:Microsoft.JScript.ArrayObject" />。
               此类包装.NET Framework <see cref="T:System.Array" /> 对象或 JScript <see cref="T:Microsoft.JScript.ArrayObject" /> 对象。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.AssemblyCustomAttributeList">
      <summary>
              此类由 JScript 分析器用于存储分配给程序集的属性。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.AST">
      <summary>
              表示用于分析 JScript 代码的抽象语法树。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.ASTList">
      <summary>
              维护的列表 <see cref="T:Microsoft.JScript.AST" /> 元素。
               此类所属的抽象语法树类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.BinaryOp">
      <summary>
              表示执行两个操作数的操作，如类的基类 <see cref="T:Microsoft.JScript.Plus" />, ，<see cref="T:Microsoft.JScript.Equality" />, ，和 <see cref="T:Microsoft.JScript.Relational" />。
               此类所属的抽象语法树类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Binding">
      <summary>
              表示对类成员，可调用的表达式或变量名的引用。
               此类尝试在编译时解析为正确的值的引用。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.BitwiseBinary">
      <summary>
              执行按位二元运算。
               此类所属的抽象语法树类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Block">
      <summary>
              表示在 JScript 中的块。
               此类主要由 <see cref="T:Microsoft.JScript.JSParser" /> 创建 <see cref="T:Microsoft.JScript.Block" /> 对象在分析代码时。
               此类所属的抽象语法树类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.BlockScope">
      <summary>
              表示程序正在部分在作用域层次结构中和可以到全局作用域堆栈上推送的代码块的作用域。
               例如，此类可以表示的作用域 <see langword="try" /> 块。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.BooleanConstructor">
      <summary>
              表示基于原型的对象定义的构造函数。
               此类所属的内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.BooleanObject">
      <summary>
              表示一个布尔值的对象。
               此类所属的内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.BooleanPrototype">
      <summary>
              提供用于静态方法和属性 <see cref="T:Microsoft.JScript.BooleanObject" /> 对象。
               通过传入到正在请求对方法的访问的对象引用来调用此类的所有方法。
               此类所属的内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.BreakOutOfFinally">
      <summary>
              外出时的中断代码执行时表示异常状态 <see langword="finally" /> 块。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Closure">
      <summary>
              表示闭包函数。
               此类所属的对象和函数的类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.CmdLineError">
      <summary>
              指定在运行命令行编译器 jsc.exe 时出现的错误。
               此枚举用于创建 <see cref="T:Microsoft.JScript.CmdLineException" /> 对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.NoError">
      <summary>
              没有错误。
               这是默认值。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.AssemblyNotFound">
      <summary>
              找不到引用的程序集"{0}"。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.CannotCreateEngine">
      <summary>
              无法创建 JScript 引擎。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.CompilerConstant">
      <summary>
              不能更改编译器常量"{0}"的值。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.DuplicateFileAsSourceAndAssembly">
      <summary>
              重复的文件名:"{0}"被列为源文件和一个导入的程序集。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.DuplicateResourceFile">
      <summary>
              资源文件"{0}"引用不止一次。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.DuplicateResourceName">
      <summary>
              资源名称"{0}"不是唯一的。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.DuplicateSourceFile">
      <summary>
              重复的文件名:"{0}"被列为源文件超过一次。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.ErrorSavingCompiledState">
      <summary>
              错误保存编译状态: {0}。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.IncompatibleTargets">
      <summary>
              值 <see cref="P:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable" /> 属性不符合目标类型"{0}"。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidAssembly">
      <summary>
              "{0}"不是有效的程序集。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidCharacters">
      <summary>
              文件名称"{0}"包含无效字符 （不支持通配符）。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidCodePage">
      <summary>
              代码页"{0}"是无效或未安装。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidDefinition">
      <summary>
              定义"{0}"必须分配一个布尔值或整数值。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidForCompilerOptions">
      <summary>
              "{0}"不允许在 CompilerOptions 字段中。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidLocaleID">
      <summary>
              区域设置 ID"{0}"是无效或未安装。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidPlatform">
      <summary>
              平台"{0}"无效。
               指定 x86、 Itanium、 x64 或 anycpu。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidTarget">
      <summary>
              目标"{0}"无效。
               指定 exe 或库。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidSourceFile">
      <summary>
              "{0}"不是有效的源代码文件。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidVersion">
      <summary>
              "{0}"不是有效的版本字符串。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidWarningLevel">
      <summary>
              使用选项"{0}"指定了无效的警告级别。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.ManagedResourceNotFound">
      <summary>
              找不到托管的资源"{0}"。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.MissingDefineArgument">
      <summary>
              缺少标识符的定义: 命令行选项。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.MissingExtension">
      <summary>
              缺少"{0}"的文件扩展名。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.MissingLibArgument">
      <summary>
              缺少的文件规范的 lib: 命令行选项。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.MissingReference">
      <summary>
              缺少参数列表"{0}"中的引用。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.MissingVersionInfo">
      <summary>
              -Assembly.version 选项中缺少的版本信息。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.MultipleOutputNames">
      <summary>
              指定多个输出文件名称。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.MultipleTargets">
      <summary>
              指定多个目标。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.MultipleWin32Resources">
      <summary>
              不能指定多个 Win32 资源文件。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.NestedResponseFiles">
      <summary>
              无法处理嵌套的响应文件。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.NoCodePage">
      <summary>
              指定了选项"{0}"，没有代码页。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.NoFileName">
      <summary>
              未使用选项"{0}"指定的文件名称。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.NoInputSourcesSpecified">
      <summary>
              未指定的输入的源。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.NoLocaleID">
      <summary>
              使用选项"{0}"不指定任何区域设置 ID。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.NoWarningLevel">
      <summary>
              未使用选项"{0}"指定警告等级。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.ResourceNotFound">
      <summary>
              找不到"{0}"的 Win32 资源。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.SourceFileTooBig">
      <summary>
              源文件太大。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.SourceNotFound">
      <summary>
              找不到源文件"{0}"。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.UnknownOption">
      <summary>
              未知的选项"{0}"。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.Unspecified">
      <summary>
              未指定的错误。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.LAST">
      <summary>
              一个包含相同的值的最后一个 （最高） 的已分配的枚举值的占位符枚举成员。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.CmdLineException">
      <summary>
              表示在运行命令行编译器 jsc.exe 时出现的错误。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.CmdLineOptionParser">
      <summary>
              确定是否指定为命令行编译器 jsc.exe 选项格式正确，以及读取参数，如果有是否包括在内。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.COMCharStream">
      <summary>
              表示一个流，其将数据发送到 <see cref="T:Microsoft.JScript.IMessageReceiver" />。
               数据存储在缓冲区中，直到上的数据刷新或关闭流。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.COMFieldInfo">
      <summary>
              启用 JScript 与外部的 COM 字段进行通信。
               外部 COM 实现使用此类向 JScript 公开其对象，原因是 JScript 需要托管的 <see cref="T:System.Reflection.MemberInfo" /> 以便绑定到外部对象。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.COMMemberInfo">
      <summary>
              定义启用 JScript 与外部 COM 成员进行通信的方法。
               外部 COM 实现使用此接口来公开其对象与 JScript，因为 JScript 需要托管 <see cref="T:System.Reflection.MemberInfo" /> 要绑定到外部对象。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.COMMethodInfo">
      <summary>
              使 JScript 能够与外部 COM 方法通信。
               外部 COM 实现使用此类向 JScript 公开其对象，原因是 JScript 需要托管的 <see cref="T:System.Reflection.MemberInfo" /> 以便绑定到外部对象。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.COMPropertyInfo">
      <summary>
              启用 JScript 与外部 COM 属性进行通信。
               外部 COM 实现使用此类向 JScript 公开其对象，原因是 JScript 需要托管的 <see cref="T:System.Reflection.MemberInfo" /> 以便绑定到外部对象。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Context">
      <summary>
              表示 JScript 源代码。
               此类所属的编译和运行时状态类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.ContinueOutOfFinally">
      <summary>
              表示异常状态外，继续执行代码时 <see langword="finally" /> 块。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Convert">
      <summary>
              将数据从一种类型转换为另一个。
               这是一个实用工具类。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.DateConstructor">
      <summary>
              表示基于原型的对象定义的构造函数。
               此类所属的内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.DateObject">
      <summary>
              表示一个 date 对象。
               此类所属的内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.DatePrototype">
      <summary>
              提供用于静态方法和属性 <see cref="T:Microsoft.JScript.DateObject" /> 对象。
               通过传入到正在请求对方法的访问的对象引用来调用此类的所有方法。
               此类所属的内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.DebugBreak">
      <summary>
              此类由 JScript 分析器用于表示调试器中的断点。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.DebugConvert">
      <summary>
              将数据从一种类型转换为另一个。
               包含方法将值转换为 <see cref="T:System.String" /> 对象，以便它们可以显示由调试器。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.DocumentContext">
      <summary>
              表示在 JScript 语言中编写的源代码文件。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.DynamicFieldInfo">
      <summary>
              表示字段的信息。
               此类用于 expando 类和脚本数组的字段返回给调试器。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Empty">
      <summary>
              表示未实例化的变量的值。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.EndOfFile">
      <summary>
              此类由 JScript 分析器用于表示到达作为异常的文件的结尾。
               代码可能会引发此错误，来停止分析器。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.EnumeratorConstructor">
      <summary>
              表示基于原型的对象定义的构造函数。
               此类所属的内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.EnumeratorObject">
      <summary>
              表示一个枚举器对象。
               此类所属的内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.EnumeratorPrototype">
      <summary>
              提供用于静态方法和属性 <see cref="T:Microsoft.JScript.EnumeratorObject" /> 对象。
               通过传入到正在请求对方法的访问的对象引用来调用此类的所有方法。
               此类所属的内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Equality">
      <summary>
              执行比较操作。
               此类所属的抽象语法树类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.ErrorConstructor">
      <summary>
              表示基于原型的对象定义的构造函数。
               此类所属的内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.ErrorObject">
      <summary>
              表示一个 error 对象。
               此类所属的内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.ErrorPrototype">
      <summary>
              提供用于静态方法和属性 <see cref="T:Microsoft.JScript.ErrorObject" /> 对象。
               通过传入到正在请求对方法的访问的对象引用来调用此类的所有方法。
               此类所属的内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.ErrorType">
      <summary>
              指定 JScript 错误类型。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.ErrorType.OtherError">
      <summary>
              以外的其他错误类型的其他任何错误。
               这是默认值。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.ErrorType.EvalError">
      <summary>
              Eval 方法 (Visual Studio-JScript) 错误。
               对应于 <see cref="T:Microsoft.JScript.EvalErrorObject" /> 对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.ErrorType.RangeError">
      <summary>
              范围错误。
               对应于 <see cref="T:Microsoft.JScript.RangeErrorObject" /> 对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.ErrorType.ReferenceError">
      <summary>
              引用错误。
               对应于 <see cref="T:Microsoft.JScript.ReferenceErrorObject" /> 对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.ErrorType.SyntaxError">
      <summary>
              出现语法错误。
               对应于 <see cref="T:Microsoft.JScript.SyntaxErrorObject" /> 对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.ErrorType.TypeError">
      <summary>
              类型错误。
               对应于 <see cref="T:Microsoft.JScript.TypeErrorObject" /> 对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.ErrorType.URIError">
      <summary>
              统一资源标识符 (URI) 时出错。
               对应于 <see cref="T:Microsoft.JScript.URIErrorObject" /> 对象。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Eval">
      <summary>
              JScript 代码的计算结果。
               此类所属的抽象语法树类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.EvalErrorObject">
      <summary>
              表示发生的错误时 <see langword="eval" /> 使用方法。
               有关详细信息，请参阅 eval 方法 (Visual Studio-JScript)。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Expando">
      <summary>
              指示类或方法是 expando 类或方法。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.FieldAccessor">
      <summary>
              表示字段访问器。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.ForIn">
      <summary>
              表示 JScript <see langword="for...in" /> 语句。
               此类所属的抽象语法树类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.FunctionConstructor">
      <summary>
              表示基于原型的对象定义的构造函数。
               此类所属的内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.FunctionDeclaration">
      <summary>
              表示一个函数声明。
               此类所属的抽象语法树类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.FunctionExpression">
      <summary>
              表示函数对象。
               此类所属的抽象语法树类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.FunctionObject">
      <summary>
              表示函数对象。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.FunctionPrototype">
      <summary>
              提供用于静态方法和属性 <see cref="T:Microsoft.JScript.FunctionObject" /> 对象。
               通过传入到正在请求对方法的访问的对象引用来调用此类的所有方法。
               此类所属的内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.FunctionWrapper">
      <summary>
              绑定到对象的函数成员。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.GlobalObject">
      <summary>
              将存储常量、 数据类型信息、 实用程序功能和对基于原型的对象的引用。
               此类所属的内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Globals">
      <summary>
              存储全局可用的所有类型的引用，并管理堆栈。
               此类所属的编译和运行时状态类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.GlobalScope">
      <summary>
              表示全局作用域。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Hide">
      <summary>
              指示方法或字段隐藏的方法或在基类中的字段。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.IActivationObject">
      <summary>
              定义用于解析范围的方法。
               此接口实现由参与到作用域层次结构中的所有对象。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.IAuthorServices">
      <summary>
              定义了用于创作 JScript 代码在编辑器中的服务。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.IColorizeText">
      <summary>
              定义服务着色文本并在编辑器中创作 JScript 代码时。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.IDebugConvert">
      <summary>
              定义一组实用工具方法，用于将数据从一种类型转换为另一个。
               包含方法将值转换为 <see cref="T:System.String" /> 对象，以便它们可以显示由调试器。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.IDebugConvert2">
      <summary>
              定义用于将数据从一种类型转换为另一个实用程序方法。
               包含方法将值转换为 <see cref="T:System.String" /> 对象，以便它们可以显示由调试器。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.IDebuggerObject">
      <summary>
              定义提供有关调试器对象信息的方法。
               此接口实现由所有 <see cref="T:System.Reflection.IReflect" /> 由调试器实现的对象。
               目前，此接口可用于仅用于标记这些对象在这种对脚本引擎。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.IDebugScriptScope">
      <summary>
              定义设置的方法 <see langword="this" /> 具有全局作用域相关联的值。
               使用 <see cref="T:Microsoft.JScript.Vsa.VsaEngine" />。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.IDebugType">
      <summary>
              定义提供有关调试器对象信息的方法。
               此接口由调试器对象，后者表示调试器目标中的类型实现。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.IDebugVsaScriptCodeItem">
      <summary>
              定义对表达式求值和分析字符串的方法。
               由一个对象，表示代码块中，通常实现此接口，它通常由调试器调用。
               此接口提供由 IActiveScript 主机所需的额外功能。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.IDefineEvent">
      <summary>
              定义所需的活动脚本宿主的额外功能。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.IEngine2">
      <summary>
              定义由 IActiveScript 主机所需的额外功能。
               实现的 <see cref="T:Microsoft.JScript.Vsa.VsaEngine" /> 引擎。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.IErrorHandler">
      <summary>
              定义用于处理在分析代码时出现的错误的方法。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.IMessageReceiver">
      <summary>
              定义从脚本引擎接收输出的方法。
               此接口作为回调对象，用于捕获的输出，否则会转到控制台。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.IMethodsCompletionInfo">
      <summary>
              这是一种标记接口，没有任何方法。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Import">
      <summary>
              在代码中使用的命名空间导入。
               此类所属的抽象语法树类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.In">
      <summary>
              确定对象是否包含在另一个对象。
               此类所属的抽象语法树类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.INeedEngine">
      <summary>
              定义 get 和 set 对脚本引擎的引用的方法。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Instanceof">
      <summary>
              确定是否可以将对象强制转换为另一个对象的类型。
               此类所属的抽象语法树类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.IObjectCompletionInfo">
      <summary>
              这是一种标记接口，没有任何方法。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.IParseText">
      <summary>
              定义用于分析的文本在编辑器中创作 JScript 代码时的方法。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.IRedirectOutput">
      <summary>
              否则会转到控制台该捕获输出定义的方法。
               此接口由实现 <see cref="T:Microsoft.JScript.Vsa.VsaEngine" />。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.ISite2">
      <summary>
              定义使用的方法， <see cref="T:Microsoft.JScript.Vsa.VsaEngine" /> 来进行名称解析。
               提供程序 IActiveScript 宿主所需的额外功能。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.ITokenColorInfo">
      <summary>
              定义用于着色的代码的特定单元属性。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.ITokenEnumerator">
      <summary>
              定义用于循环访问集合的方法 <see cref="T:Microsoft.JScript.ITokenColorInfo" /> 对象。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.IVsaFullErrorInfo">
      <summary>
              定义属性以获取有关错误的信息。
               此接口提供由 IActiveScript 主机所需的额外功能。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.IVsaScriptCodeItem">
      <summary>
              定义由 IActiveScript 主机所需的额外功能。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.IVsaScriptScope">
      <summary>
              定义用于解析范围的方法。
               全局作用域对象 <see cref="T:Microsoft.JScript.Vsa.VsaEngine" /> 实现此接口。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.IWrappedMember">
      <summary>
              定义用于访问的成员定义的对象的方法。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.JSAuthor">
      <summary>
              提供了用于创作 JScript 代码在编辑器中的服务。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.JSBuiltin">
      <summary>
              指定的内置的 JScript 函数。
               这些函数对应于内部 JScript 对象的静态方法。
               此枚举的成员用于创建 <see cref="T:Microsoft.JScript.JSFunctionAttribute" /> 对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.None">
      <summary>
              不到方法。
               这是默认值。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_concat">
      <summary>
              静态 <see cref="M:Microsoft.JScript.ArrayPrototype.concat(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object[])" /> 方法 <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_join">
      <summary>
              静态 <see cref="M:Microsoft.JScript.ArrayPrototype.join(System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_pop">
      <summary>
              静态 <see cref="M:Microsoft.JScript.ArrayPrototype.pop(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_push">
      <summary>
              静态 <see cref="M:Microsoft.JScript.ArrayPrototype.push(System.Object,System.Object[])" /> 方法 <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_reverse">
      <summary>
              静态 <see cref="M:Microsoft.JScript.ArrayPrototype.reverse(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_shift">
      <summary>
              静态 <see cref="M:Microsoft.JScript.ArrayPrototype.shift(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_slice">
      <summary>
              静态 <see cref="M:Microsoft.JScript.ArrayPrototype.slice(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Double,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_sort">
      <summary>
              静态 <see cref="M:Microsoft.JScript.ArrayPrototype.sort(System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_splice">
      <summary>
              静态 <see cref="M:Microsoft.JScript.ArrayPrototype.splice(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Double,System.Double,System.Object[])" /> 方法 <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_toLocaleString">
      <summary>
              静态 <see cref="M:Microsoft.JScript.ArrayPrototype.toLocaleString(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_toString">
      <summary>
              静态 <see cref="M:Microsoft.JScript.ArrayPrototype.toString(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_unshift">
      <summary>
              静态 <see cref="M:Microsoft.JScript.ArrayPrototype.unshift(System.Object,System.Object[])" /> 方法 <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Boolean_toString">
      <summary>
              静态 <see cref="M:Microsoft.JScript.BooleanPrototype.toString(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.BooleanPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Boolean_valueOf">
      <summary>
              静态 <see cref="M:Microsoft.JScript.BooleanPrototype.valueOf(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.BooleanPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getDate">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.getDate(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getDay">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.getDay(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getFullYear">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.getFullYear(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getHours">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.getHours(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getMilliseconds">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.getMilliseconds(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getMinutes">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.getMinutes(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getMonth">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.getMonth(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getSeconds">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.getSeconds(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getTime">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.getTime(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getTimezoneOffset">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.getTimezoneOffset(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getUTCDate">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.getUTCDate(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getUTCDay">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.getUTCDay(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getUTCFullYear">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.getUTCFullYear(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getUTCHours">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.getUTCHours(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getUTCMilliseconds">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.getUTCMilliseconds(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getUTCMinutes">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.getUTCMinutes(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getUTCMonth">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.getUTCMonth(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getUTCSeconds">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.getUTCSeconds(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getVarDate">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.getVarDate(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getYear">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.getYear(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_parse">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DateConstructor.parse(System.String)" /> 方法 <see cref="T:Microsoft.JScript.DateConstructor" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setDate">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.setDate(System.Object,System.Double)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setFullYear">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.setFullYear(System.Object,System.Double,System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setHours">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.setHours(System.Object,System.Double,System.Object,System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setMinutes">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.setMinutes(System.Object,System.Double,System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setMilliseconds">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.setMilliseconds(System.Object,System.Double)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setMonth">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.setMonth(System.Object,System.Double,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setSeconds">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.setSeconds(System.Object,System.Double,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setTime">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.setTime(System.Object,System.Double)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setUTCDate">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.setUTCDate(System.Object,System.Double)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setUTCFullYear">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.setUTCFullYear(System.Object,System.Double,System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setUTCHours">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.setUTCHours(System.Object,System.Double,System.Object,System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setUTCMinutes">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.setUTCMinutes(System.Object,System.Double,System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setUTCMilliseconds">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.setUTCMilliseconds(System.Object,System.Double)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setUTCMonth">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.setUTCMonth(System.Object,System.Double,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setUTCSeconds">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.setUTCSeconds(System.Object,System.Double,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setYear">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.setYear(System.Object,System.Double)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_toDateString">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.toDateString(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_toGMTString">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.toGMTString(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_toLocaleDateString">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.toLocaleDateString(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_toLocaleString">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.toLocaleString(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_toLocaleTimeString">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.toLocaleTimeString(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_toString">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.toString(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_toTimeString">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.toTimeString(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_toUTCString">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.toUTCString(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_UTC">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DateConstructor.UTC(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DateConstructor" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_valueOf">
      <summary>
              静态 <see cref="M:Microsoft.JScript.DatePrototype.valueOf(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Enumerator_atEnd">
      <summary>
              静态 <see cref="M:Microsoft.JScript.EnumeratorPrototype.atEnd(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.EnumeratorPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Enumerator_item">
      <summary>
              静态 <see cref="M:Microsoft.JScript.EnumeratorPrototype.item(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.EnumeratorPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Enumerator_moveFirst">
      <summary>
              静态 <see cref="M:Microsoft.JScript.EnumeratorPrototype.moveFirst(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.EnumeratorPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Enumerator_moveNext">
      <summary>
              静态 <see cref="M:Microsoft.JScript.EnumeratorPrototype.moveNext(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.EnumeratorPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Error_toString">
      <summary>
              静态 <see cref="M:Microsoft.JScript.ErrorPrototype.toString(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.ErrorPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Function_apply">
      <summary>
              静态 <see cref="M:Microsoft.JScript.FunctionPrototype.apply(System.Object,System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.FunctionPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Function_call">
      <summary>
              静态 <see cref="M:Microsoft.JScript.FunctionPrototype.call(System.Object,System.Object,System.Object[])" /> 方法 <see cref="T:Microsoft.JScript.FunctionPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Function_toString">
      <summary>
              静态 <see cref="M:Microsoft.JScript.FunctionPrototype.toString(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.FunctionPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_CollectGarbage">
      <summary>
              静态 <see cref="M:Microsoft.JScript.GlobalObject.CollectGarbage" /> 方法 <see cref="T:Microsoft.JScript.GlobalObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_decodeURI">
      <summary>
              静态 <see cref="M:Microsoft.JScript.GlobalObject.decodeURI(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.GlobalObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_decodeURIComponent">
      <summary>
              静态 <see cref="M:Microsoft.JScript.GlobalObject.decodeURIComponent(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.GlobalObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_encodeURI">
      <summary>
              静态 <see cref="M:Microsoft.JScript.GlobalObject.encodeURI(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.GlobalObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_encodeURIComponent">
      <summary>
              静态 <see cref="M:Microsoft.JScript.GlobalObject.encodeURIComponent(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.GlobalObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_escape">
      <summary>
              静态 <see cref="M:Microsoft.JScript.GlobalObject.escape(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.GlobalObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_eval">
      <summary>
              静态 <see cref="M:Microsoft.JScript.GlobalObject.eval(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.GlobalObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_GetObject">
      <summary>
              静态 <see cref="M:Microsoft.JScript.GlobalObject.GetObject(System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.GlobalObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_isNaN">
      <summary>
              静态 <see cref="M:Microsoft.JScript.GlobalObject.isNaN(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.GlobalObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_isFinite">
      <summary>
              静态 <see cref="M:Microsoft.JScript.GlobalObject.isFinite(System.Double)" /> 方法 <see cref="T:Microsoft.JScript.GlobalObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_parseFloat">
      <summary>
              静态 <see cref="M:Microsoft.JScript.GlobalObject.parseFloat(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.GlobalObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_parseInt">
      <summary>
              静态 <see cref="M:Microsoft.JScript.GlobalObject.parseInt(System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.GlobalObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_ScriptEngine">
      <summary>
              静态 <see cref="M:Microsoft.JScript.GlobalObject.ScriptEngine" /> 方法 <see cref="T:Microsoft.JScript.GlobalObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_ScriptEngineBuildVersion">
      <summary>
              静态 <see cref="M:Microsoft.JScript.GlobalObject.ScriptEngineBuildVersion" /> 方法 <see cref="T:Microsoft.JScript.GlobalObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_ScriptEngineMajorVersion">
      <summary>
              静态 <see cref="M:Microsoft.JScript.GlobalObject.ScriptEngineMajorVersion" /> 方法 <see cref="T:Microsoft.JScript.GlobalObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_ScriptEngineMinorVersion">
      <summary>
              静态 <see cref="M:Microsoft.JScript.GlobalObject.ScriptEngineMinorVersion" /> 方法 <see cref="T:Microsoft.JScript.GlobalObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_unescape">
      <summary>
              静态 <see cref="M:Microsoft.JScript.GlobalObject.unescape(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.GlobalObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_abs">
      <summary>
              静态 <see cref="M:Microsoft.JScript.MathObject.abs(System.Double)" /> 方法 <see cref="T:Microsoft.JScript.MathObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_acos">
      <summary>
              静态 <see cref="M:Microsoft.JScript.MathObject.acos(System.Double)" /> 方法 <see cref="T:Microsoft.JScript.MathObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_asin">
      <summary>
              静态 <see cref="M:Microsoft.JScript.MathObject.asin(System.Double)" /> 方法 <see cref="T:Microsoft.JScript.MathObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_atan">
      <summary>
              静态 <see cref="M:Microsoft.JScript.MathObject.atan(System.Double)" /> 方法 <see cref="T:Microsoft.JScript.MathObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_atan2">
      <summary>
              静态 <see cref="M:Microsoft.JScript.MathObject.atan2(System.Double,System.Double)" /> 方法 <see cref="T:Microsoft.JScript.MathObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_ceil">
      <summary>
              静态 <see cref="M:Microsoft.JScript.MathObject.ceil(System.Double)" /> 方法 <see cref="T:Microsoft.JScript.MathObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_cos">
      <summary>
              静态 <see cref="M:Microsoft.JScript.MathObject.cos(System.Double)" /> 方法 <see cref="T:Microsoft.JScript.MathObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_exp">
      <summary>
              静态 <see cref="M:Microsoft.JScript.MathObject.exp(System.Double)" /> 方法 <see cref="T:Microsoft.JScript.MathObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_floor">
      <summary>
              静态 <see cref="M:Microsoft.JScript.MathObject.floor(System.Double)" /> 方法 <see cref="T:Microsoft.JScript.MathObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_log">
      <summary>
              静态 <see cref="M:Microsoft.JScript.MathObject.log(System.Double)" /> 方法 <see cref="T:Microsoft.JScript.MathObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_max">
      <summary>
              静态 <see cref="M:Microsoft.JScript.MathObject.max(System.Object,System.Object,System.Object[])" /> 方法 <see cref="T:Microsoft.JScript.MathObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_min">
      <summary>
              静态 <see cref="M:Microsoft.JScript.MathObject.min(System.Object,System.Object,System.Object[])" /> 方法 <see cref="T:Microsoft.JScript.MathObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_pow">
      <summary>
              静态 <see cref="M:Microsoft.JScript.MathObject.pow(System.Double,System.Double)" /> 方法 <see cref="T:Microsoft.JScript.MathObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_random">
      <summary>
              静态 <see cref="M:Microsoft.JScript.MathObject.random" /> 方法 <see cref="T:Microsoft.JScript.MathObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_round">
      <summary>
              静态 <see cref="M:Microsoft.JScript.MathObject.round(System.Double)" /> 方法 <see cref="T:Microsoft.JScript.MathObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_sin">
      <summary>
              静态 <see cref="M:Microsoft.JScript.MathObject.sin(System.Double)" /> 方法 <see cref="T:Microsoft.JScript.MathObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_sqrt">
      <summary>
              静态 <see cref="M:Microsoft.JScript.MathObject.sqrt(System.Double)" /> 方法 <see cref="T:Microsoft.JScript.MathObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_tan">
      <summary>
              静态 <see cref="M:Microsoft.JScript.MathObject.tan(System.Double)" /> 方法 <see cref="T:Microsoft.JScript.MathObject" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Number_toExponential">
      <summary>
              静态 <see cref="M:Microsoft.JScript.NumberPrototype.toExponential(System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.NumberPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Number_toFixed">
      <summary>
              静态 <see cref="M:Microsoft.JScript.NumberPrototype.toFixed(System.Object,System.Double)" /> 方法 <see cref="T:Microsoft.JScript.NumberPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Number_toLocaleString">
      <summary>
              静态 <see cref="M:Microsoft.JScript.NumberPrototype.toLocaleString(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.NumberPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Number_toPrecision">
      <summary>
              静态 <see cref="M:Microsoft.JScript.NumberPrototype.toPrecision(System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.NumberPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Number_toString">
      <summary>
              静态 <see cref="M:Microsoft.JScript.NumberPrototype.toString(System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.NumberPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Number_valueOf">
      <summary>
              静态 <see cref="M:Microsoft.JScript.NumberPrototype.valueOf(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.NumberPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Object_hasOwnProperty">
      <summary>
              静态 <see cref="M:Microsoft.JScript.ObjectPrototype.hasOwnProperty(System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.ObjectPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Object_isPrototypeOf">
      <summary>
              静态 <see cref="M:Microsoft.JScript.ObjectPrototype.isPrototypeOf(System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.ObjectPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Object_propertyIsEnumerable">
      <summary>
              静态 <see cref="M:Microsoft.JScript.ObjectPrototype.propertyIsEnumerable(System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.ObjectPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Object_toLocaleString">
      <summary>
              静态 <see cref="M:Microsoft.JScript.ObjectPrototype.toLocaleString(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.ObjectPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Object_toString">
      <summary>
              静态 <see cref="M:Microsoft.JScript.ObjectPrototype.toString(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.ObjectPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Object_valueOf">
      <summary>
              静态 <see cref="M:Microsoft.JScript.ObjectPrototype.valueOf(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.ObjectPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.RegExp_compile">
      <summary>
              静态 <see cref="M:Microsoft.JScript.RegExpPrototype.compile(System.Object,System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.RegExpPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.RegExp_exec">
      <summary>
              静态 <see cref="M:Microsoft.JScript.RegExpPrototype.exec(System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.RegExpPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.RegExp_test">
      <summary>
              静态 <see cref="M:Microsoft.JScript.RegExpPrototype.test(System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.RegExpPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.RegExp_toString">
      <summary>
              静态 <see cref="M:Microsoft.JScript.RegExpPrototype.toString(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.RegExpPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_anchor">
      <summary>
              静态 <see cref="M:Microsoft.JScript.StringPrototype.anchor(System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_big">
      <summary>
              静态 <see cref="M:Microsoft.JScript.StringPrototype.big(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_blink">
      <summary>
              静态 <see cref="M:Microsoft.JScript.StringPrototype.blink(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_bold">
      <summary>
              静态 <see cref="M:Microsoft.JScript.StringPrototype.bold(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_charAt">
      <summary>
              静态 <see cref="M:Microsoft.JScript.StringPrototype.charAt(System.Object,System.Double)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_charCodeAt">
      <summary>
              静态 <see cref="M:Microsoft.JScript.StringPrototype.charCodeAt(System.Object,System.Double)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_concat">
      <summary>
              静态 <see cref="M:Microsoft.JScript.StringPrototype.concat(System.Object,System.Object[])" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_fixed">
      <summary>
              静态 <see cref="M:Microsoft.JScript.StringPrototype.fixed(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_fontcolor">
      <summary>
              静态 <see cref="M:Microsoft.JScript.StringPrototype.fontcolor(System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_fontsize">
      <summary>
              静态 <see cref="M:Microsoft.JScript.StringPrototype.fontsize(System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_fromCharCode">
      <summary>
              静态 <see cref="M:Microsoft.JScript.StringConstructor.fromCharCode(System.Object[])" /> 方法 <see cref="T:Microsoft.JScript.StringConstructor" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_indexOf">
      <summary>
              静态 <see cref="M:Microsoft.JScript.StringPrototype.indexOf(System.Object,System.Object,System.Double)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_italics">
      <summary>
              静态 <see cref="M:Microsoft.JScript.StringPrototype.italics(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_lastIndexOf">
      <summary>
              静态 <see cref="M:Microsoft.JScript.StringPrototype.lastIndexOf(System.Object,System.Object,System.Double)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_link">
      <summary>
              静态 <see cref="M:Microsoft.JScript.StringPrototype.link(System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_localeCompare">
      <summary>
              静态 <see cref="M:Microsoft.JScript.StringPrototype.localeCompare(System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_match">
      <summary>
              静态 <see cref="M:Microsoft.JScript.StringPrototype.match(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_replace">
      <summary>
              静态 <see cref="M:Microsoft.JScript.StringPrototype.replace(System.Object,System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_search">
      <summary>
              静态 <see cref="M:Microsoft.JScript.StringPrototype.search(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_slice">
      <summary>
              静态 <see cref="M:Microsoft.JScript.StringPrototype.slice(System.Object,System.Double,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_small">
      <summary>
              静态 <see cref="M:Microsoft.JScript.StringPrototype.small(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_split">
      <summary>
              静态 <see cref="M:Microsoft.JScript.StringPrototype.split(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_strike">
      <summary>
              静态 <see cref="M:Microsoft.JScript.StringPrototype.strike(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_sub">
      <summary>
              静态 <see cref="M:Microsoft.JScript.StringPrototype.sub(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_substr">
      <summary>
              静态 <see cref="M:Microsoft.JScript.StringPrototype.substr(System.Object,System.Double,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_substring">
      <summary>
              静态 <see cref="M:Microsoft.JScript.StringPrototype.substring(System.Object,System.Double,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_sup">
      <summary>
              静态 <see cref="M:Microsoft.JScript.StringPrototype.sup(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_toLocaleLowerCase">
      <summary>
              静态 <see cref="M:Microsoft.JScript.StringPrototype.toLocaleLowerCase(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_toLocaleUpperCase">
      <summary>
              静态 <see cref="M:Microsoft.JScript.StringPrototype.toLocaleUpperCase(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_toLowerCase">
      <summary>
              静态 <see cref="M:Microsoft.JScript.StringPrototype.toLowerCase(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_toString">
      <summary>
              静态 <see cref="M:Microsoft.JScript.StringPrototype.toString(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_toUpperCase">
      <summary>
              静态 <see cref="M:Microsoft.JScript.StringPrototype.toUpperCase(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_valueOf">
      <summary>
              静态 <see cref="M:Microsoft.JScript.StringPrototype.valueOf(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.VBArray_dimensions">
      <summary>
              静态 <see cref="M:Microsoft.JScript.VBArrayPrototype.dimensions(System.Object)" /> 方法 <see cref="T:Microsoft.JScript.VBArrayPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.VBArray_getItem">
      <summary>
              静态 <see cref="M:Microsoft.JScript.VBArrayPrototype.getItem(System.Object,System.Object[])" /> 方法 <see cref="T:Microsoft.JScript.VBArrayPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.VBArray_lbound">
      <summary>
              静态 <see cref="M:Microsoft.JScript.VBArrayPrototype.lbound(System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.VBArrayPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.VBArray_toArray">
      <summary>
              静态 <see cref="M:Microsoft.JScript.VBArrayPrototype.toArray(System.Object,Microsoft.JScript.Vsa.VsaEngine)" /> 方法 <see cref="T:Microsoft.JScript.VBArrayPrototype" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.VBArray_ubound">
      <summary>
              静态 <see cref="M:Microsoft.JScript.VBArrayPrototype.ubound(System.Object,System.Object)" /> 方法 <see cref="T:Microsoft.JScript.VBArrayPrototype" /> 类。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.JSConstructor">
      <summary>
              包装 <see cref="T:Microsoft.JScript.FunctionObject" />。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.JScriptCodeProvider">
      <summary>
              提供访问权限的 JScript 代码生成器和代码编译器的实例。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.JScriptException">
      <summary>
              JScript 为向公共语言运行时 (CLR) 主机或程序通知发生错误而引发的异常。
              <see cref="T:Microsoft.JScript.JScriptException" /> 通常采用 <see cref="T:Microsoft.JScript.JSError" /> 枚举值。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.JSError">
      <summary>
              指定 JScript 错误消息。
               此类所属的编译和运行时状态类别。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoError">
      <summary>
              没有错误。
               这是枚举的默认值 (0) 值。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidCall">
      <summary>
              无效的过程调用或参数。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.OutOfMemory">
      <summary>
              内存不足。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.TypeMismatch">
      <summary>
              类型不匹配。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.OutOfStack">
      <summary>
              堆栈空间不足。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InternalError">
      <summary>
              已引发一个内部错误。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FileNotFound">
      <summary>
              找不到文件。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NeedObject">
      <summary>
              一个对象是必需的。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CantCreateObject">
      <summary>
              无法创建对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.OLENoPropOrMethod">
      <summary>
              对象不支持此属性或方法。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ActionNotSupported">
      <summary>
              该对象不支持此操作。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotCollection">
      <summary>
              此对象不是一个集合。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.SyntaxError">
      <summary>
              发现语法错误。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoColon">
      <summary>
              预期":"。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoSemicolon">
      <summary>
              预期";"。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoLeftParen">
      <summary>
              预期"(".
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoRightParen">
      <summary>
              预期")"。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoRightBracket">
      <summary>
              预期"]"。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoLeftCurly">
      <summary>
              预期"{"。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoRightCurly">
      <summary>
              预期"}"。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoIdentifier">
      <summary>
              应为标识符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoEqual">
      <summary>
              应有"="。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.IllegalChar">
      <summary>
              无效字符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.UnterminatedString">
      <summary>
              未终止的字符串常量。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoCommentEnd">
      <summary>
              未终止的注释。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadReturn">
      <summary>
              Return 语句不能出现在函数之外。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadBreak">
      <summary>
              不能有 <see langword="break" /> 在循环外。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadContinue">
      <summary>
              不能有 <see langword="continue" /> 在循环外。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadHexDigit">
      <summary>
              应为十六进制数字。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoWhile">
      <summary>
              预期 <see langword="while" />。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadLabel">
      <summary>
              已存在具有该名称的标签。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoLabel">
      <summary>
              找不到的标签。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.DupDefault">
      <summary>
              <see langword="default" /> 中只能出现一次 <see langword="switch" /> 语句。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoMemberIdentifier">
      <summary>
              应为标识符或 <see langword="string" />。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoCcEnd">
      <summary>
              预期 <see langword="@end" />。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CcOff">
      <summary>
              条件编译已关闭。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotConst">
      <summary>
              应为常量。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoAt">
      <summary>
              预期 <see langword="@" />。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoCatch">
      <summary>
              预期 <see langword="catch" />。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidElse">
      <summary>
              不匹配 <see langword="else" />; 否 <see langword="if" /> 定义。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoComma">
      <summary>
              预期"，"。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.DupVisibility">
      <summary>
              已定义的可见性修饰符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.IllegalVisibility">
      <summary>
              无效的可见性修饰符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadSwitch">
      <summary>
              缺少 <see langword="case" /> 或 <see langword="default" /> 语句。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CcInvalidEnd">
      <summary>
              不匹配 <see langword="@end" />; 否 <see langword="@if" /> 定义。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CcInvalidElse">
      <summary>
              不匹配 <see langword="@else" />; 否 <see langword="@if" /> 定义。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CcInvalidElif">
      <summary>
              不匹配 <see langword="@elif" />; 否 <see langword="@if" /> 定义。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ErrEOF">
      <summary>
              需要更多的源字符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.IncompatibleVisibility">
      <summary>
              不兼容的可见性修饰符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ClassNotAllowed">
      <summary>
              不允许在此上下文中的类定义。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NeedCompileTimeConstant">
      <summary>
              表达式必须是编译时常量。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.DuplicateName">
      <summary>
              已在使用中的标识符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NeedType">
      <summary>
              预期的类型名称。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotInsideClass">
      <summary>
              仅在类定义内有效。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidPositionDirective">
      <summary>
              发现未知的位置指令。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MustBeEOL">
      <summary>
              指令不能跟在同一行上的其他代码。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.WrongDirective">
      <summary>
              错误调试程序指令或指令的错误的位置。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CannotNestPositionDirective">
      <summary>
              可以启动一个新之前必须结束位置指令。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CircularDefinition">
      <summary>
              循环定义。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.Deprecated">
      <summary>
              指定的类型已弃用。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.IllegalUseOfThis">
      <summary>
              不是有效地使用 <see langword="this" /> 当前上下文中。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotAccessible">
      <summary>
              不能从该作用域访问对象或成员。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CannotUseNameOfClass">
      <summary>
              只有构造函数可以为它的类相同的名称。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MustImplementMethod">
      <summary>
              类必须提供该方法的实现。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NeedInterface">
      <summary>
              应为接口名称。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.UnreachableCatch">
      <summary>
              Catch 子句将永远无法达到。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.TypeCannotBeExtended">
      <summary>
              不能扩展类型。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.UndeclaredVariable">
      <summary>
              尚未声明变量。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.VariableLeftUninitialized">
      <summary>
              未初始化的变量的危险，使用起来很慢。
               您打算将其未初始化的吗？
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.KeywordUsedAsIdentifier">
      <summary>
              保留的字不能用作标识符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotAllowedInSuperConstructorCall">
      <summary>
              对基类构造函数的调用中不允许对象或成员。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotMeantToBeCalledDirectly">
      <summary>
              不能直接调用此方法。
               如果可能，请改为使用属性访问器。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.GetAndSetAreInconsistent">
      <summary>
              <see langword="get" /> 和 <see langword="set" /> 相互方法的此属性不匹配。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidCustomAttribute">
      <summary>
              自定义特性类必须派生自 <see cref="T:System.Attribute" />。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidCustomAttributeArgument">
      <summary>
              只有基元类型可以用在自定义特性构造函数参数列表。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidCustomAttributeClassOrCtor">
      <summary>
              未知的自定义特性类或构造函数。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.TooManyParameters">
      <summary>
              有太多的实际参数。
               将忽略多余的参数。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.AmbiguousBindingBecauseOfWith">
      <summary>
              <see cref="T:Microsoft.JScript.With" /> 语句使该名称的使用不明确。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.AmbiguousBindingBecauseOfEval">
      <summary>
              是否存在 <see cref="T:Microsoft.JScript.Eval" /> 使该名称的使用不明确。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoSuchMember">
      <summary>
              此类型的对象没有这样的成员。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ItemNotAllowedOnExpandoClass">
      <summary>
              不能对定义的属性项 <see cref="T:Microsoft.JScript.Expando" /> 类。
               此项保留为 <see cref="T:Microsoft.JScript.Expando" /> 字段。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MethodNotAllowedOnExpandoClass">
      <summary>
              不能定义一个名为属性 Item 上 <see cref="T:Microsoft.JScript.Expando" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MethodClashOnExpandoSuperClass">
      <summary>
              无法创建 <see cref="T:Microsoft.JScript.Expando" /> 类，因为属性名为 Item 已在类层次结构中定义。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BaseClassIsExpandoAlready">
      <summary>
              基类的类已标记为 <see cref="T:Microsoft.JScript.Expando" />; 当前规范将被忽略。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.AbstractCannotBePrivate">
      <summary>
              一个抽象方法不能是私有的。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotIndexable">
      <summary>
              此类型的对象是不可建立索引。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.StaticMissingInStaticInit">
      <summary>
              必须指定静态初始值设定项 <see langword="static" /> 关键字。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MissingConstructForAttributes">
      <summary>
              不适用于当前上下文的属性的列表。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.OnlyClassesAllowed">
      <summary>
              只允许使用类内 <see langword="package" />。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ExpandoClassShouldNotImpleEnumerable">
      <summary>
              <see cref="T:Microsoft.JScript.Expando" /> 类不应实现 <see cref="T:System.Collections.IEnumerable" />。
               在隐式定义了接口 <see cref="T:Microsoft.JScript.Expando" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NonCLSCompliantMember">
      <summary>
              指定的成员不符合 CLS。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotDeletable">
      <summary>
              无法删除的对象或成员。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.PackageExpected">
      <summary>
              预期的包名称。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.UselessExpression">
      <summary>
              表达式不起作用。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.HidesParentMember">
      <summary>
              <see langword="base" /> 类已包含同名的成员。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CannotChangeVisibility">
      <summary>
              不能更改基方法的可见性规范。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.HidesAbstractInBase">
      <summary>
              方法隐藏 <see langword="abstract" /> 中 <see langword="base" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NewNotSpecifiedInMethodDeclaration">
      <summary>
              一种方法在基类中的方法相匹配。
               必须指定 <see langword="override" /> 或 <see langword="hide" />。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MethodInBaseIsNotVirtual">
      <summary>
              方法是基类中的 <see langword="final" /> 与否 <see langword="virtual" /><see langword="override" /> 将被忽略。
               指定 <see langword="hide" />。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoMethodInBaseToNew">
      <summary>
              到基类中没有任何成员 <see langword="hide" />。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.DifferentReturnTypeFromBase">
      <summary>
              基类中的方法具有不同的返回类型。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ClashWithProperty">
      <summary>
              字段冲突的名称与属性的名称。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.OverrideAndHideUsedTogether">
      <summary>
              不能使用 <see langword="override" /> 和 <see langword="hide" /> 成员声明中组合在一起。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidLanguageOption">
      <summary>
              必须指定"快速"或"versionSafe"语言选项。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoMethodInBaseToOverride">
      <summary>
              到基类中没有任何成员 <see langword="override" />。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotValidForConstructor">
      <summary>
              不是有效的构造函数。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CannotReturnValueFromVoidFunction">
      <summary>
              无法从 void 函数或构造函数返回一个值。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.AmbiguousMatch">
      <summary>
              多个方法或属性匹配此参数列表。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.AmbiguousConstructorCall">
      <summary>
              多个构造函数与此参数列表匹配。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.SuperClassConstructorNotAccessible">
      <summary>
              基类构造函数不能从该作用域访问。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.OctalLiteralsAreDeprecated">
      <summary>
              八进制文本已被否决。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.VariableMightBeUnitialized">
      <summary>
              可能未初始化变量。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotOKToCallSuper">
      <summary>
              不能用来从该位置调用基类构造函数。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.IllegalUseOfSuper">
      <summary>
              不能用来在这种方式中使用的基类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadWayToLeaveFinally">
      <summary>
              它速度慢且可能导致混乱 <see langword="finally" /> 阻止这种方式。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoCommaOrTypeDefinitionError">
      <summary>
              预期"，"或无效的类型声明;编写"&lt; 标识符 &gt;: &lt; 类型 &gt;"不"&lt; 类型 &gt;&lt; 标识符 &gt;"。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.AbstractWithBody">
      <summary>
              一个抽象的函数不能有一个主体。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoRightParenOrComma">
      <summary>
              预期"，")"。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoRightBracketOrComma">
      <summary>
              预期"，"或"]"。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ExpressionExpected">
      <summary>
              应为表达式。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.UnexpectedSemicolon">
      <summary>
              意外";"。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.TooManyTokensSkipped">
      <summary>
              太多错误。
               该文件可能不是 JScript 文件。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadVariableDeclaration">
      <summary>
              可能存在无效的变量声明 <see langword="var" /> 丢失或无法识别的语法错误。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadFunctionDeclaration">
      <summary>
              可能存在无效的函数声明、 缺少函数，或无法识别的语法错误。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadPropertyDeclaration">
      <summary>
              属性声明无效。
              <see langword="get" /> 访问必须不具有参数和 <see langword="set" /> 取值函数只能有一个参数。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.DoesNotHaveAnAddress">
      <summary>
              表达式不具有一个地址。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.TooFewParameters">
      <summary>
              并非所有需要在提供参数。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.UselessAssignment">
      <summary>
              赋值创建 <see cref="T:Microsoft.JScript.Expando" /> 立即被丢弃的属性。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.SuspectAssignment">
      <summary>
              <see langword="If" /> 条件不能包含赋值。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.SuspectSemicolon">
      <summary>
              空语句位于 <see langword="if" /> 语句。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ImpossibleConversion">
      <summary>
              不能指定的转换或强制。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FinalPrecludesAbstract">
      <summary>
              <see langword="final" /> 和 <see langword="abstract" /> 无法一起使用。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NeedInstance">
      <summary>
              应为实例。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CannotBeAbstract">
      <summary>
              不能是抽象的除非类标记为抽象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidBaseTypeForEnum">
      <summary>
              <see langword="enum" /> 基类型必须是基元的整数类型。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CannotInstantiateAbstractClass">
      <summary>
              不可以构建一个抽象类的实例。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ArrayMayBeCopied">
      <summary>
              分配到一个 JScript 数组 <see cref="T:System.Array" /> 可能会导致要复制的数组。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.AbstractCannotBeStatic">
      <summary>
              静态方法不能是抽象的。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.StaticIsAlreadyFinal">
      <summary>
              静态方法不能是 <see langword="final" />。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.StaticMethodsCannotOverride">
      <summary>
              静态方法不能重写基类方法。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.StaticMethodsCannotHide">
      <summary>
              静态方法不能隐藏基类方法。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ExpandoPrecludesOverride">
      <summary>
              <see cref="T:Microsoft.JScript.Expando" /> 方法不能重写基类方法。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.IllegalParamArrayAttribute">
      <summary>
              变量参数列表必须是数组类型。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ExpandoPrecludesAbstract">
      <summary>
              <see cref="T:Microsoft.JScript.Expando" /> 方法不能是抽象的。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ShouldBeAbstract">
      <summary>
              但不包括正文函数应该 <see langword="abstract" />。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadModifierInInterface">
      <summary>
              对接口成员，不能使用此修饰符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.VarIllegalInInterface">
      <summary>
              不能在接口中声明变量。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InterfaceIllegalInInterface">
      <summary>
              中不能声明接口 <see langword="interface" />。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoVarInEnum">
      <summary>
              <see langword="enum" /> 成员声明不应使用 <see langword="var" /> 关键字。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidImport">
      <summary>
              <see langword="import" /> 语句不是在此上下文中有效。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.EnumNotAllowed">
      <summary>
              <see langword="enum" /> 不允许在此上下文中的定义。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidCustomAttributeTarget">
      <summary>
              此属性不能用于此类型的声明。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.PackageInWrongContext">
      <summary>
              包定义不允许在此上下文中。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ConstructorMayNotHaveReturnType">
      <summary>
              构造函数不能具有返回类型。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.OnlyClassesAndPackagesAllowed">
      <summary>
              只有类和包允许在库中。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidDebugDirective">
      <summary>
              无效的调试指令。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CustomAttributeUsedMoreThanOnce">
      <summary>
              这种类型必须是属性的唯一的。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NestedInstanceTypeCannotBeExtendedByStatic">
      <summary>
              可以仅由同一个类中嵌套的非静态类型扩展非静态嵌套的类型。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.PropertyLevelAttributesMustBeOnGetter">
      <summary>
              必须上指定针对属性的特性 <see langword="get" /> 取值函数，如果 <see langword="get" /> 访问器，则存在。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadThrow">
      <summary>
              一个 <see langword="throw" /> 语句必须具有参数，除非它包含在 <see langword="catch" /> 块 <see langword="try" /> 语句。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ParamListNotLast">
      <summary>
              变量参数列表必须是最后一个参数。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoSuchType">
      <summary>
              找不到类型。
               程序集引用可能会丢失。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadOctalLiteral">
      <summary>
              格式不正确的八进制文本视为十进制文本。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InstanceNotAccessibleFromStatic">
      <summary>
              非静态成员不能从访问 <see langword="static" /> 作用域。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.StaticRequiresTypeName">
      <summary>
              必须按类名访问静态成员。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NonStaticWithTypeName">
      <summary>
              非静态成员不能访问与类名称。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoSuchStaticMember">
      <summary>
              类型不具有如 <see langword="static" /> 成员。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.SuspectLoopCondition">
      <summary>
              循环条件不能包含函数调用。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ExpectedAssembly">
      <summary>
              应为程序集。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.AssemblyAttributesMustBeGlobal">
      <summary>
              程序集自定义特性不能是另一构造的一部分。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ExpandoPrecludesStatic">
      <summary>
              <see cref="T:Microsoft.JScript.Expando" /> 方法不能是静态的。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.DuplicateMethod">
      <summary>
              此方法在此类中的另一方法具有相同的名称、 参数类型和返回类型。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotAnExpandoFunction">
      <summary>
              类成员构造函数应标记为用作 <see cref="T:Microsoft.JScript.Expando" /> 函数。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotValidVersionString">
      <summary>
              不是有效的版本字符串。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ExecutablesCannotBeLocalized">
      <summary>
              可执行文件不能进行本地化; <see cref="P:System.Reflection.AssemblyCultureAttribute.Culture" /> 应始终为空。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.StringConcatIsSlow">
      <summary>
              加号运算符是较慢的方法来连接字符串。
               请考虑改用 <see cref="T:System.Text.StringBuilder" />。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CcInvalidInDebugger">
      <summary>
              不能在调试器中使用条件编译指令和变量。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ExpandoMustBePublic">
      <summary>
              <see cref="T:Microsoft.JScript.Expando" /> 方法必须是公共的。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.DelegatesShouldNotBeExplicitlyConstructed">
      <summary>
              不应显式构造委托;只需使用的方法名称。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ImplicitlyReferencedAssemblyNotFound">
      <summary>
              引用的程序集取决于未被引用或找不到的另一个程序集。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.PossibleBadConversion">
      <summary>
              此转换可能会在运行时失败。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.PossibleBadConversionFromString">
      <summary>
              将字符串转换为数字或布尔值很慢，并且在运行时可能会失败。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidResource">
      <summary>
              这不是有效的.resources 文件。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.WrongUseOfAddressOf">
      <summary>
              仅在参数列表中，可以使用运算符的地址。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NonCLSCompliantType">
      <summary>
              指定的类型不符合 CLS。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MemberTypeCLSCompliantMismatch">
      <summary>
              类成员不能被标记为公共语言规范 (CLS)，因为该类不标记 CLS 兼容。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.TypeAssemblyCLSCompliantMismatch">
      <summary>
              类型不能被标记为符合 CLS，因为该程序集未标记为符合 CLS。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.IncompatibleAssemblyReference">
      <summary>
              引用的程序集不兼容。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidAssemblyKeyFile">
      <summary>
              已使用无效的程序集密钥文件。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.TypeNameTooLong">
      <summary>
              完全限定的类型名称过长。
               它必须少于 1024 个字符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MemberInitializerCannotContainFuncExpr">
      <summary>
              成员初始值设定项不能包含函数表达式。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CantAssignThis">
      <summary>
              无法将分配给 <see langword="this" />。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NumberExpected">
      <summary>
              应为数字。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FunctionExpected">
      <summary>
              应为函数。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CannotAssignToFunctionResult">
      <summary>
              不能分配给函数结果。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.StringExpected">
      <summary>
              应为字符串。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.DateExpected">
      <summary>
              缺少日期对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ObjectExpected">
      <summary>
              应为对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.IllegalAssignment">
      <summary>
              无效的赋值。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.UndefinedIdentifier">
      <summary>
              未定义的标识符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BooleanExpected">
      <summary>
              没有找到的布尔值。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.VBArrayExpected">
      <summary>
              VBArray 被正常。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.EnumeratorExpected">
      <summary>
              缺少枚举器对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.RegExpExpected">
      <summary>
              <see cref="T:Microsoft.JScript.RegExpObject" /> 应为对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.RegExpSyntax">
      <summary>
              正则表达式中的语法错误。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.UncaughtException">
      <summary>
              引发了异常且未被捕获。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidPrototype">
      <summary>
              此函数没有有效的原型对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.URIEncodeError">
      <summary>
              要编码的 URI 包含无效字符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.URIDecodeError">
      <summary>
              要解码的 URI 不有效的编码。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FractionOutOfRange">
      <summary>
              小数位数超出了范围。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.PrecisionOutOfRange">
      <summary>
              精度超出范围。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ArrayLengthConstructIncorrect">
      <summary>
              数组长度必须为有限正整数。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ArrayLengthAssignIncorrect">
      <summary>
              数组长度必须赋值为有限正数。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NeedArrayObject">
      <summary>
              一个"|"不是一个数组对象。
               应为数组对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoConstructor">
      <summary>
              没有此类构造函数。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.IllegalEval">
      <summary>
              <see cref="T:Microsoft.JScript.Eval" /> 别名不能调用。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotYetImplemented">
      <summary>
              尚未实现。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MustProvideNameForNamedParameter">
      <summary>
              不能提供 null 或为空的命名的参数的名称。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.DuplicateNamedParameter">
      <summary>
              重复的命名参数。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MissingNameParameter">
      <summary>
              指定的命名的参数名称不是正式的参数之一。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MoreNamedParametersThanArguments">
      <summary>
              指定的参数太少。
               命名的参数名的数目不能超过中传递的参数数目。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NonSupportedInDebugger">
      <summary>
              不能在调试器中计算表达式。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.AssignmentToReadOnly">
      <summary>
              无法分配到只读字段或属性。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.WriteOnlyProperty">
      <summary>
              该属性是只写。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.IncorrectNumberOfIndices">
      <summary>
              索引的数目不匹配的维度的数组。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.RefParamsNonSupportedInDebugger">
      <summary>
              方法与 <see langword="ref" /> 参数不能在调试器中调用。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CannotCallSecurityMethodLateBound">
      <summary>
              <see cref="M:System.Security.CodeAccessPermission.Deny" />, ，<see cref="M:System.Security.CodeAccessPermission.PermitOnly" />, ，和 <see cref="M:System.Security.CodeAccessPermission.Assert" /> 不能使用后期绑定调用安全方法。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CannotUseStaticSecurityAttribute">
      <summary>
              JScript 不支持静态安全属性。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NonClsException">
      <summary>
              目标遇到不符合 CLS 异常情况。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FuncEvalAborted">
      <summary>
              已中止函数求值。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FuncEvalTimedout">
      <summary>
              函数求值超时。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FuncEvalThreadSuspended">
      <summary>
              函数求值失败。
               线程处于挂起状态。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FuncEvalThreadSleepWaitJoin">
      <summary>
              函数求值失败。
               休眠、 等待某个对象的线程，或等待另一个线程以完成。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FuncEvalBadThreadState">
      <summary>
              函数求值失败。
               线程可能包含不正确的数据。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FuncEvalBadThreadNotStarted">
      <summary>
              函数求值失败，并且该线程尚未启动。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoFuncEvalAllowed">
      <summary>
              中止函数求值。
               若要启用属性求值，请单击 选项 上 工具 菜单，然后选择 调试 树视图中。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FuncEvalBadLocation">
      <summary>
              在程序中在此时停止时，不能完成函数求值。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FuncEvalWebMethod">
      <summary>
              不能在调试器中调用 Web 方法。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.StaticVarNotAvailable">
      <summary>
              静态变量不可用。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.TypeObjectNotAvailable">
      <summary>
              这种类型的类型对象不可用。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ExceptionFromHResult">
      <summary>
              异常来自 HRESULT。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.SideEffectsDisallowed">
      <summary>
              表达式可导致副作用，将无法评估。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.JSField">
      <summary>
              在 JScript 中支持的所有字段。
               这是由 JScript 中定义的所有字段的类的基类。
               此类属于名称绑定类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.JSFieldInfo">
      <summary>
              包装 <see cref="T:System.Reflection.FieldInfo" /> 对象。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.JSFunctionAttribute">
      <summary>
              与使用 <see cref="T:Microsoft.JScript.JSFunctionAttributeEnum" /> 进行批注的方法和 JScript 编译器生成的构造函数的调用约定。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.JSFunctionAttributeEnum">
      <summary>
              指定由 JScript 编译器生成的函数的调用约定。
               与使用 <see cref="T:Microsoft.JScript.JSFunctionAttribute" /> 自定义属性。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.None">
      <summary>
              指定常规的.NET Framework 方法具有任何特殊的调用约定。
               通常不使用如下所示这种情况下，不发出 JSFunctionAttribute。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.HasArguments">
      <summary>
              指定函数的第三个参数的类型为 <see langword="Object" />。
               调用方应实现 JScript arguments 对象，通常的实例的对象传入 <see cref="T:Microsoft.JScript.ArgumentsObject" />。
               JScript 运行时将认为，如果 <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasArguments" /> 设置，则 <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasStackFrame" /> 和 <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject" /> 也都设置。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject">
      <summary>
              指定该函数的第一个参数的类型为 <see langword="Object" /> 和通常名为 <paramref name="thisob" />。
               调用方应传递该函数作用于的对象的实例中。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.IsNested">
      <summary>
              指定该函数嵌套在另一个 JScript 函数。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.HasStackFrame">
      <summary>
              指定该函数将其本地变量复制到对外调用之前是由 JScript 运行时的堆栈帧对象。
               该复制变量从堆栈帧对象返回到它的局部变量时控制返回到的函数。
               对包含嵌套的函数的访问父函数的局部变量的函数设置此标志。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.HasVarArgs">
      <summary>
              指定该函数采用可变数量的参数。
               最后一个参数是对的类型数组的 <see langword="Object" />, ，它保存显式指定任何参数。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.HasEngine">
      <summary>
              指定函数的第二个参数的类型为 <see cref="T:Microsoft.JScript.Vsa.VsaEngine" />。
               调用方应传递的实例中 <see cref="T:Microsoft.JScript.Vsa.VsaEngine" /> 函数可从其检索运行时基础结构。
               JScript 运行时将认为，如果 <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasEngine" /> 设置则 <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject" /> 还设置。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.IsExpandoMethod">
      <summary>
              指定该函数是对基于原型的对象的构造函数。
               有关详细信息，请参阅 基于原型的对象 和 expando 修饰符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.IsInstanceNestedClassConstructor">
      <summary>
              指定的函数是嵌套的实例类的构造函数。
               第一个参数的函数的父类的实例。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.ClassicFunction">
      <summary>
              指定的聚合 <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasArguments" />, ，<see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasEngine" />, ，和 <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject" />。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.NestedFunction">
      <summary>
              指定的聚合 <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasStackFrame" />, ，<see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.IsNested" />, ，和 <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasEngine" />。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.ClassicNestedFunction">
      <summary>
              指定的聚合 <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.ClassicFunction" /> 和 <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.NestedFunction" />。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.JSLocalField">
      <summary>
              表示本地变量。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.JSMethod">
      <summary>
              表示 JScript 方法。
               此类属于名称绑定类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.JSMethodInfo">
      <summary>
              包装 <see cref="T:System.Reflection.MethodInfo" /> 对象。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.JSObject">
      <summary>
              表示在 JScript 中的对象。
               此类所属的对象和函数的类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.JSParser">
      <summary>
              分析 JScript 代码。
               此类所属的扫描和分析类别。
               有关扫描和分析的详细信息，请参阅 Create a Language Compiler for the .NET Framework。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.JSPrototypeObject">
      <summary>
              将添加到构造函数属性 <see cref="T:Microsoft.JScript.JSObject" /> 进行早期绑定时。
               此类所属的对象和函数的类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.JSScanner">
      <summary>
              扫描搜索单独的代码中，单元的 JScript 代码或 令牌。
               此类所属的扫描和分析类别。
               有关扫描和分析的详细信息，请参阅 Create a Language Compiler for the .NET Framework。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.JSToken">
      <summary>
              指定的代码中，单个单位或 令牌, ，构成 JScript 语言。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.None">
      <summary>
              无标记。
               例如，在扫描任何标记前或在错误情形。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.EndOfFile">
      <summary>
              文件正被扫描或者分析的末尾。
               这是默认值。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.If">
      <summary>
              if 语句。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.For">
      <summary>
              for 语句。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Do">
      <summary>
              do 语句。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.While">
      <summary>
              while 语句。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Continue">
      <summary>
              continue 语句。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Break">
      <summary>
              break 语句。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Return">
      <summary>
              return 语句。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Import">
      <summary>
              import 语句。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.With">
      <summary>
              with 语句。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Switch">
      <summary>
              switch 语句。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Throw">
      <summary>
              throw 语句。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Try">
      <summary>
              try 语句。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Package">
      <summary>
              package 语句。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Internal">
      <summary>
              internal 修饰符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Abstract">
      <summary>
              abstract 修饰符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Public">
      <summary>
              public 修饰符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Static">
      <summary>
              static 修饰符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Private">
      <summary>
              private 修饰符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Protected">
      <summary>
              protected 修饰符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Final">
      <summary>
              final 修饰符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Event">
      <summary>
              event 保留字。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Var">
      <summary>
              var 语句。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Const">
      <summary>
              const 语句。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Class">
      <summary>
              class 语句。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Function">
      <summary>
              function 语句。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LeftCurly">
      <summary>
              { 符号。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Semicolon">
      <summary>
              ; 符号。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Null">
      <summary>
              null 文字。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.True">
      <summary>
              true 文字。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.False">
      <summary>
              false 文字。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.This">
      <summary>
              this 语句。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Identifier">
      <summary>
              标识符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.StringLiteral">
      <summary>
              一个数值。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.IntegerLiteral">
      <summary>
              整数文字。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.NumericLiteral">
      <summary>
              一个数值。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LeftParen">
      <summary>
              ( 符号。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LeftBracket">
      <summary>
              [ 符号。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.AccessField">
      <summary>
              . 字段访问器符号。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.FirstOp">
      <summary>
              一个占位符枚举成员，如使比较 if JSToken.FirstOp &lt;= token &amp;&amp; token &lt;= JSToken.LastOp then...
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LogicalNot">
      <summary>
              ! 逻辑 NOT 运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.BitwiseNot">
      <summary>
              ~ 按位 NOT 运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Delete">
      <summary>
              delete 运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Void">
      <summary>
              void 运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Typeof">
      <summary>
              typeof 运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Increment">
      <summary>
              ++ 递增运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Decrement">
      <summary>
              -- 递减运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.FirstBinaryOp">
      <summary>
              一个占位符枚举成员，如使比较 if JSToken.FirstBinaryOp &lt;= token &amp;&amp; token &lt;= JSToken.LastBinaryOp then...
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Plus">
      <summary>
              + 加法运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Minus">
      <summary>
              - 减法运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LogicalOr">
      <summary>
              || 逻辑或运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LogicalAnd">
      <summary>
              &amp;&amp; 逻辑 AND 运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.BitwiseOr">
      <summary>
              | 按位或运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.BitwiseXor">
      <summary>
              ^ 按位异或运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.BitwiseAnd">
      <summary>
              &amp; 按位与运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Equal">
      <summary>
              == 相等比较运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.NotEqual">
      <summary>
              != 是否不相等比较运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.StrictEqual">
      <summary>
              === 标识比较运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.StrictNotEqual">
      <summary>
              !== 标识比较运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.GreaterThan">
      <summary>
              &gt; 关系比较运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LessThan">
      <summary>
              &lt; 关系比较运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LessThanEqual">
      <summary>
              &lt;= 关系比较运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.GreaterThanEqual">
      <summary>
              &gt;= 关系比较运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LeftShift">
      <summary>
              &lt;&lt; 按位左的移运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.RightShift">
      <summary>
              &gt;&gt; 按位右移运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.UnsignedRightShift">
      <summary>
              &gt;&gt;&gt; 无符号右移位运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Multiply">
      <summary>
              * 乘法运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Divide">
      <summary>
              / 除法运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Modulo">
      <summary>
              % 取模运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LastPPOperator">
      <summary>
              一个占位符枚举成员，如使比较 if JSToken.FirstBinaryOp &lt;= token &amp;&amp; token &lt;= JSToken.LastPPOperator then... 等都是可以是预先处理的操作。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Instanceof">
      <summary>
              instanceof 运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.In">
      <summary>
              in 运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Assign">
      <summary>
              = 赋值运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.PlusAssign">
      <summary>
              += 加法赋值运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.MinusAssign">
      <summary>
              -= 减法赋值运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.MultiplyAssign">
      <summary>
              *= 乘法赋值运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.DivideAssign">
      <summary>
              /= 除法赋值运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.BitwiseAndAssign">
      <summary>
              &amp;= 按位 AND 赋值运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.BitwiseOrAssign">
      <summary>
              |= 按位 OR 赋值运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.BitwiseXorAssign">
      <summary>
              ^= 按位异或赋值运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.ModuloAssign">
      <summary>
              %= 取模赋值运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LeftShiftAssign">
      <summary>
              &lt;&lt;= 左的移位赋值运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.RightShiftAssign">
      <summary>
              &gt;&gt;= 右移位赋值运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.UnsignedRightShiftAssign">
      <summary>
              &gt;&gt;&gt;= 无符号右移位赋值运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LastAssign">
      <summary>
              一个占位符枚举成员，如使比较 if JSToken.Assign &lt;= token &amp;&amp; token &lt;= JSToken.LastAssign then...
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LastBinaryOp">
      <summary>
              一个占位符枚举成员，如使比较 if JSToken.FirstBinaryOp &lt;= token &amp;&amp; token &lt;= JSToken.LastBinaryOp then...
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.ConditionalIf">
      <summary>
              ? 三元运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Colon">
      <summary>
              : 三元运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Comma">
      <summary>
              , 逗号运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LastOp">
      <summary>
              一个占位符枚举成员，如使比较 if JSToken.FirstBinaryOp &lt;= token &amp;&amp; token &lt;= JSToken.LastOp then...
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Case">
      <summary>
              case 关键字 switch 语句。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Catch">
      <summary>
              catch 关键字 try 语句。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Debugger">
      <summary>
              debugger 语句。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Default">
      <summary>
              default 关键字 switch 语句。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Else">
      <summary>
              else 关键字 if 语句。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Export">
      <summary>
              export 保留字。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Extends">
      <summary>
              extends 关键字 class 语句。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Finally">
      <summary>
              finally 关键字 try 语句。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Get">
      <summary>
              get 关键字 function get 语句。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Implements">
      <summary>
              implements 关键字 class 或 interface 语句。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Interface">
      <summary>
              interface 语句。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.New">
      <summary>
              new 运算符。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Set">
      <summary>
              set 关键字 function set 语句。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Super">
      <summary>
              super 语句。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.RightParen">
      <summary>
              ) 符号。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.RightCurly">
      <summary>
              } 符号。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.RightBracket">
      <summary>
              ] 符号。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.PreProcessorConstant">
      <summary>
              预处理器的常量。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Comment">
      <summary>
              注释文本。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.UnterminatedComment">
      <summary>
              未终止的注释。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Assert">
      <summary>
              assert 保留字。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Boolean">
      <summary>
              boolean 数据类型。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Byte">
      <summary>
              byte 数据类型。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Char">
      <summary>
              char 数据类型。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Decimal">
      <summary>
              decimal 数据类型。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Double">
      <summary>
              double 数据类型。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.DoubleColon">
      <summary>
              :: 保留字。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Enum">
      <summary>
              enum 语句。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Ensure">
      <summary>
              ensure 保留字。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Float">
      <summary>
              float 数据类型。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Goto">
      <summary>
              goto 保留字。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Int">
      <summary>
              int 数据类型。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Invariant">
      <summary>
              invariant 保留字。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Long">
      <summary>
              long 数据类型。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Namespace">
      <summary>
              namespace 保留字。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Native">
      <summary>
              native 保留字。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Require">
      <summary>
              require 保留字。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Sbyte">
      <summary>
              sbyte 数据类型。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Short">
      <summary>
              short 数据类型。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Synchronized">
      <summary>
              synchronized 保留字。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Transient">
      <summary>
              transient 保留字。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Throws">
      <summary>
              throws 保留字。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.ParamArray">
      <summary>
              ... 保留字。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Volatile">
      <summary>
              volatile 保留字。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Ushort">
      <summary>
              ushort 数据类型。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Uint">
      <summary>
              uint 数据类型。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Ulong">
      <summary>
              ulong 数据类型。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Use">
      <summary>
              use 保留字。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.EndOfLine">
      <summary>
              正在分析的行的末尾。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.PreProcessDirective">
      <summary>
              预处理器指令。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.JSVariableField">
      <summary>
              在 JScript 中支持变量字段。
               这是参数、 局部变量、 全局变量和类成员的基类。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.LateBinding">
      <summary>
              表示对类成员，可调用的表达式或变量名的引用。
               此类尝试在运行时解析为正确的值的引用。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.LenientArrayPrototype">
      <summary>
              将存储这些对象表示的静态方法 <see cref="T:Microsoft.JScript.ArrayPrototype" /> 类。
              <see cref="T:Microsoft.JScript.LenientArrayPrototype" /> 类属于内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.LenientBooleanPrototype">
      <summary>
              将存储这些对象表示的静态方法 <see cref="T:Microsoft.JScript.BooleanPrototype" /> 类。
              <see cref="T:Microsoft.JScript.LenientBooleanPrototype" /> 类属于内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.LenientDateConstructor">
      <summary>
              将存储这些对象表示的静态方法 <see cref="T:Microsoft.JScript.DateConstructor" /> 类。
              <see cref="T:Microsoft.JScript.LenientDateConstructor" /> 类属于内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.LenientDatePrototype">
      <summary>
              将存储这些对象表示的静态方法 <see cref="T:Microsoft.JScript.DatePrototype" /> 类。
              <see cref="T:Microsoft.JScript.LenientDatePrototype" /> 类属于内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.LenientEnumeratorPrototype">
      <summary>
              将存储这些对象表示的静态方法 <see cref="T:Microsoft.JScript.EnumeratorPrototype" /> 类。
              <see cref="T:Microsoft.JScript.LenientEnumeratorPrototype" /> 类属于内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.LenientErrorPrototype">
      <summary>
              将存储这些对象表示的静态方法 <see cref="T:Microsoft.JScript.ErrorPrototype" /> 类。
              <see cref="T:Microsoft.JScript.LenientErrorPrototype" /> 类属于内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.LenientFunctionPrototype">
      <summary>
              将存储这些对象表示的静态方法 <see cref="T:Microsoft.JScript.FunctionPrototype" /> 类。
              <see cref="T:Microsoft.JScript.LenientFunctionPrototype" /> 类属于内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.LenientGlobalObject">
      <summary>
              存储构造函数的函数对象、 数据类型信息，以及这些对象表示的静态方法 <see cref="T:Microsoft.JScript.GlobalObject" /> 类。
              <see cref="T:Microsoft.JScript.LenientGlobalObject" /> 类属于内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.LenientMathObject">
      <summary>
              将存储这些对象表示的静态方法 <see cref="T:Microsoft.JScript.MathObject" /> 类。
              <see cref="T:Microsoft.JScript.LenientMathObject" /> 类属于内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.LenientNumberPrototype">
      <summary>
              将存储这些对象表示的静态方法 <see cref="T:Microsoft.JScript.NumberPrototype" /> 类。
              <see cref="T:Microsoft.JScript.LenientNumberPrototype" /> 类属于内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.LenientObjectPrototype">
      <summary>
              将存储这些对象表示的静态方法 <see cref="T:Microsoft.JScript.ObjectPrototype" /> 类。
              <see cref="T:Microsoft.JScript.LenientObjectPrototype" /> 类属于内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.LenientRegExpPrototype">
      <summary>
              将存储这些对象表示的静态方法 <see cref="T:Microsoft.JScript.RegExpPrototype" /> 类。
              <see cref="T:Microsoft.JScript.LenientRegExpPrototype" /> 类属于内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.LenientStringConstructor">
      <summary>
              将存储这些对象表示的静态方法 <see cref="T:Microsoft.JScript.StringConstructor" /> 类。
              <see cref="T:Microsoft.JScript.LenientStringConstructor" /> 类属于内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.LenientStringPrototype">
      <summary>
              将存储这些对象表示的静态方法 <see cref="T:Microsoft.JScript.StringPrototype" /> 类。
              <see cref="T:Microsoft.JScript.LenientStringPrototype" /> 类属于内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.LenientVBArrayPrototype">
      <summary>
              将存储这些对象表示的静态方法 <see cref="T:Microsoft.JScript.VBArrayPrototype" /> 类。
              <see cref="T:Microsoft.JScript.LenientVBArrayPrototype" /> 类属于内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.MathObject">
      <summary>
              为三角函数、 对数函数和其他通用数学函数提供常数和静态方法。
               此类所属的内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.MemberInfoInitializer">
      <summary>
              定义外部 COM 对象必须实现的方法。
               外部 COM 实现使用此接口来公开其对象与 JScript，因为 JScript 需要托管 <see cref="T:System.Reflection.MemberInfo" /> 要绑定到外部对象。
               此接口由实现 <see cref="T:Microsoft.JScript.COMFieldInfo" />, ，<see cref="T:Microsoft.JScript.COMMethodInfo" />, ，和 <see cref="T:Microsoft.JScript.COMPropertyInfo" />。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.MemberInfoList">
      <summary>
              维护的列表 <see cref="T:System.Reflection.MemberInfo" /> 元素。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.MethodInvoker">
      <summary>
              表示特定方法的调用程序。
               使用 <see cref="T:Microsoft.JScript.JSMethodInfo" /> 类用于调用方法。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Missing">
      <summary>
              表示已实例化，但尚未设置其值的变量的值。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Namespace">
      <summary>
              表示一个命名空间。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.NoContextException">
      <summary>
              没有任何代码时引发的异常 <see cref="T:Microsoft.JScript.Context" /> 与关联 <see cref="T:Microsoft.JScript.JScriptException" />。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.NotRecommended">
      <summary>
              指示方法或字段不建议使用。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.NumberConstructor">
      <summary>
              表示基于原型的对象定义的构造函数。
               此类所属的内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.NumberObject">
      <summary>
              表示一个数字对象。
               此类所属的内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.NumberPrototype">
      <summary>
              提供用于静态方法和属性 <see cref="T:Microsoft.JScript.NumberObject" /> 对象。
               通过传入到正在请求对方法的访问的对象引用来调用此类的所有方法。
               此类所属的内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.NumericBinary">
      <summary>
              对数值操作数执行的二元运算。
               此类所属的抽象语法树类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.NumericUnary">
      <summary>
              执行上数值操作数的一元运算。
               此类所属的抽象语法树类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.ObjectConstructor">
      <summary>
              表示基于原型的对象定义的构造函数。
               此类所属的内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.ObjectPrototype">
      <summary>
              提供用于静态方法和属性 <see cref="T:Microsoft.JScript.JSObject" /> 对象。
               通过传入到正在请求对方法的访问的对象引用来调用此类的所有方法。
               此类所属的内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Override">
      <summary>
              指示方法或字段重写的方法或在基类中的字段。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Package">
      <summary>
              创建包的 JScript 代码，可使用其他代码。
               此类所属的抽象语法树类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.ParserException">
      <summary>
              此类由 JScript 分析器用于表示分析器异常。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Plus">
      <summary>
              执行加法和串联运算。
               此类所属的抽象语法树类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.PostOrPrefixOperator">
      <summary>
              执行增量和减量操作对应于前缀和后缀语法。
               此类所属的抽象语法树类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.RangeErrorObject">
      <summary>
              表示范围错误。
               例如，如果使用不正确的索引来访问数组元素，可以发生范围错误。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.ReferenceAttribute">
      <summary>
              表示对程序集的引用。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.ReferenceErrorObject">
      <summary>
              表示引用错误。
               例如，当引用未声明的变量时，可以发生引用错误。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.RegExpConstructor">
      <summary>
              表示基于原型的对象定义的构造函数。
               此类所属的内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.RegExpMatch">
      <summary>
              表示正则表达式匹配的结果。
               此类所属的内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.RegExpObject">
      <summary>
              表示正则表达式对象。
               此类所属的内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.RegExpPrototype">
      <summary>
              提供用于静态方法和属性 <see cref="T:Microsoft.JScript.RegExpObject" /> 对象。
               通过传入到正在请求对方法的访问的对象引用来调用此类的所有方法。
               此类所属的内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Relational">
      <summary>
              执行关系比较操作。
               此类所属的抽象语法树类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.ReturnOutOfFinally">
      <summary>
              表示异常状态，当代码执行返回外 <see langword="finally" /> 块。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Runtime">
      <summary>
              提供实用工具函数。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.ScriptBlock">
      <summary>
              表示 JScript 代码的块。
               此类所属的抽象语法树类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.ScriptFunction">
      <summary>
              表示基于原型的对象定义的构造函数。
               大多数构造函数的类，如 <see cref="T:Microsoft.JScript.DateConstructor" />, ，<see cref="T:Microsoft.JScript.NumberConstructor" />, ，<see cref="T:Microsoft.JScript.StringConstructor" />, ，和 <see cref="T:Microsoft.JScript.ObjectConstructor" />, ，从此类继承的。
               此类所属的对象和函数的类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.ScriptObject">
      <summary>
              支持的所有 JScript 类。
               这是所有 JScript 类的最终基类。
               此类所属的对象和函数的类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.ScriptStream">
      <summary>
              表示数据的流。
               此类将其数据发送至任一 <see cref="T:Microsoft.JScript.COMCharStream" /> 或 <see cref="T:System.Console" /> 流。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.SimpleHashtable">
      <summary>
              项的内部存储哈希表。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.SourceState">
      <summary>
              指定源代码文本的状态。
               此类是与其他类提供信息以用颜色在编辑器中的 JScript 代码一起使用。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.SourceState.STATE_COLOR_NORMAL">
      <summary>
              普通文本。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.SourceState.STATE_COLOR_COMMENT">
      <summary>
              注释文本。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.SourceState.STATE_COLOR_STRING">
      <summary>
              字符串文本。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.StackFrame">
      <summary>
              表示用于执行代码的堆栈帧。
               此类包含用于解析作用域的方法。
               它属于编译和运行时状态类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.StrictEquality">
      <summary>
              执行比较操作。
               此类所属的抽象语法树类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.StringConstructor">
      <summary>
              表示基于原型的对象定义的构造函数。
               此类所属的内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.StringObject">
      <summary>
              表示字符串对象。
               此类所属的内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.StringPrototype">
      <summary>
              提供用于静态方法和属性 <see cref="T:Microsoft.JScript.StringObject" /> 对象。
               通过传入到正在请求对方法的访问的对象引用来调用此类的所有方法。
               此类所属的内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.SuperTypeMembersSorter">
      <summary>
              将存储从基类，这些类和接口的成员。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.SyntaxErrorObject">
      <summary>
              表示语法错误。
               例如时忽略分号,，可以发生语法错误。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Throw">
      <summary>
              引发异常。
               此类所属的抽象语法树类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.TokenColor">
      <summary>
              指定对文本着色在编辑器中时，应具有单个代码单元的颜色。
               通过使用此枚举的成员 <see cref="P:Microsoft.JScript.ITokenColorInfo.Color" /> 属性 <see cref="T:Microsoft.JScript.ITokenColorInfo" /> 对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.TokenColor.COLOR_TEXT">
      <summary>
              表示文本的代码单元的颜色。
               这是默认值。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.TokenColor.COLOR_IDENTIFIER">
      <summary>
              表示一个标识符的代码单元的颜色。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.TokenColor.COLOR_KEYWORD">
      <summary>
              表示一个关键字的代码单元的颜色。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.TokenColor.COLOR_COMMENT">
      <summary>
              表示一个注释的代码单元的颜色。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.TokenColor.COLOR_OPERATOR">
      <summary>
              表示一个运算符的代码单元的颜色。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.TokenColor.COLOR_NUMBER">
      <summary>
              表示数字文字的代码单元的颜色。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.TokenColor.COLOR_STRING">
      <summary>
              表示字符串文字的代码单元的颜色。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.TokenColor.COLOR_CONDITIONAL_COMP">
      <summary>
              未使用。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Try">
      <summary>
              识别错误处理作用域中运行代码的块。
               此类所属的抽象语法树类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.TypedArray">
      <summary>
              表示对却引用 <see cref="T:System.Array" /> 类。
               此类存储的类型化数组的元素类型，但此类不存储数据。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.TypeErrorObject">
      <summary>
              表示类型错误。
               例如，一种类型的对象传递给需要另一种类型的对象的方法时，可以发生类型错误。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Typeof">
      <summary>
              确定对象的数据类型。
               此类所属的抽象语法树类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.TypeReflector">
      <summary>
              提供的实现 <see cref="M:Microsoft.JScript.TypeReflector.GetMember(System.String,System.Reflection.BindingFlags)" /> 的速度快于 <see cref="M:System.Type.GetMember(System.String,System.Reflection.BindingFlags)" />。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.UnaryOp">
      <summary>
              表示类的基类，用于执行操作的类单一操作数，如 <see cref="T:Microsoft.JScript.Typeof" /> 和 <see cref="T:Microsoft.JScript.PostOrPrefixOperator" />。
               此类所属的抽象语法树类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.URIErrorObject">
      <summary>
              表示统一资源标识符 (URI) 错误。
               例如，URI 错误会 when you try to 进行编码或解码的 URI。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.VBArrayConstructor">
      <summary>
              表示基于原型的对象定义的构造函数。
               此类所属的内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.VBArrayObject">
      <summary>
              表示 VBArray 对象。
               此类所属的内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.VBArrayPrototype">
      <summary>
              提供用于静态方法和属性 <see cref="T:Microsoft.JScript.VBArrayObject" /> 对象。
               通过传入到正在请求对方法的访问的对象引用来调用此类的所有方法。
               此类所属的内置对象模型类别。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Vsa.BaseVsaEngine">
      <summary>
              实现 <see cref="T:Microsoft.JScript.Vsa.IJSVsaEngine" /> 接口。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Vsa.BaseVsaEngine.Pre">
      <summary>
              提供枚举为 <see cref="T:Microsoft.JScript.Vsa.BaseVsaEngine" /> 类。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.None">
      <summary>
              未不设置任何引擎。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.EngineNotClosed">
      <summary>
              该引擎不会关闭。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.SupportForDebug">
      <summary>
              调试功能已打开。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.EngineCompiled">
      <summary>
              编译该引擎。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.EngineRunning">
      <summary>
              引擎运行。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.EngineNotRunning">
      <summary>
              该引擎未运行。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.RootMonikerSet">
      <summary>
              设置根名字对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.RootMonikerNotSet">
      <summary>
              未设置的根名字对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.RootNamespaceSet">
      <summary>
              设置的根命名空间。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.SiteSet">
      <summary>
              站点设置。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.SiteNotSet">
      <summary>
              未设置该站点。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.EngineInitialised">
      <summary>
              初始化的引擎。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.EngineNotInitialised">
      <summary>
              引擎未初始化。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Vsa.BaseVsaSite">
      <summary>
              启用主机与脚本引擎之间的通信。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Vsa.BaseVsaStartup">
      <summary>
              用于启动和重置基 VSA 引擎。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Vsa.IJSVsaCodeItem">
      <summary>
              表示要通过脚本引擎编译的代码项。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Vsa.IJSVsaEngine">
      <summary>
              定义脚本引擎必须支持的方法和属性，并提供对脚本引擎的编程访问。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Vsa.IJSVsaError">
      <summary>
              提供在执行过程中遇到的编译错误的访问。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Vsa.IJSVsaGlobalItem">
      <summary>
              介绍添加到脚本引擎中的全局对象。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Vsa.IJSVsaItem">
      <summary>
              为所有添加到 .NET 脚本引擎的项定义一个接口，包括代码项、引用项和全局项。
               它定义应用于该引擎识别的所有项类型的泛型属性和方法。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Vsa.IJSVsaItems">
      <summary>
              定义 <see cref="T:Microsoft.JScript.Vsa.IJSVsaItem" /> 对象集合的接口，可通过名称或索引对其进行定位。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Vsa.IJSVsaPersistSite">
      <summary>
              对项目持久性进行管理，并对使用由宿主实现的保存和加载操作的代码和其他项进行存储和检索。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Vsa.IJSVsaReferenceItem">
      <summary>
              描述一个添加到脚本引擎的引用。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Vsa.IJSVsaSite">
      <summary>
              启用主机与脚本引擎之间的通信。
               该接口由主机实现。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Vsa.JSVsaError">
      <summary>
              定义可由 .NET 脚本引擎引发的异常集。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.AppDomainCannotBeSet">
      <summary>
              值：0x80133000 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.AppDomainInvalid">
      <summary>
              值：0x80133001 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ApplicationBaseCannotBeSet">
      <summary>
              值：0x80133002 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ApplicationBaseInvalid">
      <summary>
              值：0x80133003 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.AssemblyExpected">
      <summary>
              值：0x80133004 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.AssemblyNameInvalid">
      <summary>
              值：0x80133005 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.BadAssembly">
      <summary>
              值：0x80133006 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.CachedAssemblyInvalid">
      <summary>
              值：0x80133007 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.CallbackUnexpected">
      <summary>
              值：0x80133008 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.CodeDOMNotAvailable">
      <summary>
              值：0x80133009 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.CompiledStateNotFound">
      <summary>
              值：0x8013300A 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.DebugInfoNotSupported">
      <summary>
              值：0x8013300B 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ElementNameInvalid">
      <summary>
              值：0x8013300C 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ElementNotFound">
      <summary>
              值：0x8013300D 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineBusy">
      <summary>
              值：0x8013300E 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineCannotClose">
      <summary>
              值：0x8013300F 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineCannotReset">
      <summary>
              值：0x80133010 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineClosed">
      <summary>
              值：0x80133011 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineEmpty">
      <summary>
              值：0x80133012 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineInitialized">
      <summary>
              值：0x80133013 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineNameInUse">
      <summary>
              值：0x80133014 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineNotCompiled">
      <summary>
              值：0x80133015 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineNotInitialized">
      <summary>
              值：0x80133016 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineNotRunning">
      <summary>
              值：0x80133017 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineRunning">
      <summary>
              值：0x80133018 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EventSourceInvalid">
      <summary>
              值：0x80133019 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EventSourceNameInUse">
      <summary>
              值：0x8013301A 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EventSourceNameInvalid">
      <summary>
              值：0x8013301B 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EventSourceNotFound">
      <summary>
              值：0x8013301C 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EventSourceTypeInvalid">
      <summary>
              值：0x8013301D 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.GetCompiledStateFailed">
      <summary>
              值：0x8013301E 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.GlobalInstanceInvalid">
      <summary>
              值：0x8013301F 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.GlobalInstanceTypeInvalid">
      <summary>
              值：0x80133020 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.InternalCompilerError">
      <summary>
              值：0x80133021 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ItemCannotBeRemoved">
      <summary>
              值：0x80133022 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ItemFlagNotSupported">
      <summary>
              值：0x80133023 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ItemNameInUse">
      <summary>
              值：0x80133024 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ItemNameInvalid">
      <summary>
              值：0x80133025 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ItemNotFound">
      <summary>
              值：0x80133026 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ItemTypeNotSupported">
      <summary>
              值：0x80133027 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.LCIDNotSupported">
      <summary>
              值：0x80133028 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.LoadElementFailed">
      <summary>
              值：0x80133029 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.NotificationInvalid">
      <summary>
              值：0x8013302A 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.OptionInvalid">
      <summary>
              值：0x8013302B 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.OptionNotSupported">
      <summary>
              值：0x8013302C 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.RevokeFailed">
      <summary>
              值：0x8013302D 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.RootMonikerAlreadySet">
      <summary>
              值：0x8013302E 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.RootMonikerInUse">
      <summary>
              值：0x8013302F 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.RootMonikerInvalid">
      <summary>
              值：0x80133030 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.RootMonikerNotSet">
      <summary>
              值：0x80133031 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.RootMonikerProtocolInvalid">
      <summary>
              值：0x80133032 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.RootNamespaceInvalid">
      <summary>
              值：0x80133033 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.RootNamespaceNotSet">
      <summary>
              值：0x80133034 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.SaveCompiledStateFailed">
      <summary>
              值：0x80133035 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.SaveElementFailed">
      <summary>
              值：0x80133036 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.SiteAlreadySet">
      <summary>
              值：0x80133037 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.SiteInvalid">
      <summary>
              值：0x80133038 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.SiteNotSet">
      <summary>
              值：0x80133039 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.SourceItemNotAvailable">
      <summary>
              值：0x8013303A 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.SourceMonikerNotAvailable">
      <summary>
              值：0x8013303B 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.URLInvalid">
      <summary>
              值：0x8013303C 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.BrowserNotExist">
      <summary>
              值：0x8013303D 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.DebuggeeNotStarted">
      <summary>
              值：0x8013303E 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineNameInvalid">
      <summary>
              值：0x8013303F 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineNotExist">
      <summary>
              值：0x80133040 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.FileFormatUnsupported">
      <summary>
              值：0x80133041 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.FileTypeUnknown">
      <summary>
              值：0x80133042 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ItemCannotBeRenamed">
      <summary>
              值：0x80133043 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.MissingSource">
      <summary>
              值：0x80133044 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.NotInitCompleted">
      <summary>
              值：0x80133045 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.NameTooLong">
      <summary>
              值：0x80133046 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ProcNameInUse">
      <summary>
              值：0x80133047 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ProcNameInvalid">
      <summary>
              值：0x80133048 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.VsaServerDown">
      <summary>
              值：0x80133049 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.MissingPdb">
      <summary>
              值：0x8013304A 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.NotClientSideAndNoUrl">
      <summary>
              值：0x8013304B 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.CannotAttachToWebServer">
      <summary>
              值：0x8013304C 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineNameNotSet">
      <summary>
              值：0x8013303F 
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.UnknownError">
      <summary>
              值：0x801330FF 
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Vsa.JSVsaException">
      <summary>
              此类型支持 .NET Framework 基础结构，不能在代码中直接使用。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Vsa.JSVsaItemFlag">
      <summary>
              将代码项的类型标识为“类”、“模块”或“无”。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaItemFlag.None">
      <summary>
              在代码项是一个类时使用。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaItemFlag.Module">
      <summary>
              在代码项是一个模块时使用。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaItemFlag.Class">
      <summary>
              使用泛型的代码项时或者当项类型不接受标志。
               在这种情况下，不需要任何特殊标志以创建的项。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Vsa.JSVsaItemType">
      <summary>
              表示项的类型。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaItemType.Reference">
      <summary>
              用于添加对的外部.NET 程序集，然后从代码中引用的引用。
               此类型用于创建 IJSVsaReferenceItem 对象
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaItemType.AppGlobal">
      <summary>
              用于将一个全局对象添加到.NET 脚本引擎。
               此类型用于创建 IJSVsaGlobalItem 对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaItemType.Code">
      <summary>
              用于创建代码项目来存储.NET 脚本引擎的源代码。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Vsa.ResInfo">
      <summary>
              此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.Vsa.VsaEngine">
      <summary>
              实现 <see cref="T:Microsoft.Vsa.IVsaEngine" /> 接口。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.VsaItem">
      <summary>
              表示项添加到.NET 脚本引擎。
               这包括代码项、 引用项和全局项。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.VsaItems">
      <summary>
              表示一套 <see cref="T:Microsoft.Vsa.IVsaItem" /> 可以按名称或索引进行寻址的对象。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.VSAITEMTYPE2">
      <summary>
              扩展 <see cref="T:Microsoft.Vsa.VsaItemType" /> 枚举。
               提供程序 IActiveScript 宿主所需的额外功能。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.VSAITEMTYPE2.None">
      <summary>
              指定 none。
               这是默认值。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.VSAITEMTYPE2.HOSTOBJECT">
      <summary>
              指定虚拟主机对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.VSAITEMTYPE2.HOSTSCOPE">
      <summary>
              指定范围。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.VSAITEMTYPE2.HOSTSCOPEANDOBJECT">
      <summary>
              指定的范围，该对象。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.VSAITEMTYPE2.SCRIPTSCOPE">
      <summary>
              指定的脚本作用域。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.VSAITEMTYPE2.SCRIPTBLOCK">
      <summary>
              指定脚本块。
               这适用于 <see cref="T:Microsoft.JScript.IVsaScriptCodeItem" />。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.VSAITEMTYPE2.STATEMENT">
      <summary>
              指定的单个语句。
               这适用于 <see cref="T:Microsoft.JScript.IVsaScriptCodeItem" />。
            </summary>
    </member>
    <member name="F:Microsoft.JScript.VSAITEMTYPE2.EXPRESSION">
      <summary>
              指定一个表达式。
               这适用于 <see cref="T:Microsoft.JScript.IVsaScriptCodeItem" />。
            </summary>
    </member>
    <member name="T:Microsoft.JScript.With">
      <summary>
              表示 <see langword="with" /> 语句。
               此类所属的抽象语法树类别。
            </summary>
    </member>
  </members>
</doc>