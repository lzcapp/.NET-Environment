<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Configuration</name>
  </assembly>
  <members>
    <member name="E:System.Configuration.Internal.IInternalConfigRoot.ConfigChanged">
      <summary>表示用于处理的方法 <see cref="E:System.Configuration.Internal.IInternalConfigRoot.ConfigChanged" /> 事件 <see cref="T:System.Configuration.Internal.IInternalConfigRoot" /> 对象。</summary>
    </member>
    <member name="E:System.Configuration.Internal.IInternalConfigRoot.ConfigRemoved">
      <summary>表示用于处理的方法 <see cref="E:System.Configuration.Internal.IInternalConfigRoot.ConfigRemoved" /> 事件 <see cref="T:System.Configuration.Internal.IInternalConfigRoot" /> 对象。</summary>
    </member>
    <member name="F:System.Configuration.ProtectedConfiguration.DataProtectionProviderName">
      <summary>数据保护提供程序的名称。</summary>
    </member>
    <member name="F:System.Configuration.ProtectedConfiguration.ProtectedDataSectionName">
      <summary>受保护的数据部分的名称。</summary>
    </member>
    <member name="F:System.Configuration.ProtectedConfiguration.RsaProviderName">
      <summary>RSA 提供程序的名称。</summary>
    </member>
    <member name="F:System.Configuration.TimeSpanValidatorAttribute.TimeSpanMaxValue">
      <summary>获取允许的绝对最大值。</summary>
    </member>
    <member name="F:System.Configuration.TimeSpanValidatorAttribute.TimeSpanMinValue">
      <summary>获取允许的绝对最小值。</summary>
    </member>
    <member name="M:System.Configuration.AppSettingsSection.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.AppSettingsSection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.CallbackValidator.#ctor(System.Type,System.Configuration.ValidatorCallback)">
      <summary>初始化 <see cref="T:System.Configuration.CallbackValidator" /> 类的新实例。</summary>
      <param name="type">要验证的对象的类型。</param>
      <param name="callback">
        <see cref="T:System.Configuration.ValidatorCallback" /> 用作委托。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type " />是 null。</exception>
    </member>
    <member name="M:System.Configuration.CallbackValidator.CanValidate(System.Type)">
      <summary>确定是否可以验证的对象类型。</summary>
      <param name="type">对象的类型。</param>
      <returns>true 如果 type 参数创建的实例时使用作为第一个参数的类型匹配 <see cref="T:System.Configuration.CallbackValidator" />; 否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.CallbackValidator.Validate(System.Object)">
      <summary>确定某个对象的值是否有效。</summary>
      <param name="value">对象的值。</param>
    </member>
    <member name="M:System.Configuration.CallbackValidatorAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.CallbackValidatorAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.CommaDelimitedStringCollection.#ctor">
      <summary>创建 <see cref="T:System.Configuration.CommaDelimitedStringCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.CommaDelimitedStringCollection.Add(System.String)">
      <summary>将字符串添加到以逗号分隔的集合。</summary>
      <param name="value">字符串值。</param>
    </member>
    <member name="M:System.Configuration.CommaDelimitedStringCollection.AddRange(System.String[])">
      <summary>字符串数组中的所有字符串都添加到集合。</summary>
      <param name="range">要添加到集合的字符串数组。</param>
    </member>
    <member name="M:System.Configuration.CommaDelimitedStringCollection.Clear">
      <summary>清除集合。</summary>
    </member>
    <member name="M:System.Configuration.CommaDelimitedStringCollection.Clone">
      <summary>创建集合的副本。</summary>
      <returns>
        <see cref="T:System.Configuration.CommaDelimitedStringCollection" /> 的副本。</returns>
    </member>
    <member name="M:System.Configuration.CommaDelimitedStringCollection.Insert(System.Int32,System.String)">
      <summary>将字符串元素添加到集合中的指定索引处。</summary>
      <param name="index">将从该处添加新元素的集合中的索引。</param>
      <param name="value">要添加到集合的新元素的值。</param>
    </member>
    <member name="M:System.Configuration.CommaDelimitedStringCollection.Remove(System.String)">
      <summary>从集合中删除字符串元素。</summary>
      <param name="value">要删除的字符串。</param>
    </member>
    <member name="M:System.Configuration.CommaDelimitedStringCollection.SetReadOnly">
      <summary>将集合对象设置为只读的。</summary>
    </member>
    <member name="M:System.Configuration.CommaDelimitedStringCollection.ToString">
      <summary>返回的字符串表示形式的对象。</summary>
      <returns>对象的字符串表示形式。</returns>
    </member>
    <member name="M:System.Configuration.CommaDelimitedStringCollectionConverter.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.CommaDelimitedStringCollectionConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.CommaDelimitedStringCollectionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将 <see cref="T:System.String" /> 对象转换为 <see cref="T:System.Configuration.CommaDelimitedStringCollection" /> 对象。</summary>
      <param name="ctx">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 用于类型转换。</param>
      <param name="ci">
        <see cref="T:System.Globalization.CultureInfo" /> 转换期间使用。</param>
      <param name="data">以逗号分隔 <see cref="T:System.String" /> 将转换。</param>
      <returns>一个 <see cref="T:System.Configuration.CommaDelimitedStringCollection" /> 包含转换后的值。</returns>
    </member>
    <member name="M:System.Configuration.CommaDelimitedStringCollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将 <see cref="T:System.Configuration.CommaDelimitedStringCollection" /> 对象转换为 <see cref="T:System.String" /> 对象。</summary>
      <param name="ctx">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 用于类型转换。</param>
      <param name="ci">
        <see cref="T:System.Globalization.CultureInfo" /> 转换期间使用。</param>
      <param name="value">要转换的值。</param>
      <param name="type">转换类型。</param>
      <returns>
        <see cref="T:System.String" /> 表示转换后 <paramref name="value" /> 参数，它是 <see cref="T:System.Configuration.CommaDelimitedStringCollection" />。</returns>
    </member>
    <member name="M:System.Configuration.Configuration.GetSection(System.String)">
      <summary>返回指定的 <see cref="T:System.Configuration.ConfigurationSection" /> 对象。</summary>
      <param name="sectionName">指向要返回的部分的路径。</param>
      <returns>指定 <see cref="T:System.Configuration.ConfigurationSection" /> 对象。</returns>
    </member>
    <member name="M:System.Configuration.Configuration.GetSectionGroup(System.String)">
      <summary>获取指定 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象。</summary>
      <param name="sectionGroupName">路径名称 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 返回。</param>
      <returns>
        <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 指定。</returns>
    </member>
    <member name="M:System.Configuration.Configuration.Save">
      <summary>包含在此的配置设置写入 <see cref="T:System.Configuration.Configuration" /> 对象传递给当前的 XML 配置文件。</summary>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">无法为写入配置文件。- 或 -配置文件已更改。</exception>
    </member>
    <member name="M:System.Configuration.Configuration.Save(System.Configuration.ConfigurationSaveMode)">
      <summary>包含在此的配置设置写入 <see cref="T:System.Configuration.Configuration" /> 对象传递给当前的 XML 配置文件。</summary>
      <param name="saveMode">一个 <see cref="T:System.Configuration.ConfigurationSaveMode" /> 值，该值确定要保存哪些属性值。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">无法为写入配置文件。- 或 -配置文件已更改。</exception>
    </member>
    <member name="M:System.Configuration.Configuration.Save(System.Configuration.ConfigurationSaveMode,System.Boolean)">
      <summary>包含在此的配置设置写入 <see cref="T:System.Configuration.Configuration" /> 对象传递给当前的 XML 配置文件。</summary>
      <param name="saveMode">一个 <see cref="T:System.Configuration.ConfigurationSaveMode" /> 值，该值确定要保存哪些属性值。</param>
      <param name="forceSaveAll">true 若要保存即使未修改的配置;否则为 false。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">无法为写入配置文件。- 或 -配置文件已更改。</exception>
    </member>
    <member name="M:System.Configuration.Configuration.SaveAs(System.String)">
      <summary>包含在此的配置设置写入 <see cref="T:System.Configuration.Configuration" /> 对象传递给指定的 XML 配置文件。</summary>
      <param name="filename">要保存到该配置文件的路径和文件名称。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">无法为写入配置文件。- 或 -配置文件已更改。</exception>
    </member>
    <member name="M:System.Configuration.Configuration.SaveAs(System.String,System.Configuration.ConfigurationSaveMode)">
      <summary>包含在此的配置设置写入 <see cref="T:System.Configuration.Configuration" /> 对象传递给指定的 XML 配置文件。</summary>
      <param name="filename">要保存到该配置文件的路径和文件名称。</param>
      <param name="saveMode">一个 <see cref="T:System.Configuration.ConfigurationSaveMode" /> 值，该值确定要保存哪些属性值。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">无法为写入配置文件。- 或 -配置文件已更改。</exception>
    </member>
    <member name="M:System.Configuration.Configuration.SaveAs(System.String,System.Configuration.ConfigurationSaveMode,System.Boolean)">
      <summary>包含在此的配置设置写入 <see cref="T:System.Configuration.Configuration" /> 对象传递给指定的 XML 配置文件。</summary>
      <param name="filename">要保存到该配置文件的路径和文件名称。</param>
      <param name="saveMode">一个 <see cref="T:System.Configuration.ConfigurationSaveMode" /> 值，该值确定要保存哪些属性值。</param>
      <param name="forceSaveAll">true 若要保存即使未修改的配置;否则为 false。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="filename" /> 为 null 或空字符串 ("")。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationCollectionAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationCollectionAttribute" /> 类的新实例。</summary>
      <param name="itemType">若要创建的属性集合的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="itemType" /> 为 null。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationConverterBase.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationConverterBase" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationConverterBase.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否允许转换。</summary>
      <param name="ctx">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 用于类型转换的对象。</param>
      <param name="type">
        <see cref="T:System.Type" /> 将从转换。</param>
      <returns>true 如果允许此转换;否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationConverterBase.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否允许转换。</summary>
      <param name="ctx">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 用于类型转换的对象。</param>
      <param name="type">要转换为的类型。</param>
      <returns>true 如果允许此转换;否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
      <summary>从配置文件读取 XML。</summary>
      <param name="reader">用于读取配置文件的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="serializeCollectionKey">如果只序列化集合键属性，则为 true；否则为 false。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">要读取的元素被锁定。- 或 -无法识别当前节点的属性。- 或 -无法确定当前节点的锁定状态。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.Equals(System.Object)">
      <summary>比较当前 <see cref="T:System.Configuration.ConfigurationElement" /> 实例与指定的对象。</summary>
      <param name="compareTo">要与进行比较的对象。</param>
      <returns>true 要与进行比较的对象是否等于当前 <see cref="T:System.Configuration.ConfigurationElement" /> 实例; 否则为 false。 默认值为 false。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.GetHashCode">
      <summary>获取表示当前的唯一值 <see cref="T:System.Configuration.ConfigurationElement" /> 实例。</summary>
      <returns>唯一的值，表示当前 <see cref="T:System.Configuration.ConfigurationElement" /> 实例。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.GetTransformedAssemblyString(System.String)">
      <summary>返回指定的程序集名称的转换的版本。</summary>
      <param name="assemblyName">程序集的名称。</param>
      <returns>转换的版本，该程序集名称。 如果没有转换器可用，则 <paramref name="assemblyName" /> 原样返回参数值。<see cref="P:System.Configuration.Configuration.TypeStringTransformer" /> 属性是 null 没有转换器是否可用。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.GetTransformedTypeString(System.String)">
      <summary>返回指定的类型名称的转换的版本。</summary>
      <param name="typeName">类型的名称。</param>
      <returns>指定的类型名称转换的版本。 如果没有转换器可用，则 <paramref name="typeName" /> 原样返回参数值。<see cref="P:System.Configuration.Configuration.TypeStringTransformer" /> 属性是 null 没有转换器是否可用。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.Init">
      <summary>集 <see cref="T:System.Configuration.ConfigurationElement" /> 对象传递给它的初始状态。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.InitializeDefault">
      <summary>用来初始化一组默认值的 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.IsModified">
      <summary>指示自上次保存或加载该配置元素后并在派生类中实现该元素时，该元素是否已被修改。</summary>
      <returns>如果该元素已被修改，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.IsReadOnly">
      <summary>获取一个值，该值指示是否 <see cref="T:System.Configuration.ConfigurationElement" /> 对象是只读的。</summary>
      <returns>true 如果 <see cref="T:System.Configuration.ConfigurationElement" /> 对象是只读的; 否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.ListErrors(System.Collections.IList)">
      <summary>在此添加无效属性错误 <see cref="T:System.Configuration.ConfigurationElement" /> 对象，以及所有子元素，到传递的列表。</summary>
      <param name="errorList">一个实现 <see cref="T:System.Collections.IList" /> 接口的对象。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
      <summary>获取一个值，该值指示是否在反序列化过程中遇到未知的属性。</summary>
      <param name="name">无法识别的属性的名称。</param>
      <param name="value">无法识别的属性的值。</param>
      <returns>如果反序列化过程中遇到未知属性，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
      <summary>获取一个值，该值指示是否在反序列化过程中遇到未知的元素。</summary>
      <param name="elementName">未知子元素的名称。</param>
      <param name="reader">用于反序列化的 <see cref="T:System.Xml.XmlReader" />。</param>
      <returns>如果反序列化期间遇到未知元素，则为 true；否则为 false。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">标识的元素 <paramref name="elementName" /> 处于锁定状态。- 或 -一个或多个元素的属性被锁定。- 或 -<paramref name="elementName" /> 无法识别，或该元素有无法识别的特性。- 或 -元素具有一个 Boolean 属性具有无效的值。- 或 -尝试反序列化属性一次以上。- 或 -尝试反序列化不是有效的元素的成员的属性。- 或 -该元素不能包含 CDATA 或文本元素。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(System.String)">
      <summary>找不到所需的属性时，将引发异常。</summary>
      <param name="name">找不到所需特性的名称。</param>
      <returns>无。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">在所有情况下。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.PostDeserialize">
      <summary>反序列化后调用。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.PreSerialize(System.Xml.XmlWriter)">
      <summary>在序列化之前调用。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> 将用于序列化 <see cref="T:System.Configuration.ConfigurationElement" />。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.Reset(System.Configuration.ConfigurationElement)">
      <summary>重置 <see cref="T:System.Configuration.ConfigurationElement" /> 对象的内部状态，包括锁和属性集合。</summary>
      <param name="parentElement">配置元素的父节点。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.ResetModified">
      <summary>值重置 <see cref="M:System.Configuration.ConfigurationElement.IsModified" /> 方法 false 派生类中实现时。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.SerializeElement(System.Xml.XmlWriter,System.Boolean)">
      <summary>此配置元素的内容写入配置文件在派生类中实现时。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> ，它将写入到配置文件。</param>
      <param name="serializeCollectionKey">如果只序列化集合键属性，则为 true；否则为 false。</param>
      <returns>如果实际序列化所有数据，则为 true；否则为 false。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">当前属性被锁定在较高的配置级别。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.SerializeToXmlElement(System.Xml.XmlWriter,System.String)">
      <summary>将此配置元素的外部标记写入配置文件在派生类中实现时。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> ，它将写入到配置文件。</param>
      <param name="elementName">要写入的 <see cref="T:System.Configuration.ConfigurationElement" /> 的名称。</param>
      <returns>true 如果写入成功;否则为 false。</returns>
      <exception cref="T:System.Exception">该元素具有多个子元素。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.SetPropertyValue(System.Configuration.ConfigurationProperty,System.Object,System.Boolean)">
      <summary>将属性设置为指定的值。</summary>
      <param name="prop">要设置的元素属性。</param>
      <param name="value">要赋给该属性的值。</param>
      <param name="ignoreLocks">true 如果应该忽略的属性上的锁;否则为 false。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">如果该元素是只读的则会发生或 <paramref name="ignoreLocks" /> 是 true 但不能忽略锁定。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.SetReadOnly">
      <summary>集 <see cref="M:System.Configuration.ConfigurationElement.IsReadOnly" /> 属性 <see cref="T:System.Configuration.ConfigurationElement" /> 对象及所有子元素。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
      <summary>修改 <see cref="T:System.Configuration.ConfigurationElement" /> 对象以移除所有不应该保存的值。</summary>
      <param name="sourceElement">当前级别上包含属性的合并视图的 <see cref="T:System.Configuration.ConfigurationElement" />。</param>
      <param name="parentElement">父级 <see cref="T:System.Configuration.ConfigurationElement" /> 或 null（如果为顶层）。</param>
      <param name="saveMode">用于确定要包括哪些属性值的 <see cref="T:System.Configuration.ConfigurationSaveMode" />。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.#ctor(System.Collections.IComparer)">
      <summary>创建 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 类的新实例。</summary>
      <param name="comparer">
        <see cref="T:System.Collections.IComparer" /> 要使用比较器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparer" /> 为 null。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.BaseAdd(System.Configuration.ConfigurationElement)">
      <summary>向 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 添加配置元素。</summary>
      <param name="element">要添加的 <see cref="T:System.Configuration.ConfigurationElement" />。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.BaseAdd(System.Configuration.ConfigurationElement,System.Boolean)">
      <summary>将一个配置元素添加到配置元素集合。</summary>
      <param name="element">要添加的 <see cref="T:System.Configuration.ConfigurationElement" />。</param>
      <param name="throwIfExists">true 如果引发异常 <see cref="T:System.Configuration.ConfigurationElement" /> 指定已包含在 <see cref="T:System.Configuration.ConfigurationElementCollection" />; 否则为 false。</param>
      <exception cref="T:System.Exception">
        <see cref="T:System.Configuration.ConfigurationElement" /> 若要添加已存在于 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 和 <paramref name="throwIfExists" /> 参数是 true。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.BaseAdd(System.Int32,System.Configuration.ConfigurationElement)">
      <summary>将一个配置元素添加到配置元素集合。</summary>
      <param name="index">要添加指定的索引位置 <see cref="T:System.Configuration.ConfigurationElement" />。</param>
      <param name="element">要添加的 <see cref="T:System.Configuration.ConfigurationElement" />。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.BaseClear">
      <summary>从集合中移除所有配置元素对象。</summary>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">配置是只读的。- 或 -收集项已在更高级别的配置中已锁定。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.BaseGet(System.Int32)">
      <summary>获取位于指定的索引位置的配置元素。</summary>
      <param name="index">索引位置 <see cref="T:System.Configuration.ConfigurationElement" /> 返回。</param>
      <returns>位于指定索引处的 <see cref="T:System.Configuration.ConfigurationElement" />。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="index" /> 小于 0。- 或 -有没有 <see cref="T:System.Configuration.ConfigurationElement" /> 指定 <paramref name="index" />。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.BaseGet(System.Object)">
      <summary>返回具有指定键的配置元素。</summary>
      <param name="key">要返回的元素的键。</param>
      <returns>
        <see cref="T:System.Configuration.ConfigurationElement" /> 具有指定键; 否则为 null。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.BaseGetAllKeys">
      <summary>返回一个数组中包含的配置元素的所有键 <see cref="T:System.Configuration.ConfigurationElementCollection" />。</summary>
      <returns>一个数组，包含键的所有 <see cref="T:System.Configuration.ConfigurationElement" /> 中所含对象 <see cref="T:System.Configuration.ConfigurationElementCollection" />。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.BaseGetKey(System.Int32)">
      <summary>获取的密钥 <see cref="T:System.Configuration.ConfigurationElement" /> 中指定的索引位置。</summary>
      <param name="index">索引位置 <see cref="T:System.Configuration.ConfigurationElement" />。</param>
      <returns>为指定的密钥 <see cref="T:System.Configuration.ConfigurationElement" />。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="index" /> 小于 0。- 或 -有没有 <see cref="T:System.Configuration.ConfigurationElement" /> 指定 <paramref name="index" />。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.BaseIndexOf(System.Configuration.ConfigurationElement)">
      <summary>指示指定的索引 <see cref="T:System.Configuration.ConfigurationElement" />。</summary>
      <param name="element">
        <see cref="T:System.Configuration.ConfigurationElement" /> 的指定的索引位置。</param>
      <returns>指定的索引 <see cref="T:System.Configuration.ConfigurationElement" />; 否则为-1。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.BaseIsRemoved(System.Object)">
      <summary>指示是否 <see cref="T:System.Configuration.ConfigurationElement" /> 具有指定键已从 <see cref="T:System.Configuration.ConfigurationElementCollection" />。</summary>
      <param name="key">要检查的元素的键。</param>
      <returns>true 如果 <see cref="T:System.Configuration.ConfigurationElement" /> 与指定的键已被删除; 否则为 false。 默认值为 false。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.BaseRemove(System.Object)">
      <summary>删除 <see cref="T:System.Configuration.ConfigurationElement" /> 集合中。</summary>
      <param name="key">键 <see cref="T:System.Configuration.ConfigurationElement" /> 中删除。</param>
      <exception cref="T:System.Exception">不 <see cref="T:System.Configuration.ConfigurationElement" /> 具有指定键的集合中存在、 已移除元素，或无法删除该元素，因为的值及其 <see cref="P:System.Configuration.ConfigurationProperty.Type" /> 不是 <see cref="F:System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMap" />。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.BaseRemoveAt(System.Int32)">
      <summary>删除 <see cref="T:System.Configuration.ConfigurationElement" /> 中指定的索引位置。</summary>
      <param name="index">索引位置 <see cref="T:System.Configuration.ConfigurationElement" /> 中删除。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">配置是只读的。- 或 -<paramref name="index" /> 是小于 0 或更大的数 <see cref="T:System.Configuration.ConfigurationElement" /> 集合中的对象。- 或 -<see cref="T:System.Configuration.ConfigurationElement" /> 对象被删除。- 或 -值 <see cref="T:System.Configuration.ConfigurationElement" /> 对象已被锁定在较高级别。- 或 -<see cref="T:System.Configuration.ConfigurationElement" /> 对象被继承。- 或 -值 <see cref="T:System.Configuration.ConfigurationElement" /> 对象的 <see cref="P:System.Configuration.ConfigurationProperty.Type" /> 不是 <see cref="F:System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMap" /> 或 <see cref="F:System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMapAlternate" />。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.CopyTo(System.Configuration.ConfigurationElement[],System.Int32)">
      <summary>中的内容复制 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 到一个数组。</summary>
      <param name="array">要的内容复制到数组 <see cref="T:System.Configuration.ConfigurationElementCollection" />。</param>
      <param name="index">从此处开始复制的索引位置。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.CreateNewElement">
      <summary>在派生的类中重写时，创建一个新的 <see cref="T:System.Configuration.ConfigurationElement" />。</summary>
      <returns>一个新创建的 <see cref="T:System.Configuration.ConfigurationElement" />。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.CreateNewElement(System.String)">
      <summary>创建一个新 <see cref="T:System.Configuration.ConfigurationElement" /> 当在派生类中重写。</summary>
      <param name="elementName">名称 <see cref="T:System.Configuration.ConfigurationElement" /> 来创建。</param>
      <returns>一个新 <see cref="T:System.Configuration.ConfigurationElement" /> 具有指定名称。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.Equals(System.Object)">
      <summary>比较 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 到指定的对象。</summary>
      <param name="compareTo">要比较的对象。</param>
      <returns>true 要与进行比较的对象是否等于当前 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 实例; 否则为 false。 默认值为 false。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
      <summary>获取指定的配置元素，当在派生类中重写的元素键。</summary>
      <param name="element">要为其返回键的 <see cref="T:System.Configuration.ConfigurationElement" />。</param>
      <returns>
        <see cref="T:System.Object" /> ，用作指定键 <see cref="T:System.Configuration.ConfigurationElement" />。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.GetEnumerator">
      <summary>获取 <see cref="T:System.Collections.IEnumerator" /> 用于循环访问 <see cref="T:System.Configuration.ConfigurationElementCollection" />。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 用于循环访问 <see cref="T:System.Configuration.ConfigurationElementCollection" />。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.GetHashCode">
      <summary>获取唯一值，该值表示 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 实例。</summary>
      <returns>唯一值，该值表示 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 当前实例。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.IsElementName(System.String)">
      <summary>指示是否指定 <see cref="T:System.Configuration.ConfigurationElement" /> 中存在 <see cref="T:System.Configuration.ConfigurationElementCollection" />。</summary>
      <param name="elementName">要验证的元素的名称。</param>
      <returns>true 如果该元素存在于集合;否则为 false。 默认值为 false。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.IsElementRemovable(System.Configuration.ConfigurationElement)">
      <summary>指示是否指定 <see cref="T:System.Configuration.ConfigurationElement" /> 可以从 <see cref="T:System.Configuration.ConfigurationElementCollection" />。</summary>
      <param name="element">要检查的元素。</param>
      <returns>true 如果指定 <see cref="T:System.Configuration.ConfigurationElement" /> 可以从此删除 <see cref="T:System.Configuration.ConfigurationElementCollection" />; 否则为 false。 默认值为 true。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.IsModified">
      <summary>指示是否此 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 自上次保存或当在派生类中重写时，加载已被修改。</summary>
      <returns>true 如果已修改任何包含的元素，则否则为 false</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.IsReadOnly">
      <summary>指示是否 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 对象为只读模式。</summary>
      <returns>true 如果 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 对象只读; 否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
      <summary>导致配置系统引发异常。</summary>
      <param name="elementName">无法识别的元素的名称。</param>
      <param name="reader">从配置文件读取 XML 输入的流。</param>
      <returns>true 如果成功，则无法识别的元素进行反序列化否则为 false。 默认值为 false。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">中指定的元素 <paramref name="elementName" /> 是 &lt;clear&gt; 元素。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementName" /> 保留的前缀"config"或"lock"开头。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.Reset(System.Configuration.ConfigurationElement)">
      <summary>重置 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 到其未修改的状态，当在派生类中重写。</summary>
      <param name="parentElement">
        <see cref="T:System.Configuration.ConfigurationElement" /> 表示集合的父元素，如果有的话; 否则为 null。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.ResetModified">
      <summary>在派生的类中重写时，将 <see cref="M:System.Configuration.ConfigurationElementCollection.IsModified" /> 属性的值重置为 false。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.SerializeElement(System.Xml.XmlWriter,System.Boolean)">
      <summary>在派生类中重写时，配置文件中的 XML 元素写入配置数据。</summary>
      <param name="writer">将 XML 写入配置文件的输出流。</param>
      <param name="serializeCollectionKey">true 要序列化集合键否则为 false。</param>
      <returns>true 如果 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 成功写入到配置文件。</returns>
      <exception cref="T:System.ArgumentException">一个集合中的元素被添加或替换和保留的前缀"config"或"lock"开头。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.SetReadOnly">
      <summary>集 <see cref="M:System.Configuration.ConfigurationElementCollection.IsReadOnly" /> 属性 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 对象和所有子元素。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>副本 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 到一个数组。</summary>
      <param name="arr">要向其复制此数组 <see cref="T:System.Configuration.ConfigurationElementCollection" />。</param>
      <param name="index">从此处开始复制的索引位置。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
      <summary>反转从配置层次结构的不同级别合并配置信息的效果 </summary>
      <param name="sourceElement">一个 <see cref="T:System.Configuration.ConfigurationElement" /> 当前级别上包含的合并的视图的属性的对象。</param>
      <param name="parentElement">返回当前元素的父 <see cref="T:System.Configuration.ConfigurationElement" /> 对象，如果当前元素为顶级，则返回 null。</param>
      <param name="saveMode">一个可确定要包含哪些属性值的 <see cref="T:System.Configuration.ConfigurationSaveMode" /> 枚举值。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationElementProperty.#ctor(System.Configuration.ConfigurationValidatorBase)">
      <summary>新实例初始化 <see cref="T:System.Configuration.ConfigurationElementProperty" /> 基于提供的参数的类。</summary>
      <param name="validator">一个 <see cref="T:System.Configuration.ConfigurationValidatorBase" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="validator" /> 为 null。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 类的新实例。</summary>
      <param name="info">包含要反序列化的信息的对象。</param>
      <param name="context">有关源或目标的上下文信息。</param>
      <exception cref="T:System.InvalidOperationException">当前类型不是 <see cref="T:System.Configuration.ConfigurationException" /> 或 <see cref="T:System.Configuration.ConfigurationErrorsException" />。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 类的新实例。</summary>
      <param name="message">一条消息，说明为什么这 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 引发了异常。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 类的新实例。</summary>
      <param name="message">一条消息，说明为什么这 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 引发了异常。</param>
      <param name="inner">导致此异常 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 将引发异常。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.#ctor(System.String,System.Exception,System.String,System.Int32)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 类的新实例。</summary>
      <param name="message">一条消息，说明为什么这 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 引发了异常。</param>
      <param name="inner">导致以下情况的内部异常 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 将引发异常。</param>
      <param name="filename">导致以下情况的配置文件的路径 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 将引发异常。</param>
      <param name="line">此配置文件中的行号 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 引发了异常。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.#ctor(System.String,System.Exception,System.Xml.XmlNode)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 类的新实例。</summary>
      <param name="message">一条消息，说明为什么这 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 引发了异常。</param>
      <param name="inner">导致以下情况的内部异常 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 将引发异常。</param>
      <param name="node">
        <see cref="T:System.Xml.XmlNode" /> 对象，它导致以下情况 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 将引发异常。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.#ctor(System.String,System.Exception,System.Xml.XmlReader)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 类的新实例。</summary>
      <param name="message">一条消息，说明为什么这 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 引发了异常。</param>
      <param name="inner">导致以下情况的内部异常 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 将引发异常。</param>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> 对象，它导致以下情况 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 将引发异常。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.#ctor(System.String,System.String,System.Int32)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 类的新实例。</summary>
      <param name="message">一条消息，说明为什么这 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 引发了异常。</param>
      <param name="filename">导致以下情况的配置文件的路径 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 将引发异常。</param>
      <param name="line">此配置文件中的行号 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 引发了异常。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.#ctor(System.String,System.Xml.XmlNode)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 类的新实例。</summary>
      <param name="message">一条消息，说明为什么这 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 引发了异常。</param>
      <param name="node">
        <see cref="T:System.Xml.XmlNode" /> 对象，它导致以下情况 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 将引发异常。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.#ctor(System.String,System.Xml.XmlReader)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 类的新实例。</summary>
      <param name="message">一条消息，说明为什么这 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 引发了异常。</param>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> 对象，它导致以下情况 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 将引发异常。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.GetFilename(System.Xml.XmlNode)">
      <summary>获取到配置文件的路径，从其内部 <see cref="T:System.Xml.XmlNode" /> 从中加载此配置异常引发时。</summary>
      <param name="node">
        <see cref="T:System.Xml.XmlNode" /> 对象，它导致以下情况 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 将引发异常。</param>
      <returns>从其配置文件的路径的内部 <see cref="T:System.Xml.XmlNode" /> 从中加载此配置异常引发时。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.GetFilename(System.Xml.XmlReader)">
      <summary>获取配置文件的路径的内部 <see cref="T:System.Xml.XmlReader" /> 正在读取此配置异常引发时。</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> 对象，它导致以下情况 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 将引发异常。</param>
      <returns>文件内部的配置路径 <see cref="T:System.Xml.XmlReader" /> 异常发生时正在访问的对象。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.GetLineNumber(System.Xml.XmlNode)">
      <summary>获取配置文件中的行号的内部 <see cref="T:System.Xml.XmlNode" /> 表示此配置异常引发时对象。</summary>
      <param name="node">
        <see cref="T:System.Xml.XmlNode" /> 对象，它导致以下情况 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 将引发异常。</param>
      <returns>所包含的配置文件中的行号 <see cref="T:System.Xml.XmlNode" /> 对象时引发此配置异常正在分析。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.GetLineNumber(System.Xml.XmlReader)">
      <summary>获取配置文件中的行号的内部 <see cref="T:System.Xml.XmlReader" /> 此配置异常引发时处理对象。</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> 对象，它导致以下情况 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 将引发异常。</param>
      <returns>在配置中的行号文件 <see cref="T:System.Xml.XmlReader" /> 异常发生时正在访问的对象。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>集 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象与此配置异常发生处的文件名和行号。</summary>
      <param name="info">包含要序列化的信息的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.Configuration.ConfigurationFileMap.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationFileMap" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationFileMap.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Configuration.ConfigurationFileMap" /> 类根据所提供的参数。</summary>
      <param name="machineConfigFilename">计算机配置文件的名称。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationFileMap.Clone">
      <summary>会创建一份现有 <see cref="T:System.Configuration.ConfigurationFileMap" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationFileMap" /> 对象。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationLocation.OpenConfiguration">
      <summary>创建配置对象的实例。</summary>
      <returns>配置对象。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationLockCollection.Add(System.String)">
      <summary>通过将其添加到集合中锁定该配置对象。</summary>
      <param name="name">配置对象的名称。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">发生时 <paramref name="name" /> 与现有的配置对象在集合中不匹配。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationLockCollection.Clear">
      <summary>清除集合中的所有配置对象。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationLockCollection.Contains(System.String)">
      <summary>验证是否已锁定特定的配置对象。</summary>
      <param name="name">要验证的配置对象的名称。</param>
      <returns>true 如果 <see cref="T:System.Configuration.ConfigurationLockCollection" /> 包含指定的配置对象; 否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationLockCollection.CopyTo(System.String[],System.Int32)">
      <summary>将复制整个 <see cref="T:System.Configuration.ConfigurationLockCollection" /> 集合到一维兼容 <see cref="T:System.Array" />, ，从目标数组的指定索引处开始。</summary>
      <param name="array">一维 <see cref="T:System.Array" /> 从复制的元素的目标 <see cref="T:System.Configuration.ConfigurationLockCollection" />。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationLockCollection.GetEnumerator">
      <summary>获取 <see cref="T:System.Collections.IEnumerator" /> 对象，用于循环访问此 <see cref="T:System.Configuration.ConfigurationLockCollection" /> 集合。</summary>
      <returns>一个 <see cref="T:System.Collections.IEnumerator" /> 对象。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationLockCollection.IsReadOnly(System.String)">
      <summary>验证特定的配置对象是只读的。</summary>
      <param name="name">要验证的配置对象的名称。</param>
      <returns>true 如果指定的配置对象中 <see cref="T:System.Configuration.ConfigurationLockCollection" /> 集合是只读的; 否则为 false。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">指定的配置对象不在集合中。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationLockCollection.Remove(System.String)">
      <summary>从集合中移除的配置对象。</summary>
      <param name="name">配置对象的名称。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">发生时 <paramref name="name" /> 与现有的配置对象在集合中不匹配。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationLockCollection.SetFromList(System.String)">
      <summary>锁定一的组基于提供的列表的配置对象。</summary>
      <param name="attributeList">以逗号分隔的字符串。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">中的某个项时发生 <paramref name="attributeList" /> 参数不是有效的可锁定配置属性。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationLockCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>将复制整个 <see cref="T:System.Configuration.ConfigurationLockCollection" /> 集合到一维兼容 <see cref="T:System.Array" />, ，从目标数组的指定索引处开始。</summary>
      <param name="array">一维 <see cref="T:System.Array" /> 从复制的元素的目标 <see cref="T:System.Configuration.ConfigurationLockCollection" /> 集合。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationManager.GetSection(System.String)">
      <summary>检索当前应用程序默认配置的指定配置节。</summary>
      <param name="sectionName">配置节的路径和名称。</param>
      <returns>指定的 <see cref="T:System.Configuration.ConfigurationSection" /> 对象，如果该节不存在，则为 null。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">无法加载配置文件。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationManager.OpenExeConfiguration(System.Configuration.ConfigurationUserLevel)">
      <summary>将当前应用程序的配置文件作为 <see cref="T:System.Configuration.Configuration" /> 对象打开。</summary>
      <param name="userLevel">要打开其配置的 <see cref="T:System.Configuration.ConfigurationUserLevel" />。</param>
      <returns>一个 <see cref="T:System.Configuration.Configuration" /> 对象。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">无法加载配置文件。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationManager.OpenExeConfiguration(System.String)">
      <summary>将指定的客户端配置文件作为 <see cref="T:System.Configuration.Configuration" /> 对象打开。</summary>
      <param name="exePath">可执行 (exe) 文件的路径。</param>
      <returns>一个 <see cref="T:System.Configuration.Configuration" /> 对象。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">无法加载配置文件。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationManager.OpenMachineConfiguration">
      <summary>将当前计算机的配置文件作为 <see cref="T:System.Configuration.Configuration" /> 对象打开。</summary>
      <returns>一个 <see cref="T:System.Configuration.Configuration" /> 对象。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">无法加载配置文件。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel)">
      <summary>将指定客户端配置文件作为 <see cref="T:System.Configuration.Configuration" /> 对象打开，该对象使用指定的文件映射和用户级别。</summary>
      <param name="fileMap">一个 <see cref="T:System.Configuration.ExeConfigurationFileMap" /> 对象，该对象引用代替应用程序的默认配置文件使用的配置文件。</param>
      <param name="userLevel">要打开配置的 <see cref="T:System.Configuration.ConfigurationUserLevel" /> 对象。</param>
      <returns>配置对象。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">无法加载配置文件。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel,System.Boolean)">
      <summary>将指定客户端配置文件作为 <see cref="T:System.Configuration.Configuration" /> 对象打开，该对象使用指定的文件映射、用户级别和预加载选项。</summary>
      <param name="fileMap">一个 <see cref="T:System.Configuration.ExeConfigurationFileMap" /> 对象，该对象引用要使用的配置文件，而非默认应用程序配置文件。</param>
      <param name="userLevel">要打开配置的 <see cref="T:System.Configuration.ConfigurationUserLevel" /> 对象。</param>
      <param name="preLoad">如果预加载所有节组和节，则为 true，否则为 false。</param>
      <returns>配置对象。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">无法加载配置文件。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration(System.Configuration.ConfigurationFileMap)">
      <summary>将计算机配置文件作为 <see cref="T:System.Configuration.Configuration" /> 对象打开，该对象使用指定的文件映射。</summary>
      <param name="fileMap">一个 <see cref="T:System.Configuration.ExeConfigurationFileMap" /> 对象，该对象引用代替应用程序的默认配置文件使用的配置文件。</param>
      <returns>一个 <see cref="T:System.Configuration.Configuration" /> 对象。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">无法加载配置文件。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationManager.RefreshSection(System.String)">
      <summary>刷新命名节，这样在下次检索它时将从磁盘重新读取它。</summary>
      <param name="sectionName">要刷新的节的配置节名称或配置路径和节名称。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationPermission" /> 类的新实例。</summary>
      <param name="state">要授予的权限级别。</param>
      <exception cref="T:System.ArgumentException">值 <paramref name="state" /> 既不是 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> ，也不 <see cref="F:System.Security.Permissions.PermissionState.None" />。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationPermission.Copy">
      <summary>返回一个新 <see cref="T:System.Configuration.ConfigurationPermission" /> 对象具有相同的权限级别。</summary>
      <returns>一个新 <see cref="T:System.Configuration.ConfigurationPermission" /> 具有相同的权限级别。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationPermission.FromXml(System.Security.SecurityElement)">
      <summary>从 XML 中读取的权限状态的值。</summary>
      <param name="securityElement">从中读取的权限状态的配置元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityElement" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Security.SecurityElement.Tag" /> 为给定 <paramref name="securityElement" /> 不等于"IPermission"。</exception>
      <exception cref="T:System.ArgumentException">class 属性给定 <paramref name="securityElement " />等于 null。</exception>
      <exception cref="T:System.ArgumentException">class 属性给定 <paramref name="securityElement" /> 不是类型名称 <see cref="T:System.Configuration.ConfigurationPermission" />。</exception>
      <exception cref="T:System.ArgumentException">version 属性给定 <paramref name="securityElement" /> 不等于 1。</exception>
      <exception cref="T:System.ArgumentException">unrestricted 属性给定 <paramref name="securityElement" /> 既不是 true ，也不 false。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationPermission.Intersect(System.Security.IPermission)">
      <summary>返回逻辑交集 <see cref="T:System.Configuration.ConfigurationPermission" /> 对象和实现一个给定的对象 <see cref="T:System.Security.IPermission" /> 接口。</summary>
      <param name="target">包含执行带交集的权限的对象。</param>
      <returns>逻辑交集 <see cref="T:System.Configuration.ConfigurationPermission" /> 实现的给定对象 <see cref="T:System.Security.IPermission" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 并不类型化为 <see cref="T:System.Configuration.ConfigurationPermission" />。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>比较 <see cref="T:System.Configuration.ConfigurationPermission" /> 具有一个对象，实现对象 <see cref="T:System.Security.IPermission" /> 接口。</summary>
      <param name="target">要比较的对象。</param>
      <returns>true 如果权限状态为否则为 false。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 并不类型化为 <see cref="T:System.Configuration.ConfigurationPermission" />。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationPermission.IsUnrestricted">
      <summary>指示是否的权限状态 <see cref="T:System.Configuration.ConfigurationPermission" /> 对象是 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> 值 <see cref="T:System.Security.Permissions.PermissionState" /> 枚举。</summary>
      <returns>true 如果的权限状态 <see cref="T:System.Configuration.ConfigurationPermission" /> 是 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> 值 <see cref="T:System.Security.Permissions.PermissionState" />; 否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationPermission.ToXml">
      <summary>返回 <see cref="T:System.Security.SecurityElement" /> 具有属性值的对象取决于当前 <see cref="T:System.Configuration.ConfigurationPermission" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Security.SecurityElement" /> 其特性值取决于当前 <see cref="T:System.Configuration.ConfigurationPermission" />。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationPermission.Union(System.Security.IPermission)">
      <summary>返回的逻辑联合 <see cref="T:System.Configuration.ConfigurationPermission" /> 对象和对象实现 <see cref="T:System.Security.IPermission" /> 接口。</summary>
      <param name="target">要执行该并集的对象。</param>
      <returns>逻辑联合 <see cref="T:System.Configuration.ConfigurationPermission" /> 和实现的对象 <see cref="T:System.Security.IPermission" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 并不类型化为 <see cref="T:System.Configuration.ConfigurationPermission" />。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationPermissionAttribute" /> 类的新实例。</summary>
      <param name="action">一个枚举成员所表示的安全操作 <see cref="T:System.Security.Permissions.SecurityAction" />。 确定该属性的权限状态。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationPermissionAttribute.CreatePermission">
      <summary>创建并返回一个对象，实现 <see cref="T:System.Security.IPermission" /> 接口。</summary>
      <returns>返回一个实现 <see cref="T:System.Security.IPermission" /> 的对象。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationProperty.#ctor(System.String,System.Type)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationProperty" /> 类的新实例。</summary>
      <param name="name">配置实体的名称。</param>
      <param name="type">配置实体的类型。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationProperty.#ctor(System.String,System.Type,System.Object)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationProperty" /> 类的新实例。</summary>
      <param name="name">配置实体的名称。</param>
      <param name="type">配置实体的类型。</param>
      <param name="defaultValue">配置实体的默认值。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationProperty.#ctor(System.String,System.Type,System.Object,System.ComponentModel.TypeConverter,System.Configuration.ConfigurationValidatorBase,System.Configuration.ConfigurationPropertyOptions)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationProperty" /> 类的新实例。</summary>
      <param name="name">配置实体的名称。</param>
      <param name="type">配置实体的类型。</param>
      <param name="defaultValue">配置实体的默认值。</param>
      <param name="typeConverter">要应用的转换器的类型。</param>
      <param name="validator">要使用的验证程序。</param>
      <param name="options">
        <see cref="T:System.Configuration.ConfigurationPropertyOptions" /> 枚举值之一。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationProperty.#ctor(System.String,System.Type,System.Object,System.ComponentModel.TypeConverter,System.Configuration.ConfigurationValidatorBase,System.Configuration.ConfigurationPropertyOptions,System.String)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationProperty" /> 类的新实例。</summary>
      <param name="name">配置实体的名称。</param>
      <param name="type">配置实体的类型。</param>
      <param name="defaultValue">配置实体的默认值。</param>
      <param name="typeConverter">要应用的转换器的类型。</param>
      <param name="validator">要使用的验证程序。</param>
      <param name="options">
        <see cref="T:System.Configuration.ConfigurationPropertyOptions" /> 枚举值之一。</param>
      <param name="description">配置实体的说明。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationProperty.#ctor(System.String,System.Type,System.Object,System.Configuration.ConfigurationPropertyOptions)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationProperty" /> 类的新实例。</summary>
      <param name="name">配置实体的名称。</param>
      <param name="type">配置实体的类型。</param>
      <param name="defaultValue">配置实体的默认值。</param>
      <param name="options">
        <see cref="T:System.Configuration.ConfigurationPropertyOptions" /> 枚举值之一。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationPropertyAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationPropertyAttribute" /> 类的新实例。</summary>
      <param name="name">名称 <see cref="T:System.Configuration.ConfigurationProperty" /> 定义对象。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationPropertyCollection.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationPropertyCollection.Add(System.Configuration.ConfigurationProperty)">
      <summary>向集合中添加的配置属性。</summary>
      <param name="property">
        <see cref="T:System.Configuration.ConfigurationProperty" />  添加。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationPropertyCollection.Clear">
      <summary>从集合中移除所有配置属性对象。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationPropertyCollection.Contains(System.String)">
      <summary>指定是否在此集合中包含的配置属性。</summary>
      <param name="name">标识符 <see cref="T:System.Configuration.ConfigurationProperty" /> 验证。</param>
      <returns>true 如果指定 <see cref="T:System.Configuration.ConfigurationProperty" /> 包含在集合; 否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationPropertyCollection.CopyTo(System.Configuration.ConfigurationProperty[],System.Int32)">
      <summary>将此 ConfigurationPropertyCollection 复制到数组。</summary>
      <param name="array">要向其复制的数组。</param>
      <param name="index">若要开始复制处的索引。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationPropertyCollection.GetEnumerator">
      <summary>获取 <see cref="T:System.Collections.IEnumerator" /> 对象应用于集合。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 对象是针对集合</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationPropertyCollection.Remove(System.String)">
      <summary>从集合中移除的配置属性。</summary>
      <param name="name">要移除的 <see cref="T:System.Configuration.ConfigurationProperty" />。</param>
      <returns>true 如果指定 <see cref="T:System.Configuration.ConfigurationProperty" /> 删除; 否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationPropertyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>将此集合复制到一个数组。</summary>
      <param name="array">要复制到数组。</param>
      <param name="index">在此处开始将复制的索引位置。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationSection.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationSection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationSection.DeserializeSection(System.Xml.XmlReader)">
      <summary>从配置文件读取 XML。</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> 对象，该从配置文件中读取对象。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="reader" /> 找不到元素的配置文件中。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationSection.GetRuntimeObject">
      <summary>返回一个自定义对象，当在派生类中重写。</summary>
      <returns>表示部分中的对象。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationSection.IsModified">
      <summary>指示自上次保存或加载在派生类中实现时是否已修改此配置元素。</summary>
      <returns>如果该元素已被修改，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationSection.ResetModified">
      <summary>值重置 <see cref="M:System.Configuration.ConfigurationElement.IsModified" /> 方法 false 派生类中实现时。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationSection.SerializeSection(System.Configuration.ConfigurationElement,System.String,System.Configuration.ConfigurationSaveMode)">
      <summary>创建一个 XML 字符串，该字符串包含未合并的视图的 <see cref="T:System.Configuration.ConfigurationSection" /> 作为单独的节，以向文件中写入的对象。</summary>
      <param name="parentElement">
        <see cref="T:System.Configuration.ConfigurationElement" /> 实例将用作父执行取消合并时。</param>
      <param name="name">要创建的节的名称。</param>
      <param name="saveMode">
        <see cref="T:System.Configuration.ConfigurationSaveMode" /> 写入到字符串时要使用的实例。</param>
      <returns>一个包含分离的视图的 XML 字符串 <see cref="T:System.Configuration.ConfigurationSection" /> 对象。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationSection.ShouldSerializeElementInTargetVersion(System.Configuration.ConfigurationElement,System.String,System.Runtime.Versioning.FrameworkName)">
      <summary>指示指定的目标版本的序列化配置对象层次结构时，是否应序列化指定的元素 .NET Framework。</summary>
      <param name="element">
        <see cref="T:System.Configuration.ConfigurationElement" /> 是序列化的候选版本的对象。</param>
      <param name="elementName">名称 <see cref="T:System.Configuration.ConfigurationElement" /> 对象出现在 XML 中。</param>
      <param name="targetFramework">目标版本 .NET Framework。</param>
      <returns>true 如果 <paramref name="element" /> 应序列化; 否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationSection.ShouldSerializePropertyInTargetVersion(System.Configuration.ConfigurationProperty,System.String,System.Runtime.Versioning.FrameworkName,System.Configuration.ConfigurationElement)">
      <summary>指示指定的目标版本的序列化配置对象层次结构时，是否应序列化指定的属性 .NET Framework。</summary>
      <param name="property">
        <see cref="T:System.Configuration.ConfigurationProperty" /> 是序列化的候选版本的对象。</param>
      <param name="propertyName">名称 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象出现在 XML 中。</param>
      <param name="targetFramework">目标版本 .NET Framework。</param>
      <param name="parentConfigurationElement">该属性的父元素。</param>
      <returns>true 如果 <paramref name="property" /> 应序列化; 否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationSection.ShouldSerializeSectionInTargetVersion(System.Runtime.Versioning.FrameworkName)">
      <summary>指示是否当前 <see cref="T:System.Configuration.ConfigurationSection" /> 实例应进行序列化指定的目标版本的序列化配置对象层次结构时 .NET Framework。</summary>
      <param name="targetFramework">目标版本 .NET Framework。</param>
      <returns>true 如果应序列化当前的部分;否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionCollection.Add(System.String,System.Configuration.ConfigurationSection)">
      <summary>添加 <see cref="T:System.Configuration.ConfigurationSection" /> 对象传递给 <see cref="T:System.Configuration.ConfigurationSectionCollection" /> 对象。</summary>
      <param name="name">要添加部分的名称。</param>
      <param name="section">要添加的部分。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionCollection.Clear">
      <summary>清除此 <see cref="T:System.Configuration.ConfigurationSectionCollection" /> 对象。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionCollection.CopyTo(System.Configuration.ConfigurationSection[],System.Int32)">
      <summary>这会将复制 <see cref="T:System.Configuration.ConfigurationSectionCollection" /> 到一个数组对象。</summary>
      <param name="array">要复制的数组 <see cref="T:System.Configuration.ConfigurationSectionCollection" /> 对象传递给。</param>
      <param name="index">在此处开始将复制的索引位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">长度 <paramref name="array" /> 的值少于 <see cref="P:System.Configuration.ConfigurationSectionCollection.Count" /> 加上 <paramref name="index" />。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionCollection.Get(System.Int32)">
      <summary>获取指定 <see cref="T:System.Configuration.ConfigurationSection" /> 包含在此对象 <see cref="T:System.Configuration.ConfigurationSectionCollection" /> 对象。</summary>
      <param name="index">索引 <see cref="T:System.Configuration.ConfigurationSection" /> 要返回对象。</param>
      <returns>
        <see cref="T:System.Configuration.ConfigurationSection" /> 中指定索引处的对象。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionCollection.Get(System.String)">
      <summary>获取指定 <see cref="T:System.Configuration.ConfigurationSection" /> 包含在此对象 <see cref="T:System.Configuration.ConfigurationSectionCollection" /> 对象。</summary>
      <param name="name">名称 <see cref="T:System.Configuration.ConfigurationSection" /> 要返回对象。</param>
      <returns>
        <see cref="T:System.Configuration.ConfigurationSection" /> 具有指定名称的对象。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 为 null 或空字符串 ("")。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionCollection.GetEnumerator">
      <summary>获取一个枚举器可循环访问此 <see cref="T:System.Configuration.ConfigurationSectionCollection" /> 对象。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 可用于循环访问此 <see cref="T:System.Configuration.ConfigurationSectionCollection" /> 对象。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionCollection.GetKey(System.Int32)">
      <summary>获取指定的键 <see cref="T:System.Configuration.ConfigurationSection" /> 包含在此对象 <see cref="T:System.Configuration.ConfigurationSectionCollection" /> 对象。</summary>
      <param name="index">索引 <see cref="T:System.Configuration.ConfigurationSection" /> 它的键是要返回的对象。</param>
      <returns>键 <see cref="T:System.Configuration.ConfigurationSection" /> 中指定索引处的对象。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>在序列化过程使用由系统。</summary>
      <param name="info">适用 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">适用 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionCollection.Remove(System.String)">
      <summary>移除指定 <see cref="T:System.Configuration.ConfigurationSection" /> 从此对象 <see cref="T:System.Configuration.ConfigurationSectionCollection" /> 对象。</summary>
      <param name="name">要删除的段的名称。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionCollection.RemoveAt(System.Int32)">
      <summary>移除指定 <see cref="T:System.Configuration.ConfigurationSection" /> 从此对象 <see cref="T:System.Configuration.ConfigurationSectionCollection" /> 对象。</summary>
      <param name="index">要删除的部分的索引。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroup.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroup.ForceDeclaration">
      <summary>强制的声明 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroup.ForceDeclaration(System.Boolean)">
      <summary>强制的声明 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象。</summary>
      <param name="force">true 如果 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象必须是写入到该文件; 否则为 false。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象是根节组。- 或 -<see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象都有一个位置。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroup.ShouldSerializeSectionGroupInTargetVersion(System.Runtime.Versioning.FrameworkName)">
      <summary>指示是否当前 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 实例应进行序列化指定的目标版本的序列化配置对象层次结构时 .NET Framework。</summary>
      <param name="targetFramework">目标版本 .NET Framework。</param>
      <returns>true 如果应序列化当前的节组;否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroupCollection.Add(System.String,System.Configuration.ConfigurationSectionGroup)">
      <summary>添加 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象传递给此 <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" /> 对象。</summary>
      <param name="name">名称 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 要添加对象。</param>
      <param name="sectionGroup">
        <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 要添加对象。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroupCollection.Clear">
      <summary>清除集合。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroupCollection.CopyTo(System.Configuration.ConfigurationSectionGroup[],System.Int32)">
      <summary>这会将复制 <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" /> 到一个数组对象。</summary>
      <param name="array">要向其中复制对象的数组。</param>
      <param name="index">在此处开始将复制的索引位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">长度 <paramref name="array" /> 的值少于 <see cref="P:System.Configuration.ConfigurationSectionGroupCollection.Count" /> 加上 <paramref name="index" />。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroupCollection.Get(System.Int32)">
      <summary>获取指定 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 集合中包含的对象。</summary>
      <param name="index">索引 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 要返回对象。</param>
      <returns>
        <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 中指定索引处的对象。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroupCollection.Get(System.String)">
      <summary>获取指定 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 来自集合对象。</summary>
      <param name="name">名称 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 要返回对象。</param>
      <returns>
        <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 具有指定名称的对象。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 为 null 或空字符串 ("")。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroupCollection.GetEnumerator">
      <summary>获取可循环访问的枚举器 <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" /> 对象。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 可用于循环访问 <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" /> 对象。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroupCollection.GetKey(System.Int32)">
      <summary>获取指定的键 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 包含在此对象 <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" /> 对象。</summary>
      <param name="index">它的键是要返回的节组的索引。</param>
      <returns>键 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 中指定索引处的对象。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroupCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>在序列化过程使用由系统。</summary>
      <param name="info">适用 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">适用 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroupCollection.Remove(System.String)">
      <summary>删除 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象名称指定从此 <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" /> 对象。</summary>
      <param name="name">要删除的节组的名称。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroupCollection.RemoveAt(System.Int32)">
      <summary>删除 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 其索引指定从此对象 <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" /> 对象。</summary>
      <param name="index">要删除的节组的索引。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationValidatorAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationValidatorAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationValidatorAttribute.#ctor(System.Type)">
      <summary>新实例初始化 <see cref="T:System.Configuration.ConfigurationValidatorAttribute" /> 类使用指定的验证程序类型。</summary>
      <param name="validator">验证程序类型创建的实例时要使用 <see cref="T:System.Configuration.ConfigurationValidatorAttribute" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="validator" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="validator" /> 不源自 <see cref="T:System.Configuration.ConfigurationValidatorBase" />。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationValidatorBase.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationValidatorBase" /> 类的实例。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationValidatorBase.CanValidate(System.Type)">
      <summary>确定是否可以根据类型验证对象。</summary>
      <param name="type">对象类型。</param>
      <returns>true 如果 <paramref name="type" /> 参数值与预期匹配 type; 否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationValidatorBase.Validate(System.Object)">
      <summary>确定某个对象的值是否有效。</summary>
      <param name="value">对象值。</param>
    </member>
    <member name="M:System.Configuration.ConnectionStringSettings.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ConnectionStringSettings" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.ConnectionStringSettings.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Configuration.ConnectionStringSettings" /> 类的新实例。</summary>
      <param name="name">连接字符串的名称。</param>
      <param name="connectionString">连接字符串。</param>
    </member>
    <member name="M:System.Configuration.ConnectionStringSettings.#ctor(System.String,System.String,System.String)">
      <summary>初始化 <see cref="T:System.Configuration.ConnectionStringSettings" /> 对象的新实例。</summary>
      <param name="name">连接字符串的名称。</param>
      <param name="connectionString">连接字符串。</param>
      <param name="providerName">要使用带有连接字符串的提供程序的名称。</param>
    </member>
    <member name="M:System.Configuration.ConnectionStringSettings.ToString">
      <summary>返回的字符串表示形式的对象。</summary>
      <returns>对象的字符串表示形式。</returns>
    </member>
    <member name="M:System.Configuration.ConnectionStringSettingsCollection.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ConnectionStringSettingsCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.ConnectionStringSettingsCollection.Add(System.Configuration.ConnectionStringSettings)">
      <summary>将 <see cref="T:System.Configuration.ConnectionStringSettings" /> 对象添加到集合中。</summary>
      <param name="settings">一个 <see cref="T:System.Configuration.ConnectionStringSettings" /> 要添加到集合对象。</param>
    </member>
    <member name="M:System.Configuration.ConnectionStringSettingsCollection.Clear">
      <summary>删除所有 <see cref="T:System.Configuration.ConnectionStringSettings" /> 来自集合的对象。</summary>
    </member>
    <member name="M:System.Configuration.ConnectionStringSettingsCollection.IndexOf(System.Configuration.ConnectionStringSettings)">
      <summary>返回所传递的集合索引 <see cref="T:System.Configuration.ConnectionStringSettings" /> 对象。</summary>
      <param name="settings">一个 <see cref="T:System.Configuration.ConnectionStringSettings" /> 集合中的对象。</param>
      <returns>指定的集合索引 <see cref="T:System.Configuration.ConnectionStringSettingsCollection" /> 对象。</returns>
    </member>
    <member name="M:System.Configuration.ConnectionStringSettingsCollection.Remove(System.Configuration.ConnectionStringSettings)">
      <summary>从集合中移除指定的 <see cref="T:System.Configuration.ConnectionStringSettings" /> 对象。</summary>
      <param name="settings">一个 <see cref="T:System.Configuration.ConnectionStringSettings" /> 集合中的对象。</param>
    </member>
    <member name="M:System.Configuration.ConnectionStringSettingsCollection.Remove(System.String)">
      <summary>从集合中移除指定的 <see cref="T:System.Configuration.ConnectionStringSettings" /> 对象。</summary>
      <param name="name">名称 <see cref="T:System.Configuration.ConnectionStringSettings" /> 集合中的对象。</param>
    </member>
    <member name="M:System.Configuration.ConnectionStringSettingsCollection.RemoveAt(System.Int32)">
      <summary>删除 <see cref="T:System.Configuration.ConnectionStringSettings" /> 集合中的指定索引处的对象。</summary>
      <param name="index">索引 <see cref="T:System.Configuration.ConnectionStringSettings" /> 集合中的对象。</param>
    </member>
    <member name="M:System.Configuration.ConnectionStringsSection.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ConnectionStringsSection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.ContextInformation.GetSection(System.String)">
      <summary>提供了一个包含基于指定的节名称的配置节信息的对象。</summary>
      <param name="sectionName">配置部分的名称。</param>
      <returns>包含配置中指定的节的对象。</returns>
    </member>
    <member name="M:System.Configuration.DefaultSection.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.DefaultSection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.DefaultValidator.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.DefaultValidator" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.DefaultValidator.CanValidate(System.Type)">
      <summary>确定是否可以验证对象，基于类型。</summary>
      <param name="type">对象类型。</param>
      <returns>true 正在验证的所有类型。</returns>
    </member>
    <member name="M:System.Configuration.DefaultValidator.Validate(System.Object)">
      <summary>确定某个对象的值是否有效。</summary>
      <param name="value">对象值。</param>
    </member>
    <member name="M:System.Configuration.DpapiProtectedConfigurationProvider.#ctor">
      <summary>使用默认设置初始化 <see cref="T:System.Configuration.DpapiProtectedConfigurationProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.DpapiProtectedConfigurationProvider.Decrypt(System.Xml.XmlNode)">
      <summary>解密传递 <see cref="T:System.Xml.XmlNode" /> 对象。</summary>
      <param name="encryptedNode">
        <see cref="T:System.Xml.XmlNode" /> 对象进行解密。</param>
      <returns>已解密 <see cref="T:System.Xml.XmlNode" /> 对象。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="encryptedNode" /> 没有 <see cref="P:System.Xml.XmlNode.Name" /> 设置为"EncryptedData"和 <see cref="T:System.Xml.XmlNodeType" /> 设置为 <see cref="F:System.Xml.XmlNodeType.Element" />。- 或 -<paramref name="encryptedNode" /> 未不具有子节点命名"CipherData"具有名为"CipherValue"的子节点。- 或 -名为"CipherData"的子节点是空的节点。</exception>
    </member>
    <member name="M:System.Configuration.DpapiProtectedConfigurationProvider.Encrypt(System.Xml.XmlNode)">
      <summary>加密传递 <see cref="T:System.Xml.XmlNode" /> 对象。</summary>
      <param name="node">
        <see cref="T:System.Xml.XmlNode" /> 对象进行加密。</param>
      <returns>已加密的 <see cref="T:System.Xml.XmlNode" /> 对象。</returns>
    </member>
    <member name="M:System.Configuration.DpapiProtectedConfigurationProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>使用默认设置初始化提供程序。</summary>
      <param name="name">要为对象使用的提供程序名称。</param>
      <param name="configurationValues">初始化对象时要使用的值的 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 集合。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="configurationValues" /> 包含无法识别的配置设置。</exception>
    </member>
    <member name="M:System.Configuration.ExeConfigurationFileMap.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ExeConfigurationFileMap" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.ExeConfigurationFileMap.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Configuration.ExeConfigurationFileMap" /> 类通过使用指定的计算机配置文件名称。</summary>
      <param name="machineConfigFileName">计算机配置文件，其中包含的完整物理路径的名称 (例如， c:\Windows\Microsoft.NET\Framework\v2.0.50727\CONFIG\machine.config)。</param>
    </member>
    <member name="M:System.Configuration.ExeConfigurationFileMap.Clone">
      <summary>会创建一份现有 <see cref="T:System.Configuration.ExeConfigurationFileMap" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ExeConfigurationFileMap" /> 对象。</returns>
    </member>
    <member name="M:System.Configuration.GenericEnumConverter.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Configuration.GenericEnumConverter" /> 类的新实例。</summary>
      <param name="typeEnum">要转换的枚举类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeEnum" /> 为 null。</exception>
    </member>
    <member name="M:System.Configuration.GenericEnumConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将转换 <see cref="T:System.String" /> 到 <see cref="T:System.Enum" /> 类型。</summary>
      <param name="ctx">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 用于类型转换的对象。</param>
      <param name="ci">
        <see cref="T:System.Globalization.CultureInfo" /> 转换期间使用的对象。</param>
      <param name="data">
        <see cref="T:System.String" /> 要转换的对象。</param>
      <returns>
        <see cref="T:System.Enum" /> 表示类型 <paramref name="data" /> 参数。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="data" /> 为 null 或空字符串 ("")。- 或 -<paramref name="data" /> 数字字符开头。- 或 -<paramref name="data" /> 包含空白。</exception>
    </member>
    <member name="M:System.Configuration.GenericEnumConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将转换 <see cref="T:System.Enum" /> 类型到 <see cref="T:System.String" /> 值。</summary>
      <param name="ctx">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 用于类型转换的对象。</param>
      <param name="ci">
        <see cref="T:System.Globalization.CultureInfo" /> 转换期间使用的对象。</param>
      <param name="value">要转换的值。</param>
      <param name="type">要转换为的类型。</param>
      <returns>
        <see cref="T:System.String" /> 表示 <paramref name="value" /> 参数。</returns>
    </member>
    <member name="M:System.Configuration.IgnoreSection.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.IgnoreSection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.InfiniteIntConverter.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.InfiniteIntConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.InfiniteIntConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将转换 <see cref="T:System.String" /> 到 <see cref="T:System.Int32" />。</summary>
      <param name="ctx">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 用于类型转换的对象。</param>
      <param name="ci">
        <see cref="T:System.Globalization.CultureInfo" /> 转换期间使用的对象。</param>
      <param name="data">
        <see cref="T:System.String" /> 要转换的对象。</param>
      <returns>
        <see cref="F:System.Int32.MaxValue" />, ，如果 <paramref name="data" /> 参数是 <see cref="T:System.String" /> "无限"; 否则为 <see cref="T:System.Int32" /> 表示 <paramref name="data" /> 参数的整数值。</returns>
    </member>
    <member name="M:System.Configuration.InfiniteIntConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将转换 <see cref="T:System.Int32" />。 若要 <see cref="T:System.String" />。</summary>
      <param name="ctx">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 用于类型转换的对象。</param>
      <param name="ci">
        <see cref="T:System.Globalization.CultureInfo" /> 转换期间使用的对象。</param>
      <param name="value">要转换的值。</param>
      <param name="type">要转换为的类型。</param>
      <returns>
        <see cref="T:System.String" /> "无限"if <paramref name="value" /> 是 <see cref="F:System.Int32.MaxValue" />; 否则为 <see cref="T:System.String" /> 表示 <paramref name="value" /> 参数。</returns>
    </member>
    <member name="M:System.Configuration.InfiniteTimeSpanConverter.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.InfiniteTimeSpanConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.InfiniteTimeSpanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将 <see cref="T:System.String" /> 转换为 <see cref="T:System.TimeSpan" />。</summary>
      <param name="ctx">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 用于类型转换的对象。</param>
      <param name="ci">
        <see cref="T:System.Globalization.CultureInfo" /> 转换期间使用的对象。</param>
      <param name="data">
        <see cref="T:System.String" /> 要转换的对象。</param>
      <returns>
        <see cref="F:System.TimeSpan.MaxValue" />, ，如果 <paramref name="data" /> 参数是 <see cref="T:System.String" /> 无限; 否则为 <see cref="T:System.TimeSpan" /> 表示 <paramref name="data" /> 以分钟为单位的参数。</returns>
    </member>
    <member name="M:System.Configuration.InfiniteTimeSpanConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将 <see cref="T:System.TimeSpan" /> 转换为 <see cref="T:System.String" />。</summary>
      <param name="ctx">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 用于类型转换的对象。</param>
      <param name="ci">
        <see cref="T:System.Globalization.CultureInfo" /> 对象转换期间使用。</param>
      <param name="value">要转换的值。</param>
      <param name="type">转换类型。</param>
      <returns>
        <see cref="T:System.String" /> "无限"if <paramref name="value" /> 参数是 <see cref="F:System.TimeSpan.MaxValue" />; 否则为 <see cref="T:System.String" /> 表示 <paramref name="value" /> 以分钟为单位的参数。</returns>
    </member>
    <member name="M:System.Configuration.IntegerValidator.#ctor(System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.Configuration.IntegerValidator" /> 类的新实例。</summary>
      <param name="minValue">
        <see cref="T:System.Int32" /> 指定最小值的对象。</param>
      <param name="maxValue">
        <see cref="T:System.Int32" /> 对象，它指定的最大值。</param>
    </member>
    <member name="M:System.Configuration.IntegerValidator.#ctor(System.Int32,System.Int32,System.Boolean)">
      <summary>初始化 <see cref="T:System.Configuration.IntegerValidator" /> 类的新实例。</summary>
      <param name="minValue">
        <see cref="T:System.Int32" /> 指定最小值的对象。</param>
      <param name="maxValue">
        <see cref="T:System.Int32" /> 对象，它指定的最大值。</param>
      <param name="rangeIsExclusive">true 若要指定验证范围是独占的。 非独占方式值要验证必须在指定范围内;排他锁意味着它必须是低于最小值或高于最大值。</param>
    </member>
    <member name="M:System.Configuration.IntegerValidator.#ctor(System.Int32,System.Int32,System.Boolean,System.Int32)">
      <summary>初始化 <see cref="T:System.Configuration.IntegerValidator" /> 类的新实例。</summary>
      <param name="minValue">
        <see cref="T:System.Int32" /> 对象，它指定的整数值的最小长度。</param>
      <param name="maxValue">
        <see cref="T:System.Int32" /> 对象，它指定的整数值的最大长度。</param>
      <param name="rangeIsExclusive">一个 <see cref="T:System.Boolean" /> 值，该值指定是否验证范围是独占的。</param>
      <param name="resolution">
        <see cref="T:System.Int32" /> 对象，它指定一个值，必须匹配。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="resolution" /> 小于 0。- 或 -<paramref name="minValue" /> 大于 <paramref name="maxValue" />。</exception>
    </member>
    <member name="M:System.Configuration.IntegerValidator.CanValidate(System.Type)">
      <summary>确定是否可以验证的对象类型。</summary>
      <param name="type">对象的类型。</param>
      <returns>true 如果 <paramref name="type" /> 参数与匹配 <see cref="T:System.Int32" /> 值; 否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.IntegerValidator.Validate(System.Object)">
      <summary>确定某个对象的值是否有效。</summary>
      <param name="value">要验证的值。</param>
    </member>
    <member name="M:System.Configuration.IntegerValidatorAttribute.#ctor">
      <summary>创建 <see cref="T:System.Configuration.IntegerValidatorAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.Internal.DelegatingConfigHost" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.CreateConfigurationContext(System.String,System.String)">
      <summary>创建新的配置上下文。</summary>
      <param name="configPath">一个字符串，表示配置文件的路径。</param>
      <param name="locationSubPath">表示一个位置的子路径的字符串。</param>
      <returns>一个 <see cref="T:System.Object" /> 表示新的配置上下文。</returns>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.CreateDeprecatedConfigContext(System.String)">
      <summary>创建不推荐使用的配置上下文。</summary>
      <param name="configPath">一个字符串，表示配置文件的路径。</param>
      <returns>一个 <see cref="T:System.Object" /> 表示不推荐使用的配置上下文。</returns>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.DecryptSection(System.String,System.Configuration.ProtectedConfigurationProvider,System.Configuration.ProtectedConfigurationSection)">
      <summary>解密加密的配置节。</summary>
      <param name="encryptedXml">已加密的配置文件节。</param>
      <param name="protectionProvider">一个 <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> 对象。</param>
      <param name="protectedConfigSection">一个 <see cref="T:System.Configuration.ProtectedConfigurationSection" /> 对象。</param>
      <returns>一个字符串，表示已解密的配置节。</returns>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.DeleteStream(System.String)">
      <summary>删除 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务的配置文件上。</summary>
      <param name="streamName">名称 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务的配置文件上。</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.EncryptSection(System.String,System.Configuration.ProtectedConfigurationProvider,System.Configuration.ProtectedConfigurationSection)">
      <summary>加密配置对象的某一部分。</summary>
      <param name="clearTextXml">未加密的配置节。</param>
      <param name="protectionProvider">一个 <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> 对象。</param>
      <param name="protectedConfigSection">一个 <see cref="T:System.Configuration.ProtectedConfigurationSection" /> 对象。</param>
      <returns>一个表示已加密的节配置对象的字符串。</returns>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.GetConfigPathFromLocationSubPath(System.String,System.String)">
      <summary>返回基于位置的子路径的配置路径。</summary>
      <param name="configPath">一个字符串，表示配置文件的路径。</param>
      <param name="locationSubPath">表示一个位置的子路径的字符串。</param>
      <returns>表示配置路径的字符串。</returns>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.GetConfigType(System.String,System.Boolean)">
      <summary>返回 <see cref="T:System.Type" /> 表示类型的配置。</summary>
      <param name="typeName">表示配置类型的字符串。</param>
      <param name="throwOnError">true 如果应引发异常，如果遇到错误。 false 如果遇到错误，不应引发异常。</param>
      <returns>一个 <see cref="T:System.Type" /> 表示类型的配置。</returns>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.GetConfigTypeName(System.Type)">
      <summary>返回一个表示配置对象的类型名称的字符串。</summary>
      <param name="t">一个 <see cref="T:System.Type" /> 对象。</param>
      <returns>一个表示配置对象的类型名称的字符串。</returns>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.GetRestrictedPermissions(System.Configuration.Internal.IInternalConfigRecord,System.Security.PermissionSet@,System.Boolean@)">
      <summary>设置指定的权限集如果在该主机对象内可用。</summary>
      <param name="configRecord">一个 <see cref="T:System.Configuration.Internal.IInternalConfigRecord" /> 对象。</param>
      <param name="permissionSet">一个 <see cref="T:System.Security.PermissionSet" /> 对象。</param>
      <param name="isHostReady">true 如果主机已完成初始化，则为否则为 false。</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.GetStreamName(System.String)">
      <summary>返回的名称 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务的配置文件上。</summary>
      <param name="configPath">一个字符串，表示配置文件的路径。</param>
      <returns>一个表示名称的字符串 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务的配置文件上。</returns>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.GetStreamNameForConfigSource(System.String,System.String)">
      <summary>返回的名称 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务的配置源。</summary>
      <param name="streamName">名称 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务的配置文件上。</param>
      <param name="configSource">一个表示配置源字符串。</param>
      <returns>一个表示名称的字符串 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务的配置源。</returns>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.GetStreamVersion(System.String)">
      <summary>返回 <see cref="P:System.Diagnostics.FileVersionInfo.FileVersion" /> 对象，表示的版本 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务的配置文件上。</summary>
      <param name="streamName">名称 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务的配置文件上。</param>
      <returns>一个 <see cref="P:System.Diagnostics.FileVersionInfo.FileVersion" /> 对象，表示的版本 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务的配置文件上。</returns>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.Impersonate">
      <summary>指示宿主模拟并返回 <see cref="T:System.IDisposable" /> 对象所需的.NET Framework 的内部。</summary>
      <returns>一个 <see cref="T:System.IDisposable" /> 值。</returns>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.Init(System.Configuration.Internal.IInternalConfigRoot,System.Object[])">
      <summary>初始化配置主机。</summary>
      <param name="configRoot">一个 <see cref="T:System.Configuration.Internal.IInternalConfigRoot" /> 对象。</param>
      <param name="hostInitParams">一个包含用于初始化配置主机的值的参数对象。</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.InitForConfiguration(System.String@,System.String@,System.String@,System.Configuration.Internal.IInternalConfigRoot,System.Object[])">
      <summary>初始化配置的主机。</summary>
      <param name="locationSubPath">表示一个位置的子路径 （通过引用传递） 的字符串。</param>
      <param name="configPath">一个字符串，表示配置文件的路径。</param>
      <param name="locationConfigPath">位置配置路径。</param>
      <param name="configRoot">配置根元素。</param>
      <param name="hostInitConfigurationParams">表示用来初始化宿主的参数的参数对象。</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.IsAboveApplication(System.String)">
      <summary>返回一个值，该值指示是否在配置层次结构中的应用程序配置之上的配置。</summary>
      <param name="configPath">一个字符串，表示配置文件的路径。</param>
      <returns>true 如果配置大于配置层次结构; 中的应用程序配置否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.IsConfigRecordRequired(System.String)">
      <summary>返回一个值，该值指示是否需要对主机配置初始化配置记录。</summary>
      <param name="configPath">一个字符串，表示配置文件的路径。</param>
      <returns>true 如果配置记录，则所必需的主机配置初始化;否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.IsDefinitionAllowed(System.String,System.Configuration.ConfigurationAllowDefinition,System.Configuration.ConfigurationAllowExeDefinition)">
      <summary>限制或允许宿主配置中的定义。</summary>
      <param name="configPath">一个字符串，表示配置文件的路径。</param>
      <param name="allowDefinition">
        <see cref="T:System.Configuration.ConfigurationAllowDefinition" /> 对象。</param>
      <param name="allowExeDefinition">
        <see cref="T:System.Configuration.ConfigurationAllowExeDefinition" /> 对象。</param>
      <returns>true 如果成功，则授予或限制在宿主配置中的定义否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.IsFile(System.String)">
      <summary>返回一个值，该值指示是否使用文件路径 <see cref="T:System.IO.Stream" /> 对象来读取配置文件是有效的路径。</summary>
      <param name="streamName">名称 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务的配置文件上。</param>
      <returns>true 如果该路径由 <see cref="T:System.IO.Stream" /> 对象来读取配置文件是有效的路径; 否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.IsFullTrustSectionWithoutAptcaAllowed(System.Configuration.Internal.IInternalConfigRecord)">
      <summary>返回一个值，该值指示一个配置节，是否需要完全信任的代码访问安全级别，并且不允许 <see cref="T:System.Security.AllowPartiallyTrustedCallersAttribute" /> 特性禁用隐式链接要求。</summary>
      <param name="configRecord">
        <see cref="T:System.Configuration.Internal.IInternalConfigRecord" /> 对象。</param>
      <returns>true 如果配置部分需要完全信任的代码访问安全级别，并且不允许 <see cref="T:System.Security.AllowPartiallyTrustedCallersAttribute" /> 特性禁用隐式链接要求; 否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.IsInitDelayed(System.Configuration.Internal.IInternalConfigRecord)">
      <summary>返回一个值，该值指示是否初始化配置对象被认为是延迟。</summary>
      <param name="configRecord">
        <see cref="T:System.Configuration.Internal.IInternalConfigRecord" /> 对象。</param>
      <returns>true 如果配置对象的初始化被认为是延迟，则为否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.IsLocationApplicable(System.String)">
      <summary>返回一个值，该值指示配置对象是否支持位置标记。</summary>
      <param name="configPath">一个字符串，表示配置文件的路径。</param>
      <returns>true 如果配置对象支持位置标记，则否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.IsSecondaryRoot(System.String)">
      <summary>返回一个值，该值指示是否将配置路径为对配置节点的内容应视为根。</summary>
      <param name="configPath">一个字符串，表示配置文件的路径。</param>
      <returns>true 在配置路径为其内容应视为根; 的配置节点否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.IsTrustedConfigPath(System.String)">
      <summary>返回一个值，该值指示是否为受信任的配置路径。</summary>
      <param name="configPath">一个字符串，表示配置文件的路径。</param>
      <returns>true 如果配置路径是受信任;否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.OpenStreamForRead(System.String)">
      <summary>此时将打开 <see cref="T:System.IO.Stream" /> 对象来读取配置文件。</summary>
      <param name="streamName">名称 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务的配置文件上。</param>
      <returns>返回 <see cref="T:System.IO.Stream" /> 指定对象 <paramref name="streamName" />。</returns>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.OpenStreamForRead(System.String,System.Boolean)">
      <summary>此时将打开 <see cref="T:System.IO.Stream" /> 对象来读取配置文件。</summary>
      <param name="streamName">名称 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务的配置文件上。</param>
      <param name="assertPermissions">true 若要断言权限，则否则为 false。</param>
      <returns>返回 <see cref="T:System.IO.Stream" /> 指定对象 <paramref name="streamName" />。</returns>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.OpenStreamForWrite(System.String,System.String,System.Object@)">
      <summary>此时将打开 <see cref="T:System.IO.Stream" /> 对象要写入到配置文件还是要写入到用来生成配置文件的临时文件。 允许 <see cref="T:System.IO.Stream" /> 对象指定为模板，以便复制的文件属性。</summary>
      <param name="streamName">名称 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务的配置文件上。</param>
      <param name="templateStreamName">名称 <see cref="T:System.IO.Stream" /> 其中的文件属性是为模板要复制的对象。</param>
      <param name="writeContext">写上下文 <see cref="T:System.IO.Stream" /> （通过引用传递） 的对象。</param>
      <returns>一个 <see cref="T:System.IO.Stream" /> 对象。</returns>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.OpenStreamForWrite(System.String,System.String,System.Object@,System.Boolean)">
      <summary>此时将打开 <see cref="T:System.IO.Stream" /> 向配置文件中写入的对象。 允许 <see cref="T:System.IO.Stream" /> 对象指定为模板，以便复制的文件属性。</summary>
      <param name="streamName">名称 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务的配置文件上。</param>
      <param name="templateStreamName">名称 <see cref="T:System.IO.Stream" /> 其中的文件属性是为模板要复制的对象。</param>
      <param name="writeContext">写上下文 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务 （通过引用传递） 对配置文件。</param>
      <param name="assertPermissions">true 若要断言权限，则否则为 false。</param>
      <returns>返回 <see cref="T:System.IO.Stream" /> 指定对象 <paramref name="streamName" /> 参数。</returns>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.PrefetchAll(System.String,System.String)">
      <summary>返回一个值，该值指示是否可以读取整个配置文件由指定 <see cref="T:System.IO.Stream" /> 对象。</summary>
      <param name="configPath">一个字符串，表示配置文件的路径。</param>
      <param name="streamName">名称 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务的配置文件上。</param>
      <returns>true 如果整个配置文件可以通过阅读 <see cref="T:System.IO.Stream" /> 指定对象 <paramref name="streamName" />; 否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.PrefetchSection(System.String,System.String)">
      <summary>指示 <see cref="T:System.Configuration.Internal.IInternalConfigHost" /> 对象来读取其关联的配置文件的指定的节。</summary>
      <param name="sectionGroupName">一个表示配置文件中节组的名称的字符串。</param>
      <param name="sectionName">表示配置文件中节的名称的字符串。</param>
      <returns>true 如果通过指定配置文件节 <paramref name="sectionGroupName" /> 和 <paramref name="sectionName" /> 参数可以通过读取 <see cref="T:System.IO.Stream" /> 对象; 否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.RequireCompleteInit(System.Configuration.Internal.IInternalConfigRecord)">
      <summary>指示新的配置记录需要完成初始化。</summary>
      <param name="configRecord">一个 <see cref="T:System.Configuration.Internal.IInternalConfigRecord" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.StartMonitoringStreamForChanges(System.String,System.Configuration.Internal.StreamChangeCallback)">
      <summary>指示要监视一个相关联的主机 <see cref="T:System.IO.Stream" /> 对象所做更改配置文件中。</summary>
      <param name="streamName">名称 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务的配置文件上。</param>
      <param name="callback">一个 <see cref="T:System.Configuration.Internal.StreamChangeCallback" /> 对象，以接收返回的数据表示配置文件中的更改。</param>
      <returns>
        <see cref="T:System.Object" /> 实例包含更改的配置设置。</returns>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.StopMonitoringStreamForChanges(System.String,System.Configuration.Internal.StreamChangeCallback)">
      <summary>指示该主机对象，若要停止监视关联 <see cref="T:System.IO.Stream" /> 对象所做更改配置文件中。</summary>
      <param name="streamName">名称 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务的配置文件上。</param>
      <param name="callback">一个 <see cref="T:System.Configuration.Internal.StreamChangeCallback" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.VerifyDefinitionAllowed(System.String,System.Configuration.ConfigurationAllowDefinition,System.Configuration.ConfigurationAllowExeDefinition,System.Configuration.Internal.IConfigErrorInfo)">
      <summary>验证配置定义可以用于配置记录。</summary>
      <param name="configPath">一个字符串，表示配置文件的路径。</param>
      <param name="allowDefinition">一个 <see cref="P:System.Configuration.SectionInformation.AllowDefinition" /> 对象。</param>
      <param name="allowExeDefinition">一个 <see cref="T:System.Configuration.ConfigurationAllowExeDefinition" /> 对象</param>
      <param name="errorInfo">一个 <see cref="T:System.Configuration.Internal.IConfigErrorInfo" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.WriteCompleted(System.String,System.Boolean,System.Object)">
      <summary>指示已完成所有写入配置文件。</summary>
      <param name="streamName">名称 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务的配置文件上。</param>
      <param name="success">true 如果写入到配置文件成功地完成。否则为 false。</param>
      <param name="writeContext">写上下文 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务对配置文件。</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.WriteCompleted(System.String,System.Boolean,System.Object,System.Boolean)">
      <summary>指示所有写入配置文件已完成，并指定是否应断言权限。</summary>
      <param name="streamName">名称 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务的配置文件上。</param>
      <param name="success">true 若要指示已成功; 完成写入否则为 false。</param>
      <param name="writeContext">写上下文 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务对配置文件。</param>
      <param name="assertPermissions">true 若要断言权限，则否则为 false。</param>
    </member>
    <member name="M:System.Configuration.Internal.IConfigSystem.Init(System.Type,System.Object[])">
      <summary>初始化配置对象。</summary>
      <param name="typeConfigHost">配置主机的类型。</param>
      <param name="hostInitParams">配置主机参数的数组。</param>
    </member>
    <member name="M:System.Configuration.Internal.IConfigurationManagerHelper.EnsureNetConfigLoaded">
      <summary>确保已加载的网络配置。</summary>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigClientHost.GetExeConfigPath">
      <summary>返回到应用程序配置文件的路径。</summary>
      <returns>一个字符串，表示应用程序配置文件的路径。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigClientHost.GetLocalUserConfigPath">
      <summary>返回到已知的本地用户配置文件表示该路径的字符串。</summary>
      <returns>一个表示已知的本地用户配置文件的路径的字符串。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigClientHost.GetRoamingUserConfigPath">
      <summary>返回表示已知的漫游用户配置文件的路径的字符串。</summary>
      <returns>一个表示已知的漫游用户配置文件的路径的字符串。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigClientHost.IsExeConfig(System.String)">
      <summary>返回一个值，该值指示是否将配置文件路径为当前已知的应用程序配置文件路径相同。</summary>
      <param name="configPath">一个字符串，表示应用程序配置文件的路径。</param>
      <returns>true 表示配置路径的字符串是否与应用程序配置文件，则路径相同 false 如果表示配置路径的字符串不是应用程序配置文件的路径相同。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigClientHost.IsLocalUserConfig(System.String)">
      <summary>返回一个值，该值指示配置文件路径是否与当前已知的本地用户的配置文件路径相同。</summary>
      <param name="configPath">一个字符串，表示应用程序配置文件的路径。</param>
      <returns>true 表示配置路径的字符串是否为已知的本地用户配置文件; 的路径相同否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigClientHost.IsRoamingUserConfig(System.String)">
      <summary>返回一个值，该值指示是否将配置文件路径为当前已知的漫游用户配置文件路径相同。</summary>
      <param name="configPath">一个字符串，表示应用程序配置文件的路径。</param>
      <returns>true 表示配置路径的字符串是否与已知的漫游用户配置文件; 的路径相同否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigConfigurationFactory.Create(System.Type,System.Object[])">
      <summary>创建并初始化 <see cref="T:System.Configuration.Configuration" /> 对象。</summary>
      <param name="typeConfigHost">
        <see cref="T:System.Type" /> 的 <see cref="T:System.Configuration.Configuration" /> 要创建对象。</param>
      <param name="hostInitConfigurationParams">参数数组的 <see cref="T:System.Object" /> ，其中包含要应用的参数对创建 <see cref="T:System.Configuration.Configuration" /> 对象。</param>
      <returns>一个 <see cref="T:System.Configuration.Configuration" /> 对象。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigConfigurationFactory.NormalizeLocationSubPath(System.String,System.Configuration.Internal.IConfigErrorInfo)">
      <summary>规范化位置子路径的配置文件的路径。</summary>
      <param name="subPath">一个字符串，表示配置文件的路径。</param>
      <param name="errorInfo">一个实例 <see cref="T:System.Configuration.Internal.IConfigErrorInfo" /> 或 null。</param>
      <returns>一个正常化的子路径的字符串。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.CreateConfigurationContext(System.String,System.String)">
      <summary>创建并返回的上下文对象 <see cref="T:System.Configuration.ConfigurationElement" /> 的应用程序配置。</summary>
      <param name="configPath">一个表示应用程序配置文件的路径字符串。</param>
      <param name="locationSubPath">表示配置元素的子路径位置的字符串。</param>
      <returns>上下文对象 <see cref="T:System.Configuration.ConfigurationElement" /> 的应用程序配置的对象。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.CreateDeprecatedConfigContext(System.String)">
      <summary>创建并返回在应用程序配置的不推荐使用的上下文对象。</summary>
      <param name="configPath">一个表示应用程序配置文件路径的字符串。</param>
      <returns>在应用程序配置一个不推荐使用的上下文对象。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.DecryptSection(System.String,System.Configuration.ProtectedConfigurationProvider,System.Configuration.ProtectedConfigurationSection)">
      <summary>解密加密的配置节，并将其作为一个字符串返回。</summary>
      <param name="encryptedXml">表示一个配置节的加密的 XML 字符串。</param>
      <param name="protectionProvider">
        <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> 对象。</param>
      <param name="protectedConfigSection">
        <see cref="T:System.Configuration.ProtectedConfigurationSection" /> 对象。</param>
      <returns>一个字符串形式的已解密的配置节。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.DeleteStream(System.String)">
      <summary>删除 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务应用程序配置文件。</summary>
      <param name="streamName">一个表示名称的字符串 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务对配置文件。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.EncryptSection(System.String,System.Configuration.ProtectedConfigurationProvider,System.Configuration.ProtectedConfigurationSection)">
      <summary>加密配置节，并将其作为一个字符串返回。</summary>
      <param name="clearTextXml">表示一个配置节进行加密的 XML 字符串。</param>
      <param name="protectionProvider">
        <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> 对象。</param>
      <param name="protectedConfigSection">
        <see cref="T:System.Configuration.ProtectedConfigurationSection" /> 对象。</param>
      <returns>加密的配置节，以字符串形式表示。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.GetConfigPathFromLocationSubPath(System.String,System.String)">
      <summary>返回到应用程序配置文件基于位置的子路径的完整路径。</summary>
      <param name="configPath">一个表示应用程序配置文件的路径字符串。</param>
      <param name="locationSubPath">配置文件的子路径位置。</param>
      <returns>表示应用程序配置文件的完整路径的字符串。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.GetConfigType(System.String,System.Boolean)">
      <summary>返回 <see cref="T:System.Type" /> 对象，表示配置对象类型。</summary>
      <param name="typeName">类型名称</param>
      <param name="throwOnError">true 若要引发异常，如果错误发生;否则为 false</param>
      <returns>一个 <see cref="T:System.Type" /> 对象，表示配置对象类型。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.GetConfigTypeName(System.Type)">
      <summary>返回一个表示从一个类型名称的字符串 <see cref="T:System.Type" /> 对象，表示配置的类型。</summary>
      <param name="t">一个 <see cref="T:System.Type" /> 对象。</param>
      <returns>一个表示来自的类型名称的字符串 <see cref="T:System.Type" /> 对象，表示配置的类型。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.GetRestrictedPermissions(System.Configuration.Internal.IInternalConfigRecord,System.Security.PermissionSet@,System.Boolean@)">
      <summary>将相关联的配置 <see cref="T:System.Security.PermissionSet" /> 对象。</summary>
      <param name="configRecord">一个 <see cref="T:System.Configuration.Internal.IInternalConfigRecord" /> 对象。</param>
      <param name="permissionSet">
        <see cref="T:System.Security.PermissionSet" /> 对象将与配置相关联。</param>
      <param name="isHostReady">true 若要指示配置宿主已完成的生成关联的权限;否则为 false。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.GetStreamName(System.String)">
      <summary>返回一个表示与关联的配置文件名称的字符串 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务对配置文件。</summary>
      <param name="configPath">一个表示应用程序配置文件的路径字符串。</param>
      <returns>一个表示配置文件名称的字符串与 <see cref="T:System.IO.Stream" /> 对配置文件的 I/O 任务。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.GetStreamNameForConfigSource(System.String,System.String)">
      <summary>返回一个表示与关联的配置文件名称的字符串 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务的远程配置文件上。</summary>
      <param name="streamName">一个表示配置文件名称的字符串与 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务对配置文件。</param>
      <param name="configSource">一个表示远程配置文件路径的字符串。</param>
      <returns>一个表示配置文件名称的字符串与 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务对配置文件。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.GetStreamVersion(System.String)">
      <summary>返回的版本 <see cref="T:System.IO.Stream" /> 与配置文件关联的对象。</summary>
      <param name="streamName">一个表示名称的字符串 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务对配置文件。</param>
      <returns>版本 <see cref="T:System.IO.Stream" /> 与配置文件关联的对象。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.Impersonate">
      <summary>指示宿主模拟并返回 <see cref="T:System.IDisposable" /> 内部.NET 结构所需的对象。</summary>
      <returns>一个 <see cref="T:System.IDisposable" /> 值。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.Init(System.Configuration.Internal.IInternalConfigRoot,System.Object[])">
      <summary>初始化配置主机。</summary>
      <param name="configRoot">配置根对象。</param>
      <param name="hostInitParams">包含用于初始化配置主机的值的参数对象。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.InitForConfiguration(System.String@,System.String@,System.String@,System.Configuration.Internal.IInternalConfigRoot,System.Object[])">
      <summary>初始化配置对象。</summary>
      <param name="locationSubPath">配置文件的子路径位置。</param>
      <param name="configPath">一个表示应用程序配置文件的路径字符串。</param>
      <param name="locationConfigPath">表示配置路径的位置的字符串。</param>
      <param name="configRoot">
        <see cref="T:System.Configuration.Internal.IInternalConfigRoot" /> 对象。</param>
      <param name="hostInitConfigurationParams">包含用于初始化配置主机的值的参数对象。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.IsAboveApplication(System.String)">
      <summary>返回一个值，该值指示配置文件是否在配置层次结构中较高级别比应用程序配置位于。</summary>
      <param name="configPath">一个表示应用程序配置文件的路径字符串。</param>
      <returns>true 配置文件所处的配置层次结构中级别比应用程序配置中; 高否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.IsConfigRecordRequired(System.String)">
      <summary>返回一个值，该值指示是否所必需的子配置路径的子记录。</summary>
      <param name="configPath">一个表示应用程序配置文件的路径字符串。</param>
      <returns>true 如果子记录，则所必需的子配置路径;否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.IsDefinitionAllowed(System.String,System.Configuration.ConfigurationAllowDefinition,System.Configuration.ConfigurationAllowExeDefinition)">
      <summary>确定具有不同 <see cref="T:System.Type" /> 定义，允许的应用程序配置对象。</summary>
      <param name="configPath">一个表示应用程序配置文件的路径字符串。</param>
      <param name="allowDefinition">一个 <see cref="T:System.Configuration.ConfigurationAllowDefinition" /> 对象。</param>
      <param name="allowExeDefinition">一个 <see cref="T:System.Configuration.ConfigurationAllowExeDefinition" /> 对象。</param>
      <returns>true 如果不同 <see cref="T:System.Type" /> 定义是允许应用程序配置对象; 否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.IsFile(System.String)">
      <summary>返回一个值，该值指示是否使用文件路径 <see cref="T:System.IO.Stream" /> 对象来读取配置文件是有效的路径。</summary>
      <param name="streamName">一个表示名称的字符串 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务对配置文件。</param>
      <returns>true 如果该路径由 <see cref="T:System.IO.Stream" /> 对象来读取配置文件是有效的路径; 否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.IsFullTrustSectionWithoutAptcaAllowed(System.Configuration.Internal.IInternalConfigRecord)">
      <summary>返回一个值，该值指示一个配置节，是否需要完全信任的代码访问安全级别，并且不允许 <see cref="T:System.Security.AllowPartiallyTrustedCallersAttribute" /> 特性禁用隐式链接要求。</summary>
      <param name="configRecord">
        <see cref="T:System.Configuration.Internal.IInternalConfigRecord" /> 对象。</param>
      <returns>true 如果配置部分需要完全信任的代码访问安全级别，并且不允许 <see cref="T:System.Security.AllowPartiallyTrustedCallersAttribute" /> 特性禁用隐式链接要求; 否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.IsInitDelayed(System.Configuration.Internal.IInternalConfigRecord)">
      <summary>返回一个值，该值指示是否初始化配置对象被认为是延迟。</summary>
      <param name="configRecord">
        <see cref="T:System.Configuration.Internal.IInternalConfigRecord" /> 对象。</param>
      <returns>true 如果配置对象的初始化被认为是延迟，则为否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.IsLocationApplicable(System.String)">
      <summary>返回一个值，该值指示配置对象是否支持位置标记。</summary>
      <param name="configPath">一个表示应用程序配置文件的路径字符串。</param>
      <returns>true 如果配置对象支持位置标记，则否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.IsSecondaryRoot(System.String)">
      <summary>返回一个值，该值指示是否将配置路径为对配置节点的内容应视为根。</summary>
      <param name="configPath">一个表示应用程序配置文件的路径字符串。</param>
      <returns>true 在配置路径为其内容应视为根; 的配置节点否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.IsTrustedConfigPath(System.String)">
      <summary>返回一个值，该值指示是否为受信任的配置路径。</summary>
      <param name="configPath">一个表示应用程序配置文件的路径字符串。</param>
      <returns>true 如果配置路径是受信任;否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.OpenStreamForRead(System.String)">
      <summary>此时将打开 <see cref="T:System.IO.Stream" /> 读取配置文件。</summary>
      <param name="streamName">一个表示名称的字符串 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务对配置文件。</param>
      <returns>一个 <see cref="T:System.IO.Stream" /> 对象。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.OpenStreamForRead(System.String,System.Boolean)">
      <summary>此时将打开 <see cref="T:System.IO.Stream" /> 对象来读取配置文件。</summary>
      <param name="streamName">一个表示名称的字符串 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务对配置文件。</param>
      <param name="assertPermissions">true 若要断言权限，则否则为 false。</param>
      <returns>返回 <see cref="T:System.IO.Stream" /> 指定对象 <paramref name="streamName" />。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.OpenStreamForWrite(System.String,System.String,System.Object@)">
      <summary>此时将打开 <see cref="T:System.IO.Stream" /> 对象要写入到配置文件还是要写入到用来生成配置文件的临时文件。 允许 <see cref="T:System.IO.Stream" /> 对象指定为模板，以便复制的文件属性。</summary>
      <param name="streamName">一个表示名称的字符串 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务对配置文件。</param>
      <param name="templateStreamName">名称 <see cref="T:System.IO.Stream" /> 其中的文件属性是为模板要复制的对象。</param>
      <param name="writeContext">写上下文 <see cref="T:System.IO.Stream" /> 对象。</param>
      <returns>一个 <see cref="T:System.IO.Stream" /> 对象。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.OpenStreamForWrite(System.String,System.String,System.Object@,System.Boolean)">
      <summary>此时将打开 <see cref="T:System.IO.Stream" /> 向配置文件中写入的对象。 允许 <see cref="T:System.IO.Stream" /> 对象指定为模板，以便复制的文件属性。</summary>
      <param name="streamName">一个表示名称的字符串 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务对配置文件。</param>
      <param name="templateStreamName">名称 <see cref="T:System.IO.Stream" /> 其中的文件是否要为模板复制属性。</param>
      <param name="writeContext">写上下文 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务对配置文件。</param>
      <param name="assertPermissions">true 若要断言权限，则否则为 false。</param>
      <returns>返回 <see cref="T:System.IO.Stream" /> 指定对象 <paramref name="streamName" />。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.PrefetchAll(System.String,System.String)">
      <summary>返回一个值，该值指示是否可以读取整个配置文件由指定 <see cref="T:System.IO.Stream" /> 对象。</summary>
      <param name="configPath">一个表示应用程序配置文件的路径字符串。</param>
      <param name="streamName">一个表示名称的字符串 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务对配置文件。</param>
      <returns>true 如果整个配置文件可以通过阅读 <see cref="T:System.IO.Stream" /> 指定对象 <paramref name="streamName" />; 否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.PrefetchSection(System.String,System.String)">
      <summary>指示 <see cref="T:System.Configuration.Internal.IInternalConfigHost" /> 对象来读取其关联的配置文件的指定的节。</summary>
      <param name="sectionGroupName">表示配置文件节组的标识名称的字符串。</param>
      <param name="sectionName">表示一个配置文件节的标识名称的字符串。</param>
      <returns>true 如果通过指定配置文件节 <paramref name="sectionGroupName" /> 和 <paramref name="sectionName" /> 可以通过阅读 <see cref="T:System.IO.Stream" /> 对象; 否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.RequireCompleteInit(System.Configuration.Internal.IInternalConfigRecord)">
      <summary>指示新的配置记录需要完成初始化。</summary>
      <param name="configRecord">一个 <see cref="T:System.Configuration.Internal.IInternalConfigRecord" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.StartMonitoringStreamForChanges(System.String,System.Configuration.Internal.StreamChangeCallback)">
      <summary>指示 <see cref="T:System.Configuration.Internal.IInternalConfigHost" /> 对象来监视关联 <see cref="T:System.IO.Stream" /> 对象所做更改配置文件中。</summary>
      <param name="streamName">一个表示名称的字符串 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务对配置文件。</param>
      <param name="callback">一个 <see cref="T:System.Configuration.Internal.StreamChangeCallback" /> 对象，以接收返回的数据表示配置文件中的更改。</param>
      <returns>
        <see cref="T:System.Object" /> 包含更改的配置设置。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.StopMonitoringStreamForChanges(System.String,System.Configuration.Internal.StreamChangeCallback)">
      <summary>指示  <see cref="T:System.Configuration.Internal.IInternalConfigHost" /> 对象若要停止监视关联 <see cref="T:System.IO.Stream" /> 对象所做更改配置文件中。</summary>
      <param name="streamName">一个表示名称的字符串 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务对配置文件。</param>
      <param name="callback">一个 <see cref="T:System.Configuration.Internal.StreamChangeCallback" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.VerifyDefinitionAllowed(System.String,System.Configuration.ConfigurationAllowDefinition,System.Configuration.ConfigurationAllowExeDefinition,System.Configuration.Internal.IConfigErrorInfo)">
      <summary>验证配置定义可以用于配置记录。</summary>
      <param name="configPath">一个表示应用程序配置文件的路径字符串。</param>
      <param name="allowDefinition">一个 <see cref="P:System.Configuration.SectionInformation.AllowDefinition" /> 对象。</param>
      <param name="allowExeDefinition">一个 <see cref="T:System.Configuration.ConfigurationAllowExeDefinition" /> 对象</param>
      <param name="errorInfo">一个 <see cref="T:System.Configuration.Internal.IConfigErrorInfo" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.WriteCompleted(System.String,System.Boolean,System.Object)">
      <summary>指示已完成所有写入配置文件。</summary>
      <param name="streamName">一个表示名称的字符串 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务对配置文件。</param>
      <param name="success">true 如果配置文件写入已成功地完成。否则为 false。</param>
      <param name="writeContext">写上下文 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务对配置文件。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.WriteCompleted(System.String,System.Boolean,System.Object,System.Boolean)">
      <summary>指示所有写入配置文件已完成，并指定是否应断言权限。</summary>
      <param name="streamName">一个表示名称的字符串 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务对配置文件。</param>
      <param name="success">true 指示将写入已成功地完成。否则为 false。</param>
      <param name="writeContext">写上下文 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务对配置文件。</param>
      <param name="assertPermissions">true 若要断言权限，则否则为 false。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigRecord.GetLkgSection(System.String)">
      <summary>返回一个对象，该对象表示的从上一次已知正确 (配置 LKG) 配置的配置节。</summary>
      <param name="configKey">一个字符串，表示一个配置节的键。</param>
      <returns>
        <see cref="T:System.Object" /> 实例，它表示由指定上一次已知正确配置的部分 <paramref name="configKey" />。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigRecord.GetSection(System.String)">
      <summary>返回 <see cref="T:System.Object" /> 实例，它表示一个配置文件的某一部分。</summary>
      <param name="configKey">一个字符串，表示一个配置节的键。</param>
      <returns>
        <see cref="T:System.Object" /> 实例，它表示一个配置文件的某一部分。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigRecord.RefreshSection(System.String)">
      <summary>会导致重新初始化订阅的配置对象的指定的部分。</summary>
      <param name="configKey">一个字符串，表示要刷新的配置节的键。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigRecord.Remove">
      <summary>移除配置记录。</summary>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigRecord.ThrowIfInitErrors">
      <summary>如果在初始化期间出错时引发异常的权限授予配置对象。</summary>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigRoot.GetConfigRecord(System.String)">
      <summary>返回 <see cref="T:System.Configuration.Internal.IInternalConfigRecord" /> 对象，表示指定的配置路径的配置。</summary>
      <param name="configPath">一个字符串，表示配置文件的路径。</param>
      <returns>
        <see cref="T:System.Configuration.Internal.IInternalConfigRecord" /> 对象，表示由指定的配置 <paramref name="configPath" />。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigRoot.GetSection(System.String,System.String)">
      <summary>返回 <see cref="T:System.Object" /> 表示配置文件的节中的数据。</summary>
      <param name="section">表示配置文件的节的字符串。</param>
      <param name="configPath">一个字符串，表示配置文件的路径。</param>
      <returns>
        <see cref="T:System.Object" /> 表示配置文件的节中的数据。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigRoot.GetUniqueConfigPath(System.String)">
      <summary>返回一个值，表示具有配置数据的最近配置上级的文件路径。</summary>
      <param name="configPath">配置文件的路径。</param>
      <returns>返回表示已配置数据的最近配置上级的文件路径的字符串。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigRoot.GetUniqueConfigRecord(System.String)">
      <summary>返回 <see cref="T:System.Configuration.Internal.IInternalConfigRecord" /> 对象，表示给定的唯一配置记录的配置路径。</summary>
      <param name="configPath">配置文件的路径。</param>
      <returns>
        <see cref="T:System.Configuration.Internal.IInternalConfigRecord" /> 表示给定的配置路径的唯一配置记录的对象。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigRoot.Init(System.Configuration.Internal.IInternalConfigHost,System.Boolean)">
      <summary>初始化配置对象。</summary>
      <param name="host">一个 <see cref="T:System.Configuration.Internal.IInternalConfigHost" /> 对象。</param>
      <param name="isDesignTime">true 如果设计时; false 如果运行时间。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigRoot.RemoveConfig(System.String)">
      <summary>找到并删除配置记录及其所有子级的给定的配置路径。</summary>
      <param name="configPath">配置文件的路径。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigSettingsFactory.CompleteInit">
      <summary>指示初始化系统已完成的配置。</summary>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigSettingsFactory.SetConfigurationSystem(System.Configuration.Internal.IInternalConfigSystem,System.Boolean)">
      <summary>向配置系统，为 ASP.NET 提供层次结构配置设置和特定的扩展。</summary>
      <param name="internalConfigSystem">
        <see cref="T:System.Configuration.Internal.IInternalConfigSystem" /> 使用对象 <see cref="T:System.Configuration.ConfigurationSettings" /> 类。</param>
      <param name="initComplete">true 如果配置系统的初始化过程已完成;否则为 false。</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigSystem.GetSection(System.String)">
      <summary>返回基于指定的键的配置对象。</summary>
      <param name="configKey">配置密钥值。</param>
      <returns>配置对象。</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigSystem.RefreshConfig(System.String)">
      <summary>刷新配置系统基于指定的节名称。</summary>
      <param name="sectionName">配置部分的名称。</param>
    </member>
    <member name="M:System.Configuration.Internal.InternalConfigEventArgs.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Configuration.Internal.InternalConfigEventArgs" /> 类的新实例。</summary>
      <param name="configPath">配置路径。</param>
    </member>
    <member name="M:System.Configuration.KeyValueConfigurationCollection.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.KeyValueConfigurationCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.KeyValueConfigurationCollection.Add(System.Configuration.KeyValueConfigurationElement)">
      <summary>添加 <see cref="T:System.Configuration.KeyValueConfigurationElement" /> 对象添加到收藏基于所提供的参数。</summary>
      <param name="keyValue">
        <see cref="T:System.Configuration.KeyValueConfigurationElement" />。</param>
    </member>
    <member name="M:System.Configuration.KeyValueConfigurationCollection.Add(System.String,System.String)">
      <summary>添加 <see cref="T:System.Configuration.KeyValueConfigurationElement" /> 对象添加到收藏基于所提供的参数。</summary>
      <param name="key">指定键的字符串。</param>
      <param name="value">一个指定值的字符串。</param>
    </member>
    <member name="M:System.Configuration.KeyValueConfigurationCollection.Clear">
      <summary>清除 <see cref="T:System.Configuration.KeyValueConfigurationCollection" /> 集合。</summary>
    </member>
    <member name="M:System.Configuration.KeyValueConfigurationCollection.CreateNewElement">
      <summary>当在派生类中重写 <see cref="M:System.Configuration.KeyValueConfigurationCollection.CreateNewElement" /> 方法创建一个新 <see cref="T:System.Configuration.KeyValueConfigurationElement" /> 对象。</summary>
      <returns>一个新创建的 <see cref="T:System.Configuration.KeyValueConfigurationElement" />。</returns>
    </member>
    <member name="M:System.Configuration.KeyValueConfigurationCollection.GetElementKey(System.Configuration.ConfigurationElement)">
      <summary>获取指定的配置元素，当在派生类中重写的元素键。</summary>
      <param name="element">
        <see cref="T:System.Configuration.KeyValueConfigurationElement" /> 指向返回该密钥。</param>
      <returns>一个对象，用作指定的键 <see cref="T:System.Configuration.KeyValueConfigurationElement" />。</returns>
    </member>
    <member name="M:System.Configuration.KeyValueConfigurationCollection.Remove(System.String)">
      <summary>删除 <see cref="T:System.Configuration.KeyValueConfigurationElement" /> 来自集合对象。</summary>
      <param name="key">一个字符串，指定 <paramref name="key" />。</param>
    </member>
    <member name="M:System.Configuration.KeyValueConfigurationElement.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Configuration.KeyValueConfigurationElement" /> 类根据所提供的参数。</summary>
      <param name="key">键 <see cref="T:System.Configuration.KeyValueConfigurationElement" />。</param>
      <param name="value">
        <see cref="T:System.Configuration.KeyValueConfigurationElement" /> 的值。</param>
    </member>
    <member name="M:System.Configuration.KeyValueConfigurationElement.Init">
      <summary>集 <see cref="T:System.Configuration.KeyValueConfigurationElement" /> 对象传递给它的初始状态。</summary>
    </member>
    <member name="M:System.Configuration.LongValidator.#ctor(System.Int64,System.Int64)">
      <summary>初始化 <see cref="T:System.Configuration.LongValidator" /> 类的新实例。</summary>
      <param name="minValue">
        <see cref="T:System.Int64" /> 值，该值指定的最小长度 long 值。</param>
      <param name="maxValue">
        <see cref="T:System.Int64" /> 值，该值指定的最大长度 long 值。</param>
    </member>
    <member name="M:System.Configuration.LongValidator.#ctor(System.Int64,System.Int64,System.Boolean)">
      <summary>初始化 <see cref="T:System.Configuration.LongValidator" /> 类的新实例。</summary>
      <param name="minValue">
        <see cref="T:System.Int64" /> 值，该值指定的最小长度 long 值。</param>
      <param name="maxValue">
        <see cref="T:System.Int64" /> 值，该值指定的最大长度 long 值。</param>
      <param name="rangeIsExclusive">一个 <see cref="T:System.Boolean" /> 值，该值指定是否验证范围是独占的。</param>
    </member>
    <member name="M:System.Configuration.LongValidator.#ctor(System.Int64,System.Int64,System.Boolean,System.Int64)">
      <summary>初始化 <see cref="T:System.Configuration.LongValidator" /> 类的新实例。</summary>
      <param name="minValue">
        <see cref="T:System.Int64" /> 值，该值指定的最小长度 long 值。</param>
      <param name="maxValue">
        <see cref="T:System.Int64" /> 值，该值指定的最大长度 long 值。</param>
      <param name="rangeIsExclusive">一个 <see cref="T:System.Boolean" /> 值，该值指定是否验证范围是独占的。</param>
      <param name="resolution">
        <see cref="T:System.Int64" /> 值，该值指定一个特定值，必须匹配。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="resolution" /> 等于或小于比 0。- 或 -<paramref name="maxValue" /> 小于 <paramref name="minValue" />。</exception>
    </member>
    <member name="M:System.Configuration.LongValidator.CanValidate(System.Type)">
      <summary>确定是否可以验证的对象类型。</summary>
      <param name="type">对象的类型。</param>
      <returns>true 如果 <paramref name="type" /> 参数与匹配 <see cref="T:System.Int64" /> 值; 否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.LongValidator.Validate(System.Object)">
      <summary>确定某个对象的值是否有效。</summary>
      <param name="value">对象的值。</param>
    </member>
    <member name="M:System.Configuration.LongValidatorAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.LongValidatorAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.NameValueConfigurationCollection.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.NameValueConfigurationCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.NameValueConfigurationCollection.Add(System.Configuration.NameValueConfigurationElement)">
      <summary>将 <see cref="T:System.Configuration.NameValueConfigurationElement" /> 对象添加到集合中。</summary>
      <param name="nameValue">一个  <see cref="T:System.Configuration.NameValueConfigurationElement" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.NameValueConfigurationCollection.Clear">
      <summary>清除 <see cref="T:System.Configuration.NameValueConfigurationCollection" />。</summary>
    </member>
    <member name="M:System.Configuration.NameValueConfigurationCollection.Remove(System.Configuration.NameValueConfigurationElement)">
      <summary>删除 <see cref="T:System.Configuration.NameValueConfigurationElement" /> 根据所提供的参数集合中的对象。</summary>
      <param name="nameValue">一个 <see cref="T:System.Configuration.NameValueConfigurationElement" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.NameValueConfigurationCollection.Remove(System.String)">
      <summary>删除 <see cref="T:System.Configuration.NameValueConfigurationElement" /> 根据所提供的参数集合中的对象。</summary>
      <param name="name">
        <see cref="T:System.Configuration.NameValueConfigurationElement" /> 对象的名称。</param>
    </member>
    <member name="M:System.Configuration.NameValueConfigurationElement.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Configuration.NameValueConfigurationElement" /> 类基于提供的参数。</summary>
      <param name="name">
        <see cref="T:System.Configuration.NameValueConfigurationElement" /> 对象的名称。</param>
      <param name="value">值 <see cref="T:System.Configuration.NameValueConfigurationElement" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.PositiveTimeSpanValidator.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.PositiveTimeSpanValidator" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.PositiveTimeSpanValidator.CanValidate(System.Type)">
      <summary>确定是否可以验证的对象类型。</summary>
      <param name="type">对象类型。</param>
      <returns>true 如果 <paramref name="type" /> 参数与匹配 <see cref="T:System.TimeSpan" /> 对象; 否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.PositiveTimeSpanValidator.Validate(System.Object)">
      <summary>确定某个对象的值是否有效。</summary>
      <param name="value">对象的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 无法解析为一个值为正 <see cref="T:System.TimeSpan" /> 值。</exception>
    </member>
    <member name="M:System.Configuration.PositiveTimeSpanValidatorAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.PositiveTimeSpanValidatorAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.PropertyInformationCollection.CopyTo(System.Configuration.PropertyInformation[],System.Int32)">
      <summary>将复制整个 <see cref="T:System.Configuration.PropertyInformationCollection" /> 集合到一维兼容 <see cref="T:System.Array" />, ，从目标数组的指定索引处开始。</summary>
      <param name="array">一维 <see cref="T:System.Array" /> 从复制的元素的目标 <see cref="T:System.Configuration.PropertyInformationCollection" /> 集合。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Array.Length" /> 属性 <paramref name="array" /> 是小于 <see cref="P:System.Collections.Specialized.NameObjectCollectionBase.Count" /> + <paramref name="index" />。</exception>
    </member>
    <member name="M:System.Configuration.PropertyInformationCollection.GetEnumerator">
      <summary>获取 <see cref="T:System.Collections.IEnumerator" /> 对象，用于循环访问此 <see cref="T:System.Configuration.PropertyInformationCollection" /> 集合。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 对象，用于循环访问此 <see cref="T:System.Configuration.PropertyInformationCollection" />。</returns>
    </member>
    <member name="M:System.Configuration.PropertyInformationCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象序列化所需的数据 <see cref="T:System.Configuration.PropertyInformationCollection" /> 实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，该对象包含序列化 <see cref="T:System.Configuration.PropertyInformationCollection" /> 实例所需的信息。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，该对象包含与 <see cref="T:System.Configuration.PropertyInformationCollection" /> 实例关联的序列化流的源和目标。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 null。</exception>
    </member>
    <member name="M:System.Configuration.ProtectedConfigurationProvider.#ctor">
      <summary>使用默认设置初始化 <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.ProtectedConfigurationProvider.Decrypt(System.Xml.XmlNode)">
      <summary>解密传递 <see cref="T:System.Xml.XmlNode" /> 从配置文件的对象。</summary>
      <param name="encryptedNode">
        <see cref="T:System.Xml.XmlNode" /> 对象进行解密。</param>
      <returns>
        <see cref="T:System.Xml.XmlNode" /> 对象，其中包含已解密的数据。</returns>
    </member>
    <member name="M:System.Configuration.ProtectedConfigurationProvider.Encrypt(System.Xml.XmlNode)">
      <summary>加密传递 <see cref="T:System.Xml.XmlNode" /> 从配置文件的对象。</summary>
      <param name="node">
        <see cref="T:System.Xml.XmlNode" /> 对象进行加密。</param>
      <returns>
        <see cref="T:System.Xml.XmlNode" /> 对象，其中包含加密的数据。</returns>
    </member>
    <member name="M:System.Configuration.ProtectedConfigurationProviderCollection.#ctor">
      <summary>使用默认设置初始化 <see cref="T:System.Configuration.ProtectedConfigurationProviderCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.ProtectedConfigurationProviderCollection.Add(System.Configuration.Provider.ProviderBase)">
      <summary>将 <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> 对象添加到集合中。</summary>
      <param name="provider">一个 <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> 要添加到集合对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="provider" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="provider" /> 不是 <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> 对象。</exception>
      <exception cref="T:System.Configuration.ConfigurationException">
        <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> 集合中的对象以添加已存在。- 或 -该集合是只读的。</exception>
    </member>
    <member name="M:System.Configuration.ProtectedConfigurationSection.#ctor">
      <summary>使用默认设置初始化 <see cref="T:System.Configuration.ProtectedConfigurationSection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.ProtectedProviderSettings.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ProtectedProviderSettings" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.Provider.ProviderBase.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.Provider.ProviderBase" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>初始化提供程序。</summary>
      <param name="name">提供程序的友好名称。</param>
      <param name="config">名称/值对的集合，表示在配置中为该提供程序指定的提供程序特定的属性。</param>
      <exception cref="T:System.ArgumentNullException">提供程序的名称是 null。</exception>
      <exception cref="T:System.ArgumentException">提供程序的名称具有长度为零。</exception>
      <exception cref="T:System.InvalidOperationException">尝试调用 <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" /> 后已初始化提供程序提供程序上。</exception>
    </member>
    <member name="M:System.Configuration.Provider.ProviderCollection.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.Provider.ProviderCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.Provider.ProviderCollection.Add(System.Configuration.Provider.ProviderBase)">
      <summary>向集合中添加一个提供程序。</summary>
      <param name="provider">要添加的提供程序。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="provider" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Configuration.Provider.ProviderBase.Name" /> 的 <paramref name="provider" /> 是 null。- 或 -长度 <see cref="P:System.Configuration.Provider.ProviderBase.Name" /> 的 <paramref name="provider" /> 小于 1。</exception>
    </member>
    <member name="M:System.Configuration.Provider.ProviderCollection.Clear">
      <summary>从集合中移除所有项。</summary>
      <exception cref="T:System.NotSupportedException">集合设置为只读的。</exception>
    </member>
    <member name="M:System.Configuration.Provider.ProviderCollection.CopyTo(System.Configuration.Provider.ProviderBase[],System.Int32)">
      <summary>将集合的内容复制到给定数组的指定索引处开始。</summary>
      <param name="array">要复制到集合中的元素的数组。</param>
      <param name="index">从其开始复制过程的集合项的索引。</param>
    </member>
    <member name="M:System.Configuration.Provider.ProviderCollection.GetEnumerator">
      <summary>返回一个对象，实现 <see cref="T:System.Collections.IEnumerator" /> 接口，以循环访问集合。</summary>
      <returns>实现的对象 <see cref="T:System.Collections.IEnumerator" /> 来循环访问集合。</returns>
    </member>
    <member name="M:System.Configuration.Provider.ProviderCollection.Remove(System.String)">
      <summary>从集合中移除一个提供程序。</summary>
      <param name="name">要删除的提供程序的名称。</param>
      <exception cref="T:System.NotSupportedException">集合已设置只读的。</exception>
    </member>
    <member name="M:System.Configuration.Provider.ProviderCollection.SetReadOnly">
      <summary>设置的集合是只读的。</summary>
    </member>
    <member name="M:System.Configuration.Provider.ProviderCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>将 <see cref="T:System.Configuration.Provider.ProviderCollection" /> 的元素复制到一个数组中从特定的数组索引开始的位置。</summary>
      <param name="array">要复制到集合中的元素的数组。</param>
      <param name="index">开始从集合中复制提供程序实例的数组的索引。</param>
    </member>
    <member name="M:System.Configuration.Provider.ProviderException.#ctor">
      <summary>创建 <see cref="T:System.Configuration.Provider.ProviderException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.Provider.ProviderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>创建 <see cref="T:System.Configuration.Provider.ProviderException" /> 类的新实例。</summary>
      <param name="info">包含要反序列化的信息的对象。</param>
      <param name="context">有关源或目标的上下文信息。</param>
    </member>
    <member name="M:System.Configuration.Provider.ProviderException.#ctor(System.String)">
      <summary>创建 <see cref="T:System.Configuration.Provider.ProviderException" /> 类的新实例。</summary>
      <param name="message">描述原因的消息这 <see cref="T:System.Configuration.Provider.ProviderException" /> 引发。</param>
    </member>
    <member name="M:System.Configuration.Provider.ProviderException.#ctor(System.String,System.Exception)">
      <summary>创建 <see cref="T:System.Configuration.Provider.ProviderException" /> 类的新实例。</summary>
      <param name="message">描述原因的消息这 <see cref="T:System.Configuration.Provider.ProviderException" /> 引发。</param>
      <param name="innerException">导致此异常 <see cref="T:System.Configuration.Provider.ProviderException" /> 引发。</param>
    </member>
    <member name="M:System.Configuration.ProviderSettings.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ProviderSettings" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.ProviderSettings.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Configuration.ProviderSettings" /> 类的新实例。</summary>
      <param name="name">要配置的设置的提供程序的名称。</param>
      <param name="type">要配置的设置的提供程序类型。</param>
    </member>
    <member name="M:System.Configuration.ProviderSettingsCollection.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ProviderSettingsCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.ProviderSettingsCollection.Add(System.Configuration.ProviderSettings)">
      <summary>将 <see cref="T:System.Configuration.ProviderSettings" /> 对象添加到集合中。</summary>
      <param name="provider">要添加的 <see cref="T:System.Configuration.ProviderSettings" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.ProviderSettingsCollection.Clear">
      <summary>清除集合。</summary>
    </member>
    <member name="M:System.Configuration.ProviderSettingsCollection.Remove(System.String)">
      <summary>从集合中移除一个元素。</summary>
      <param name="name">名称 <see cref="T:System.Configuration.ProviderSettings" /> 要移除对象。</param>
    </member>
    <member name="M:System.Configuration.RegexStringValidator.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Configuration.RegexStringValidator" /> 类的新实例。</summary>
      <param name="regex">一个字符串，指定正则表达式。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="regex" /> 为 null 或空字符串 ("")。</exception>
    </member>
    <member name="M:System.Configuration.RegexStringValidator.CanValidate(System.Type)">
      <summary>确定是否可以验证的对象类型。</summary>
      <param name="type">对象的类型。</param>
      <returns>true 如果 <paramref name="type" /> 参数匹配的字符串; 否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.RegexStringValidator.Validate(System.Object)">
      <summary>确定某个对象的值是否有效。</summary>
      <param name="value">对象的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不符合的参数 <see cref="T:System.Text.RegularExpressions.Regex" /> 类。</exception>
    </member>
    <member name="M:System.Configuration.RegexStringValidatorAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Configuration.RegexStringValidatorAttribute" /> 对象的新实例。</summary>
      <param name="regex">要使用的正则表达式验证的字符串。</param>
    </member>
    <member name="M:System.Configuration.RsaProtectedConfigurationProvider.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.RsaProtectedConfigurationProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.RsaProtectedConfigurationProvider.AddKey(System.Int32,System.Boolean)">
      <summary>将密钥添加到 RSA 密钥容器中。</summary>
      <param name="keySize">要添加的密钥的大小。</param>
      <param name="exportable">若指示密钥可以导出，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Configuration.RsaProtectedConfigurationProvider.Decrypt(System.Xml.XmlNode)">
      <summary>解密传递给它的 XML 节点。</summary>
      <param name="encryptedNode">要进行解密的 <see cref="T:System.Xml.XmlNode" />。</param>
      <returns>解密后的 XML 节点。</returns>
    </member>
    <member name="M:System.Configuration.RsaProtectedConfigurationProvider.DeleteKey">
      <summary>从 RSA 密钥容器中移除密钥。</summary>
    </member>
    <member name="M:System.Configuration.RsaProtectedConfigurationProvider.Encrypt(System.Xml.XmlNode)">
      <summary>加密传递给它的 XML 节点。</summary>
      <param name="node">要进行加密的 <see cref="T:System.Xml.XmlNode" />。</param>
      <returns>已加密的 <see cref="T:System.Xml.XmlNode" /> 对象。</returns>
    </member>
    <member name="M:System.Configuration.RsaProtectedConfigurationProvider.ExportKey(System.String,System.Boolean)">
      <summary>从密钥容器中导出 RSA 密钥。</summary>
      <param name="xmlFileName">要将密钥导出到的文件的名称和路径。</param>
      <param name="includePrivateParameters">若指示将导出专用参数，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是一个长度为零的字符串，仅包含空格，或包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars" /> 定义的无效字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 为 null。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。 例如，在基于 Windows 的平台上，路径必须少于 248 个字符，且文件名必须少于 260 个字符。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效，例如位于未映射的驱动器上。</exception>
      <exception cref="T:System.IO.IOException">打开文件时出错。</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> 指定了一个只读文件。- 或 - 当前平台不支持此操作。- 或 - <paramref name="path" /> 指定了一个目录。- 或 - 调用方没有所要求的权限。</exception>
      <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="path" /> 中指定的文件。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 的格式无效。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.Configuration.RsaProtectedConfigurationProvider.ImportKey(System.String,System.Boolean)">
      <summary>将 RSA 密钥导入到密钥容器中。</summary>
      <param name="xmlFileName">从中导入密钥的文件的名称和路径。</param>
      <param name="exportable">若指示密钥可以导出，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是一个长度为零的字符串，仅包含空格，或包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars" /> 定义的无效字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 为 null。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。 例如，在基于 Windows 的平台上，路径必须少于 248 个字符，且文件名必须少于 260 个字符。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效，例如位于未映射的驱动器上。</exception>
      <exception cref="T:System.IO.IOException">打开文件时出错。</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> 指定是只写的文件。- 或 - 当前平台不支持此操作。- 或 - <paramref name="path" /> 指定了一个目录。- 或 - 调用方没有所要求的权限。</exception>
      <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="path" /> 中指定的文件。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 的格式无效。</exception>
    </member>
    <member name="M:System.Configuration.RsaProtectedConfigurationProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>使用默认设置初始化提供程序。</summary>
      <param name="name">要为对象使用的提供程序名称。</param>
      <param name="configurationValues">初始化对象时要使用的值的 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 集合。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="configurationValues" /> 包括一个或多个无法识别的值。</exception>
    </member>
    <member name="M:System.Configuration.SectionInformation.ForceDeclaration">
      <summary>强制显示在配置文件关联的配置节。</summary>
    </member>
    <member name="M:System.Configuration.SectionInformation.ForceDeclaration(System.Boolean)">
      <summary>强制关联的配置节，才会出现在配置文件中，或从配置文件中删除现有的内容。</summary>
      <param name="force">true 如果用配置文件，则应编写的关联部分否则为 false。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="force" /> 是 true 和关联的节不能导出到子配置文件中，或者未声明。</exception>
    </member>
    <member name="M:System.Configuration.SectionInformation.GetParentSection">
      <summary>获取包含与此对象关联的配置节的配置节。</summary>
      <returns>包含的配置节 <see cref="T:System.Configuration.ConfigurationSection" /> 这与该键相关联 <see cref="T:System.Configuration.SectionInformation" /> 对象。</returns>
      <exception cref="T:System.InvalidOperationException">从父节调用的方法。</exception>
    </member>
    <member name="M:System.Configuration.SectionInformation.GetRawXml">
      <summary>返回一个 XML 节点对象，表示关联的配置节对象。</summary>
      <returns>用于此配置节的 XML 表示形式。</returns>
      <exception cref="T:System.InvalidOperationException">此配置对象已被锁定，因此无法编辑。</exception>
    </member>
    <member name="M:System.Configuration.SectionInformation.ProtectSection(System.String)">
      <summary>将标记用于保护的配置节。</summary>
      <param name="protectionProvider">要使用的保护提供程序的名称。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Configuration.SectionInformation.AllowLocation" /> 属性设置为 false。- 或 -目标部分已是受保护的数据部分。</exception>
    </member>
    <member name="M:System.Configuration.SectionInformation.RevertToParent">
      <summary>导致关联的配置节，以从其父节继承其所有值。</summary>
      <exception cref="T:System.InvalidOperationException">不能在编辑模式下调用此方法。</exception>
    </member>
    <member name="M:System.Configuration.SectionInformation.SetRawXml(System.String)">
      <summary>将该对象设置的 XML 表示形式中的配置文件关联的配置节。</summary>
      <param name="rawXml">要使用的 XML。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="rawXml" /> 为 null。</exception>
    </member>
    <member name="M:System.Configuration.SectionInformation.UnprotectSection">
      <summary>从关联的配置节中删除受保护的配置加密。</summary>
    </member>
    <member name="M:System.Configuration.StringValidator.#ctor(System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Configuration.StringValidator" /> 基于提供的参数的类。</summary>
      <param name="minLength">一个整数，指定的字符串值的最小长度。</param>
    </member>
    <member name="M:System.Configuration.StringValidator.#ctor(System.Int32,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Configuration.StringValidator" /> 基于提供的参数的类。</summary>
      <param name="minLength">一个整数，指定的字符串值的最小长度。</param>
      <param name="maxLength">一个整数，指定的字符串值的最大长度。</param>
    </member>
    <member name="M:System.Configuration.StringValidator.#ctor(System.Int32,System.Int32,System.String)">
      <summary>新实例初始化 <see cref="T:System.Configuration.StringValidator" /> 基于提供的参数的类。</summary>
      <param name="minLength">一个整数，指定的字符串值的最小长度。</param>
      <param name="maxLength">一个整数，指定的字符串值的最大长度。</param>
      <param name="invalidCharacters">表示无效的字符的字符串。</param>
    </member>
    <member name="M:System.Configuration.StringValidator.CanValidate(System.Type)">
      <summary>确定是否可以根据类型验证对象。</summary>
      <param name="type">对象类型。</param>
      <returns>true 如果 <paramref name="type" /> 参数匹配的字符串; 否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.StringValidator.Validate(System.Object)">
      <summary>确定某个对象的值是否有效。</summary>
      <param name="value">对象值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 是小于 <paramref name="minValue" /> 或大于 <paramref name="maxValue" /> 构造函数中定义。- 或 -<paramref name="value" /> 包含无效字符。</exception>
    </member>
    <member name="M:System.Configuration.StringValidatorAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.StringValidatorAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.SubclassTypeValidator.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Configuration.SubclassTypeValidator" /> 类的新实例。</summary>
      <param name="baseClass">要验证的基本类。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseClass" /> 为 null。</exception>
    </member>
    <member name="M:System.Configuration.SubclassTypeValidator.CanValidate(System.Type)">
      <summary>确定是否可以根据类型验证对象。</summary>
      <param name="type">对象类型。</param>
      <returns>true 如果 <paramref name="type" /> 参数与匹配的类型可以被验证; 否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.SubclassTypeValidator.Validate(System.Object)">
      <summary>确定某个对象的值是否有效。</summary>
      <param name="value">对象值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不属于 <see cref="T:System.Type" /> ，可从 <paramref name="baseClass" /> 构造函数中定义。</exception>
    </member>
    <member name="M:System.Configuration.SubclassTypeValidatorAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Configuration.SubclassTypeValidatorAttribute" /> 类的新实例。</summary>
      <param name="baseClass">基类类型。</param>
    </member>
    <member name="M:System.Configuration.TimeSpanMinutesConverter.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.TimeSpanMinutesConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.TimeSpanMinutesConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将 <see cref="T:System.String" /> 转换为 <see cref="T:System.TimeSpan" />。</summary>
      <param name="ctx">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 用于类型转换的对象。</param>
      <param name="ci">
        <see cref="T:System.Globalization.CultureInfo" /> 转换期间使用的对象。</param>
      <param name="data">
        <see cref="T:System.String" /> 要转换的对象。</param>
      <returns>
        <see cref="T:System.TimeSpan" /> 表示 <paramref name="data" /> 以分钟为单位的参数。</returns>
    </member>
    <member name="M:System.Configuration.TimeSpanMinutesConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将 <see cref="T:System.TimeSpan" /> 转换为 <see cref="T:System.String" />。</summary>
      <param name="ctx">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 用于类型转换的对象。</param>
      <param name="ci">
        <see cref="T:System.Globalization.CultureInfo" /> 转换期间使用的对象。</param>
      <param name="value">要转换的值。</param>
      <param name="type">要转换为的类型。</param>
      <returns>
        <see cref="T:System.String" /> 表示 <paramref name="value" /> 以分钟为单位的参数。</returns>
    </member>
    <member name="M:System.Configuration.TimeSpanMinutesOrInfiniteConverter.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.TimeSpanMinutesOrInfiniteConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.TimeSpanMinutesOrInfiniteConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将 <see cref="T:System.String" /> 转换为 <see cref="T:System.TimeSpan" />。</summary>
      <param name="ctx">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 用于类型转换的对象。</param>
      <param name="ci">
        <see cref="T:System.Globalization.CultureInfo" /> 转换期间使用的对象。</param>
      <param name="data">
        <see cref="T:System.String" /> 要转换的对象。</param>
      <returns>
        <see cref="F:System.TimeSpan.MaxValue" />, ，如果 <paramref name="data" /> 参数是 <see cref="T:System.String" /> "无限"; 否则为 <see cref="T:System.TimeSpan" /> 表示 <paramref name="data" /> 以分钟为单位的参数。</returns>
    </member>
    <member name="M:System.Configuration.TimeSpanMinutesOrInfiniteConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将 <see cref="T:System.TimeSpan" /> 转换为 <see cref="T:System.String" />。</summary>
      <param name="ctx">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 用于类型转换的对象。</param>
      <param name="ci">
        <see cref="T:System.Globalization.CultureInfo" /> 转换期间使用的对象。</param>
      <param name="value">要转换的值。</param>
      <param name="type">转换类型。</param>
      <returns>
        <see cref="T:System.String" /> "无限"if <paramref name="value" /> 参数是 <see cref="F:System.TimeSpan.MaxValue" />; 否则为 <see cref="T:System.String" /> 表示 <paramref name="value" /> 以分钟为单位的参数。</returns>
    </member>
    <member name="M:System.Configuration.TimeSpanSecondsConverter.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.TimeSpanSecondsConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.TimeSpanSecondsConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将 <see cref="T:System.String" /> 转换为 <see cref="T:System.TimeSpan" />。</summary>
      <param name="ctx">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 用于类型转换的对象。</param>
      <param name="ci">
        <see cref="T:System.Globalization.CultureInfo" /> 转换期间使用的对象。</param>
      <param name="data">
        <see cref="T:System.String" /> 要转换的对象。</param>
      <returns>
        <see cref="T:System.TimeSpan" /> 表示 <paramref name="data" /> 参数以秒为单位。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="data" /> 无法分析为一个整数值。</exception>
    </member>
    <member name="M:System.Configuration.TimeSpanSecondsConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将 <see cref="T:System.TimeSpan" /> 转换为 <see cref="T:System.String" />。</summary>
      <param name="ctx">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 用于类型转换的对象。</param>
      <param name="ci">
        <see cref="T:System.Globalization.CultureInfo" /> 转换期间使用的对象。</param>
      <param name="value">要转换的值。</param>
      <param name="type">要转换为的类型。</param>
      <returns>
        <see cref="T:System.String" /> 表示 <paramref name="value" /> 以分钟为单位的参数。</returns>
    </member>
    <member name="M:System.Configuration.TimeSpanSecondsOrInfiniteConverter.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.TimeSpanSecondsOrInfiniteConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.TimeSpanSecondsOrInfiniteConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将 <see cref="T:System.String" /> 转换为 <see cref="T:System.TimeSpan" />。</summary>
      <param name="ctx">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 用于类型转换的对象。</param>
      <param name="ci">
        <see cref="T:System.Globalization.CultureInfo" /> 转换期间使用的对象。</param>
      <param name="data">
        <see cref="T:System.String" /> 要转换的对象。</param>
      <returns>
        <see cref="F:System.TimeSpan.MaxValue" />, ，如果 <paramref name="data" /> 参数是 <see cref="T:System.String" /> "无限"; 否则为 <see cref="T:System.TimeSpan" /> 表示 <paramref name="data" /> 参数以秒为单位。</returns>
    </member>
    <member name="M:System.Configuration.TimeSpanSecondsOrInfiniteConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将转换 <see cref="T:System.TimeSpan" /> 到。<see cref="T:System.String" />。</summary>
      <param name="ctx">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 用于类型转换的对象。</param>
      <param name="ci">
        <see cref="T:System.Globalization.CultureInfo" /> 转换期间使用的对象。</param>
      <param name="value">要转换的值。</param>
      <param name="type">转换类型。</param>
      <returns>
        <see cref="T:System.String" /> "无限"if <paramref name="value" /> 参数是 <see cref="F:System.TimeSpan.MaxValue" />; 否则为 <see cref="T:System.String" /> 表示 <paramref name="value" /> 参数以秒为单位。</returns>
    </member>
    <member name="M:System.Configuration.TimeSpanValidator.#ctor(System.TimeSpan,System.TimeSpan)">
      <summary>新实例初始化 <see cref="T:System.Configuration.TimeSpanValidator" /> 基于提供的参数的类。</summary>
      <param name="minValue">一个 <see cref="T:System.TimeSpan" /> 允许通过验证指定的最短时间的对象。</param>
      <param name="maxValue">一个 <see cref="T:System.TimeSpan" /> 允许通过验证指定的最长时间的对象。</param>
    </member>
    <member name="M:System.Configuration.TimeSpanValidator.#ctor(System.TimeSpan,System.TimeSpan,System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.Configuration.TimeSpanValidator" /> 基于提供的参数的类。</summary>
      <param name="minValue">一个 <see cref="T:System.TimeSpan" /> 允许通过验证指定的最短时间的对象。</param>
      <param name="maxValue">一个 <see cref="T:System.TimeSpan" /> 允许通过验证指定的最长时间的对象。</param>
      <param name="rangeIsExclusive">一个 <see cref="T:System.Boolean" /> 值，该值指定是否验证范围是独占的。</param>
    </member>
    <member name="M:System.Configuration.TimeSpanValidator.#ctor(System.TimeSpan,System.TimeSpan,System.Boolean,System.Int64)">
      <summary>新实例初始化 <see cref="T:System.Configuration.TimeSpanValidator" /> 基于提供的参数的类。</summary>
      <param name="minValue">一个 <see cref="T:System.TimeSpan" /> 允许通过验证指定的最短时间的对象。</param>
      <param name="maxValue">一个 <see cref="T:System.TimeSpan" /> 允许通过验证指定的最长时间的对象。</param>
      <param name="rangeIsExclusive">一个 <see cref="T:System.Boolean" /> 值，该值指定是否验证范围是独占的。</param>
      <param name="resolutionInSeconds">
        <see cref="T:System.Int64" /> 值，该值指定的秒数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="resolutionInSeconds" /> 小于 0。- 或 -<paramref name="minValue" /> 大于 <paramref name="maxValue" />。</exception>
    </member>
    <member name="M:System.Configuration.TimeSpanValidator.CanValidate(System.Type)">
      <summary>确定是否可以验证的对象类型。</summary>
      <param name="type">对象的类型。</param>
      <returns>true 如果 <paramref name="type" /> 参数与匹配 <see cref="T:System.TimeSpan" /> 值; 否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.TimeSpanValidator.Validate(System.Object)">
      <summary>确定某个对象的值是否有效。</summary>
      <param name="value">对象的值。</param>
    </member>
    <member name="M:System.Configuration.TimeSpanValidatorAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.TimeSpanValidatorAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.TypeNameConverter.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.TypeNameConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.TypeNameConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将 <see cref="T:System.String" /> 对象转换为 <see cref="T:System.Type" /> 对象。</summary>
      <param name="ctx">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 用于类型转换的对象。</param>
      <param name="ci">
        <see cref="T:System.Globalization.CultureInfo" /> 转换期间使用的对象。</param>
      <param name="data">
        <see cref="T:System.String" /> 要转换的对象。</param>
      <returns>
        <see cref="T:System.Type" /> 表示 <paramref name="data" /> 参数。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Type" /> 值不能为已解决。</exception>
    </member>
    <member name="M:System.Configuration.TypeNameConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将 <see cref="T:System.Type" /> 对象转换为 <see cref="T:System.String" /> 对象。</summary>
      <param name="ctx">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 用于类型转换的对象。</param>
      <param name="ci">
        <see cref="T:System.Globalization.CultureInfo" /> 转换期间使用的对象。</param>
      <param name="value">要转换的值。</param>
      <param name="type">要转换为的类型。</param>
      <returns>
        <see cref="T:System.String" /> 表示 <paramref name="value" /> 参数。</returns>
    </member>
    <member name="M:System.Configuration.WhiteSpaceTrimStringConverter.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.WhiteSpaceTrimStringConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.WhiteSpaceTrimStringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将转换 <see cref="T:System.String" /> 为规范化格式。</summary>
      <param name="ctx">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 用于类型转换的对象。</param>
      <param name="ci">
        <see cref="T:System.Globalization.CultureInfo" /> 转换期间使用的对象。</param>
      <param name="data">
        <see cref="T:System.String" /> 要转换的对象。</param>
      <returns>表示转换后的值的对象。</returns>
    </member>
    <member name="M:System.Configuration.WhiteSpaceTrimStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将转换 <see cref="T:System.String" /> 为规范化格式。</summary>
      <param name="ctx">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 用于类型转换的对象。</param>
      <param name="ci">
        <see cref="T:System.Globalization.CultureInfo" /> 转换期间使用的对象。</param>
      <param name="value">要转换的值。</param>
      <param name="type">要转换为的类型。</param>
      <returns>表示转换后的值的对象。</returns>
    </member>
    <member name="P:System.Configuration.AppSettingsSection.File">
      <summary>获取或设置提供其他设置或重写中指定的设置的配置文件 appSettings 元素。</summary>
      <returns>提供其他设置或重写中指定的设置的配置文件 appSettings 元素。</returns>
    </member>
    <member name="P:System.Configuration.AppSettingsSection.Settings">
      <summary>获取包含应用程序设置的键/值对的集合。</summary>
      <returns>包含配置文件中的应用程序设置的键/值对的集合。</returns>
    </member>
    <member name="P:System.Configuration.CallbackValidatorAttribute.CallbackMethodName">
      <summary>获取或设置回调方法的名称。</summary>
      <returns>要调用的方法的名称。</returns>
    </member>
    <member name="P:System.Configuration.CallbackValidatorAttribute.Type">
      <summary>获取或设置验证程序类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 当前的验证程序属性实例。</returns>
    </member>
    <member name="P:System.Configuration.CallbackValidatorAttribute.ValidatorInstance">
      <summary>获取验证程序实例。</summary>
      <returns>当前的 <see cref="T:System.Configuration.ConfigurationValidatorBase" /> 实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Configuration.CallbackValidatorAttribute.Type" /> 属性的值为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Configuration.CallbackValidatorAttribute.CallbackMethodName" /> 属性未设置为具有一个对象参数的公共静态 void 方法。</exception>
    </member>
    <member name="P:System.Configuration.CommaDelimitedStringCollection.IsModified">
      <summary>获取一个值，指定是否已修改该集合。</summary>
      <returns>true 如果 <see cref="T:System.Configuration.CommaDelimitedStringCollection" /> 已修改; 否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.CommaDelimitedStringCollection.IsReadOnly">
      <summary>获取一个值，该值指示集合对象只读的。</summary>
      <returns>true 如果在指定的字符串元素 <see cref="T:System.Configuration.CommaDelimitedStringCollection" /> 是只读的; 否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.CommaDelimitedStringCollection.Item(System.Int32)">
      <summary>获取或设置一个字符串元素根据索引集合中。</summary>
      <param name="index">集合中的字符串元素的索引。</param>
      <returns>集合中的字符串元素。</returns>
    </member>
    <member name="P:System.Configuration.Configuration.AppSettings">
      <summary>获取 <see cref="T:System.Configuration.AppSettingsSection" /> 应用于此对象配置节 <see cref="T:System.Configuration.Configuration" /> 对象。</summary>
      <returns>
        <see cref="T:System.Configuration.AppSettingsSection" /> 对象，表示 appSettings 应用到此配置节 <see cref="T:System.Configuration.Configuration" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.Configuration.AssemblyStringTransformer">
      <summary>指定一个函数委托，用于将转换配置文件中的程序集字符串。</summary>
      <returns>一个委托，用于转换类型字符串。 默认值为 null。</returns>
    </member>
    <member name="P:System.Configuration.Configuration.ConnectionStrings">
      <summary>获取 <see cref="T:System.Configuration.ConnectionStringsSection" /> 应用到此配置节对象 <see cref="T:System.Configuration.Configuration" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConnectionStringsSection" /> 对象，表示配置节 connectionStrings 应用到此配置节 <see cref="T:System.Configuration.Configuration" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.Configuration.EvaluationContext">
      <summary>获取 <see cref="T:System.Configuration.Configuration" /> 对象的 <see cref="T:System.Configuration.ContextInformation" /> 对象。</summary>
      <returns>
        <see cref="T:System.Configuration.ContextInformation" /> 对象 <see cref="T:System.Configuration.Configuration" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.Configuration.FilePath">
      <summary>获取由此配置文件的物理路径 <see cref="T:System.Configuration.Configuration" /> 对象。</summary>
      <returns>这表示的配置文件的物理路径 <see cref="T:System.Configuration.Configuration" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.Configuration.HasFile">
      <summary>获取一个值，该值指示由此所表示的资源是否存在文件 <see cref="T:System.Configuration.Configuration" /> 对象。</summary>
      <returns>true 如果没有配置文件;否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.Configuration.Locations">
      <summary>获取定义在此位置 <see cref="T:System.Configuration.Configuration" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationLocationCollection" /> 包含在此定义的位置 <see cref="T:System.Configuration.Configuration" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.Configuration.NamespaceDeclared">
      <summary>获取或设置一个值，指示配置文件是否有 XML 命名空间。</summary>
      <returns>true 如果配置文件的 XML 命名空间;否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.Configuration.RootSectionGroup">
      <summary>获取根 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 此 <see cref="T:System.Configuration.Configuration" /> 对象。</summary>
      <returns>此根节组 <see cref="T:System.Configuration.Configuration" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.Configuration.SectionGroups">
      <summary>获取定义此配置节组的集合。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" /> 表示为此节组的集合的集合 <see cref="T:System.Configuration.Configuration" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.Configuration.Sections">
      <summary>获取此定义的节的集合 <see cref="T:System.Configuration.Configuration" /> 对象。</summary>
      <returns>此定义的节的集合 <see cref="T:System.Configuration.Configuration" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.Configuration.TargetFramework">
      <summary>指定.NET Framework 的目标的版本时版本早于当前作为目标。</summary>
      <returns>.NET Framework 的目标版本的名称。 默认值是 null, ，指示当前的版本作为目标。</returns>
    </member>
    <member name="P:System.Configuration.Configuration.TypeStringTransformer">
      <summary>指定一个函数委托，用于将转换配置文件中的类型字符串。</summary>
      <returns>一个委托，用于转换类型字符串。 默认值为 null。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationCollectionAttribute.AddItemName">
      <summary>获取或设置的名称 &lt;add&gt; 配置元素。</summary>
      <returns>使用标准名称替换的名称"添加"的配置项。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationCollectionAttribute.ClearItemsName">
      <summary>获取或设置的名称 &lt;clear&gt; 配置元素。</summary>
      <returns>替换标准名称的名称"清除"的配置项。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationCollectionAttribute.CollectionType">
      <summary>获取或设置的一种 <see cref="T:System.Configuration.ConfigurationCollectionAttribute" /> 属性。</summary>
      <returns>
        <see cref="T:System.Configuration.ConfigurationCollectionAttribute" /> 的类型。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationCollectionAttribute.ItemType">
      <summary>获取集合元素的类型。</summary>
      <returns>集合元素的类型。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationCollectionAttribute.RemoveItemName">
      <summary>获取或设置的名称 &lt;remove&gt; 配置元素。</summary>
      <returns>替换标准名称的名称"取消"的配置元素。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationElement.CurrentConfiguration">
      <summary>获取对顶级 <see cref="T:System.Configuration.Configuration" /> 实例，它表示在配置层次结构的当前 <see cref="T:System.Configuration.ConfigurationElement" /> 实例所属。</summary>
      <returns>顶级 <see cref="T:System.Configuration.Configuration" /> 实例当前 <see cref="T:System.Configuration.ConfigurationElement" /> 实例所属。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationElement.ElementInformation">
      <summary>获取 <see cref="T:System.Configuration.ElementInformation" /> 对象，其中包含的非自定义的信息和功能 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</summary>
      <returns>
        <see cref="T:System.Configuration.ElementInformation" /> ，其中包含的非自定义的信息和功能 <see cref="T:System.Configuration.ConfigurationElement" />。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationElement.ElementProperty">
      <summary>获取 <see cref="T:System.Configuration.ConfigurationElementProperty" /> 对象，表示 <see cref="T:System.Configuration.ConfigurationElement" /> 对象本身。</summary>
      <returns>
        <see cref="T:System.Configuration.ConfigurationElementProperty" /> 表示 <see cref="T:System.Configuration.ConfigurationElement" /> 本身。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationElement.EvaluationContext">
      <summary>获取 <see cref="T:System.Configuration.ConfigurationElement" /> 对象的 <see cref="T:System.Configuration.ContextInformation" /> 对象。</summary>
      <returns>
        <see cref="T:System.Configuration.ContextInformation" /> 的 <see cref="T:System.Configuration.ConfigurationElement" />。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">当前元素不是与上下文相关联。</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationElement.HasContext">
      <summary>获取一个值，该值指示是否 <see cref="P:System.Configuration.ConfigurationElement.CurrentConfiguration" /> 属性是 null。</summary>
      <returns>false <see cref="P:System.Configuration.ConfigurationElement.CurrentConfiguration" /> 属性是 null; 否则为 true。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationElement.Item(System.Configuration.ConfigurationProperty)">
      <summary>获取或设置的属性或此配置元素的特性。</summary>
      <param name="prop">要访问的属性。</param>
      <returns>指定的属性、特性或子元素。</returns>
      <exception cref="T:System.Configuration.ConfigurationException">
        <paramref name="prop" /> 是 null 或不存在的元素中。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="prop" /> 为只读或锁定。</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationElement.Item(System.String)">
      <summary>获取或设置此配置元素的属性、特性或子元素。</summary>
      <param name="propertyName">名称 <see cref="T:System.Configuration.ConfigurationProperty" /> 访问。</param>
      <returns>指定的属性 （attribute) 或子元素</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="prop" /> 是只读的或已锁定。</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationElement.LockAllAttributesExcept">
      <summary>获取被锁定的特性的集合。</summary>
      <returns>
        <see cref="T:System.Configuration.ConfigurationLockCollection" /> 被锁定的特性 （属性） 的元素。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationElement.LockAllElementsExcept">
      <summary>获取已锁定的元素的集合。</summary>
      <returns>
        <see cref="T:System.Configuration.ConfigurationLockCollection" /> 被锁定的元素。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationElement.LockAttributes">
      <summary>获取被锁定的特性的集合 </summary>
      <returns>
        <see cref="T:System.Configuration.ConfigurationLockCollection" /> 被锁定的特性 （属性） 的元素。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationElement.LockElements">
      <summary>获取已锁定的元素的集合。</summary>
      <returns>
        <see cref="T:System.Configuration.ConfigurationLockCollection" /> 被锁定的元素。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationElement.LockItem">
      <summary>获取或设置一个值，该值指示是否锁定该元素。</summary>
      <returns>true 如果该元素被锁定;否则为 false。 默认值为 false。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">该元素已被锁定在较高的配置级别。</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationElement.Properties">
      <summary>获取属性的集合。</summary>
      <returns>元素属性的 <see cref="T:System.Configuration.ConfigurationPropertyCollection" />。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationElementCollection.AddElementName">
      <summary>获取或设置的名称 <see cref="T:System.Configuration.ConfigurationElement" /> 要在中执行添加操作相关联 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 当在派生类中重写。</summary>
      <returns>元素的名称。</returns>
      <exception cref="T:System.ArgumentException">所选的值以保留的前缀"config"或"lock"开头。</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationElementCollection.ClearElementName">
      <summary>获取或设置的名称 <see cref="T:System.Configuration.ConfigurationElement" /> 要中的清除操作相关联 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 当在派生类中重写。</summary>
      <returns>元素的名称。</returns>
      <exception cref="T:System.ArgumentException">所选的值以保留的前缀"config"或"lock"开头。</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationElementCollection.CollectionType">
      <summary>获取 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 的类型。</summary>
      <returns>
        <see cref="T:System.Configuration.ConfigurationElementCollectionType" /> 此集合。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationElementCollection.Count">
      <summary>获取集合中的元素数。</summary>
      <returns>集合中的元素数。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationElementCollection.ElementName">
      <summary>获取用于标识此元素在配置文件在派生类中重写时集合的名称。</summary>
      <returns>集合; 的名称否则为为空字符串。 默认值为一个空字符串。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationElementCollection.EmitClear">
      <summary>获取或设置一个值，指定是否清除集合。</summary>
      <returns>true 如果已清除的集合;否则为 false。 默认值为 false。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">配置是只读的。</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationElementCollection.IsSynchronized">
      <summary>获取一个值，它指示对集合的访问是否同步。</summary>
      <returns>true 如果访问 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 同步; 否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationElementCollection.RemoveElementName">
      <summary>获取或设置的名称 <see cref="T:System.Configuration.ConfigurationElement" /> 要执行删除操作相关联 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 当在派生类中重写。</summary>
      <returns>元素的名称。</returns>
      <exception cref="T:System.ArgumentException">所选的值以保留的前缀"config"或"lock"开头。</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationElementCollection.SyncRoot">
      <summary>获取用于对访问进行同步的对象 <see cref="T:System.Configuration.ConfigurationElementCollection" />。</summary>
      <returns>用于同步 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 访问的对象。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationElementCollection.ThrowOnDuplicate">
      <summary>获取一个值，该值指示尝试向 <see cref="T:System.Configuration.ConfigurationElement" /> 添加重复的 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 是否会导致引发异常。</summary>
      <returns>true 如果尝试添加重复 <see cref="T:System.Configuration.ConfigurationElement" /> 至此 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 将导致异常引发; 否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationElementProperty.Validator">
      <summary>获取 <see cref="T:System.Configuration.ConfigurationValidatorBase" /> 用来验证对象 <see cref="T:System.Configuration.ConfigurationElementProperty" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationValidatorBase" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationErrorsException.BareMessage">
      <summary>获取引发此配置异常的原因的说明。</summary>
      <returns>原因说明这 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 引发。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationErrorsException.Errors">
      <summary>获取详细说明原因的错误的集合此 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 引发了异常。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 对象，其中包含确定的原因的错误这 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 引发了异常。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationErrorsException.Filename">
      <summary>获取导致引发此配置异常的配置文件的路径。</summary>
      <returns>导致以下情况的配置文件的路径 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 引发。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationErrorsException.Line">
      <summary>获取此配置异常遇到配置文件中的行号。</summary>
      <returns>此配置文件中的行号 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 引发了异常。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationErrorsException.Message">
      <summary>获取引发此配置异常的原因的补充的的说明。</summary>
      <returns>扩展的原因的说明这 <see cref="T:System.Configuration.ConfigurationErrorsException" /> 引发了异常。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationFileMap.MachineConfigFilename">
      <summary>获取或设置的计算机配置文件名称的名称。</summary>
      <returns>计算机配置文件名称。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationLocation.Path">
      <summary>获取对其配置设置表示此资源的相对路径 <see cref="T:System.Configuration.ConfigurationLocation" /> 对象。</summary>
      <returns>其配置设置表示此资源的相对路径 <see cref="T:System.Configuration.ConfigurationLocation" />。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationLocationCollection.Item(System.Int32)">
      <summary>获取 <see cref="T:System.Configuration.ConfigurationLocationCollection" /> 的指定索引处的对象。</summary>
      <param name="index">索引位置 <see cref="T:System.Configuration.ConfigurationLocationCollection" /> 返回。</param>
      <returns>位于指定索引处的 <see cref="T:System.Configuration.ConfigurationLocationCollection" />。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationLockCollection.AttributeList">
      <summary>获取集合中包含的配置对象的列表。</summary>
      <returns>以逗号分隔的字符串，其中列出了在集合中的锁定配置对象。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationLockCollection.Count">
      <summary>获取集合中包含的锁定的配置对象的数目。</summary>
      <returns>集合中包含的锁定的配置对象数。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationLockCollection.HasParentElements">
      <summary>获取一个值，指定锁定的对象的集合是否具有父元素。</summary>
      <returns>true 如果 <see cref="T:System.Configuration.ConfigurationLockCollection" /> 集合具有父元素; 否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationLockCollection.IsModified">
      <summary>获取一个值，指定是否已修改该集合。</summary>
      <returns>true 如果 <see cref="T:System.Configuration.ConfigurationLockCollection" /> 集合已修改; 否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationLockCollection.IsSynchronized">
      <summary>获取一个值，指示集合是否已同步。</summary>
      <returns>true 如果 <see cref="T:System.Configuration.ConfigurationLockCollection" /> 集合是同步; 否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationLockCollection.SyncRoot">
      <summary>获取一个对象，该对象用于同步访问此 <see cref="T:System.Configuration.ConfigurationLockCollection" /> 集合。</summary>
      <returns>用于同步对此的访问的对象 <see cref="T:System.Configuration.ConfigurationLockCollection" /> 集合。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationManager.AppSettings">
      <summary>获取当前应用程序默认配置的 <see cref="T:System.Configuration.AppSettingsSection" /> 数据。</summary>
      <returns>返回一个 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 对象，该对象包含当前应用程序默认配置的 <see cref="T:System.Configuration.AppSettingsSection" /> 对象的内容。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">无法检索具有应用程序设置数据的 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 对象。</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationManager.ConnectionStrings">
      <summary>获取当前应用程序默认配置的 <see cref="T:System.Configuration.ConnectionStringsSection" /> 数据。</summary>
      <returns>返回一个 <see cref="T:System.Configuration.ConnectionStringSettingsCollection" /> 对象，该对象包含当前应用程序默认配置的 <see cref="T:System.Configuration.ConnectionStringsSection" /> 对象的内容。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">检索不到 <see cref="T:System.Configuration.ConnectionStringSettingsCollection" /> 对象。</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationProperty.Converter">
      <summary>获取 <see cref="T:System.ComponentModel.TypeConverter" /> 用来将其转换 <see cref="T:System.Configuration.ConfigurationProperty" /> 到对配置文件进行写入的 XML 表示形式。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.TypeConverter" /> 用来将其转换 <see cref="T:System.Configuration.ConfigurationProperty" /> 到对配置文件进行写入的 XML 表示形式。</returns>
      <exception cref="T:System.Exception">这 <see cref="T:System.Configuration.ConfigurationProperty" /> 无法转换。</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationProperty.DefaultValue">
      <summary>获取此默认值 <see cref="T:System.Configuration.ConfigurationProperty" /> 属性。</summary>
      <returns>
        <see cref="T:System.Object" /> 可以强制转换为指定类型 <see cref="P:System.Configuration.ConfigurationProperty.Type" /> 属性。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationProperty.Description">
      <summary>获取与关联的说明 <see cref="T:System.Configuration.ConfigurationProperty" />。</summary>
      <returns>一个 string 描述的属性的值。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationProperty.IsAssemblyStringTransformationRequired">
      <summary>指示为早期版本的序列化时，程序集名称的配置属性是否需要转换 .NET Framework。</summary>
      <returns>true 如果该属性需要转换程序集名称;否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationProperty.IsDefaultCollection">
      <summary>获取一个值，该值指示属性是否是一个元素的默认集合。</summary>
      <returns>true 如果该属性为元素，则默认集合否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationProperty.IsKey">
      <summary>获取一个值，该值指示是否此 <see cref="T:System.Configuration.ConfigurationProperty" /> 是包含的键 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</summary>
      <returns>true 如果此 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象至关重要为包含的元素; 否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationProperty.IsRequired">
      <summary>获取一个值，该值指示是否此 <see cref="T:System.Configuration.ConfigurationProperty" /> 是必需的。</summary>
      <returns>true 如果 <see cref="T:System.Configuration.ConfigurationProperty" /> 是必选的; 否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationProperty.IsTypeStringTransformationRequired">
      <summary>指示为早期版本的序列化时，配置属性的类型名称是否需要转换 .NET Framework。</summary>
      <returns>true 如果该属性需要转换的类型名称;否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationProperty.IsVersionCheckRequired">
      <summary>指示是否在序列化时确定的配置属性是否应序列化为 XML 查询配置属性的父配置节。</summary>
      <returns>true 如果应查询父配置节。，否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationProperty.Name">
      <summary>获取此 <see cref="T:System.Configuration.ConfigurationProperty" /> 的名称。</summary>
      <returns>
        <see cref="T:System.Configuration.ConfigurationProperty" /> 的名称。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationProperty.Type">
      <summary>获取此类型 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Type" /> 表示此类型 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationProperty.Validator">
      <summary>获取 <see cref="T:System.Configuration.ConfigurationValidatorAttribute" />, ，它用于验证此 <see cref="T:System.Configuration.ConfigurationProperty" /> 对象。</summary>
      <returns>
        <see cref="T:System.Configuration.ConfigurationValidatorBase" /> 验证程序，用于验证此 <see cref="T:System.Configuration.ConfigurationProperty" />。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationPropertyAttribute.DefaultValue">
      <summary>获取或设置经过修饰的属性的默认值。</summary>
      <returns>表示经过修饰的配置元素属性的默认值的对象。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationPropertyAttribute.IsDefaultCollection">
      <summary>获取或设置一个值，指示这是否经过修饰的配置属性的默认属性集合。</summary>
      <returns>true 如果该属性表示的元素，则默认集合否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationPropertyAttribute.IsKey">
      <summary>获取或设置一个值，指示这是否经过修饰的元素属性的键属性。</summary>
      <returns>true 如果属性是集合; 的一个元素的键属性否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationPropertyAttribute.IsRequired">
      <summary>获取或设置一个值，该值经过修饰的元素属性是否必需的。</summary>
      <returns>true 如果该属性是必需的;否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationPropertyAttribute.Name">
      <summary>获取修饰的配置元素属性的名称。</summary>
      <returns>经过修饰的配置元素属性的名称。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationPropertyAttribute.Options">
      <summary>获取或设置 <see cref="T:System.Configuration.ConfigurationPropertyOptions" /> 经过修饰的配置元素属性。</summary>
      <returns>其中一个 <see cref="T:System.Configuration.ConfigurationPropertyOptions" /> 与属性关联的枚举值。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationPropertyCollection.Count">
      <summary>获取集合中的属性的数目。</summary>
      <returns>集合中的属性的数目。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationPropertyCollection.IsSynchronized">
      <summary>获取一个值，该值指示对集合的访问是否为同步的（线程安全）。</summary>
      <returns>true 如果访问 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 同步; 否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationPropertyCollection.Item(System.String)">
      <summary>获取具有指定名称的集合项。</summary>
      <param name="name">要返回的 <see cref="T:System.Configuration.ConfigurationProperty" />。</param>
      <returns>具有指定 <see cref="T:System.Configuration.ConfigurationProperty" /> 的 <paramref name="name" />。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationPropertyCollection.SyncRoot">
      <summary>获取用于同步对集合的访问的对象。</summary>
      <returns>用于同步对集合的访问的对象。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationSection.SectionInformation">
      <summary>获取 <see cref="T:System.Configuration.SectionInformation" /> 对象，其中包含的非自定义的信息和功能 <see cref="T:System.Configuration.ConfigurationSection" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.SectionInformation" /> ，其中包含的非自定义的信息和功能 <see cref="T:System.Configuration.ConfigurationSection" />。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionCollection.Count">
      <summary>在此获取节的数目 <see cref="T:System.Configuration.ConfigurationSectionCollection" /> 对象。</summary>
      <returns>一个整数，表示集合中的节的数目。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionCollection.Item(System.Int32)">
      <summary>获取指定 <see cref="T:System.Configuration.ConfigurationSection" /> 对象。</summary>
      <param name="index">索引 <see cref="T:System.Configuration.ConfigurationSection" /> 要返回对象。</param>
      <returns>
        <see cref="T:System.Configuration.ConfigurationSection" /> 中指定索引处的对象。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionCollection.Item(System.String)">
      <summary>获取指定 <see cref="T:System.Configuration.ConfigurationSection" /> 对象。</summary>
      <param name="name">名称 <see cref="T:System.Configuration.ConfigurationSection" /> 要返回对象。</param>
      <returns>
        <see cref="T:System.Configuration.ConfigurationSection" /> 具有指定名称的对象。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionCollection.Keys">
      <summary>获取所有键 <see cref="T:System.Configuration.ConfigurationSection" /> 对象中包含此 <see cref="T:System.Configuration.ConfigurationSectionCollection" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> 对象，其中包含此集合中的所有部分的键。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionGroup.IsDeclarationRequired">
      <summary>获取一个值，该值指示是否此 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象声明是必需的。</summary>
      <returns>true 如果此 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 声明是必选的; 否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionGroup.IsDeclared">
      <summary>获取一个值，该值指示是否此 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 声明对象。</summary>
      <returns>true 如果此 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 声明; 否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionGroup.Name">
      <summary>获取此名称属性 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象。</summary>
      <returns>Name 属性 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionGroup.SectionGroupName">
      <summary>获取与此相关的节组名称 <see cref="T:System.Configuration.ConfigurationSectionGroup" />。</summary>
      <returns>此节组名称 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionGroup.SectionGroups">
      <summary>获取 <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" /> 对象，其中包含所有 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象的子级的这 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" /> 对象，其中包含所有 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象的子级的这 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionGroup.Sections">
      <summary>获取 <see cref="T:System.Configuration.ConfigurationSectionCollection" /> 对象，其中包含的所有 <see cref="T:System.Configuration.ConfigurationSection" /> 对象在此 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationSectionCollection" /> 对象，其中包含所有 <see cref="T:System.Configuration.ConfigurationSection" /> 对象在此 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionGroup.Type">
      <summary>获取或设置此类型 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象。</summary>
      <returns>这种 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象是根节组。- 或 -<see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象都有一个位置。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">已在另一级别定义的节或组。</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionGroupCollection.Count">
      <summary>获取集合中的节组的数目。</summary>
      <returns>一个整数，表示集合中的节组的数目。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionGroupCollection.Item(System.Int32)">
      <summary>获取 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象从集合中指定的索引。</summary>
      <param name="index">索引 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 要返回对象。</param>
      <returns>
        <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 中指定索引处的对象。在 C# 中，此属性是 <see cref="T:System.Configuration.ConfigurationSectionCollection" /> 类的索引器。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionGroupCollection.Item(System.String)">
      <summary>获取 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象从集合中指定其名称。</summary>
      <param name="name">名称 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 要返回对象。</param>
      <returns>
        <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 具有指定名称的对象。在 C# 中，此属性是 <see cref="T:System.Configuration.ConfigurationSectionCollection" /> 类的索引器。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionGroupCollection.Keys">
      <summary>获取所有键 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象中包含此 <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> 对象，其中包含此集合中的所有节组的名称。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationValidatorAttribute.ValidatorInstance">
      <summary>获取验证程序属性实例。</summary>
      <returns>当前的 <see cref="T:System.Configuration.ConfigurationValidatorBase" />。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationValidatorAttribute.ValidatorType">
      <summary>获取验证程序属性的类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 当前的验证程序属性实例。</returns>
    </member>
    <member name="P:System.Configuration.ConnectionStringSettings.ConnectionString">
      <summary>获取或设置连接字符串。</summary>
      <returns>分配给的字符串值 <see cref="P:System.Configuration.ConnectionStringSettings.ConnectionString" /> 属性。</returns>
    </member>
    <member name="P:System.Configuration.ConnectionStringSettings.Name">
      <summary>获取或设置 <see cref="T:System.Configuration.ConnectionStringSettings" /> 名称。</summary>
      <returns>分配给的字符串值 <see cref="P:System.Configuration.ConnectionStringSettings.Name" /> 属性。</returns>
    </member>
    <member name="P:System.Configuration.ConnectionStringSettings.ProviderName">
      <summary>获取或设置提供程序名称属性。</summary>
      <returns>获取或设置 <see cref="P:System.Configuration.ConnectionStringSettings.ProviderName" /> 属性。</returns>
    </member>
    <member name="P:System.Configuration.ConnectionStringSettingsCollection.Item(System.Int32)">
      <summary>获取或设置集合中的指定索引处的连接字符串。</summary>
      <param name="index">索引 <see cref="T:System.Configuration.ConnectionStringSettings" /> 集合中的对象。</param>
      <returns>
        <see cref="T:System.Configuration.ConnectionStringSettings" /> 中指定索引处的对象。</returns>
    </member>
    <member name="P:System.Configuration.ConnectionStringSettingsCollection.Item(System.String)">
      <summary>获取或设置 <see cref="T:System.Configuration.ConnectionStringSettings" /> 具有指定名称的集合中的对象。</summary>
      <param name="name">名称 <see cref="T:System.Configuration.ConnectionStringSettings" /> 集合中的对象。</param>
      <returns>
        <see cref="T:System.Configuration.ConnectionStringSettings" /> 对象具有指定名称; 否则为 null。</returns>
    </member>
    <member name="P:System.Configuration.ConnectionStringsSection.ConnectionStrings">
      <summary>获取 <see cref="T:System.Configuration.ConnectionStringSettingsCollection" /> 集合 <see cref="T:System.Configuration.ConnectionStringSettings" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConnectionStringSettingsCollection" /> 集合 <see cref="T:System.Configuration.ConnectionStringSettings" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.ContextInformation.HostingContext">
      <summary>获取要计算的配置属性的环境的上下文。</summary>
      <returns>一个对象，指定要计算的配置属性的环境。</returns>
    </member>
    <member name="P:System.Configuration.ContextInformation.IsMachineLevel">
      <summary>获取一个值，指定在计算机配置级别是否正在计算配置属性。</summary>
      <returns>true 如果在计算机配置级别; 正在计算配置属性否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.DpapiProtectedConfigurationProvider.UseMachineProtection">
      <summary>获取一个值，该值指示是否 <see cref="T:System.Configuration.DpapiProtectedConfigurationProvider" /> 对象正在使用特定于计算机或用户帐户特定保护。</summary>
      <returns>true 如果 <see cref="T:System.Configuration.DpapiProtectedConfigurationProvider" /> 正在使用计算机特定保护; false 如果正在使用用户帐户特定保护。</returns>
    </member>
    <member name="P:System.Configuration.ElementInformation.Errors">
      <summary>获取有关关联的元素和子元素的错误</summary>
      <returns>包含关联的元素和子元素的错误的集合</returns>
    </member>
    <member name="P:System.Configuration.ElementInformation.IsCollection">
      <summary>获取一个值，该值指示是否关联 <see cref="T:System.Configuration.ConfigurationElement" /> 对象是 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 集合。</summary>
      <returns>true 如果关联 <see cref="T:System.Configuration.ConfigurationElement" /> 对象是 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 集合; 否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.ElementInformation.IsLocked">
      <summary>获取一个值，该值指示是否关联 <see cref="T:System.Configuration.ConfigurationElement" /> 对象不能修改。</summary>
      <returns>true 如果关联 <see cref="T:System.Configuration.ConfigurationElement" /> 对象不能为已修改; 否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.ElementInformation.IsPresent">
      <summary>获取一个值，该值指示是否关联 <see cref="T:System.Configuration.ConfigurationElement" /> 对象是在配置文件中。</summary>
      <returns>true 如果关联 <see cref="T:System.Configuration.ConfigurationElement" /> 对象是在配置文件中; 否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.ElementInformation.LineNumber">
      <summary>在配置文件中获取的行号其中关联 <see cref="T:System.Configuration.ConfigurationElement" /> 定义对象。</summary>
      <returns>在配置中的行号文件的位置关联 <see cref="T:System.Configuration.ConfigurationElement" /> 定义对象。</returns>
    </member>
    <member name="P:System.Configuration.ElementInformation.Properties">
      <summary>获取 <see cref="T:System.Configuration.PropertyInformationCollection" /> 中关联属性的集合 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.PropertyInformationCollection" /> 中关联属性的集合 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.ElementInformation.Source">
      <summary>获取的源文件位置关联 <see cref="T:System.Configuration.ConfigurationElement" /> 发起的对象。</summary>
      <returns>源文件关联 <see cref="T:System.Configuration.ConfigurationElement" /> 发起的对象。</returns>
    </member>
    <member name="P:System.Configuration.ElementInformation.Type">
      <summary>获取关联的类型 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</summary>
      <returns>关联的类型 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.ElementInformation.Validator">
      <summary>获取用于验证关联的对象 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</summary>
      <returns>用来验证关联的对象 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.ExeConfigurationFileMap.ExeConfigFilename">
      <summary>获取或设置配置文件的名称。</summary>
      <returns>配置文件名称。</returns>
    </member>
    <member name="P:System.Configuration.ExeConfigurationFileMap.LocalUserConfigFilename">
      <summary>获取或设置为本地用户配置文件的名称。</summary>
      <returns>配置文件名称。</returns>
    </member>
    <member name="P:System.Configuration.ExeConfigurationFileMap.RoamingUserConfigFilename">
      <summary>获取或设置漫游用户配置文件的名称。</summary>
      <returns>配置文件名称。</returns>
    </member>
    <member name="P:System.Configuration.ExeContext.ExePath">
      <summary>获取应用程序的当前路径。</summary>
      <returns>一个包含当前路径的字符串值。</returns>
    </member>
    <member name="P:System.Configuration.ExeContext.UserLevel">
      <summary>获取表示当前应用程序的路径级别的对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationUserLevel" /> 对象，表示当前应用程序的路径级别。</returns>
    </member>
    <member name="P:System.Configuration.IntegerValidatorAttribute.ExcludeRange">
      <summary>获取或设置一个值，该值指示是否要包含或排除定义的范围内的整数 <see cref="P:System.Configuration.IntegerValidatorAttribute.MinValue" /> 和 <see cref="P:System.Configuration.IntegerValidatorAttribute.MaxValue" /> 属性值。</summary>
      <returns>true 如果必须排除值;否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Configuration.IntegerValidatorAttribute.MaxValue">
      <summary>获取或设置属性允许的最大值。</summary>
      <returns>一个整数，指示允许的最大值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">所选的值是小于 <see cref="P:System.Configuration.IntegerValidatorAttribute.MinValue" />。</exception>
    </member>
    <member name="P:System.Configuration.IntegerValidatorAttribute.MinValue">
      <summary>获取或设置属性允许的最小值。</summary>
      <returns>一个整数，指示允许的最小值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">所选的值是否大于 <see cref="P:System.Configuration.IntegerValidatorAttribute.MaxValue" />。</exception>
    </member>
    <member name="P:System.Configuration.IntegerValidatorAttribute.ValidatorInstance">
      <summary>获取实例 <see cref="T:System.Configuration.IntegerValidator" /> 类。</summary>
      <returns>
        <see cref="T:System.Configuration.ConfigurationValidatorBase" /> 验证程序实例。</returns>
    </member>
    <member name="P:System.Configuration.Internal.DelegatingConfigHost.Host">
      <summary>获取或设置 <see cref="T:System.Configuration.Internal.IInternalConfigHost" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.Internal.IInternalConfigHost" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.Internal.DelegatingConfigHost.IsRemote">
      <summary>获取一个值，该值指示是否配置为远程。</summary>
      <returns>true 如果配置为远程;否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.Internal.DelegatingConfigHost.SupportsChangeNotifications">
      <summary>获取一个值，该值指示主机配置是否支持更改通知。</summary>
      <returns>true 如果宿主支持更改通知;否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.Internal.DelegatingConfigHost.SupportsLocation">
      <summary>获取一个值，该值指示主机配置是否支持位置标记。</summary>
      <returns>true 如果宿主支持位置标记，则否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.Internal.DelegatingConfigHost.SupportsPath">
      <summary>获取一个值，该值指示主机配置是否具有路径支持。</summary>
      <returns>true 如果主机配置具有路径支持;否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.Internal.DelegatingConfigHost.SupportsRefresh">
      <summary>获取一个值，该值指示主机配置是否支持刷新。</summary>
      <returns>true 如果主机配置支持刷新;否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.Internal.IConfigErrorInfo.Filename">
      <summary>获取一个字符串，指定相关的配置详细信息的文件名称。</summary>
      <returns>指定文件名的字符串。</returns>
    </member>
    <member name="P:System.Configuration.Internal.IConfigErrorInfo.LineNumber">
      <summary>获取一个整数，指定相关的配置详细信息的行号。</summary>
      <returns>指定行号的整数。</returns>
    </member>
    <member name="P:System.Configuration.Internal.IConfigSystem.Host">
      <summary>获取配置主机。</summary>
      <returns>
        <see cref="T:System.Configuration.Internal.IInternalConfigHost" /> .NET Framework 用来初始化应用程序配置属性的对象。</returns>
    </member>
    <member name="P:System.Configuration.Internal.IConfigSystem.Root">
      <summary>获取配置层次结构的根。</summary>
      <returns>一个 <see cref="T:System.Configuration.Internal.IInternalConfigRoot" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.Internal.IConfigurationManagerInternal.ApplicationConfigUri">
      <summary>获取与应用程序路径相关的配置文件名称。</summary>
      <returns>表示配置文件名称的字符串值。</returns>
    </member>
    <member name="P:System.Configuration.Internal.IConfigurationManagerInternal.ExeLocalConfigDirectory">
      <summary>获取根据输入程序集的应用程序的本地配置目录。</summary>
      <returns>一个字符串，表示本地配置目录。</returns>
    </member>
    <member name="P:System.Configuration.Internal.IConfigurationManagerInternal.ExeLocalConfigPath">
      <summary>获取根据输入程序集的应用程序的本地配置路径。</summary>
      <returns>表示应用程序的本地配置路径的字符串值。</returns>
    </member>
    <member name="P:System.Configuration.Internal.IConfigurationManagerInternal.ExeProductName">
      <summary>获取根据输入程序集的应用程序的产品名称。</summary>
      <returns>表示应用程序的产品名称的字符串值。</returns>
    </member>
    <member name="P:System.Configuration.Internal.IConfigurationManagerInternal.ExeProductVersion">
      <summary>获取根据输入程序集的应用程序的产品版本。</summary>
      <returns>表示产品版本的应用程序的字符串值。</returns>
    </member>
    <member name="P:System.Configuration.Internal.IConfigurationManagerInternal.ExeRoamingConfigDirectory">
      <summary>获取根据输入程序集的应用程序的漫游配置目录。</summary>
      <returns>表示应用程序的漫游配置目录的字符串值。</returns>
    </member>
    <member name="P:System.Configuration.Internal.IConfigurationManagerInternal.ExeRoamingConfigPath">
      <summary>获取应用程序的入口程序集所基于的漫游用户的配置路径。</summary>
      <returns>表示漫游用户配置路径的字符串值。</returns>
    </member>
    <member name="P:System.Configuration.Internal.IConfigurationManagerInternal.MachineConfigPath">
      <summary>获取 Machine.config 文件的配置路径。</summary>
      <returns>表示在 Machine.config 文件的路径的字符串值。</returns>
    </member>
    <member name="P:System.Configuration.Internal.IConfigurationManagerInternal.SetConfigurationSystemInProgress">
      <summary>获取一个值，表示配置系统的状态。</summary>
      <returns>true 如果正在初始化; 正在配置系统否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.Internal.IConfigurationManagerInternal.SupportsUserConfig">
      <summary>获取一个值，指定是否支持用户配置设置。</summary>
      <returns>true 如果配置系统支持的用户配置设置;否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.Internal.IConfigurationManagerInternal.UserConfigFilename">
      <summary>获取用来存储用户配置设置的文件的名称。</summary>
      <returns>指定用来存储用户配置文件的名称的字符串。</returns>
    </member>
    <member name="P:System.Configuration.Internal.IInternalConfigHost.IsRemote">
      <summary>返回一个值，该值指示是否配置为远程。</summary>
      <returns>true 如果配置为远程;否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.Internal.IInternalConfigHost.SupportsChangeNotifications">
      <summary>返回一个值，该值指示主机配置是否支持更改通知。</summary>
      <returns>true 如果配置支持更改通知;否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.Internal.IInternalConfigHost.SupportsLocation">
      <summary>返回一个值，该值指示主机配置是否支持位置标记。</summary>
      <returns>true 如果配置支持位置标记，则否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.Internal.IInternalConfigHost.SupportsPath">
      <summary>返回一个值，该值指示主机配置是否支持路径标记。</summary>
      <returns>true 如果配置支持路径标记，则否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.Internal.IInternalConfigHost.SupportsRefresh">
      <summary>返回一个值，该值指示主机配置是否支持配置刷新。</summary>
      <returns>true 如果配置支持配置刷新;否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.Internal.IInternalConfigRecord.ConfigPath">
      <summary>获取一个表示配置文件路径的字符串。</summary>
      <returns>表示配置文件路径的字符串。</returns>
    </member>
    <member name="P:System.Configuration.Internal.IInternalConfigRecord.HasInitErrors">
      <summary>返回一个值，该值指示是否将配置对象的初始化期间出现错误。</summary>
      <returns>true 如果配置的对象; 初始化期间出错否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.Internal.IInternalConfigRecord.StreamName">
      <summary>返回的名称 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务对配置文件。</summary>
      <returns>一个表示名称的字符串 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务对配置文件。</returns>
    </member>
    <member name="P:System.Configuration.Internal.IInternalConfigRoot.IsDesignTime">
      <summary>返回一个值，该值指示是否设计时配置的配置。</summary>
      <returns>true 如果配置是一种设计时配置; false 如果配置不是设计时配置。</returns>
    </member>
    <member name="P:System.Configuration.Internal.IInternalConfigSystem.SupportsUserConfig">
      <summary>获取一个值，该值指示是否支持用户配置。</summary>
      <returns>true 如果用户配置受支持;否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.Internal.InternalConfigEventArgs.ConfigPath">
      <summary>获取或设置与相关的配置路径 <see cref="T:System.Configuration.Internal.InternalConfigEventArgs" /> 对象。</summary>
      <returns>指定配置路径的字符串值。</returns>
    </member>
    <member name="P:System.Configuration.KeyValueConfigurationCollection.AllKeys">
      <summary>获取包含中的所有项的键 <see cref="T:System.Configuration.KeyValueConfigurationCollection" /> 集合。</summary>
      <returns>字符串数组。</returns>
    </member>
    <member name="P:System.Configuration.KeyValueConfigurationCollection.Item(System.String)">
      <summary>获取 <see cref="T:System.Configuration.KeyValueConfigurationElement" /> 对象基于所提供的参数。</summary>
      <param name="key">键 <see cref="T:System.Configuration.KeyValueConfigurationElement" /> 包含在集合中。</param>
      <returns>一个配置元素，或 null 如果该键不存在集合中。</returns>
    </member>
    <member name="P:System.Configuration.KeyValueConfigurationCollection.Properties">
      <summary>获取配置属性的集合。</summary>
      <returns>一个配置属性的集合。</returns>
    </member>
    <member name="P:System.Configuration.KeyValueConfigurationCollection.ThrowOnDuplicate">
      <summary>获取一个值，该值指示是否尝试添加重复 <see cref="T:System.Configuration.KeyValueConfigurationElement" /> 对象传递给 <see cref="T:System.Configuration.KeyValueConfigurationCollection" /> 收集将导致引发异常。</summary>
      <returns>如果尝试向 true 添加重复的 <see cref="T:System.Configuration.KeyValueConfigurationElement" /> 会导致引发异常，则为 <see cref="T:System.Configuration.KeyValueConfigurationCollection" />；否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.KeyValueConfigurationElement.Key">
      <summary>获取的键 <see cref="T:System.Configuration.KeyValueConfigurationElement" /> 对象。</summary>
      <returns>键 <see cref="T:System.Configuration.KeyValueConfigurationElement" />。</returns>
    </member>
    <member name="P:System.Configuration.KeyValueConfigurationElement.Properties">
      <summary>获取属性的集合。</summary>
      <returns>元素属性的 <see cref="T:System.Configuration.ConfigurationPropertyCollection" />。</returns>
    </member>
    <member name="P:System.Configuration.KeyValueConfigurationElement.Value">
      <summary>获取或设置 <see cref="T:System.Configuration.KeyValueConfigurationElement" /> 对象的值。</summary>
      <returns>
        <see cref="T:System.Configuration.KeyValueConfigurationElement" /> 的值。</returns>
    </member>
    <member name="P:System.Configuration.LongValidatorAttribute.ExcludeRange">
      <summary>获取或设置一个值，该值指示是否要包含或排除定义的范围内的整数 <see cref="P:System.Configuration.LongValidatorAttribute.MinValue" /> 和 <see cref="P:System.Configuration.LongValidatorAttribute.MaxValue" /> 属性值。</summary>
      <returns>true 如果必须排除值;否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Configuration.LongValidatorAttribute.MaxValue">
      <summary>获取或设置属性允许的最大值。</summary>
      <returns>一个长整型，该值指示允许的最大值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">所选的值是小于 <see cref="P:System.Configuration.LongValidatorAttribute.MinValue" />。</exception>
    </member>
    <member name="P:System.Configuration.LongValidatorAttribute.MinValue">
      <summary>获取或设置属性允许的最小值。</summary>
      <returns>一个整数，指示允许的最小值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">所选的值是否大于 <see cref="P:System.Configuration.LongValidatorAttribute.MaxValue" />。</exception>
    </member>
    <member name="P:System.Configuration.LongValidatorAttribute.ValidatorInstance">
      <summary>获取实例 <see cref="T:System.Configuration.LongValidator" /> 类。</summary>
      <returns>
        <see cref="T:System.Configuration.ConfigurationValidatorBase" /> 验证程序实例。</returns>
    </member>
    <member name="P:System.Configuration.NameValueConfigurationCollection.AllKeys">
      <summary>获取包含中的所有项的键 <see cref="T:System.Configuration.NameValueConfigurationCollection" />。</summary>
      <returns>字符串数组。</returns>
    </member>
    <member name="P:System.Configuration.NameValueConfigurationCollection.Item(System.String)">
      <summary>获取或设置 <see cref="T:System.Configuration.NameValueConfigurationElement" /> 对象基于所提供的参数。</summary>
      <param name="name">名称 <see cref="T:System.Configuration.NameValueConfigurationElement" /> 包含在集合中。</param>
      <returns>一个 <see cref="T:System.Configuration.NameValueConfigurationElement" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.NameValueConfigurationElement.Name">
      <summary>获取名称 <see cref="T:System.Configuration.NameValueConfigurationElement" /> 对象。</summary>
      <returns>
        <see cref="T:System.Configuration.NameValueConfigurationElement" /> 对象的名称。</returns>
    </member>
    <member name="P:System.Configuration.NameValueConfigurationElement.Value">
      <summary>获取或设置 <see cref="T:System.Configuration.NameValueConfigurationElement" /> 对象的值。</summary>
      <returns>值 <see cref="T:System.Configuration.NameValueConfigurationElement" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.PositiveTimeSpanValidatorAttribute.ValidatorInstance">
      <summary>获取实例 <see cref="T:System.Configuration.PositiveTimeSpanValidator" /> 类。</summary>
      <returns>
        <see cref="T:System.Configuration.ConfigurationValidatorBase" /> 验证程序实例。</returns>
    </member>
    <member name="P:System.Configuration.PropertyInformation.Converter">
      <summary>获取 <see cref="T:System.ComponentModel.TypeConverter" /> 对象相关的配置属性。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.TypeConverter" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.PropertyInformation.DefaultValue">
      <summary>获取一个对象，包含与相关的配置属性的默认值。</summary>
      <returns>包含配置属性的默认值的对象。</returns>
    </member>
    <member name="P:System.Configuration.PropertyInformation.Description">
      <summary>获取与配置特性相对应的对象的说明。</summary>
      <returns>配置属性的说明。</returns>
    </member>
    <member name="P:System.Configuration.PropertyInformation.IsKey">
      <summary>获取一个值，指定的配置属性是否为键。</summary>
      <returns>true 如果配置属性是键;否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.PropertyInformation.IsLocked">
      <summary>获取一个值，指定是否已锁定的配置属性。</summary>
      <returns>true 如果 <see cref="T:System.Configuration.PropertyInformation" /> 对象是锁定; 否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.PropertyInformation.IsModified">
      <summary>获取一个值，指定是否已修改的配置属性。</summary>
      <returns>true 如果 <see cref="T:System.Configuration.PropertyInformation" /> 对象已被修改; 否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.PropertyInformation.IsRequired">
      <summary>获取一个值，指定是否需要配置属性。</summary>
      <returns>true 如果 <see cref="T:System.Configuration.PropertyInformation" /> 对象是必选的; 否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.PropertyInformation.LineNumber">
      <summary>获取与配置属性相关的配置文件中的行号。</summary>
      <returns>配置文件的行号。</returns>
    </member>
    <member name="P:System.Configuration.PropertyInformation.Name">
      <summary>获取与配置特性相对应的对象的名称。</summary>
      <returns>
        <see cref="T:System.Configuration.PropertyInformation" /> 对象的名称。</returns>
    </member>
    <member name="P:System.Configuration.PropertyInformation.Source">
      <summary>获取与配置特性相对应的源文件。</summary>
      <returns>源文件 <see cref="T:System.Configuration.PropertyInformation" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.PropertyInformation.Type">
      <summary>获取 <see cref="T:System.Type" /> 对应于配置属性的对象。</summary>
      <returns>
        <see cref="T:System.Type" /> 的 <see cref="T:System.Configuration.PropertyInformation" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.PropertyInformation.Validator">
      <summary>获取 <see cref="T:System.Configuration.ConfigurationValidatorBase" /> 对象相关的配置属性。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationValidatorBase" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.PropertyInformation.Value">
      <summary>获取或设置一个对象，包含与相关的配置属性的值。</summary>
      <returns>一个对象，包含的值为 <see cref="T:System.Configuration.PropertyInformation" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.PropertyInformation.ValueOrigin">
      <summary>获取 <see cref="T:System.Configuration.PropertyValueOrigin" /> 对象相关的配置属性。</summary>
      <returns>一个 <see cref="T:System.Configuration.PropertyValueOrigin" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.PropertyInformationCollection.Item(System.String)">
      <summary>获取 <see cref="T:System.Configuration.PropertyInformation" /> 基于指定的属性名称的集合中的对象。</summary>
      <param name="propertyName">中包含的配置属性的名称 <see cref="T:System.Configuration.PropertyInformationCollection" />的名称。</param>
      <returns>一个 <see cref="T:System.Configuration.PropertyInformation" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.ProtectedConfiguration.DefaultProvider">
      <summary>获取默认的受保护配置提供程序的名称。</summary>
      <returns>默认的受保护配置提供程序的名称。</returns>
    </member>
    <member name="P:System.Configuration.ProtectedConfiguration.Providers">
      <summary>获取已安装的受保护配置提供程序的集合。</summary>
      <returns>一个 <see cref="T:System.Configuration.ProtectedConfigurationProviderCollection" /> 集合安装 <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.ProtectedConfigurationProviderCollection.Item(System.String)">
      <summary>获取 <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> 集合中具有指定名称的对象。</summary>
      <param name="name">名称 <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> 集合中的对象。</param>
      <returns>
        <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> 具有指定名称的对象或 null 如果没有具有该名称的对象。</returns>
    </member>
    <member name="P:System.Configuration.ProtectedConfigurationSection.DefaultProvider">
      <summary>获取或设置的默认名称 <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> 对象在 <see cref="P:System.Configuration.ProtectedConfigurationSection.Providers" /> 集合属性。</summary>
      <returns>默认值的名称 <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> 对象在 <see cref="P:System.Configuration.ProtectedConfigurationSection.Providers" /> 集合属性。</returns>
    </member>
    <member name="P:System.Configuration.ProtectedConfigurationSection.Providers">
      <summary>获取 <see cref="T:System.Configuration.ProviderSettingsCollection" /> 所有的集合 <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> 所有参与的配置文件中的对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.ProviderSettingsCollection" /> 所有的集合 <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> 所有参与的配置文件中的对象。</returns>
    </member>
    <member name="P:System.Configuration.ProtectedProviderSettings.Properties">
      <summary>获取 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 表示受保护的配置数据的提供程序的属性的集合。</summary>
      <returns>一个 <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> 表示受保护的配置数据的提供程序的属性。</returns>
    </member>
    <member name="P:System.Configuration.ProtectedProviderSettings.Providers">
      <summary>获取一套 <see cref="T:System.Configuration.ProviderSettings" /> 表示受保护的配置数据的提供程序的属性的对象。</summary>
      <returns>一套 <see cref="T:System.Configuration.ProviderSettings" /> 表示受保护的配置数据的提供程序的属性的对象。</returns>
    </member>
    <member name="P:System.Configuration.Provider.ProviderBase.Description">
      <summary>获取一个简短的友好说明适合显示在管理工具或其他用户界面 (Ui)。</summary>
      <returns>简短的易懂描述适用于在管理工具或其他用户界面中显示。</returns>
    </member>
    <member name="P:System.Configuration.Provider.ProviderBase.Name">
      <summary>获取用于在配置过程中引用该提供程序的友好名称。</summary>
      <returns>用于在配置过程中引用该提供程序的友好名称。</returns>
    </member>
    <member name="P:System.Configuration.Provider.ProviderCollection.Count">
      <summary>获取集合中的提供程序的数目。</summary>
      <returns>集合中的提供程序的数目。</returns>
    </member>
    <member name="P:System.Configuration.Provider.ProviderCollection.IsSynchronized">
      <summary>获取一个值，该值指示对集合的访问是否为同步的（线程安全）。</summary>
      <returns>在所有情况下均为 false。</returns>
    </member>
    <member name="P:System.Configuration.Provider.ProviderCollection.Item(System.String)">
      <summary>获取具有指定名称的提供程序。</summary>
      <param name="name">标识提供程序密钥。</param>
      <returns>具有指定名称的提供程序。</returns>
    </member>
    <member name="P:System.Configuration.Provider.ProviderCollection.SyncRoot">
      <summary>获取当前对象。</summary>
      <returns>当前对象。</returns>
    </member>
    <member name="P:System.Configuration.ProviderSettings.Name">
      <summary>获取或设置配置由此类的提供程序的名称。</summary>
      <returns>提供程序的名称。</returns>
    </member>
    <member name="P:System.Configuration.ProviderSettings.Parameters">
      <summary>获取提供程序的用户定义的参数的集合。</summary>
      <returns>一个 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 的提供程序的参数。</returns>
    </member>
    <member name="P:System.Configuration.ProviderSettings.Type">
      <summary>获取或设置配置由此类的提供程序的类型。</summary>
      <returns>此配置提供程序类型的完全限定命名空间和类名称 <see cref="T:System.Configuration.ProviderSettings" /> 实例。</returns>
    </member>
    <member name="P:System.Configuration.ProviderSettingsCollection.Item(System.Int32)">
      <summary>获取或设置一个值中指定索引处 <see cref="T:System.Configuration.ProviderSettingsCollection" /> 集合。</summary>
      <param name="index">索引 <see cref="T:System.Configuration.ProviderSettings" /> 返回。</param>
      <returns>指定的 <see cref="T:System.Configuration.ProviderSettings" />。</returns>
    </member>
    <member name="P:System.Configuration.ProviderSettingsCollection.Item(System.String)">
      <summary>从集合中获取的项。</summary>
      <param name="key">对的字符串引用 <see cref="T:System.Configuration.ProviderSettings" /> 在集合中的对象。</param>
      <returns>一个 <see cref="T:System.Configuration.ProviderSettings" /> 集合中包含的对象。</returns>
    </member>
    <member name="P:System.Configuration.RegexStringValidatorAttribute.Regex">
      <summary>获取用来执行正则表达式验证的字符串。</summary>
      <returns>包含用来筛选分配给经过修饰的配置元素属性的字符串的正则表达式的字符串。</returns>
    </member>
    <member name="P:System.Configuration.RegexStringValidatorAttribute.ValidatorInstance">
      <summary>获取实例 <see cref="T:System.Configuration.RegexStringValidator" /> 类。</summary>
      <returns>
        <see cref="T:System.Configuration.ConfigurationValidatorBase" /> 验证程序实例。</returns>
    </member>
    <member name="P:System.Configuration.RsaProtectedConfigurationProvider.CspProviderName">
      <summary>获取 Windows 加密 API（加密 API）加密服务提供程序 (CSP) 的名称。</summary>
      <returns>CryptoAPI 加密服务提供程序的名称。</returns>
    </member>
    <member name="P:System.Configuration.RsaProtectedConfigurationProvider.KeyContainerName">
      <summary>获取密钥容器的名称。</summary>
      <returns>密钥容器的名称。</returns>
    </member>
    <member name="P:System.Configuration.RsaProtectedConfigurationProvider.RsaPublicKey">
      <summary>获取提供程序使用的公钥。</summary>
      <returns>包含提供程序所使用的公钥的 <see cref="T:System.Security.Cryptography.RSAParameters" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.RsaProtectedConfigurationProvider.UseFIPS">
      <summary>获取一个值，该值指示句柄是否已关闭。</summary>
      <returns>如果提供程序使用 FIPS，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.RsaProtectedConfigurationProvider.UseMachineContainer">
      <summary>获取一个值，该值指示 <see cref="T:System.Configuration.RsaProtectedConfigurationProvider" /> 对象是否正在使用计算机密钥容器。</summary>
      <returns>如果 <see cref="T:System.Configuration.RsaProtectedConfigurationProvider" /> 对象正在使用计算机密钥容器，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.RsaProtectedConfigurationProvider.UseOAEP">
      <summary>获取一个值，该值指示提供程序是否正在使用最优不对称加密填充 (OAEP) 密钥交换数据。</summary>
      <returns>如果 <see cref="T:System.Configuration.RsaProtectedConfigurationProvider" /> 对象正在使用最优不对称加密填充 (OAEP) 密钥交换数据，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.SectionInformation.AllowDefinition">
      <summary>获取或设置一个值，指示配置文件层次结构中可以定义关联的配置节的位置。</summary>
      <returns>一个值，指示其中在配置文件层次结构关联 <see cref="T:System.Configuration.ConfigurationSection" /> 可以声明对象。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">所选的值与一个值，已定义的冲突。</exception>
    </member>
    <member name="P:System.Configuration.SectionInformation.AllowExeDefinition">
      <summary>获取或设置一个值，指示关联的配置节可以在配置文件层次结构中声明的位置。</summary>
      <returns>一个值，指示其中在配置文件层次结构关联 <see cref="T:System.Configuration.ConfigurationSection" /> 对象可声明为.exe 文件。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">所选的值与一个值，已定义的冲突。</exception>
    </member>
    <member name="P:System.Configuration.SectionInformation.AllowLocation">
      <summary>获取或设置一个值，该值指示是否允许使用配置部分 location 属性。</summary>
      <returns>true 如果 location 特性是允许; 否则为 false。 默认值为 true。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">所选的值与一个值，已定义的冲突。</exception>
    </member>
    <member name="P:System.Configuration.SectionInformation.AllowOverride">
      <summary>获取或设置一个值，该值指示是否可以覆盖关联的配置节由低级别的配置文件。</summary>
      <returns>true 如果可以重写该节。否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Configuration.SectionInformation.ConfigSource">
      <summary>获取或设置在其中定义关联的配置节，该包含文件的名称，如果存在这样的文件。</summary>
      <returns>在其中包含文件的名称关联 <see cref="T:System.Configuration.ConfigurationSection" /> 定义的如果存在这样的文件; 否则为空字符串 ("")。</returns>
    </member>
    <member name="P:System.Configuration.SectionInformation.ForceSave">
      <summary>获取或设置一个值，该值指示是否将保存关联的配置节，即使尚未修改。</summary>
      <returns>true 如果关联 <see cref="T:System.Configuration.ConfigurationSection" /> 将保存对象，即使尚未修改; 否则为 false。 默认值为 false。如果配置文件的保存 （即使有不做任何修改），ASP.NET 将重新启动该应用程序。</returns>
    </member>
    <member name="P:System.Configuration.SectionInformation.InheritInChildApplications">
      <summary>获取或设置一个值，该值指示是否在关联的配置节中指定的设置继承由驻留在相关应用程序的子目录中的应用程序。</summary>
      <returns>true 如果在此指定的设置 <see cref="T:System.Configuration.ConfigurationSection" /> 对象是由子应用程序继承; 否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Configuration.SectionInformation.IsDeclarationRequired">
      <summary>获取一个值，该值指示是否必须在配置文件中声明配置节。</summary>
      <returns>true 如果关联 <see cref="T:System.Configuration.ConfigurationSection" /> 对象必须是在配置文件中声明; 否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.SectionInformation.IsDeclared">
      <summary>获取一个值，该值指示是否在配置文件中声明关联的配置节。</summary>
      <returns>true 如果此 <see cref="T:System.Configuration.ConfigurationSection" /> 配置文件中声明; 否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Configuration.SectionInformation.IsLocked">
      <summary>获取一个值，该值指示是否锁定了关联的配置节。</summary>
      <returns>true 如果该节被锁定;否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.SectionInformation.IsProtected">
      <summary>获取一个值，该值指示是否受到保护关联的配置节。</summary>
      <returns>true 如果此 <see cref="T:System.Configuration.ConfigurationSection" /> 受保护; 否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Configuration.SectionInformation.Name">
      <summary>获取关联的配置节的名称。</summary>
      <returns>配置部分完整名称。</returns>
    </member>
    <member name="P:System.Configuration.SectionInformation.OverrideMode">
      <summary>获取或设置 <see cref="T:System.Configuration.OverrideMode" /> 枚举值，该值指定由子配置文件是否可以重写相关联的配置节。</summary>
      <returns>
        <see cref="T:System.Configuration.OverrideMode" /> 枚举值之一。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">尝试同时更改两者 <see cref="P:System.Configuration.SectionInformation.AllowOverride" /> 和 <see cref="P:System.Configuration.SectionInformation.OverrideMode" /> 属性，这出于兼容性原因不受支持。</exception>
    </member>
    <member name="P:System.Configuration.SectionInformation.OverrideModeDefault">
      <summary>获取或设置一个值，指定默认值来重写行为由子配置文件的配置节。</summary>
      <returns>
        <see cref="T:System.Configuration.OverrideMode" /> 枚举值之一。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">重写行为是在父配置节中指定的。</exception>
    </member>
    <member name="P:System.Configuration.SectionInformation.OverrideModeEffective">
      <summary>获取一个配置节，又基于子配置文件是否可以锁定配置节的覆盖行为。</summary>
      <returns>
        <see cref="T:System.Configuration.OverrideMode" /> 枚举值之一。</returns>
    </member>
    <member name="P:System.Configuration.SectionInformation.ProtectionProvider">
      <summary>获取对受保护的配置提供程序关联的配置节。</summary>
      <returns>为此保护的配置提供程序 <see cref="T:System.Configuration.ConfigurationSection" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.SectionInformation.RequirePermission">
      <summary>获取一个值，该值指示是否在关联的配置节要求访问权限。</summary>
      <returns>true 如果 requirePermission 属性设置为 true; 否则为 false。 默认值为 true。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">所选的值与一个值，已定义的冲突。</exception>
    </member>
    <member name="P:System.Configuration.SectionInformation.RestartOnExternalChanges">
      <summary>获取或设置一个值，指定是否包含更改对外部配置文件需要重新启动应用程序。</summary>
      <returns>true 如果文件包含对外部配置更改，需要重新启动应用程序;否则为 false。 默认值为 true。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">所选的值与一个值，已定义的冲突。</exception>
    </member>
    <member name="P:System.Configuration.SectionInformation.SectionName">
      <summary>获取关联的配置节的名称。</summary>
      <returns>关联的名称 <see cref="T:System.Configuration.ConfigurationSection" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.SectionInformation.Type">
      <summary>获取或设置节的类名称。</summary>
      <returns>与此关联的类名称 <see cref="T:System.Configuration.ConfigurationSection" /> 部分。</returns>
      <exception cref="T:System.ArgumentException">所选的值是 null 或空字符串 ("")。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">所选的值与一个值，已定义的冲突。</exception>
    </member>
    <member name="P:System.Configuration.StringValidatorAttribute.InvalidCharacters">
      <summary>获取或设置该属性的无效字符。</summary>
      <returns>包含不允许的属性的字符集的字符串。</returns>
    </member>
    <member name="P:System.Configuration.StringValidatorAttribute.MaxLength">
      <summary>获取或设置有关要分配给属性的字符串允许的最大长度。</summary>
      <returns>一个整数，指示要赋给该属性的字符串的最大允许的长度。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">所选的值是小于 <see cref="P:System.Configuration.StringValidatorAttribute.MinLength" />。</exception>
    </member>
    <member name="P:System.Configuration.StringValidatorAttribute.MinLength">
      <summary>获取或设置要分配给属性的字符串的最小允许的值。</summary>
      <returns>一个整数，指示允许的最小长度为要分配给属性的字符串。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">所选的值是否大于 <see cref="P:System.Configuration.StringValidatorAttribute.MaxLength" />。</exception>
    </member>
    <member name="P:System.Configuration.StringValidatorAttribute.ValidatorInstance">
      <summary>获取实例 <see cref="T:System.Configuration.StringValidator" /> 类。</summary>
      <returns>当前 <see cref="T:System.Configuration.StringValidator" /> 中的设置 <see cref="T:System.Configuration.ConfigurationValidatorBase" /> 验证程序实例。</returns>
    </member>
    <member name="P:System.Configuration.SubclassTypeValidatorAttribute.BaseClass">
      <summary>获取正在验证的对象的基类型。</summary>
      <returns>正在验证的对象的基类型。</returns>
    </member>
    <member name="P:System.Configuration.SubclassTypeValidatorAttribute.ValidatorInstance">
      <summary>获取验证程序属性实例。</summary>
      <returns>当前的 <see cref="T:System.Configuration.ConfigurationValidatorBase" /> 实例。</returns>
    </member>
    <member name="P:System.Configuration.TimeSpanValidatorAttribute.ExcludeRange">
      <summary>获取或设置一个值，该值指示是否要包含或排除范围内的整数，定义 <see cref="P:System.Configuration.TimeSpanValidatorAttribute.MinValueString" /> 和 <see cref="P:System.Configuration.TimeSpanValidatorAttribute.MaxValueString" />。</summary>
      <returns>true 如果必须排除值;否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Configuration.TimeSpanValidatorAttribute.MaxValue">
      <summary>获取绝对最大 <see cref="T:System.TimeSpan" /> 值。</summary>
      <returns>允许的最大 <see cref="T:System.TimeSpan" /> 值。</returns>
    </member>
    <member name="P:System.Configuration.TimeSpanValidatorAttribute.MaxValueString">
      <summary>获取或设置相对最大 <see cref="T:System.TimeSpan" /> 值。</summary>
      <returns>允许的最大 <see cref="T:System.TimeSpan" /> 值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">所选的值表示小于 <see cref="P:System.Configuration.TimeSpanValidatorAttribute.MinValue" />。</exception>
    </member>
    <member name="P:System.Configuration.TimeSpanValidatorAttribute.MinValue">
      <summary>获取绝对最小 <see cref="T:System.TimeSpan" /> 值。</summary>
      <returns>允许的最小 <see cref="T:System.TimeSpan" /> 值。</returns>
    </member>
    <member name="P:System.Configuration.TimeSpanValidatorAttribute.MinValueString">
      <summary>获取或设置相对小 <see cref="T:System.TimeSpan" /> 值。</summary>
      <returns>允许的最小 <see cref="T:System.TimeSpan" /> 值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">所选的值表示多个 <see cref="P:System.Configuration.TimeSpanValidatorAttribute.MaxValue" />。</exception>
    </member>
    <member name="P:System.Configuration.TimeSpanValidatorAttribute.ValidatorInstance">
      <summary>获取实例 <see cref="T:System.Configuration.TimeSpanValidator" /> 类。</summary>
      <returns>
        <see cref="T:System.Configuration.ConfigurationValidatorBase" /> 验证程序实例。</returns>
    </member>
    <member name="T:System.Configuration.AppSettingsSection">
      <summary>提供有关配置系统支持 appSettings 配置节。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.CallbackValidator">
      <summary>提供了一个对象的动态验证。</summary>
    </member>
    <member name="T:System.Configuration.CallbackValidatorAttribute">
      <summary>指定 <see cref="T:System.Configuration.CallbackValidator" /> 要用于代码验证对象。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.CommaDelimitedStringCollection">
      <summary>表示用逗号分隔的字符串元素的集合。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.CommaDelimitedStringCollectionConverter">
      <summary>将逗号分隔的字符串的值转换间来回 <see cref="T:System.Configuration.CommaDelimitedStringCollection" /> 对象。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.Configuration">
      <summary>表示适用于特定计算机、 应用程序中或资源的配置文件。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationAllowDefinition">
      <summary>指定可以设置或重写中包含的属性的配置文件层次结构中的位置 <see cref="T:System.Configuration.ConfigurationSection" /> 对象。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationAllowDefinition.MachineOnly">
      <summary>
        <see cref="T:System.Configuration.ConfigurationSection" /> 可以只能在 Machine.config 文件中定义。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationAllowDefinition.MachineToWebRoot">
      <summary>
        <see cref="T:System.Configuration.ConfigurationSection" /> 可以在 Machine.config 文件或出现在与 Machine.config，位于同一目录中但不是在应用程序 Web.config 文件中的计算机级别 Web.config 文件中定义。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationAllowDefinition.MachineToApplication">
      <summary>
        <see cref="T:System.Configuration.ConfigurationSection" /> 可以定义在 Machine.config 文件与 Machine.config，位于同一目录中找到计算机级别 Web.config 文件或在虚拟目录的根目录，但不是在的虚拟根目录的子目录中找到的顶级应用程序 Web.config 文件。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationAllowDefinition.Everywhere">
      <summary>
        <see cref="T:System.Configuration.ConfigurationSection" /> 可以在任何位置定义。</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationAllowExeDefinition">
      <summary>指定可以设置或重写中包含的属性的配置文件层次结构中的位置 <see cref="T:System.Configuration.ConfigurationSection" /> 对象。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationAllowExeDefinition.MachineOnly">
      <summary>
        <see cref="T:System.Configuration.ConfigurationSection" /> 可以只能在 Machine.config 文件中定义。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationAllowExeDefinition.MachineToApplication">
      <summary>
        <see cref="T:System.Configuration.ConfigurationSection" /> 可以在 Machine.config 文件中或在客户端应用程序目录的 Exe.config 文件中定义。 这是默认值。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationAllowExeDefinition.MachineToRoamingUser">
      <summary>
        <see cref="T:System.Configuration.ConfigurationSection" /> 可以在 Machine.config 文件中，在客户端应用程序目录中的 Exe.config 文件中或在漫游的用户目录中的 User.config 文件中定义。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationAllowExeDefinition.MachineToLocalUser">
      <summary>
        <see cref="T:System.Configuration.ConfigurationSection" /> 可以在 Machine.config 文件中，在客户端应用程序目录中，漫游用户目录中，在 User.config 文件中或本地用户目录中的 User.config 文件中的 Exe.config 文件中定义。</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationCollectionAttribute">
      <summary>以声明方式指示.NET Framework 来创建配置元素集合的实例。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationConverterBase">
      <summary>配置转换器类型的基类。</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationElement">
      <summary>表示一个配置文件中的配置元素。</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationElementCollection">
      <summary>表示一个配置元素，该元素包含子元素的集合。</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationElementCollectionType">
      <summary>指定的类型 <see cref="T:System.Configuration.ConfigurationElementCollectionType" /> 对象。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationElementCollectionType.BasicMap">
      <summary>此类型的集合包含将应用于其中指定了它们的级别和所有子级别的元素。 某一子级别不能修改这种类型的父元素指定的属性。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMap">
      <summary>默认类型 <see cref="T:System.Configuration.ConfigurationElementCollection" />。 此类型的集合包含可以合并配置文件的层次结构中的元素。 在这种层次结构中，任何特定级别 add, ，remove, ，和 clear 指令用于修改任何继承的属性，以及指定新的。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate">
      <summary>与相同 <see cref="F:System.Configuration.ConfigurationElementCollectionType.BasicMap" />, 以外，此类型将导致 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 对象，其内容进行排序，以便最后列出继承的元素。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMapAlternate">
      <summary>与相同 <see cref="F:System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMap" />, 以外，此类型将导致 <see cref="T:System.Configuration.ConfigurationElementCollection" /> 对象，其内容进行排序，以便最后列出继承的元素。</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationElementProperty">
      <summary>指定一个配置元素的属性。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationErrorsException">
      <summary>发生配置错误时引发的异常。</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationFileMap">
      <summary>定义计算机配置文件的配置文件映射。</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationLocation">
      <summary>表示 location 配置文件中的元素。</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationLocationCollection">
      <summary>包含 <see cref="T:System.Configuration.ConfigurationLocationCollection" /> 对象的集合。</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationLockCollection">
      <summary>包含锁定的配置对象的集合。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationManager">
      <summary>提供对客户端应用程序配置文件的访问。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationPermission">
      <summary>提供允许方法或类以访问配置文件的权限结构。</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationPermissionAttribute">
      <summary>创建 <see cref="T:System.Configuration.ConfigurationPermission" /> 授予或拒绝访问的配置文件节标记的目标权限的对象。</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationProperty">
      <summary>表示属性或配置元素的子元素。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationPropertyAttribute">
      <summary>以声明方式指示.NET Framework 来实例化的配置属性。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationPropertyCollection">
      <summary>表示配置元素属性的集合。</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationPropertyOptions">
      <summary>指定要应用于属性的选项。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationPropertyOptions.None">
      <summary>指示没有选项适用于属性。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationPropertyOptions.IsDefaultCollection">
      <summary>指示该属性是一个默认集合。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationPropertyOptions.IsRequired">
      <summary>指示该属性是必需的。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationPropertyOptions.IsKey">
      <summary>指示该属性是集合键。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationPropertyOptions.IsTypeStringTransformationRequired">
      <summary>指示配置属性的类型名称为早期版本的.NET framework 序列化时是否需要对其进行转换。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationPropertyOptions.IsAssemblyStringTransformationRequired">
      <summary>指示配置属性的程序集名称为早期版本的.NET framework 序列化时是否需要对其进行转换。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationPropertyOptions.IsVersionCheckRequired">
      <summary>指示是否应序列化时确定的配置属性是否应序列化为 XML 查询配置属性的父配置节。</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationSaveMode">
      <summary>确定哪些属性写出到配置文件。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationSaveMode.Modified">
      <summary>仅将修改的属性，以写入配置文件中，即使该值是继承的值相同。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationSaveMode.Minimal">
      <summary>将导致不同于继承的值写入到配置文件的属性。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationSaveMode.Full">
      <summary>将导致所有属性都写入到配置文件。 这是主要用于创建配置文件的信息或将配置值从一台计算机移动到另一个非常有用。</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationSection">
      <summary>表示一个配置文件中的一个部分。</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationSectionCollection">
      <summary>表示配置文件中相关章节的集合。</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationSectionGroup">
      <summary>表示一组配置文件中的相关章节。</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationSectionGroupCollection">
      <summary>表示 <see cref="T:System.Configuration.ConfigurationSectionGroup" /> 对象集合。</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationUserLevel">
      <summary>使用指定的配置文件是由配置对象。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationUserLevel.None">
      <summary>获取 <see cref="T:System.Configuration.Configuration" /> 指示应用于所有用户。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationUserLevel.PerUserRoaming">
      <summary>获取漫游 <see cref="T:System.Configuration.Configuration" /> 指示应用于当前用户。</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationUserLevel.PerUserRoamingAndLocal">
      <summary>获取本地 <see cref="T:System.Configuration.Configuration" /> 指示应用于当前用户。</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationValidatorAttribute">
      <summary>作为类的基类 <see cref="N:System.Configuration" /> 验证程序属性类型。</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationValidatorBase">
      <summary>作为基类的类用于派生验证类，以便可以验证某个对象的值。</summary>
    </member>
    <member name="T:System.Configuration.ConnectionStringSettings">
      <summary>表示在连接字符串配置文件节中的单个命名连接字符串。</summary>
    </member>
    <member name="T:System.Configuration.ConnectionStringSettingsCollection">
      <summary>包含 <see cref="T:System.Configuration.ConnectionStringSettings" /> 对象的集合。</summary>
    </member>
    <member name="T:System.Configuration.ConnectionStringsSection">
      <summary>提供以编程方式访问连接字符串配置文件部分。</summary>
    </member>
    <member name="T:System.Configuration.ContextInformation">
      <summary>封装与相关联的上下文信息 <see cref="T:System.Configuration.ConfigurationElement" /> 对象。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.DefaultSection">
      <summary>表示一个基本的配置节处理程序，以公开为读取和写入访问的配置节的 XML。</summary>
    </member>
    <member name="T:System.Configuration.DefaultValidator">
      <summary>对对象进行验证。 无法继承此类。</summary>
    </member>
    <member name="T:System.Configuration.DpapiProtectedConfigurationProvider">
      <summary>提供使用 Windows 数据保护 API (DPAPI) 来加密和解密配置数据的 <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> 对象。</summary>
    </member>
    <member name="T:System.Configuration.ElementInformation">
      <summary>包含有关配置中的单个元素的元信息。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.ExeConfigurationFileMap">
      <summary>定义.exe 应用程序的配置文件映射。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.ExeContext">
      <summary>管理当前应用程序的路径上下文。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.GenericEnumConverter">
      <summary>一个字符串和枚举类型之间进行转换。</summary>
    </member>
    <member name="T:System.Configuration.IgnoreSection">
      <summary>提供了由未处理的配置节的包装类型定义 <see cref="N:System.Configuration" /> 类型。</summary>
    </member>
    <member name="T:System.Configuration.InfiniteIntConverter">
      <summary>一个字符串的标准无限或整数值之间进行转换。</summary>
    </member>
    <member name="T:System.Configuration.InfiniteTimeSpanConverter">
      <summary>一个字符串和标准无限之间进行转换 <see cref="T:System.TimeSpan" /> 值。</summary>
    </member>
    <member name="T:System.Configuration.IntegerValidator">
      <summary>提供验证 <see cref="T:System.Int32" /> 值。</summary>
    </member>
    <member name="T:System.Configuration.IntegerValidatorAttribute">
      <summary>以声明方式指示.NET Framework 执行整数验证的配置属性。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.Internal.DelegatingConfigHost">
      <summary>委托中的所有成员 <see cref="T:System.Configuration.Internal.IInternalConfigHost" /> 到另一个主机实例的接口。</summary>
    </member>
    <member name="T:System.Configuration.Internal.IConfigErrorInfo">
      <summary>定义由.NET Framework 以支持创建错误配置记录的接口。</summary>
    </member>
    <member name="T:System.Configuration.Internal.IConfigSystem">
      <summary>定义由.NET Framework 以支持的配置属性的初始化的接口。</summary>
    </member>
    <member name="T:System.Configuration.Internal.IConfigurationManagerHelper">
      <summary>定义由.NET Framework 以支持的配置管理的接口。</summary>
    </member>
    <member name="T:System.Configuration.Internal.IConfigurationManagerInternal">
      <summary>定义一个接口，.NET Framework 用于初始化配置属性。</summary>
    </member>
    <member name="T:System.Configuration.Internal.IInternalConfigClientHost">
      <summary>定义接口，允许自定义配置的内部.NET Framework 基础结构。</summary>
    </member>
    <member name="T:System.Configuration.Internal.IInternalConfigConfigurationFactory">
      <summary>定义内部设计时 API 用来创建的接口 <see cref="T:System.Configuration.Configuration" /> 对象。</summary>
    </member>
    <member name="T:System.Configuration.Internal.IInternalConfigHost">
      <summary>定义内部.NET 结构用于初始化应用程序配置属性的接口。</summary>
    </member>
    <member name="T:System.Configuration.Internal.IInternalConfigRecord">
      <summary>定义接口，供内部.NET 结构以支持新的配置记录的创建。</summary>
    </member>
    <member name="T:System.Configuration.Internal.IInternalConfigRoot">
      <summary>定义由内部.NET 结构以支持配置根对象的接口。</summary>
    </member>
    <member name="T:System.Configuration.Internal.IInternalConfigSettingsFactory">
      <summary>定义一个接口，由配置系统，用于设置 <see cref="T:System.Configuration.ConfigurationSettings" /> 类。</summary>
    </member>
    <member name="T:System.Configuration.Internal.IInternalConfigSystem">
      <summary>定义一个接口，.NET Framework 用于初始化应用程序配置属性。</summary>
    </member>
    <member name="T:System.Configuration.Internal.InternalConfigEventArgs">
      <summary>定义一个类，用于指定用于配置事件的事件参数的.NET Framework 基础结构。</summary>
    </member>
    <member name="T:System.Configuration.Internal.InternalConfigEventHandler">
      <summary>定义由.NET Framework 基础结构以支持配置事件的类。</summary>
      <param name="sender">事件的源对象。</param>
      <param name="e">配置事件参数。</param>
    </member>
    <member name="T:System.Configuration.Internal.StreamChangeCallback">
      <summary>表示主机监视的流发生改变时要调用的方法。</summary>
      <param name="streamName">名称 <see cref="T:System.IO.Stream" /> 对象执行 I/O 任务对配置文件。</param>
    </member>
    <member name="T:System.Configuration.KeyValueConfigurationCollection">
      <summary>包含 <see cref="T:System.Configuration.KeyValueConfigurationElement" /> 对象的集合。</summary>
    </member>
    <member name="T:System.Configuration.KeyValueConfigurationElement">
      <summary>表示一个配置元素，包含键/值对。</summary>
    </member>
    <member name="T:System.Configuration.LongValidator">
      <summary>提供验证 <see cref="T:System.Int64" /> 值。</summary>
    </member>
    <member name="T:System.Configuration.LongValidatorAttribute">
      <summary>以声明方式指示.NET Framework 执行长整数验证的配置属性。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.NameValueConfigurationCollection">
      <summary>包含 <see cref="T:System.Configuration.NameValueConfigurationElement" /> 对象的集合。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.NameValueConfigurationElement">
      <summary>一个配置元素，包含 <see cref="T:System.String" /> 名称和 <see cref="T:System.String" /> 值。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.OverrideMode">
      <summary>指定配置元素的配置元素的覆盖行为子目录中。</summary>
    </member>
    <member name="F:System.Configuration.OverrideMode.Inherit">
      <summary>如果显式允许由当前的配置元素或组的父元素的子目录中的配置设置将重写元素或组的配置设置。 使用指定的权限重写 OverrideMode 属性。</summary>
    </member>
    <member name="F:System.Configuration.OverrideMode.Allow">
      <summary>子目录中的配置设置可以重写元素或组的配置设置。</summary>
    </member>
    <member name="F:System.Configuration.OverrideMode.Deny">
      <summary>子目录中的配置设置不能重写元素或组的配置设置。</summary>
    </member>
    <member name="T:System.Configuration.PositiveTimeSpanValidator">
      <summary>提供验证 <see cref="T:System.TimeSpan" /> 对象。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.PositiveTimeSpanValidatorAttribute">
      <summary>以声明方式指示.NET Framework 上的配置属性中执行时验证。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.PropertyInformation">
      <summary>包含配置中的个别属性的元数据信息。 此类型不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.PropertyInformationCollection">
      <summary>包含 <see cref="T:System.Configuration.PropertyInformation" /> 对象的集合。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.PropertyValueOrigin">
      <summary>指定生成配置属性值的位置配置层次结构中的级别。</summary>
    </member>
    <member name="F:System.Configuration.PropertyValueOrigin.Default">
      <summary>配置属性值来源于 <see cref="P:System.Configuration.ConfigurationProperty.DefaultValue" /> 属性。</summary>
    </member>
    <member name="F:System.Configuration.PropertyValueOrigin.Inherited">
      <summary>配置属性值继承自父级别在配置中。</summary>
    </member>
    <member name="F:System.Configuration.PropertyValueOrigin.SetHere">
      <summary>配置属性值是在层次结构的当前级别定义的。</summary>
    </member>
    <member name="T:System.Configuration.ProtectedConfiguration">
      <summary>为当前应用程序的配置文件中提供对受保护配置提供程序的访问。</summary>
    </member>
    <member name="T:System.Configuration.ProtectedConfigurationProvider">
      <summary>是用于加密和解密受保护的配置数据创建提供程序的基类。</summary>
    </member>
    <member name="T:System.Configuration.ProtectedConfigurationProviderCollection">
      <summary>提供了一套 <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> 对象。</summary>
    </member>
    <member name="T:System.Configuration.ProtectedConfigurationSection">
      <summary>提供以编程方式访问 configProtectedData 配置节。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.ProtectedProviderSettings">
      <summary>表示配置提供程序的配置元素的一组 &lt;configProtectedData&gt; 配置节。</summary>
    </member>
    <member name="T:System.Configuration.Provider.ProviderBase">
      <summary>提供了可扩展的提供程序模型的基实现。</summary>
    </member>
    <member name="T:System.Configuration.Provider.ProviderCollection">
      <summary>表示继承的提供程序对象的集合 <see cref="T:System.Configuration.Provider.ProviderBase" />。</summary>
    </member>
    <member name="T:System.Configuration.Provider.ProviderException">
      <summary>配置提供程序错误发生时引发的异常。 提供程序也使用这个异常类不映射到其他预先存在的异常类的提供程序内发生内部错误时引发异常。</summary>
    </member>
    <member name="T:System.Configuration.ProviderSettings">
      <summary>表示与提供程序关联的配置元素。</summary>
    </member>
    <member name="T:System.Configuration.ProviderSettingsCollection">
      <summary>表示 <see cref="T:System.Configuration.ProviderSettings" /> 对象集合。</summary>
    </member>
    <member name="T:System.Configuration.RegexStringValidator">
      <summary>对根据提供的正则表达式的规则对字符串进行验证。</summary>
    </member>
    <member name="T:System.Configuration.RegexStringValidatorAttribute">
      <summary>以声明方式指示.NET Framework 来执行字符串验证在使用正则表达式的配置属性。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.RsaProtectedConfigurationProvider">
      <summary>提供使用 RSA 加密对配置数据进行加密和解密的 <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> 实例。</summary>
    </member>
    <member name="T:System.Configuration.SectionInformation">
      <summary>包含有关在配置层次结构中的各个部分的元数据。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.StringValidator">
      <summary>对字符串进行验证。</summary>
    </member>
    <member name="T:System.Configuration.StringValidatorAttribute">
      <summary>以声明方式指示.NET Framework 来执行字符串验证上的配置属性。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.SubclassTypeValidator">
      <summary>验证对象具有指定类型的派生的类。</summary>
    </member>
    <member name="T:System.Configuration.SubclassTypeValidatorAttribute">
      <summary>以声明方式指示.NET Framework 的配置属性执行验证。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.TimeSpanMinutesConverter">
      <summary>将转换以分钟为单位表示的时间跨度。</summary>
    </member>
    <member name="T:System.Configuration.TimeSpanMinutesOrInfiniteConverter">
      <summary>将转换 <see cref="T:System.TimeSpan" /> 以分钟为单位表示或表示为标准的无限时间跨度。</summary>
    </member>
    <member name="T:System.Configuration.TimeSpanSecondsConverter">
      <summary>转换以秒为单位的时间跨度。</summary>
    </member>
    <member name="T:System.Configuration.TimeSpanSecondsOrInfiniteConverter">
      <summary>将转换 <see cref="T:System.TimeSpan" /> 以秒为单位表示或表示为标准的无限时间跨度。</summary>
    </member>
    <member name="T:System.Configuration.TimeSpanValidator">
      <summary>提供验证 <see cref="T:System.TimeSpan" /> 对象。</summary>
    </member>
    <member name="T:System.Configuration.TimeSpanValidatorAttribute">
      <summary>以声明方式指示.NET Framework 上的配置属性中执行时验证。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.TypeNameConverter">
      <summary>类型和字符串值之间进行转换。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.ValidatorCallback">
      <summary>表示对象的验证之后调用的方法。</summary>
      <param name="value">回调方法。</param>
    </member>
    <member name="T:System.Configuration.WhiteSpaceTrimStringConverter">
      <summary>将字符串转换为它的规范化格式。</summary>
    </member>
  </members>
</doc>