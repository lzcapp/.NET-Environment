<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Data</name>
  </assembly>
  <members>
    <member name="E:System.Data.Common.DataAdapter.FillError">
      <summary>当在填充操作期间出错时返回。</summary>
    </member>
    <member name="E:System.Data.Common.DbConnection.StateChange">
      <summary>当事件状态更改时发生。</summary>
    </member>
    <member name="E:System.Data.ConstraintCollection.CollectionChanged">
      <summary>每当出现以下情况 <see cref="T:System.Data.ConstraintCollection" /> 由于更改 <see cref="T:System.Data.Constraint" /> 正在添加或移除对象。</summary>
    </member>
    <member name="E:System.Data.DataColumnCollection.CollectionChanged">
      <summary>通过添加或删除列而 columns 集合更改时发生。</summary>
    </member>
    <member name="E:System.Data.DataRelationCollection.CollectionChanged">
      <summary>在集合更改后发生。</summary>
    </member>
    <member name="E:System.Data.DataRowView.PropertyChanged">
      <summary>是的事件时引发 <see cref="T:System.Data.DataRowView" /> 属性更改。</summary>
    </member>
    <member name="E:System.Data.DataSet.Initialized">
      <summary>之后，将会 <see cref="T:System.Data.DataSet" /> 初始化。</summary>
    </member>
    <member name="E:System.Data.DataSet.MergeFailed">
      <summary>当目标和源时发生 <see cref="T:System.Data.DataRow" /> 具有相同的主键值，和 <see cref="P:System.Data.DataSet.EnforceConstraints" /> 设置为 true。</summary>
    </member>
    <member name="E:System.Data.DataTable.ColumnChanged">
      <summary>一个值更改后发生指定 <see cref="T:System.Data.DataColumn" /> 中 <see cref="T:System.Data.DataRow" />。</summary>
    </member>
    <member name="E:System.Data.DataTable.ColumnChanging">
      <summary>当更改某一值时出现指定 <see cref="T:System.Data.DataColumn" /> 中 <see cref="T:System.Data.DataRow" />。</summary>
    </member>
    <member name="E:System.Data.DataTable.Initialized">
      <summary>之后，将会 <see cref="T:System.Data.DataTable" /> 初始化。</summary>
    </member>
    <member name="E:System.Data.DataTable.RowChanged">
      <summary>之后，将会 <see cref="T:System.Data.DataRow" /> 已成功更改。</summary>
    </member>
    <member name="E:System.Data.DataTable.RowChanging">
      <summary>发生时 <see cref="T:System.Data.DataRow" /> 正在更改。</summary>
    </member>
    <member name="E:System.Data.DataTable.RowDeleted">
      <summary>已删除表中的行后发生。</summary>
    </member>
    <member name="E:System.Data.DataTable.RowDeleting">
      <summary>要删除表中的行之前发生。</summary>
    </member>
    <member name="E:System.Data.DataTable.TableCleared">
      <summary>之后，将会 <see cref="T:System.Data.DataTable" /> 被清除。</summary>
    </member>
    <member name="E:System.Data.DataTable.TableClearing">
      <summary>发生时 <see cref="T:System.Data.DataTable" /> 被清除。</summary>
    </member>
    <member name="E:System.Data.DataTable.TableNewRow">
      <summary>当新时发生 <see cref="T:System.Data.DataRow" /> 插入。</summary>
    </member>
    <member name="E:System.Data.DataTableCollection.CollectionChanged">
      <summary>之后，将会 <see cref="T:System.Data.DataTableCollection" /> 由于更改 <see cref="T:System.Data.DataTable" /> 正在添加或移除对象。</summary>
    </member>
    <member name="E:System.Data.DataTableCollection.CollectionChanging">
      <summary>发生时 <see cref="T:System.Data.DataTableCollection" /> 由于更改 <see cref="T:System.Data.DataTable" /> 正在添加或移除对象。</summary>
    </member>
    <member name="E:System.Data.DataView.Initialized">
      <summary>
        <see cref="T:System.Data.DataView" /> 的初始化完成时发生。</summary>
    </member>
    <member name="E:System.Data.DataView.ListChanged">
      <summary>更改由 <see cref="T:System.Data.DataView" /> 管理的列表时发生。</summary>
    </member>
    <member name="E:System.Data.DataViewManager.ListChanged">
      <summary>添加到或从已删除行之后发生 <see cref="T:System.Data.DataView" />。</summary>
    </member>
    <member name="E:System.Data.Odbc.OdbcConnection.InfoMessage">
      <summary>ODBC 驱动程序发送一条警告或信息性消息时发生。</summary>
    </member>
    <member name="E:System.Data.Odbc.OdbcDataAdapter.RowUpdated">
      <summary>针对数据源执行命令后，更新操作期间发生。</summary>
    </member>
    <member name="E:System.Data.Odbc.OdbcDataAdapter.RowUpdating">
      <summary>过程中发生 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 针对数据源执行命令之前。</summary>
    </member>
    <member name="E:System.Data.OleDb.OleDbConnection.InfoMessage">
      <summary>提供程序发送一条警告或信息性消息时发生。</summary>
    </member>
    <member name="E:System.Data.OleDb.OleDbDataAdapter.RowUpdated">
      <summary>过程中发生 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 针对数据源执行命令后。 若要更新尝试。 因此，发生该事件。</summary>
    </member>
    <member name="E:System.Data.OleDb.OleDbDataAdapter.RowUpdating">
      <summary>过程中发生 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 针对数据源执行命令之前。 若要更新尝试。 因此，发生该事件。</summary>
    </member>
    <member name="E:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied">
      <summary>每当 <see cref="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" /> 属性指定的行数被处理后会发生。</summary>
    </member>
    <member name="E:System.Data.SqlClient.SqlCommand.StatementCompleted">
      <summary>当 Transact-SQL 语句执行完成时发生。</summary>
    </member>
    <member name="E:System.Data.SqlClient.SqlConnection.InfoMessage">
      <summary>当 SQL Server 返回一个警告或信息性消息时发生。</summary>
    </member>
    <member name="E:System.Data.SqlClient.SqlDataAdapter.RowUpdated">
      <summary>过程中发生 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 针对数据源执行命令后。 进行尝试更新，因此都会激发该事件。</summary>
    </member>
    <member name="E:System.Data.SqlClient.SqlDataAdapter.RowUpdating">
      <summary>过程中发生 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 针对数据源执行命令之前。 进行尝试更新，因此都会激发该事件。</summary>
    </member>
    <member name="E:System.Data.SqlClient.SqlDependency.OnChange">
      <summary>对于任何与此相关的命令收到通知时发生 <see cref="T:System.Data.SqlClient.SqlDependency" /> 对象。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute.MaxByteSizeValue">
      <summary>最大大小，以字节为单位，需要在计算过程中存储此聚合实例的状态。</summary>
    </member>
    <member name="F:System.Data.Common.DbDataAdapter.DefaultSourceTableName">
      <summary>使用默认名称 <see cref="T:System.Data.Common.DataAdapter" /> 表映射的对象。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation">
      <summary>与一起使用的常量 <see cref="M:System.Data.Common.DbConnection.GetSchema" /> 表示方法 DataSourceInformation 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataCollectionNames.DataTypes">
      <summary>与一起使用的常量 <see cref="M:System.Data.Common.DbConnection.GetSchema" /> 表示方法 DataTypes 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataCollectionNames.MetaDataCollections">
      <summary>与一起使用的常量 <see cref="M:System.Data.Common.DbConnection.GetSchema" /> 表示方法 MetaDataCollections 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataCollectionNames.ReservedWords">
      <summary>与一起使用的常量 <see cref="M:System.Data.Common.DbConnection.GetSchema" /> 表示方法 ReservedWords 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataCollectionNames.Restrictions">
      <summary>与一起使用的常量 <see cref="M:System.Data.Common.DbConnection.GetSchema" /> 表示方法 限制 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.CollectionName">
      <summary>使用 GetSchema 方法来创建 CollectionName 中的列 DataTypes 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ColumnSize">
      <summary>使用 GetSchema 方法来创建 ColumnSize 中的列 DataTypes 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.CompositeIdentifierSeparatorPattern">
      <summary>使用 GetSchema 方法来创建 CompositeIdentifierSeparatorPattern 中的列 DataSourceInformation 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.CreateFormat">
      <summary>使用 GetSchema 方法来创建 CreateFormat 中的列 DataTypes 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.CreateParameters">
      <summary>使用 GetSchema 方法来创建 CreateParameters 中的列 DataTypes 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.DataSourceProductName">
      <summary>使用 GetSchema 方法来创建 DataSourceProductName 中的列 DataSourceInformation 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.DataSourceProductVersion">
      <summary>使用 GetSchema 方法来创建 有时，DataSourceProductVersion 中的列 DataSourceInformation 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.DataSourceProductVersionNormalized">
      <summary>使用 GetSchema 方法来创建 DataSourceProductVersionNormalized 中的列 DataSourceInformation 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.DataType">
      <summary>使用 GetSchema 方法来创建 DataType 中的列 数据类型 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.GroupByBehavior">
      <summary>使用 GetSchema 方法来创建 GroupByBehavior 中的列 DataSourceInformation 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IdentifierCase">
      <summary>使用 GetSchema 方法来创建 IdentifierCase 中的列 DataSourceInformation 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IdentifierPattern">
      <summary>使用 GetSchema 方法来创建 IdentifierPattern 中的列 DataSourceInformation 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsAutoIncrementable">
      <summary>使用 GetSchema 方法来创建 IsAutoIncrementable 中的列 DataTypes 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsBestMatch">
      <summary>使用 GetSchema 方法来创建 IsBestMatch 中的列 DataTypes 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsCaseSensitive">
      <summary>使用 GetSchema 方法来创建 IsCaseSensitive 中的列 DataTypes 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsConcurrencyType">
      <summary>使用 GetSchema 方法来创建 IsConcurrencyType 中的列 DataTypes 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsFixedLength">
      <summary>使用 GetSchema 方法来创建 IsFixedLength 中的列 DataTypes 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsFixedPrecisionScale">
      <summary>使用 GetSchema 方法来创建 IsFixedPrecisionScale 中的列 DataTypes 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsLiteralSupported">
      <summary>使用 GetSchema 方法来创建 IsLiteralSupported 中的列 DataTypes 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsLong">
      <summary>使用 GetSchema 方法来创建 IsLong 中的列 DataTypes 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsNullable">
      <summary>使用 GetSchema 方法来创建 IsNullable 中的列 DataTypes 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsSearchable">
      <summary>使用 GetSchema 方法来创建 IsSearchable 中的列 DataTypes 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsSearchableWithLike">
      <summary>使用 GetSchema 方法来创建 IsSearchableWithLike 中的列 DataTypes 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsUnsigned">
      <summary>使用 GetSchema 方法来创建 IsUnsigned 中的列 DataTypes 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.LiteralPrefix">
      <summary>使用 GetSchema 方法来创建 LiteralPrefix 中的列 DataTypes 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.LiteralSuffix">
      <summary>使用 GetSchema 方法来创建 LiteralSuffix 中的列 DataTypes 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.MaximumScale">
      <summary>使用 GetSchema 方法来创建 MaximumScale 中的列 DataTypes 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.MinimumScale">
      <summary>使用 GetSchema 方法来创建 MinimumScale 中的列 DataTypes 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.NumberOfIdentifierParts">
      <summary>使用 GetSchema 方法来创建 NumberOfIdentifierParts 中的列 MetaDataCollections 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.NumberOfRestrictions">
      <summary>使用 GetSchema 方法来创建 NumberOfRestrictions 中的列 MetaDataCollections 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.OrderByColumnsInSelect">
      <summary>使用 GetSchema 方法来创建 OrderByColumnsInSelect 中的列 DataSourceInformation 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat">
      <summary>使用 GetSchema 方法来创建 ParameterMarkerFormat 中的列 DataSourceInformation 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerPattern">
      <summary>使用 GetSchema 方法来创建 ParameterMarkerPattern 中的列 DataSourceInformation 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength">
      <summary>使用 GetSchema 方法来创建 ParameterNameMaxLength 中的列 DataSourceInformation 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern">
      <summary>使用 GetSchema 方法来创建 ParameterNamePattern 中的列 DataSourceInformation 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ProviderDbType">
      <summary>使用 GetSchema 方法来创建 ProviderDbType 中的列 DataTypes 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.QuotedIdentifierCase">
      <summary>使用 GetSchema 方法来创建 QuotedIdentifierCase 中的列 DataSourceInformation 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.QuotedIdentifierPattern">
      <summary>使用 GetSchema 方法来创建 QuotedIdentifierPattern 中的列 DataSourceInformation 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ReservedWord">
      <summary>使用 GetSchema 方法来创建 ReservedWord 中的列 ReservedWords 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.StatementSeparatorPattern">
      <summary>使用 GetSchema 方法来创建 StatementSeparatorPattern 中的列 DataSourceInformation 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.StringLiteralPattern">
      <summary>使用 GetSchema 方法来创建 StringLiteralPattern 中的列 DataSourceInformation 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.SupportedJoinOperators">
      <summary>使用 GetSchema 方法来创建 SupportedJoinOperators 中的列 DataSourceInformation 集合。</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.TypeName">
      <summary>使用 GetSchema 方法来创建 TypeName 中的列 DataTypes 集合。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.AllowDBNull">
      <summary>指定是否值 DBNull 允许的。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.BaseColumnName">
      <summary>指定架构表中的列的名称。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.BaseSchemaName">
      <summary>指定架构表中的架构的名称。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.BaseTableName">
      <summary>指定架构表中的表的名称。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.ColumnName">
      <summary>指定架构表中的列的名称。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.ColumnOrdinal">
      <summary>指定列的序号。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.ColumnSize">
      <summary>指定列的大小。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.DataType">
      <summary>指定列中的数据类型。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.IsAliased">
      <summary>指定该列是否是使用别名。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.IsExpression">
      <summary>指定此列是否是一个表达式。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.IsKey">
      <summary>指定该列是否是表的键。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.IsLong">
      <summary>指定此列是否包含长整型数据。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.IsUnique">
      <summary>指定唯一约束适用于此列。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.NonVersionedProviderType">
      <summary>指定列的非版本化提供程序特定的数据类型。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.NumericPrecision">
      <summary>如果是数值数据，请指定列数据的精度。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.NumericScale">
      <summary>如果是数值数据，请指定列数据的小数位数。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.ProviderType">
      <summary>指定列的提供程序特定的数据类型。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.AutoIncrementSeed">
      <summary>指定从该处分配新标识列系列的值。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.AutoIncrementStep">
      <summary>指定标识列中的值之间的增量。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.BaseCatalogName">
      <summary>与最新的查询的结果相关联的目录的名称。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.BaseColumnNamespace">
      <summary>列的命名空间。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.BaseServerName">
      <summary>列的服务器名称。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.BaseTableNamespace">
      <summary>包含列的表的命名空间。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.ColumnMapping">
      <summary>指定列的映射。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.DefaultValue">
      <summary>列的默认值。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.Expression">
      <summary>用来计算该列的表达式。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.IsAutoIncrement">
      <summary>指定是否将自动增加列中的列的值。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.IsHidden">
      <summary>指定是否隐藏此列。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.IsReadOnly">
      <summary>指定该列是否是只读的。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.IsRowVersion">
      <summary>指定此列是否包含行版本信息。</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.ProviderSpecificDataType">
      <summary>指定列的提供程序特定的数据类型。</summary>
    </member>
    <member name="F:System.Data.DataTable.fInitInProgress">
      <summary>检查是否正在执行初始化。 初始化发生在运行时。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcFactory.Instance">
      <summary>获取实例 <see cref="T:System.Data.Odbc.OdbcFactory" />, ，它可以用于检索强类型化数据对象。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcMetaDataCollectionNames.Columns">
      <summary>与一起使用的常量 GetSchema 表示方法 列 集合。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcMetaDataCollectionNames.Indexes">
      <summary>与一起使用的常量 GetSchema 表示方法 索引 集合。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcMetaDataCollectionNames.ProcedureColumns">
      <summary>与一起使用的常量 GetSchema 表示方法 ProcedureColumns 集合。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcMetaDataCollectionNames.ProcedureParameters">
      <summary>与一起使用的常量 GetSchema 表示方法 ProcedureParameters 集合。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcMetaDataCollectionNames.Procedures">
      <summary>与一起使用的常量 GetSchema 表示方法 过程 集合。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcMetaDataCollectionNames.Tables">
      <summary>与一起使用的常量 GetSchema 表示方法 表 集合。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcMetaDataCollectionNames.Views">
      <summary>与一起使用的常量 GetSchema 表示方法 视图 集合。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcMetaDataColumnNames.BooleanFalseLiteral">
      <summary>使用 GetSchema 方法来创建 BooleanFalseLiteral 列。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcMetaDataColumnNames.BooleanTrueLiteral">
      <summary>使用 GetSchema 方法来创建 BooleanTrueLiteral 列。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcMetaDataColumnNames.SQLType">
      <summary>使用 GetSchema 方法来创建 SQLType 列。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbFactory.Instance">
      <summary>获取实例 <see cref="T:System.Data.OleDb.OleDbFactory" />。 这可以用于检索强类型化数据对象。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbMetaDataCollectionNames.Catalogs">
      <summary>与一起使用的常量 GetSchema 表示方法 目录 集合。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbMetaDataCollectionNames.Collations">
      <summary>与一起使用的常量 GetSchema 表示方法 排序规则 集合。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbMetaDataCollectionNames.Columns">
      <summary>与一起使用的常量 GetSchema 表示方法 列 集合。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbMetaDataCollectionNames.Indexes">
      <summary>与一起使用的常量 GetSchema 表示方法 索引 集合。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbMetaDataCollectionNames.ProcedureColumns">
      <summary>与一起使用的常量 GetSchema 表示方法 ProcedureColumns 集合。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbMetaDataCollectionNames.ProcedureParameters">
      <summary>与一起使用的常量 GetSchema 表示方法 ProcedureParameters 集合。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbMetaDataCollectionNames.Procedures">
      <summary>与一起使用的常量 GetSchema 表示方法 过程 集合。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbMetaDataCollectionNames.Tables">
      <summary>与一起使用的常量 GetSchema 表示方法 表 集合。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbMetaDataCollectionNames.Views">
      <summary>与一起使用的常量 GetSchema 表示方法 视图 集合。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbMetaDataColumnNames.BooleanFalseLiteral">
      <summary>使用 GetSchema 方法来创建 BooleanFalseLiteral 列。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbMetaDataColumnNames.BooleanTrueLiteral">
      <summary>使用 GetSchema 方法来创建 BooleanTrueLiteral 列。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbMetaDataColumnNames.DateTimeDigits">
      <summary>使用 GetSchema 方法来创建 DateTimeDigits 列。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbMetaDataColumnNames.NativeDataType">
      <summary>使用 GetSchema 方法来创建 NativeDataType 列。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Assertions">
      <summary>返回由给定用户拥有的目录中定义的断言。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Catalogs">
      <summary>返回与从数据源可访问的目录关联的物理属性。 返回由给定用户拥有的目录中定义的断言。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Character_Sets">
      <summary>返回给定用户可以访问的目录中定义的字符集。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Check_Constraints">
      <summary>返回由给定用户拥有的目录中定义的 check 约束。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Check_Constraints_By_Table">
      <summary>返回由给定用户拥有的目录中定义的 check 约束。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Collations">
      <summary>返回给定用户可以访问的目录中定义的字符排序规则。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Column_Domain_Usage">
      <summary>返回依赖于域的目录中定义并由给定用户拥有的列的目录中定义。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Column_Privileges">
      <summary>返回上可使用或由指定的用户授权的表的目录中定义的列的权限。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Columns">
      <summary>返回的表 （包括视图） 都可以访问的、 给定用户的目录中定义的列。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Constraint_Column_Usage">
      <summary>返回引用约束、 唯一约束、 check 约束和断言使用的、 在目录中定义并由的、 给定用户拥有的列。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Constraint_Table_Usage">
      <summary>返回由引用约束、 唯一约束、 check 约束和断言的目录中定义并由给定用户拥有的表。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.DbInfoKeywords">
      <summary>返回提供程序特定关键字的列表。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.DbInfoLiterals">
      <summary>返回文本命令中使用的提供程序特有的文字的列表。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Foreign_Keys">
      <summary>返回由给定用户的目录中定义的外键列。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Indexes">
      <summary>返回由给定用户拥有的目录中定义的索引。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Key_Column_Usage">
      <summary>返回由给定用户约束为键的目录中定义的列。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Primary_Keys">
      <summary>返回由给定用户的目录中定义的主键列。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Procedure_Columns">
      <summary>返回有关由过程返回的行集的列信息。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Procedure_Parameters">
      <summary>返回有关参数和返回代码的过程信息。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Procedures">
      <summary>返回由给定用户拥有的目录中定义的过程。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Provider_Types">
      <summary>返回对于 OLE DB.NET Framework 数据提供程序支持的基本数据类型。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Referential_Constraints">
      <summary>返回由给定用户拥有的目录中定义的引用约束。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.SchemaGuids">
      <summary>返回的架构行集，由其 Guid，以及指向限制列的说明的列表。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Schemata">
      <summary>返回由给定用户拥有的架构对象。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Sql_Languages">
      <summary>返回一致性级别、 选项和支持的目录中定义的 SQL 实现处理数据的方言。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Statistics">
      <summary>返回由给定用户拥有的目录中定义的统计信息。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Table_Constraints">
      <summary>返回由给定用户拥有的目录中定义的表约束。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Table_Privileges">
      <summary>返回上表的目录中定义，可使用或由给定用户授予的权限。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Table_Statistics">
      <summary>描述在提供程序中的表上的可用统计信息集。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Tables">
      <summary>返回的表 （包括视图） 的目录中定义的、 给定用户可以访问。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Tables_Info">
      <summary>返回给定用户可以访问的表 （包括视图）。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Translations">
      <summary>返回给定用户可以访问的目录中定义的字符转换。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Trustee">
      <summary>标识数据源中定义的受信者。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Usage_Privileges">
      <summary>返回上可使用或由指定的用户授权的对象的目录中定义使用权限。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.View_Column_Usage">
      <summary>返回在其中的列中查看表依赖于在目录中定义并由给定用户拥有。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.View_Table_Usage">
      <summary>返回在其上的表中查看表、 在目录中定义和由给定用户拥有的所依赖。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbSchemaGuid.Views">
      <summary>返回给定用户可以访问的目录中定义的视图。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlClientFactory.Instance">
      <summary>获取实例 <see cref="T:System.Data.SqlClient.SqlClientFactory" />。 这可以用于检索强类型化的数据对象。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlClientMetaDataCollectionNames.Columns">
      <summary>与一起使用的常量 GetSchema 表示方法 列 集合。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlClientMetaDataCollectionNames.Databases">
      <summary>与一起使用的常量 GetSchema 表示方法 数据库 集合。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlClientMetaDataCollectionNames.ForeignKeys">
      <summary>与一起使用的常量 GetSchema 表示方法 ForeignKeys 集合。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlClientMetaDataCollectionNames.IndexColumns">
      <summary>与一起使用的常量 GetSchema 表示方法 IndexColumns 集合。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlClientMetaDataCollectionNames.Indexes">
      <summary>与一起使用的常量 GetSchema 表示方法 索引 集合。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlClientMetaDataCollectionNames.Parameters">
      <summary>与一起使用的常量 GetSchema 表示方法 参数 集合。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlClientMetaDataCollectionNames.ProcedureColumns">
      <summary>与一起使用的常量 GetSchema 表示方法 ProcedureColumns 集合。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlClientMetaDataCollectionNames.Procedures">
      <summary>与一起使用的常量 GetSchema 表示方法 过程 集合。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlClientMetaDataCollectionNames.Tables">
      <summary>与一起使用的常量 GetSchema 表示方法 表 集合。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlClientMetaDataCollectionNames.UserDefinedTypes">
      <summary>与一起使用的常量 GetSchema 表示方法 UserDefinedTypes 集合。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlClientMetaDataCollectionNames.Users">
      <summary>与一起使用的常量 GetSchema 表示方法 用户 集合。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlClientMetaDataCollectionNames.ViewColumns">
      <summary>与一起使用的常量 GetSchema 表示方法 ViewColumns 集合。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlClientMetaDataCollectionNames.Views">
      <summary>与一起使用的常量 GetSchema 表示方法 视图 集合。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlColumnEncryptionCertificateStoreProvider.ProviderName">
      <summary>提供程序名称。</summary>
      <returns>提供程序名称。</returns>
    </member>
    <member name="F:System.Data.SqlClient.SqlColumnEncryptionCngProvider.ProviderName">
      <summary>提供程序名称“MSSQL_CNG_STORE”的常量字符串。</summary>
      <returns>提供程序名称。</returns>
    </member>
    <member name="F:System.Data.SqlClient.SqlColumnEncryptionCspProvider.ProviderName">
      <summary>提供程序名称“MSSQL_CSP_PROVIDER”的常量字符串。</summary>
      <returns>提供程序名称。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBinary.Null">
      <summary>表示 <see cref="T:System.DBNull" /> ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBoolean.False">
      <summary>表示一个 false 值，可以分配给 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 属性的一个实例 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBoolean.Null">
      <summary>表示 <see cref="T:System.DBNull" /> ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBoolean.One">
      <summary>表示一个值，可以分配给 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 属性的一个实例 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBoolean.True">
      <summary>表示一个 true 值，可以分配给 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 属性的一个实例 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBoolean.Zero">
      <summary>表示一个零值，该值可以分配给 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 属性的一个实例 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlByte.MaxValue">
      <summary>一个常数，表示的最大可能值 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlByte.MinValue">
      <summary>一个常数，表示的最小可能值 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlByte.Null">
      <summary>表示 <see cref="T:System.DBNull" /> ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlByte.Zero">
      <summary>表示一个零值，该值可以分配给 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性的一个实例 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.MaxValue">
      <summary>表示的最大有效日期值 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.MinValue">
      <summary>表示的最小有效日期值 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.Null">
      <summary>表示 <see cref="T:System.DBNull" /> ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.SQLTicksPerHour">
      <summary>其值为等效于一小时的刻度数的常数。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.SQLTicksPerMinute">
      <summary>一个常数，其值是等效为一分钟的刻度数。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.SQLTicksPerSecond">
      <summary>其值为等效于 1 秒的刻度数的常数。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDecimal.MaxPrecision">
      <summary>一个常数，表示的最大可能值为 <see cref="P:System.Data.SqlTypes.SqlDecimal.Precision" /> 属性。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDecimal.MaxScale">
      <summary>一个常数，表示的最大值 <see cref="P:System.Data.SqlTypes.SqlDecimal.Scale" /> 属性。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDecimal.MaxValue">
      <summary>一个常数，表示的最大值 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDecimal.MinValue">
      <summary>一个常数，表示最小值为 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDecimal.Null">
      <summary>表示 <see cref="T:System.DBNull" /> ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlDecimal" />类。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDouble.MaxValue">
      <summary>一个常数，表示的最大值 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDouble.MinValue">
      <summary>一个常数，表示的最小可能值 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDouble.Null">
      <summary>表示 <see cref="T:System.DBNull" /> ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDouble.Zero">
      <summary>表示一个零值，该值可以分配给 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 属性的一个实例 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlGuid.Null">
      <summary>表示 <see cref="T:System.DBNull" />  ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt16.MaxValue">
      <summary>一个常数，表示的最大可能值 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt16.MinValue">
      <summary>一个常数，表示的最小可能值 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt16.Null">
      <summary>表示 <see cref="T:System.DBNull" /> ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt16.Zero">
      <summary>表示一个零值，该值可以分配给 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性的一个实例 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt32.MaxValue">
      <summary>一个常数，表示的最大可能值 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt32.MinValue">
      <summary>一个常数，表示的最小可能值 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt32.Null">
      <summary>表示 <see cref="T:System.DBNull" /> ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 类。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt32.Zero">
      <summary>表示一个零值，该值可以分配给 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性的一个实例 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt64.MaxValue">
      <summary>一个常数，表示的最大可能值为 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt64.MinValue">
      <summary>一个常数，表示的最小可能值为 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt64.Null">
      <summary>表示 <see cref="T:System.DBNull" /> ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt64.Zero">
      <summary>表示一个零值，该值可以分配给 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性的一个实例 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlMoney.MaxValue">
      <summary>表示可分配给最大值 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性的一个实例 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlMoney.MinValue">
      <summary>表示可分配给最小值 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性的一个实例 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlMoney.Null">
      <summary>表示 <see cref="T:System.DBNull" /> ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlMoney.Zero">
      <summary>表示零值，该值可以分配给 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性的一个实例 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlSingle.MaxValue">
      <summary>表示可分配给最大值 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 属性的一个实例 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 类。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlSingle.MinValue">
      <summary>表示可分配给最小值 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 属性的一个实例 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 类。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlSingle.Null">
      <summary>表示 <see cref="T:System.DBNull" /> ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlSingle.Zero">
      <summary>表示零值，该值可以分配给 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 属性的一个实例 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 类。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.BinarySort">
      <summary>指定的排序应基于字符的数字值而不是其字母数字值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.BinarySort2">
      <summary>指定的排序应基于字符的数字值，而不是其字母数字值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.IgnoreCase">
      <summary>指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 比较应忽略大小写。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.IgnoreKanaType">
      <summary>指定的字符串比较必须忽略假名类型。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.IgnoreNonSpace">
      <summary>指定的字符串比较必须忽略非空格组合字符，如标注字符。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.IgnoreWidth">
      <summary>指定的字符串比较必须忽略字符宽度。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.Null">
      <summary>表示 <see cref="T:System.DBNull" /> ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper.SqlTypesNamespace">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" /> 类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Server.IBinarySerialize.Read(System.IO.BinaryReader)">
      <summary>用户定义类型 (UDT) 或用户定义聚合生成的二进制格式。</summary>
      <param name="r">
        <see cref="T:System.IO.BinaryReader" /> 流式处理从其反序列化对象。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.IBinarySerialize.Write(System.IO.BinaryWriter)">
      <summary>将用户定义类型 (UDT) 或用户定义聚合转换为其二进制格式，以便可以保持。</summary>
      <param name="w">
        <see cref="T:System.IO.BinaryWriter" /> UDT 或用户定义聚合序列化到流。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.InvalidUdtException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>流式处理所有 <see cref="T:Microsoft.SqlServer.Server.InvalidUdtException" /> 属性存储到 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 类给定 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</summary>
      <param name="si">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.#ctor(Microsoft.SqlServer.Server.SqlMetaData[])">
      <summary>使用基于作为参数传递的 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 对象数组的架构初始化新的 <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" />。</summary>
      <param name="metaData">一个 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 对象的数组，该对象描述 <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> 中的每一列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="metaData" /> 为 null。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetBoolean(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Boolean" />。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>
        <see cref="T:System.Boolean" /> 形式的列值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">
        <paramref name="ordinal" /> 指定的列为 null。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetByte(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Byte" />。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>
        <see cref="T:System.Byte" /> 形式的列值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">
        <paramref name="ordinal" /> 指定的列为 null。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>获取此序号指定的列的值，其形式为 <see cref="T:System.Byte" /> 对象数组。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="fieldOffset">开始检索字节的字段值内的偏移量。</param>
      <param name="buffer">要将字节复制到的目标缓冲区。</param>
      <param name="bufferOffset">要将字节开始复制到的缓冲区内的偏移量。</param>
      <param name="length">要复制到缓冲区的字节数。</param>
      <returns>已复制的字节数。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">
        <paramref name="ordinal" /> 指定的列为 null。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetChar(System.Int32)">
      <summary>获取序号指定的列的值，其形式为 <see cref="T:System.Char" />。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>
        <see cref="T:System.Char" /> 形式的列值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">
        <paramref name="ordinal" /> 指定的列为 null。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>获取序号指定的列的值，其形式为 <see cref="T:System.Char" /> 对象数组。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="fieldOffset">开始检索字符的字段值偏移量。</param>
      <param name="buffer">要将字符复制到其中的目标缓冲区。</param>
      <param name="bufferOffset">开始复制字符的缓冲区偏移量。</param>
      <param name="length">要复制到缓冲区的字符数。</param>
      <returns>复制的字符数。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">
        <paramref name="ordinal" /> 指定的列为 null。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetDataTypeName(System.Int32)">
      <summary>返回序号参数指定的列的数据类型名称。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>包含列的数据类型的 <see cref="T:System.String" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetDateTime(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.DateTime" />。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>
        <see cref="T:System.DateTime" /> 形式的列值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">
        <paramref name="ordinal" /> 指定的列为 null。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetDateTimeOffset(System.Int32)">
      <summary>以 <see cref="T:System.DateTimeOffset" /> 的形式返回指定列的数据。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>以 <see cref="T:System.DateTimeOffset" /> 的形式指定的列的值。</returns>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetDecimal(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Decimal" />。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>
        <see cref="T:System.Decimal" /> 形式的列值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">
        <paramref name="ordinal" /> 指定的列为 null。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetDouble(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Double" />。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>
        <see cref="T:System.Double" /> 形式的列值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">
        <paramref name="ordinal" /> 指定的列为 null。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetFieldType(System.Int32)">
      <summary>返回一个 <see cref="T:System.Type" /> 对象，该对象表示映射到 <paramref name="ordinal" /> 参数指定的列的 SQL Server 类型的公共语言运行时 (CLR) 类型。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>形式为 <see cref="T:System.Type" /> 对象的列类型。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.TypeLoadException">此列属于用户定义的类型，不可用于调用应用程序域。</exception>
      <exception cref="T:System.IO.FileNotFoundException">此列属于用户定义的类型，不可用于调用应用程序域。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetFloat(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 float。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>float 形式的列值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">
        <paramref name="ordinal" /> 指定的列为 null。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetGuid(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Guid" />。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>
        <see cref="T:System.Guid" /> 形式的列值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">
        <paramref name="ordinal" /> 指定的列为 null。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetInt16(System.Int32)">
      <summary>获取序号指定的列的值，其形式为 <see cref="T:System.Int16" />。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>
        <see cref="T:System.Int16" /> 形式的列值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">
        <paramref name="ordinal" /> 指定的列为 null。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetInt32(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Int32" />。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>
        <see cref="T:System.Int32" /> 形式的列值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">
        <paramref name="ordinal" /> 指定的列为 null。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetInt64(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Int64" />。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>
        <see cref="T:System.Int64" /> 形式的列值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">
        <paramref name="ordinal" /> 指定的列为 null。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetName(System.Int32)">
      <summary>返回序号参数指定的列的名称。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>一个包含列名称的 <see cref="T:System.String" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetOrdinal(System.String)">
      <summary>返回此列名指定的列序号。</summary>
      <param name="name">要查找的列的名称。</param>
      <returns>从零开始的整数列序号。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.IndexOutOfRangeException">无法找到此列名。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlBinary(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlBinary" />。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 形式的列值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlBoolean(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 形式的列值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlByte(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 形式的列值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlBytes(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlBytes" />。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBytes" /> 形式的列值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlChars(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlChars" />。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlChars" /> 形式的列值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlDateTime(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlDateTime" />。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 形式的列值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlDecimal(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 形式的列值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlDouble(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 形式的列值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlFieldType(System.Int32)">
      <summary>返回 <see cref="T:System.Type" /> 对象，该对象表示映射到 SQL Server 类型列的类型（作为 <see cref="N:System.Data.SqlTypes" /> 中定义的 SQL Server 类型）。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>形式为 <see cref="T:System.Type" /> 对象的列类型。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.TypeLoadException">此列属于用户定义的类型，不可用于调用应用程序域。</exception>
      <exception cref="T:System.IO.FileNotFoundException">此列属于用户定义的类型，不可用于调用应用程序域。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlGuid(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 形式的列值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlInt16(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 形式的列值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlInt32(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 形式的列值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlInt64(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 形式的列值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlMetaData(System.Int32)">
      <summary>返回 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 对象，它描述由列序号指定的列的元数据。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>列元数据作为 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 对象。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlMoney(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 形式的列值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlSingle(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 形式的列值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlString(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" /> 形式的列值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlValue(System.Int32)">
      <summary>返回表示为 SQL Server 类型，由列序号指定的列中存储的数据值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>表示为 SQL Server 类型的列的值，其形式为 <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlValues(System.Object[])">
      <summary>返回记录中所有列的值，这些值在数组中表示为 SQL Server 类型。</summary>
      <param name="values">要将值列值复制到其中的数组。</param>
      <returns>指示复制的列数的 <see cref="T:System.Int32" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 为 null。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlXml(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlXml" />。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlXml" /> 形式的列值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetString(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.String" />。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>
        <see cref="T:System.String" /> 形式的列值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetTimeSpan(System.Int32)">
      <summary>以 <see cref="T:System.TimeSpan" /> 的形式返回指定列的数据。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>以 <see cref="T:System.TimeSpan" /> 的形式指定的列的值。</returns>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetValue(System.Int32)">
      <summary>为顺序参数所指定的列，返回公共语言运行时 (CLR) 类型值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>顺序指定的列的 CLR 类型值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetValues(System.Object[])">
      <summary>返回记录中所有列的值，这些值在数组中表示为公共语言运行时 (CLR) 类型。</summary>
      <param name="values">要将值列值复制到其中的数组。</param>
      <returns>指示复制的列数的 <see cref="T:System.Int32" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 为 null。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.IsDBNull(System.Int32)">
      <summary>如果列序号参数所指定的列为 null，则返回 true。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>如果该列为 null，则为 true；否则为 false。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetBoolean(System.Int32,System.Boolean)">
      <summary>将存储在列中的数据设置为指定的 <see cref="T:System.Boolean" /> 值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="value">列的新值。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetByte(System.Int32,System.Byte)">
      <summary>将存储在列中的数据设置为指定的 <see cref="T:System.Byte" /> 值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>将存储在列中的数据设置为指定的 <see cref="T:System.Byte" /> 值数组。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="fieldOffset">字段值中的偏移量，从该位置开始复制字节。</param>
      <param name="buffer">要从其中复制字节的目标缓冲区。</param>
      <param name="bufferOffset">缓冲区中的偏移量，从该位置开始复制字节。</param>
      <param name="length">要从缓冲区复制的字节数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetChar(System.Int32,System.Char)">
      <summary>将存储在列中的数据设置为指定的 <see cref="T:System.Char" /> 值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>将存储在列中的数据设置为指定的 <see cref="T:System.Char" /> 值数组。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="fieldOffset">字段值中的偏移量，从该位置开始复制字符。</param>
      <param name="buffer">要从其中复制字符的目标缓冲区。</param>
      <param name="bufferOffset">缓冲区中的偏移量，从该位置开始复制字符。</param>
      <param name="length">要从缓冲区复制的字符数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetDateTime(System.Int32,System.DateTime)">
      <summary>将存储在列中的数据设置为指定的 <see cref="T:System.DateTime" /> 值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetDateTimeOffset(System.Int32,System.DateTimeOffset)">
      <summary>设置为 <see cref="T:System.DateTimeOffset" /> 值指定的列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="value">列的新值。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetDBNull(System.Int32)">
      <summary>将指定列中的值设置为 <see cref="T:System.DBNull" />。</summary>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetDecimal(System.Int32,System.Decimal)">
      <summary>将存储在列中的数据设置为指定的 <see cref="T:System.Decimal" /> 值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetDouble(System.Int32,System.Double)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Double" /> 值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetFloat(System.Int32,System.Single)">
      <summary>将存储在列中的数据设置为指定的 float 值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetGuid(System.Int32,System.Guid)">
      <summary>将存储在列中的数据设置为指定的 <see cref="T:System.Guid" /> 值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetInt16(System.Int32,System.Int16)">
      <summary>将存储在列中的数据设置为指定的 <see cref="T:System.Int16" /> 值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetInt32(System.Int32,System.Int32)">
      <summary>将存储在列中的数据设置为指定的 <see cref="T:System.Int32" /> 值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetInt64(System.Int32,System.Int64)">
      <summary>将存储在列中的数据设置为指定的 <see cref="T:System.Int64" /> 值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlBinary(System.Int32,System.Data.SqlTypes.SqlBinary)">
      <summary>将存储在列中的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlBoolean(System.Int32,System.Data.SqlTypes.SqlBoolean)">
      <summary>将存储在列中的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlByte(System.Int32,System.Data.SqlTypes.SqlByte)">
      <summary>将存储在列中的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlBytes(System.Int32,System.Data.SqlTypes.SqlBytes)">
      <summary>将存储在列中的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlChars(System.Int32,System.Data.SqlTypes.SqlChars)">
      <summary>将存储在列中的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlChars" /> 值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlDateTime(System.Int32,System.Data.SqlTypes.SqlDateTime)">
      <summary>将存储在列中的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlDecimal(System.Int32,System.Data.SqlTypes.SqlDecimal)">
      <summary>将存储在列中的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlDouble(System.Int32,System.Data.SqlTypes.SqlDouble)">
      <summary>将存储在列中的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlGuid(System.Int32,System.Data.SqlTypes.SqlGuid)">
      <summary>将存储在列中的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlInt16(System.Int32,System.Data.SqlTypes.SqlInt16)">
      <summary>将存储在列中的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlInt32(System.Int32,System.Data.SqlTypes.SqlInt32)">
      <summary>将存储在列中的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlInt64(System.Int32,System.Data.SqlTypes.SqlInt64)">
      <summary>将存储在列中的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlMoney(System.Int32,System.Data.SqlTypes.SqlMoney)">
      <summary>将存储在列中的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlSingle(System.Int32,System.Data.SqlTypes.SqlSingle)">
      <summary>将存储在列中的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlString(System.Int32,System.Data.SqlTypes.SqlString)">
      <summary>将存储在列中的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlString" /> 值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlXml(System.Int32,System.Data.SqlTypes.SqlXml)">
      <summary>将存储在列中的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlXml" /> 值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetString(System.Int32,System.String)">
      <summary>将存储在列中的数据设置为指定的 <see cref="T:System.String" /> 值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetTimeSpan(System.Int32,System.TimeSpan)">
      <summary>设置为 <see cref="T:System.TimeSpan" /> 指定的列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="value">新的列值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传入的 <paramref name="ordinal" /> 是负数。</exception>
      <exception cref="T:System.ArgumentException">传入的 <see cref="T:System.TimeSpan" /> 值的长度大于 24 小时。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetValue(System.Int32,System.Object)">
      <summary>为列序号指定的列设置新值，表示为公共语言运行时 (CLR) 类型。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="value">指定列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetValues(System.Object[])">
      <summary>设置 <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> 中所有列的新值。 这些值表示为公共语言运行时 (CLR) 类型。</summary>
      <param name="values">
        <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> 实例的新值数组，其表示为装箱为 <see cref="T:System.Object" /> 引用的 CLR 类型。</param>
      <returns>列值数设置为整数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">值的大小与 <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> 实例中的列数不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.System#Data#IDataRecord#GetData(System.Int32)">
      <summary>在此版本中不受支持。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>
        <see cref="T:System.Data.IDataReader" />将始终引发异常。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlFacetAttribute.#ctor">
      <summary>一个用户定义类型 (UDT) 的可选属性的返回类型，用于批注与可以在 TRANSACT-SQL 中使用的其他信息返回的结果。</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlFunctionAttribute.#ctor">
      <summary>用户定义的聚合，一个可选属性用于指示应作为函数的 SQL Server 中注册该方法。 也用来设置 <see cref="P:Microsoft.SqlServer.Server.SqlFunctionAttribute.DataAccess" />, ，<see cref="P:Microsoft.SqlServer.Server.SqlFunctionAttribute.FillRowMethodName" />, ，<see cref="P:Microsoft.SqlServer.Server.SqlFunctionAttribute.IsDeterministic" />, ，<see cref="P:Microsoft.SqlServer.Server.SqlFunctionAttribute.IsPrecise" />, ，<see cref="P:Microsoft.SqlServer.Server.SqlFunctionAttribute.Name" />, ，<see cref="P:Microsoft.SqlServer.Server.SqlFunctionAttribute.SystemDataAccess" />, ，和 <see cref="P:Microsoft.SqlServer.Server.SqlFunctionAttribute.TableDefinition" /> 函数属性的属性。</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType)">
      <summary>新实例初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 使用指定的列名称和类型。</summary>
      <param name="name">列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Name" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">一个 SqlDbType 传递到构造函数中不允许的 <paramref name="dbType" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.Boolean,System.Boolean,System.Data.SqlClient.SortOrder,System.Int32)">
      <summary>新实例初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类与指定的列名称和默认服务器。 这种形式的构造函数，它允许你指定的列是否在表值参数、 列和排序的列的序号的排序顺序中是唯一支持表值参数。</summary>
      <param name="name">列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <param name="useServerDefault">指定此列是否应使用默认服务器值。</param>
      <param name="isUniqueKey">指定表值参数中的列是否唯一。</param>
      <param name="columnSortOrder">指定列的排序顺序。</param>
      <param name="sortOrdinal">指定列排序的序号。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.Byte,System.Byte)">
      <summary>新实例初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类，具有指定的列名称、 类型、 精度和小数位数。</summary>
      <param name="name">参数或列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <param name="precision">参数或列的精度。</param>
      <param name="scale">参数或列的小数位数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Name" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">一个 SqlDbType 传递到构造函数中不允许的 <paramref name="dbType" />, ，或 <paramref name="scale" /> 秖   <paramref name="precision" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.Byte,System.Byte,System.Boolean,System.Boolean,System.Data.SqlClient.SortOrder,System.Int32)">
      <summary>新实例初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类指定的列名称、 类型、 精度、 小数位数和服务器默认值。 这种形式的构造函数，它允许你指定的列是否在表值参数、 列和排序的列的序号的排序顺序中是唯一支持表值参数。</summary>
      <param name="name">列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <param name="precision">参数或列的精度。</param>
      <param name="scale">参数或列的小数位数。</param>
      <param name="useServerDefault">指定此列是否应使用默认服务器值。</param>
      <param name="isUniqueKey">指定表值参数中的列是否唯一。</param>
      <param name="columnSortOrder">指定列的排序顺序。</param>
      <param name="sortOrdinal">指定列排序的序号。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.Int64)">
      <summary>新实例初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类，具有指定的列名称、 类型和最大长度。</summary>
      <param name="name">列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <param name="maxLength">指定类型的最大长度。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Name" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">不允许传递给构造函数、 作为 <paramref name="dbType" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.Int64,System.Boolean,System.Boolean,System.Data.SqlClient.SortOrder,System.Int32)">
      <summary>新实例初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类，具有指定的列名称、 类型、 最大长度和服务器默认值。 这种形式的构造函数，它允许你指定的列是否在表值参数、 列和排序的列的序号的排序顺序中是唯一支持表值参数。</summary>
      <param name="name">列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <param name="maxLength">指定类型的最大长度。</param>
      <param name="useServerDefault">指定此列是否应使用默认服务器值。</param>
      <param name="isUniqueKey">指定表值参数中的列是否唯一。</param>
      <param name="columnSortOrder">指定列的排序顺序。</param>
      <param name="sortOrdinal">指定列排序的序号。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.Int64,System.Byte,System.Byte,System.Int64,System.Data.SqlTypes.SqlCompareOptions,System.Type)">
      <summary>新实例初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类，具有指定的列名称、 类型、 最大长度、 精度、 小数位数，区域设置 ID 比较选项和用户定义类型 (UDT)。</summary>
      <param name="name">列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <param name="maxLength">指定类型的最大长度。</param>
      <param name="precision">参数或列的精度。</param>
      <param name="scale">参数或列的小数位数。</param>
      <param name="locale">参数或列的区域设置 ID。</param>
      <param name="compareOptions">参数或列的比较规则。</param>
      <param name="userDefinedType">一个 <see cref="T:System.Type" /> 指向该 UDT 的实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Name" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">一个 SqlDbType 传递到构造函数中不允许的 <paramref name="dbType" />, ，或 <paramref name="userDefinedType" /> 指向不具有一个类型 <see cref="T:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute" /> 声明。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.Int64,System.Byte,System.Byte,System.Int64,System.Data.SqlTypes.SqlCompareOptions,System.Type,System.Boolean,System.Boolean,System.Data.SqlClient.SortOrder,System.Int32)">
      <summary>新实例初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类，具有指定的列名称、 类型、 最大长度、 精度、 小数位数，区域设置 ID 比较选项和用户定义类型 (UDT)。 这种形式的构造函数，它允许你指定的列是否在表值参数、 列和排序的列的序号的排序顺序中是唯一支持表值参数。</summary>
      <param name="name">列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <param name="maxLength">指定类型的最大长度。</param>
      <param name="precision">参数或列的精度。</param>
      <param name="scale">参数或列的小数位数。</param>
      <param name="localeId">参数或列的区域设置 ID。</param>
      <param name="compareOptions">参数或列的比较规则。</param>
      <param name="userDefinedType">一个 <see cref="T:System.Type" /> 指向该 UDT 的实例。</param>
      <param name="useServerDefault">指定此列是否应使用默认服务器值。</param>
      <param name="isUniqueKey">指定表值参数中的列是否唯一。</param>
      <param name="columnSortOrder">指定列的排序顺序。</param>
      <param name="sortOrdinal">指定列排序的序号。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.Int64,System.Int64,System.Data.SqlTypes.SqlCompareOptions)">
      <summary>新实例初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类使用指定的列名称、 类型、 最大长度、 区域设置，并比较选项。</summary>
      <param name="name">参数或列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <param name="maxLength">指定类型的最大长度。</param>
      <param name="locale">参数或列的区域设置 ID。</param>
      <param name="compareOptions">参数或列的比较规则。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Name" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">不允许传递给构造函数、 作为 <paramref name="dbType" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.Int64,System.Int64,System.Data.SqlTypes.SqlCompareOptions,System.Boolean,System.Boolean,System.Data.SqlClient.SortOrder,System.Int32)">
      <summary>新实例初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类，具有指定的列名称、 类型、 最大长度、 区域设置、 比较选项和服务器默认值。 这种形式的构造函数，它允许你指定的列是否在表值参数、 列和排序的列的序号的排序顺序中是唯一支持表值参数。</summary>
      <param name="name">列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <param name="maxLength">指定类型的最大长度。</param>
      <param name="locale">参数或列的区域设置 ID。</param>
      <param name="compareOptions">参数或列的比较规则。</param>
      <param name="useServerDefault">指定此列是否应使用默认服务器值。</param>
      <param name="isUniqueKey">指定表值参数中的列是否唯一。</param>
      <param name="columnSortOrder">指定列的排序顺序。</param>
      <param name="sortOrdinal">指定列排序的序号。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.String,System.String,System.String)">
      <summary>新实例初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 使用指定的列名称、 类型、 数据库名称、 所属的架构和对象名称的类。</summary>
      <param name="name">列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <param name="database">类型化的 XML 实例的 XML 架构集合的数据库名称。</param>
      <param name="owningSchema">类型化的 XML 实例的 XML 架构集合的关系架构名称。</param>
      <param name="objectName">类型化的 XML 实例的 XML 架构集合的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Name" /> 是 null, ，或 <paramref name="objectName" /> 是 null 时 <paramref name="database" /> 和 <paramref name="owningSchema" /> 是非null。</exception>
      <exception cref="T:System.ArgumentException">不允许传递给构造函数、 作为 <paramref name="dbType" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Data.SqlClient.SortOrder,System.Int32)">
      <summary>新实例初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类，具有指定的列名称、 数据库名称、 所属架构、 对象名称和默认服务器。 这种形式的构造函数，它允许你指定的列是否在表值参数、 列和排序的列的序号的排序顺序中是唯一支持表值参数。</summary>
      <param name="name">列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <param name="database">类型化的 XML 实例的 XML 架构集合的数据库名称。</param>
      <param name="owningSchema">类型化的 XML 实例的 XML 架构集合的关系架构名称。</param>
      <param name="objectName">类型化的 XML 实例的 XML 架构集合的名称。</param>
      <param name="useServerDefault">指定此列是否应使用默认服务器值。</param>
      <param name="isUniqueKey">指定表值参数中的列是否唯一。</param>
      <param name="columnSortOrder">指定列的排序顺序。</param>
      <param name="sortOrdinal">指定列排序的序号。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.Type)">
      <summary>新实例初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类，具有指定的列名称、 类型和用户定义类型 (UDT)。</summary>
      <param name="name">列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <param name="userDefinedType">一个 <see cref="T:System.Type" /> 指向该 UDT 的实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Name" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">不允许传递给构造函数、 作为 <paramref name="dbType" />, ，或 <paramref name="userDefinedType" /> 指向不具有一个类型 <see cref="T:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute" /> 声明。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.Type,System.String)">
      <summary>新实例初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 用指定的列名称、 用户定义类型 (UDT) 和 sql Server 类型。</summary>
      <param name="name">列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <param name="userDefinedType">一个 <see cref="T:System.Type" /> 指向该 UDT 的实例。</param>
      <param name="serverTypeName">SQL Server 类型名称 <paramref name="userDefinedType" />。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.Type,System.String,System.Boolean,System.Boolean,System.Data.SqlClient.SortOrder,System.Int32)">
      <summary>新实例初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类，具有指定的列名称、 类型、 用户定义类型、 SQL Server 类型和服务器默认值。 这种形式的构造函数，它允许你指定的列是否在表值参数、 列和排序的列的序号的排序顺序中是唯一支持表值参数。</summary>
      <param name="name">列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <param name="userDefinedType">一个 <see cref="T:System.Type" /> 指向该 UDT 的实例。</param>
      <param name="serverTypeName">SQL Server 类型名称 <paramref name="userDefinedType" />。</param>
      <param name="useServerDefault">指定此列是否应使用默认服务器值。</param>
      <param name="isUniqueKey">指定表值参数中的列是否唯一。</param>
      <param name="columnSortOrder">指定列的排序顺序。</param>
      <param name="sortOrdinal">指定列排序的序号。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Boolean)">
      <summary>验证指定 <see cref="T:System.Boolean" /> 值根据元数据，并在必要时调整该值。</summary>
      <param name="value">要验证的值 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例。</param>
      <returns>调整后的值作为 <see cref="T:System.Boolean" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 不匹配 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型，或 <paramref name="value" /> 不进行调整。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Byte)">
      <summary>验证指定 <see cref="T:System.Byte" /> 值根据元数据，并在必要时调整该值。</summary>
      <param name="value">要验证的值 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例。</param>
      <returns>调整后的值作为 <see cref="T:System.Byte" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 不匹配 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型，或 <paramref name="value" /> 不进行调整。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Byte[])">
      <summary>验证指定的数组 <see cref="T:System.Byte" /> 值根据元数据，并在必要时调整该值。</summary>
      <param name="value">要验证的值 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例。</param>
      <returns>调整后的值为一个数组 <see cref="T:System.Byte" /> 值。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 不匹配 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型，或 <paramref name="value" /> 不进行调整。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Char)">
      <summary>验证指定 <see cref="T:System.Char" /> 值根据元数据，并在必要时调整该值。</summary>
      <param name="value">要验证的值 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例。</param>
      <returns>调整后的值作为 <see cref="T:System.Char" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 不匹配 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型，或 <paramref name="value" /> 不进行调整。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Char[])">
      <summary>验证指定的数组 <see cref="T:System.Char" /> 值根据元数据，并在必要时调整该值。</summary>
      <param name="value">要验证的值 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例。</param>
      <returns>调整后的值作为一个数组 <see cref="T:System.Char" /> 值。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 不匹配 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型，或 <paramref name="value" /> 不进行调整。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlBinary)">
      <summary>验证指定 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 值根据元数据，并在必要时调整该值。</summary>
      <param name="value">要验证的值 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例。</param>
      <returns>调整后的值作为 <see cref="T:System.Data.SqlTypes.SqlBinary" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 不匹配 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型，或 <paramref name="value" /> 不进行调整。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlBoolean)">
      <summary>验证指定 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 值根据元数据，并在必要时调整该值。</summary>
      <param name="value">要验证的值 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例。</param>
      <returns>调整后的值作为 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 不匹配 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型，或 <paramref name="value" /> 不进行调整。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlByte)">
      <summary>验证指定 <see cref="T:System.Data.SqlTypes.SqlByte" /> 值根据元数据，并在必要时调整该值。</summary>
      <param name="value">要验证的值 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例。</param>
      <returns>调整后的值作为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 不匹配 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型，或 <paramref name="value" /> 不进行调整。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlBytes)">
      <summary>验证指定 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 值根据元数据，并在必要时调整该值。</summary>
      <param name="value">要验证的值 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例。</param>
      <returns>调整后的值作为 <see cref="T:System.Data.SqlTypes.SqlBytes" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 不匹配 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型，或 <paramref name="value" /> 不进行调整。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlChars)">
      <summary>验证指定 <see cref="T:System.Data.SqlTypes.SqlChars" /> 值根据元数据，并在必要时调整该值。</summary>
      <param name="value">要验证的值 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例。</param>
      <returns>调整后的值作为 <see cref="T:System.Data.SqlTypes.SqlChars" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 不匹配 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型，或 <paramref name="value" /> 不进行调整。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlDateTime)">
      <summary>验证指定 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 值根据元数据，并在必要时调整该值。</summary>
      <param name="value">要验证的值 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例。</param>
      <returns>调整后的值作为 <see cref="T:System.Data.SqlTypes.SqlDateTime" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 不匹配 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型，或 <paramref name="value" /> 不进行调整。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlDecimal)">
      <summary>验证指定 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 值根据元数据，并在必要时调整该值。</summary>
      <param name="value">要验证的值 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例。</param>
      <returns>调整后的值作为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 不匹配 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型，或 <paramref name="value" /> 不进行调整。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlDouble)">
      <summary>验证指定 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 值根据元数据，并在必要时调整该值。</summary>
      <param name="value">要验证的值 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例。</param>
      <returns>调整后的值作为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 不匹配 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型，或 <paramref name="value" /> 不进行调整。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlGuid)">
      <summary>验证指定 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 值根据元数据，并在必要时调整该值。</summary>
      <param name="value">要验证的值 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例。</param>
      <returns>调整后的值作为 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 不匹配 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型，或 <paramref name="value" /> 不进行调整。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlInt16)">
      <summary>验证指定 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 值根据元数据，并在必要时调整该值。</summary>
      <param name="value">要验证的值 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例。</param>
      <returns>调整后的值作为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 不匹配 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型，或 <paramref name="value" /> 不进行调整。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlInt32)">
      <summary>验证指定 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 值根据元数据，并在必要时调整该值。</summary>
      <param name="value">要验证的值 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例。</param>
      <returns>调整后的值作为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 不匹配 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型，或 <paramref name="value" /> 不进行调整。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlInt64)">
      <summary>验证指定 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 值根据元数据，并在必要时调整该值。</summary>
      <param name="value">要验证的值 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例。</param>
      <returns>调整后的值作为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 不匹配 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型，或 <paramref name="value" /> 不进行调整。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlMoney)">
      <summary>验证指定 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 值根据元数据，并在必要时调整该值。</summary>
      <param name="value">要验证的值 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例。</param>
      <returns>调整后的值作为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 不匹配 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型，或 <paramref name="value" /> 不进行调整。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlSingle)">
      <summary>验证指定 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 值根据元数据，并在必要时调整该值。</summary>
      <param name="value">要验证的值 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例。</param>
      <returns>调整后的值作为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 不匹配 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型，或 <paramref name="value" /> 不进行调整。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlString)">
      <summary>验证指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 值根据元数据，并在必要时调整该值。</summary>
      <param name="value">要验证的值 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例。</param>
      <returns>调整后的值作为 <see cref="T:System.Data.SqlTypes.SqlString" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 不匹配 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型，或 <paramref name="value" /> 不进行调整。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlXml)">
      <summary>验证指定 <see cref="T:System.Data.SqlTypes.SqlXml" /> 值根据元数据，并在必要时调整该值。</summary>
      <param name="value">要验证的值 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例。</param>
      <returns>调整后的值作为 <see cref="T:System.Data.SqlTypes.SqlXml" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 不匹配 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型，或 <paramref name="value" /> 不进行调整。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.DateTime)">
      <summary>验证指定 <see cref="T:System.DateTime" /> 值根据元数据，并在必要时调整该值。</summary>
      <param name="value">要验证的值 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例。</param>
      <returns>调整后的值作为 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 不匹配 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型，或 <paramref name="value" /> 不进行调整。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.DateTimeOffset)">
      <summary>验证指定 <see cref="T:System.DateTimeOffset" /> 值根据元数据，并在必要时调整该值。</summary>
      <param name="value">要验证的值 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例。</param>
      <returns>调整后的值为一个数组 <see cref="T:System.DateTimeOffset" /> 值。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 不匹配 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型，或 <paramref name="value" /> 不进行调整。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Decimal)">
      <summary>验证指定 <see cref="T:System.Decimal" /> 值根据元数据，并在必要时调整该值。</summary>
      <param name="value">要验证的值 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例。</param>
      <returns>调整后的值作为 <see cref="T:System.Decimal" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 不匹配 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型，或 <paramref name="value" /> 不进行调整。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Double)">
      <summary>验证指定 <see cref="T:System.Double" /> 值根据元数据，并在必要时调整该值。</summary>
      <param name="value">要验证的值 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例。</param>
      <returns>调整后的值作为 <see cref="T:System.Double" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 不匹配 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型，或 <paramref name="value" /> 不进行调整。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Guid)">
      <summary>验证指定 <see cref="T:System.Guid" /> 值根据元数据，并在必要时调整该值。</summary>
      <param name="value">要验证的值 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例。</param>
      <returns>调整后的值作为 <see cref="T:System.Guid" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 不匹配 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型，或 <paramref name="value" /> 不进行调整。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Int16)">
      <summary>验证指定 <see cref="T:System.Int16" /> 值根据元数据，并在必要时调整该值。</summary>
      <param name="value">要验证的值 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例。</param>
      <returns>调整后的值作为 <see cref="T:System.Int16" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 不匹配 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型，或 <paramref name="value" /> 不进行调整。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Int32)">
      <summary>验证指定 <see cref="T:System.Int32" /> 值根据元数据，并在必要时调整该值。</summary>
      <param name="value">要验证的值 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例。</param>
      <returns>调整后的值作为 <see cref="T:System.Int32" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 不匹配 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型，或 <paramref name="value" /> 不进行调整。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Int64)">
      <summary>验证指定 <see cref="T:System.Int64" /> 值根据元数据，并在必要时调整该值。</summary>
      <param name="value">要验证的值 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例。</param>
      <returns>调整后的值作为 <see cref="T:System.Int64" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 不匹配 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型，或 <paramref name="value" /> 不进行调整。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Object)">
      <summary>验证指定 <see cref="T:System.Object" /> 值根据元数据，并在必要时调整该值。</summary>
      <param name="value">要验证的值 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例。</param>
      <returns>调整后的值作为 <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 不匹配 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型，或 <paramref name="value" /> 不进行调整。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Single)">
      <summary>验证指定 <see cref="T:System.Single" /> 值根据元数据，并在必要时调整该值。</summary>
      <param name="value">要验证的值 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例。</param>
      <returns>调整后的值作为 <see cref="T:System.Single" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 不匹配 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型，或 <paramref name="value" /> 不进行调整。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.String)">
      <summary>验证指定 <see cref="T:System.String" /> 值根据元数据，并在必要时调整该值。</summary>
      <param name="value">要验证的值 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例。</param>
      <returns>调整后的值作为 <see cref="T:System.String" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 不匹配 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型，或 <paramref name="value" /> 不进行调整。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.TimeSpan)">
      <summary>验证指定 <see cref="T:System.TimeSpan" /> 值根据元数据，并在必要时调整该值。</summary>
      <param name="value">要验证的值 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例。</param>
      <returns>调整后的值为一个数组 <see cref="T:System.TimeSpan" /> 值。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 不匹配 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型，或 <paramref name="value" /> 不进行调整。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.InferFromValue(System.Object,System.String)">
      <summary>推断从指定的对象的元数据，并将其作为返回 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例。</summary>
      <param name="value">使用的对象从其推断元数据。</param>
      <param name="name">分配给返回的名称 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例。</param>
      <returns>推断出的元数据作为 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例。</returns>
      <exception cref="T:System.ArgumentNullException">V<paramref name="alue" /> 是 null。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMethodAttribute.#ctor">
      <summary>用于指示一种方法的确定性和数据访问属性或 udt 属性对用户定义类型 (UDT) 属性。</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlPipe.ExecuteAndSend(System.Data.SqlClient.SqlCommand)">
      <summary>执行命令作为参数传递，并将结果发送到客户端。</summary>
      <param name="command">
        <see cref="T:System.Data.SqlClient.SqlCommand" /> 要执行对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="command" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">此方法不支持绑定到进程外连接的命令。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlPipe.Send(Microsoft.SqlServer.Server.SqlDataRecord)">
      <summary>将发送的单行结果集直接向客户端或当前输出使用者。</summary>
      <param name="record">发送到客户端的单行结果集 ︰ <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="record" /> 为 null。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlPipe.Send(System.Data.SqlClient.SqlDataReader)">
      <summary>将发送的多行结果集直接向客户端或当前输出使用者。</summary>
      <param name="reader">多行结果集发送到客户端 ︰ <see cref="T:System.Data.SqlClient.SqlDataReader" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlPipe.Send(System.String)">
      <summary>直接向客户端或当前输出使用者发送一条字符串消息。</summary>
      <param name="message">要发送到客户端的消息字符串。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="message" /> 大于 4000 个字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 为 null。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd">
      <summary>标记结果集的末尾，并返回 <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> 回初始状态的实例。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> 以前没有调用方法。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)">
      <summary>将一行数据发送回客户端。</summary>
      <param name="record">一个 <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> 对象发送到客户端的行的列的值。 记录的架构的架构必须匹配的元数据描述的 <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> 传递给 <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> 方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="record" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> 以前没有调用方法。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)">
      <summary>标记开始某一结果集发送回客户端，并使用记录的参数来构造描述结果集的元数据。</summary>
      <param name="record">一个 <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> 对象从其提取和用来描述结果集元数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="record" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="record" /> 没有列或尚未初始化。</exception>
      <exception cref="T:System.InvalidOperationException">以外的其他方法 <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" /> 或 <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" /> 之后调用 <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> 方法。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlProcedureAttribute.#ctor">
      <summary>在组件中，用来指示给定的方法应注册为 SQL Server 中的存储过程的方法定义属性。</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlTriggerAttribute.#ctor">
      <summary>在组件中，用于将方法标记为 SQL Server 中的触发器的方法定义属性。</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlTriggerContext.IsUpdatedColumn(System.Int32)">
      <summary>返回 true 如果某一列产生影响的 INSERT 或 UPDATE 语句。</summary>
      <param name="columnOrdinal">从零开始的列序号。</param>
      <returns>true 如果列已插入或更新操作的影响。</returns>
      <exception cref="T:System.InvalidOperationException">在触发器的上下文中调用其中的值 <see cref="P:Microsoft.SqlServer.Server.SqlTriggerContext.TriggerAction" /> 属性不是 Insert 或 Update。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute.#ctor(Microsoft.SqlServer.Server.Format)">
      <summary>用户定义的聚合，必需的特性用于指示给定的类型是用户定义聚合和用户定义聚合的存储格式。</summary>
      <param name="format">其中一个 <see cref="T:Microsoft.SqlServer.Server.Format" /> 表示聚合的序列化格式的值。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute.#ctor(Microsoft.SqlServer.Server.Format)">
      <summary>必需的属性对用户定义类型 (UDT)，用于确认给定的类型为 UDT 并指示 UDT 的存储格式。</summary>
      <param name="format">其中一个 <see cref="T:Microsoft.SqlServer.Server.Format" /> 表示类型的序列化格式的值。</param>
    </member>
    <member name="M:System.Data.Common.DataAdapter.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DataAdapter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DataAdapter.#ctor(System.Data.Common.DataAdapter)">
      <summary>新实例初始化 <see cref="T:System.Data.Common.DataAdapter" /> 从同一类型的现有对象的类。</summary>
      <param name="from">一个 <see cref="T:System.Data.Common.DataAdapter" /> 用来创建新对象 <see cref="T:System.Data.Common.DataAdapter" />。</param>
    </member>
    <member name="M:System.Data.Common.DataAdapter.CloneInternals">
      <summary>创建的此实例的副本 <see cref="T:System.Data.Common.DataAdapter" />。</summary>
      <returns>克隆的实例 <see cref="T:System.Data.Common.DataAdapter" />。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.CreateTableMappings">
      <summary>创建一个新的 <see cref="T:System.Data.Common.DataTableMappingCollection" />。</summary>
      <returns>新的表映射集合。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Data.Common.DataAdapter" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Fill(System.Data.DataSet)">
      <summary>添加或刷新中行 <see cref="T:System.Data.DataSet" /> 以匹配数据源中。</summary>
      <param name="dataSet">一个 <see cref="T:System.Data.DataSet" /> 要用记录填充并且如有必要，架构。</param>
      <returns>行数已成功添加到或在刷新 <see cref="T:System.Data.DataSet" />。 这不包括不返回行的语句影响的行。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)">
      <summary>添加或刷新指定范围中的行 <see cref="T:System.Data.DataSet" /> 以匹配中使用数据源的那些 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.Data.DataTable" /> 名称。</summary>
      <param name="dataSet">一个 <see cref="T:System.Data.DataSet" /> 要用记录填充。</param>
      <param name="srcTable">指示源表的名称的字符串。</param>
      <param name="dataReader">
        <see cref="T:System.Data.IDataReader" /> 的一个实例。</param>
      <param name="startRecord">起始记录的从零开始索引。</param>
      <param name="maxRecords">一个整数，指示最大记录数。</param>
      <returns>行数已成功添加到或在刷新 <see cref="T:System.Data.DataSet" />。 这不包括不返回行的语句影响的行。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)">
      <summary>添加或刷新中行 <see cref="T:System.Data.DataTable" /> 以匹配中使用数据源的那些 <see cref="T:System.Data.DataTable" /> 名称和指定 <see cref="T:System.Data.IDataReader" />。</summary>
      <param name="dataTable">一个 <see cref="T:System.Data.DataTable" /> 要用记录填充。</param>
      <param name="dataReader">
        <see cref="T:System.Data.IDataReader" /> 的一个实例。</param>
      <returns>行数已成功添加到或在刷新 <see cref="T:System.Data.DataTable" />。 这不包括不返回行的语句影响的行。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)">
      <summary>添加或刷新指定范围中的集合中的行 <see cref="T:System.Data.DataTable" /> 要与数据源中匹配的对象。</summary>
      <param name="dataTables">一套 <see cref="T:System.Data.DataTable" /> 要用记录填充的对象。</param>
      <param name="dataReader">
        <see cref="T:System.Data.IDataReader" /> 的一个实例。</param>
      <param name="startRecord">起始记录的从零开始索引。</param>
      <param name="maxRecords">一个整数，指示最大记录数。</param>
      <returns>行数已成功添加到或在刷新 <see cref="T:System.Data.DataTable" />。 这不包括不返回行的语句影响的行。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)">
      <summary>添加 <see cref="T:System.Data.DataTable" /> 到指定 <see cref="T:System.Data.DataSet" /> 和配置架构的架构以匹配数据源中根据指定 <see cref="T:System.Data.SchemaType" />。</summary>
      <param name="dataSet">
        <see cref="T:System.Data.DataSet" /> 要填充数据源中的架构。</param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 值之一。</param>
      <returns>一个 <see cref="T:System.Data.DataTable" /> 从数据源返回的对象，其中包含架构信息。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)">
      <summary>添加 <see cref="T:System.Data.DataTable" /> 到指定 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="dataSet">
        <see cref="T:System.Data.DataTable" /> 通过填充 <see cref="T:System.Data.IDataReader" />。</param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 值之一。</param>
      <param name="srcTable">用于表映射的源表的名称。</param>
      <param name="dataReader">
        <see cref="T:System.Data.IDataReader" /> 要用作数据源填充时 <see cref="T:System.Data.DataTable" />。</param>
      <returns>一个引用，指向添加到 <see cref="T:System.Data.DataSet" /> 的 <see cref="T:System.Data.DataTable" /> 对象的集合。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)">
      <summary>添加 <see cref="T:System.Data.DataTable" /> 到指定 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="dataTable">
        <see cref="T:System.Data.DataTable" /> 通过填充 <see cref="T:System.Data.IDataReader" />。</param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 值之一。</param>
      <param name="dataReader">
        <see cref="T:System.Data.IDataReader" /> 要用作数据源填充时 <see cref="T:System.Data.DataTable" />。</param>
      <returns>一个 <see cref="T:System.Data.DataTable" /> 从数据源返回的对象，其中包含架构信息。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.GetFillParameters">
      <summary>获取在执行 SQL SELECT 语句时由用户设置的参数。</summary>
      <returns>一个数组 <see cref="T:System.Data.IDataParameter" /> 由用户来设置包含的参数的对象。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.HasTableMappings">
      <summary>指示是否 <see cref="T:System.Data.Common.DataTableMappingCollection" /> 已创建。</summary>
      <returns>true 如果 <see cref="T:System.Data.Common.DataTableMappingCollection" /> 已创建; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.OnFillError(System.Data.FillErrorEventArgs)">
      <summary>在过程中出现错误时调用 Fill。</summary>
      <param name="value">一个 <see cref="T:System.Data.FillErrorEventArgs" /> 对象。</param>
    </member>
    <member name="M:System.Data.Common.DataAdapter.ResetFillLoadOption">
      <summary>重置 <see cref="P:System.Data.Common.DataAdapter.FillLoadOption" /> 到其默认状态，并使 <see cref="M:System.Data.Common.DataAdapter.Fill(System.Data.DataSet)" /> 遵守 <see cref="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill" />。</summary>
    </member>
    <member name="M:System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill">
      <summary>确定是否 <see cref="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill" /> 应保持。</summary>
      <returns>true 如果 <see cref="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill" /> 属性是持久的; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption">
      <summary>确定是否 <see cref="P:System.Data.Common.DataAdapter.FillLoadOption" /> 应保持。</summary>
      <returns>true 如果 <see cref="P:System.Data.Common.DataAdapter.FillLoadOption" /> 属性是持久的; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.ShouldSerializeTableMappings">
      <summary>确定是否有一个或多个 <see cref="T:System.Data.Common.DataTableMapping" /> 对象都存在以及应保留。</summary>
      <returns>true 如果一个或多个 <see cref="T:System.Data.Common.DataTableMapping" /> 存在的对象; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)">
      <summary>对于每个插入、 更新或删除了行中指定调用相应的 INSERT、 UPDATE 或 DELETE 语句 <see cref="T:System.Data.DataSet" /> 从 <see cref="T:System.Data.DataTable" /> 名为"Table"。</summary>
      <param name="dataSet">
        <see cref="T:System.Data.DataSet" /> 用于更新数据源。</param>
      <returns>从已成功更新的行数 <see cref="T:System.Data.DataSet" />。</returns>
      <exception cref="T:System.InvalidOperationException">此源表是无效的。</exception>
      <exception cref="T:System.Data.DBConcurrencyException">尝试执行的 INSERT、 UPDATE 或 DELETE 语句导致受影响的零个记录。</exception>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DataColumnMapping" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Data.Common.DataColumnMapping" /> 类具有指定的源列名称和 <see cref="T:System.Data.DataSet" /> 要映射到列名称。</summary>
      <param name="sourceColumn">数据源的区分大小写的列名称。</param>
      <param name="dataSetColumn">列名称不区分大小写，从 <see cref="T:System.Data.DataSet" /> 映射到。</param>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.GetDataColumnBySchemaAction(System.Data.DataTable,System.Type,System.Data.MissingSchemaAction)">
      <summary>获取 <see cref="T:System.Data.DataColumn" /> 从给定 <see cref="T:System.Data.DataTable" /> 使用 <see cref="T:System.Data.MissingSchemaAction" /> 和 <see cref="P:System.Data.Common.DataColumnMapping.DataSetColumn" /> 属性。</summary>
      <param name="dataTable">
        <see cref="T:System.Data.DataTable" /> 要从中获取列。</param>
      <param name="dataType">
        <see cref="T:System.Type" /> 的数据列。</param>
      <param name="schemaAction">
        <see cref="T:System.Data.MissingSchemaAction" /> 值之一。</param>
      <returns>数据列。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.GetDataColumnBySchemaAction(System.String,System.String,System.Data.DataTable,System.Type,System.Data.MissingSchemaAction)">
      <summary>静态版本 <see cref="M:System.Data.Common.DataColumnMapping.GetDataColumnBySchemaAction(System.Data.DataTable,System.Type,System.Data.MissingSchemaAction)" /> 可以无需实例化调用 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</summary>
      <param name="sourceColumn">数据源的区分大小写的列名称。</param>
      <param name="dataSetColumn">列名称不区分大小写，从 <see cref="T:System.Data.DataSet" /> 映射到。</param>
      <param name="dataTable">
        <see cref="T:System.Data.DataTable" /> 的一个实例。</param>
      <param name="dataType">正在映射的列的数据类型。</param>
      <param name="schemaAction">确定要在现有时执行的操作 <see cref="T:System.Data.DataSet" /> 架构与传入的数据不匹配。</param>
      <returns>一个 <see cref="T:System.Data.DataColumn" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.System#ICloneable#Clone">
      <summary>创建作为当前实例副本的新对象。</summary>
      <returns>当前对象的副本。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.ToString">
      <summary>将当前 <see cref="P:System.Data.Common.DataColumnMapping.SourceColumn" /> 名称为字符串。</summary>
      <returns>当前 <see cref="P:System.Data.Common.DataColumnMapping.SourceColumn" /> 作为字符串名称。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.#ctor">
      <summary>创建一个空的 <see cref="T:System.Data.Common.DataColumnMappingCollection" />。</summary>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Add(System.Object)">
      <summary>将 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象添加到集合中。</summary>
      <param name="value">一个 DataColumnMapping 要添加到集合对象。</param>
      <returns>索引 DataColumnMapping 添加到集合的对象。</returns>
      <exception cref="T:System.InvalidCastException">传入的对象不是 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</exception>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Add(System.String,System.String)">
      <summary>添加 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象传递给该集合在给定源列名称和 <see cref="T:System.Data.DataSet" /> 列名称。</summary>
      <param name="sourceColumn">要映射到的源列的名称区分大小写。</param>
      <param name="dataSetColumn">该名称，不区分大小写的 <see cref="T:System.Data.DataSet" /> 要映射到列。</param>
      <returns>DataColumnMapping 添加到集合的对象。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.AddRange(System.Array)">
      <summary>将指定的元素复制 <see cref="T:System.Array" /> 到集合的末尾。</summary>
      <param name="values">要添加到集合中的 <see cref="T:System.Array" />。</param>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.AddRange(System.Data.Common.DataColumnMapping[])">
      <summary>将指定的元素复制 <see cref="T:System.Data.Common.DataColumnMapping" /> 数组转换为集合的末尾。</summary>
      <param name="values">数组 <see cref="T:System.Data.Common.DataColumnMapping" /> 要添加到集合的对象。</param>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Clear">
      <summary>删除所有 <see cref="T:System.Data.Common.DataColumnMapping" /> 来自集合的对象。</summary>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Contains(System.Object)">
      <summary>获取一个值，该值指示是否 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象与给定 <see cref="T:System.Object" /> 集合中存在。</summary>
      <param name="value">
        <see cref="T:System.Object" /> 即 <see cref="T:System.Data.Common.DataColumnMapping" />。</param>
      <returns>true 如果集合包含指定 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象; 否则为 false。</returns>
      <exception cref="T:System.InvalidCastException">传入的对象不是 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</exception>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Contains(System.String)">
      <summary>获取一个值，该值指示是否 <see cref="T:System.Data.Common.DataColumnMapping" /> 集合中存在具有给定的源列名称的对象。</summary>
      <param name="value">区分大小写的源列名称的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</param>
      <returns>true 如果集合包含 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象与指定的源列名称; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.CopyTo(System.Array,System.Int32)">
      <summary>中的元素复制 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 到指定的数组。</summary>
      <param name="array">
        <see cref="T:System.Array" /> 要向其复制 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 元素。</param>
      <param name="index">数组的起始索引。</param>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.CopyTo(System.Data.Common.DataColumnMapping[],System.Int32)">
      <summary>中的元素复制 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 到指定 <see cref="T:System.Data.Common.DataColumnMapping" /> 数组。</summary>
      <param name="array">一个 <see cref="T:System.Data.Common.DataColumnMapping" /> 要复制到数组 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 元素。</param>
      <param name="index">中的从零开始索引 <paramref name="array" /> 复制开始处。</param>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.GetByDataSetColumn(System.String)">
      <summary>获取 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象具有指定 <see cref="T:System.Data.DataSet" /> 列名称。</summary>
      <param name="value">该名称，不区分大小写的 <see cref="T:System.Data.DataSet" /> 要查找列。</param>
      <returns>
        <see cref="T:System.Data.Common.DataColumnMapping" /> 对象具有指定 <see cref="T:System.Data.DataSet" /> 列名称。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.GetColumnMappingBySchemaAction(System.Data.Common.DataColumnMappingCollection,System.String,System.Data.MissingMappingAction)">
      <summary>获取 <see cref="T:System.Data.Common.DataColumnMapping" /> 指定 <see cref="T:System.Data.Common.DataColumnMappingCollection" />, ，源列名称和 <see cref="T:System.Data.MissingMappingAction" />。</summary>
      <param name="columnMappings">
        <see cref="T:System.Data.Common.DataColumnMappingCollection" />。</param>
      <param name="sourceColumn">要查找的区分大小写的源列名称。</param>
      <param name="mappingAction">
        <see cref="T:System.Data.MissingMappingAction" /> 值之一。</param>
      <returns>一个 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="mappingAction" /> 参数设置为 Error, ，且未指定任何映射。</exception>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.GetDataColumn(System.Data.Common.DataColumnMappingCollection,System.String,System.Type,System.Data.DataTable,System.Data.MissingMappingAction,System.Data.MissingSchemaAction)">
      <summary>返回的静态方法 <see cref="T:System.Data.DataColumn" /> 对象而无需实例化 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 对象。</summary>
      <param name="columnMappings">
        <see cref="T:System.Data.Common.DataColumnMappingCollection" />。</param>
      <param name="sourceColumn">数据源的区分大小写的列名称。</param>
      <param name="dataType">正在映射的列的数据类型。</param>
      <param name="dataTable">
        <see cref="T:System.Data.DataTable" /> 的一个实例。</param>
      <param name="mappingAction">
        <see cref="T:System.Data.MissingMappingAction" /> 值之一。</param>
      <param name="schemaAction">决定时要采取的操作现有 <see cref="T:System.Data.DataSet" /> 架构与传入的数据不匹配。</param>
      <returns>一个 <see cref="T:System.Data.DataColumn" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.GetEnumerator">
      <summary>获取遍历该集合的枚举器可循环访问。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.IndexOf(System.Object)">
      <summary>获取指定的位置 <see cref="T:System.Object" /> 即 <see cref="T:System.Data.Common.DataColumnMapping" /> 在集合中。</summary>
      <param name="value">
        <see cref="T:System.Object" /> 即 <see cref="T:System.Data.Common.DataColumnMapping" /> 来查找。</param>
      <returns>指定的从零开始的位置 <see cref="T:System.Object" /> 即 <see cref="T:System.Data.Common.DataColumnMapping" /> 在集合中。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.IndexOf(System.String)">
      <summary>获取的位置 <see cref="T:System.Data.Common.DataColumnMapping" /> 具有指定的源列名称。</summary>
      <param name="sourceColumn">区分大小写的源列的名称。</param>
      <returns>从零开始的位置 <see cref="T:System.Data.Common.DataColumnMapping" /> 具有指定区分大小写的源列名称。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.IndexOfDataSetColumn(System.String)">
      <summary>获取指定的位置 <see cref="T:System.Data.Common.DataColumnMapping" /> 与给定 <see cref="T:System.Data.DataSet" /> 列名称。</summary>
      <param name="dataSetColumn">名称，它不区分大小写，要查找的数据集列。</param>
      <returns>指定的从零开始的位置 <see cref="T:System.Data.Common.DataColumnMapping" /> 与给定 DataSet 列名称，或者为-1 DataColumnMapping 集合中不存在对象。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Insert(System.Int32,System.Data.Common.DataColumnMapping)">
      <summary>在 <see cref="T:System.Data.Common.DataColumnMapping" /> 中的指定索引处插入一个 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 对象。</summary>
      <param name="index">要插入的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象的从零开始的索引。</param>
      <param name="value">
        <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</param>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Insert(System.Int32,System.Object)">
      <summary>在 <see cref="T:System.Data.Common.DataColumnMapping" /> 中的指定索引处插入一个 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 对象。</summary>
      <param name="index">要插入的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象的从零开始的索引。</param>
      <param name="value">
        <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</param>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Remove(System.Data.Common.DataColumnMapping)">
      <summary>从集合中移除指定的 <see cref="T:System.Data.Common.DataColumnMapping" />。</summary>
      <param name="value">要移除的 <see cref="T:System.Data.Common.DataColumnMapping" />。</param>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Remove(System.Object)">
      <summary>删除 <see cref="T:System.Object" /> 即 <see cref="T:System.Data.Common.DataColumnMapping" /> 集合中。</summary>
      <param name="value">
        <see cref="T:System.Object" /> 即 <see cref="T:System.Data.Common.DataColumnMapping" /> 中删除。</param>
      <exception cref="T:System.InvalidCastException">指定的对象不是 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</exception>
      <exception cref="T:System.ArgumentException">指定的对象不在集合中。</exception>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.RemoveAt(System.Int32)">
      <summary>删除 <see cref="T:System.Data.Common.DataColumnMapping" /> 与从该集合的指定索引的对象。</summary>
      <param name="index">要移除的 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象的索引（从零开始）。</param>
      <exception cref="T:System.IndexOutOfRangeException">有没有 <see cref="T:System.Data.Common.DataColumnMapping" /> 具有指定索引的对象。</exception>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.RemoveAt(System.String)">
      <summary>删除 <see cref="T:System.Data.Common.DataColumnMapping" /> 具有指定的源列名称从集合对象。</summary>
      <param name="sourceColumn">区分大小写的源列名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">有没有 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象具有指定的源列名称。</exception>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.System#Data#IColumnMappingCollection#Add(System.String,System.String)">
      <summary>添加 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象传递给 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 通过使用源列和 <see cref="T:System.Data.DataSet" /> 列名称。</summary>
      <param name="sourceColumnName">区分大小写的源列的名称。</param>
      <param name="dataSetColumnName">名称 <see cref="T:System.Data.DataSet" /> 列。</param>
      <returns>ColumnMapping 对象，该对象添加到集合。</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.System#Data#IColumnMappingCollection#GetByDataSetColumn(System.String)">
      <summary>获取 <see cref="T:System.Data.Common.DataColumnMapping" /> 具有指定的对象 <see cref="T:System.Data.DataSet" /> 列名称。</summary>
      <param name="dataSetColumnName">该名称，不区分大小写的 <see cref="T:System.Data.DataSet" /> 要查找列。</param>
      <returns>
        <see cref="T:System.Data.Common.DataColumnMapping" /> 具有指定的对象 <see cref="T:System.Data.DataSet" /> 列名称。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DataTableMapping" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Data.Common.DataTableMapping" /> 给定源名称和一个与源类 <see cref="T:System.Data.DataTable" /> 名称。</summary>
      <param name="sourceTable">数据源的区分大小写的源表名称。</param>
      <param name="dataSetTable">中的表名称 <see cref="T:System.Data.DataSet" /> 映射到。</param>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.#ctor(System.String,System.String,System.Data.Common.DataColumnMapping[])">
      <summary>新实例初始化 <see cref="T:System.Data.Common.DataTableMapping" /> 类时提供源表名称， <see cref="T:System.Data.DataTable" /> 名称，以及数组 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象。</summary>
      <param name="sourceTable">数据源的区分大小写的源表名称。</param>
      <param name="dataSetTable">中的表名称 <see cref="T:System.Data.DataSet" /> 映射到。</param>
      <param name="columnMappings">一个 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象数组。</param>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.GetColumnMappingBySchemaAction(System.String,System.Data.MissingMappingAction)">
      <summary>获取 <see cref="T:System.Data.DataColumn" /> 从指定 <see cref="T:System.Data.DataTable" /> 使用指定 <see cref="T:System.Data.MissingMappingAction" /> 值和名称 <see cref="T:System.Data.DataColumn" />。</summary>
      <param name="sourceColumn">
        <see cref="T:System.Data.DataColumn" /> 的名称。</param>
      <param name="mappingAction">
        <see cref="T:System.Data.MissingMappingAction" /> 值之一。</param>
      <returns>数据列。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="mappingAction" /> 参数设置为 Error, ，且未指定任何映射。</exception>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.GetDataColumn(System.String,System.Type,System.Data.DataTable,System.Data.MissingMappingAction,System.Data.MissingSchemaAction)">
      <summary>返回 <see cref="T:System.Data.DataColumn" /> 给定的列名称的对象。</summary>
      <param name="sourceColumn">
        <see cref="T:System.Data.DataColumn" /> 的名称。</param>
      <param name="dataType">数据类型为 <paramref name="sourceColumn" />。</param>
      <param name="dataTable">中的表名称 <see cref="T:System.Data.DataSet" /> 映射到。</param>
      <param name="mappingAction">
        <see cref="T:System.Data.MissingMappingAction" /> 值之一。</param>
      <param name="schemaAction">
        <see cref="T:System.Data.MissingSchemaAction" /> 值之一。</param>
      <returns>一个 <see cref="T:System.Data.DataColumn" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.GetDataTableBySchemaAction(System.Data.DataSet,System.Data.MissingSchemaAction)">
      <summary>获取当前 <see cref="T:System.Data.DataTable" /> 指定 <see cref="T:System.Data.DataSet" /> 使用指定 <see cref="T:System.Data.MissingSchemaAction" /> 值。</summary>
      <param name="dataSet">
        <see cref="T:System.Data.DataSet" /> 要从其中获取 <see cref="T:System.Data.DataTable" />。</param>
      <param name="schemaAction">
        <see cref="T:System.Data.MissingSchemaAction" /> 值之一。</param>
      <returns>构造函数。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.System#ICloneable#Clone">
      <summary>创建作为当前实例副本的新对象。</summary>
      <returns>当前实例副本的新对象。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.ToString">
      <summary>将当前 <see cref="P:System.Data.Common.DataTableMapping.SourceTable" /> 名称为字符串。</summary>
      <returns>当前 <see cref="P:System.Data.Common.DataTableMapping.SourceTable" /> 名称作为一个字符串。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DataTableMappingCollection" /> 类的新实例。 此新实例为空，也就是说，它不尚未包含任何 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</summary>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Add(System.Object)">
      <summary>添加 <see cref="T:System.Object" /> ，它是表映射到集合。</summary>
      <param name="value">一个 DataTableMapping 要添加到集合对象。</param>
      <returns>索引 DataTableMapping 对象添加到集合。</returns>
      <exception cref="T:System.InvalidCastException">传入的对象不是 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</exception>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Add(System.String,System.String)">
      <summary>添加 <see cref="T:System.Data.Common.DataTableMapping" /> 对象传递给集合时提供源表名称和 <see cref="T:System.Data.DataSet" /> 表名。</summary>
      <param name="sourceTable">要从映射的源表的区分大小写的名称。</param>
      <param name="dataSetTable">该名称，不区分大小写的 <see cref="T:System.Data.DataSet" /> 要映射到表。</param>
      <returns>
        <see cref="T:System.Data.Common.DataTableMapping" /> 添加到集合的对象。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.AddRange(System.Array)">
      <summary>将指定的元素复制 <see cref="T:System.Array" /> 到集合的末尾。</summary>
      <param name="values">
        <see cref="T:System.Array" /> 要添加到集合的值。</param>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.AddRange(System.Data.Common.DataTableMapping[])">
      <summary>将指定的元素复制 <see cref="T:System.Data.Common.DataTableMapping" /> 数组转换为集合的末尾。</summary>
      <param name="values">数组 <see cref="T:System.Data.Common.DataTableMapping" /> 要添加到集合的对象。</param>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Clear">
      <summary>删除所有 <see cref="T:System.Data.Common.DataTableMapping" /> 来自集合的对象。</summary>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Contains(System.Object)">
      <summary>获取一个值，该值指示是否给定 <see cref="T:System.Data.Common.DataTableMapping" /> 集合中存在的对象。</summary>
      <param name="value">
        <see cref="T:System.Object" /> 即 <see cref="T:System.Data.Common.DataTableMapping" />。</param>
      <returns>true 如果此集合包含指定 <see cref="T:System.Data.Common.DataTableMapping" />; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Contains(System.String)">
      <summary>获取一个值，该值指示是否 <see cref="T:System.Data.Common.DataTableMapping" /> 集合中存在具有指定的源的表名称的对象。</summary>
      <param name="value">区分大小写的源的表名称包含 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</param>
      <returns>true 如果集合包含 <see cref="T:System.Data.Common.DataTableMapping" /> 对象与此源表名; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.CopyTo(System.Array,System.Int32)">
      <summary>中的元素复制 <see cref="T:System.Data.Common.DataTableMappingCollection" /> 到指定的数组。</summary>
      <param name="array">
        <see cref="T:System.Array" /> 要向其复制 <see cref="T:System.Data.Common.DataTableMappingCollection" /> 元素。</param>
      <param name="index">数组的起始索引。</param>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.CopyTo(System.Data.Common.DataTableMapping[],System.Int32)">
      <summary>中的元素复制 <see cref="T:System.Data.Common.DataTableMapping" /> 到指定的数组。</summary>
      <param name="array">一个 <see cref="T:System.Data.Common.DataTableMapping" /> 要向其复制 <see cref="T:System.Data.Common.DataTableMappingCollection" /> 元素。</param>
      <param name="index">数组的起始索引。</param>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.GetByDataSetTable(System.String)">
      <summary>获取 <see cref="T:System.Data.Common.DataTableMapping" /> 对象具有指定 <see cref="T:System.Data.DataSet" /> 表名。</summary>
      <param name="dataSetTable">该名称，不区分大小写的 <see cref="T:System.Data.DataSet" /> 表，以查找。</param>
      <returns>
        <see cref="T:System.Data.Common.DataTableMapping" /> 对象具有指定 <see cref="T:System.Data.DataSet" /> 表名。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.GetEnumerator">
      <summary>获取遍历该集合的枚举器可循环访问。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.GetTableMappingBySchemaAction(System.Data.Common.DataTableMappingCollection,System.String,System.String,System.Data.MissingMappingAction)">
      <summary>获取 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象使用指定的源的表名和 <see cref="T:System.Data.DataSet" /> 表名称、 使用给定 <see cref="T:System.Data.MissingMappingAction" />。</summary>
      <param name="tableMappings">
        <see cref="T:System.Data.Common.DataTableMappingCollection" /> 要搜索的集合。</param>
      <param name="sourceTable">区分大小写映射的源表的名称。</param>
      <param name="dataSetTable">该名称，不区分大小写，所映射的 <see cref="T:System.Data.DataSet" /> 表。</param>
      <param name="mappingAction">
        <see cref="T:System.Data.MissingMappingAction" /> 值之一。</param>
      <returns>一个 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="mappingAction" /> 参数设置为 Error, ，且未指定任何映射。</exception>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.IndexOf(System.Object)">
      <summary>获取指定的位置 <see cref="T:System.Data.Common.DataTableMapping" /> 在集合中的对象。</summary>
      <param name="value">
        <see cref="T:System.Object" /> 即 <see cref="T:System.Data.Common.DataTableMapping" /> 要查找对象。</param>
      <returns>指定的从零开始的位置 <see cref="T:System.Data.Common.DataTableMapping" /> 在集合中的对象。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.IndexOf(System.String)">
      <summary>获取的位置 <see cref="T:System.Data.Common.DataTableMapping" /> 对象使用指定的源的表名。</summary>
      <param name="sourceTable">区分大小写的源表的名称。</param>
      <returns>从零开始的位置 <see cref="T:System.Data.Common.DataTableMapping" /> 对象使用指定的源的表名。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.IndexOfDataSetTable(System.String)">
      <summary>获取的位置 <see cref="T:System.Data.Common.DataTableMapping" /> 对象具有指定 <see cref="T:System.Data.DataSet" /> 表名。</summary>
      <param name="dataSetTable">该名称，不区分大小写的 DataSet 表，以查找。</param>
      <returns>从零开始的位置 <see cref="T:System.Data.Common.DataTableMapping" /> 对象与给定 <see cref="T:System.Data.DataSet" /> 表名称，则为-1，如果 <see cref="T:System.Data.Common.DataTableMapping" /> 集合中不存在对象。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Insert(System.Int32,System.Data.Common.DataTableMapping)">
      <summary>在 <see cref="T:System.Data.Common.DataTableMapping" /> 中的指定索引处插入一个 <see cref="T:System.Data.Common.DataTableMappingCollection" /> 对象。</summary>
      <param name="index">要插入的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象的从零开始的索引。</param>
      <param name="value">要插入的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</param>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Insert(System.Int32,System.Object)">
      <summary>在 <see cref="T:System.Data.Common.DataTableMapping" /> 中的指定索引处插入一个 <see cref="T:System.Data.Common.DataTableMappingCollection" /> 对象。</summary>
      <param name="index">要插入的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象的从零开始的索引。</param>
      <param name="value">要插入的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</param>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Remove(System.Data.Common.DataTableMapping)">
      <summary>从集合中移除指定的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</summary>
      <param name="value">要移除的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</param>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Remove(System.Object)">
      <summary>从集合中移除指定的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</summary>
      <param name="value">要移除的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</param>
      <exception cref="T:System.InvalidCastException">指定的对象不是 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</exception>
      <exception cref="T:System.ArgumentException">指定的对象不在集合中。</exception>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.RemoveAt(System.Int32)">
      <summary>删除 <see cref="T:System.Data.Common.DataTableMapping" /> 对象位于集合中的指定索引处。</summary>
      <param name="index">要移除的 <see cref="T:System.Data.Common.DataTableMapping" /> 对象的索引（从零开始）。</param>
      <exception cref="T:System.IndexOutOfRangeException">一个 <see cref="T:System.Data.Common.DataTableMapping" /> 对象不存在具有指定的索引。</exception>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.RemoveAt(System.String)">
      <summary>删除 <see cref="T:System.Data.Common.DataTableMapping" /> 具有指定的源的表名称从集合对象。</summary>
      <param name="sourceTable">若要查找区分大小写的源表名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">一个 <see cref="T:System.Data.Common.DataTableMapping" /> 对象不存在使用指定的源的表名。</exception>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.System#Data#ITableMappingCollection#Add(System.String,System.String)">
      <summary>将表映射添加到集合。</summary>
      <param name="sourceTableName">区分大小写的源表的名称。</param>
      <param name="dataSetTableName">名称 <see cref="T:System.Data.DataSet" /> 表。</param>
      <returns>对新映射的引用 <see cref="T:System.Data.ITableMapping" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.System#Data#ITableMappingCollection#GetByDataSetTable(System.String)">
      <summary>获取具有指定的 TableMapping 对象 <see cref="T:System.Data.DataSet" /> 表名。</summary>
      <param name="dataSetTableName">名称 DataSet 在集合中的表。</param>
      <returns>使用指定的 TableMapping 对象 DataSet 表名。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.#ctor">
      <summary>构造一个实例 <see cref="T:System.Data.Common.DbCommand" /> 对象。</summary>
    </member>
    <member name="M:System.Data.Common.DbCommand.Cancel">
      <summary>尝试取消执行 <see cref="T:System.Data.Common.DbCommand" />。</summary>
    </member>
    <member name="M:System.Data.Common.DbCommand.CreateDbParameter">
      <summary>创建 <see cref="T:System.Data.Common.DbParameter" /> 对象的新实例。</summary>
      <returns>一个 <see cref="T:System.Data.Common.DbParameter" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.CreateParameter">
      <summary>创建 <see cref="T:System.Data.Common.DbParameter" /> 对象的新实例。</summary>
      <returns>一个 <see cref="T:System.Data.Common.DbParameter" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteDbDataReader(System.Data.CommandBehavior)">
      <summary>执行针对连接的命令文本。</summary>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 的一个实例。</param>
      <returns>表示该操作的任务。</returns>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出错。</exception>
      <exception cref="T:System.ArgumentException">无效的 <see cref="T:System.Data.CommandBehavior" /> 值。</exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)">
      <summary>提供程序应实现此方法以提供一个非默认实现来 <see cref="Overload:System.Data.Common.DbCommand.ExecuteReader" /> 重载。默认实现调用同步 <see cref="M:System.Data.Common.DbCommand.ExecuteReader" /> 方法，并返回已完成的任务，阻止调用线程。 如果传递一个已被取消的取消标记，则默认实现将返回已取消的任务。 通过返回的任务异常属性，将向由 ExecuteReader 引发的异常。此方法接受可用于请求要提前取消的操作的取消标记。 实现可能会忽略此请求。</summary>
      <param name="behavior">语句执行和数据检索的选项。</param>
      <param name="cancellationToken">要监视取消请求的标记。</param>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出错。</exception>
      <exception cref="T:System.ArgumentException">无效的 <see cref="T:System.Data.CommandBehavior" /> 值。</exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteNonQuery">
      <summary>执行 SQL 语句对连接对象。</summary>
      <returns>受影响的行数。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync">
      <summary>异步版本 <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />, ，它在执行 SQL 语句对连接对象。调用 <see cref="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)" /> 与 CancellationToken.None。</summary>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出错。</exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)">
      <summary>这是异步版本 <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />。 提供程序应使用适当的实现重写。 （可选） 被忽略的取消标记。默认实现调用同步 <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" /> 方法，并返回已完成的任务，阻止调用线程。 如果传递一个已被取消的取消标记，则默认实现将返回已取消的任务。  引发的异常 <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" /> 将向您提供通过返回的任务异常属性。不调用其他方法和属性的 DbCommand 对象，直到返回的任务已完成。</summary>
      <param name="cancellationToken">要监视取消请求的标记。</param>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出错。</exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReader">
      <summary>执行 <see cref="P:System.Data.Common.DbCommand.CommandText" /> 针对 <see cref="P:System.Data.Common.DbCommand.Connection" />, ，并返回 <see cref="T:System.Data.Common.DbDataReader" />。</summary>
      <returns>一个 <see cref="T:System.Data.Common.DbDataReader" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReader(System.Data.CommandBehavior)">
      <summary>执行 <see cref="P:System.Data.Common.DbCommand.CommandText" /> 针对 <see cref="P:System.Data.Common.DbCommand.Connection" />, ，并返回 <see cref="T:System.Data.Common.DbDataReader" /> 使用一种 <see cref="T:System.Data.CommandBehavior" /> 值。</summary>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。</param>
      <returns>一个 <see cref="T:System.Data.Common.DbDataReader" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReaderAsync">
      <summary>异步版本 <see cref="Overload:System.Data.Common.DbCommand.ExecuteReader" />, ，该解释器 <see cref="P:System.Data.Common.DbCommand.CommandText" /> 针对 <see cref="P:System.Data.Common.DbCommand.Connection" /> ，并返回 <see cref="T:System.Data.Common.DbDataReader" />。调用 <see cref="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" /> 与 CancellationToken.None。</summary>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出错。</exception>
      <exception cref="T:System.ArgumentException">无效的 <see cref="T:System.Data.CommandBehavior" /> 值。</exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReaderAsync(System.Data.CommandBehavior)">
      <summary>异步版本 <see cref="Overload:System.Data.Common.DbCommand.ExecuteReader" />, ，该解释器 <see cref="P:System.Data.Common.DbCommand.CommandText" /> 针对 <see cref="P:System.Data.Common.DbCommand.Connection" /> ，并返回 <see cref="T:System.Data.Common.DbDataReader" />。调用 <see cref="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />。</summary>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。</param>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出错。</exception>
      <exception cref="T:System.ArgumentException">无效的 <see cref="T:System.Data.CommandBehavior" /> 值。</exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)">
      <summary>调用 <see cref="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />。</summary>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。</param>
      <param name="cancellationToken">要监视取消请求的标记。</param>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出错。</exception>
      <exception cref="T:System.ArgumentException">无效的 <see cref="T:System.Data.CommandBehavior" /> 值。</exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReaderAsync(System.Threading.CancellationToken)">
      <summary>异步版本 <see cref="Overload:System.Data.Common.DbCommand.ExecuteReader" />, ，该解释器 <see cref="P:System.Data.Common.DbCommand.CommandText" /> 针对 <see cref="P:System.Data.Common.DbCommand.Connection" /> ，并返回 <see cref="T:System.Data.Common.DbDataReader" />。 此方法传播有关应取消操作的通知。调用 <see cref="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />。</summary>
      <param name="cancellationToken">要监视取消请求的标记。</param>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出错。</exception>
      <exception cref="T:System.ArgumentException">无效的 <see cref="T:System.Data.CommandBehavior" /> 值。</exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteScalar">
      <summary>执行查询并返回第一行的第一列中由查询返回的结果集。 忽略所有其他列和行。</summary>
      <returns>在结果中的第一行的第一列设置。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteScalarAsync">
      <summary>异步版本 <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" />, ，其执行查询并返回第一行的第一列中由查询返回的结果集。 忽略所有其他列和行。调用 <see cref="M:System.Data.Common.DbCommand.ExecuteScalarAsync(System.Threading.CancellationToken)" /> 与 CancellationToken.None。</summary>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出错。</exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteScalarAsync(System.Threading.CancellationToken)">
      <summary>这是异步版本 <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" />。 提供程序应使用适当的实现重写。 （可选） 被忽略的取消标记。默认实现调用同步 <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" /> 方法，并返回已完成的任务，阻止调用线程。 如果传递一个已被取消的取消标记，则默认实现将返回已取消的任务。 通过返回的任务异常属性，将向由 ExecuteScalar 引发的异常。不调用其他方法和属性的 DbCommand 对象，直到返回的任务已完成。</summary>
      <param name="cancellationToken">要监视取消请求的标记。</param>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出错。</exception>
    </member>
    <member name="M:System.Data.Common.DbCommand.Prepare">
      <summary>在数据源上创建命令的已准备好 （或已编译） 版本。</summary>
    </member>
    <member name="M:System.Data.Common.DbCommand.System#Data#IDbCommand#CreateParameter">
      <summary>创建的新实例 <see cref="T:System.Data.IDbDataParameter" /> 对象。</summary>
      <returns>一个 IDbDataParameter 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.System#Data#IDbCommand#ExecuteReader">
      <summary>执行 <see cref="P:System.Data.IDbCommand.CommandText" /> 针对 <see cref="P:System.Data.IDbCommand.Connection" /> 并生成 <see cref="T:System.Data.IDataReader" />。</summary>
      <returns>一个 <see cref="T:System.Data.IDataReader" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.System#Data#IDbCommand#ExecuteReader(System.Data.CommandBehavior)">
      <summary>执行 <see cref="P:System.Data.IDbCommand.CommandText" /> 针对 <see cref="P:System.Data.IDbCommand.Connection" />, ，并生成 <see cref="T:System.Data.IDataReader" /> 使用一种 <see cref="T:System.Data.CommandBehavior" /> 值。</summary>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。</param>
      <returns>一个 <see cref="T:System.Data.IDataReader" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.#ctor">
      <summary>初始化继承的类的新实例 <see cref="T:System.Data.Common.DbCommandBuilder" /> 类。</summary>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)">
      <summary>允许的提供程序实现 <see cref="T:System.Data.Common.DbCommandBuilder" /> 类来处理更多的参数属性。</summary>
      <param name="parameter">一个 <see cref="T:System.Data.Common.DbParameter" /> 对其应用其他修改。</param>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> 由提供的架构表 <see cref="M:System.Data.Common.DbDataReader.GetSchemaTable" />。</param>
      <param name="statementType">正在生成; 的命令的类型插入、 更新或删除。</param>
      <param name="whereClause">true 如果该参数是更新或删除 WHERE 子句的一部分 false 是否插入或更新值的一部分。</param>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Data.Common.DbCommandBuilder" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetDeleteCommand">
      <summary>获取自动生成 <see cref="T:System.Data.Common.DbCommand" /> 对象所需执行删除操作在数据源。</summary>
      <returns>自动生成 <see cref="T:System.Data.Common.DbCommand" /> 对象所需执行删除操作。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetDeleteCommand(System.Boolean)">
      <summary>获取自动生成 <see cref="T:System.Data.Common.DbCommand" /> 对象所需执行删除操作在数据源，可以选择使用列作为参数名。</summary>
      <param name="useColumnsForParameterNames">如果 true, ，生成与列名称，如有可能匹配的参数名。 如果 false, 、 生成 @p1，@p2，依次类推。</param>
      <returns>自动生成 <see cref="T:System.Data.Common.DbCommand" /> 对象所需执行删除操作。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetInsertCommand">
      <summary>获取自动生成 <see cref="T:System.Data.Common.DbCommand" /> 需要执行插入操作的数据源对象。</summary>
      <returns>自动生成 <see cref="T:System.Data.Common.DbCommand" /> 对象所需执行插入操作。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetInsertCommand(System.Boolean)">
      <summary>获取自动生成 <see cref="T:System.Data.Common.DbCommand" /> 对象所需执行插入操作在数据源，可以选择使用列作为参数名。</summary>
      <param name="useColumnsForParameterNames">如果 true, ，生成与列名称，如有可能匹配的参数名。 如果 false, 、 生成 @p1，@p2，依次类推。</param>
      <returns>自动生成 <see cref="T:System.Data.Common.DbCommand" /> 对象所需执行插入操作。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetParameterName(System.Int32)">
      <summary>返回指定的参数的名称的格式为 @p#。 当生成自定义命令生成器时使用。</summary>
      <param name="parameterOrdinal">要作为参数的名称的一部分包括数...</param>
      <returns>具有指定数量的参数名称的一部分作为附加参数的名称。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetParameterName(System.String)">
      <summary>返回完整参数名称，而在给定部分参数名称。</summary>
      <param name="parameterName">参数的部分名称。</param>
      <returns>请求的部分参数名称相对应的完整参数名称。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetParameterPlaceholder(System.Int32)">
      <summary>在关联的 SQL 语句中返回该参数的占位符。</summary>
      <param name="parameterOrdinal">要将作为参数的名称的一部分包含的数字。</param>
      <returns>追加的指定个数的参数的名称。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetSchemaTable(System.Data.Common.DbCommand)">
      <summary>返回的架构表 <see cref="T:System.Data.Common.DbCommandBuilder" />。</summary>
      <param name="sourceCommand">
        <see cref="T:System.Data.Common.DbCommand" /> 为其检索相应的架构表。</param>
      <returns>一个 <see cref="T:System.Data.DataTable" /> ，它表示的特定架构 <see cref="T:System.Data.Common.DbCommand" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetUpdateCommand">
      <summary>获取自动生成 <see cref="T:System.Data.Common.DbCommand" /> 对象所需的数据源执行更新。</summary>
      <returns>自动生成 <see cref="T:System.Data.Common.DbCommand" /> 对象所需执行更新。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetUpdateCommand(System.Boolean)">
      <summary>获取自动生成 <see cref="T:System.Data.Common.DbCommand" /> 对象所需数据源，可以选择使用列作为参数名在执行更新。</summary>
      <param name="useColumnsForParameterNames">如果 true, ，生成与列名称，如有可能匹配的参数名。 如果 false, 、 生成 @p1，@p2，依次类推。</param>
      <returns>自动生成 <see cref="T:System.Data.Common.DbCommand" /> 对象所需执行更新。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)">
      <summary>重置 <see cref="P:System.Data.Common.DbCommand.CommandTimeout" />, ，<see cref="P:System.Data.Common.DbCommand.Transaction" />, ，<see cref="P:System.Data.Common.DbCommand.CommandType" />, ，和 <see cref="T:System.Data.UpdateRowSource" /> 属性 <see cref="T:System.Data.Common.DbCommand" />。</summary>
      <param name="command">
        <see cref="T:System.Data.Common.DbCommand" /> 用于命令生成器为相应的插入、 更新或删除命令。</param>
      <returns>一个 <see cref="T:System.Data.Common.DbCommand" /> 实例要用于每个插入、 更新或删除操作。 传递 null 值时，允许 <see cref="M:System.Data.Common.DbCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)" /> 方法来创建 <see cref="T:System.Data.Common.DbCommand" /> 对象基于与关联的 Select 命令 <see cref="T:System.Data.Common.DbCommandBuilder" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.QuoteIdentifier(System.String)">
      <summary>给定在正确的目录的情况下不带引号的标识符，将返回正确带引号的该标识符，包括正确转义任何在标识符中嵌入的引号的形式。</summary>
      <param name="unquotedIdentifier">原始的不带引号的标识符。</param>
      <returns>带引号的标识符版本。 适当地转义标识符中嵌入的引号。</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.RefreshSchema">
      <summary>清除与此相关的命令 <see cref="T:System.Data.Common.DbCommandBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.RowUpdatingHandler(System.Data.Common.RowUpdatingEventArgs)">
      <summary>添加事件处理程序 <see cref="E:System.Data.OleDb.OleDbDataAdapter.RowUpdating" /> 事件。</summary>
      <param name="rowUpdatingEvent">一个 <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> 实例，包含有关事件的信息。</param>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)">
      <summary>注册 <see cref="T:System.Data.Common.DbCommandBuilder" /> 来处理 <see cref="E:System.Data.OleDb.OleDbDataAdapter.RowUpdating" /> 事件 <see cref="T:System.Data.Common.DbDataAdapter" />。</summary>
      <param name="adapter">
        <see cref="T:System.Data.Common.DbDataAdapter" /> 要用于此更新。</param>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.UnquoteIdentifier(System.String)">
      <summary>给定带引号的标识符，将返回该标识符，包括正确取消转义的正确不带引号的形式嵌入的任何引号标识符中。</summary>
      <param name="quotedIdentifier">将删除其嵌入的引号的标识符。</param>
      <returns>不带引号的标识符，其嵌入的引号正确取消转义。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DbConnection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DbConnection.BeginDbTransaction(System.Data.IsolationLevel)">
      <summary>开始数据库事务。</summary>
      <param name="isolationLevel">指定事务的隔离级别。</param>
      <returns>表示新事务的对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.BeginTransaction">
      <summary>开始数据库事务。</summary>
      <returns>表示新事务的对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)">
      <summary>以指定的隔离级别启动数据库事务。</summary>
      <param name="isolationLevel">指定事务的隔离级别。</param>
      <returns>表示新事务的对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.ChangeDatabase(System.String)">
      <summary>更改打开的连接的当前数据库。</summary>
      <param name="databaseName">指定要使用的连接的数据库的名称。</param>
    </member>
    <member name="M:System.Data.Common.DbConnection.Close">
      <summary>关闭与数据库之间的连接。 此方法是关闭任何打开连接的首选方法。</summary>
      <exception cref="T:System.Data.Common.DbException">打开连接时出现的连接级别的错误。</exception>
    </member>
    <member name="M:System.Data.Common.DbConnection.CreateCommand">
      <summary>创建并返回 <see cref="T:System.Data.Common.DbCommand" /> 与当前连接关联的对象。</summary>
      <returns>一个 <see cref="T:System.Data.Common.DbCommand" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.CreateDbCommand">
      <summary>创建并返回 <see cref="T:System.Data.Common.DbCommand" /> 与当前连接关联的对象。</summary>
      <returns>一个 <see cref="T:System.Data.Common.DbCommand" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.EnlistTransaction(System.Transactions.Transaction)">
      <summary>在指定的事务中登记。</summary>
      <param name="transaction">对用于登记的现有 <see cref="T:System.Transactions.Transaction" /> 的引用。</param>
    </member>
    <member name="M:System.Data.Common.DbConnection.GetSchema">
      <summary>返回的数据源的架构信息 <see cref="T:System.Data.Common.DbConnection" />。</summary>
      <returns>一个包含架构信息的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.GetSchema(System.String)">
      <summary>返回的数据源的架构信息 <see cref="T:System.Data.Common.DbConnection" /> 使用架构名称指定的字符串。</summary>
      <param name="collectionName">指定要返回的架构的名称。</param>
      <returns>一个包含架构信息的 <see cref="T:System.Data.DataTable" />。</returns>
      <exception cref="T:System.ArgumentException">将 <paramref name="collectionName" /> 指定为 null。</exception>
    </member>
    <member name="M:System.Data.Common.DbConnection.GetSchema(System.String,System.String[])">
      <summary>返回的数据源的架构信息 <see cref="T:System.Data.Common.DbConnection" /> 架构名称和指定的字符串数组的限制值使用指定的字符串。</summary>
      <param name="collectionName">指定要返回的架构的名称。</param>
      <param name="restrictionValues">指定一组请求的架构的限制值。</param>
      <returns>一个包含架构信息的 <see cref="T:System.Data.DataTable" />。</returns>
      <exception cref="T:System.ArgumentException">将 <paramref name="collectionName" /> 指定为 null。</exception>
    </member>
    <member name="M:System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)">
      <summary>引发 <see cref="E:System.Data.Common.DbConnection.StateChange" /> 事件。</summary>
      <param name="stateChange">包含事件数据的 <see cref="T:System.Data.StateChangeEventArgs" />。</param>
    </member>
    <member name="M:System.Data.Common.DbConnection.Open">
      <summary>打开数据库连接指定的设置与 <see cref="P:System.Data.Common.DbConnection.ConnectionString" />。</summary>
    </member>
    <member name="M:System.Data.Common.DbConnection.OpenAsync">
      <summary>异步版本 <see cref="M:System.Data.Common.DbConnection.Open" />, ，用于打开数据库连接指定的设置与 <see cref="P:System.Data.Common.DbConnection.ConnectionString" />。 此方法调用虚方法 <see cref="M:System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)" /> 与 CancellationToken.None。</summary>
      <returns>表示异步操作的任务。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)">
      <summary>这是异步版本 <see cref="M:System.Data.Common.DbConnection.Open" />。 提供程序应使用适当的实现重写。 （可选） 可以接受取消标记。默认实现调用同步 <see cref="M:System.Data.Common.DbConnection.Open" /> 调用并返回已完成的任务。 如果传递已取消的 cancellationToken，默认实现将返回已取消的任务。 打开由引发的异常将通过返回的任务异常属性进行通信。不调用其他方法和属性的 DbConnection 对象，直到返回的任务已完成。</summary>
      <param name="cancellationToken">取消指令。</param>
      <returns>表示异步操作的任务。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction">
      <summary>开始一项数据库事务。</summary>
      <returns>一个表示新事务的对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)">
      <summary>开始数据库事务具有指定 <see cref="T:System.Data.IsolationLevel" /> 值。</summary>
      <param name="isolationLevel">
        <see cref="T:System.Data.IsolationLevel" /> 值之一。</param>
      <returns>一个表示新事务的对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand">
      <summary>创建并返回 <see cref="T:System.Data.Common.DbCommand" /> 与当前连接关联的对象。</summary>
      <returns>一个 <see cref="T:System.Data.Common.DbCommand" /> 与连接关联的对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 类的新实例，可以选择使用 ODBC 规则来引用值。</summary>
      <param name="useOdbcRules">若为 true，则使用 {} 分隔字段；若为 false，则使用引号。</param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.Add(System.String,System.Object)">
      <summary>将带有指定键和值的条目添加到 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 中。</summary>
      <param name="keyword">要添加到 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 的键。</param>
      <param name="value">指定键的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为空引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 为只读。- 或 -<see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.AppendKeyValuePair(System.Text.StringBuilder,System.String,System.String)">
      <summary>提供了一种有效而安全的方法，用于将键和值附加到现有的 <see cref="T:System.Text.StringBuilder" /> 对象中。</summary>
      <param name="builder">要向其中添加键/值对的 <see cref="T:System.Text.StringBuilder" />。</param>
      <param name="keyword">要添加的键。</param>
      <param name="value">提供的键的值。</param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.AppendKeyValuePair(System.Text.StringBuilder,System.String,System.String,System.Boolean)">
      <summary>提供了一种有效而安全的方法，用于将键和值附加到现有的 <see cref="T:System.Text.StringBuilder" /> 对象中。</summary>
      <param name="builder">要向其中添加键/值对的 <see cref="T:System.Text.StringBuilder" />。</param>
      <param name="keyword">要添加的键。</param>
      <param name="value">提供的键的值。</param>
      <param name="useOdbcRules">若为 true，则使用 {} 分隔字段，若为 false，则使用引号。</param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.Clear">
      <summary>清除 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 实例的内容。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 为只读。</exception>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.ClearPropertyDescriptors">
      <summary>清除关联的 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 上的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象集合。</summary>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.ContainsKey(System.String)">
      <summary>确定 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 是否包含特定键。</summary>
      <param name="keyword">要在 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 中定位的键。</param>
      <returns>如果 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 包含具有指定键的项，则为 true；否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为空引用（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.EquivalentTo(System.Data.Common.DbConnectionStringBuilder)">
      <summary>将此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 对象中的连接信息与提供的对象中的连接信息进行比较。</summary>
      <param name="connectionStringBuilder">要与此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 对象进行比较的 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />。</param>
      <returns>如果两个 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 对象中的连接信息生成等效的连接字符串，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.GetProperties(System.Collections.Hashtable)">
      <summary>使用有关此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 的所有属性的信息，填充提供的 <see cref="T:System.Collections.Hashtable" />。</summary>
      <param name="propertyDescriptors">使用有关此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 的信息填充的 <see cref="T:System.Collections.Hashtable" />。</param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.Remove(System.String)">
      <summary>从 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 实例中移除具有指定的键的项。</summary>
      <param name="keyword">要从此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 中的连接字符串移除的键/值对中的键。</param>
      <returns>如果该键存在于连接字符串中并已被移除，则为 true；如果该键不存在，则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为 Null（在 Visual Basic 中为 Nothing）</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 是只读，或 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.ShouldSerialize(System.String)">
      <summary>指示此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 实例中是否存在指定的键。</summary>
      <param name="keyword">要在 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 中定位的键。</param>
      <returns>如果 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 包含具有指定键的项，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从特定的 <see cref="T:System.Collections.ICollection" /> 索引处开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>在 <see cref="T:System.Collections.IDictionary" /> 对象中添加一个带有所提供的键和值的元素。</summary>
      <param name="keyword">用作要添加的元素的键的 <see cref="T:System.Object" />。</param>
      <param name="value">用作要添加的元素的键的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Contains(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IDictionary" /> 对象是否包含具有指定键的元素。</summary>
      <param name="keyword">要在 <see cref="T:System.Collections.IDictionary" /> 对象中查找的键。</param>
      <returns>如果 true 包含具有键的元素，则为 <see cref="T:System.Collections.IDictionary" />；否则为 false。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#GetEnumerator">
      <summary>返回 <see cref="T:System.Collections.IDictionary" /> 对象的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 对象。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionaryEnumerator" /> 对象的 <see cref="T:System.Collections.IDictionary" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.IDictionary" /> 对象中移除具有指定键的元素。</summary>
      <param name="keyword">要移除的元素的键。</param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问集合的枚举数。</summary>
      <returns>一个可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
      <summary>返回此组件实例的自定义属性的集合。</summary>
      <returns>包含此对象的属性的 <see cref="T:System.ComponentModel.AttributeCollection" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
      <summary>返回此组件实例的类名称。</summary>
      <returns>对象的类名称，如果该类没有名称，则为 null。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
      <summary>返回某个组件的此实例的名称。</summary>
      <returns>对象的名称，如果该对象不具有名称，则为 null。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
      <summary>返回此组件实例的类型转换器。</summary>
      <returns>作为此对象转换器的 <see cref="T:System.ComponentModel.TypeConverter" />，或为 null（如果此对象不存在任何 <see cref="T:System.ComponentModel.TypeConverter" />）。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
      <summary>返回某个组件的此实例的默认事件。</summary>
      <returns>表示此对象的默认事件的 <see cref="T:System.ComponentModel.EventDescriptor" />；如果该对象没有事件，则为 null。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
      <summary>返回此组件实例的默认属性。</summary>
      <returns>表示此对象的默认属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />；如果该对象没有属性，则为 null。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
      <summary>返回指定类型的此实例的一个组件的编辑器。</summary>
      <param name="editorBaseType">一个 <see cref="T:System.Type" /> ，它表示此对象的编辑器。</param>
      <returns>
        <see cref="T:System.Object" /> 是此对象的编辑器的指定类型或 null 如果找不到编辑器中。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
      <summary>返回此组件实例的事件。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.EventDescriptorCollection" />，表示此组件实例的事件。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
      <summary>使用指定的属性数组作为筛选器，返回此组件实例的事件。</summary>
      <param name="attributes">用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。</param>
      <returns>表示此组件实例的已筛选事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
      <summary>返回此组件实例的属性。</summary>
      <returns>表示此组件实例的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
      <summary>使用特性数组作为筛选器，返回此组件实例的属性。</summary>
      <param name="attributes">用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。</param>
      <returns>一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，它表示此组件实例的已筛选属性。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>返回一个对象，该对象包含指定的属性描述符所描述的属性。</summary>
      <param name="pd">一个 <see cref="T:System.ComponentModel.PropertyDescriptor" />，表示要查找其所有者的属性。</param>
      <returns>一个 <see cref="T:System.Object" />，表示指定属性的所有者。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.ToString">
      <summary>返回与此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 关联的连接字符串。</summary>
      <returns>当前 <see cref="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString" /> 属性。</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
      <summary>从此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 中检索与提供的键相对应的值。</summary>
      <param name="keyword">要检索的项的键。</param>
      <param name="value">与 <paramref name="key" /> 对应的值。</param>
      <returns>如果在连接字符串中找到 <paramref name="keyword" />，则为 true，否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 包含一个 null 值（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.#ctor">
      <summary>新实例初始化 DataAdapter 类。</summary>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)">
      <summary>新实例初始化 DataAdapter 从同一类型的现有对象的类。</summary>
      <param name="adapter">一个 DataAdapter 用来创建新对象 DataAdapter。</param>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)">
      <summary>添加 <see cref="T:System.Data.IDbCommand" /> 到当前批次。</summary>
      <param name="command">
        <see cref="T:System.Data.IDbCommand" /> 将添加到批次。</param>
      <returns>然后再添加到批中的命令数 <see cref="T:System.Data.IDbCommand" />。</returns>
      <exception cref="T:System.NotSupportedException">该适配器不支持批处理。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.ClearBatch">
      <summary>删除所有 <see cref="T:System.Data.IDbCommand" /> 批次中的对象。</summary>
      <exception cref="T:System.NotSupportedException">该适配器不支持批处理。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>初始化 <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> 类的新实例。</summary>
      <param name="dataRow">
        <see cref="T:System.Data.DataRow" /> 用于更新数据源。</param>
      <param name="command">
        <see cref="T:System.Data.IDbCommand" /> 期间执行 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />。</param>
      <param name="statementType">该命令是否更新、 插入、 删除或 SELECT 语句。</param>
      <param name="tableMapping">一个 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</param>
      <returns>
        <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> 类的新实例。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>初始化 <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> 类的新实例。</summary>
      <param name="dataRow">
        <see cref="T:System.Data.DataRow" /> 更新数据源。</param>
      <param name="command">
        <see cref="T:System.Data.IDbCommand" /> 过程中执行 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />。</param>
      <param name="statementType">该命令是否更新、 插入、 删除或 SELECT 语句。</param>
      <param name="tableMapping">一个 <see cref="T:System.Data.Common.DataTableMapping" /> 对象。</param>
      <returns>
        <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> 类的新实例。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Data.Common.DbDataAdapter" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.ExecuteBatch">
      <summary>执行当前批次。</summary>
      <returns>从批处理中的最后一个命令返回的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)">
      <summary>添加或刷新中行 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="dataSet">一个 <see cref="T:System.Data.DataSet" /> 要用记录填充并且如有必要，架构。</param>
      <returns>行数已成功添加到或在刷新 <see cref="T:System.Data.DataSet" />。 这不包括不返回行的语句影响的行。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)">
      <summary>添加或刷新指定范围中的行 <see cref="T:System.Data.DataSet" /> 以匹配中使用数据源的那些 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.Data.DataTable" /> 名称。</summary>
      <param name="dataSet">一个 <see cref="T:System.Data.DataSet" /> 要用记录填充并且如有必要，架构。</param>
      <param name="startRecord">要以开头的从零开始记录数。</param>
      <param name="maxRecords">要检索的记录中最大的数。</param>
      <param name="srcTable">用于表映射的源表的名称。</param>
      <returns>行数已成功添加到或在刷新 <see cref="T:System.Data.DataSet" />。 这不包括不返回行的语句影响的行。</returns>
      <exception cref="T:System.SystemException">
        <see cref="T:System.Data.DataSet" /> 无效。</exception>
      <exception cref="T:System.InvalidOperationException">此源表是无效的。- 或 - 连接无效。</exception>
      <exception cref="T:System.InvalidCastException">找不到该连接。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="startRecord" /> 参数小于 0。- 或 - <paramref name="maxRecords" /> 参数小于 0。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)">
      <summary>添加或刷新指定范围中的行 <see cref="T:System.Data.DataSet" /> 以匹配中使用数据源的那些 <see cref="T:System.Data.DataSet" /> 和源的表名、 命令字符串和命令的行为。</summary>
      <param name="dataSet">一个 <see cref="T:System.Data.DataSet" /> 要用记录填充并且如有必要，架构。</param>
      <param name="startRecord">要以开头的从零开始记录数。</param>
      <param name="maxRecords">要检索的记录中最大的数。</param>
      <param name="srcTable">用于表映射的源表的名称。</param>
      <param name="command">用来从数据源检索行的 SQL SELECT 语句。</param>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。</param>
      <returns>行数已成功添加到或在刷新 <see cref="T:System.Data.DataSet" />。 这不包括不返回行的语句影响的行。</returns>
      <exception cref="T:System.InvalidOperationException">此源表是无效的。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="startRecord" /> 参数小于 0。- 或 - <paramref name="maxRecords" /> 参数小于 0。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)">
      <summary>添加或刷新中行 <see cref="T:System.Data.DataSet" /> 以匹配中使用数据源的那些 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.Data.DataTable" /> 名称。</summary>
      <param name="dataSet">一个 <see cref="T:System.Data.DataSet" /> 要用记录填充并且如有必要，架构。</param>
      <param name="srcTable">用于表映射的源表的名称。</param>
      <returns>行数已成功添加到或在刷新 <see cref="T:System.Data.DataSet" />。 这不包括不返回行的语句影响的行。</returns>
      <exception cref="T:System.SystemException">此源表是无效的。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)">
      <summary>添加或刷新指定范围中的行 <see cref="T:System.Data.DataSet" /> 以匹配中使用数据源的那些 <see cref="T:System.Data.DataTable" /> 名称。</summary>
      <param name="dataTable">名称 <see cref="T:System.Data.DataTable" /> 用于表映射。</param>
      <returns>行数已成功添加到或在刷新 <see cref="T:System.Data.DataSet" />。 这不包括不返回行的语句影响的行。</returns>
      <exception cref="T:System.InvalidOperationException">此源表是无效的。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)">
      <summary>添加或刷新中行 <see cref="T:System.Data.DataTable" /> 以匹配使用指定的数据源中的那些 <see cref="T:System.Data.DataTable" />, ，<see cref="T:System.Data.IDbCommand" /> 和 <see cref="T:System.Data.CommandBehavior" />。</summary>
      <param name="dataTable">一个 <see cref="T:System.Data.DataTable" /> 要用记录填充并且如有必要，架构。</param>
      <param name="command">用来从数据源检索行的 SQL SELECT 语句。</param>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。</param>
      <returns>行数已成功添加到或在刷新 <see cref="T:System.Data.DataTable" />。 这不包括不返回行的语句影响的行。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)">
      <summary>添加或刷新指定范围中的行 <see cref="T:System.Data.DataSet" /> 以匹配中使用数据源的那些 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.Data.DataTable" /> 名称。</summary>
      <param name="dataTables">
        <see cref="T:System.Data.DataTable" /> 要从数据源填充对象。</param>
      <param name="startRecord">要以开头的从零开始记录数。</param>
      <param name="maxRecords">要检索的记录中最大的数。</param>
      <param name="command">
        <see cref="T:System.Data.IDbCommand" /> 执行以填充 <see cref="T:System.Data.DataTable" /> 对象。</param>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。</param>
      <returns>添加到或数据表中的数据刷新的行数。</returns>
      <exception cref="T:System.SystemException">
        <see cref="T:System.Data.DataSet" /> 无效。</exception>
      <exception cref="T:System.InvalidOperationException">此源表是无效的。- 或 - 连接无效。</exception>
      <exception cref="T:System.InvalidCastException">找不到该连接。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="startRecord" /> 参数小于 0。- 或 - <paramref name="maxRecords" /> 参数小于 0。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])">
      <summary>添加或刷新中行 <see cref="T:System.Data.DataTable" /> 以匹配所指定的记录从开始，并检索由指定的最大记录数的数据源中。</summary>
      <param name="startRecord">要以开头的从零开始记录数。</param>
      <param name="maxRecords">要检索的记录中最大的数。</param>
      <param name="dataTables">
        <see cref="T:System.Data.DataTable" /> 要从数据源填充对象。</param>
      <returns>行数已成功添加到或在刷新 <see cref="T:System.Data.DataTable" />。 此值不包括不返回行的语句影响的行。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)">
      <summary>将名为“Table”的 <see cref="T:System.Data.DataTable" /> 添加到指定的 <see cref="T:System.Data.DataSet" />，并根据指定的 <see cref="T:System.Data.SchemaType" /> 配置架构以匹配数据源中的架构。</summary>
      <param name="dataSet">要插入架构的 <see cref="T:System.Data.DataSet" />。</param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 值之一，指定如何插入架构。</param>
      <returns>一个引用，指向添加到 <see cref="T:System.Data.DataSet" /> 的 <see cref="T:System.Data.DataTable" /> 对象的集合。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)">
      <summary>添加 <see cref="T:System.Data.DataTable" /> 到指定 <see cref="T:System.Data.DataSet" /> 和配置架构的架构以匹配数据源中根据指定 <see cref="T:System.Data.SchemaType" />。</summary>
      <param name="dataSet">
        <see cref="T:System.Data.DataSet" /> 要填充数据源中的架构。</param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 值之一。</param>
      <param name="command">用来从数据源检索行的 SQL SELECT 语句。</param>
      <param name="srcTable">用于表映射的源表的名称。</param>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。</param>
      <returns>一个数组 <see cref="T:System.Data.DataTable" /> 从数据源中返回包含架构信息的对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)">
      <summary>将 <see cref="T:System.Data.DataTable" /> 添加到指定的 <see cref="T:System.Data.DataSet" /> 中，并根据指定的 <see cref="T:System.Data.SchemaType" /> 和 <see cref="T:System.Data.DataTable" /> 配置架构以匹配数据源中的架构。</summary>
      <param name="dataSet">要插入架构的 <see cref="T:System.Data.DataSet" />。</param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 值之一，指定如何插入架构。</param>
      <param name="srcTable">用于表映射的源表的名称。</param>
      <returns>一个引用，指向添加到 <see cref="T:System.Data.DataSet" /> 的 <see cref="T:System.Data.DataTable" /> 对象的集合。</returns>
      <exception cref="T:System.ArgumentException">找不到从中获取架构的源表。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)">
      <summary>根据指定的 <see cref="T:System.Data.SchemaType" /> 配置指定 <see cref="T:System.Data.DataTable" /> 的架构。</summary>
      <param name="dataTable">要用数据源中的架构填充的 <see cref="T:System.Data.DataTable" />。</param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 值之一。</param>
      <returns>一个 <see cref="T:System.Data.DataTable" />，其中包含从数据源返回的架构信息。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)">
      <summary>在配置架构的指定 <see cref="T:System.Data.DataTable" /> 根据指定 <see cref="T:System.Data.SchemaType" />, ，命令字符串和 <see cref="T:System.Data.CommandBehavior" /> 值。</summary>
      <param name="dataTable">要用数据源中的架构填充的 <see cref="T:System.Data.DataTable" />。</param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 值之一。</param>
      <param name="command">用来从数据源检索行的 SQL SELECT 语句。</param>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。</param>
      <returns>A 的 <see cref="T:System.Data.DataTable" /> 从数据源返回的对象，其中包含架构信息。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)">
      <summary>返回 <see cref="T:System.Data.IDataParameter" /> 从当前批次中的命令之一。</summary>
      <param name="commandIdentifier">要检索的参数的命令的索引。</param>
      <param name="parameterIndex">该命令中的参数的索引。</param>
      <returns>
        <see cref="T:System.Data.IDataParameter" /> 指定。</returns>
      <exception cref="T:System.NotSupportedException">该适配器不支持批处理。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)">
      <summary>返回单个更新内尝试有关的较大的批处理更新的信息。</summary>
      <param name="commandIdentifier">在批处理中的单个命令的从零开始的列序号。</param>
      <param name="recordsAffected">在批处理中指定的命令在数据存储区中受影响的行数。</param>
      <param name="error">
        <see cref="T:System.Exception" /> 在指定的命令执行期间引发。 返回 null (Nothing 在 Visual Basic 中) 如果不会引发异常。</param>
      <returns>单个更新内尝试有关的较大的批处理更新的信息。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.GetFillParameters">
      <summary>获取在执行 SQL SELECT 语句时由用户设置的参数。</summary>
      <returns>一个数组 <see cref="T:System.Data.IDataParameter" /> 由用户来设置包含的参数的对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.InitializeBatching">
      <summary>初始化用于批处理 <see cref="T:System.Data.Common.DbDataAdapter" />。</summary>
      <exception cref="T:System.NotSupportedException">该适配器不支持批处理。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)">
      <summary>引发 RowUpdated 的.NET Framework 数据提供程序的事件。</summary>
      <param name="value">包含事件数据的 <see cref="T:System.Data.Common.RowUpdatedEventArgs" />。</param>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)">
      <summary>引发 RowUpdating 的.NET Framework 数据提供程序的事件。</summary>
      <param name="value">
        <see cref="T:System.Data.Common.RowUpdatingEventArgs" />  包含事件数据。</param>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.System#ICloneable#Clone">
      <summary>创建作为当前实例副本的新对象。</summary>
      <returns>作为此实例副本的新对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.TerminateBatching">
      <summary>结束用于批处理 <see cref="T:System.Data.Common.DbDataAdapter" />。</summary>
      <exception cref="T:System.NotSupportedException">该适配器不支持批处理。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])">
      <summary>通过为每个插入、 更新或删除了行中指定的数组中执行相应的 INSERT、 UPDATE 或 DELETE 语句来更新数据库中的值 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="dataRows">一个数组 <see cref="T:System.Data.DataRow" /> 用于更新数据源的对象。</param>
      <returns>从已成功更新的行数 <see cref="T:System.Data.DataSet" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Data.DataSet" /> 无效。</exception>
      <exception cref="T:System.InvalidOperationException">此源表是无效的。</exception>
      <exception cref="T:System.SystemException">否 <see cref="T:System.Data.DataRow" /> 存在更新。- 或 - 否 <see cref="T:System.Data.DataTable" /> 存在更新。- 或 - 否 <see cref="T:System.Data.DataSet" /> 存在是为了用作源。</exception>
      <exception cref="T:System.Data.DBConcurrencyException">尝试执行的 INSERT、 UPDATE 或 DELETE 语句导致受影响的零个记录。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)">
      <summary>通过执行相应的 INSERT、 UPDATE 或 DELETE 语句，为每个插入、 更新或删除指定的数组中的一行来更新数据库中的值 <see cref="T:System.Data.DataSet" /> 对象。</summary>
      <param name="dataRows">一个数组 <see cref="T:System.Data.DataRow" /> 用于更新数据源的对象。</param>
      <param name="tableMapping">
        <see cref="P:System.Data.IDataAdapter.TableMappings" /> 使用集合。</param>
      <returns>从已成功更新的行数 <see cref="T:System.Data.DataSet" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Data.DataSet" /> 无效。</exception>
      <exception cref="T:System.InvalidOperationException">此源表是无效的。</exception>
      <exception cref="T:System.SystemException">否 <see cref="T:System.Data.DataRow" /> 存在更新。- 或 - 否 <see cref="T:System.Data.DataTable" /> 存在更新。- 或 - 否 <see cref="T:System.Data.DataSet" /> 存在是为了用作源。</exception>
      <exception cref="T:System.Data.DBConcurrencyException">尝试执行的 INSERT、 UPDATE 或 DELETE 语句导致受影响的零个记录。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)">
      <summary>通过为每个插入、 更新或删除了在指定的行执行相应的 INSERT、 UPDATE 或 DELETE 语句来更新数据库中的值 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="dataSet">
        <see cref="T:System.Data.DataSet" /> 用于更新数据源。</param>
      <returns>从已成功更新的行数 <see cref="T:System.Data.DataSet" />。</returns>
      <exception cref="T:System.InvalidOperationException">此源表是无效的。</exception>
      <exception cref="T:System.Data.DBConcurrencyException">尝试执行的 INSERT、 UPDATE 或 DELETE 语句导致受影响的零个记录。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)">
      <summary>通过为每个插入、 更新或删除了行中的执行相应的 INSERT、 UPDATE 或 DELETE 语句来更新数据库中的值 <see cref="T:System.Data.DataSet" />  具有指定 <see cref="T:System.Data.DataTable" /> 名称。</summary>
      <param name="dataSet">
        <see cref="T:System.Data.DataSet" /> 要用于更新数据源。</param>
      <param name="srcTable">用于表映射的源表的名称。</param>
      <returns>从已成功更新的行数 <see cref="T:System.Data.DataSet" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Data.DataSet" /> 无效。</exception>
      <exception cref="T:System.InvalidOperationException">此源表是无效的。</exception>
      <exception cref="T:System.Data.DBConcurrencyException">尝试执行的 INSERT、 UPDATE 或 DELETE 语句导致受影响的零个记录。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)">
      <summary>通过为每个插入、 更新或删除了在指定的行执行相应的 INSERT、 UPDATE 或 DELETE 语句来更新数据库中的值 <see cref="T:System.Data.DataTable" />。</summary>
      <param name="dataTable">
        <see cref="T:System.Data.DataTable" /> 用于更新数据源。</param>
      <returns>从已成功更新的行数 <see cref="T:System.Data.DataTable" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Data.DataSet" /> 无效。</exception>
      <exception cref="T:System.InvalidOperationException">此源表是无效的。</exception>
      <exception cref="T:System.SystemException">否 <see cref="T:System.Data.DataRow" /> 存在更新。- 或 - 否 <see cref="T:System.Data.DataTable" /> 存在更新。- 或 - 否 <see cref="T:System.Data.DataSet" /> 存在是为了用作源。</exception>
      <exception cref="T:System.Data.DBConcurrencyException">尝试执行的 INSERT、 UPDATE 或 DELETE 语句导致受影响的零个记录。</exception>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.#ctor">
      <summary>初始化 DBDataPermission 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.#ctor(System.Data.Common.DBDataPermission)">
      <summary>新实例初始化 DBDataPermission 类使用的现有 DBDataPermission。</summary>
      <param name="permission">现有 DBDataPermission 用来创建一个新 DBDataPermission。</param>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.#ctor(System.Data.Common.DBDataPermissionAttribute)">
      <summary>新实例初始化 DBDataPermission 类与指定 DBDataPermissionAttribute。</summary>
      <param name="permissionAttribute">与自定义安全特性关联的安全操作。</param>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>新实例初始化 DBDataPermission 类与指定 <see cref="T:System.Security.Permissions.PermissionState" /> 值。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.#ctor(System.Security.Permissions.PermissionState,System.Boolean)">
      <summary>新实例初始化 DBDataPermission 类与指定 <see cref="T:System.Security.Permissions.PermissionState" /> 和一个值，该值指示是否允许使用空白密码。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
      <param name="allowBlankPassword">指示是否允许密码为空。</param>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.Add(System.String,System.String,System.Data.KeyRestrictionBehavior)">
      <summary>将指定的连接字符串的访问权限添加到的现有状态 DBDataPermission。</summary>
      <param name="connectionString">允许的连接字符串。</param>
      <param name="restrictions">标识允许或禁止使用的连接字符串参数的字符串。</param>
      <param name="behavior">其中一个 <see cref="T:System.Data.KeyRestrictionBehavior" /> 属性。</param>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.Clear">
      <summary>移除在前面已经使用添加的所有权限 <see cref="M:System.Data.Common.DBDataPermission.Add(System.String,System.String,System.Data.KeyRestrictionBehavior)" /> 方法。</summary>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.Copy">
      <summary>创建并返回当前的权限对象的相同副本。</summary>
      <returns>当前权限对象的副本。</returns>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.CreateInstance">
      <summary>创建 DBDataPermission 类的新实例。</summary>
      <returns>一个新 DBDataPermission 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.FromXml(System.Security.SecurityElement)">
      <summary>通过 XML 编码重新构造具有指定状态的安全对象。</summary>
      <param name="securityElement">用于重新构造安全对象的 XML 编码。</param>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.Intersect(System.Security.IPermission)">
      <summary>返回表示当前的权限对象和指定的权限对象的交集的新权限对象。</summary>
      <param name="target">要与当前权限对象相交的一个权限对象。 它必须是类型的与当前权限对象相同。</param>
      <returns>新权限对象，它表示当前的权限对象和指定的权限对象的交集。 这个新的权限对象为空引用 (Nothing 在 Visual Basic 中) 如果交集为空。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不是空引用 (Nothing 在 Visual Basic 中) 并不是与当前权限对象相同的类的实例。</exception>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>返回一个值，该值指示当前的权限对象是否为指定的权限对象的一个子集。</summary>
      <param name="target">测试子集关系权限对象。 此对象必须是类型的与当前权限对象相同。</param>
      <returns>true 如果当前的权限对象是指定的权限对象的一个子集否则 false。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数是不是与当前权限对象具有相同类型的对象。</exception>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.IsUnrestricted">
      <summary>返回一个值，该值指示是否可以将权限表示为无限制权限语义任何不知情的情况下。</summary>
      <returns>true 如果该权限可以表示为无限制。</returns>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.ToXml">
      <summary>创建安全对象及其当前状态的 XML 编码。</summary>
      <returns>安全对象的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.Union(System.Security.IPermission)">
      <summary>返回一个新的权限对象，是当前和指定权限对象的并集。</summary>
      <param name="target">要与当前权限对象组合在一个权限对象。 它必须是类型的与当前权限对象相同。</param>
      <returns>新权限对象，表示当前的权限对象和指定的权限对象的并集。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 对象不是与当前权限对象相同的类型。</exception>
    </member>
    <member name="M:System.Data.Common.DBDataPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>初始化 <see cref="T:System.Data.Common.DBDataPermissionAttribute" /> 的新实例。</summary>
      <param name="action">表示可通过声明性安全来执行的操作的安全操作值之一。</param>
    </member>
    <member name="M:System.Data.Common.DBDataPermissionAttribute.ShouldSerializeConnectionString">
      <summary>标识是否该属性应序列化的连接字符串。</summary>
      <returns>true 如果该属性应序列化的连接字符串。否则为 false。</returns>
    </member>
    <member name="M:System.Data.Common.DBDataPermissionAttribute.ShouldSerializeKeyRestrictions">
      <summary>标识是否特性应序列化键限制集合。</summary>
      <returns>true 如果该属性应序列化的一套键限制;否则为 false。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DbDataReader" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DbDataReader.Close">
      <summary>关闭 <see cref="T:System.Data.Common.DbDataReader" /> 对象。</summary>
    </member>
    <member name="M:System.Data.Common.DbDataReader.Dispose">
      <summary>释放 <see cref="T:System.Data.Common.DbDataReader" /> 类的当前实例所使用的所有资源。</summary>
    </member>
    <member name="M:System.Data.Common.DbDataReader.Dispose(System.Boolean)">
      <summary>释放托管的资源使用 <see cref="T:System.Data.Common.DbDataReader" /> ，还可以释放非托管的资源。</summary>
      <param name="disposing">若要释放托管资源和非托管的资源，则为 true；若要仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetBoolean(System.Int32)">
      <summary>以布尔值的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetByte(System.Int32)">
      <summary>以字节的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>从指定的列中，由指示位置处开始读取的字节流 <paramref name="dataOffset" />, ，到缓冲区中，从所指示的位置开始 <paramref name="bufferOffset" />。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="dataOffset">行中作为读取操作起始位置的索引。</param>
      <param name="buffer">要将数据复制到的缓冲区。</param>
      <param name="bufferOffset">要将数据复制到的位置的缓冲区索引。</param>
      <param name="length">要读取的最大字符数。</param>
      <returns>读取的实际字节数。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetChar(System.Int32)">
      <summary>以单个字符的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>从指定的列所指示的位置开始的字符流读入 <paramref name="dataOffset" />, ，到缓冲区中，从所指示的位置开始 <paramref name="bufferOffset" />。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="dataOffset">行中作为读取操作起始位置的索引。</param>
      <param name="buffer">要将数据复制到的缓冲区。</param>
      <param name="bufferOffset">要将数据复制到的位置的缓冲区索引。</param>
      <param name="length">要读取的最大字符数。</param>
      <returns>读取的实际字符数。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetData(System.Int32)">
      <summary>返回 <see cref="T:System.Data.Common.DbDataReader" /> 对象请求的列序号。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>一个 <see cref="T:System.Data.Common.DbDataReader" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetDataTypeName(System.Int32)">
      <summary>获取指定列的数据类型的名称。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>一个字符串，表示数据类型的名称。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetDateTime(System.Int32)">
      <summary>以 <see cref="T:System.DateTime" /> 对象的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetDbDataReader(System.Int32)">
      <summary>为可用提供程序特定的实现重写的已请求的列序号返回一个 <see cref="T:System.Data.Common.DbDataReader" /> 对象。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>一个 <see cref="T:System.Data.Common.DbDataReader" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetDecimal(System.Int32)">
      <summary>以 <see cref="T:System.Decimal" /> 对象的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetDouble(System.Int32)">
      <summary>以双精度浮点数字的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetEnumerator">
      <summary>返回一个可用于循环访问数据读取器中的行的 <see cref="T:System.Collections.IEnumerator" />。</summary>
      <returns>一个 <see cref="T:System.Collections.IEnumerator" />，可用于循环访问数据读取器中的行。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetFieldType(System.Int32)">
      <summary>获取指定列的数据类型。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>指定列的数据类型。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetFieldValue``1(System.Int32)">
      <summary>作为一种类型，以同步方式获取指定列的值。</summary>
      <param name="ordinal">要检索的列。</param>
      <typeparam name="T">作为一种类型，以同步方式获取指定列的值。</typeparam>
      <returns>要检索的列。</returns>
      <exception cref="T:System.InvalidOperationException">连接断开或很期间数据检索已关闭。<see cref="T:System.Data.SqlClient.SqlDataReader" /> 数据检索过程中关闭。没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.SqlClient.SqlDataReader.Read" /> 没有调用，或返回了 false)。尝试读取顺序模式中的以前读取列。没有正在进行的异步操作。 这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。</exception>
      <exception cref="T:System.IndexOutOfRangeException">试图读取某个列不存在。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="T" /> 与返回的类型不匹配 SQL Server 或不能强制转换。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32)">
      <summary>以异步方式获取指定列的值作为一种类型。</summary>
      <param name="ordinal">要返回的值的类型。</param>
      <typeparam name="T">要返回的值的类型。 请参阅备注部分以了解更多信息。</typeparam>
      <returns>要返回的值的类型。</returns>
      <exception cref="T:System.InvalidOperationException">连接断开或很期间数据检索已关闭。<see cref="T:System.Data.Common.DbDataReader" /> 数据检索过程中关闭。没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" /> 没有调用，或返回了 false)。尝试读取顺序模式中的以前读取列。没有正在进行的异步操作。 这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。</exception>
      <exception cref="T:System.IndexOutOfRangeException">试图读取某个列不存在。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="T" /> 与数据源返回的类型不匹配或不能强制转换。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32,System.Threading.CancellationToken)">
      <summary>以异步方式获取指定列的值作为一种类型。</summary>
      <param name="ordinal">要返回的值的类型。</param>
      <param name="cancellationToken">取消指令，传播有关应取消操作的通知。 这不保证取消。 如果设置为 CancellationToken.None 使得此方法等效于 <see cref="M:System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32)" />。 返回的任务必须标记为已取消。</param>
      <typeparam name="T">要返回的值的类型。 请参阅备注部分以了解更多信息。</typeparam>
      <returns>要返回的值的类型。</returns>
      <exception cref="T:System.InvalidOperationException">连接断开或很期间数据检索已关闭。<see cref="T:System.Data.Common.DbDataReader" /> 数据检索过程中关闭。没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" /> 没有调用，或返回了 false)。尝试读取顺序模式中的以前读取列。没有正在进行的异步操作。 这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。</exception>
      <exception cref="T:System.IndexOutOfRangeException">试图读取某个列不存在。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="T" /> 与数据源返回的类型不匹配或不能强制转换。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetFloat(System.Int32)">
      <summary>以单精度浮点数字的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetGuid(System.Int32)">
      <summary>以全局唯一标识符 (GUID) 的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetInt16(System.Int32)">
      <summary>16 位有符号整数形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetInt32(System.Int32)">
      <summary>作为 32 位有符号整数获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetInt64(System.Int32)">
      <summary>以 64 位有符号整数的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetName(System.Int32)">
      <summary>在给定从零开始的列序号时获取该列的名称。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>指定列的名称。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetOrdinal(System.String)">
      <summary>在给定列名时获取相应的列序号。</summary>
      <param name="name">列的名称。</param>
      <returns>从零开始的列序号。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定的名称不是有效的列名。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetProviderSpecificFieldType(System.Int32)">
      <summary>返回指定列的提供程序特定的字段类型。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>描述指定列的数据类型的 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetProviderSpecificValue(System.Int32)">
      <summary>以 <see cref="T:System.Object" /> 实例的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetProviderSpecificValues(System.Object[])">
      <summary>在当前行的集合中获取提供程序特定的所有属性列。</summary>
      <param name="values">要将属性列复制到的 <see cref="T:System.Object" /> 数组。</param>
      <returns>数组中的 <see cref="T:System.Object" /> 实例数。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetSchemaTable">
      <summary>返回一个描述 <see cref="T:System.Data.DataTable" /> 的列元数据的 <see cref="T:System.Data.Common.DbDataReader" />。</summary>
      <returns>一个描述列元数据的 <see cref="T:System.Data.DataTable" />。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.SqlClient.SqlDataReader" /> 已关闭。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetStream(System.Int32)">
      <summary>将数据检索为 <see cref="T:System.IO.Stream" />。</summary>
      <param name="ordinal">将数据检索为 <see cref="T:System.IO.Stream" />。</param>
      <returns>返回的对象。</returns>
      <exception cref="T:System.InvalidOperationException">连接断开或很期间数据检索已关闭。<see cref="T:System.Data.Common.DbDataReader" /> 数据检索过程中关闭。没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" /> 没有调用，或返回了 false)。尝试读取顺序模式中的以前读取列。没有正在进行的异步操作。 这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。</exception>
      <exception cref="T:System.IndexOutOfRangeException">试图读取某个列不存在。</exception>
      <exception cref="T:System.InvalidCastException">返回的类型不是以下类型之一 ︰binary图像varbinaryudt</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetString(System.Int32)">
      <summary>以 <see cref="T:System.String" /> 实例的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetTextReader(System.Int32)">
      <summary>将数据检索为 <see cref="T:System.IO.TextReader" />。</summary>
      <param name="ordinal">将数据检索为 <see cref="T:System.IO.TextReader" />。</param>
      <returns>返回的对象。</returns>
      <exception cref="T:System.InvalidOperationException">连接断开或很期间数据检索已关闭。<see cref="T:System.Data.Common.DbDataReader" /> 数据检索过程中关闭。没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" /> 没有调用，或返回了 false)。尝试读取顺序模式中的以前读取列。没有正在进行的异步操作。 这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。</exception>
      <exception cref="T:System.IndexOutOfRangeException">试图读取某个列不存在。</exception>
      <exception cref="T:System.InvalidCastException">返回的类型不是以下类型之一 ︰charncharntextnvarchar文本varchar</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetValue(System.Int32)">
      <summary>以 <see cref="T:System.Object" /> 实例的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetValues(System.Object[])">
      <summary>使用来填充数组的对象的当前行的列的值。</summary>
      <param name="values">要将属性列复制到的 <see cref="T:System.Object" /> 数组。</param>
      <returns>数组中的 <see cref="T:System.Object" /> 实例数。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.IsDBNull(System.Int32)">
      <summary>获取一个值，该值指示列中是否包含不存在或丢失的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>true 如果指定的列等效于 <see cref="T:System.DBNull" />; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32)">
      <summary>异步版本 <see cref="M:System.Data.Common.DbDataReader.IsDBNull(System.Int32)" />, ，后者将获取一个值，该值指示列是否包含不存在或缺少的值。</summary>
      <param name="ordinal">要检索的从零开始的列。</param>
      <returns>true 如果指定的列的值等效于 DBNull 否则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">连接断开或很期间数据检索已关闭。<see cref="T:System.Data.Common.DbDataReader" /> 数据检索过程中关闭。没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" /> 没有调用，或返回了 false)。试图读取顺序模式中的以前读取的列。没有正在进行的异步操作。 这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。</exception>
      <exception cref="T:System.IndexOutOfRangeException">试图读取某个列不存在。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)">
      <summary>异步版本 <see cref="M:System.Data.Common.DbDataReader.IsDBNull(System.Int32)" />, ，后者将获取一个值，该值指示列是否包含不存在或缺少的值。 （可选） 将发送告知应取消操作的通知。</summary>
      <param name="ordinal">要检索的从零开始的列。</param>
      <param name="cancellationToken">取消指令，传播有关应取消操作的通知。 这不保证取消。 如果设置为 CancellationToken.None 使得此方法等效于 <see cref="M:System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32)" />。 返回的任务必须标记为已取消。</param>
      <returns>true 如果指定的列的值等效于 DBNull 否则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">连接断开或很期间数据检索已关闭。<see cref="T:System.Data.Common.DbDataReader" /> 数据检索过程中关闭。没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" /> 没有调用，或返回了 false)。试图读取顺序模式中的以前读取的列。没有正在进行的异步操作。 这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。</exception>
      <exception cref="T:System.IndexOutOfRangeException">试图读取某个列不存在。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.NextResult">
      <summary>在读取一批语句的结果时，使读取器前进到下一个结果。</summary>
      <returns>true 如果有多个结果集;否则为 false。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.NextResultAsync">
      <summary>异步版本 <see cref="M:System.Data.Common.DbDataReader.NextResult" />, ，它将读取器推进到下一个结果时读取一批语句的结果。调用 <see cref="M:System.Data.Common.DbDataReader.NextResultAsync(System.Threading.CancellationToken)" /> 与 CancellationToken.None。</summary>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出错。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.NextResultAsync(System.Threading.CancellationToken)">
      <summary>这是异步版本 <see cref="M:System.Data.Common.DbDataReader.NextResult" />。 提供程序应使用适当的实现重写。<paramref name="cancellationToken" /> （可选） 被忽略。默认实现调用同步 <see cref="M:System.Data.Common.DbDataReader.NextResult" /> 方法，并返回已完成的任务，阻止调用线程。 默认实现将返回已取消的任务，如果传递已取消 <paramref name="cancellationToken" />。 引发的异常 <see cref="M:System.Data.Common.DbDataReader.NextResult" /> 将向您提供通过返回的任务异常属性。其他方法和 DbDataReader 对象的属性不应调用时返回的任务尚未完成。</summary>
      <param name="cancellationToken">取消指令。</param>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出错。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.Read">
      <summary>使读取器前进到结果集中的下一条记录。</summary>
      <returns>如果存在更多行，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.ReadAsync">
      <summary>异步版本 <see cref="M:System.Data.Common.DbDataReader.Read" />, ，它将读取器推进到结果集中的下一个记录。 此方法调用 <see cref="M:System.Data.Common.DbDataReader.ReadAsync(System.Threading.CancellationToken)" /> 与 CancellationToken.None。</summary>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出错。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.ReadAsync(System.Threading.CancellationToken)">
      <summary>这是异步版本 <see cref="M:System.Data.Common.DbDataReader.Read" />。  提供程序应使用适当的实现重写。 CancellationToken （可选） 可能会被忽略。默认实现调用同步 <see cref="M:System.Data.Common.DbDataReader.Read" /> 方法，并返回已完成的任务，阻止调用线程。 如果传递已取消的 cancellationToken，默认实现将返回已取消的任务。  读取由引发的异常将通过返回的任务异常属性进行通信。不调用其他方法和属性的 DbDataReader 对象，直到返回的任务已完成。</summary>
      <param name="cancellationToken">取消指令。</param>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.Data.Common.DbException">执行命令文本时出错。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataReader.System#Data#IDataRecord#GetData(System.Int32)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.Data.IDataRecord.GetData(System.Int32)" />。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>一个实例 <see cref="T:System.Data.IDataReader" /> 在该字段指向更多远程结构化数据时使用。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DbDataRecord" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetBoolean(System.Int32)">
      <summary>指定列的值作为一个布尔值返回。</summary>
      <param name="i">列序号。</param>
      <returns>true 如果布尔值为 true; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetByte(System.Int32)">
      <summary>以字节的形式返回指定列的值。</summary>
      <param name="i">列序号。</param>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>字节数组的形式返回指定列的值。</summary>
      <param name="i">从零开始的列序号。</param>
      <param name="dataIndex">中自其开始读取的操作的字段的索引。</param>
      <param name="buffer">若要读取的字节流读入的缓冲区。</param>
      <param name="bufferIndex">有关索引 <paramref name="buffer" /> 开始读取的操作。</param>
      <param name="length">要读取的字节数。</param>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetChar(System.Int32)">
      <summary>字符的形式返回指定列的值。</summary>
      <param name="i">列序号。</param>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>字符数组的形式返回指定列的值。</summary>
      <param name="i">列序号。</param>
      <param name="dataIndex">要将数据复制到缓冲区。</param>
      <param name="buffer">若要复制到缓冲区的最大长度。</param>
      <param name="bufferIndex">缓冲区中从其开始的点。</param>
      <param name="length">源数据中从其开始的点。</param>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetData(System.Int32)">
      <summary>当前不支持。</summary>
      <param name="i">当前不支持。</param>
      <returns>当前不支持。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetDataTypeName(System.Int32)">
      <summary>返回的后端数据类型的名称。</summary>
      <param name="i">列序号。</param>
      <returns>后端数据类型的名称。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetDateTime(System.Int32)">
      <summary>返回指定列的值 <see cref="T:System.DateTime" /> 对象。</summary>
      <param name="i">列序号。</param>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetDbDataReader(System.Int32)">
      <summary>为可用提供程序特定的实现重写的已请求的列序号返回一个 <see cref="T:System.Data.Common.DbDataReader" /> 对象。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>一个 <see cref="T:System.Data.Common.DbDataReader" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetDecimal(System.Int32)">
      <summary>返回指定列的值 <see cref="T:System.Decimal" /> 对象。</summary>
      <param name="i">列序号。</param>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetDouble(System.Int32)">
      <summary>指定列的值作为双精度浮点数返回。</summary>
      <param name="i">列序号。</param>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetFieldType(System.Int32)">
      <summary>返回 <see cref="T:System.Type" /> ，它是该对象的数据类型。</summary>
      <param name="i">列序号。</param>
      <returns>
        <see cref="T:System.Type" /> ，它是该对象的数据类型。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetFloat(System.Int32)">
      <summary>指定列的值作为单精度浮点数返回。</summary>
      <param name="i">列序号。</param>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetGuid(System.Int32)">
      <summary>返回指定字段的 GUID 值。</summary>
      <param name="i">要返回的字段的索引。</param>
      <returns>指定字段的 GUID 值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引超出了范围 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />。</exception>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetInt16(System.Int32)">
      <summary>16 位有符号整数形式返回指定列的值。</summary>
      <param name="i">列序号。</param>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetInt32(System.Int32)">
      <summary>32 位有符号整数形式返回指定列的值。</summary>
      <param name="i">列序号。</param>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetInt64(System.Int32)">
      <summary>64 位有符号整数形式返回指定列的值。</summary>
      <param name="i">列序号。</param>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetName(System.Int32)">
      <summary>返回指定列的名称。</summary>
      <param name="i">列序号。</param>
      <returns>指定列的名称。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetOrdinal(System.String)">
      <summary>返回的列序号，给定的列的名称。</summary>
      <param name="name">列的名称。</param>
      <returns>列序号。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetString(System.Int32)">
      <summary>作为字符串返回指定列的值。</summary>
      <param name="i">列序号。</param>
      <returns>指定列的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetValue(System.Int32)">
      <summary>返回位于指定列的值以其本机格式。</summary>
      <param name="i">列序号。</param>
      <returns>要返回的值。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetValues(System.Object[])">
      <summary>使用来填充数组的对象的当前记录的列的值。</summary>
      <param name="values">一个数组 <see cref="T:System.Object" /> 要复制到的属性字段。</param>
      <returns>数组中的 <see cref="T:System.Object" /> 实例数。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.IsDBNull(System.Int32)">
      <summary>用于指示不存在的值。</summary>
      <param name="i">列序号。</param>
      <returns>true 如果指定的列等效于 <see cref="T:System.DBNull" />; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
      <summary>返回此组件实例的自定义属性的集合。</summary>
      <returns>
        <see cref="T:System.ComponentModel.AttributeCollection" /> ，其中包含此对象的属性。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
      <summary>返回此组件实例的类名称。</summary>
      <returns>对象的类名称，如果该类没有名称，则为 null。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
      <summary>返回某个组件的此实例的名称。</summary>
      <returns>对象的名称，如果该对象不具有名称，则为 null。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
      <summary>返回此组件实例的类型转换器。</summary>
      <returns>作为此对象转换器的 <see cref="T:System.ComponentModel.TypeConverter" />，或为 null（如果此对象不存在任何 <see cref="T:System.ComponentModel.TypeConverter" />）。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
      <summary>返回某个组件的此实例的默认事件。</summary>
      <returns>表示此对象的默认事件的 <see cref="T:System.ComponentModel.EventDescriptor" />；如果该对象没有事件，则为 null。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
      <summary>返回此组件实例的默认属性。</summary>
      <returns>表示此对象的默认属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />；如果该对象没有属性，则为 null。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
      <summary>返回指定类型的此实例的一个组件的编辑器。</summary>
      <param name="editorBaseType">一个 <see cref="T:System.Type" /> ，它表示此对象的编辑器。</param>
      <returns>
        <see cref="T:System.Object" /> 是此对象的编辑器的指定类型或 null 如果找不到编辑器中。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
      <summary>返回此组件实例的事件。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.EventDescriptorCollection" />，表示此组件实例的事件。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
      <summary>使用指定的属性数组作为筛选器，返回此组件实例的事件。</summary>
      <param name="attributes">用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。</param>
      <returns>表示此组件实例的已筛选事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
      <summary>返回此组件实例的属性。</summary>
      <returns>表示此组件实例的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
      <summary>使用特性数组作为筛选器，返回此组件实例的属性。</summary>
      <param name="attributes">用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。</param>
      <returns>一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，它表示此组件实例的已筛选属性。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>返回一个对象，该对象包含指定的属性描述符所描述的属性。</summary>
      <param name="pd">一个 <see cref="T:System.ComponentModel.PropertyDescriptor" />，表示要查找其所有者的属性。</param>
      <returns>一个 <see cref="T:System.Object" />，表示指定属性的所有者。</returns>
    </member>
    <member name="M:System.Data.Common.DbDataSourceEnumerator.#ctor">
      <summary>创建 <see cref="T:System.Data.Common.DbDataSourceEnumerator" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DbDataSourceEnumerator.GetDataSources">
      <summary>检索 <see cref="T:System.Data.DataTable" /> 包含强类型化此类的实例所表示的服务器的所有可见实例有关的信息。</summary>
      <returns>返回 <see cref="T:System.Data.DataTable" /> 包含关联的数据源的可见实例有关的信息。</returns>
    </member>
    <member name="M:System.Data.Common.DbEnumerator.#ctor(System.Data.Common.DbDataReader)">
      <summary>使用给定的数据读取器初始化 <see cref="T:System.Data.Common.DbEnumerator" /> 类的新实例。</summary>
      <param name="reader">要对其进行循环访问的 DataReader。</param>
    </member>
    <member name="M:System.Data.Common.DbEnumerator.#ctor(System.Data.Common.DbDataReader,System.Boolean)">
      <summary>使用指定的读取器初始化 <see cref="T:System.Data.Common.DbEnumerator" /> 类的新实例，并表示在循环访问读取器的数据后是否将其自动关闭。</summary>
      <param name="reader">要对其进行循环访问的 DataReader。</param>
      <param name="closeReader">若要在循环访问 DataReader 的数据后将其自动关闭，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader)">
      <summary>使用指定的 <see cref="T:System.Data.Common.DbEnumerator" /> 初始化 DataReader 类的新实例。</summary>
      <param name="reader">要通过其进行循环访问的 DataReader。</param>
    </member>
    <member name="M:System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader,System.Boolean)">
      <summary>使用指定的 DataReader 初始化 <see cref="T:System.Data.Common.DbEnumerator" /> 类的新实例，并指示在循环访问 DataReader 的数据后是否将其自动关闭。</summary>
      <param name="reader">要通过其进行循环访问的 DataReader。</param>
      <param name="closeReader">若要在循环访问 DataReader 的数据后将其自动关闭，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Data.Common.DbEnumerator.MoveNext">
      <summary>将枚举数推进到集合的下一个元素。</summary>
      <returns>如果枚举数已成功地推进到下一个元素，则为 true；如果枚举数传递到集合的末尾，则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">创建枚举器后，已修改该集合。</exception>
    </member>
    <member name="M:System.Data.Common.DbEnumerator.Reset">
      <summary>将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
      <exception cref="T:System.InvalidOperationException">创建枚举器后，已修改该集合。</exception>
    </member>
    <member name="M:System.Data.Common.DbException.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DbException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DbException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用指定的序列化信息和上下文初始化 <see cref="T:System.Data.Common.DbException" /> 类的新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它保存关于所引发异常的序列化对象数据。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。</param>
    </member>
    <member name="M:System.Data.Common.DbException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.Data.Common.DbException" /> 类的新实例。</summary>
      <param name="message">要显示此异常的消息。</param>
    </member>
    <member name="M:System.Data.Common.DbException.#ctor(System.String,System.Exception)">
      <summary>新实例初始化 <see cref="T:System.Data.Common.DbException" /> 使用指定的错误消息和对导致此异常的内部异常的引用。</summary>
      <param name="message">错误消息字符串。</param>
      <param name="innerException">内部异常引用。</param>
    </member>
    <member name="M:System.Data.Common.DbException.#ctor(System.String,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Data.Common.DbException" /> 使用指定的错误消息和错误代码的类。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="errorCode">异常的错误代码。</param>
    </member>
    <member name="M:System.Data.Common.DbParameter.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DbParameter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DbParameter.ResetDbType">
      <summary>重置 DbType 属性设置为其原始设置。</summary>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DbParameterCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Add(System.Object)">
      <summary>将指定的 <see cref="T:System.Data.Common.DbParameter" /> 对象添加到 <see cref="T:System.Data.Common.DbParameterCollection" /> 中。</summary>
      <param name="value">要添加到集合中的 <see cref="T:System.Data.Common.DbParameter" /> 的 <see cref="P:System.Data.Common.DbParameter.Value" />。</param>
      <returns>集合中的 <see cref="T:System.Data.Common.DbParameter" /> 对象的索引。</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.AddRange(System.Array)">
      <summary>将具有指定值的项的数组添加到 <see cref="T:System.Data.Common.DbParameterCollection" />。</summary>
      <param name="values">要添加到集合的 <see cref="T:System.Data.Common.DbParameter" /> 类型的值的数组。</param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Clear">
      <summary>将所有 <see cref="T:System.Data.Common.DbParameter" /> 值从 <see cref="T:System.Data.Common.DbParameterCollection" /> 中移除。</summary>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Contains(System.Object)">
      <summary>指示集合中是否包含具有指定 <see cref="P:System.Data.Common.DbParameter.Value" /> 的 <see cref="T:System.Data.Common.DbParameter" />。</summary>
      <param name="value">要在集合中查找的 <see cref="T:System.Data.Common.DbParameter" /> 的 <see cref="P:System.Data.Common.DbParameter.Value" />。</param>
      <returns>如果 <see cref="T:System.Data.Common.DbParameter" /> 位于集合中，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Contains(System.String)">
      <summary>指示具有指定名称的 <see cref="T:System.Data.Common.DbParameter" /> 是否存在于集合中。</summary>
      <param name="value">要在集合中查找的 <see cref="T:System.Data.Common.DbParameter" /> 的名称。</param>
      <returns>如果 <see cref="T:System.Data.Common.DbParameter" /> 位于集合中，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.CopyTo(System.Array,System.Int32)">
      <summary>将项的数组复制到从指定索引开始的集合。</summary>
      <param name="array">要复制到集合的项数组。</param>
      <param name="index">要复制项的集合中的索引。</param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.GetEnumerator">
      <summary>公开 <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> 方法，该方法支持 .NET Framework 数据提供程序对集合进行简单的迭代。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.GetParameter(System.Int32)">
      <summary>返回位于集合中指定索引处的 <see cref="T:System.Data.Common.DbParameter" /> 对象。</summary>
      <param name="index">集合中 <see cref="T:System.Data.Common.DbParameter" /> 的索引。</param>
      <returns>集合中指定索引处的 <see cref="T:System.Data.Common.DbParameter" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.GetParameter(System.String)">
      <summary>返回具有指定名称的 <see cref="T:System.Data.Common.DbParameter" /> 对象。</summary>
      <param name="parameterName">集合中 <see cref="T:System.Data.Common.DbParameter" /> 的名称。</param>
      <returns>具有指定名称的 <see cref="T:System.Data.Common.DbParameter" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.IndexOf(System.Object)">
      <summary>返回指定的 <see cref="T:System.Data.Common.DbParameter" /> 对象的索引。</summary>
      <param name="value">集合中的 <see cref="T:System.Data.Common.DbParameter" /> 对象。</param>
      <returns>指定的 <see cref="T:System.Data.Common.DbParameter" /> 对象的索引。</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.IndexOf(System.String)">
      <summary>返回具有指定名称的 <see cref="T:System.Data.Common.DbParameter" /> 对象的索引。</summary>
      <param name="parameterName">集合中 <see cref="T:System.Data.Common.DbParameter" /> 对象的名称。</param>
      <returns>具有指定名称的 <see cref="T:System.Data.Common.DbParameter" /> 对象的索引。</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Insert(System.Int32,System.Object)">
      <summary>将具有指定名称的 <see cref="T:System.Data.Common.DbParameter" /> 对象的指定索引插入指定索引处的集合中。</summary>
      <param name="index">插入 <see cref="T:System.Data.Common.DbParameter" /> 对象的索引位置。</param>
      <param name="value">要插入到集合中的 <see cref="T:System.Data.Common.DbParameter" /> 对象。</param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Remove(System.Object)">
      <summary>从集合中移除指定的 <see cref="T:System.Data.Common.DbParameter" /> 对象。</summary>
      <param name="value">要移除的 <see cref="T:System.Data.Common.DbParameter" /> 对象。</param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.RemoveAt(System.Int32)">
      <summary>从集合中删除位于指定位置的 <see cref="T:System.Data.Common.DbParameter" /> 对象。</summary>
      <param name="index">
        <see cref="T:System.Data.Common.DbParameter" /> 对象所在的索引。</param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.RemoveAt(System.String)">
      <summary>从集合中删除具有指定名称的 <see cref="T:System.Data.Common.DbParameter" /> 对象。</summary>
      <param name="parameterName">要删除的 <see cref="T:System.Data.Common.DbParameter" /> 对象的名称。</param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.SetParameter(System.Int32,System.Data.Common.DbParameter)">
      <summary>将指定索引处的 <see cref="T:System.Data.Common.DbParameter" /> 对象设置为新值。</summary>
      <param name="index">
        <see cref="T:System.Data.Common.DbParameter" /> 对象所在的索引。</param>
      <param name="value">新的 <see cref="T:System.Data.Common.DbParameter" /> 值。</param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.SetParameter(System.String,System.Data.Common.DbParameter)">
      <summary>将具有指定名称的 <see cref="T:System.Data.Common.DbParameter" /> 对象设置为新值。</summary>
      <param name="parameterName">集合中 <see cref="T:System.Data.Common.DbParameter" /> 对象的名称。</param>
      <param name="value">新的 <see cref="T:System.Data.Common.DbParameter" /> 值。</param>
    </member>
    <member name="M:System.Data.Common.DbProviderConfigurationHandler.#ctor">
      <summary>此类可由任何提供程序，用于支持特定于提供程序的配置节。</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderConfigurationHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
      <summary>创建一个新 <see cref="System.Collections.Specialized.NameValueCollection" /> 表达式。</summary>
      <param name="parent">此类型支持 .NET Framework 基础结构，不能在代码中直接使用。</param>
      <param name="configContext">此类型支持 .NET Framework 基础结构，不能在代码中直接使用。</param>
      <param name="section">此类型支持 .NET Framework 基础结构，不能在代码中直接使用。</param>
      <returns>新的表达式。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.GetFactory(System.Data.Common.DbConnection)">
      <summary>返回 <see cref="T:System.Data.Common.DbProviderFactory" /> 的一个实例。</summary>
      <param name="connection">使用的连接。</param>
      <returns>一个实例 <see cref="T:System.Data.Common.DbProviderFactory" /> 为指定的连接。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.GetFactory(System.Data.DataRow)">
      <summary>返回 <see cref="T:System.Data.Common.DbProviderFactory" /> 的一个实例。</summary>
      <param name="providerRow">
        <see cref="T:System.Data.DataRow" /> 包含提供程序的配置信息。</param>
      <returns>指定 <see cref="T:System.Data.Common.DbProviderFactory" /> 的 <see cref="T:System.Data.DataRow" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.GetFactory(System.String)">
      <summary>返回 <see cref="T:System.Data.Common.DbProviderFactory" /> 的一个实例。</summary>
      <param name="providerInvariantName">提供程序的固定名称。</param>
      <returns>指定提供程序名称的 <see cref="T:System.Data.Common.DbProviderFactory" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.GetFactoryClasses">
      <summary>返回一个 <see cref="T:System.Data.DataTable" />，其中包含有关实现 <see cref="T:System.Data.Common.DbProviderFactory" /> 的所有已安装提供程序的信息。</summary>
      <returns>返回一个 <see cref="T:System.Data.DataTable" />，它包含其中包含以下数据的 <see cref="T:System.Data.DataRow" /> 对象。列序号列名称描述0名称数据提供程序的可识别名称。1说明数据提供程序的可识别描述。2InvariantName可以以编程方式用于引用数据提供程序的名称。3AssemblyQualifiedName工厂类的完全限定名，它包含用于实例化该对象的足够的信息。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactoriesConfigurationHandler.#ctor">
      <summary>此类型支持 .NET Framework 基础结构，不能在代码中直接使用。</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderFactoriesConfigurationHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
      <summary>此类型支持 .NET Framework 基础结构，不能在代码中直接使用。</summary>
      <param name="parent">此类型支持 .NET Framework 基础结构，不能在代码中直接使用。</param>
      <param name="configContext">此类型支持 .NET Framework 基础结构，不能在代码中直接使用。</param>
      <param name="section">此类型支持 .NET Framework 基础结构，不能在代码中直接使用。</param>
      <returns>此类型支持 .NET Framework 基础结构，不能在代码中直接使用。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.#ctor">
      <summary>初始化 <see cref="T:System.Data.Common.DbProviderFactory" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateCommand">
      <summary>返回实现 <see cref="T:System.Data.Common.DbCommand" /> 类的提供程序类的一个新实例。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbCommand" /> 的新实例。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateCommandBuilder">
      <summary>返回实现 <see cref="T:System.Data.Common.DbCommandBuilder" /> 类的提供程序类的一个新实例。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbCommandBuilder" /> 的新实例。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateConnection">
      <summary>返回实现 <see cref="T:System.Data.Common.DbConnection" /> 类的提供程序类的一个新实例。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbConnection" /> 的新实例。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateConnectionStringBuilder">
      <summary>返回实现 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 类的提供程序类的一个新实例。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 的新实例。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateDataAdapter">
      <summary>返回实现 <see cref="T:System.Data.Common.DbDataAdapter" /> 类的提供程序类的一个新实例。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataAdapter" /> 的新实例。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateDataSourceEnumerator">
      <summary>返回实现 <see cref="T:System.Data.Common.DbDataSourceEnumerator" /> 类的提供程序类的一个新实例。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataSourceEnumerator" /> 的新实例。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateParameter">
      <summary>返回实现 <see cref="T:System.Data.Common.DbParameter" /> 类的提供程序类的一个新实例。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbParameter" /> 的新实例。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreatePermission(System.Security.Permissions.PermissionState)">
      <summary>返回实现 <see cref="T:System.Security.CodeAccessPermission" /> 类的提供程序版本的提供程序类的一个新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
      <returns>指定的 <see cref="T:System.Security.CodeAccessPermission" /> 的一个 <see cref="T:System.Security.Permissions.PermissionState" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderSpecificTypePropertyAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Data.Common.DbProviderSpecificTypePropertyAttribute" /> 类的新实例。</summary>
      <param name="isProviderSpecificTypeProperty">指定此属性是一个提供程序特定的属性。</param>
    </member>
    <member name="M:System.Data.Common.DbTransaction.#ctor">
      <summary>初始化新的 <see cref="T:System.Data.Common.DbTransaction" /> 对象。</summary>
    </member>
    <member name="M:System.Data.Common.DbTransaction.Commit">
      <summary>提交数据库事务。</summary>
    </member>
    <member name="M:System.Data.Common.DbTransaction.Dispose">
      <summary>释放 <see cref="T:System.Data.Common.DbTransaction" /> 使用的非托管资源。</summary>
    </member>
    <member name="M:System.Data.Common.DbTransaction.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Data.Common.DbTransaction" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">如果 true, ，此方法释放由任何托管对象持有的全部资源此 <see cref="T:System.Data.Common.DbTransaction" /> 引用。</param>
    </member>
    <member name="M:System.Data.Common.DbTransaction.Rollback">
      <summary>从挂起状态回滚事务。</summary>
    </member>
    <member name="M:System.Data.Common.RowUpdatedEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>初始化 <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> 类的新实例。</summary>
      <param name="dataRow">
        <see cref="T:System.Data.DataRow" /> 通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</param>
      <param name="command">
        <see cref="T:System.Data.IDbCommand" /> 时执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 调用。</param>
      <param name="statementType">执行 SQL 语句的类型。</param>
      <param name="tableMapping">
        <see cref="T:System.Data.Common.DataTableMapping" /> 通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</param>
    </member>
    <member name="M:System.Data.Common.RowUpdatedEventArgs.CopyToRows(System.Data.DataRow[])">
      <summary>将对已修改行的引用复制到所提供的数组。</summary>
      <param name="array">数组 <see cref="T:System.Data.DataRow" /> 将复制到。</param>
    </member>
    <member name="M:System.Data.Common.RowUpdatedEventArgs.CopyToRows(System.Data.DataRow[],System.Int32)">
      <summary>将对已修改行的引用复制到所提供的数组。</summary>
      <param name="array">数组 <see cref="T:System.Data.DataRow" /> 将复制到。</param>
      <param name="arrayIndex">中开始将复制到的数组的索引。</param>
    </member>
    <member name="M:System.Data.Common.RowUpdatingEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>初始化 <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> 类的新实例。</summary>
      <param name="dataRow">
        <see cref="T:System.Data.DataRow" /> 到 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</param>
      <param name="command">
        <see cref="T:System.Data.IDbCommand" /> 时要执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 调用。</param>
      <param name="statementType">要执行的 SQL 语句的类型。</param>
      <param name="tableMapping">
        <see cref="T:System.Data.Common.DataTableMapping" /> 通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</param>
    </member>
    <member name="M:System.Data.Constraint.#ctor">
      <summary>初始化 <see cref="T:System.Data.Constraint" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Constraint.CheckStateForProperty">
      <summary>获取 <see cref="T:System.Data.DataSet" /> 此约束所属。</summary>
    </member>
    <member name="M:System.Data.Constraint.SetDataSet(System.Data.DataSet)">
      <summary>设置约束的 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="dataSet">
        <see cref="T:System.Data.DataSet" /> 到将属于此约束。</param>
    </member>
    <member name="M:System.Data.Constraint.ToString">
      <summary>获取 <see cref="P:System.Data.Constraint.ConstraintName" />, ，如果有一个作为字符串。</summary>
      <returns>字符串值 <see cref="P:System.Data.Constraint.ConstraintName" />。</returns>
    </member>
    <member name="M:System.Data.ConstraintCollection.Add(System.Data.Constraint)">
      <summary>将指定的 <see cref="T:System.Data.Constraint" /> 对象添加到集合。</summary>
      <param name="constraint">要添加的 Constraint。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constraint" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">约束已属于该集合，或属于另一个集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合中已存在具有相同名称的约束。 （比较不区分大小写。）</exception>
    </member>
    <member name="M:System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn,System.Boolean)">
      <summary>构造一个新 <see cref="T:System.Data.UniqueConstraint" /> 具有指定名称 <see cref="T:System.Data.DataColumn" />, ，和值，该值指示列是否是主键，并将其添加到集合。</summary>
      <param name="name">UniqueConstraint 的名称。</param>
      <param name="column">
        <see cref="T:System.Data.DataColumn" /> 向应用约束。</param>
      <param name="primaryKey">指定列是否应将为主键。 如果 true, 的列将主键列。</param>
      <returns>一个新的 UniqueConstraint。</returns>
      <exception cref="T:System.ArgumentException">约束已属于此集合。- 或 - 约束所属的另一个集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合中已存在具有指定名称的约束。 （比较不区分大小写。）</exception>
    </member>
    <member name="M:System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn,System.Data.DataColumn)">
      <summary>构造一个新 <see cref="T:System.Data.ForeignKeyConstraint" /> 具有指定名称、 父列和子列并将约束添加到集合。</summary>
      <param name="name">
        <see cref="T:System.Data.ForeignKeyConstraint" /> 的名称。</param>
      <param name="primaryKeyColumn">Primary key 或父站点， <see cref="T:System.Data.DataColumn" />。</param>
      <param name="foreignKeyColumn">外键或子级 <see cref="T:System.Data.DataColumn" />。</param>
      <returns>一个新的 ForeignKeyConstraint。</returns>
    </member>
    <member name="M:System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn[],System.Boolean)">
      <summary>构造一个新 <see cref="T:System.Data.UniqueConstraint" /> 具有指定名称的数组 <see cref="T:System.Data.DataColumn" /> 对象和值，该值指示列是否是主键，并将其添加到集合。</summary>
      <param name="name">
        <see cref="T:System.Data.UniqueConstraint" /> 的名称。</param>
      <param name="columns">一个数组 <see cref="T:System.Data.DataColumn" /> 对象添加到其应用约束。</param>
      <param name="primaryKey">指定列是否应将为主键。 如果 true, 的列将主键列。</param>
      <returns>一个新的 UniqueConstraint。</returns>
      <exception cref="T:System.ArgumentException">约束已属于此集合。- 或 - 约束所属的另一个集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合中已存在具有指定名称的约束。 （比较不区分大小写。）</exception>
    </member>
    <member name="M:System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>构造一个新 <see cref="T:System.Data.ForeignKeyConstraint" />, ，与指定数组的父列和子列，并将约束添加到集合。</summary>
      <param name="name">
        <see cref="T:System.Data.ForeignKeyConstraint" /> 的名称。</param>
      <param name="primaryKeyColumns">一个数组 <see cref="T:System.Data.DataColumn" /> 是 primary key 或父站点，列的对象。</param>
      <param name="foreignKeyColumns">一个数组 <see cref="T:System.Data.DataColumn" /> 是外键或子列的对象。</param>
      <returns>一个新的 ForeignKeyConstraint。</returns>
    </member>
    <member name="M:System.Data.ConstraintCollection.AddRange(System.Data.Constraint[])">
      <summary>将指定的元素复制 <see cref="T:System.Data.ConstraintCollection" /> 数组转换为集合的末尾。</summary>
      <param name="constraints">一个数组 <see cref="T:System.Data.ConstraintCollection" /> 要添加到集合的对象。</param>
    </member>
    <member name="M:System.Data.ConstraintCollection.CanRemove(System.Data.Constraint)">
      <summary>指示是否 <see cref="T:System.Data.Constraint" /> 可以删除。</summary>
      <param name="constraint">
        <see cref="T:System.Data.Constraint" /> 要从集合中删除用于测试。</param>
      <returns>true 如果 <see cref="T:System.Data.Constraint" /> 可从集合中移除活动; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.ConstraintCollection.Clear">
      <summary>清除集合中的任何 <see cref="T:System.Data.Constraint" /> 对象。</summary>
    </member>
    <member name="M:System.Data.ConstraintCollection.Contains(System.String)">
      <summary>指示是否 <see cref="T:System.Data.Constraint" /> 集合中存在由名称指定的对象。</summary>
      <param name="name">
        <see cref="P:System.Data.Constraint.ConstraintName" /> 的约束。</param>
      <returns>true 如果集合包含指定的约束;否则为 false。</returns>
    </member>
    <member name="M:System.Data.ConstraintCollection.CopyTo(System.Data.Constraint[],System.Int32)">
      <summary>将集合对象复制到一维 <see cref="T:System.Array" /> 实例的指定索引处开始。</summary>
      <param name="array">一维 <see cref="T:System.Array" /> 从集合复制的值的目标。</param>
      <param name="index">插入操作开始处的数组的索引。</param>
    </member>
    <member name="M:System.Data.ConstraintCollection.IndexOf(System.Data.Constraint)">
      <summary>获取指定的索引 <see cref="T:System.Data.Constraint" />。</summary>
      <param name="constraint">要搜索的 <see cref="T:System.Data.Constraint" />。</param>
      <returns>从零开始的索引 <see cref="T:System.Data.Constraint" /> 知识库是否处于集合; 否则为-1。</returns>
    </member>
    <member name="M:System.Data.ConstraintCollection.IndexOf(System.String)">
      <summary>获取的索引 <see cref="T:System.Data.Constraint" /> 由名称指定。</summary>
      <param name="constraintName">
        <see cref="T:System.Data.Constraint" /> 的名称。</param>
      <returns>索引 <see cref="T:System.Data.Constraint" /> 知识库是否处于集合; 否则为-1。</returns>
    </member>
    <member name="M:System.Data.ConstraintCollection.Remove(System.Data.Constraint)">
      <summary>从集合中移除指定的 <see cref="T:System.Data.Constraint" />。</summary>
      <param name="constraint">要移除的 <see cref="T:System.Data.Constraint" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constraint" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">约束不属于该集合。</exception>
    </member>
    <member name="M:System.Data.ConstraintCollection.Remove(System.String)">
      <summary>删除 <see cref="T:System.Data.Constraint" /> 指定的名称从集合对象。</summary>
      <param name="name">要移除的 <see cref="T:System.Data.Constraint" /> 的名称。</param>
    </member>
    <member name="M:System.Data.ConstraintCollection.RemoveAt(System.Int32)">
      <summary>删除 <see cref="T:System.Data.Constraint" /> 集合中的指定索引处的对象。</summary>
      <param name="index">索引 <see cref="T:System.Data.Constraint" /> 中删除。</param>
      <exception cref="T:System.IndexOutOfRangeException">集合不具有在此索引的约束。</exception>
    </member>
    <member name="M:System.Data.ConstraintException.#ctor">
      <summary>初始化 <see cref="T:System.Data.ConstraintException" /> 类的新实例。 这是默认构造函数。</summary>
    </member>
    <member name="M:System.Data.ConstraintException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>新实例初始化 <see cref="T:System.Data.ConstraintException" /> 类使用指定的序列化和流上下文。</summary>
      <param name="info">序列化或反序列化对象所必需的数据。</param>
      <param name="context">源和目标的指定的序列化流的说明。</param>
    </member>
    <member name="M:System.Data.ConstraintException.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Data.ConstraintException" /> 类，具有指定的字符串。</summary>
      <param name="s">要在引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.ConstraintException.#ctor(System.String,System.Exception)">
      <summary>新实例初始化 <see cref="T:System.Data.ConstraintException" /> 类使用指定的字符串和内部异常。</summary>
      <param name="message">要在引发异常时显示的字符串。</param>
      <param name="innerException">获取导致当前异常的 Exception 实例。</param>
    </member>
    <member name="M:System.Data.DataColumn.#ctor">
      <summary>新实例初始化 <see cref="T:System.Data.DataColumn" /> 类作为字符串类型。</summary>
    </member>
    <member name="M:System.Data.DataColumn.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Data.DataColumn" /> 类作为类型为字符串，使用指定的列名称。</summary>
      <param name="columnName">一个表示要创建的列的名称的字符串。 如果设置为 null 或空字符串 ("")，添加到列集合时，将指定一个默认名称。</param>
    </member>
    <member name="M:System.Data.DataColumn.#ctor(System.String,System.Type)">
      <summary>新实例初始化 <see cref="T:System.Data.DataColumn" /> 类使用指定的列名称和数据类型。</summary>
      <param name="columnName">一个表示要创建的列的名称的字符串。 如果设置为 null 或空字符串 ("")，添加到列集合时，将指定一个默认名称。</param>
      <param name="dataType">支持 <see cref="P:System.Data.DataColumn.DataType" />。</param>
      <exception cref="T:System.ArgumentNullException">否 <paramref name="dataType" /> 指定。</exception>
    </member>
    <member name="M:System.Data.DataColumn.#ctor(System.String,System.Type,System.String)">
      <summary>新实例初始化 <see cref="T:System.Data.DataColumn" /> 类使用指定的名称、 数据类型和表达式。</summary>
      <param name="columnName">一个表示要创建的列的名称的字符串。 如果设置为 null 或空字符串 ("")，添加到列集合时，将指定一个默认名称。</param>
      <param name="dataType">支持 <see cref="P:System.Data.DataColumn.DataType" />。</param>
      <param name="expr">用来创建此列的表达式。 有关更多信息，请参见 <see cref="P:System.Data.DataColumn.Expression" /> 属性。</param>
      <exception cref="T:System.ArgumentNullException">否 <paramref name="dataType" /> 指定。</exception>
    </member>
    <member name="M:System.Data.DataColumn.#ctor(System.String,System.Type,System.String,System.Data.MappingType)">
      <summary>新实例初始化 <see cref="T:System.Data.DataColumn" /> 类使用指定的名称、 数据类型、 表达式和值，该值确定列是否是一个属性。</summary>
      <param name="columnName">一个表示要创建的列的名称的字符串。 如果设置为 null 或空字符串 ("")，添加到列集合时，将指定一个默认名称。</param>
      <param name="dataType">支持 <see cref="P:System.Data.DataColumn.DataType" />。</param>
      <param name="expr">用来创建此列的表达式。 有关更多信息，请参见 <see cref="P:System.Data.DataColumn.Expression" /> 属性。</param>
      <param name="type">
        <see cref="T:System.Data.MappingType" /> 值之一。</param>
      <exception cref="T:System.ArgumentNullException">否 <paramref name="dataType" /> 指定。</exception>
    </member>
    <member name="M:System.Data.DataColumn.CheckNotAllowNull">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
    </member>
    <member name="M:System.Data.DataColumn.CheckUnique">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
    </member>
    <member name="M:System.Data.DataColumn.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="pcevent">参数的引用。</param>
    </member>
    <member name="M:System.Data.DataColumn.RaisePropertyChanging(System.String)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="name">参数的引用。</param>
    </member>
    <member name="M:System.Data.DataColumn.SetOrdinal(System.Int32)">
      <summary>更改序号或位置 <see cref="T:System.Data.DataColumn" /> 到指定的序号或位置。</summary>
      <param name="ordinal">指定的序号。</param>
    </member>
    <member name="M:System.Data.DataColumn.ToString">
      <summary>获取 <see cref="P:System.Data.DataColumn.Expression" /> 列，如果存在。</summary>
      <returns>
        <see cref="P:System.Data.DataColumn.Expression" /> 值，此属性是否设置; 否则为 <see cref="P:System.Data.DataColumn.ColumnName" /> 属性。</returns>
    </member>
    <member name="M:System.Data.DataColumnChangeEventArgs.#ctor(System.Data.DataRow,System.Data.DataColumn,System.Object)">
      <summary>初始化 <see cref="T:System.Data.DataColumnChangeEventArgs" /> 类的新实例。</summary>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> 的不断变化的值的列。</param>
      <param name="column">
        <see cref="T:System.Data.DataColumn" /> 带有可变值。</param>
      <param name="value">新值。</param>
    </member>
    <member name="M:System.Data.DataColumnCollection.Add">
      <summary>创建并添加了 <see cref="T:System.Data.DataColumn" /> 对象传递给 <see cref="T:System.Data.DataColumnCollection" />。</summary>
      <returns>新创建的 <see cref="T:System.Data.DataColumn" />。</returns>
    </member>
    <member name="M:System.Data.DataColumnCollection.Add(System.Data.DataColumn)">
      <summary>创建并添加了指定 <see cref="T:System.Data.DataColumn" /> 对象传递给 <see cref="T:System.Data.DataColumnCollection" />。</summary>
      <param name="column">要添加的 <see cref="T:System.Data.DataColumn" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">该列已经属于此集合中，或另一个集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合中已存在具有指定名称的列。 （比较不区分大小写。）</exception>
      <exception cref="T:System.Data.InvalidExpressionException">该表达式无效。 请参阅 <see cref="P:System.Data.DataColumn.Expression" /> 有关如何创建表达式的详细信息的属性。</exception>
    </member>
    <member name="M:System.Data.DataColumnCollection.Add(System.String)">
      <summary>创建并添加了 <see cref="T:System.Data.DataColumn" /> 对象，它具有指定的名称与 <see cref="T:System.Data.DataColumnCollection" />。</summary>
      <param name="columnName">列的名称。</param>
      <returns>新创建的 <see cref="T:System.Data.DataColumn" />。</returns>
      <exception cref="T:System.Data.DuplicateNameException">集合中已存在具有指定名称的列。 （比较不区分大小写。）</exception>
    </member>
    <member name="M:System.Data.DataColumnCollection.Add(System.String,System.Type)">
      <summary>创建并添加了 <see cref="T:System.Data.DataColumn" /> 对象，它具有指定名称和类型转换为 <see cref="T:System.Data.DataColumnCollection" />。</summary>
      <param name="columnName">
        <see cref="P:System.Data.DataColumn.ColumnName" /> 要创建列时使用。</param>
      <param name="type">
        <see cref="P:System.Data.DataColumn.DataType" /> 的新列。</param>
      <returns>新创建的 <see cref="T:System.Data.DataColumn" />。</returns>
      <exception cref="T:System.Data.DuplicateNameException">集合中已存在具有指定名称的列。 （比较不区分大小写。）</exception>
      <exception cref="T:System.Data.InvalidExpressionException">该表达式无效。 请参阅 <see cref="P:System.Data.DataColumn.Expression" /> 有关如何创建表达式的详细信息的属性。</exception>
    </member>
    <member name="M:System.Data.DataColumnCollection.Add(System.String,System.Type,System.String)">
      <summary>创建并添加了 <see cref="T:System.Data.DataColumn" /> 对象，它具有指定的名称、 类型和表达式与 <see cref="T:System.Data.DataColumnCollection" />。</summary>
      <param name="columnName">要在创建列时使用的名称。</param>
      <param name="type">
        <see cref="P:System.Data.DataColumn.DataType" /> 的新列。</param>
      <param name="expression">要分配给该表达式 <see cref="P:System.Data.DataColumn.Expression" /> 属性。</param>
      <returns>新创建的 <see cref="T:System.Data.DataColumn" />。</returns>
      <exception cref="T:System.Data.DuplicateNameException">集合中已存在具有指定名称的列。 （比较不区分大小写。）</exception>
      <exception cref="T:System.Data.InvalidExpressionException">该表达式无效。 请参阅 <see cref="P:System.Data.DataColumn.Expression" /> 有关如何创建表达式的详细信息的属性。</exception>
    </member>
    <member name="M:System.Data.DataColumnCollection.AddRange(System.Data.DataColumn[])">
      <summary>将指定的元素复制 <see cref="T:System.Data.DataColumn" /> 数组转换为集合的末尾。</summary>
      <param name="columns">数组 <see cref="T:System.Data.DataColumn" /> 要添加到集合的对象。</param>
    </member>
    <member name="M:System.Data.DataColumnCollection.CanRemove(System.Data.DataColumn)">
      <summary>检查是否可以从集合中移除特定列。</summary>
      <param name="column">一个 <see cref="T:System.Data.DataColumn" /> 集合中。</param>
      <returns>true 如果可以删除了该列。false 如果，<paramref name="column" /> 参数为 null。列不属于此集合。列是关系的一部分。另一个列的表达式取决于此列。</returns>
    </member>
    <member name="M:System.Data.DataColumnCollection.Clear">
      <summary>清除集合中的任何列。</summary>
    </member>
    <member name="M:System.Data.DataColumnCollection.Contains(System.String)">
      <summary>检查集合是否包含具有指定名称的列。</summary>
      <param name="name">
        <see cref="P:System.Data.DataColumn.ColumnName" /> 要查找的列。</param>
      <returns>true 如果某一列存在具有此名称;否则为 false。</returns>
    </member>
    <member name="M:System.Data.DataColumnCollection.CopyTo(System.Data.DataColumn[],System.Int32)">
      <summary>将整个集合复制到现有的数组，该数组中指定索引处开始。</summary>
      <param name="array">一个数组 <see cref="T:System.Data.DataColumn" /> 集合复制到的对象。</param>
      <param name="index">从其开始的索引。</param>
    </member>
    <member name="M:System.Data.DataColumnCollection.IndexOf(System.Data.DataColumn)">
      <summary>获取由名称指定的列的索引。</summary>
      <param name="column">要返回的列的名称。</param>
      <returns>指定的列的索引 <paramref name="column" /> 是否找到; 否则为-1。</returns>
    </member>
    <member name="M:System.Data.DataColumnCollection.IndexOf(System.String)">
      <summary>获取与特定的名称 （名称不区分大小写） 的列的索引。</summary>
      <param name="columnName">要查找的列的名称。</param>
      <returns>具有指定的名称，则为-1 如果列不存在集合中的列的从零开始的索引。</returns>
    </member>
    <member name="M:System.Data.DataColumnCollection.Remove(System.Data.DataColumn)">
      <summary>从集合中移除指定的 <see cref="T:System.Data.DataColumn" /> 对象。</summary>
      <param name="column">要移除的 <see cref="T:System.Data.DataColumn" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">列不属于此集合。- 或 - 列是关系的一部分。- 或 - 另一个列的表达式取决于此列。</exception>
    </member>
    <member name="M:System.Data.DataColumnCollection.Remove(System.String)">
      <summary>删除 <see cref="T:System.Data.DataColumn" /> 具有指定的名称从集合对象。</summary>
      <param name="name">要删除的列的名称。</param>
      <exception cref="T:System.ArgumentException">集合没有具有指定名称的列。</exception>
    </member>
    <member name="M:System.Data.DataColumnCollection.RemoveAt(System.Int32)">
      <summary>从集合中移除指定索引处的列。</summary>
      <param name="index">若要删除的列的索引。</param>
      <exception cref="T:System.ArgumentException">集合不具有指定索引处的列。</exception>
    </member>
    <member name="M:System.Data.DataException.#ctor">
      <summary>初始化 <see cref="T:System.Data.DataException" /> 类的新实例。 这是默认构造函数。</summary>
    </member>
    <member name="M:System.Data.DataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用指定的序列化信息和上下文初始化 <see cref="T:System.Data.DataException" /> 类的新实例。</summary>
      <param name="info">序列化或反序列化对象所必需的数据。</param>
      <param name="context">源和目标的指定的序列化流的说明。</param>
    </member>
    <member name="M:System.Data.DataException.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Data.DataException" /> 类，具有指定的字符串。</summary>
      <param name="s">要在引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.DataException.#ctor(System.String,System.Exception)">
      <summary>新实例初始化 <see cref="T:System.Data.DataException" /> 使用指定的字符串和内部异常的类。</summary>
      <param name="s">要在引发异常时显示的字符串。</param>
      <param name="innerException">对内部异常的引用。</param>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn,System.Data.DataColumn)">
      <summary>新实例初始化 <see cref="T:System.Data.DataRelation" /> 类使用指定 <see cref="T:System.Data.DataRelation" /> 名称、 父级和子级 <see cref="T:System.Data.DataColumn" /> 对象。</summary>
      <param name="relationName">
        <see cref="T:System.Data.DataRelation" /> 的名称。 如果 null 或空字符串 ("")，所创建的对象添加到时，默认名称会得到 <see cref="T:System.Data.DataRelationCollection" />。</param>
      <param name="parentColumn">父 <see cref="T:System.Data.DataColumn" /> 关系中。</param>
      <param name="childColumn">子 <see cref="T:System.Data.DataColumn" /> 关系中。</param>
      <exception cref="T:System.ArgumentNullException">一个或两个 <see cref="T:System.Data.DataColumn" /> 对象包含 null。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">列具有不同的数据类型 - 或 - 表不属于同一个 <see cref="T:System.Data.DataSet" />。</exception>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn,System.Data.DataColumn,System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.Data.DataRelation" /> 类使用指定的名称、 父级和子级 <see cref="T:System.Data.DataColumn" /> 对象和一个值，该值指示是否创建约束。</summary>
      <param name="relationName">该关系的名称。 如果 null 或空字符串 ("")，所创建的对象添加到时，默认名称会得到 <see cref="T:System.Data.DataRelationCollection" />。</param>
      <param name="parentColumn">父 <see cref="T:System.Data.DataColumn" /> 关系中。</param>
      <param name="childColumn">子 <see cref="T:System.Data.DataColumn" /> 关系中。</param>
      <param name="createConstraints">一个值，该值指示是否要创建约束。true, 如果创建约束。 否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">一个或两个 <see cref="T:System.Data.DataColumn" /> 对象包含 null。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">列具有不同的数据类型 - 或 - 表不属于同一个 <see cref="T:System.Data.DataSet" />。</exception>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>新实例初始化 <see cref="T:System.Data.DataRelation" /> 类使用指定 <see cref="T:System.Data.DataRelation" /> 父级和子级的名称和匹配数组 <see cref="T:System.Data.DataColumn" /> 对象。</summary>
      <param name="relationName">该关系的名称。 如果 null 或空字符串 ("")，所创建的对象添加到时，默认名称会得到 <see cref="T:System.Data.DataRelationCollection" />。</param>
      <param name="parentColumns">数组的父 <see cref="T:System.Data.DataColumn" /> 对象。</param>
      <param name="childColumns">子数组 <see cref="T:System.Data.DataColumn" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">一个或两个 <see cref="T:System.Data.DataColumn" /> 对象包含 null。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">
        <see cref="T:System.Data.DataColumn" /> 对象具有不同的数据类型 - 或 - 不由同一个表中的不同列组成的一个或两个数组。- 或 - 表不属于同一个 <see cref="T:System.Data.DataSet" />。</exception>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn[],System.Data.DataColumn[],System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.Data.DataRelation" /> 类使用指定的名称、 父级和子级的匹配数组 <see cref="T:System.Data.DataColumn" /> 对象和值，该值指示是否创建约束。</summary>
      <param name="relationName">该关系的名称。 如果 null 或空字符串 ("")，所创建的对象添加到时，默认名称会得到 <see cref="T:System.Data.DataRelationCollection" />。</param>
      <param name="parentColumns">数组的父 <see cref="T:System.Data.DataColumn" /> 对象。</param>
      <param name="childColumns">子数组 <see cref="T:System.Data.DataColumn" /> 对象。</param>
      <param name="createConstraints">一个值，该值指示是否创建约束。true, 如果创建约束。 否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">一个或两个 <see cref="T:System.Data.DataColumn" /> 对象是 null。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">列具有不同的数据类型 - 或 - 表不属于同一个 <see cref="T:System.Data.DataSet" />。</exception>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.String,System.String,System.String,System.String,System.String[],System.String[],System.Boolean)">
      <summary>此构造函数用于在 Visual Studio 环境中的设计时支持。</summary>
      <param name="relationName">
        <see cref="T:System.Data.DataRelation" /> 的名称。 如果 null 或空字符串 ("")，所创建的对象添加到时，默认名称会得到 <see cref="T:System.Data.DataRelationCollection" />。</param>
      <param name="parentTableName">名称 <see cref="T:System.Data.DataTable" /> ，它是一种关系的父表。</param>
      <param name="parentTableNamespace">父表命名空间的名称。</param>
      <param name="childTableName">名称 <see cref="T:System.Data.DataTable" /> ，它是一种关系的子表。</param>
      <param name="childTableNamespace">子表命名空间的名称。</param>
      <param name="parentColumnNames">一个数组 <see cref="T:System.Data.DataColumn" /> 对象的父代中的名称 <see cref="T:System.Data.DataTable" /> 的关系。</param>
      <param name="childColumnNames">一个数组 <see cref="T:System.Data.DataColumn" /> 对象名称的子级 <see cref="T:System.Data.DataTable" /> 的关系。</param>
      <param name="nested">一个值，该值指示是否嵌套关系。</param>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.String,System.String,System.String[],System.String[],System.Boolean)">
      <summary>此构造函数用于在 Visual Studio 环境中的设计时支持。</summary>
      <param name="relationName">该关系的名称。 如果 null 或空字符串 ("")，所创建的对象添加到时，默认名称会得到 <see cref="T:System.Data.DataRelationCollection" />。</param>
      <param name="parentTableName">名称 <see cref="T:System.Data.DataTable" /> ，它是一种关系的父表。</param>
      <param name="childTableName">名称 <see cref="T:System.Data.DataTable" /> ，它是一种关系的子表。</param>
      <param name="parentColumnNames">一个数组 <see cref="T:System.Data.DataColumn" /> 对象的父代中的名称 <see cref="T:System.Data.DataTable" /> 的关系。</param>
      <param name="childColumnNames">一个数组 <see cref="T:System.Data.DataColumn" /> 对象名称的子级 <see cref="T:System.Data.DataTable" /> 的关系。</param>
      <param name="nested">一个值，该值指示是否嵌套关系。</param>
    </member>
    <member name="M:System.Data.DataRelation.CheckStateForProperty">
      <summary>此方法支持 .NET Framework 基础结构，但不适合直接在代码中使用。</summary>
      <exception cref="T:System.Data.DataException">父和子表属于不同 <see cref="T:System.Data.DataSet" /> 对象。- 或 - 父级和子级的一个或多个对 <see cref="T:System.Data.DataColumn" /> 对象具有不匹配的数据类型。- 或 - 父级和子级 <see cref="T:System.Data.DataColumn" /> 对象都是相同。</exception>
    </member>
    <member name="M:System.Data.DataRelation.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="pcevent">参数的引用。</param>
    </member>
    <member name="M:System.Data.DataRelation.RaisePropertyChanging(System.String)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="name">参数的引用。</param>
    </member>
    <member name="M:System.Data.DataRelation.ToString">
      <summary>获取 <see cref="P:System.Data.DataRelation.RelationName" />, ，如果存在。</summary>
      <returns>
        <see cref="P:System.Data.DataRelation.RelationName" /> 属性的值。</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.#ctor">
      <summary>初始化 <see cref="T:System.Data.DataRelationCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.Data.DataColumn,System.Data.DataColumn)">
      <summary>创建 <see cref="T:System.Data.DataRelation" /> 与指定的父和子列中，并将其添加到集合。</summary>
      <param name="parentColumn">关系的父列。</param>
      <param name="childColumn">关系的子列。</param>
      <returns>创建的关系。</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>创建 <see cref="T:System.Data.DataRelation" /> 使用指定的父和子列，并将其添加到集合。</summary>
      <param name="parentColumns">关系的父列。</param>
      <param name="childColumns">关系的子列。</param>
      <returns>创建的关系。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> 参数为 null 值。</exception>
      <exception cref="T:System.ArgumentException">关系已经属于此集合中，或属于另一个集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合中已存在具有相同名称的关系。 （比较不区分大小写。）</exception>
      <exception cref="T:System.Data.InvalidConstraintException">创建以来，该关系已进入无效状态。</exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.Data.DataRelation)">
      <summary>向 <see cref="T:System.Data.DataRelation" /> 中添加一个 <see cref="T:System.Data.DataRelationCollection" />。</summary>
      <param name="relation">要添加到集合中的 DataRelation。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> 参数为 null 值。</exception>
      <exception cref="T:System.ArgumentException">关系已经属于此集合中，或属于另一个集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合中已存在具有指定名称的关系。 （比较不区分大小写。）</exception>
      <exception cref="T:System.Data.InvalidConstraintException">创建以来，该关系已进入无效状态。</exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.String,System.Data.DataColumn,System.Data.DataColumn)">
      <summary>创建 <see cref="T:System.Data.DataRelation" /> 具有指定的名称和父级和子级的列，并将其添加到集合。</summary>
      <param name="name">该关系的名称。</param>
      <param name="parentColumn">关系的父列。</param>
      <param name="childColumn">关系的子列。</param>
      <returns>创建的关系。</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.String,System.Data.DataColumn,System.Data.DataColumn,System.Boolean)">
      <summary>创建 <see cref="T:System.Data.DataRelation" /> 具有指定名称、 父级和子列，具有可选约束的值根据 <paramref name="createConstraints" /> 参数，并将其添加到集合。</summary>
      <param name="name">该关系的名称。</param>
      <param name="parentColumn">关系的父列。</param>
      <param name="childColumn">关系的子列。</param>
      <param name="createConstraints">true 若要创建的约束;否则为 false。 (默认值是 true)。</param>
      <returns>创建的关系。</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.String,System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>创建 <see cref="T:System.Data.DataRelation" /> 具有指定的名称和数组的父和子列，并将其添加到集合。</summary>
      <param name="name">名称 DataRelation 来创建。</param>
      <param name="parentColumns">数组的父 <see cref="T:System.Data.DataColumn" /> 对象。</param>
      <param name="childColumns">子数组 DataColumn 对象。</param>
      <returns>创建的 DataRelation。</returns>
      <exception cref="T:System.ArgumentNullException">关系名称是一个 null 值。</exception>
      <exception cref="T:System.ArgumentException">关系已经属于此集合中，或属于另一个集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合中已存在具有相同名称的关系。 （比较不区分大小写。）</exception>
      <exception cref="T:System.Data.InvalidConstraintException">创建以来，该关系已进入无效状态。</exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.String,System.Data.DataColumn[],System.Data.DataColumn[],System.Boolean)">
      <summary>创建 <see cref="T:System.Data.DataRelation" /> 与指定的名称、 父级和子级列和值，该值指定是否创建一个约束的数组并将其添加到集合。</summary>
      <param name="name">名称 DataRelation 来创建。</param>
      <param name="parentColumns">数组的父 <see cref="T:System.Data.DataColumn" /> 对象。</param>
      <param name="childColumns">子数组 DataColumn 对象。</param>
      <param name="createConstraints">true 若要创建约束;否则为 false。</param>
      <returns>创建的关系。</returns>
      <exception cref="T:System.ArgumentNullException">关系名称是一个 null 值。</exception>
      <exception cref="T:System.ArgumentException">关系已经属于此集合中，或属于另一个集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合中已存在具有相同名称的关系。 （比较不区分大小写。）</exception>
      <exception cref="T:System.Data.InvalidConstraintException">创建以来，该关系已进入无效状态。</exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.AddCore(System.Data.DataRelation)">
      <summary>对表执行的验证。</summary>
      <param name="relation">要检查的关系。</param>
      <exception cref="T:System.ArgumentNullException">该关系为 null。</exception>
      <exception cref="T:System.ArgumentException">关系已经属于此集合中，或属于另一个集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合中已存在具有相同名称的关系。 （比较不区分大小写。）</exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.AddRange(System.Data.DataRelation[])">
      <summary>将指定的元素复制 <see cref="T:System.Data.DataRelation" /> 数组转换为集合的末尾。</summary>
      <param name="relations">数组 <see cref="T:System.Data.DataRelation" /> 要添加到集合的对象。</param>
    </member>
    <member name="M:System.Data.DataRelationCollection.CanRemove(System.Data.DataRelation)">
      <summary>验证是否指定 <see cref="T:System.Data.DataRelation" /> 可以从集合中移除。</summary>
      <param name="relation">要对其执行检查的关系。</param>
      <returns>true 如果 <see cref="T:System.Data.DataRelation" /> 可删除; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.Clear">
      <summary>清除集合的所有关系。</summary>
    </member>
    <member name="M:System.Data.DataRelationCollection.Contains(System.String)">
      <summary>验证是否 <see cref="T:System.Data.DataRelation" /> 集合中存在与特定的名称 （不区分大小写）。</summary>
      <param name="name">若要查找的关系的名称。</param>
      <returns>true, 如果存在具有指定名称的关系;否则为 false。</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.CopyTo(System.Data.DataRelation[],System.Int32)">
      <summary>将集合复制 <see cref="T:System.Data.DataRelation" /> 对象指定索引处开始。</summary>
      <param name="array">数组 <see cref="T:System.Data.DataRelation" /> 要将集合复制到的对象。</param>
      <param name="index">从其开始的索引。</param>
    </member>
    <member name="M:System.Data.DataRelationCollection.GetDataSet">
      <summary>此方法支持 .NET Framework 基础结构，但不适合直接在代码中使用。</summary>
      <returns>引用数据集。</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.IndexOf(System.Data.DataRelation)">
      <summary>获取指定的索引 <see cref="T:System.Data.DataRelation" /> 对象。</summary>
      <param name="relation">要搜索的关系。</param>
      <returns>从 0 开始的索引，该关系，则为-1 如果集合中找不到该关系。</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.IndexOf(System.String)">
      <summary>获取的索引 <see cref="T:System.Data.DataRelation" /> 由名称指定。</summary>
      <param name="relationName">若要查找的关系的名称。</param>
      <returns>具有指定的名称，则为-1 如果集合中不存在该关系的关系的从零开始的索引。</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.OnCollectionChanged(System.ComponentModel.CollectionChangeEventArgs)">
      <summary>引发 <see cref="E:System.Data.DataRelationCollection.CollectionChanged" /> 事件。</summary>
      <param name="ccevent">包含事件数据的 <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataRelationCollection.OnCollectionChanging(System.ComponentModel.CollectionChangeEventArgs)">
      <summary>引发 <see cref="E:System.Data.DataRelationCollection.CollectionChanged" /> 事件。</summary>
      <param name="ccevent">包含事件数据的 <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataRelationCollection.Remove(System.Data.DataRelation)">
      <summary>从集合中移除指定的关系。</summary>
      <param name="relation">要删除的关系。</param>
      <exception cref="T:System.ArgumentNullException">该关系是一个 null 值。</exception>
      <exception cref="T:System.ArgumentException">该关系不属于该集合。</exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.Remove(System.String)">
      <summary>从集合中移除具有指定名称的关系。</summary>
      <param name="name">要删除的关系的名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">集合没有具有指定名称的关系。</exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.RemoveAt(System.Int32)">
      <summary>从集合中移除指定索引处的关系。</summary>
      <param name="index">要删除的关系的索引。</param>
      <exception cref="T:System.ArgumentException">集合中指定索引处没有关系。</exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.RemoveCore(System.Data.DataRelation)">
      <summary>对指定会检验 <see cref="T:System.Data.DataRelation" /> 对象。</summary>
      <param name="relation">DataRelation 要验证对象。</param>
      <exception cref="T:System.ArgumentNullException">集合中指定索引处没有关系。</exception>
      <exception cref="T:System.ArgumentException">指定的关系不属于此集合中，或属于另一个集合。</exception>
    </member>
    <member name="M:System.Data.DataRow.#ctor(System.Data.DataRowBuilder)">
      <summary>初始化 DataRow 的新实例。 从生成器中构造行。 仅限内部使用。</summary>
      <param name="builder">生成器 </param>
    </member>
    <member name="M:System.Data.DataRow.AcceptChanges">
      <summary>提交自上次对该行进行的所有更改 <see cref="M:System.Data.DataRow.AcceptChanges" /> 调用。</summary>
      <exception cref="T:System.Data.RowNotInTableException">该行不属于表。</exception>
    </member>
    <member name="M:System.Data.DataRow.BeginEdit">
      <summary>在开始编辑操作 <see cref="T:System.Data.DataRow" /> 对象。</summary>
      <exception cref="T:System.Data.InRowChangingEventException">该方法调用内 <see cref="E:System.Data.DataTable.RowChanging" /> 事件。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">该方法是在已删除的行时调用。</exception>
    </member>
    <member name="M:System.Data.DataRow.CancelEdit">
      <summary>取消当前编辑的行上。</summary>
      <exception cref="T:System.Data.InRowChangingEventException">该方法调用内 <see cref="E:System.Data.DataTable.RowChanging" /> 事件。</exception>
    </member>
    <member name="M:System.Data.DataRow.ClearErrors">
      <summary>清除的行的错误。 这包括 <see cref="P:System.Data.DataRow.RowError" /> 并且错误设置有 <see cref="M:System.Data.DataRow.SetColumnError(System.Int32,System.String)" />。</summary>
    </member>
    <member name="M:System.Data.DataRow.Delete">
      <summary>删除 <see cref="T:System.Data.DataRow" />。</summary>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">
        <see cref="T:System.Data.DataRow" /> 被删除。</exception>
    </member>
    <member name="M:System.Data.DataRow.EndEdit">
      <summary>结束对行进行编辑。</summary>
      <exception cref="T:System.Data.InRowChangingEventException">该方法调用内 <see cref="E:System.Data.DataTable.RowChanging" /> 事件。</exception>
      <exception cref="T:System.Data.ConstraintException">编辑破坏了约束。</exception>
      <exception cref="T:System.Data.ReadOnlyException">行所属的表和编辑尝试更改只读列的值。</exception>
      <exception cref="T:System.Data.NoNullAllowedException">编辑尝试将 null 值放入某一列其中 <see cref="P:System.Data.DataColumn.AllowDBNull" /> 为 false。</exception>
    </member>
    <member name="M:System.Data.DataRow.GetChildRows(System.Data.DataRelation)">
      <summary>获取子项的这行 <see cref="T:System.Data.DataRow" /> 使用指定 <see cref="T:System.Data.DataRelation" />。</summary>
      <param name="relation">要使用的 <see cref="T:System.Data.DataRelation" />。</param>
      <returns>一个数组 <see cref="T:System.Data.DataRow" /> 对象或长度为零的数组。</returns>
      <exception cref="T:System.ArgumentException">关系和行不属于同一个表。</exception>
      <exception cref="T:System.ArgumentNullException">该关系是 null。</exception>
      <exception cref="T:System.Data.RowNotInTableException">该行不属于表。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">行不具有此版本的数据。</exception>
    </member>
    <member name="M:System.Data.DataRow.GetChildRows(System.Data.DataRelation,System.Data.DataRowVersion)">
      <summary>获取子项的行 <see cref="T:System.Data.DataRow" /> 使用指定 <see cref="T:System.Data.DataRelation" />, ，和 <see cref="T:System.Data.DataRowVersion" />。</summary>
      <param name="relation">要使用的 <see cref="T:System.Data.DataRelation" />。</param>
      <param name="version">其中一个 <see cref="T:System.Data.DataRowVersion" /> 指定要获取的数据的版本值。 可能值为 Default、Original、Current 和 Proposed。</param>
      <returns>一个 <see cref="T:System.Data.DataRow" /> 对象数组。</returns>
      <exception cref="T:System.ArgumentException">关系和行不属于同一个表。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> 为 null。</exception>
      <exception cref="T:System.Data.RowNotInTableException">该行不属于表。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">行不具有所请求 <see cref="T:System.Data.DataRowVersion" />。</exception>
    </member>
    <member name="M:System.Data.DataRow.GetChildRows(System.String)">
      <summary>获取子项的行 <see cref="T:System.Data.DataRow" /> 使用指定 <see cref="P:System.Data.DataRelation.RelationName" /> 的 <see cref="T:System.Data.DataRelation" />。</summary>
      <param name="relationName">
        <see cref="P:System.Data.DataRelation.RelationName" /> 的 <see cref="T:System.Data.DataRelation" /> 使用。</param>
      <returns>一个数组 <see cref="T:System.Data.DataRow" /> 对象或长度为零的数组。</returns>
      <exception cref="T:System.ArgumentException">关系和行不属于同一个表。</exception>
      <exception cref="T:System.Data.RowNotInTableException">该行不属于表。</exception>
    </member>
    <member name="M:System.Data.DataRow.GetChildRows(System.String,System.Data.DataRowVersion)">
      <summary>获取子项的行 <see cref="T:System.Data.DataRow" /> 使用指定 <see cref="P:System.Data.DataRelation.RelationName" /> 的 <see cref="T:System.Data.DataRelation" />, ，和 <see cref="T:System.Data.DataRowVersion" />。</summary>
      <param name="relationName">
        <see cref="P:System.Data.DataRelation.RelationName" /> 的 <see cref="T:System.Data.DataRelation" /> 使用。</param>
      <param name="version">其中一个 <see cref="T:System.Data.DataRowVersion" /> 指定要获取的数据的版本值。 可能值为 Default、Original、Current 和 Proposed。</param>
      <returns>一个数组 <see cref="T:System.Data.DataRow" /> 对象或长度为零的数组。</returns>
      <exception cref="T:System.ArgumentException">关系和行不属于同一个表。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> 为 null。</exception>
      <exception cref="T:System.Data.RowNotInTableException">该行不属于表。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">行不具有所请求 <see cref="T:System.Data.DataRowVersion" />。</exception>
    </member>
    <member name="M:System.Data.DataRow.GetColumnError(System.Data.DataColumn)">
      <summary>获取指定的错误说明 <see cref="T:System.Data.DataColumn" />。</summary>
      <param name="column">
        <see cref="T:System.Data.DataColumn" />。</param>
      <returns>错误说明的文本。</returns>
    </member>
    <member name="M:System.Data.DataRow.GetColumnError(System.Int32)">
      <summary>获取指定索引的列的错误说明。</summary>
      <param name="columnIndex">列的从零开始的索引。</param>
      <returns>错误说明的文本。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="columnIndex" /> 参数不在范围。</exception>
    </member>
    <member name="M:System.Data.DataRow.GetColumnError(System.String)">
      <summary>获取按名称指定的列中的错误说明。</summary>
      <param name="columnName">列的名称。</param>
      <returns>错误说明的文本。</returns>
    </member>
    <member name="M:System.Data.DataRow.GetColumnsInError">
      <summary>获取具有错误的列的数组。</summary>
      <returns>一个数组 <see cref="T:System.Data.DataColumn" /> 包含错误的对象。</returns>
    </member>
    <member name="M:System.Data.DataRow.GetParentRow(System.Data.DataRelation)">
      <summary>获取的父行 <see cref="T:System.Data.DataRow" /> 使用指定 <see cref="T:System.Data.DataRelation" />。</summary>
      <param name="relation">要使用的 <see cref="T:System.Data.DataRelation" />。</param>
      <returns>父 <see cref="T:System.Data.DataRow" /> 当前行的行。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> 不属于 <see cref="T:System.Data.DataTable" />。该行是 null。</exception>
      <exception cref="T:System.Data.DataException">子行有多个父级。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">该行不属于的子表的 <see cref="T:System.Data.DataRelation" /> 对象。</exception>
      <exception cref="T:System.Data.RowNotInTableException">该行不属于表。</exception>
    </member>
    <member name="M:System.Data.DataRow.GetParentRow(System.Data.DataRelation,System.Data.DataRowVersion)">
      <summary>获取的父行 <see cref="T:System.Data.DataRow" /> 使用指定 <see cref="T:System.Data.DataRelation" />, ，和 <see cref="T:System.Data.DataRowVersion" />。</summary>
      <param name="relation">要使用的 <see cref="T:System.Data.DataRelation" />。</param>
      <param name="version">其中一个 <see cref="T:System.Data.DataRowVersion" /> 指定要获取的数据的版本值。</param>
      <returns>父 <see cref="T:System.Data.DataRow" /> 当前行的行。</returns>
      <exception cref="T:System.ArgumentNullException">该行是 null。<paramref name="relation" /> 不属于此表的父关系。</exception>
      <exception cref="T:System.Data.DataException">子行有多个父级。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">关系的子表不是行所属的表。</exception>
      <exception cref="T:System.Data.RowNotInTableException">该行不属于表。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">行不具有此版本的数据。</exception>
    </member>
    <member name="M:System.Data.DataRow.GetParentRow(System.String)">
      <summary>获取的父行 <see cref="T:System.Data.DataRow" /> 使用指定 <see cref="P:System.Data.DataRelation.RelationName" /> 的 <see cref="T:System.Data.DataRelation" />。</summary>
      <param name="relationName">
        <see cref="P:System.Data.DataRelation.RelationName" /> 的 <see cref="T:System.Data.DataRelation" />。</param>
      <returns>父 <see cref="T:System.Data.DataRow" /> 当前行的行。</returns>
      <exception cref="T:System.ArgumentException">关系和行不属于同一个表。</exception>
      <exception cref="T:System.Data.DataException">子行有多个父级。</exception>
      <exception cref="T:System.Data.RowNotInTableException">该行不属于表。</exception>
    </member>
    <member name="M:System.Data.DataRow.GetParentRow(System.String,System.Data.DataRowVersion)">
      <summary>获取的父行 <see cref="T:System.Data.DataRow" /> 使用指定 <see cref="P:System.Data.DataRelation.RelationName" /> 的 <see cref="T:System.Data.DataRelation" />, ，和 <see cref="T:System.Data.DataRowVersion" />。</summary>
      <param name="relationName">
        <see cref="P:System.Data.DataRelation.RelationName" /> 的 <see cref="T:System.Data.DataRelation" />。</param>
      <param name="version">
        <see cref="T:System.Data.DataRowVersion" /> 值之一。</param>
      <returns>父 <see cref="T:System.Data.DataRow" /> 当前行的行。</returns>
      <exception cref="T:System.ArgumentException">关系和行不属于同一个表。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> 为 null。</exception>
      <exception cref="T:System.Data.DataException">子行有多个父级。</exception>
      <exception cref="T:System.Data.RowNotInTableException">该行不属于表。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">行不具有所请求 <see cref="T:System.Data.DataRowVersion" />。</exception>
    </member>
    <member name="M:System.Data.DataRow.GetParentRows(System.Data.DataRelation)">
      <summary>获取父行的 <see cref="T:System.Data.DataRow" /> 使用指定 <see cref="T:System.Data.DataRelation" />。</summary>
      <param name="relation">要使用的 <see cref="T:System.Data.DataRelation" />。</param>
      <returns>一个数组 <see cref="T:System.Data.DataRow" /> 对象或长度为零的数组。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.DataRelation" /> 不属于此行 <see cref="T:System.Data.DataSet" />。</exception>
      <exception cref="T:System.ArgumentNullException">该行是 null。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">关系的子表不是行所属的表。</exception>
      <exception cref="T:System.Data.RowNotInTableException">该行不属于 <see cref="T:System.Data.DataTable" />。</exception>
    </member>
    <member name="M:System.Data.DataRow.GetParentRows(System.Data.DataRelation,System.Data.DataRowVersion)">
      <summary>获取父行的 <see cref="T:System.Data.DataRow" /> 使用指定 <see cref="T:System.Data.DataRelation" />, ，和 <see cref="T:System.Data.DataRowVersion" />。</summary>
      <param name="relation">要使用的 <see cref="T:System.Data.DataRelation" />。</param>
      <param name="version">其中一个 <see cref="T:System.Data.DataRowVersion" /> 指定要获取的数据的版本值。</param>
      <returns>一个数组 <see cref="T:System.Data.DataRow" /> 对象或长度为零的数组。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.DataRelation" /> 不属于此行 <see cref="T:System.Data.DataSet" />。</exception>
      <exception cref="T:System.ArgumentNullException">该行是 null。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">关系的子表不是行所属的表。</exception>
      <exception cref="T:System.Data.RowNotInTableException">该行不属于 <see cref="T:System.Data.DataTable" />。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">行不具有所请求 <see cref="T:System.Data.DataRowVersion" />。</exception>
    </member>
    <member name="M:System.Data.DataRow.GetParentRows(System.String)">
      <summary>获取父行的 <see cref="T:System.Data.DataRow" /> 使用指定 <see cref="P:System.Data.DataRelation.RelationName" /> 的 <see cref="T:System.Data.DataRelation" />。</summary>
      <param name="relationName">
        <see cref="P:System.Data.DataRelation.RelationName" /> 的 <see cref="T:System.Data.DataRelation" />。</param>
      <returns>一个数组 <see cref="T:System.Data.DataRow" /> 对象或长度为零的数组。</returns>
      <exception cref="T:System.ArgumentException">关系和行不属于同一个表。</exception>
      <exception cref="T:System.Data.RowNotInTableException">该行不属于表。</exception>
    </member>
    <member name="M:System.Data.DataRow.GetParentRows(System.String,System.Data.DataRowVersion)">
      <summary>获取父行的 <see cref="T:System.Data.DataRow" /> 使用指定 <see cref="P:System.Data.DataRelation.RelationName" /> 的 <see cref="T:System.Data.DataRelation" />, ，和 <see cref="T:System.Data.DataRowVersion" />。</summary>
      <param name="relationName">
        <see cref="P:System.Data.DataRelation.RelationName" /> 的 <see cref="T:System.Data.DataRelation" />。</param>
      <param name="version">其中一个 <see cref="T:System.Data.DataRowVersion" /> 指定要获取的数据的版本值。 可能值为 Default、Original、Current 和 Proposed。</param>
      <returns>一个数组 <see cref="T:System.Data.DataRow" /> 对象或长度为零的数组。</returns>
      <exception cref="T:System.ArgumentException">关系和行不属于同一个表。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> 为 null。</exception>
      <exception cref="T:System.Data.RowNotInTableException">该行不属于表。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">行不具有所请求 <see cref="T:System.Data.DataRowVersion" />。</exception>
    </member>
    <member name="M:System.Data.DataRow.HasVersion(System.Data.DataRowVersion)">
      <summary>获取一个值，该值指示是否存在指定的版本。</summary>
      <param name="version">其中一个 <see cref="T:System.Data.DataRowVersion" /> 值，该值指定行的行版本。</param>
      <returns>true 如果存在版本;否则为 false。</returns>
    </member>
    <member name="M:System.Data.DataRow.IsNull(System.Data.DataColumn)">
      <summary>获取一个值，该值指示是否指定 <see cref="T:System.Data.DataColumn" /> 包含一个 null 值。</summary>
      <param name="column">
        <see cref="T:System.Data.DataColumn" />。</param>
      <returns>true 如果该列包含 null 值;否则为 false。</returns>
    </member>
    <member name="M:System.Data.DataRow.IsNull(System.Data.DataColumn,System.Data.DataRowVersion)">
      <summary>获取一个值，该值指示是否指定 <see cref="T:System.Data.DataColumn" /> 和 <see cref="T:System.Data.DataRowVersion" /> 包含一个 null 值。</summary>
      <param name="column">
        <see cref="T:System.Data.DataColumn" />。</param>
      <param name="version">其中一个 <see cref="T:System.Data.DataRowVersion" /> 值，该值指定行的行版本。 可能值为 Default、Original、Current 和 Proposed。</param>
      <returns>true 如果该列包含 null 值;否则为 false。</returns>
    </member>
    <member name="M:System.Data.DataRow.IsNull(System.Int32)">
      <summary>获取一个值，该值指示是否指定索引处的列包含 null 值。</summary>
      <param name="columnIndex">列的从零开始的索引。</param>
      <returns>true 如果该列包含 null 值;否则为 false。</returns>
    </member>
    <member name="M:System.Data.DataRow.IsNull(System.String)">
      <summary>获取一个值，该值指示指定的列是否包含 null 值。</summary>
      <param name="columnName">列的名称。</param>
      <returns>true 如果该列包含 null 值;否则为 false。</returns>
    </member>
    <member name="M:System.Data.DataRow.RejectChanges">
      <summary>拒绝以来对该行进行的所有更改 <see cref="M:System.Data.DataRow.AcceptChanges" /> 上一次调用。</summary>
      <exception cref="T:System.Data.RowNotInTableException">该行不属于表。</exception>
    </member>
    <member name="M:System.Data.DataRow.SetAdded">
      <summary>更改 <see cref="P:System.Data.DataRow.Rowstate" /> 的 <see cref="T:System.Data.DataRow" /> 到 Added。</summary>
    </member>
    <member name="M:System.Data.DataRow.SetColumnError(System.Data.DataColumn,System.String)">
      <summary>设置为指定的列的错误说明 <see cref="T:System.Data.DataColumn" />。</summary>
      <param name="column">
        <see cref="T:System.Data.DataColumn" /> 若要设置的错误说明。</param>
      <param name="error">错误说明。</param>
    </member>
    <member name="M:System.Data.DataRow.SetColumnError(System.Int32,System.String)">
      <summary>设置由索引指定的列的错误说明。</summary>
      <param name="columnIndex">列的从零开始的索引。</param>
      <param name="error">错误说明。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="columnIndex" /> 参数不在范围内 </exception>
    </member>
    <member name="M:System.Data.DataRow.SetColumnError(System.String,System.String)">
      <summary>设置由名称指定的列的错误说明。</summary>
      <param name="columnName">列的名称。</param>
      <param name="error">错误说明。</param>
    </member>
    <member name="M:System.Data.DataRow.SetModified">
      <summary>更改 <see cref="P:System.Data.DataRow.Rowstate" /> 的 <see cref="T:System.Data.DataRow" /> 到 Modified。</summary>
    </member>
    <member name="M:System.Data.DataRow.SetNull(System.Data.DataColumn)">
      <summary>设置指定的值 <see cref="T:System.Data.DataColumn" /> 为空值。</summary>
      <param name="column">
        <see cref="T:System.Data.DataColumn" />。</param>
    </member>
    <member name="M:System.Data.DataRow.SetParentRow(System.Data.DataRow)">
      <summary>设置的父行 <see cref="T:System.Data.DataRow" /> 用新指定 <see cref="T:System.Data.DataRow" />。</summary>
      <param name="parentRow">新的父级 <see cref="T:System.Data.DataRow" />。</param>
    </member>
    <member name="M:System.Data.DataRow.SetParentRow(System.Data.DataRow,System.Data.DataRelation)">
      <summary>设置的父行 <see cref="T:System.Data.DataRow" /> 用新指定 <see cref="T:System.Data.DataRow" /> 和 <see cref="T:System.Data.DataRelation" />。</summary>
      <param name="parentRow">新的父级 <see cref="T:System.Data.DataRow" />。</param>
      <param name="relation">该关系 <see cref="T:System.Data.DataRelation" /> 使用。</param>
      <exception cref="T:System.Data.RowNotInTableException">这些行之一不属于表 </exception>
      <exception cref="T:System.ArgumentNullException">这些行之一是 null。</exception>
      <exception cref="T:System.ArgumentException">该关系不属于 <see cref="T:System.Data.DataRelationCollection" /> 的 <see cref="T:System.Data.DataSet" /> 对象。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">该关系的子级 <see cref="T:System.Data.DataTable" /> 不是该行所属的表。</exception>
    </member>
    <member name="M:System.Data.DataRowChangeEventArgs.#ctor(System.Data.DataRow,System.Data.DataRowAction)">
      <summary>初始化 <see cref="T:System.Data.DataRowChangeEventArgs" /> 类的新实例。</summary>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> 后某项操作是出现。</param>
      <param name="action">
        <see cref="T:System.Data.DataRowAction" /> 值之一。</param>
    </member>
    <member name="M:System.Data.DataRowCollection.Add(System.Data.DataRow)">
      <summary>添加指定 <see cref="T:System.Data.DataRow" /> 到 <see cref="T:System.Data.DataRowCollection" /> 对象。</summary>
      <param name="row">要添加的 <see cref="T:System.Data.DataRow" />。</param>
      <exception cref="T:System.ArgumentNullException">该行是 null。</exception>
      <exception cref="T:System.ArgumentException">行属于另一个表，或已属于此表。</exception>
      <exception cref="T:System.Data.ConstraintException">添加使约束无效。</exception>
      <exception cref="T:System.Data.NoNullAllowedException">添加尝试将空值放入 <see cref="T:System.Data.DataColumn" /> 其中 <see cref="P:System.Data.DataColumn.AllowDBNull" /> 为 false。</exception>
    </member>
    <member name="M:System.Data.DataRowCollection.Add(System.Object[])">
      <summary>创建使用指定的值的行，并将其添加到 <see cref="T:System.Data.DataRowCollection" />。</summary>
      <param name="values">用于创建新行的值的数组。</param>
      <returns>无。</returns>
      <exception cref="T:System.ArgumentException">该数组将大于表中的列数。</exception>
      <exception cref="T:System.InvalidCastException">一个值与其各自的列类型不匹配。</exception>
      <exception cref="T:System.Data.ConstraintException">添加行使约束无效。</exception>
      <exception cref="T:System.Data.NoNullAllowedException">尝试放入列中的 null 其中 <see cref="P:System.Data.DataColumn.AllowDBNull" /> 为 false。</exception>
    </member>
    <member name="M:System.Data.DataRowCollection.Clear">
      <summary>清除集合中的所有行。</summary>
      <exception cref="T:System.Data.InvalidConstraintException">一个 <see cref="T:System.Data.ForeignKeyConstraint" /> 上强制 <see cref="T:System.Data.DataRowCollection" />。</exception>
    </member>
    <member name="M:System.Data.DataRowCollection.Contains(System.Object)">
      <summary>获取一个值，该值指示集合中的任意行的主键是否包含指定的值。</summary>
      <param name="key">若要测试的主键的值。</param>
      <returns>true 如果集合包含 <see cref="T:System.Data.DataRow" /> 用指定的主键值; 否则为 false。</returns>
      <exception cref="T:System.Data.MissingPrimaryKeyException">表没有主键。</exception>
    </member>
    <member name="M:System.Data.DataRowCollection.Contains(System.Object[])">
      <summary>获取一个值，该值指示集合中的任意行的主键列是否包含指定对象数组中的值。</summary>
      <param name="keys">要测试的主键值的数组。</param>
      <returns>true 如果 <see cref="T:System.Data.DataRowCollection" /> 包含 <see cref="T:System.Data.DataRow" /> 具有指定键的值; 否则为 false。</returns>
      <exception cref="T:System.Data.MissingPrimaryKeyException">表没有主键。</exception>
    </member>
    <member name="M:System.Data.DataRowCollection.CopyTo(System.Array,System.Int32)">
      <summary>将所有复制 <see cref="T:System.Data.DataRow" /> 到给定的目标数组索引处开始的给定数组集合中的对象。</summary>
      <param name="ar">一维数组，它是从 DataRowCollection 中复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="index">数组中开始复制的位置的索引（从零开始）。</param>
    </member>
    <member name="M:System.Data.DataRowCollection.CopyTo(System.Data.DataRow[],System.Int32)">
      <summary>将所有复制 <see cref="T:System.Data.DataRow" /> 到给定的目标数组索引处开始的给定数组集合中的对象。</summary>
      <param name="array">一维数组，它是从 DataRowCollection 中复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="index">数组中开始复制的位置的索引（从零开始）。</param>
    </member>
    <member name="M:System.Data.DataRowCollection.Find(System.Object)">
      <summary>获取指定的主键值的行。</summary>
      <param name="key">主键值 <see cref="T:System.Data.DataRow" /> 来查找。</param>
      <returns>一个 <see cref="T:System.Data.DataRow" /> ，其中包含指定的主键值; 否则为空值中不存在的主键值如果 <see cref="T:System.Data.DataRowCollection" />。</returns>
      <exception cref="T:System.Data.MissingPrimaryKeyException">表没有主键。</exception>
    </member>
    <member name="M:System.Data.DataRowCollection.Find(System.Object[])">
      <summary>获取包含指定的主键值的行。</summary>
      <param name="keys">若要查找的主键值的数组。 数组的类型是 Object。</param>
      <returns>一个 <see cref="T:System.Data.DataRow" /> 指定包含主键值的对象; 否则为空值中不存在的主键值如果 <see cref="T:System.Data.DataRowCollection" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">没有行对应于该索引值。</exception>
      <exception cref="T:System.Data.MissingPrimaryKeyException">表没有主键。</exception>
    </member>
    <member name="M:System.Data.DataRowCollection.GetEnumerator">
      <summary>获取 <see cref="T:System.Collections.IEnumerator" /> 为此集合。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 为此集合。</returns>
    </member>
    <member name="M:System.Data.DataRowCollection.IndexOf(System.Data.DataRow)">
      <summary>获取指定的索引 <see cref="T:System.Data.DataRow" /> 对象。</summary>
      <param name="row">要搜索的 DataRow。</param>
      <returns>该行，则为-1 如果集合中找不到行的从零开始的索引。</returns>
    </member>
    <member name="M:System.Data.DataRowCollection.InsertAt(System.Data.DataRow,System.Int32)">
      <summary>将新行插入到集合中的指定位置处。</summary>
      <param name="row">要添加的 <see cref="T:System.Data.DataRow" />。</param>
      <param name="pos">要添加集合中的 （从零开始） 位置 DataRow。</param>
    </member>
    <member name="M:System.Data.DataRowCollection.Remove(System.Data.DataRow)">
      <summary>从集合中移除指定的 <see cref="T:System.Data.DataRow" />。</summary>
      <param name="row">要移除的 <see cref="T:System.Data.DataRow" />。</param>
    </member>
    <member name="M:System.Data.DataRowCollection.RemoveAt(System.Int32)">
      <summary>从集合中移除指定索引处的行。</summary>
      <param name="index">若要删除的行的索引。</param>
    </member>
    <member name="M:System.Data.DataRowView.BeginEdit">
      <summary>开始编辑过程。</summary>
    </member>
    <member name="M:System.Data.DataRowView.CancelEdit">
      <summary>取消编辑过程。</summary>
    </member>
    <member name="M:System.Data.DataRowView.CreateChildView(System.Data.DataRelation)">
      <summary>返回 <see cref="T:System.Data.DataView" /> 为子 <see cref="T:System.Data.DataTable" /> 与指定的子 <see cref="T:System.Data.DataRelation" />。</summary>
      <param name="relation">
        <see cref="T:System.Data.DataRelation" /> 对象。</param>
      <returns>
        <see cref="T:System.Data.DataView" /> 为子 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.DataRowView.CreateChildView(System.Data.DataRelation,System.Boolean)">
      <summary>返回 <see cref="T:System.Data.DataView" /> 为子 <see cref="T:System.Data.DataTable" /> 具有指定 <see cref="T:System.Data.DataRelation" /> 和父...</summary>
      <param name="relation">
        <see cref="T:System.Data.DataRelation" /> 对象。</param>
      <param name="followParent">父对象。</param>
      <returns>一个 <see cref="T:System.Data.DataView" /> 为子 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.DataRowView.CreateChildView(System.String)">
      <summary>返回 <see cref="T:System.Data.DataView" /> 为子 <see cref="T:System.Data.DataTable" /> 与指定的子 <see cref="T:System.Data.DataRelation" /> 名称。</summary>
      <param name="relationName">一个字符串，包含 <see cref="T:System.Data.DataRelation" /> 名称。</param>
      <returns>
        <see cref="T:System.Data.DataView" /> 为子 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.DataRowView.CreateChildView(System.String,System.Boolean)">
      <summary>返回 <see cref="T:System.Data.DataView" /> 为子 <see cref="T:System.Data.DataTable" /> 具有指定 <see cref="T:System.Data.DataRelation" /> 的名称和父级。</summary>
      <param name="relationName">一个字符串，包含 <see cref="T:System.Data.DataRelation" /> 名称。</param>
      <param name="followParent">父级</param>
      <returns>
        <see cref="T:System.Data.DataView" /> 为子 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.DataRowView.Delete">
      <summary>删除行。</summary>
    </member>
    <member name="M:System.Data.DataRowView.EndEdit">
      <summary>将更改提交给基础 <see cref="T:System.Data.DataRow" /> 并结束编辑会话与开始 <see cref="M:System.Data.DataRowView.BeginEdit" />。  使用 <see cref="M:System.Data.DataRowView.CancelEdit" /> 放弃所做的更改 <see cref="T:System.Data.DataRow" />。</summary>
    </member>
    <member name="M:System.Data.DataRowView.Equals(System.Object)">
      <summary>获取一个值，该值指示是否当前 <see cref="T:System.Data.DataRowView" /> 等同于指定的对象。</summary>
      <param name="other">
        <see cref="T:System.Object" /> 进行比较。</param>
      <returns>true 如果 <paramref name="object" /> 是 <see cref="T:System.Data.DataRowView" /> ，并返回与当前位于同一行 <see cref="T:System.Data.DataRowView" />; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.DataRowView.GetHashCode">
      <summary>返回的哈希代码 <see cref="T:System.Data.DataRow" /> 对象。</summary>
      <returns>32 位有符号的整数哈希代码 1，它表示布尔 true 如果此实例的值不为零; 否则整数零，它表示一个布尔值 false。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
      <summary>返回此组件实例的自定义属性的集合。</summary>
      <returns>包含此对象的属性的 AttributeCollection。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
      <summary>返回此组件实例的类名称。</summary>
      <returns>组件的此实例的类名。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
      <summary>返回某个组件的此实例的名称。</summary>
      <returns>组件的此实例的名称。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
      <summary>返回此组件实例的类型转换器。</summary>
      <returns>组件的此实例的的类型转换器。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
      <summary>返回某个组件的此实例的默认事件。</summary>
      <returns>组件的此实例的的默认事件。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
      <summary>返回此组件实例的默认属性。</summary>
      <returns>组件的此实例的的默认属性。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
      <summary>返回指定类型的此实例的一个组件的编辑器。</summary>
      <param name="editorBaseType">一个 <see cref="T:System.Type" /> ，它表示此对象的编辑器。</param>
      <returns>
        <see cref="T:System.Object" /> 是此对象的编辑器的指定类型或 null 如果找不到编辑器中。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
      <summary>返回此组件实例的事件。</summary>
      <returns>组件的此实例的事件。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
      <summary>返回此实例具有指定特性的组件的事件。</summary>
      <param name="attributes">属性</param>
      <returns>组件的此实例的事件。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
      <summary>返回此组件实例的属性。</summary>
      <returns>组件的此实例的属性。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
      <summary>返回具有指定特性的组件的此实例的属性。</summary>
      <param name="attributes">属性。</param>
      <returns>组件的此实例的属性。</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>返回一个对象，该对象包含指定的属性描述符所描述的属性。</summary>
      <param name="pd">一个 <see cref="T:System.ComponentModel.PropertyDescriptor" />，表示要查找其所有者的属性。</param>
      <returns>一个 <see cref="T:System.Object" />，表示指定属性的所有者。</returns>
    </member>
    <member name="M:System.Data.DataSet.#ctor">
      <summary>初始化 <see cref="T:System.Data.DataSet" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>新实例初始化 <see cref="T:System.Data.DataSet" /> 类，该类具有给定序列化信息和上下文。</summary>
      <param name="info">要序列化或反序列化对象所需的数据。</param>
      <param name="context">源和给定序列化流的目标。</param>
    </member>
    <member name="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)">
      <summary>初始化 <see cref="T:System.Data.DataSet" /> 类的新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象。</param>
      <param name="ConstructSchema">布尔值。</param>
    </member>
    <member name="M:System.Data.DataSet.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Data.DataSet" /> 具有给定名称的类。</summary>
      <param name="dataSetName">
        <see cref="T:System.Data.DataSet" /> 的名称。</param>
    </member>
    <member name="M:System.Data.DataSet.AcceptChanges">
      <summary>对此所做的所有更改都提交 <see cref="T:System.Data.DataSet" /> 加载以来或自上次以来 <see cref="M:System.Data.DataSet.AcceptChanges" /> 调用。</summary>
    </member>
    <member name="M:System.Data.DataSet.BeginInit">
      <summary>开始初始化在窗体上使用或由另一个组件使用的 <see cref="T:System.Data.DataSet" />。 初始化发生在运行时。</summary>
    </member>
    <member name="M:System.Data.DataSet.Clear">
      <summary>清除 <see cref="T:System.Data.DataSet" /> 的所有表中删除所有行的任何数据。</summary>
    </member>
    <member name="M:System.Data.DataSet.Clone">
      <summary>将复制的结构 <see cref="T:System.Data.DataSet" />, ，包括所有 <see cref="T:System.Data.DataTable" /> 架构、 关系和约束。 不复制任何数据。</summary>
      <returns>一个新 <see cref="T:System.Data.DataSet" /> 具有相同的架构与当前 <see cref="T:System.Data.DataSet" />, ，但是不包含任何数据。</returns>
    </member>
    <member name="M:System.Data.DataSet.Copy">
      <summary>将结构和数据复制此 <see cref="T:System.Data.DataSet" />。</summary>
      <returns>一个新 <see cref="T:System.Data.DataSet" /> 具有相同的结构 （表架构、 关系和约束） 和数据格式设置为这 <see cref="T:System.Data.DataSet" />。如果已创建这些类的子类，该副本也将属于相同的子类。</returns>
    </member>
    <member name="M:System.Data.DataSet.CreateDataReader">
      <summary>返回 <see cref="T:System.Data.DataTableReader" /> 带有每个设置的一个结果 <see cref="T:System.Data.DataTable" />, ，请在表中出现在相同序列 <see cref="P:System.Data.DataSet.Tables" /> 集合。</summary>
      <returns>一个 <see cref="T:System.Data.DataTableReader" /> 包含一个或多个结果集，对应于 <see cref="T:System.Data.DataTable" /> 源中包含的实例 <see cref="T:System.Data.DataSet" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.CreateDataReader(System.Data.DataTable[])">
      <summary>返回 <see cref="T:System.Data.DataTableReader" /> 带有每个设置的一个结果 <see cref="T:System.Data.DataTable" />。</summary>
      <param name="dataTables">要在中返回 DataTables 提供结果的顺序的数组集 <see cref="T:System.Data.DataTableReader" />。</param>
      <returns>一个 <see cref="T:System.Data.DataTableReader" /> 包含一个或多个结果集，对应于 <see cref="T:System.Data.DataTable" /> 源中包含的实例 <see cref="T:System.Data.DataSet" />。 返回的结果集是按指定顺序 <paramref name="dataTables" /> 参数。</returns>
    </member>
    <member name="M:System.Data.DataSet.DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>确定 <see cref="P:System.Data.DataSet.SchemaSerializationMode" /> 为 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> ， DataSet的受保护构造函数 <see cref="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> 使用远程处理方案中的反序列化期间调用。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> ， DataSet的受保护构造函数 <see cref="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> 使用远程处理方案中的反序列化期间调用。</param>
      <returns>
        <see cref="T:System.Data.SchemaSerializationMode" /> 枚举，该值指示是否已从负载中忽略架构信息。</returns>
    </member>
    <member name="M:System.Data.DataSet.DetermineSchemaSerializationMode(System.Xml.XmlReader)">
      <summary>确定 <see cref="P:System.Data.DataSet.SchemaSerializationMode" /> 为 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> 反序列化时传递的实例 <see cref="T:System.Data.DataSet" />。</param>
      <returns>
        <see cref="T:System.Data.SchemaSerializationMode" /> 枚举，该值指示是否已从负载中忽略架构信息。</returns>
    </member>
    <member name="M:System.Data.DataSet.EndInit">
      <summary>结束在窗体上使用或由另一个组件使用的 <see cref="T:System.Data.DataSet" /> 的初始化。 初始化发生在运行时。</summary>
    </member>
    <member name="M:System.Data.DataSet.GetChanges">
      <summary>获得一份 <see cref="T:System.Data.DataSet" /> 包含自加载后，或自从对它所做的所有更改 <see cref="M:System.Data.DataSet.AcceptChanges" /> 上一次调用。</summary>
      <returns>一份从此更改 <see cref="T:System.Data.DataSet" /> ，可能会有合并回使用在其上及更高版本所执行的操作 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" />。 如果找到任何更改的行，该方法返回 null。</returns>
    </member>
    <member name="M:System.Data.DataSet.GetChanges(System.Data.DataRowState)">
      <summary>获得一份 <see cref="T:System.Data.DataSet" /> 包含自上次加载或自从对其进行的所有更改 <see cref="M:System.Data.DataSet.AcceptChanges" /> 被调用，通过筛选出 <see cref="T:System.Data.DataRowState" />。</summary>
      <param name="rowStates">
        <see cref="T:System.Data.DataRowState" /> 值之一。</param>
      <returns>筛选的副本 <see cref="T:System.Data.DataSet" /> ，可能会有合并回使用它，并随后所执行的操作 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" />。 如果所需的任何行 <see cref="T:System.Data.DataRowState" /> 找到，则此方法返回 null。</returns>
    </member>
    <member name="M:System.Data.DataSet.GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)">
      <summary>获得一份 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 为数据集。</summary>
      <param name="schemaSet">指定的架构集中。</param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的副本。</returns>
    </member>
    <member name="M:System.Data.DataSet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化所需的数据填充序列化信息对象 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="info">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它保存与 <see cref="T:System.Data.DataSet" /> 关联的序列化数据。</param>
      <param name="context">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含与 <see cref="T:System.Data.DataSet" /> 关联的序列化流的源和目标。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Data.DataSet.GetSchemaSerializable">
      <summary>返回一个可序列化 <see cref="T:System.Xml.Schema.XMLSchema" /> 实例。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XMLSchema" /> 实例。</returns>
    </member>
    <member name="M:System.Data.DataSet.GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>反序列化的二进制文件或 XML 流中的表数据。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例。</param>
      <param name="context">流上下文。</param>
    </member>
    <member name="M:System.Data.DataSet.GetXml">
      <summary>返回的 XML 表示形式中存储的数据 <see cref="T:System.Data.DataSet" />。</summary>
      <returns>一个字符串，它表示形式中存储的数据 <see cref="T:System.Data.DataSet" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.GetXmlSchema">
      <summary>返回的 XML 表示形式中存储的数据的 XML 架构 <see cref="T:System.Data.DataSet" />。</summary>
      <returns>字符串，它 XML 架构的 XML 表示形式中存储的数据 <see cref="T:System.Data.DataSet" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.HasChanges">
      <summary>获取一个值，该值指示是否 <see cref="T:System.Data.DataSet" /> 已经更改，包括新的、 已删除，或已修改的行。</summary>
      <returns>true 如果 <see cref="T:System.Data.DataSet" /> 已更改; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.DataSet.HasChanges(System.Data.DataRowState)">
      <summary>获取一个值，该值指示是否 <see cref="T:System.Data.DataSet" /> 已经更改，包括新的、 已删除，或已修改的行，通过筛选 <see cref="T:System.Data.DataRowState" />。</summary>
      <param name="rowStates">
        <see cref="T:System.Data.DataRowState" /> 值之一。</param>
      <returns>true 如果 <see cref="T:System.Data.DataSet" /> 已更改; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.DataSet.InferXmlSchema(System.IO.Stream,System.String[])">
      <summary>将 XML 架构应用从指定 <see cref="T:System.IO.Stream" /> 到 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="stream">Stream 从中读取该架构。</param>
      <param name="nsArray">要从架构推断中排除的命名空间统一资源标识符 (URI) 字符串的数组。</param>
    </member>
    <member name="M:System.Data.DataSet.InferXmlSchema(System.IO.TextReader,System.String[])">
      <summary>将 XML 架构应用从指定 <see cref="T:System.IO.TextReader" /> 到 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="reader">TextReader 从中读取该架构。</param>
      <param name="nsArray">要从架构推断中排除的命名空间统一资源标识符 (URI) 字符串的数组。</param>
    </member>
    <member name="M:System.Data.DataSet.InferXmlSchema(System.String,System.String[])">
      <summary>将 XML 架构应用从指定文件 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="fileName">从中读取该架构 （包括路径） 的文件的名称。</param>
      <param name="nsArray">要从架构推断中排除的命名空间统一资源标识符 (URI) 字符串的数组。</param>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> 未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />。</exception>
    </member>
    <member name="M:System.Data.DataSet.InferXmlSchema(System.Xml.XmlReader,System.String[])">
      <summary>将 XML 架构应用从指定 <see cref="T:System.Xml.XmlReader" /> 到 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="reader">XMLReader 从中读取该架构。</param>
      <param name="nsArray">要从架构推断中排除的命名空间统一资源标识符 (URI) 字符串的数组。</param>
    </member>
    <member name="M:System.Data.DataSet.InitializeDerivedDataSet">
      <summary>反序列化的所有表数据从二进制文件或 XML 流的数据集。</summary>
    </member>
    <member name="M:System.Data.DataSet.IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>序列化表示形式的格式将检查 DataSet。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象。</param>
      <returns>true 如果指定 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 表示 DataSet 以二进制格式，序列化 false 否则为。</returns>
    </member>
    <member name="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])">
      <summary>填充 <see cref="T:System.Data.DataSet" /> 使用所提供的数据源中的值 <see cref="T:System.Data.IDataReader" />, ，使用数组 <see cref="T:System.Data.DataTable" /> 实例，以提供架构和命名空间的信息。</summary>
      <param name="reader">
        <see cref="T:System.Data.IDataReader" /> ，它提供一个或多个结果集。</param>
      <param name="loadOption">取值范围为 <see cref="T:System.Data.LoadOption" /> 枚举，指示如何中的现有行 <see cref="T:System.Data.DataTable" /> 实例内 <see cref="T:System.Data.DataSet" /> 组合在一起共享相同的主键的传入行。</param>
      <param name="tables">一个数组 <see cref="T:System.Data.DataTable" /> 情况下的，从其 <see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])" /> 方法检索名称和命名空间的信息。 每个表必须是属于 <see cref="T:System.Data.DataTableCollection" /> 包含由此 <see cref="T:System.Data.DataSet" />。</param>
    </member>
    <member name="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])">
      <summary>填充 <see cref="T:System.Data.DataSet" /> 使用所提供的数据源中的值 <see cref="T:System.Data.IDataReader" />, ，使用数组 <see cref="T:System.Data.DataTable" /> 实例，以提供架构和命名空间的信息。</summary>
      <param name="reader">
        <see cref="T:System.Data.IDataReader" /> ，它提供一个或多个结果集。</param>
      <param name="loadOption">取值范围为 <see cref="T:System.Data.LoadOption" /> 枚举，指示如何中的现有行 <see cref="T:System.Data.DataTable" /> 实例内 <see cref="T:System.Data.DataSet" /> 组合在一起共享相同的主键的传入行。</param>
      <param name="errorHandler">一个 <see cref="T:System.Data.FillErrorEventHandler" /> 加载数据时出错时要调用委托。</param>
      <param name="tables">一个数组 <see cref="T:System.Data.DataTable" /> 情况下的，从其 <see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])" /> 方法检索名称和命名空间的信息。</param>
    </member>
    <member name="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])">
      <summary>填充 <see cref="T:System.Data.DataSet" /> 使用所提供的数据源中的值 <see cref="T:System.Data.IDataReader" />, ，使用一个字符串数组提供中的表名称，从而 DataSet。</summary>
      <param name="reader">
        <see cref="T:System.Data.IDataReader" /> ，它提供一个或多个结果集。</param>
      <param name="loadOption">取值范围为 <see cref="T:System.Data.LoadOption" /> 枚举，指示如何中的现有行 <see cref="T:System.Data.DataTable" /> 实例内 DataSet 组合在一起共享相同的主键的传入行。</param>
      <param name="tables">一个字符串，从该数组 Load 方法检索表名称信息。</param>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataRow[])">
      <summary>数组合并 <see cref="T:System.Data.DataRow" /> 对象发送到当前 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="rows">数组 DataRow 对象合并到 DataSet。</param>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)">
      <summary>数组合并 <see cref="T:System.Data.DataRow" /> 对象发送到当前 <see cref="T:System.Data.DataSet" />, 、 保留或放弃更改 DataSet 并处理根据给定的参数不兼容的架构。</summary>
      <param name="rows">数组 <see cref="T:System.Data.DataRow" /> 对象合并到 DataSet。</param>
      <param name="preserveChanges">true 若要保留中的更改 DataSet; 否则为 false。</param>
      <param name="missingSchemaAction">
        <see cref="T:System.Data.MissingSchemaAction" /> 值之一。</param>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataSet)">
      <summary>合并指定 <see cref="T:System.Data.DataSet" /> 到当前及其架构 DataSet。</summary>
      <param name="dataSet">DataSet 将合并其数据和架构。</param>
      <exception cref="T:System.Data.ConstraintException">不能启用一个或多个约束。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataSet" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean)">
      <summary>合并指定 <see cref="T:System.Data.DataSet" /> 到当前及其架构 DataSet, 、 保留或放弃这中的任何更改 DataSet 根据给定的参数。</summary>
      <param name="dataSet">DataSet 将合并其数据和架构。</param>
      <param name="preserveChanges">true 若要保留在当前更改 DataSet; 否则为 false。</param>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)">
      <summary>合并指定 <see cref="T:System.Data.DataSet" /> 且其架构与当前 DataSet, 、 保留或放弃更改在当前 DataSet 并处理根据给定的参数不兼容的架构。</summary>
      <param name="dataSet">DataSet 将合并其数据和架构。</param>
      <param name="preserveChanges">true 若要保留在当前更改 DataSet; 否则为 false。</param>
      <param name="missingSchemaAction">
        <see cref="T:System.Data.MissingSchemaAction" /> 值之一。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataSet" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataTable)">
      <summary>合并指定 <see cref="T:System.Data.DataTable" /> 到当前及其架构 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="table">
        <see cref="T:System.Data.DataTable" /> 将合并其数据和架构。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="table" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
      <summary>合并指定 <see cref="T:System.Data.DataTable" /> 到当前及其架构 DataSet, 、 保留或放弃更改 DataSet 并处理根据给定的参数不兼容的架构。</summary>
      <param name="table">DataTable 将合并其数据和架构。</param>
      <param name="preserveChanges">
        <see cref="T:System.Data.MissingSchemaAction" /> 值之一。</param>
      <param name="missingSchemaAction">true 若要保留中的更改 DataSet; 否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataSet" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>引发 <see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /> 事件。</summary>
      <param name="pcevent">包含事件数据的 <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataSet.OnRemoveRelation(System.Data.DataRelation)">
      <summary>发生时 <see cref="T:System.Data.DataRelation" /> 从中删除对象 <see cref="T:System.Data.DataTable" />。</summary>
      <param name="relation">
        <see cref="T:System.Data.DataRelation" /> 被删除。</param>
    </member>
    <member name="M:System.Data.DataSet.OnRemoveTable(System.Data.DataTable)">
      <summary>发生时 <see cref="T:System.Data.DataTable" /> 也会从 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="table">
        <see cref="T:System.Data.DataTable" /> 被删除。</param>
    </member>
    <member name="M:System.Data.DataSet.RaisePropertyChanging(System.String)">
      <summary>将通知发送指定 <see cref="T:System.Data.DataSet" /> 即将更改的属性。</summary>
      <param name="name">将要更改的属性的名称。</param>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.IO.Stream)">
      <summary>将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" /> 使用指定 <see cref="T:System.IO.Stream" />。</summary>
      <param name="stream">一个对象，派生自 <see cref="T:System.IO.Stream" />。</param>
      <returns>
        <see cref="T:System.Data.XmlReadMode" /> 用于读取数据。</returns>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.IO.Stream,System.Data.XmlReadMode)">
      <summary>将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" /> 使用指定 <see cref="T:System.IO.Stream" /> 和 <see cref="T:System.Data.XmlReadMode" />。</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" /> 从中进行读取。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlReadMode" /> 值之一。</param>
      <returns>XmlReadMode 用于读取数据。</returns>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.IO.TextReader)">
      <summary>将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" /> 使用指定 <see cref="T:System.IO.TextReader" />。</summary>
      <param name="reader">TextReader 从中进行读取的架构和数据。</param>
      <returns>
        <see cref="T:System.Data.XmlReadMode" /> 用于读取数据。</returns>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.IO.TextReader,System.Data.XmlReadMode)">
      <summary>将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" /> 使用指定 <see cref="T:System.IO.TextReader" /> 和 <see cref="T:System.Data.XmlReadMode" />。</summary>
      <param name="reader">
        <see cref="T:System.IO.TextReader" /> 从中进行读取。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlReadMode" /> 值之一。</param>
      <returns>XmlReadMode 用于读取数据。</returns>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.String)">
      <summary>将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" /> 使用指定的文件。</summary>
      <param name="fileName">从中进行读取文件名 （包括路径）。</param>
      <returns>XmlReadMode 用于读取数据。</returns>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> 未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />。</exception>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.String,System.Data.XmlReadMode)">
      <summary>将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" /> 使用指定的文件和 <see cref="T:System.Data.XmlReadMode" />。</summary>
      <param name="fileName">从中进行读取文件名 （包括路径）。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlReadMode" /> 值之一。</param>
      <returns>XmlReadMode 用于读取数据。</returns>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> 未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />。</exception>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader)">
      <summary>将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" /> 使用指定 <see cref="T:System.Xml.XmlReader" />。</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> 从中进行读取。</param>
      <returns>XmlReadMode 用于读取数据。</returns>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)">
      <summary>将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" /> 使用指定 <see cref="T:System.Xml.XmlReader" /> 和 <see cref="T:System.Data.XmlReadMode" />。</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> 从中进行读取。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlReadMode" /> 值之一。</param>
      <returns>XmlReadMode 用于读取数据。</returns>
    </member>
    <member name="M:System.Data.DataSet.ReadXmlSchema(System.IO.Stream)">
      <summary>从指定读取的 XML 架构 <see cref="T:System.IO.Stream" /> 到 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" /> 从中进行读取。</param>
    </member>
    <member name="M:System.Data.DataSet.ReadXmlSchema(System.IO.TextReader)">
      <summary>从指定读取的 XML 架构 <see cref="T:System.IO.TextReader" /> 到 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="reader">
        <see cref="T:System.IO.TextReader" /> 从中进行读取。</param>
    </member>
    <member name="M:System.Data.DataSet.ReadXmlSchema(System.String)">
      <summary>从到指定的文件中读取 XML 架构 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="fileName">该文件的文件名 （包括路径） 从中进行读取。</param>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> 未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />。</exception>
    </member>
    <member name="M:System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)">
      <summary>从指定读取的 XML 架构 <see cref="T:System.Xml.XmlReader" /> 到 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> 从中进行读取。</param>
    </member>
    <member name="M:System.Data.DataSet.ReadXmlSerializable(System.Xml.XmlReader)">
      <summary>将忽略属性，并返回一个空数据集。</summary>
      <param name="reader">指定的 XML 读取器。</param>
    </member>
    <member name="M:System.Data.DataSet.RejectChanges">
      <summary>回滚对所做的所有更改 <see cref="T:System.Data.DataSet" /> 创建以来，它，或自从上次 <see cref="M:System.Data.DataSet.AcceptChanges" /> 调用。</summary>
    </member>
    <member name="M:System.Data.DataSet.Reset">
      <summary>清除所有表并删除所有关系、 外部约束和表从 <see cref="T:System.Data.DataSet" />。 子类应重写 <see cref="M:System.Data.DataSet.Reset" /> 还原 <see cref="T:System.Data.DataSet" /> 到其原始状态。</summary>
    </member>
    <member name="M:System.Data.DataSet.ShouldSerializeRelations">
      <summary>获取一个值，该值指示是否 <see cref="P:System.Data.DataSet.Relations" /> 应保持。</summary>
      <returns>true 如果已从其默认设置; 更改了属性值否则为 false。</returns>
    </member>
    <member name="M:System.Data.DataSet.ShouldSerializeTables">
      <summary>获取一个值，该值指示是否 <see cref="P:System.Data.DataSet.Tables" /> 应保持。</summary>
      <returns>true 如果已从其默认设置; 更改了属性值否则为 false。</returns>
    </member>
    <member name="M:System.Data.DataSet.System#ComponentModel#IListSource#GetList">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.IListSource.GetList" />。</summary>
      <returns>有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.IListSource.GetList" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />。</summary>
      <returns>有关此成员的说明，请参阅 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />。</returns>
    </member>
    <member name="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />。</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.IO.Stream)">
      <summary>当前数据写入 <see cref="T:System.Data.DataSet" /> 使用指定 <see cref="T:System.IO.Stream" />。</summary>
      <param name="stream">一个 <see cref="T:System.IO.Stream" /> 用来写入到的文件对象。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)">
      <summary>将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataSet" /> 使用指定 <see cref="T:System.IO.Stream" /> 和 <see cref="T:System.Data.XmlWriteMode" />。 编写该架构，请设置的值为 <paramref name="mode" /> 参数 WriteSchema。</summary>
      <param name="stream">一个 <see cref="T:System.IO.Stream" /> 用来写入到的文件对象。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.IO.TextWriter)">
      <summary>当前数据写入 <see cref="T:System.Data.DataSet" /> 使用指定 <see cref="T:System.IO.TextWriter" />。</summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> 要写入的对象。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)">
      <summary>将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataSet" /> 使用指定 <see cref="T:System.IO.TextWriter" /> 和 <see cref="T:System.Data.XmlWriteMode" />。 编写该架构，请设置的值为 <paramref name="mode" /> 参数 WriteSchema。</summary>
      <param name="writer">一个 <see cref="T:System.IO.TextWriter" /> 用来写入的文档对象。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.String)">
      <summary>当前数据写入 <see cref="T:System.Data.DataSet" /> 写入指定的文件。</summary>
      <param name="fileName">该文件的文件名 （包括路径） 向其写入。</param>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> 未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />。</exception>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.String,System.Data.XmlWriteMode)">
      <summary>将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataSet" /> 写入指定的文件使用指定 <see cref="T:System.Data.XmlWriteMode" />。 编写该架构，请设置的值为 <paramref name="mode" /> 参数 WriteSchema。</summary>
      <param name="fileName">该文件的文件名 （包括路径） 向其写入。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。</param>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> 未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />。</exception>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.Xml.XmlWriter)">
      <summary>当前数据写入 <see cref="T:System.Data.DataSet" /> 到指定 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> 用其进行写。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)">
      <summary>将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataSet" /> 使用指定 <see cref="T:System.Xml.XmlWriter" /> 和 <see cref="T:System.Data.XmlWriteMode" />。 编写该架构，请设置的值为 <paramref name="mode" /> 参数 WriteSchema。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> 用其进行写。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream)">
      <summary>写入 <see cref="T:System.Data.DataSet" /> 作为一个 XML 架构写入指定的结构 <see cref="T:System.IO.Stream" /> 对象。</summary>
      <param name="stream">一个 <see cref="T:System.IO.Stream" /> 用来写入到的文件对象。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})">
      <summary>写入 <see cref="T:System.Data.DataSet" /> 作为一个 XML 架构写入指定的结构 <see cref="T:System.IO.Stream" /> 对象。</summary>
      <param name="stream">一个 <see cref="T:System.IO.Stream" /> 要写入到对象。</param>
      <param name="multipleTargetConverter">委托用于将转换 <see cref="T:System.Type" /> 为字符串。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter)">
      <summary>写入 <see cref="T:System.Data.DataSet" /> 作为一个 XML 架构写入指定的结构 <see cref="T:System.IO.TextWriter" /> 对象。</summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> 要写入的对象。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})">
      <summary>写入 <see cref="T:System.Data.DataSet" /> 作为一个 XML 架构写入指定的结构 <see cref="T:System.IO.TextWriter" />。</summary>
      <param name="writer">一个 <see cref="T:System.IO.TextWriter" /> 要写入到对象。</param>
      <param name="multipleTargetConverter">委托用于将转换 <see cref="T:System.Type" /> 为字符串。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.String)">
      <summary>写入 <see cref="T:System.Data.DataSet" /> 作为一个 XML 架构写入文件的结构。</summary>
      <param name="fileName">该文件的文件名 （包括路径） 向其写入。</param>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" /> 未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />。</exception>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.String,System.Converter{System.Type,System.String})">
      <summary>写入 <see cref="T:System.Data.DataSet" /> 作为一个 XML 架构写入文件的结构。</summary>
      <param name="fileName">要写入的文件的名称。</param>
      <param name="multipleTargetConverter">委托用于将转换 <see cref="T:System.Type" /> 为字符串。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter)">
      <summary>写入 <see cref="T:System.Data.DataSet" /> 结构作为 XML 架构写入 <see cref="T:System.Xml.XmlWriter" /> 对象。</summary>
      <param name="writer">要向其中进行写入的 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})">
      <summary>写入 <see cref="T:System.Data.DataSet" /> 作为一个 XML 架构写入指定的结构 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">一个 <see cref="T:System.Xml.XmlWriter" /> 要写入到对象。</param>
      <param name="multipleTargetConverter">委托用于将转换 <see cref="T:System.Type" /> 为字符串。</param>
    </member>
    <member name="M:System.Data.DataSetSchemaImporterExtension.#ctor">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
    </member>
    <member name="M:System.Data.DataSetSchemaImporterExtension.ImportSchemaType(System.String,System.String,System.Xml.Schema.XmlSchemaObject,System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.XmlSchemaImporter,System.CodeDom.CodeCompileUnit,System.CodeDom.CodeNamespace,System.Xml.Serialization.CodeGenerationOptions,System.CodeDom.Compiler.CodeDomProvider)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="name">
        <paramref name="name" />
      </param>
      <param name="schemaNamespace">
        <paramref name="schemaNamespace" />
      </param>
      <param name="context">
        <paramref name="context" />
      </param>
      <param name="schemas">
        <paramref name="schemas" />
      </param>
      <param name="importer">
        <paramref name="importer" />
      </param>
      <param name="compileUnit">
        <paramref name="compileUnit" />
      </param>
      <param name="mainNamespace">
        <paramref name="mainNamespace" />
      </param>
      <param name="options">
        <paramref name="options" />
      </param>
      <param name="codeProvider">
        <paramref name="codeProvider" />
      </param>
      <returns>此成员支持 .NET Framework 结构，不能在代码中直接使用。</returns>
    </member>
    <member name="M:System.Data.DataSetSchemaImporterExtension.ImportSchemaType(System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaObject,System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.XmlSchemaImporter,System.CodeDom.CodeCompileUnit,System.CodeDom.CodeNamespace,System.Xml.Serialization.CodeGenerationOptions,System.CodeDom.Compiler.CodeDomProvider)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="type">
        <paramref name="type" />
      </param>
      <param name="context">
        <paramref name="context" />
      </param>
      <param name="schemas">
        <paramref name="schemas" />
      </param>
      <param name="importer">
        <paramref name="importer" />
      </param>
      <param name="compileUnit">
        <paramref name="compileUnit" />
      </param>
      <param name="mainNamespace">
        <paramref name="mainNamespace" />
      </param>
      <param name="options">
        <paramref name="options" />
      </param>
      <param name="codeProvider">
        <paramref name="codeProvider" />
      </param>
      <returns>此成员支持 .NET Framework 结构，不能在代码中直接使用。</returns>
    </member>
    <member name="M:System.Data.DataSysDescriptionAttribute.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Data.DataSysDescriptionAttribute" /> 类使用指定的说明的字符串。</summary>
      <param name="description">描述字符串中。</param>
    </member>
    <member name="M:System.Data.DataTable.#ctor">
      <summary>新实例初始化 <see cref="T:System.Data.DataTable" /> 不带任何参数的类。</summary>
    </member>
    <member name="M:System.Data.DataTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>新实例初始化 <see cref="T:System.Data.DataTable" /> 类 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</summary>
      <param name="info">要序列化或反序列化对象所需的数据。</param>
      <param name="context">源和给定序列化流的目标。</param>
    </member>
    <member name="M:System.Data.DataTable.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Data.DataTable" /> 初始化具有指定的表名称。</summary>
      <param name="tableName">要为表提供的名称。 如果 <paramref name="tableName" /> 是 null 也不为空字符串，默认名称是在添加到 <see cref="T:System.Data.DataTableCollection" />。</param>
    </member>
    <member name="M:System.Data.DataTable.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Data.DataTable" /> 类使用指定的表名和命名空间。</summary>
      <param name="tableName">要为表提供的名称。 如果 <paramref name="tableName" /> 是 null 也不为空字符串，默认名称是在添加到 <see cref="T:System.Data.DataTableCollection" />。</param>
      <param name="tableNamespace">XML 表示形式中存储的数据的命名空间 DataTable。</param>
    </member>
    <member name="M:System.Data.DataTable.AcceptChanges">
      <summary>提交自上次对此表所做的所有更改 <see cref="M:System.Data.DataTable.AcceptChanges" /> 调用。</summary>
    </member>
    <member name="M:System.Data.DataTable.BeginInit">
      <summary>开始初始化在窗体上使用或由另一个组件使用的 <see cref="T:System.Data.DataTable" />。 初始化发生在运行时。</summary>
    </member>
    <member name="M:System.Data.DataTable.BeginLoadData">
      <summary>加载数据时关闭通知、 索引维护和约束。</summary>
    </member>
    <member name="M:System.Data.DataTable.Clear">
      <summary>清除 <see cref="T:System.Data.DataTable" /> 的所有数据。</summary>
    </member>
    <member name="M:System.Data.DataTable.Clone">
      <summary>克隆的结构 <see cref="T:System.Data.DataTable" />, ，包括所有 <see cref="T:System.Data.DataTable" /> 架构和约束。</summary>
      <returns>一个新 <see cref="T:System.Data.DataTable" /> 具有相同的架构与当前 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.DataTable.Compute(System.String,System.String)">
      <summary>计算传递的筛选条件的当前行上给定的表达式。</summary>
      <param name="expression">要计算的表达式。</param>
      <param name="filter">筛选器来限制在表达式中计算的行。</param>
      <returns>
        <see cref="T:System.Object" />, ，设置为计算的结果。 如果表达式的计算结果为 null，则返回值将 <see cref="F:System.DBNull.Value" />。</returns>
    </member>
    <member name="M:System.Data.DataTable.Copy">
      <summary>将结构和数据复制此 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>一个新 <see cref="T:System.Data.DataTable" /> 具有相同的结构 （表架构和约束） 和数据格式设置为这 <see cref="T:System.Data.DataTable" />。如果派生的类，该副本也将属于相同的派生类。<see cref="M:System.Data.DataTable.Copy" /> 创建一个新 <see cref="T:System.Data.DataTable" /> 具有相同的结构和数据作为原始 <see cref="T:System.Data.DataTable" />。 若要复制到新结构 <see cref="T:System.Data.DataTable" />, ，但不是数据，使用 <see cref="M:System.Data.DataTable.Clone" />。</returns>
    </member>
    <member name="M:System.Data.DataTable.CreateDataReader">
      <summary>返回 <see cref="T:System.Data.DataTableReader" /> 对应于在此数据 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>一个 <see cref="T:System.Data.DataTableReader" /> 包含一个结果集，对应于源 <see cref="T:System.Data.DataTable" /> 实例。</returns>
    </member>
    <member name="M:System.Data.DataTable.CreateInstance">
      <summary>创建 <see cref="T:System.Data.DataTable" /> 的新实例。</summary>
      <returns>新的表达式。</returns>
    </member>
    <member name="M:System.Data.DataTable.EndInit">
      <summary>结束在窗体上使用或由另一个组件使用的 <see cref="T:System.Data.DataTable" /> 的初始化。 初始化发生在运行时。</summary>
    </member>
    <member name="M:System.Data.DataTable.EndLoadData">
      <summary>在加载数据后打开通知、 索引维护和约束。</summary>
    </member>
    <member name="M:System.Data.DataTable.GetChanges">
      <summary>获得一份 <see cref="T:System.Data.DataTable" /> 包含自加载后对其进行的所有更改或 <see cref="M:System.Data.DataTable.AcceptChanges" /> 上一次调用。</summary>
      <returns>一份从此更改 <see cref="T:System.Data.DataTable" />, ，或 null 如果找不到任何更改。</returns>
    </member>
    <member name="M:System.Data.DataTable.GetChanges(System.Data.DataRowState)">
      <summary>获得一份 <see cref="T:System.Data.DataTable" /> 包含自上次加载或自从对其进行的所有更改 <see cref="M:System.Data.DataTable.AcceptChanges" /> 被调用，通过筛选出 <see cref="T:System.Data.DataRowState" />。</summary>
      <param name="rowStates">
        <see cref="T:System.Data.DataRowState" /> 值之一。</param>
      <returns>筛选的副本 <see cref="T:System.Data.DataTable" /> ，可能会有合并回它，及更高版本所执行的操作 <see cref="T:System.Data.DataTable" /> 使用 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" />。 如果所需的任何行 <see cref="T:System.Data.DataRowState" /> 找到，则此方法返回 null。</returns>
    </member>
    <member name="M:System.Data.DataTable.GetDataTableSchema(System.Xml.Schema.XmlSchemaSet)">
      <summary>此方法返回 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 实例，包含 Web 服务描述语言 (WSDL) 描述 <see cref="T:System.Data.DataTable" /> 为 Web 服务。</summary>
      <param name="schemaSet">一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 实例。</param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 实例。</returns>
    </member>
    <member name="M:System.Data.DataTable.GetErrors">
      <summary>获取一个数组 <see cref="T:System.Data.DataRow" /> 包含错误的对象。</summary>
      <returns>一个数组 <see cref="T:System.Data.DataRow" /> 具有错误的对象。</returns>
    </member>
    <member name="M:System.Data.DataTable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化所需的数据填充序列化信息对象 <see cref="T:System.Data.DataTable" />。</summary>
      <param name="info">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，其中包含与关联的序列化的数据 <see cref="T:System.Data.DataTable" />。</param>
      <param name="context">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，其中包含的源和目标与相关联的序列化流 <see cref="T:System.Data.DataTable" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 参数为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="M:System.Data.DataTable.GetRowType">
      <summary>获取行类型。</summary>
      <returns>返回的类型 <see cref="T:System.Data.DataRow" />。</returns>
    </member>
    <member name="M:System.Data.DataTable.GetSchema">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />。</summary>
      <returns> 一个 <see cref="T:System.Xml.Schema.XmlSchema" />，描述由 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> 方法生成并由 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> 方法使用的对象的 XML 表示形式。</returns>
    </member>
    <member name="M:System.Data.DataTable.ImportRow(System.Data.DataRow)">
      <summary>副本 <see cref="T:System.Data.DataRow" /> 到 <see cref="T:System.Data.DataTable" />, ，保留任何属性的设置，以及原始值和当前值。</summary>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> 要导入。</param>
    </member>
    <member name="M:System.Data.DataTable.Load(System.Data.IDataReader)">
      <summary>填充 <see cref="T:System.Data.DataTable" /> 使用所提供的数据源中的值 <see cref="T:System.Data.IDataReader" />。 如果 <see cref="T:System.Data.DataTable" /> 已经包含行，从数据源传入的数据将与现有行合并。</summary>
      <param name="reader">
        <see cref="T:System.Data.IDataReader" /> 提供结果集。</param>
    </member>
    <member name="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
      <summary>填充 <see cref="T:System.Data.DataTable" /> 使用所提供的数据源中的值 <see cref="T:System.Data.IDataReader" />。 如果 DataTable 已经包含行，与现有行的值根据合并来自数据源的传入数据 <paramref name="loadOption" /> 参数。</summary>
      <param name="reader">
        <see cref="T:System.Data.IDataReader" /> ，它提供一个或多个结果集。</param>
      <param name="loadOption">取值范围为 <see cref="T:System.Data.LoadOption" /> 枚举，指示如何中的现有行 <see cref="T:System.Data.DataTable" /> 与共享相同的主键的传入行组合在一起。</param>
    </member>
    <member name="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
      <summary>填充 <see cref="T:System.Data.DataTable" /> 使用所提供的数据源中的值 <see cref="T:System.Data.IDataReader" /> 使用错误处理委托。</summary>
      <param name="reader">一个 <see cref="T:System.Data.IDataReader" /> 提供结果集。</param>
      <param name="loadOption">取值范围为 <see cref="T:System.Data.LoadOption" /> 枚举，指示如何中的现有行 <see cref="T:System.Data.DataTable" /> 与共享相同的主键的传入行组合在一起。</param>
      <param name="errorHandler">一个 <see cref="T:System.Data.FillErrorEventHandler" /> 加载数据时出错时要调用委托。</param>
    </member>
    <member name="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)">
      <summary>查找并更新特定行。 如果未不找到任何匹配的行，使用给定的值创建一个新行。</summary>
      <param name="values">用于创建新行的值的数组。</param>
      <param name="fAcceptChanges">true 若要接受更改，则否则为 false。</param>
      <returns>新的 <see cref="T:System.Data.DataRow" />。</returns>
      <exception cref="T:System.ArgumentException">该数组将大于表中的列数。</exception>
      <exception cref="T:System.InvalidCastException">值不匹配其各自的列类型。</exception>
      <exception cref="T:System.Data.ConstraintException">添加行使约束无效。</exception>
      <exception cref="T:System.Data.NoNullAllowedException">正在尝试放入列中的 null 其中 <see cref="P:System.Data.DataColumn.AllowDBNull" /> 为 false。</exception>
    </member>
    <member name="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Data.LoadOption)">
      <summary>查找并更新特定行。 如果未不找到任何匹配的行，使用给定的值创建一个新行。</summary>
      <param name="values">用于创建新行的值的数组。</param>
      <param name="loadOption">用于确定如何将数组值应用于现有行中的相应值。</param>
      <returns>新的 <see cref="T:System.Data.DataRow" />。</returns>
    </member>
    <member name="M:System.Data.DataTable.Merge(System.Data.DataTable)">
      <summary>合并指定 <see cref="T:System.Data.DataTable" /> 与当前 <see cref="T:System.Data.DataTable" />。</summary>
      <param name="table">
        <see cref="T:System.Data.DataTable" /> 要与当前合并 <see cref="T:System.Data.DataTable" />。</param>
    </member>
    <member name="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)">
      <summary>合并指定 <see cref="T:System.Data.DataTable" /> 与当前 DataTable, ，，该值指示是否保留在当前更改 DataTable。</summary>
      <param name="table">DataTable 要与当前合并 DataTable。</param>
      <param name="preserveChanges">true, 保留在当前更改 DataTable; 否则为 false。</param>
    </member>
    <member name="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
      <summary>合并指定 <see cref="T:System.Data.DataTable" /> 与当前 DataTable, ，，该值指示是否保留更改，以及如何处理缺失的架构，在当前 DataTable。</summary>
      <param name="table">
        <see cref="T:System.Data.DataTable" /> 要与当前合并 <see cref="T:System.Data.DataTable" />。</param>
      <param name="preserveChanges">true, 保留在当前更改 <see cref="T:System.Data.DataTable" />; 否则为 false。</param>
      <param name="missingSchemaAction">
        <see cref="T:System.Data.MissingSchemaAction" /> 值之一。</param>
    </member>
    <member name="M:System.Data.DataTable.NewRow">
      <summary>创建一个新 <see cref="T:System.Data.DataRow" /> 具有与表相同的架构。</summary>
      <returns>一个 <see cref="T:System.Data.DataRow" /> 相同的架构与 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.DataTable.NewRowArray(System.Int32)">
      <summary>返回的数组 <see cref="T:System.Data.DataRow" />。</summary>
      <param name="size">一个 <see cref="T:System.Int32" /> 值，该值描述数组的大小。</param>
      <returns>新数组。</returns>
    </member>
    <member name="M:System.Data.DataTable.NewRowFromBuilder(System.Data.DataRowBuilder)">
      <summary>从现有的行创建一个新行。</summary>
      <param name="builder">一个 <see cref="T:System.Data.DataRowBuilder" /> 对象。</param>
      <returns>一个 <see cref="T:System.Data.DataRow" /> 派生的类。</returns>
    </member>
    <member name="M:System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)">
      <summary>引发 <see cref="E:System.Data.DataTable.ColumnChanged" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.Data.DataColumnChangeEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)">
      <summary>引发 <see cref="E:System.Data.DataTable.ColumnChanging" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.Data.DataColumnChangeEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>引发 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 事件。</summary>
      <param name="pcevent">包含事件数据的 <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)">
      <summary>通知 <see cref="T:System.Data.DataTable" /> ， <see cref="T:System.Data.DataColumn" /> 正被删除。</summary>
      <param name="column">
        <see cref="T:System.Data.DataColumn" /> 被删除。</param>
    </member>
    <member name="M:System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)">
      <summary>引发 <see cref="E:System.Data.DataTable.RowChanged" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.Data.DataRowChangeEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)">
      <summary>引发 <see cref="E:System.Data.DataTable.RowChanging" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.Data.DataRowChangeEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)">
      <summary>引发 <see cref="E:System.Data.DataTable.RowDeleted" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.Data.DataRowChangeEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)">
      <summary>引发 <see cref="E:System.Data.DataTable.RowDeleting" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.Data.DataRowChangeEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataTable.OnTableCleared(System.Data.DataTableClearEventArgs)">
      <summary>引发 <see cref="E:System.Data.DataTable.TableCleared" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.Data.DataTableClearEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataTable.OnTableClearing(System.Data.DataTableClearEventArgs)">
      <summary>引发 <see cref="E:System.Data.DataTable.TableClearing" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.Data.DataTableClearEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataTable.OnTableNewRow(System.Data.DataTableNewRowEventArgs)">
      <summary>引发 <see cref="E:System.Data.DataTable.TableNewRow" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.Data.DataTableNewRowEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataTable.ReadXml(System.IO.Stream)">
      <summary>将 XML 架构和数据读入 <see cref="T:System.Data.DataTable" /> 使用指定 <see cref="T:System.IO.Stream" />。</summary>
      <param name="stream">从派生的对象。 <see cref="T:System.IO.Stream" /></param>
      <returns>
        <see cref="T:System.Data.XmlReadMode" /> 用于读取数据。</returns>
    </member>
    <member name="M:System.Data.DataTable.ReadXml(System.IO.TextReader)">
      <summary>将 XML 架构和数据读入 <see cref="T:System.Data.DataTable" /> 使用指定 <see cref="T:System.IO.TextReader" />。</summary>
      <param name="reader">
        <see cref="T:System.IO.TextReader" /> 将用于读取数据。</param>
      <returns>
        <see cref="T:System.Data.XmlReadMode" /> 用于读取数据。</returns>
    </member>
    <member name="M:System.Data.DataTable.ReadXml(System.String)">
      <summary>将 XML 架构和数据读入 <see cref="T:System.Data.DataTable" /> 从指定的文件。</summary>
      <param name="fileName">从中读取数据文件的名称。</param>
      <returns>
        <see cref="T:System.Data.XmlReadMode" /> 用于读取数据。</returns>
    </member>
    <member name="M:System.Data.DataTable.ReadXml(System.Xml.XmlReader)">
      <summary>将 XML 架构和数据读入 <see cref="T:System.Data.DataTable" /> 使用指定 <see cref="T:System.Xml.XmlReader" />。</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> 将用于读取数据。</param>
      <returns>
        <see cref="T:System.Data.XmlReadMode" /> 用于读取数据。</returns>
    </member>
    <member name="M:System.Data.DataTable.ReadXmlSchema(System.IO.Stream)">
      <summary>读取 XML 架构到 <see cref="T:System.Data.DataTable" /> 使用指定的流。</summary>
      <param name="stream">用来读取该架构的流。</param>
    </member>
    <member name="M:System.Data.DataTable.ReadXmlSchema(System.IO.TextReader)">
      <summary>读取 XML 架构到 <see cref="T:System.Data.DataTable" /> 使用指定 <see cref="T:System.IO.TextReader" />。</summary>
      <param name="reader">
        <see cref="T:System.IO.TextReader" /> 用于读取架构信息。</param>
    </member>
    <member name="M:System.Data.DataTable.ReadXmlSchema(System.String)">
      <summary>读取 XML 架构到 <see cref="T:System.Data.DataTable" /> 从指定的文件。</summary>
      <param name="fileName">从中进行读取架构信息文件的名称。</param>
    </member>
    <member name="M:System.Data.DataTable.ReadXmlSchema(System.Xml.XmlReader)">
      <summary>读取 XML 架构到 <see cref="T:System.Data.DataTable" /> 使用指定 <see cref="T:System.Xml.XmlReader" />。</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> 用于读取架构信息。</param>
    </member>
    <member name="M:System.Data.DataTable.ReadXmlSerializable(System.Xml.XmlReader)">
      <summary>从 XML 流中读取。</summary>
      <param name="reader">一个 <see cref="T:System.Xml.XmlReader" /> 对象。</param>
    </member>
    <member name="M:System.Data.DataTable.RejectChanges">
      <summary>回滚对表自加载后或从上次所做的所有更改 <see cref="M:System.Data.DataTable.AcceptChanges" /> 调用。</summary>
    </member>
    <member name="M:System.Data.DataTable.Reset">
      <summary>重置 <see cref="T:System.Data.DataTable" /> 到其原始状态。 重置中删除所有数据、 索引、 关系和表的列。 如果数据集包含一个数据表，该表表重置之后仍可将数据集的一部分。</summary>
    </member>
    <member name="M:System.Data.DataTable.Select">
      <summary>获取所有的数组 <see cref="T:System.Data.DataRow" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Data.DataRow" /> 对象数组。</returns>
    </member>
    <member name="M:System.Data.DataTable.Select(System.String)">
      <summary>获取所有的数组 <see cref="T:System.Data.DataRow" /> 与筛选条件匹配的对象。</summary>
      <param name="filterExpression">要用于筛选的行的条件。 有关如何来筛选行的示例，请参阅 DataView RowFilter Syntax [C#]。</param>
      <returns>一个 <see cref="T:System.Data.DataRow" /> 对象数组。</returns>
    </member>
    <member name="M:System.Data.DataTable.Select(System.String,System.String)">
      <summary>获取所有的数组 <see cref="T:System.Data.DataRow" /> 相匹配的筛选条件，在指定的排序顺序中的对象。</summary>
      <param name="filterExpression">要用于筛选的行的条件。 有关如何来筛选行的示例，请参阅 DataView RowFilter Syntax [C#]。</param>
      <param name="sort">一个字符串，指定的列和排序方向。</param>
      <returns>一个数组 <see cref="T:System.Data.DataRow" /> 匹配筛选器表达式的对象。</returns>
    </member>
    <member name="M:System.Data.DataTable.Select(System.String,System.String,System.Data.DataViewRowState)">
      <summary>获取所有的数组 <see cref="T:System.Data.DataRow" /> 排序顺序的筛选器匹配指定的状态相匹配的对象。</summary>
      <param name="filterExpression">要用于筛选的行的条件。 有关如何来筛选行的示例，请参阅 DataView RowFilter Syntax [C#]。</param>
      <param name="sort">一个字符串，指定的列和排序方向。</param>
      <param name="recordStates">
        <see cref="T:System.Data.DataViewRowState" /> 值之一。</param>
      <returns>一个 <see cref="T:System.Data.DataRow" /> 对象数组。</returns>
    </member>
    <member name="M:System.Data.DataTable.System#ComponentModel#IListSource#GetList">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.IListSource.GetList" />。</summary>
      <returns>
        <see cref="T:System.Collections.IList" /> 可绑定到数据源从对象。</returns>
    </member>
    <member name="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />。</summary>
      <returns> 一个 <see cref="T:System.Xml.Schema.XmlSchema" />，描述由 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> 方法生成并由 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> 方法使用的对象的 XML 表示形式。</returns>
    </member>
    <member name="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />。</summary>
      <param name="reader">XmlReader。</param>
    </member>
    <member name="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />。</summary>
      <param name="writer">XmlWriter。</param>
    </member>
    <member name="M:System.Data.DataTable.ToString">
      <summary>获取 <see cref="P:System.Data.DataTable.TableName" /> 和 <see cref="P:System.Data.DataTable.DisplayExpression" />, ，如果有另一个用作的串联字符串。</summary>
      <returns>组成的字符串 <see cref="P:System.Data.DataTable.TableName" /> 和 <see cref="P:System.Data.DataTable.DisplayExpression" /> 值。</returns>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.Stream)">
      <summary>当前的内容写入 <see cref="T:System.Data.DataTable" /> 为使用指定的 XML <see cref="T:System.IO.Stream" />。</summary>
      <param name="stream">数据将写入的流。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Boolean)">
      <summary>当前的内容写入 <see cref="T:System.Data.DataTable" /> 为使用指定的 XML <see cref="T:System.IO.Stream" />。 若要保存对表及其所有子代的数据，设置 <paramref name="writeHierarchy" /> 参数 true。</summary>
      <param name="stream">数据将写入的流。</param>
      <param name="writeHierarchy">如果 true, ，写入当前表及其所有子代的内容。 如果 false （默认值），写入当前表的数据。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)">
      <summary>将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataTable" /> 写入指定的文件使用指定 <see cref="T:System.Data.XmlWriteMode" />。 编写该架构，请设置的值为 <paramref name="mode" /> 参数 WriteSchema。</summary>
      <param name="stream">数据将写入的流。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)">
      <summary>将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataTable" /> 写入指定的文件使用指定 <see cref="T:System.Data.XmlWriteMode" />。 编写该架构，请设置的值为 <paramref name="mode" /> 参数 WriteSchema。 若要保存对表及其所有子代的数据，设置 <paramref name="writeHierarchy" /> 参数 true。</summary>
      <param name="stream">数据将写入的流。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。</param>
      <param name="writeHierarchy">如果 true, ，写入当前表及其所有子代的内容。 如果 false （默认值），写入当前表的数据。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.TextWriter)">
      <summary>当前的内容写入 <see cref="T:System.Data.DataTable" /> 为使用指定的 XML <see cref="T:System.IO.TextWriter" />。</summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> 用来写入内容。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Boolean)">
      <summary>当前的内容写入 <see cref="T:System.Data.DataTable" /> 为使用指定的 XML <see cref="T:System.IO.TextWriter" />。 若要保存对表及其所有子代的数据，设置 <paramref name="writeHierarchy" /> 参数 true。</summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> 用来写入内容。</param>
      <param name="writeHierarchy">如果 true, ，写入当前表及其所有子代的内容。 如果 false （默认值），写入当前表的数据。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)">
      <summary>将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataTable" /> 使用指定 <see cref="T:System.IO.TextWriter" /> 和 <see cref="T:System.Data.XmlWriteMode" />。 编写该架构，请设置的值为 <paramref name="mode" /> 参数 WriteSchema。</summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> 用于写入的文档。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)">
      <summary>将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataTable" /> 使用指定 <see cref="T:System.IO.TextWriter" /> 和 <see cref="T:System.Data.XmlWriteMode" />。 编写该架构，请设置的值为 <paramref name="mode" /> 参数 WriteSchema。 若要保存对表及其所有子代的数据，设置 <paramref name="writeHierarchy" /> 参数 true。</summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> 用于写入的文档。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。</param>
      <param name="writeHierarchy">如果 true, ，写入当前表及其所有子代的内容。 如果 false （默认值），写入当前表的数据。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.String)">
      <summary>当前的内容写入 <see cref="T:System.Data.DataTable" /> 为使用指定的文件的 XML。</summary>
      <param name="fileName">要向其写入的 XML 数据文件。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.String,System.Boolean)">
      <summary>当前的内容写入 <see cref="T:System.Data.DataTable" /> 为使用指定的文件的 XML。 若要保存对表及其所有子代的数据，设置 <paramref name="writeHierarchy" /> 参数 true。</summary>
      <param name="fileName">要向其写入的 XML 数据文件。</param>
      <param name="writeHierarchy">如果 true, ，写入当前表及其所有子代的内容。 如果 false （默认值），写入当前表的数据。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode)">
      <summary>将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataTable" /> 使用指定的文件和 <see cref="T:System.Data.XmlWriteMode" />。 编写该架构，请设置的值为 <paramref name="mode" /> 参数 WriteSchema。</summary>
      <param name="fileName">数据将写入的文件的名称。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)">
      <summary>将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataTable" /> 使用指定的文件和 <see cref="T:System.Data.XmlWriteMode" />。 编写该架构，请设置的值为 <paramref name="mode" /> 参数 WriteSchema。 若要保存对表及其所有子代的数据，设置 <paramref name="writeHierarchy" /> 参数 true。</summary>
      <param name="fileName">数据将写入的文件的名称。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。</param>
      <param name="writeHierarchy">如果 true, ，写入当前表及其所有子代的内容。 如果 false （默认值），写入当前表的数据。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter)">
      <summary>当前的内容写入 <see cref="T:System.Data.DataTable" /> 为使用指定的 XML <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> 用来写入的内容。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Boolean)">
      <summary>当前的内容写入 <see cref="T:System.Data.DataTable" /> 为使用指定的 XML <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> 用来写入的内容。</param>
      <param name="writeHierarchy">如果 true, ，写入当前表及其所有子代的内容。 如果 false （默认值），写入当前表的数据。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)">
      <summary>将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataTable" /> 使用指定 <see cref="T:System.Xml.XmlWriter" /> 和 <see cref="T:System.Data.XmlWriteMode" />。 编写该架构，请设置的值为 <paramref name="mode" /> 参数 WriteSchema。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> 用于写入的文档。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)">
      <summary>将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataTable" /> 使用指定 <see cref="T:System.Xml.XmlWriter" /> 和 <see cref="T:System.Data.XmlWriteMode" />。 编写该架构，请设置的值为 <paramref name="mode" /> 参数 WriteSchema。 若要保存对表及其所有子代的数据，设置 <paramref name="writeHierarchy" /> 参数 true。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> 用于写入的文档。</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 值之一。</param>
      <param name="writeHierarchy">如果 true, ，写入当前表及其所有子代的内容。 如果 false （默认值），写入当前表的数据。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.IO.Stream)">
      <summary>写入的当前数据结构 <see cref="T:System.Data.DataTable" /> 作为一个 XML 架构写入指定的流。</summary>
      <param name="stream">XML 架构将写入的流。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.IO.Stream,System.Boolean)">
      <summary>写入的当前数据结构 <see cref="T:System.Data.DataTable" /> 作为一个 XML 架构写入指定的流。 若要保存对表及其所有子代的架构，集 <paramref name="writeHierarchy" /> 参数 true。</summary>
      <param name="stream">XML 架构将写入的流。</param>
      <param name="writeHierarchy">如果 true, ，写入当前表及其所有子代的架构。 如果 false （默认值），写入当前表的架构。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter)">
      <summary>写入的当前数据结构 <see cref="T:System.Data.DataTable" /> 作为一个使用指定的 XML 架构 <see cref="T:System.IO.TextWriter" />。</summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> 用其进行写。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter,System.Boolean)">
      <summary>写入的当前数据结构 <see cref="T:System.Data.DataTable" /> 作为一个使用指定的 XML 架构 <see cref="T:System.IO.TextWriter" />。 若要保存对表及其所有子代的架构，集 <paramref name="writeHierarchy" /> 参数 true。</summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> 用其进行写。</param>
      <param name="writeHierarchy">如果 true, ，写入当前表及其所有子代的架构。 如果 false （默认值），写入当前表的架构。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.String)">
      <summary>写入的当前数据结构 <see cref="T:System.Data.DataTable" /> 作为一个 XML 架构写入指定的文件。</summary>
      <param name="fileName">要使用的文件的名称。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.String,System.Boolean)">
      <summary>写入的当前数据结构 <see cref="T:System.Data.DataTable" /> 作为一个 XML 架构写入指定的文件。 若要保存对表及其所有子代的架构，集 <paramref name="writeHierarchy" /> 参数 true。</summary>
      <param name="fileName">要使用的文件的名称。</param>
      <param name="writeHierarchy">如果 true, ，写入当前表及其所有子代的架构。 如果 false （默认值），写入当前表的架构。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter)">
      <summary>写入的当前数据结构 <see cref="T:System.Data.DataTable" /> 作为一个使用指定的 XML 架构 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要使用的 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)">
      <summary>写入的当前数据结构 <see cref="T:System.Data.DataTable" /> 作为一个使用指定的 XML 架构 <see cref="T:System.Xml.XmlWriter" />。 若要保存对表及其所有子代的架构，集 <paramref name="writeHierarchy" /> 参数 true。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> 用于写入的文档。</param>
      <param name="writeHierarchy">如果 true, ，写入当前表及其所有子代的架构。 如果 false （默认值），写入当前表的架构。</param>
    </member>
    <member name="M:System.Data.DataTableClearEventArgs.#ctor(System.Data.DataTable)">
      <summary>初始化 <see cref="T:System.Data.DataTableClearEventArgs" /> 类的新实例。</summary>
      <param name="dataTable">
        <see cref="T:System.Data.DataTable" /> 正在清除其行。</param>
    </member>
    <member name="M:System.Data.DataTableCollection.Add">
      <summary>创建一个新 <see cref="T:System.Data.DataTable" /> 对象使用的默认名称，并将其添加到集合。</summary>
      <returns>新创建的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.DataTableCollection.Add(System.Data.DataTable)">
      <summary>将指定的 DataTable 添加到集合。</summary>
      <param name="table">要添加的 DataTable 对象。</param>
      <exception cref="T:System.ArgumentNullException">为此表是指定的值 null。</exception>
      <exception cref="T:System.ArgumentException">表已属于该集合，或属于另一个集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合中的表具有相同的名称。 比较不区分大小写。</exception>
    </member>
    <member name="M:System.Data.DataTableCollection.Add(System.String)">
      <summary>创建 <see cref="T:System.Data.DataTable" /> 对象使用指定的名称，并将其添加到集合。</summary>
      <param name="name">指定所创建的名称 <see cref="T:System.Data.DataTable" />。</param>
      <returns>新创建的 <see cref="T:System.Data.DataTable" />。</returns>
      <exception cref="T:System.Data.DuplicateNameException">集合中的表具有相同的名称。 （比较不区分大小写。）</exception>
    </member>
    <member name="M:System.Data.DataTableCollection.Add(System.String,System.String)">
      <summary>创建 <see cref="T:System.Data.DataTable" /> 对象使用指定的名称，并将其添加到集合。</summary>
      <param name="name">指定所创建的名称 <see cref="T:System.Data.DataTable" />。</param>
      <param name="tableNamespace">要使所创建的命名空间 <see cref="T:System.Data.DataTable" />。</param>
      <returns>新创建的 <see cref="T:System.Data.DataTable" />。</returns>
      <exception cref="T:System.Data.DuplicateNameException">集合中的表具有相同的名称。 （比较不区分大小写。）</exception>
    </member>
    <member name="M:System.Data.DataTableCollection.AddRange(System.Data.DataTable[])">
      <summary>将指定的元素复制 <see cref="T:System.Data.DataTable" /> 数组转换为集合的末尾。</summary>
      <param name="tables">数组 <see cref="T:System.Data.DataTable" /> 要添加到集合的对象。</param>
    </member>
    <member name="M:System.Data.DataTableCollection.CanRemove(System.Data.DataTable)">
      <summary>验证是否指定 <see cref="T:System.Data.DataTable" /> 可以从集合中移除对象。</summary>
      <param name="table">DataTable 集合中要对其执行检查。</param>
      <returns>true 是否可以删除表;否则为 false。</returns>
    </member>
    <member name="M:System.Data.DataTableCollection.Clear">
      <summary>清除集合中的所有 <see cref="T:System.Data.DataTable" /> 对象。</summary>
    </member>
    <member name="M:System.Data.DataTableCollection.Contains(System.String)">
      <summary>获取一个值，该值指示是否 <see cref="T:System.Data.DataTable" /> 集合中存在具有指定名称的对象。</summary>
      <param name="name">名称 <see cref="T:System.Data.DataTable" /> 来查找。</param>
      <returns>true 如果指定的表存在，则否则为 false。</returns>
    </member>
    <member name="M:System.Data.DataTableCollection.Contains(System.String,System.String)">
      <summary>获取一个值，该值指示是否 <see cref="T:System.Data.DataTable" /> 对象集合中存在具有指定名称和表命名空间。</summary>
      <param name="name">名称 <see cref="T:System.Data.DataTable" /> 来查找。</param>
      <param name="tableNamespace">名称 <see cref="T:System.Data.DataTable" /> 命名空间中进行查找。</param>
      <returns>true 如果指定的表存在，则否则为 false。</returns>
    </member>
    <member name="M:System.Data.DataTableCollection.CopyTo(System.Data.DataTable[],System.Int32)">
      <summary>当前的所有元素都复制 <see cref="T:System.Data.DataTableCollection" /> 到一维 <see cref="T:System.Array" />, 、 指定的目标数组索引处开始。</summary>
      <param name="array">一维 <see cref="T:System.Array" /> 要复制当前 <see cref="T:System.Data.DataTableCollection" /> 到对象的元素。</param>
      <param name="index">目标 <see cref="T:System.Array" /> 开始复制到的索引。</param>
    </member>
    <member name="M:System.Data.DataTableCollection.IndexOf(System.Data.DataTable)">
      <summary>获取指定的索引 <see cref="T:System.Data.DataTable" /> 对象。</summary>
      <param name="table">要搜索的 DataTable。</param>
      <returns>表或-1，如果在集合中找不到表的从零开始的索引。</returns>
    </member>
    <member name="M:System.Data.DataTableCollection.IndexOf(System.String)">
      <summary>获取集合中的索引 <see cref="T:System.Data.DataTable" /> 具有指定名称的对象。</summary>
      <param name="tableName">名称 DataTable 要查找对象。</param>
      <returns>从零开始的索引 DataTable 与指定的名称，则为-1 如果集合中不存在表。将返回-1 时两个或多个表具有相同名称但不同的命名空间。 如果存在任何多义性，将表名称传递给恰好一个表进行匹配时，不会成功调用。</returns>
    </member>
    <member name="M:System.Data.DataTableCollection.IndexOf(System.String,System.String)">
      <summary>获取指定的集合中的索引 <see cref="T:System.Data.DataTable" /> 对象。</summary>
      <param name="tableName">名称 <see cref="T:System.Data.DataTable" /> 要查找对象。</param>
      <param name="tableNamespace">名称 <see cref="T:System.Data.DataTable" /> 命名空间中进行查找。</param>
      <returns>从零开始的索引 <see cref="T:System.Data.DataTable" /> 与指定的名称，则为-1 如果集合中不存在表。</returns>
    </member>
    <member name="M:System.Data.DataTableCollection.Remove(System.Data.DataTable)">
      <summary>从集合中移除指定的 <see cref="T:System.Data.DataTable" /> 对象。</summary>
      <param name="table">要移除的 DataTable。</param>
      <exception cref="T:System.ArgumentNullException">为此表是指定的值 null。</exception>
      <exception cref="T:System.ArgumentException">表不属于此集合。- 或 - 表是一种关系的一部分。</exception>
    </member>
    <member name="M:System.Data.DataTableCollection.Remove(System.String)">
      <summary>删除 <see cref="T:System.Data.DataTable" /> 具有指定的名称从集合对象。</summary>
      <param name="name">名称 <see cref="T:System.Data.DataTable" /> 要移除对象。</param>
      <exception cref="T:System.ArgumentException">集合没有具有指定名称的表。</exception>
    </member>
    <member name="M:System.Data.DataTableCollection.Remove(System.String,System.String)">
      <summary>删除 <see cref="T:System.Data.DataTable" /> 具有指定的名称从集合对象。</summary>
      <param name="name">名称 <see cref="T:System.Data.DataTable" /> 要移除对象。</param>
      <param name="tableNamespace">名称 <see cref="T:System.Data.DataTable" /> 命名空间中进行查找。</param>
      <exception cref="T:System.ArgumentException">集合没有具有指定名称的表。</exception>
    </member>
    <member name="M:System.Data.DataTableCollection.RemoveAt(System.Int32)">
      <summary>删除 <see cref="T:System.Data.DataTable" /> 集合中的指定索引处的对象。</summary>
      <param name="index">索引 DataTable 中删除。</param>
      <exception cref="T:System.ArgumentException">集合中指定索引处没有表。</exception>
    </member>
    <member name="M:System.Data.DataTableNewRowEventArgs.#ctor(System.Data.DataRow)">
      <summary>初始化 <see cref="T:System.Data.DataTableNewRowEventArgs" /> 的新实例。</summary>
      <param name="dataRow">
        <see cref="T:System.Data.DataRow" /> 正在添加。</param>
    </member>
    <member name="M:System.Data.DataTableReader.#ctor(System.Data.DataTable)">
      <summary>新实例初始化 <see cref="T:System.Data.DataTableReader" /> 通过使用所提供的数据类 <see cref="T:System.Data.DataTable" />。</summary>
      <param name="dataTable">
        <see cref="T:System.Data.DataTable" /> 从中新 <see cref="T:System.Data.DataTableReader" /> 获取其结果集。</param>
    </member>
    <member name="M:System.Data.DataTableReader.#ctor(System.Data.DataTable[])">
      <summary>新实例初始化 <see cref="T:System.Data.DataTableReader" /> 类使用所提供的数组 <see cref="T:System.Data.DataTable" /> 对象。</summary>
      <param name="dataTables">数组 <see cref="T:System.Data.DataTable" /> 提供针对新的结果的对象 <see cref="T:System.Data.DataTableReader" /> 对象。</param>
    </member>
    <member name="M:System.Data.DataTableReader.Close">
      <summary>关闭当前 <see cref="T:System.Data.DataTableReader" />。</summary>
    </member>
    <member name="M:System.Data.DataTableReader.GetBoolean(System.Int32)">
      <summary>获取指定列的值 <see cref="T:System.Boolean" />。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不包含 Boolean。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetByte(System.Int32)">
      <summary>以字节的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问某一列中为已关闭 DataTableReader。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不包含一个字节。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>读取指定的列偏移量开始到缓冲区作为数组从指定的缓冲区偏移量开始的字节的流。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="dataIndex">中自其开始读取的操作的字段的索引。</param>
      <param name="buffer">若要读取的字节流读入的缓冲区。</param>
      <param name="bufferIndex">若要开始放置数据的缓冲区中的索引。</param>
      <param name="length">要复制到缓冲区的最大长度。</param>
      <returns>读取的实际字节数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问某一列中为已关闭 DataTableReader。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不包含一个字节数组。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetChar(System.Int32)">
      <summary>字符的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>列的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问某一列中为已关闭 DataTableReader。</exception>
      <exception cref="T:System.InvalidCastException">指定的字段不包含一个字符。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>字符数组的形式返回指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="dataIndex">中自其开始读取的操作的字段的索引。</param>
      <param name="buffer">若要读取的字符流读入的缓冲区。</param>
      <param name="bufferIndex">若要开始放置数据的缓冲区中的索引。</param>
      <param name="length">要复制到缓冲区的最大长度。</param>
      <returns>读取的实际字符数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问某一列中为已关闭 DataTableReader。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不包含的字符数组。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetDataTypeName(System.Int32)">
      <summary>获取表示指定列的数据类型的字符串。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>表示列的数据类型的字符串。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetDateTime(System.Int32)">
      <summary>以 <see cref="T:System.DateTime" /> 对象的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问某一列中为已关闭 DataTableReader。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不包含日期时间值。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetDecimal(System.Int32)">
      <summary>获取指定列的值 <see cref="T:System.Decimal" />。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问某一列中为已关闭 DataTableReader。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不包含 Decimal 值。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetDouble(System.Int32)">
      <summary>双精度浮点数字的形式获取列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问某一列中为已关闭 DataTableReader。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不包含双精度浮点数。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetEnumerator">
      <summary>返回可用于循环访问项集合的枚举。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 对象，表示项集合。</returns>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetFieldType(System.Int32)">
      <summary>获取 <see cref="T:System.Type" /> ，它是该对象的数据类型。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>
        <see cref="T:System.Type" /> ，它是该对象的数据类型。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" /> 。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetFloat(System.Int32)">
      <summary>以单精度浮点数字的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>列的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不包含单精度浮点数。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetGuid(System.Int32)">
      <summary>以全局唯一标识符 (GUID) 的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不包含一个 GUID。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetInt16(System.Int32)">
      <summary>16 位有符号整数形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号 </param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不包含 16 位有符号的整数。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetInt32(System.Int32)">
      <summary>作为 32 位有符号整数获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号 </param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" /> 。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不包含 32 位有符号的整数值。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetInt64(System.Int32)">
      <summary>以 64 位有符号整数的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号 </param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" /> 。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不包含 64 位有符号的整数值。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetName(System.Int32)">
      <summary>获取指定列的值 <see cref="T:System.String" />。</summary>
      <param name="ordinal">从零开始的列序号 </param>
      <returns>指定列的名称。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetOrdinal(System.String)">
      <summary>获取列序号，给定的列的名称。</summary>
      <param name="name">列的名称。</param>
      <returns>从零开始的列序号。</returns>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />。</exception>
      <exception cref="T:System.ArgumentException">指定的名称不是有效的列名。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetProviderSpecificFieldType(System.Int32)">
      <summary>获取指定列的类型提供程序特定格式。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>
        <see cref="T:System.Type" /> ，它是该对象的数据类型。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetProviderSpecificValue(System.Int32)">
      <summary>在提供程序特定格式中获取指定列的值。</summary>
      <param name="ordinal">要检索其值的列的从零开始的数字。</param>
      <returns>提供程序特定格式中的指定列的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" /></exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetProviderSpecificValues(System.Object[])">
      <summary>提供的数组填充中的所有列的提供程序特定的类型信息 <see cref="T:System.Data.DataTableReader" />。</summary>
      <param name="values">若要使用中的列的类型信息来填充的对象的数组 <see cref="T:System.Data.DataTableReader" />。</param>
      <returns>列的值复制到数组中的数。</returns>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetSchemaTable">
      <summary>返回一个描述 <see cref="T:System.Data.DataTable" /> 的列元数据的 <see cref="T:System.Data.DataTableReader" />。</summary>
      <returns>一个描述列元数据的 <see cref="T:System.Data.DataTable" />。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.DataTableReader" /> 已关闭。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetString(System.Int32)">
      <summary>获取指定列的值作为字符串。</summary>
      <param name="ordinal">从零开始的列序号 </param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />。</exception>
      <exception cref="T:System.InvalidCastException">指定的列不包含一个字符串。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetValue(System.Int32)">
      <summary>以其本机格式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号 </param>
      <returns>指定列的值。 此方法返回 DBNull 为 null 的列。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问中为已关闭的列 <see cref="T:System.Data.DataTableReader" /> 。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.GetValues(System.Object[])">
      <summary>使用来填充数组的对象的当前行的列的值。</summary>
      <param name="values">一个数组 <see cref="T:System.Object" /> 向其复制的列的值从 <see cref="T:System.Data.DataTableReader" />。</param>
      <returns>列的值复制到数组中的数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" /> 。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.IsDBNull(System.Int32)">
      <summary>获取一个值，该值指示列是否包含不存在或缺少的值。</summary>
      <param name="ordinal">从零开始的列序号 </param>
      <returns>true 如果指定的列的值等效于 <see cref="T:System.DBNull" />; 否则为 false。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" /> 。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.NextResult">
      <summary>前移 <see cref="T:System.Data.DataTableReader" /> 到下一个结果集，如果有的话。</summary>
      <returns>true 如果没有其他结果集;否则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">尝试在已关闭中导航 <see cref="T:System.Data.DataTableReader" />。</exception>
    </member>
    <member name="M:System.Data.DataTableReader.Read">
      <summary>前移 <see cref="T:System.Data.DataTableReader" /> 到下一个记录。</summary>
      <returns>true 如果没有另一行读取;否则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" /> 。</exception>
    </member>
    <member name="M:System.Data.DataView.#ctor">
      <summary>初始化 <see cref="T:System.Data.DataView" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.DataView.#ctor(System.Data.DataTable)">
      <summary>使用指定的 <see cref="T:System.Data.DataView" /> 初始化 <see cref="T:System.Data.DataTable" /> 类的新实例。</summary>
      <param name="table">要添加到 <see cref="T:System.Data.DataView" /> 中的 <see cref="T:System.Data.DataTable" />。</param>
    </member>
    <member name="M:System.Data.DataView.#ctor(System.Data.DataTable,System.String,System.String,System.Data.DataViewRowState)">
      <summary>使用指定的 <see cref="T:System.Data.DataTable" />、<see cref="P:System.Data.DataView.RowFilter" />、<see cref="P:System.Data.DataView.Sort" /> 和 <see cref="T:System.Data.DataViewRowState" /> 初始化 <see cref="T:System.Data.DataView" /> 类的新实例。</summary>
      <param name="table">要添加到 <see cref="T:System.Data.DataView" /> 中的 <see cref="T:System.Data.DataTable" />。</param>
      <param name="RowFilter">要应用于 <see cref="T:System.Data.DataView" /> 的 <see cref="P:System.Data.DataView.RowFilter" />。</param>
      <param name="Sort">要应用于 <see cref="T:System.Data.DataView" /> 的 <see cref="P:System.Data.DataView.Sort" />。</param>
      <param name="RowState">要应用于 <see cref="T:System.Data.DataView" /> 的 <see cref="T:System.Data.DataViewRowState" />。</param>
    </member>
    <member name="M:System.Data.DataView.AddNew">
      <summary>在 <see cref="T:System.Data.DataView" /> 中添加新行。</summary>
      <returns>一个新 <see cref="T:System.Data.DataRowView" /> 对象。</returns>
    </member>
    <member name="M:System.Data.DataView.BeginInit">
      <summary>开始初始化在窗体上使用或由另一个组件使用的 <see cref="T:System.Data.DataView" />。 此初始化在运行时发生。</summary>
    </member>
    <member name="M:System.Data.DataView.Close">
      <summary>关闭 <see cref="T:System.Data.DataView" />。</summary>
    </member>
    <member name="M:System.Data.DataView.ColumnCollectionChanged(System.Object,System.ComponentModel.CollectionChangeEventArgs)">
      <summary>在成功更改 <see cref="T:System.Data.DataColumnCollection" /> 后发生。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.ListChangedEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataView.CopyTo(System.Array,System.Int32)">
      <summary>将项复制到数组中。 仅适用于 Web 窗体界面。</summary>
      <param name="array">要复制到的数组。</param>
      <param name="index">从其开始的索引。</param>
    </member>
    <member name="M:System.Data.DataView.Delete(System.Int32)">
      <summary>删除指定索引处的行。</summary>
      <param name="index">要删除行的索引。</param>
    </member>
    <member name="M:System.Data.DataView.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Data.DataView" /> 对象使用的资源（内存除外）。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.Data.DataView.EndInit">
      <summary>结束在窗体上使用或由另一个组件使用的 <see cref="T:System.Data.DataView" /> 的初始化。 此初始化在运行时发生。</summary>
    </member>
    <member name="M:System.Data.DataView.Equals(System.Data.DataView)">
      <summary>确定指定的 <see cref="T:System.Data.DataView" /> 实例是否可视为相等的实例。</summary>
      <param name="view">要比较的 <see cref="T:System.Data.DataView" />。</param>
      <returns>如果这两个 <see cref="T:System.Data.DataView" /> 实例相等，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Data.DataView.Find(System.Object)">
      <summary>根据指定的排序键值在 <see cref="T:System.Data.DataView" /> 中查找行。</summary>
      <param name="key">要搜索的对象。</param>
      <returns>包含指定排序关键字值的 <see cref="T:System.Data.DataView" /> 中的行的索引；否则为 -1（如果不存在排序关键字值）。</returns>
    </member>
    <member name="M:System.Data.DataView.Find(System.Object[])">
      <summary>根据指定的排序键值在 <see cref="T:System.Data.DataView" /> 中查找行。</summary>
      <param name="key">类型为 <see cref="T:System.Object" /> 的值的数组。</param>
      <returns>
        <see cref="T:System.Data.DataView" /> 中与指定的排序键值匹配的第一个行的位置索引；如果没有匹配的排序键值，则为 -1。</returns>
    </member>
    <member name="M:System.Data.DataView.FindRows(System.Object)">
      <summary>返回其列与指定的排序键值匹配的 <see cref="T:System.Data.DataRowView" /> 对象数组。</summary>
      <param name="key">要搜索的列值，为 <see cref="T:System.Object" /> 类型。</param>
      <returns>DataRowView 对象数组，其列与指定的排序键值匹配；或者，如果任何行都不包含指定的排序键值，则为空的 DataRowView 数组。</returns>
    </member>
    <member name="M:System.Data.DataView.FindRows(System.Object[])">
      <summary>返回其列与指定的排序键值匹配的 <see cref="T:System.Data.DataRowView" /> 对象数组。</summary>
      <param name="key">要搜索的列值数组，其类型为 <see cref="T:System.Object" />。</param>
      <returns>DataRowView 对象数组，其列与指定的排序键值匹配；或者，如果任何行都不包含指定的排序键值，则为空的 DataRowView 数组。</returns>
    </member>
    <member name="M:System.Data.DataView.GetEnumerator">
      <summary>获取此 <see cref="T:System.Data.DataView" /> 的枚举器。</summary>
      <returns>用于浏览列表的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Data.DataView.IndexListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
      <summary>在成功更改 <see cref="T:System.Data.DataView" /> 后发生。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.ListChangedEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataView.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>引发 <see cref="E:System.Data.DataView.ListChanged" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.ListChangedEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataView.Open">
      <summary>打开 <see cref="T:System.Data.DataView" />。</summary>
    </member>
    <member name="M:System.Data.DataView.Reset">
      <summary>保留以仅供内部使用。</summary>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#Add(System.Object)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.Collections.IList.Add(System.Object)" />。</summary>
      <param name="value">一个 <see cref="System.Object" /> 值。</param>
      <returns>有关此成员的说明，请参阅 <see cref="M:System.Collections.IList.Add(System.Object)" />。</returns>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#Clear">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.Collections.IList.Clear" />。</summary>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#Contains(System.Object)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.Collections.IList.Contains(System.Object)" />。</summary>
      <param name="value">一个 <see cref="System.Object" /> 值。</param>
      <returns>有关此成员的说明，请参阅 <see cref="M:System.Collections.IList.Contains(System.Object)" />。</returns>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#IndexOf(System.Object)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.Collections.IList.IndexOf(System.Object)" />。</summary>
      <param name="value">一个 <see cref="System.Object" /> 值。</param>
      <returns>有关此成员的说明，请参阅 <see cref="M:System.Collections.IList.IndexOf(System.Object)" />。</returns>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />。</summary>
      <param name="index">一个 <see cref="System.Int32" /> 值。</param>
      <param name="value">要插入的 <see cref="System.Object" /> 值。</param>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#Remove(System.Object)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.Collections.IList.Remove(System.Object)" />。</summary>
      <param name="value">一个 <see cref="System.Object" /> 值。</param>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.Collections.IList.RemoveAt(System.Int32)" />。</summary>
      <param name="index">一个 <see cref="System.Int32" /> 值。</param>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)" />。</summary>
      <param name="property">一个 <see cref="System.ComponentModel.PropertyDescriptor" /> 对象。</param>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#AddNew">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.IBindingList.AddNew" />。</summary>
      <returns>添加到列表的项。</returns>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />。</summary>
      <param name="property">一个 <see cref="System.ComponentModel.PropertyDescriptor" /> 对象。</param>
      <param name="direction">一个 <see cref="System.ComponentModel.ListSortDirection" /> 对象。</param>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />。</summary>
      <param name="property">一个 <see cref="System.ComponentModel.PropertyDescriptor" /> 对象。</param>
      <param name="key">一个 <see cref="System.Object" /> 值。</param>
      <returns>有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />。</returns>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)" />。</summary>
      <param name="property">一个 <see cref="System.ComponentModel.PropertyDescriptor" /> 对象。</param>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#RemoveSort">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.IBindingList.RemoveSort" />。</summary>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingListView#ApplySort(System.ComponentModel.ListSortDescriptionCollection)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)" />。</summary>
      <param name="sorts">一个 <see cref="System.ComponentModel.ListSortDescriptionCollection" /> 对象。</param>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingListView#RemoveFilter">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.IBindingListView.RemoveFilter" />。</summary>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#ITypedList#GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])" />。</summary>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#ITypedList#GetListName(System.ComponentModel.PropertyDescriptor[])">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])" />。</summary>
      <param name="listAccessors">一个 <see cref="System.ComponentModel.PropertyDescriptor" /> 对象数组。</param>
      <returns>有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])" />。</returns>
    </member>
    <member name="M:System.Data.DataView.ToTable">
      <summary>基于现有的 <see cref="T:System.Data.DataView" /> 中的行，创建并返回一个新的 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>一个新 <see cref="T:System.Data.DataTable" /> 实例，其中包含请求的行和列。</returns>
    </member>
    <member name="M:System.Data.DataView.ToTable(System.Boolean,System.String[])">
      <summary>基于现有的 <see cref="T:System.Data.DataView" /> 中的行，创建并返回一个新的 <see cref="T:System.Data.DataTable" />。</summary>
      <param name="distinct">如果为 true，则返回的 <see cref="T:System.Data.DataTable" /> 包含具有与其所有列不同的值的行。 默认值为 false。</param>
      <param name="columnNames">一个字符串数组，其中的一个列名称列表将包括在返回的 <see cref="T:System.Data.DataTable" /> 中。<see cref="T:System.Data.DataTable" /> 包含指定的列，这些列按其在该数组中显示的顺序排列。</param>
      <returns>一个新 <see cref="T:System.Data.DataTable" /> 实例，其中包含请求的行和列。</returns>
    </member>
    <member name="M:System.Data.DataView.ToTable(System.String)">
      <summary>基于现有的 <see cref="T:System.Data.DataView" /> 中的行，创建并返回一个新的 <see cref="T:System.Data.DataTable" />。</summary>
      <param name="tableName">返回的 <see cref="T:System.Data.DataTable" /> 的名称。</param>
      <returns>一个新 <see cref="T:System.Data.DataTable" /> 实例，其中包含请求的行和列。</returns>
    </member>
    <member name="M:System.Data.DataView.ToTable(System.String,System.Boolean,System.String[])">
      <summary>基于现有的 <see cref="T:System.Data.DataView" /> 中的行，创建并返回一个新的 <see cref="T:System.Data.DataTable" />。</summary>
      <param name="tableName">返回的 <see cref="T:System.Data.DataTable" /> 的名称。</param>
      <param name="distinct">如果为 true，则返回的 <see cref="T:System.Data.DataTable" /> 包含具有与其所有列不同的值的行。 默认值为 false。</param>
      <param name="columnNames">一个字符串数组，其中的一个列名称列表将包括在返回的 <see cref="T:System.Data.DataTable" /> 中。DataTable 包含指定的列，这些列按其在该数组中显示的顺序排列。</param>
      <returns>一个新 <see cref="T:System.Data.DataTable" /> 实例，其中包含请求的行和列。</returns>
    </member>
    <member name="M:System.Data.DataView.UpdateIndex">
      <summary>保留以仅供内部使用。</summary>
    </member>
    <member name="M:System.Data.DataView.UpdateIndex(System.Boolean)">
      <summary>保留以仅供内部使用。</summary>
      <param name="force">保留以仅供内部使用。</param>
    </member>
    <member name="M:System.Data.DataViewManager.#ctor">
      <summary>初始化 <see cref="T:System.Data.DataViewManager" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.DataViewManager.#ctor(System.Data.DataSet)">
      <summary>为指定的 <see cref="T:System.Data.DataSet" /> 初始化 <see cref="T:System.Data.DataViewManager" /> 类的新实例。</summary>
      <param name="dataSet">要使用的 <see cref="T:System.Data.DataSet" /> 的名称。</param>
    </member>
    <member name="M:System.Data.DataViewManager.CreateDataView(System.Data.DataTable)">
      <summary>创建 <see cref="T:System.Data.DataView" /> 指定 <see cref="T:System.Data.DataTable" />。</summary>
      <param name="table">名称 <see cref="T:System.Data.DataTable" /> 用于 <see cref="T:System.Data.DataView" />。</param>
      <returns>一个 <see cref="T:System.Data.DataView" /> 对象。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>引发 <see cref="E:System.Data.DataViewManager.ListChanged" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.ListChangedEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataViewManager.RelationCollectionChanged(System.Object,System.ComponentModel.CollectionChangeEventArgs)">
      <summary>引发 <see cref="E:System.Data.DataRelationCollection.CollectionChanged" /> 事件时 <see cref="T:System.Data.DataRelation" /> 添加或删除从 <see cref="T:System.Data.DataRelationCollection" />。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从特定的 <see cref="T:System.Collections.ICollection" /> 索引处开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IEnumerable#GetEnumerator">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.Collections.IEnumerable.GetEnumerator" />。</summary>
      <returns>有关此成员的说明，请参阅 <see cref="M:System.Collections.IEnumerable.GetEnumerator" />。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#Add(System.Object)">
      <summary>将某项添加到 <see cref="T:System.Collections.IList" /> 中。</summary>
      <param name="value">要添加到 <see cref="T:System.Object" /> 的 <see cref="T:System.Collections.IList" />。</param>
      <returns>新元素的插入位置。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#Clear">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.Collections.IList.Clear" />。</summary>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#Contains(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IList" /> 是否包含特定值。</summary>
      <param name="value">要在 <see cref="T:System.Object" /> 中定位的 <see cref="T:System.Collections.IList" />。</param>
      <returns>如果在 <see cref="T:System.Collections.IList" /> 中找到了 <see cref="T:System.Object" />，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#IndexOf(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IList" /> 中特定项的索引。</summary>
      <param name="value">要在 <see cref="T:System.Object" /> 中定位的 <see cref="T:System.Collections.IList" />。</param>
      <returns>如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>在 <see cref="T:System.Collections.IList" /> 中的指定索引处插入一个项。</summary>
      <param name="index">应插入 <paramref name="value" /> 的从零开始的索引。</param>
      <param name="value">
        <see cref="T:System.Object" /> 要插入到 <see cref="T:System.Collections.IList" />。</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.IList" /> 中移除特定对象的第一个匹配项。</summary>
      <param name="value">要从 <see cref="T:System.Object" /> 移除的 <see cref="T:System.Collections.IList" />。</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>移除位于指定索引处的 <see cref="T:System.Collections.IList" /> 项。</summary>
      <param name="index">要移除的项的从零开始的索引。</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>添加 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 到用于搜索的索引。</summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 将添加到用于搜索的索引。</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#AddNew">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.IBindingList.AddNew" />。</summary>
      <returns>有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.IBindingList.AddNew" />。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>对基于列表进行排序 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 和 <see cref="T:System.ComponentModel.ListSortDirection" />。</summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 要作为排序依据。</param>
      <param name="direction">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 值之一。</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>返回具有的行的索引给定 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 要搜索的。</param>
      <param name="key">要搜索的属性参数的值。</param>
      <returns>具有的行的索引给定 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>删除 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 从用于搜索的索引。</summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 从用于搜索的索引中删除。</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#RemoveSort">
      <summary>删除应用使用的任何排序 <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />。</summary>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#ITypedList#GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])" />。</summary>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#ITypedList#GetListName(System.ComponentModel.PropertyDescriptor[])">
      <summary>返回列表的名称。</summary>
      <param name="listAccessors">一个数组 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象，为其返回的列表名称。 这可能是 null。</param>
      <returns>列表的名称。</returns>
    </member>
    <member name="M:System.Data.DataViewManager.TableCollectionChanged(System.Object,System.ComponentModel.CollectionChangeEventArgs)">
      <summary>引发 <see cref="E:System.Data.DataTableCollection.CollectionChanged" /> 事件时 <see cref="T:System.Data.DataTable" /> 添加或删除从 <see cref="T:System.Data.DataTableCollection" />。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />。</param>
    </member>
    <member name="M:System.Data.DataViewSettingCollection.CopyTo(System.Array,System.Int32)">
      <summary>将集合对象复制到一维 <see cref="T:System.Array" /> 实例的指定索引处开始。</summary>
      <param name="ar">一维 <see cref="T:System.Array" /> 从集合复制的值的目标。</param>
      <param name="index">插入操作开始处的数组的索引。</param>
    </member>
    <member name="M:System.Data.DataViewSettingCollection.CopyTo(System.Data.DataViewSetting[],System.Int32)">
      <summary>将集合对象复制到一维 <see cref="T:System.Array" /> 实例的指定索引处开始。</summary>
      <param name="ar">一维 <see cref="T:System.Array" /> 从集合复制的值的目标。</param>
      <param name="index">插入操作开始处的数组的索引。</param>
    </member>
    <member name="M:System.Data.DataViewSettingCollection.GetEnumerator">
      <summary>获取 <see cref="T:System.Collections.IEnumerator" /> 找不到。</summary>
      <returns>一个 <see cref="T:System.Collections.IEnumerator" /> 对象。</returns>
    </member>
    <member name="M:System.Data.DBConcurrencyException.#ctor">
      <summary>初始化 <see cref="T:System.Data.DBConcurrencyException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.DBConcurrencyException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.DBConcurrencyException" /> 类的新实例。</summary>
      <param name="message">描述异常的详细信息的文本字符串。</param>
    </member>
    <member name="M:System.Data.DBConcurrencyException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Data.DBConcurrencyException" /> 类的新实例。</summary>
      <param name="message">描述异常的详细信息的文本字符串。</param>
      <param name="inner">对内部异常的引用。</param>
    </member>
    <member name="M:System.Data.DBConcurrencyException.#ctor(System.String,System.Exception,System.Data.DataRow[])">
      <summary>初始化 <see cref="T:System.Data.DBConcurrencyException" /> 类的新实例。</summary>
      <param name="message">解释此异常原因的错误信息。</param>
      <param name="inner">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
      <param name="dataRows">一个数组，包含 <see cref="T:System.Data.DataRow" /> 因更新失败而导致产生此异常的对象。</param>
    </member>
    <member name="M:System.Data.DBConcurrencyException.CopyToRows(System.Data.DataRow[])">
      <summary>副本 <see cref="T:System.Data.DataRow" /> 因更新失败而导致生成此异常时，为指定的数组对象 <see cref="T:System.Data.DataRow" /> 对象。</summary>
      <param name="array">一维数组 <see cref="T:System.Data.DataRow" /> 对象复制 <see cref="T:System.Data.DataRow" /> 将对象插入。</param>
    </member>
    <member name="M:System.Data.DBConcurrencyException.CopyToRows(System.Data.DataRow[],System.Int32)">
      <summary>副本 <see cref="T:System.Data.DataRow" /> 因更新失败而导致生成此异常时，为指定的数组对象 <see cref="T:System.Data.DataRow" /> 对象，指定的目标数组索引处开始。</summary>
      <param name="array">一维数组 <see cref="T:System.Data.DataRow" /> 对象复制 <see cref="T:System.Data.DataRow" /> 将对象插入。</param>
      <param name="arrayIndex">要开始复制到的目标数组索引。</param>
    </member>
    <member name="M:System.Data.DBConcurrencyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化所需的数据填充指定的序列化信息对象 <see cref="T:System.Data.DBConcurrencyException" />。</summary>
      <param name="si">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它保存与 <see cref="T:System.Data.DBConcurrencyException" /> 关联的序列化数据。</param>
      <param name="context">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含与 <see cref="T:System.Data.DBConcurrencyException" /> 关联的序列化流的源和目标。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 参数为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="M:System.Data.DeletedRowInaccessibleException.#ctor">
      <summary>初始化 <see cref="T:System.Data.DeletedRowInaccessibleException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.DeletedRowInaccessibleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>新实例初始化 <see cref="T:System.Data.DeletedRowInaccessibleException" /> 用序列化信息的类。</summary>
      <param name="info">要序列化或反序列化对象所需的数据。</param>
      <param name="context">源和目标的指定的序列化流的说明。</param>
    </member>
    <member name="M:System.Data.DeletedRowInaccessibleException.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Data.DeletedRowInaccessibleException" /> 类，具有指定的字符串。</summary>
      <param name="s">要在引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.DeletedRowInaccessibleException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.DeletedRowInaccessibleException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="M:System.Data.DuplicateNameException.#ctor">
      <summary>初始化 <see cref="T:System.Data.DuplicateNameException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.DuplicateNameException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>新实例初始化 <see cref="T:System.Data.DuplicateNameException" /> 用序列化信息的类。</summary>
      <param name="info">要序列化或反序列化对象所需的数据。</param>
      <param name="context">源和目标的指定的序列化流的说明。</param>
    </member>
    <member name="M:System.Data.DuplicateNameException.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Data.DuplicateNameException" /> 类，具有指定的字符串。</summary>
      <param name="s">要在引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.DuplicateNameException.#ctor(System.String,System.Exception)">
      <summary>新实例初始化 <see cref="T:System.Data.DuplicateNameException" /> 使用指定的字符串和异常类。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="M:System.Data.EvaluateException.#ctor">
      <summary>初始化 <see cref="T:System.Data.EvaluateException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.EvaluateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>新实例初始化 <see cref="T:System.Data.EvaluateException" /> 类 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</summary>
      <param name="info">要序列化或反序列化对象所需的数据。</param>
      <param name="context">源和目标的特定序列化的流。</param>
    </member>
    <member name="M:System.Data.EvaluateException.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Data.EvaluateException" /> 类，具有指定的字符串。</summary>
      <param name="s">要在引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.EvaluateException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.EvaluateException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="M:System.Data.FillErrorEventArgs.#ctor(System.Data.DataTable,System.Object[])">
      <summary>初始化 <see cref="T:System.Data.FillErrorEventArgs" /> 类的新实例。</summary>
      <param name="dataTable">
        <see cref="T:System.Data.DataTable" /> 正在更新。</param>
      <param name="values">正在更新的行的值。</param>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.Data.DataColumn,System.Data.DataColumn)">
      <summary>新实例初始化 <see cref="T:System.Data.ForeignKeyConstraint" /> 类，具有指定的父级和子级 <see cref="T:System.Data.DataColumn" /> 对象。</summary>
      <param name="parentColumn">父 <see cref="T:System.Data.DataColumn" /> 约束中。</param>
      <param name="childColumn">子 <see cref="T:System.Data.DataColumn" /> 约束中。</param>
      <exception cref="T:System.ArgumentNullException">一个或两个列 null。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">列具有不同的数据类型。-或者- 表不属于同一个 <see cref="T:System.Data.DataSet" />。</exception>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>新实例初始化 <see cref="T:System.Data.ForeignKeyConstraint" /> 类与指定的数组一起使用的父级和子级 <see cref="T:System.Data.DataColumn" /> 对象。</summary>
      <param name="parentColumns">数组的父 <see cref="T:System.Data.DataColumn" /> 约束中。</param>
      <param name="childColumns">子数组 <see cref="T:System.Data.DataColumn" /> 约束中。</param>
      <exception cref="T:System.ArgumentNullException">一个或两个列 null。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">列具有不同的数据类型。-或者- 表不属于同一个 <see cref="T:System.Data.DataSet" />。</exception>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.String,System.Data.DataColumn,System.Data.DataColumn)">
      <summary>新实例初始化 <see cref="T:System.Data.ForeignKeyConstraint" /> 类，具有指定的名称、 父级和子级 <see cref="T:System.Data.DataColumn" /> 对象。</summary>
      <param name="constraintName">约束的名称。</param>
      <param name="parentColumn">父 <see cref="T:System.Data.DataColumn" /> 约束中。</param>
      <param name="childColumn">子 <see cref="T:System.Data.DataColumn" /> 约束中。</param>
      <exception cref="T:System.ArgumentNullException">一个或两个列 null。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">列具有不同的数据类型。-或者- 表不属于同一个 <see cref="T:System.Data.DataSet" />。</exception>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.String,System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>新实例初始化 <see cref="T:System.Data.ForeignKeyConstraint" /> 带有指定的名称和父级和子级的数组类 <see cref="T:System.Data.DataColumn" /> 对象。</summary>
      <param name="constraintName">
        <see cref="T:System.Data.ForeignKeyConstraint" /> 的名称。 如果 null 或空字符串，将提供一个默认名称，添加到约束集合时。</param>
      <param name="parentColumns">数组的父 <see cref="T:System.Data.DataColumn" /> 约束中。</param>
      <param name="childColumns">子数组 <see cref="T:System.Data.DataColumn" /> 约束中。</param>
      <exception cref="T:System.ArgumentNullException">一个或两个列 null。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">列具有不同的数据类型。-或者- 表不属于同一个 <see cref="T:System.Data.DataSet" />。</exception>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.String,System.String,System.String,System.String[],System.String[],System.Data.AcceptRejectRule,System.Data.Rule,System.Data.Rule)">
      <summary>此构造函数用于在 Visual Studio 环境中的设计时支持。<see cref="T:System.Data.ForeignKeyConstraint" /> 然后必须通过向集合添加使用此构造函数创建的对象 <see cref="M:System.Data.ConstraintCollection.AddRange(System.Data.Constraint[])" />。 表和具有指定名称的列必须存在于调用该方法时，或者如果 <see cref="M:System.Data.DataTable.BeginInit" /> 已调用之前调用此构造函数、 表和具有指定名称的列时必须存在， <see cref="M:System.Data.DataTable.EndInit" /> 调用。</summary>
      <param name="constraintName">约束的名称。</param>
      <param name="parentTableName">父项的名称 <see cref="T:System.Data.DataTable" /> ，其中包含父 <see cref="T:System.Data.DataColumn" /> 约束中的对象。</param>
      <param name="parentTableNamespace">
        <see cref="P:System.Data.DataTable.Namespace" /> 的名称。</param>
      <param name="parentColumnNames">父项的名称的数组 <see cref="T:System.Data.DataColumn" /> 约束中的对象。</param>
      <param name="childColumnNames">名称的子数组 <see cref="T:System.Data.DataColumn" /> 约束中的对象。</param>
      <param name="acceptRejectRule">
        <see cref="T:System.Data.AcceptRejectRule" /> 值之一。 可能的值包括 None, ，Cascade, ，和 Default。</param>
      <param name="deleteRule">其中一个 <see cref="T:System.Data.Rule" /> 删除某行时要使用值。 默认值为 Cascade。 可能的值包括 ︰ None, ，Cascade, ，SetNull, ，SetDefault, ，和 Default。</param>
      <param name="updateRule">其中一个 <see cref="T:System.Data.Rule" /> 更新了某行时要使用值。 默认值为 Cascade。 可能的值包括 ︰ None, ，Cascade, ，SetNull, ，SetDefault, ，和 Default。</param>
      <exception cref="T:System.ArgumentNullException">一个或两个列 null。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">列具有不同的数据类型。-或者- 表不属于同一个 <see cref="T:System.Data.DataSet" />。</exception>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.String,System.String,System.String[],System.String[],System.Data.AcceptRejectRule,System.Data.Rule,System.Data.Rule)">
      <summary>此构造函数用于在 Visual Studio 环境中的设计时支持。<see cref="T:System.Data.ForeignKeyConstraint" /> 然后必须通过向集合添加使用此构造函数创建的对象 <see cref="M:System.Data.ConstraintCollection.AddRange(System.Data.Constraint[])" />。 表和具有指定名称的列必须存在于调用该方法时，或者如果 <see cref="M:System.Data.DataTable.BeginInit" /> 已调用之前调用此构造函数、 表和具有指定名称的列时必须存在， <see cref="M:System.Data.DataTable.EndInit" /> 调用。</summary>
      <param name="constraintName">约束的名称。</param>
      <param name="parentTableName">父项的名称 <see cref="T:System.Data.DataTable" /> ，其中包含父 <see cref="T:System.Data.DataColumn" /> 约束中的对象。</param>
      <param name="parentColumnNames">父项的名称的数组 <see cref="T:System.Data.DataColumn" /> 约束中的对象。</param>
      <param name="childColumnNames">名称的子数组 <see cref="T:System.Data.DataColumn" /> 约束中的对象。</param>
      <param name="acceptRejectRule">
        <see cref="T:System.Data.AcceptRejectRule" /> 值之一。 可能的值包括 None, ，Cascade, ，和 Default。</param>
      <param name="deleteRule">其中一个 <see cref="T:System.Data.Rule" /> 删除某行时要使用值。 默认值为 Cascade。 可能的值包括 ︰ None, ，Cascade, ，SetNull, ，SetDefault, ，和 Default。</param>
      <param name="updateRule">其中一个 <see cref="T:System.Data.Rule" /> 更新了某行时要使用值。 默认值为 Cascade。 可能的值包括 ︰ None, ，Cascade, ，SetNull, ，SetDefault, ，和 Default。</param>
      <exception cref="T:System.ArgumentNullException">一个或两个列 null。</exception>
      <exception cref="T:System.Data.InvalidConstraintException">列具有不同的数据类型。-或者- 表不属于同一个 <see cref="T:System.Data.DataSet" />。</exception>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.Equals(System.Object)">
      <summary>获取一个值，该值指示是否当前 <see cref="T:System.Data.ForeignKeyConstraint" /> 等同于指定的对象。</summary>
      <param name="key">与此对象 <see cref="T:System.Data.ForeignKeyConstraint" /> 进行比较。 两个 <see cref="T:System.Data.ForeignKeyConstraint" /> 相等，如果它们约束相同的列。</param>
      <returns>true, 如果对象是相同的;否则为 false。</returns>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.GetHashCode">
      <summary>获取此实例的哈希代码 <see cref="T:System.Data.ForeignKeyConstraint" /> 对象。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.IColumnMappingCollection.Add(System.String,System.String)">
      <summary>使用源列的列映射集合中添加列映射对象和 <see cref="T:System.Data.DataSet" /> 列名称。</summary>
      <param name="sourceColumnName">区分大小写的源列的名称。</param>
      <param name="dataSetColumnName">名称 <see cref="T:System.Data.DataSet" /> 列。</param>
      <returns>ColumnMapping 对象，该对象添加到集合。</returns>
    </member>
    <member name="M:System.Data.IColumnMappingCollection.Contains(System.String)">
      <summary>获取一个值，该值指示是否 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 包含 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象具有指定的源列名称。</summary>
      <param name="sourceColumnName">区分大小写的源列的名称。</param>
      <returns>true 如果 <see cref="T:System.Data.Common.DataColumnMapping" /> 具有指定的源列名称的对象存在，否则 false。</returns>
    </member>
    <member name="M:System.Data.IColumnMappingCollection.GetByDataSetColumn(System.String)">
      <summary>获取具有指定的列映射对象 <see cref="T:System.Data.DataSet" /> 列名称。</summary>
      <param name="dataSetColumnName">名称 <see cref="T:System.Data.DataSet" /> 列集合中的。</param>
      <returns>使用指定的列映射对象 DataSet 列名称。</returns>
    </member>
    <member name="M:System.Data.IColumnMappingCollection.IndexOf(System.String)">
      <summary>获取的位置 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象具有指定的源列名称。 名称是区分大小写。</summary>
      <param name="sourceColumnName">区分大小写的源列的名称。</param>
      <returns>从零开始的位置 DataColumnMapping 对象具有指定的源列名称。</returns>
    </member>
    <member name="M:System.Data.IColumnMappingCollection.RemoveAt(System.String)">
      <summary>删除 <see cref="T:System.Data.IColumnMapping" /> 对象具有指定 <see cref="P:System.Data.IColumnMapping.SourceColumn" /> 名称从集合。</summary>
      <param name="sourceColumnName">区分大小写 SourceColumn 名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">一个 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象不存在具有指定 SourceColumn 名称。</exception>
    </member>
    <member name="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)">
      <summary>添加或更新中的行 <see cref="T:System.Data.DataSet" /> 以匹配中使用数据源的那些 <see cref="T:System.Data.DataSet" /> 名称，然后创建 <see cref="T:System.Data.DataTable" /> 名为"Table"。</summary>
      <param name="dataSet">一个 <see cref="T:System.Data.DataSet" /> 要用记录填充并且如有必要，架构。</param>
      <returns>行数已成功添加到或在刷新 <see cref="T:System.Data.DataSet" />。 这不包括不返回行的语句影响的行。</returns>
    </member>
    <member name="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)">
      <summary>将名为“Table”的 <see cref="T:System.Data.DataTable" /> 添加到指定的 <see cref="T:System.Data.DataSet" />，并根据指定的 <see cref="T:System.Data.SchemaType" /> 配置架构以匹配数据源中的架构。</summary>
      <param name="dataSet">
        <see cref="T:System.Data.DataSet" /> 要填充数据源中的架构。</param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 值之一。</param>
      <returns>一个数组 <see cref="T:System.Data.DataTable" /> 从数据源中返回包含架构信息的对象。</returns>
    </member>
    <member name="M:System.Data.IDataAdapter.GetFillParameters">
      <summary>获取在执行 SQL SELECT 语句时由用户设置的参数。</summary>
      <returns>一个数组 <see cref="T:System.Data.IDataParameter" /> 由用户来设置包含的参数的对象。</returns>
    </member>
    <member name="M:System.Data.IDataAdapter.Update(System.Data.DataSet)">
      <summary>对于每个插入、 更新或删除了行中指定调用相应的 INSERT、 UPDATE 或 DELETE 语句 <see cref="T:System.Data.DataSet" /> 从 <see cref="T:System.Data.DataTable" /> 名为"Table"。</summary>
      <param name="dataSet">
        <see cref="T:System.Data.DataSet" /> 用于更新数据源。</param>
      <returns>从已成功更新的行数 <see cref="T:System.Data.DataSet" />。</returns>
      <exception cref="T:System.Data.DBConcurrencyException">尝试执行的 INSERT、 UPDATE 或 DELETE 语句导致受影响的零个记录。</exception>
    </member>
    <member name="M:System.Data.IDataParameterCollection.Contains(System.String)">
      <summary>获取一个值，该值指示是否在集合中的参数具有指定的名称。</summary>
      <param name="parameterName">参数的名称。</param>
      <returns>true 如果集合包含参数;否则为 false。</returns>
    </member>
    <member name="M:System.Data.IDataParameterCollection.IndexOf(System.String)">
      <summary>获取的位置 <see cref="T:System.Data.IDataParameter" /> 在集合中。</summary>
      <param name="parameterName">参数的名称。</param>
      <returns>从零开始的位置 <see cref="T:System.Data.IDataParameter" /> 在集合中。</returns>
    </member>
    <member name="M:System.Data.IDataParameterCollection.RemoveAt(System.String)">
      <summary>从集合中移除 <see cref="T:System.Data.IDataParameter" />。</summary>
      <param name="parameterName">参数的名称。</param>
    </member>
    <member name="M:System.Data.IDataReader.Close">
      <summary>关闭 <see cref="T:System.Data.IDataReader" /> 对象。</summary>
    </member>
    <member name="M:System.Data.IDataReader.GetSchemaTable">
      <summary>返回一个描述 <see cref="T:System.Data.DataTable" /> 的列元数据的 <see cref="T:System.Data.IDataReader" />。</summary>
      <returns>一个描述列元数据的 <see cref="T:System.Data.DataTable" />。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.IDataReader" /> 已关闭。</exception>
    </member>
    <member name="M:System.Data.IDataReader.NextResult">
      <summary>在读取批处理 SQL 语句的结果时，将数据读取器推进到下一个结果。</summary>
      <returns>true 如果有多个行;否则为 false。</returns>
    </member>
    <member name="M:System.Data.IDataReader.Read">
      <summary>前移 <see cref="T:System.Data.IDataReader" /> 到下一个记录。</summary>
      <returns>true 如果有多个行;否则为 false。</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetBoolean(System.Int32)">
      <summary>以布尔值的形式获取指定列的值。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>列的值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引超出了范围 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetByte(System.Int32)">
      <summary>获取指定列的 8 位无符号的整数值。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>指定列的 8 位无符号的整数值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引超出了范围 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>读取字节的流从指定的列偏移量到缓冲区作为一个数组，给定的缓冲区偏移量处开始。</summary>
      <param name="i">从零开始的列序号。</param>
      <param name="fieldOffset">中自其开始读取的操作的字段的索引。</param>
      <param name="buffer">若要读取的字节流读入的缓冲区。</param>
      <param name="bufferoffset">有关索引 <paramref name="buffer" /> 开始读取的操作。</param>
      <param name="length">要读取的字节数。</param>
      <returns>读取的实际字节数。</returns>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引超出了范围 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetChar(System.Int32)">
      <summary>获取指定列的字符值。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>指定列的字符值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引超出了范围 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>读取字符流，从指定的列偏移量到缓冲区作为一个数组，从给定的缓冲区偏移量开始。</summary>
      <param name="i">从零开始的列序号。</param>
      <param name="fieldoffset">从其开始读取的操作的行中的索引。</param>
      <param name="buffer">若要读取的字节流读入的缓冲区。</param>
      <param name="bufferoffset">有关索引 <paramref name="buffer" /> 开始读取的操作。</param>
      <param name="length">要读取的字节数。</param>
      <returns>读取的实际字符数。</returns>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引超出了范围 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetData(System.Int32)">
      <summary>返回 <see cref="T:System.Data.IDataReader" /> 指定的列序号。</summary>
      <param name="i">要查找的字段的索引。</param>
      <returns>
        <see cref="T:System.Data.IDataReader" /> 指定的列序号。</returns>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引超出了范围 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetDataTypeName(System.Int32)">
      <summary>获取指定字段的数据类型信息。</summary>
      <param name="i">要查找的字段的索引。</param>
      <returns>数据类型指定字段的信息。</returns>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引超出了范围 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetDateTime(System.Int32)">
      <summary>获取指定字段的日期和时间数据值。</summary>
      <param name="i">要查找的字段的索引。</param>
      <returns>指定字段的日期和时间数据值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引超出了范围 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetDecimal(System.Int32)">
      <summary>获取指定字段的数值固定位置。</summary>
      <param name="i">要查找的字段的索引。</param>
      <returns>指定字段固定位置数字值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引超出了范围 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetDouble(System.Int32)">
      <summary>获取指定字段的双精度浮点数。</summary>
      <param name="i">要查找的字段的索引。</param>
      <returns>双精度浮点数的指定字段。</returns>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引超出了范围 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetFieldType(System.Int32)">
      <summary>获取 <see cref="T:System.Type" /> 信息对应的一种 <see cref="T:System.Object" /> ，则会返回从 <see cref="M:System.Data.IDataRecord.GetValue(System.Int32)" />。</summary>
      <param name="i">要查找的字段的索引。</param>
      <returns>
        <see cref="T:System.Type" /> 信息对应的一种 <see cref="T:System.Object" /> ，则会返回从 <see cref="M:System.Data.IDataRecord.GetValue(System.Int32)" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引超出了范围 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetFloat(System.Int32)">
      <summary>获取指定字段的单精度浮点数。</summary>
      <param name="i">要查找的字段的索引。</param>
      <returns>单精度浮点数的指定字段。</returns>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引超出了范围 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetGuid(System.Int32)">
      <summary>返回指定字段的 GUID 值。</summary>
      <param name="i">要查找的字段的索引。</param>
      <returns>指定字段的 GUID 值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引超出了范围 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetInt16(System.Int32)">
      <summary>获取指定字段的 16 位有符号的整数值。</summary>
      <param name="i">要查找的字段的索引。</param>
      <returns>指定字段的 16 位带符号的整数值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引超出了范围 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetInt32(System.Int32)">
      <summary>获取指定字段的 32 位有符号的整数值。</summary>
      <param name="i">要查找的字段的索引。</param>
      <returns>指定字段的 32 位有符号的整数值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引超出了范围 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetInt64(System.Int32)">
      <summary>获取指定字段的 64 位有符号的整数值。</summary>
      <param name="i">要查找的字段的索引。</param>
      <returns>指定字段的 64 位带符号的整数值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引超出了范围 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetName(System.Int32)">
      <summary>获取要查找的字段的名称。</summary>
      <param name="i">要查找的字段的索引。</param>
      <returns>名称的字段或空字符串 ("")，如果要返回的值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引超出了范围 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetOrdinal(System.String)">
      <summary>返回命名字段的索引。</summary>
      <param name="name">要查找的字段的名称。</param>
      <returns>命名字段的索引。</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetString(System.Int32)">
      <summary>获取指定字段的字符串值。</summary>
      <param name="i">要查找的字段的索引。</param>
      <returns>指定字段的字符串值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引超出了范围 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetValue(System.Int32)">
      <summary>返回指定字段的值。</summary>
      <param name="i">要查找的字段的索引。</param>
      <returns>
        <see cref="T:System.Object" /> 它将包含在返回的字段值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引超出了范围 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />。</exception>
    </member>
    <member name="M:System.Data.IDataRecord.GetValues(System.Object[])">
      <summary>使用来填充数组的对象的当前记录的列的值。</summary>
      <param name="values">一个数组 <see cref="T:System.Object" /> 要复制到的属性字段。</param>
      <returns>数组中的 <see cref="T:System.Object" /> 实例数。</returns>
    </member>
    <member name="M:System.Data.IDataRecord.IsDBNull(System.Int32)">
      <summary>返回指示指定的字段是否设置为 null。</summary>
      <param name="i">要查找的字段的索引。</param>
      <returns>true 如果指定的字段是否设置为 null;否则为 false。</returns>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引超出了范围 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />。</exception>
    </member>
    <member name="M:System.Data.IDbCommand.Cancel">
      <summary>尝试取消执行 <see cref="T:System.Data.IDbCommand" />。</summary>
    </member>
    <member name="M:System.Data.IDbCommand.CreateParameter">
      <summary>创建的新实例 <see cref="T:System.Data.IDbDataParameter" /> 对象。</summary>
      <returns>一个 IDbDataParameter 对象。</returns>
    </member>
    <member name="M:System.Data.IDbCommand.ExecuteNonQuery">
      <summary>执行 SQL 语句针对 Connection 对象的.NET Framework 数据提供程序，并返回受影响的行数。</summary>
      <returns>受影响的行数。</returns>
      <exception cref="T:System.InvalidOperationException">该连接不存在。- 或 - 连接未打开。</exception>
    </member>
    <member name="M:System.Data.IDbCommand.ExecuteReader">
      <summary>执行 <see cref="P:System.Data.IDbCommand.CommandText" /> 针对 <see cref="P:System.Data.IDbCommand.Connection" /> 并生成 <see cref="T:System.Data.IDataReader" />。</summary>
      <returns>一个 <see cref="T:System.Data.IDataReader" /> 对象。</returns>
    </member>
    <member name="M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)">
      <summary>执行 <see cref="P:System.Data.IDbCommand.CommandText" /> 针对 <see cref="P:System.Data.IDbCommand.Connection" />, ，并生成 <see cref="T:System.Data.IDataReader" /> 使用一种 <see cref="T:System.Data.CommandBehavior" /> 值。</summary>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。</param>
      <returns>一个 <see cref="T:System.Data.IDataReader" /> 对象。</returns>
    </member>
    <member name="M:System.Data.IDbCommand.ExecuteScalar">
      <summary>执行查询，并由查询返回的结果集中返回的第一行的第一列。 额外的列或行将被忽略。</summary>
      <returns>在结果集中的第一行的第一列。</returns>
    </member>
    <member name="M:System.Data.IDbCommand.Prepare">
      <summary>在数据源上创建命令的已准备好 （或已编译） 版本。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Data.OleDb.OleDbCommand.Connection" /> 未设置。- 或 - <see cref="P:System.Data.OleDb.OleDbCommand.Connection" /> 不为 <see cref="M:System.Data.OleDb.OleDbConnection.Open" />。</exception>
    </member>
    <member name="M:System.Data.IDbConnection.BeginTransaction">
      <summary>开始一项数据库事务。</summary>
      <returns>表示新事务的对象。</returns>
    </member>
    <member name="M:System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel)">
      <summary>开始数据库事务具有指定 <see cref="T:System.Data.IsolationLevel" /> 值。</summary>
      <param name="il">
        <see cref="T:System.Data.IsolationLevel" /> 值之一。</param>
      <returns>表示新事务的对象。</returns>
    </member>
    <member name="M:System.Data.IDbConnection.ChangeDatabase(System.String)">
      <summary>更改当前数据库已打开 Connection 对象。</summary>
      <param name="databaseName">要代替当前数据库的数据库的名称。</param>
    </member>
    <member name="M:System.Data.IDbConnection.Close">
      <summary>关闭与数据库之间的连接。</summary>
    </member>
    <member name="M:System.Data.IDbConnection.CreateCommand">
      <summary>创建并返回与连接关联的命令对象。</summary>
      <returns>与连接关联的命令对象。</returns>
    </member>
    <member name="M:System.Data.IDbConnection.Open">
      <summary>打开数据库连接指定的设置与 ConnectionString 特定于提供程序连接对象的属性。</summary>
    </member>
    <member name="M:System.Data.IDbTransaction.Commit">
      <summary>提交数据库事务。</summary>
      <exception cref="T:System.Exception">在尝试提交事务时出错。</exception>
      <exception cref="T:System.InvalidOperationException">已提交或回滚事务。- 或 - 连接已断开。</exception>
    </member>
    <member name="M:System.Data.IDbTransaction.Rollback">
      <summary>从挂起状态回滚事务。</summary>
      <exception cref="T:System.Exception">在尝试提交事务时出错。</exception>
      <exception cref="T:System.InvalidOperationException">已提交或回滚事务。- 或 - 连接已断开。</exception>
    </member>
    <member name="M:System.Data.InRowChangingEventException.#ctor">
      <summary>初始化 <see cref="T:System.Data.InRowChangingEventException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.InRowChangingEventException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>新实例初始化 <see cref="T:System.Data.InRowChangingEventException" /> 用序列化信息的类。</summary>
      <param name="info">要序列化或反序列化对象所需的数据。</param>
      <param name="context">源和目标的指定的序列化流的说明。</param>
    </member>
    <member name="M:System.Data.InRowChangingEventException.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Data.InRowChangingEventException" /> 类，具有指定的字符串。</summary>
      <param name="s">要在引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.InRowChangingEventException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.InRowChangingEventException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="M:System.Data.InternalDataCollectionBase.#ctor">
      <summary>初始化 <see cref="T:System.Data.InternalDataCollectionBase" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.InternalDataCollectionBase.CopyTo(System.Array,System.Int32)">
      <summary>当前的所有元素都复制 <see cref="T:System.Data.InternalDataCollectionBase" /> 到一维 <see cref="T:System.Array" />, 处指定开始 <see cref="T:System.Data.InternalDataCollectionBase" /> 索引。</summary>
      <param name="ar">一维 <see cref="T:System.Array" /> 要复制当前 <see cref="T:System.Data.InternalDataCollectionBase" /> 到对象的元素。</param>
      <param name="index">目标 <see cref="T:System.Array" /> 开始复制到的索引。</param>
    </member>
    <member name="M:System.Data.InternalDataCollectionBase.GetEnumerator">
      <summary>获取 <see cref="T:System.Collections.IEnumerator" /> 找不到。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 找不到。</returns>
    </member>
    <member name="M:System.Data.InvalidConstraintException.#ctor">
      <summary>初始化 <see cref="T:System.Data.InvalidConstraintException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.InvalidConstraintException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>新实例初始化 <see cref="T:System.Data.InvalidConstraintException" /> 用序列化信息的类。</summary>
      <param name="info">要序列化或反序列化对象所需的数据。</param>
      <param name="context">源和目标的指定的序列化流的说明。</param>
    </member>
    <member name="M:System.Data.InvalidConstraintException.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Data.InvalidConstraintException" /> 类，具有指定的字符串。</summary>
      <param name="s">要在引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.InvalidConstraintException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.InvalidConstraintException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="M:System.Data.InvalidExpressionException.#ctor">
      <summary>初始化 <see cref="T:System.Data.InvalidExpressionException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.InvalidExpressionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>新实例初始化 <see cref="T:System.Data.InvalidExpressionException" /> 类 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</summary>
      <param name="info">要序列化或反序列化对象所需的数据。</param>
      <param name="context">源和给定序列化流的目标。</param>
    </member>
    <member name="M:System.Data.InvalidExpressionException.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Data.InvalidExpressionException" /> 类，具有指定的字符串。</summary>
      <param name="s">要在引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.InvalidExpressionException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.InvalidExpressionException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="M:System.Data.ITableMappingCollection.Add(System.String,System.String)">
      <summary>将表映射添加到集合。</summary>
      <param name="sourceTableName">区分大小写的源表的名称。</param>
      <param name="dataSetTableName">名称 <see cref="T:System.Data.DataSet" /> 表。</param>
      <returns>对新映射的引用 <see cref="T:System.Data.ITableMapping" /> 对象。</returns>
    </member>
    <member name="M:System.Data.ITableMappingCollection.Contains(System.String)">
      <summary>获取一个值，该值指示集合是否包含具有指定的源的表名称的表映射。</summary>
      <param name="sourceTableName">区分大小写的源表的名称。</param>
      <returns>true 如果具有指定的源的表名称的表映射存在，否则 false。</returns>
    </member>
    <member name="M:System.Data.ITableMappingCollection.GetByDataSetTable(System.String)">
      <summary>获取具有指定的 TableMapping 对象 <see cref="T:System.Data.DataSet" /> 表名。</summary>
      <param name="dataSetTableName">名称 DataSet 在集合中的表。</param>
      <returns>使用指定的 TableMapping 对象 DataSet 表名。</returns>
    </member>
    <member name="M:System.Data.ITableMappingCollection.IndexOf(System.String)">
      <summary>获取的位置 <see cref="T:System.Data.ITableMapping" /> 在集合中的对象。</summary>
      <param name="sourceTableName">区分大小写的源表的名称。</param>
      <returns>从零开始的位置 <see cref="T:System.Data.ITableMapping" /> 在集合中的对象。</returns>
    </member>
    <member name="M:System.Data.ITableMappingCollection.RemoveAt(System.String)">
      <summary>删除 <see cref="T:System.Data.ITableMapping" /> 对象具有指定 <see cref="P:System.Data.ITableMapping.SourceTable" /> 名称从集合。</summary>
      <param name="sourceTableName">区分大小写名称 SourceTable。</param>
    </member>
    <member name="M:System.Data.MergeFailedEventArgs.#ctor(System.Data.DataTable,System.String)">
      <summary>新实例初始化 <see cref="T:System.Data.MergeFailedEventArgs" /> 类 <see cref="T:System.Data.DataTable" /> 和合并冲突的说明。</summary>
      <param name="table">
        <see cref="T:System.Data.DataTable" /> 对象。</param>
      <param name="conflict">合并冲突的说明。</param>
    </member>
    <member name="M:System.Data.MissingPrimaryKeyException.#ctor">
      <summary>初始化 <see cref="T:System.Data.MissingPrimaryKeyException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.MissingPrimaryKeyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>新实例初始化 <see cref="T:System.Data.MissingPrimaryKeyException" /> 用序列化信息的类。</summary>
      <param name="info">要序列化或反序列化对象所需的数据。</param>
      <param name="context">源和目标的指定的序列化流的说明。</param>
    </member>
    <member name="M:System.Data.MissingPrimaryKeyException.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Data.MissingPrimaryKeyException" /> 类，具有指定的字符串。</summary>
      <param name="s">要在引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.MissingPrimaryKeyException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.MissingPrimaryKeyException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="M:System.Data.NoNullAllowedException.#ctor">
      <summary>初始化 <see cref="T:System.Data.NoNullAllowedException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.NoNullAllowedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>新实例初始化 <see cref="T:System.Data.NoNullAllowedException" /> 用序列化信息的类。</summary>
      <param name="info">要序列化或反序列化对象所需的数据。</param>
      <param name="context">源和目标的指定的序列化流的说明。</param>
    </member>
    <member name="M:System.Data.NoNullAllowedException.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Data.NoNullAllowedException" /> 类，具有指定的字符串。</summary>
      <param name="s">要在引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.NoNullAllowedException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.NoNullAllowedException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommand.#ctor">
      <summary>初始化 <see cref="T:System.Data.Odbc.OdbcCommand" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommand.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Data.Odbc.OdbcCommand" /> 用文本的查询的类。</summary>
      <param name="cmdText">查询的文本。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommand.#ctor(System.String,System.Data.Odbc.OdbcConnection)">
      <summary>新实例初始化 <see cref="T:System.Data.Odbc.OdbcCommand" /> 用文本的查询的类和一个 <see cref="T:System.Data.Odbc.OdbcConnection" /> 对象。</summary>
      <param name="cmdText">查询的文本。</param>
      <param name="connection">
        <see cref="T:System.Data.Odbc.OdbcConnection" /> 对象，表示与数据源的连接。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommand.#ctor(System.String,System.Data.Odbc.OdbcConnection,System.Data.Odbc.OdbcTransaction)">
      <summary>新实例初始化 <see cref="T:System.Data.Odbc.OdbcCommand" /> 类用文本的查询、 查询 <see cref="T:System.Data.Odbc.OdbcConnection" /> 对象，与 <see cref="P:System.Data.Odbc.OdbcCommand.Transaction" />。</summary>
      <param name="cmdText">查询的文本。</param>
      <param name="connection">
        <see cref="T:System.Data.Odbc.OdbcConnection" /> 对象，表示与数据源的连接。</param>
      <param name="transaction">在其中事务 <see cref="T:System.Data.Odbc.OdbcCommand" /> 执行。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommand.Cancel">
      <summary>尝试取消执行 <see cref="T:System.Data.Odbc.OdbcCommand" />。</summary>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommand.CreateParameter">
      <summary>创建的新实例 <see cref="T:System.Data.Odbc.OdbcParameter" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Data.Odbc.OdbcParameter" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommand.ExecuteNonQuery">
      <summary>执行 SQL 语句针对 <see cref="P:System.Data.Odbc.OdbcCommand.Connection" /> ，并返回受影响的行数。</summary>
      <returns>对于 UPDATE、 INSERT 和 DELETE 语句，返回值是由该命令影响的行数。 对于所有其他类型的语句，则返回值为-1。</returns>
      <exception cref="T:System.InvalidOperationException">该连接不存在。- 或 - 连接未打开。</exception>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommand.ExecuteReader">
      <summary>将发送 <see cref="P:System.Data.Odbc.OdbcCommand.CommandText" /> 到 <see cref="P:System.Data.Odbc.OdbcCommand.Connection" /> 并生成 <see cref="T:System.Data.Odbc.OdbcDataReader" />。</summary>
      <returns>一个 <see cref="T:System.Data.Odbc.OdbcDataReader" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommand.ExecuteReader(System.Data.CommandBehavior)">
      <summary>将发送 <see cref="P:System.Data.Odbc.OdbcCommand.CommandText" /> 到 <see cref="P:System.Data.Odbc.OdbcCommand.Connection" />, ，并生成 <see cref="T:System.Data.Odbc.OdbcDataReader" /> 使用一种 CommandBehavior 值。</summary>
      <param name="behavior">System.Data.CommandBehavior 值之一。</param>
      <returns>一个 <see cref="T:System.Data.Odbc.OdbcDataReader" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommand.ExecuteScalar">
      <summary>执行查询，并返回由查询返回的结果集中的第一行的第一列。 其他列或行将被忽略。</summary>
      <returns>在结果中的第一行的第一列设置，或为 null 引用的结果集是否为空。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommand.Prepare">
      <summary>在数据源中创建该命令的准备好的或已编译版本。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Data.Odbc.OdbcCommand.Connection" /> 未设置。- 或 - <see cref="P:System.Data.Odbc.OdbcCommand.Connection" /> 不为 <see cref="!:System.Data.Odbc.OdbcConnection.Open" />。</exception>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommand.ResetCommandTimeout">
      <summary>重置 <see cref="P:System.Data.Odbc.OdbcCommand.CommandTimeout" /> 属性设置为默认值。</summary>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommand.System#ICloneable#Clone">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.ICloneable.Clone" />。</summary>
      <returns>一个新 <see cref="T;System.Object" /> ，它是此实例的副本。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommandBuilder.#ctor">
      <summary>初始化 <see cref="T:System.Data.Odbc.OdbcCommandBuilder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommandBuilder.#ctor(System.Data.Odbc.OdbcDataAdapter)">
      <summary>新实例初始化 <see cref="T:System.Data.Odbc.OdbcCommandBuilder" /> 使用关联的类 <see cref="T:System.Data.Odbc.OdbcDataAdapter" /> 对象。</summary>
      <param name="adapter">
        <see cref="T:System.Data.Odbc.OdbcDataAdapter" /> 要与此关联对象 <see cref="T:System.Data.Odbc.OdbcCommandBuilder" />。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommandBuilder.DeriveParameters(System.Data.Odbc.OdbcCommand)">
      <summary>从在指定的存储过程中检索参数信息 <see cref="T:System.Data.Odbc.OdbcCommand" /> 并填充 <see cref="P:System.Data.Odbc.OdbcCommand.Parameters" /> 的指定集合 <see cref="T:System.Data.Odbc.OdbcCommand" /> 对象。</summary>
      <param name="command">
        <see cref="T:System.Data.Odbc.OdbcCommand" /> 引用存储的过程将为派生参数信息。 派生的参数添加到 <see cref="P:System.Data.Odbc.OdbcCommand.Parameters" /> 集合 <see cref="T:System.Data.Odbc.OdbcCommand" />。</param>
      <exception cref="T:System.InvalidOperationException">基础 ODBC 驱动程序不支持返回存储的过程参数信息，或命令文本不是有效的存储的过程名称，或 <see cref="T:System.Data.CommandType" /> 指定未 CommandType.StoredProcedure。</exception>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommandBuilder.GetDeleteCommand">
      <summary>获取自动生成 <see cref="T:System.Data.Odbc.OdbcCommand" /> 对象所需执行删除操作在数据源。</summary>
      <returns>自动生成 <see cref="T:System.Data.Odbc.OdbcCommand" /> 对象所需执行删除操作。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommandBuilder.GetDeleteCommand(System.Boolean)">
      <summary>获取自动生成 <see cref="T:System.Data.Odbc.OdbcCommand" /> 对象所需执行删除操作在数据源。</summary>
      <param name="useColumnsForParameterNames">如果 true, ，它是否可以生成与列名称相匹配的参数名称。 如果 false, 、 生成 @p1，@p2，依次类推。</param>
      <returns>自动生成 <see cref="T:System.Data.Odbc.OdbcCommand" /> 对象所需执行删除操作。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommandBuilder.GetInsertCommand">
      <summary>获取自动生成 <see cref="T:System.Data.Odbc.OdbcCommand" /> 需要执行插入操作的数据源对象。</summary>
      <returns>自动生成 <see cref="T:System.Data.Odbc.OdbcCommand" /> 对象所需执行插入操作。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommandBuilder.GetInsertCommand(System.Boolean)">
      <summary>获取自动生成 <see cref="T:System.Data.Odbc.OdbcCommand" /> 需要执行插入操作的数据源对象。</summary>
      <param name="useColumnsForParameterNames">如果 true, ，它是否可以生成与列名称相匹配的参数名称。 如果 false, 、 生成 @p1，@p2，依次类推。</param>
      <returns>自动生成 <see cref="T:System.Data.Odbc.OdbcCommand" /> 对象所需执行插入操作。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommandBuilder.GetUpdateCommand">
      <summary>获取自动生成 <see cref="T:System.Data.Odbc.OdbcCommand" /> 对象所需的数据源执行更新。</summary>
      <returns>自动生成 <see cref="T:System.Data.Odbc.OdbcCommand" /> 对象所需执行更新。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommandBuilder.GetUpdateCommand(System.Boolean)">
      <summary>获取自动生成 <see cref="T:System.Data.Odbc.OdbcCommand" /> 对象所需的数据源执行更新。</summary>
      <param name="useColumnsForParameterNames">如果 true, ，它是否可以生成与列名称相匹配的参数名称。 如果 false, 、 生成 @p1，@p2，依次类推。</param>
      <returns>自动生成 <see cref="T:System.Data.Odbc.OdbcCommand" /> 对象所需执行更新。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommandBuilder.QuoteIdentifier(System.String)">
      <summary>给定在正确的目录的情况下不带引号的标识符，将返回正确的带引号的标识符形式。 这包括正确转义任何嵌入的引号标识符中。</summary>
      <param name="unquotedIdentifier">原始的不带引号的标识符。</param>
      <returns>带引号的标识符版本。 正确转义标识符中嵌入的引号。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommandBuilder.QuoteIdentifier(System.String,System.Data.Odbc.OdbcConnection)">
      <summary>给定在正确的目录的情况下不带引号的标识符，将返回正确的带引号的标识符形式。 这包括正确转义任何嵌入的引号标识符中。</summary>
      <param name="unquotedIdentifier">原始的不带引号的标识符。</param>
      <param name="connection">当传递连接时，将导致从 ODBC 驱动程序，调用 SQLGetInfo(SQL_IDENTIFIER_QUOTE_CHAR) 获取引号字符的托管的包装。 当传递时没有连接时，字符串括在引号中的值使用 <see cref="P:System.Data.Common.DbCommandBuilder.QuotePrefix" /> 和 <see cref="P:System.Data.Common.DbCommandBuilder.QuoteSuffix" />。</param>
      <returns>带引号的标识符版本。 正确转义标识符中嵌入的引号。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommandBuilder.UnquoteIdentifier(System.String)">
      <summary>该标识符，包括正确的正确不带引号的形式提供了带引号的标识符返回未转义标识符中任何嵌入的引号。</summary>
      <param name="quotedIdentifier">将删除其嵌入的引号的标识符。</param>
      <returns>不带引号的标识符，其嵌入的引号正确进行非转义。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcCommandBuilder.UnquoteIdentifier(System.String,System.Data.Odbc.OdbcConnection)">
      <summary>该标识符，包括正确的正确不带引号的形式提供了带引号的标识符返回未转义标识符中任何嵌入的引号。</summary>
      <param name="quotedIdentifier">将删除其嵌入的引号的标识符。</param>
      <param name="connection">
        <see cref="T:System.Data.Odbc.OdbcConnection" />。</param>
      <returns>不带引号的标识符，其嵌入的引号正确进行非转义。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnection.#ctor">
      <summary>初始化 <see cref="T:System.Data.Odbc.OdbcConnection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnection.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Data.Odbc.OdbcConnection" /> 类，具有指定的连接字符串。</summary>
      <param name="connectionString">用于打开数据源的连接。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnection.BeginTransaction">
      <summary>启动一个事务对数据源。</summary>
      <returns>表示新事务的对象。</returns>
      <exception cref="T:System.InvalidOperationException">事务是当前处于活动状态。 不支持并行事务。</exception>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnection.BeginTransaction(System.Data.IsolationLevel)">
      <summary>在数据源事务开头指定 <see cref="T:System.Data.IsolationLevel" /> 值。</summary>
      <param name="isolevel">此连接事务隔离级别。 如果不指定隔离级别，使用该驱动程序的默认隔离级别。</param>
      <returns>表示新事务的对象。</returns>
      <exception cref="T:System.InvalidOperationException">事务是当前处于活动状态。 不支持并行事务。</exception>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnection.ChangeDatabase(System.String)">
      <summary>更改与打开关联的当前数据库 <see cref="T:System.Data.Odbc.OdbcConnection" />。</summary>
      <param name="value">数据库名称。</param>
      <exception cref="T:System.ArgumentException">数据库名称无效。</exception>
      <exception cref="T:System.InvalidOperationException">连接未打开。</exception>
      <exception cref="T:System.Data.Odbc.OdbcException">不能更改数据库。</exception>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnection.Close">
      <summary>关闭与数据源的连接。</summary>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnection.CreateCommand">
      <summary>创建并返回 <see cref="T:System.Data.Odbc.OdbcCommand" /> 与关联对象 <see cref="T:System.Data.Odbc.OdbcConnection" />。</summary>
      <returns>一个 <see cref="T:System.Data.Odbc.OdbcCommand" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)">
      <summary>在指定的事务中登记为分布式事务。</summary>
      <param name="transaction">对用于登记的现有 <see cref="T:System.EnterpriseServices.ITransaction" /> 的引用。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnection.EnlistTransaction(System.Transactions.Transaction)">
      <summary>在指定的事务中登记为分布式事务。</summary>
      <param name="transaction">对用于登记的现有 <see cref="T:System.Transactions.Transaction" /> 的引用。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnection.GetSchema">
      <summary>返回的数据源的架构信息 <see cref="T:System.Data.Odbc.OdbcConnection" />。</summary>
      <returns>一个包含架构信息的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnection.GetSchema(System.String)">
      <summary>返回的数据源的架构信息 <see cref="T:System.Data.Odbc.OdbcConnection" /> 使用的架构名称指定的名称。</summary>
      <param name="collectionName">指定要返回的架构的名称。</param>
      <returns>一个包含架构信息的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnection.GetSchema(System.String,System.String[])">
      <summary>返回的数据源的架构信息 <see cref="T:System.Data.Odbc.OdbcConnection" /> 架构名称和指定的字符串数组的限制值使用指定的字符串。</summary>
      <param name="collectionName">指定要返回的架构的名称。</param>
      <param name="restrictionValues">指定一组请求的架构的限制值。</param>
      <returns>一个包含架构信息的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnection.Open">
      <summary>使用指定的属性设置打开与数据源的连接 <see cref="P:System.Data.Odbc.OdbcConnection.ConnectionString" />。</summary>
      <exception cref="T:System.NotSupportedException">此方法的功能在基类中不受支持，并且必须改为在派生类中实现。</exception>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnection.ReleaseObjectPool">
      <summary>指示当释放最后一个基础连接时，可以释放 ODBC 驱动程序管理器环境句柄。</summary>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnection.System#ICloneable#Clone">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.ICloneable.Clone" />。</summary>
      <returns>新的 <see cref="T:System.Object" /> 对象，是此实例的副本。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnectionStringBuilder.#ctor">
      <summary>初始化 <see cref="T:System.Data.Odbc.OdbcConnectionStringBuilder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnectionStringBuilder.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.Odbc.OdbcConnectionStringBuilder" /> 类的新实例。 所提供的连接字符串为实例的内部连接信息提供数据。</summary>
      <param name="connectionString">对象内部连接信息的基础。 分析为键/值对。</param>
      <exception cref="T:System.ArgumentException">连接字符串格式不正确 （可能缺少必需的"="中的键/值对）。</exception>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnectionStringBuilder.Clear">
      <summary>清除 <see cref="T:System.Data.Odbc.OdbcConnectionStringBuilder" /> 实例的内容。</summary>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnectionStringBuilder.ContainsKey(System.String)">
      <summary>确定 <see cref="T:System.Data.Odbc.OdbcConnectionStringBuilder" /> 是否包含特定键。</summary>
      <param name="keyword">要在 <see cref="T:System.Data.Odbc.OdbcConnectionStringBuilder" /> 中定位的键。</param>
      <returns>true 如果 <see cref="T:System.Data.Odbc.OdbcConnectionStringBuilder" /> 包含具有指定的元素键; 否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为 Null（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnectionStringBuilder.Remove(System.String)">
      <summary>从 <see cref="T:System.Data.Odbc.OdbcConnectionStringBuilder" /> 实例中移除具有指定的键的项。</summary>
      <param name="keyword">要从此 <see cref="T:System.Data.Odbc.OdbcConnectionStringBuilder" /> 中的连接字符串移除的键/值对中的键。</param>
      <returns>如果该键存在于连接字符串中并已被移除，则为 true；如果该键不存在，则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为 Null（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="M:System.Data.Odbc.OdbcConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
      <summary>从此 <see cref="T:System.Data.Odbc.OdbcConnectionStringBuilder" /> 中检索与提供的键相对应的值。</summary>
      <param name="keyword">要检索的项的键。</param>
      <param name="value">与 <paramref name="keyword." /> 对应的值</param>
      <returns>true 如果 <paramref name="keyword" /> 在连接字符串中找到; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataAdapter.#ctor">
      <summary>初始化 <see cref="T:System.Data.Odbc.OdbcDataAdapter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataAdapter.#ctor(System.Data.Odbc.OdbcCommand)">
      <summary>新实例初始化 <see cref="T:System.Data.Odbc.OdbcDataAdapter" /> 与指定的 SQL SELECT 语句一起使用的类。</summary>
      <param name="selectCommand">
        <see cref="T:System.Data.Odbc.OdbcCommand" /> ，是 SQL SELECT 语句或存储的过程，并将设置为 <see cref="P:System.Data.Odbc.OdbcDataAdapter.SelectCommand" /> 属性 <see cref="T:System.Data.Odbc.OdbcDataAdapter" />。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataAdapter.#ctor(System.String,System.Data.Odbc.OdbcConnection)">
      <summary>新实例初始化 <see cref="T:System.Data.Odbc.OdbcDataAdapter" /> 类，具有一个 SQL SELECT 语句和一个 <see cref="T:System.Data.Odbc.OdbcConnection" />。</summary>
      <param name="selectCommandText">一个字符串，它 SQL SELECT 语句或存储的过程以通过使用 <see cref="P:System.Data.Odbc.OdbcDataAdapter.SelectCommand" /> 属性 <see cref="T:System.Data.Odbc.OdbcDataAdapter" />。</param>
      <param name="selectConnection">
        <see cref="T:System.Data.Odbc.OdbcConnection" /> 表示的连接。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataAdapter.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Data.Odbc.OdbcDataAdapter" /> 类与一个 SQL SELECT 语句和连接字符串。</summary>
      <param name="selectCommandText">一个字符串，它 SQL SELECT 语句或存储的过程以通过使用 <see cref="P:System.Data.Odbc.OdbcDataAdapter.SelectCommand" /> 属性 <see cref="T:System.Data.Odbc.OdbcDataAdapter" />。</param>
      <param name="selectConnectionString">连接字符串。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataAdapter.System#ICloneable#Clone">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.ICloneable.Clone" />。</summary>
      <returns>新的 <see cref="T:System.Object" /> 对象，是此实例的副本。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.Close">
      <summary>关闭 <see cref="T:System.Data.Odbc.OdbcDataReader" /> 对象。</summary>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetBoolean(System.Int32)">
      <summary>以布尔值的形式获取指定列的值。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>一个布尔值，这是列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetByte(System.Int32)">
      <summary>以字节的形式获取指定列的值。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>以字节的形式指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>读取字节的流从指定的列偏移量到缓冲区作为一个数组，从特定的缓冲区偏移量处开始。</summary>
      <param name="i">从零开始的列序号。</param>
      <param name="dataIndex">中开始读取的操作所在的字段的索引。</param>
      <param name="buffer">若要读取的字节流读入的缓冲区。</param>
      <param name="bufferIndex">中的索引位置 <paramref name="buffer" /> 写入操作旨在启动。</param>
      <param name="length">要读取的字节数。</param>
      <returns>读取的实际字节数。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetChar(System.Int32)">
      <summary>字符的形式获取指定列的值。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>指定为字符列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>读取字符流，从指定的列偏移量到缓冲区作为一个数组，从特定缓冲区偏移量开始。</summary>
      <param name="i">从零开始的列序号。</param>
      <param name="dataIndex">中开始读取的操作所在的行的索引。</param>
      <param name="buffer">若要将数据复制到的缓冲区。</param>
      <param name="bufferIndex">中的索引位置 <paramref name="buffer" /> 写入操作旨在启动。</param>
      <param name="length">要读取的字符数。</param>
      <returns>读取的实际字符数。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetDataTypeName(System.Int32)">
      <summary>获取源数据类型的名称。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>源数据类型的名称。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetDate(System.Int32)">
      <summary>以 <see cref="T:System.DateTime" /> 对象的形式获取指定列的值。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>指定列的值 <see cref="T:System.DateTime" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetDateTime(System.Int32)">
      <summary>以 <see cref="T:System.DateTime" /> 对象的形式获取指定列的值。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>指定列的值 <see cref="T:System.DateTime" /> 对象。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetDecimal(System.Int32)">
      <summary>以 <see cref="T:System.Decimal" /> 对象的形式获取指定列的值。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>指定列的值 <see cref="T:System.Decimal" /> 对象。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetDouble(System.Int32)">
      <summary>获取指定列的值作为双精度浮点数。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>作为双精度浮点数的指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetEnumerator">
      <summary>返回一个可用于循环访问数据读取器中的行的 <see cref="T:System.Collections.IEnumerator" />。</summary>
      <returns>一个 <see cref="T:System.Collections.IEnumerator" />，可用于循环访问数据读取器中的行。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetFieldType(System.Int32)">
      <summary>获取 <see cref="T:System.Type" /> ，它是该对象的数据类型。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>
        <see cref="T:System.Type" /> ，它是该对象的数据类型。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetFloat(System.Int32)">
      <summary>获取指定列的值作为单精度浮点数。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>作为单精度浮点数的指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetGuid(System.Int32)">
      <summary>以全局唯一标识符 (GUID) 的形式获取指定列的值。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>以 GUID 形式表示的指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetInt16(System.Int32)">
      <summary>16 位有符号整数形式获取指定列的值。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>指定列作为 16 位有符号整数的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetInt32(System.Int32)">
      <summary>作为 32 位有符号整数获取指定列的值。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>作为 32 位有符号整数指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetInt64(System.Int32)">
      <summary>以 64 位有符号整数的形式获取指定列的值。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>指定列作为 64 位有符号整数的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetName(System.Int32)">
      <summary>获取指定列的名称。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>一个字符串，表示指定列的名称。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetOrdinal(System.String)">
      <summary>获取列序号，给定的列的名称。</summary>
      <param name="value">列的名称。</param>
      <returns>从零开始的列序号。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetSchemaTable">
      <summary>返回一个描述 <see cref="T:System.Data.DataTable" /> 的列元数据的 <see cref="T:System.Data.Odbc.OdbcDataReader" />。</summary>
      <returns>一个描述列元数据的 <see cref="T:System.Data.DataTable" />。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.Odbc.OdbcDataReader" /> 已关闭。</exception>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetString(System.Int32)">
      <summary>获取指定列的值 <see cref="T:System.String" />。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>指定列的值 <see cref="T:System.String" />。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetTime(System.Int32)">
      <summary>以 <see cref="T:System.TimeSpan" /> 对象的形式获取指定列的值。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>指定列的值 <see cref="T:System.TimeSpan" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetValue(System.Int32)">
      <summary>获取以其本机格式表示的指定序号处的列的值。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>要返回的值。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.GetValues(System.Object[])">
      <summary>使用来填充数组的对象的当前行的列的值。</summary>
      <param name="values">类型的数组 <see cref="T:System.Object" /> 向其复制属性列。</param>
      <returns>数组中的 <see cref="T:System.Object" /> 实例数。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.IsDBNull(System.Int32)">
      <summary>获取一个值，该值指示列中是否包含不存在或丢失的值。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>true 如果指定的列的值等效于 <see cref="T:System.DBNull" />; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.NextResult">
      <summary>前移 <see cref="T:System.Data.Odbc.OdbcDataReader" /> 到下一个结果时读取批处理 SQL 语句的结果。</summary>
      <returns>true 如果有多个结果集;否则为 false。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcDataReader.Read">
      <summary>前移 <see cref="T:System.Data.Odbc.OdbcDataReader" /> 到下一个记录。</summary>
      <returns>如果存在更多行，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcError.ToString">
      <summary>获取错误信息的完整文本。</summary>
      <returns>错误信息的完整文本。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcErrorCollection.CopyTo(System.Array,System.Int32)">
      <summary>中的元素复制 <see cref="T:System.Data.Odbc.OdbcErrorCollection" /> 到数组中，在该数组中的指定索引处开始。</summary>
      <param name="array">将元素复制到的数组。</param>
      <param name="i">起始索引 <paramref name="array" />。</param>
      <exception cref="T:System.ArgumentException">总和 <paramref name="index" /> 和中的元素数 <see cref="T:System.Data.Odbc.OdbcErrorCollection" /> 大于数组的长度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 无效，不能 <paramref name="array" />。</exception>
    </member>
    <member name="M:System.Data.Odbc.OdbcErrorCollection.CopyTo(System.Data.Odbc.OdbcError[],System.Int32)">
      <summary>将当前 <see cref="T:System.Data.Odbc.OdbcErrorCollection" /> 的所有元素复制到指定的 <see cref="T:System.Data.Odbc.OdbcErrorCollection" /> 中，并以指定的目标索引位置作为复制到的起始位置。</summary>
      <param name="array">作为当前 <see cref="T:System.Data.Odbc.OdbcErrorCollection" /> 中的元素的复制目标的 <see cref="T:System.Data.Odbc.OdbcErrorCollection" />。</param>
      <param name="i">一个 32 位整数，表示 <see cref="T:System.Data.Odbc.OdbcErrorCollection" /> 中开始复制的位置的索引。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcErrorCollection.GetEnumerator">
      <summary>返回一个对象，实现 <see cref="T:" /><see cref="System.Collections.IEnumerator" /> 接口，并且可循环访问 <see cref="T:System.Data.Odbc.OdbcErrorCollection" /> 中的对象 <see cref="T:System.Data.Odbc.OdbcErrorCollection" />。</summary>
      <returns>实现的对象 <see cref="T:" /><see cref="System.Collections.IEnumerator" /> 接口，并且可循环访问 <see cref="T:System.Data.Odbc.OdbcErrorCollection" /> 中的对象 <see cref="T:System.Data.Odbc.OdbcErrorCollection" />。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>此成员重写 <see cref="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />。</summary>
      <param name="si">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它保存关于所引发异常的序列化对象数据。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="si" /> 参数为空引用 (Nothing 在 Visual Basic 中)。</exception>
    </member>
    <member name="M:System.Data.Odbc.OdbcFactory.CreateCommand">
      <summary>返回一个强类型 <see cref="T:System.Data.Common.DbCommand" /> 实例。</summary>
      <returns>新的强类型实例的 <see cref="T:System.Data.Common.DbCommand" />。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcFactory.CreateCommandBuilder">
      <summary>返回一个强类型 <see cref="T:System.Data.Common.DbCommandBuilder" /> 实例。</summary>
      <returns>新的强类型实例的 <see cref="T:System.Data.Common.DbCommandBuilder" />。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcFactory.CreateConnection">
      <summary>返回一个强类型 <see cref="T:System.Data.Common.DbConnection" /> 实例。</summary>
      <returns>新的强类型实例的 <see cref="T:System.Data.Common.DbConnection" />。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcFactory.CreateConnectionStringBuilder">
      <summary>返回一个强类型 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 实例。</summary>
      <returns>新的强类型实例的 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcFactory.CreateDataAdapter">
      <summary>返回一个强类型 <see cref="T:System.Data.Common.DbDataAdapter" /> 实例。</summary>
      <returns>新的强类型实例的 <see cref="T:System.Data.Common.DbDataAdapter" />。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcFactory.CreateParameter">
      <summary>返回一个强类型 <see cref="T:System.Data.Common.DbParameter" /> 实例。</summary>
      <returns>新的强类型实例的 <see cref="T:System.Data.Common.DbParameter" />。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcFactory.CreatePermission(System.Security.Permissions.PermissionState)">
      <summary>返回一个强类型 <see cref="T:System.Security.CodeAccessPermission" /> 实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 枚举的一个成员。</param>
      <returns>新的强类型实例的 <see cref="T:System.Security.CodeAccessPermission" />。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcInfoMessageEventArgs.ToString">
      <summary>检索的字符串表示形式 <see cref="E:System.Data.Odbc.OdbcConnection.InfoMessage" /> 事件。</summary>
      <returns>一个字符串，表示 <see cref="E:System.Data.Odbc.OdbcConnection.InfoMessage" /> 事件。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameter.#ctor">
      <summary>初始化 <see cref="T:System.Data.Odbc.OdbcParameter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameter.#ctor(System.String,System.Data.Odbc.OdbcType)">
      <summary>新实例初始化 <see cref="T:System.Data.Odbc.OdbcParameter" /> 类，该类使用参数名称和数据类型。</summary>
      <param name="name">参数的名称。</param>
      <param name="type">
        <see cref="T:System.Data.Odbc.OdbcType" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">中提供的值 <paramref name="type" /> 参数是无效的后端数据类型。</exception>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameter.#ctor(System.String,System.Data.Odbc.OdbcType,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Data.Odbc.OdbcParameter" /> 类，该类使用参数名称、 数据类型和长度。</summary>
      <param name="name">参数的名称。</param>
      <param name="type">
        <see cref="T:System.Data.Odbc.OdbcType" /> 值之一。</param>
      <param name="size">参数的长度。</param>
      <exception cref="T:System.ArgumentException">中提供的值 <paramref name="type" /> 参数是无效的后端数据类型。</exception>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameter.#ctor(System.String,System.Data.Odbc.OdbcType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
      <summary>新实例初始化 <see cref="T:System.Data.Odbc.OdbcParameter" /> 类，该类使用参数名称、 数据类型、 长度、 源列名称、 参数方向、 数值精度和其他属性。</summary>
      <param name="parameterName">参数的名称。</param>
      <param name="odbcType">
        <see cref="T:System.Data.Odbc.OdbcType" /> 值之一。</param>
      <param name="size">参数的长度。</param>
      <param name="parameterDirection">
        <see cref="T:System.Data.ParameterDirection" /> 值之一。</param>
      <param name="isNullable">如果字段的值可以为 null，则为 true；否则为 false。</param>
      <param name="precision">所解析的 <see cref="P:System.Data.Odbc.OdbcParameter.Value" /> 的小数点左右两侧的总位数。</param>
      <param name="scale">所解析的 <see cref="P:System.Data.Odbc.OdbcParameter.Value" /> 的总小数位数。</param>
      <param name="srcColumn">源列的名称。</param>
      <param name="srcVersion">
        <see cref="T:System.Data.DataRowVersion" /> 值之一。</param>
      <param name="value">作为 <see cref="T:System.Object" /> 的值的 <see cref="T:System.Data.Odbc.OdbcParameter" />。</param>
      <exception cref="T:System.ArgumentException">中提供的值 <paramref name="type" /> 参数是无效的后端数据类型。</exception>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameter.#ctor(System.String,System.Data.Odbc.OdbcType,System.Int32,System.Data.ParameterDirection,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Boolean,System.Object)">
      <summary>新实例初始化 <see cref="T:System.Data.Odbc.OdbcParameter" /> 类，该类使用参数名称、 数据类型、 长度、 源列名称、 参数方向、 数值精度和其他属性。</summary>
      <param name="parameterName">参数的名称。</param>
      <param name="odbcType">
        <see cref="P:System.Data.Odbc.OdbcParameter.OdbcType" /> 值之一。</param>
      <param name="size">参数的长度。</param>
      <param name="parameterDirection">
        <see cref="T:System.Data.ParameterDirection" /> 值之一。</param>
      <param name="precision">所解析的 <see cref="P:System.Data.Odbc.OdbcParameter.Value" /> 的小数点左右两侧的总位数。</param>
      <param name="scale">所解析的 <see cref="P:System.Data.Odbc.OdbcParameter.Value" /> 的总小数位数。</param>
      <param name="sourceColumn">源列的名称。</param>
      <param name="sourceVersion">
        <see cref="T:System.Data.DataRowVersion" /> 值之一。</param>
      <param name="sourceColumnNullMapping">true 如果相应的源列可以为 null; false 如果不是。</param>
      <param name="value">作为 <see cref="T:System.Object" /> 的值的 <see cref="T:System.Data.Odbc.OdbcParameter" />。</param>
      <exception cref="T:System.ArgumentException">中提供的值 <paramref name="type" /> 参数是无效的后端数据类型。</exception>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameter.#ctor(System.String,System.Data.Odbc.OdbcType,System.Int32,System.String)">
      <summary>新实例初始化 <see cref="T:System.Data.Odbc.OdbcParameter" /> 类，该类使用参数名称、 数据类型、 长度和源列名称。</summary>
      <param name="name">参数的名称。</param>
      <param name="type">
        <see cref="T:System.Data.Odbc.OdbcType" /> 值之一。</param>
      <param name="size">参数的长度。</param>
      <param name="sourcecolumn">源列的名称。</param>
      <exception cref="T:System.ArgumentException">中提供的值 <paramref name="type" /> 参数是无效的后端数据类型。</exception>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameter.#ctor(System.String,System.Object)">
      <summary>新实例初始化 <see cref="T:System.Data.Odbc.OdbcParameter" /> 类，该类使用参数名称和一个 <see cref="T:System.Data.Odbc.OdbcParameter" /> 对象。</summary>
      <param name="name">参数的名称。</param>
      <param name="value">一个 <see cref="T:System.Data.Odbc.OdbcParameter" /> 对象。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameter.ResetDbType">
      <summary>重置与此 <see cref="T:System.Data.Odbc.OdbcParameter" /> 关联的类型。</summary>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameter.ResetOdbcType">
      <summary>重置与此 <see cref="T:System.Data.Odbc.OdbcParameter" /> 关联的类型。</summary>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameter.System#ICloneable#Clone">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.ICloneable.Clone" />。</summary>
      <returns>新的 <see cref="T:System.Object" /> 对象，是此实例的副本。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameter.ToString">
      <summary>获取一个包含 <see cref="P:System.Data.Odbc.OdbcParameter.ParameterName" /> 的字符串。</summary>
      <returns>一个包含 <see cref="P:System.Data.Odbc.OdbcParameter.ParameterName" /> 的字符串。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.Add(System.Data.Odbc.OdbcParameter)">
      <summary>添加指定 <see cref="T:System.Data.Odbc.OdbcParameter" /> 到 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />。</summary>
      <param name="value">要添加到集合中的 <see cref="T:System.Data.Odbc.OdbcParameter" />。</param>
      <returns>新的 <see cref="T:System.Data.Odbc.OdbcParameter" /> 对象的索引。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.Odbc.OdbcParameter" /> 中指定 <paramref name="value" /> 参数已添加到这个或其他 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.Add(System.Object)">
      <summary>将指定的 <see cref="T:System.Data.Odbc.OdbcParameter" /> 对象添加到 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 中。</summary>
      <param name="value">
        <see cref="T:System.Object" />。</param>
      <returns>新的索引 <see cref="T:System.Data.Odbc.OdbcParameter" /> 集合中的对象。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.Add(System.String,System.Data.Odbc.OdbcType)">
      <summary>添加 <see cref="T:System.Data.Odbc.OdbcParameter" /> 到 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />, ，给定参数名称和数据类型。</summary>
      <param name="parameterName">参数的名称。</param>
      <param name="odbcType">
        <see cref="T:System.Data.Odbc.OdbcType" /> 值之一。</param>
      <returns>新的 <see cref="T:System.Data.Odbc.OdbcParameter" /> 对象的索引。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.Add(System.String,System.Data.Odbc.OdbcType,System.Int32)">
      <summary>添加 <see cref="T:System.Data.Odbc.OdbcParameter" /> 到 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />, 给定参数名称、 数据类型和列的长度。</summary>
      <param name="parameterName">参数的名称。</param>
      <param name="odbcType">
        <see cref="T:System.Data.Odbc.OdbcType" /> 值之一。</param>
      <param name="size">列的长度。</param>
      <returns>新的 <see cref="T:System.Data.Odbc.OdbcParameter" /> 对象的索引。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.Add(System.String,System.Data.Odbc.OdbcType,System.Int32,System.String)">
      <summary>添加 <see cref="T:System.Data.Odbc.OdbcParameter" /> 到 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 给定参数名称、 数据类型、 列长度和源列名称。</summary>
      <param name="parameterName">参数的名称。</param>
      <param name="odbcType">
        <see cref="T:System.Data.Odbc.OdbcType" /> 值之一。</param>
      <param name="size">列的长度。</param>
      <param name="sourceColumn">源列的名称。</param>
      <returns>新的 <see cref="T:System.Data.Odbc.OdbcParameter" /> 对象的索引。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.Add(System.String,System.Object)">
      <summary>添加 <see cref="T:System.Data.Odbc.OdbcParameter" /> 到 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 给定参数名称和值。</summary>
      <param name="parameterName">参数的名称。</param>
      <param name="value">
        <see cref="P:System.Data.OleDb.OleDbParameter.Value" /> 的 <see cref="T:System.Data.Odbc.OdbcParameter" /> 要添加到集合。</param>
      <returns>新的 <see cref="T:System.Data.Odbc.OdbcParameter" /> 对象的索引。</returns>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 参数不是 <see cref="T:System.Data.Odbc.OdbcParameter" />。</exception>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.AddRange(System.Array)">
      <summary>向 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 的末尾添加一个值数组。</summary>
      <param name="values">要添加的 <see cref="T:System.Array" /> 值。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.AddRange(System.Data.Odbc.OdbcParameter[])">
      <summary>向 <see cref="T:System.Data.Odbc.OdbcParameter" /> 的末尾添加一个 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 值数组。</summary>
      <param name="values">一个数组 <see cref="T:System.Data.Odbc.OdbcParameter" /> 要添加到集合的对象。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.AddWithValue(System.String,System.Object)">
      <summary>向 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 的末尾添加一个值。</summary>
      <param name="parameterName">参数的名称。</param>
      <param name="value">要添加的值。</param>
      <returns>一个 <see cref="T:System.Data.Odbc.OdbcParameter" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.Clear">
      <summary>删除所有 <see cref="T:System.Data.Odbc.OdbcParameter" /> 对象从 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />。</summary>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.Contains(System.Data.Odbc.OdbcParameter)">
      <summary>确定指定的 <see cref="T:System.Data.Odbc.OdbcParameter" /> 是否在此 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 中。</summary>
      <param name="value">
        <see cref="T:System.Data.Odbc.OdbcParameter" /> 值。</param>
      <returns>true 如果 <see cref="T:System.Data.Odbc.OdbcParameter" /> 在集合中; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.Contains(System.Object)">
      <summary>确定指定的 <see cref="T:System.Object" /> 是否在此 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 中。</summary>
      <param name="value">
        <see cref="T:System.Object" /> 值。</param>
      <returns>true 如果 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 否则包含值 false。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.Contains(System.String)">
      <summary>获取一个值，该值指示是否 <see cref="T:System.Data.Odbc.OdbcParameter" /> 集合中存在具有指定的参数名称的对象。</summary>
      <param name="value">名称 <see cref="T:System.Data.Odbc.OdbcParameter" /> 要查找对象。</param>
      <returns>true 如果集合包含参数;否则为 false。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.CopyTo(System.Array,System.Int32)">
      <summary>将当前 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 的所有元素复制到指定的一维 <see cref="T:System.Array" /> 中，并以指定的目标 <see cref="T:System.Array" /> 索引位置作为复制到的起始位置。</summary>
      <param name="array">作为当前 <see cref="T:System.Array" /> 中的元素的复制目标的一维 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />。</param>
      <param name="index">一个 32 位整数，表示 <see cref="T:System.Array" /> 中开始复制的位置的索引。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.CopyTo(System.Data.Odbc.OdbcParameter[],System.Int32)">
      <summary>将当前 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 的所有元素复制到指定的 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 中，并以指定的目标索引位置作为复制到的起始位置。</summary>
      <param name="array">作为当前 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 中的元素的复制目标的 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />。</param>
      <param name="index">一个 32 位整数，表示 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 中开始复制的位置的索引。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 的枚举数。</summary>
      <returns>用于 <see cref="T:System.Collections.Generic.IEnumerator" /> 的 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.IndexOf(System.Data.Odbc.OdbcParameter)">
      <summary>获取指定的位置 <see cref="T:System.Data.Odbc.OdbcParameter" /> 在集合中。</summary>
      <param name="value">
        <see cref="T:System.Data.Odbc.OdbcParameter" /> 集合中要查找的对象。</param>
      <returns>指定的从零开始的位置 <see cref="T:System.Data.Odbc.OdbcParameter" /> 在集合中。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.IndexOf(System.Object)">
      <summary>获取指定的位置 <see cref="T:System.Object" /> 在集合中。</summary>
      <param name="value">要查找的 <see cref="T:System.Object" />。</param>
      <returns>指定的从零开始的位置 <see cref="T:System.Object" /> 即 <see cref="T:System.Data.Odbc.OdbcParameter" /> 在集合中。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.IndexOf(System.String)">
      <summary>获取具有指定名称的指定 <see cref="T:System.Data.Odbc.OdbcParameter" /> 的位置。</summary>
      <param name="parameterName">要查找的 <see cref="T:System.Data.Odbc.OdbcParameter" /> 的名称（区分大小写）。</param>
      <returns>具有指定名称（区分大小写）的指定 <see cref="T:System.Data.Odbc.OdbcParameter" /> 的位置（从零开始）。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.Insert(System.Int32,System.Data.Odbc.OdbcParameter)">
      <summary>在 <see cref="T:System.Data.Odbc.OdbcParameter" /> 中的指定索引处插入一个 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 对象。</summary>
      <param name="index">从零开始的索引，应在该位置插入该对象。</param>
      <param name="value">要插入到 <see cref="T:System.Data.Odbc.OdbcParameter" /> 中的 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 对象。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.Insert(System.Int32,System.Object)">
      <summary>将插入 <see cref="T:System.Object" /> 到 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 中指定索引处。</summary>
      <param name="index">从零开始的索引，应在该位置插入该对象。</param>
      <param name="value">一个 <see cref="T:System.Object" /> 中插入 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.Remove(System.Data.Odbc.OdbcParameter)">
      <summary>删除 <see cref="T:System.Data.Odbc.OdbcParameter" /> 从 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />。</summary>
      <param name="value">要从集合中移除的 <see cref="T:System.Data.Odbc.OdbcParameter" /> 对象。</param>
      <exception cref="T:System.InvalidCastException">该参数不是 <see cref="T:System.Data.Odbc.OdbcParameter" />。</exception>
      <exception cref="T:System.SystemException">集合中不存在该参数。</exception>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.Remove(System.Object)">
      <summary>删除 <see cref="T:System.Object" /> 对象从 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />。</summary>
      <param name="value">一个 <see cref="T:System.Object" /> 从删除 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.RemoveAt(System.Int32)">
      <summary>从 <see cref="T:System.Data.Odbc.OdbcParameter" /> 的指定索引处移除 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />。</summary>
      <param name="index">要移除的 <see cref="T:System.Data.Odbc.OdbcParameter" /> 对象的索引（从零开始）。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcParameterCollection.RemoveAt(System.String)">
      <summary>删除 <see cref="T:System.Data.Odbc.OdbcParameter" /> 从 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 具有指定的参数名称。</summary>
      <param name="parameterName">名称 <see cref="T:System.Data.Odbc.OdbcParameter" /> 要移除对象。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcPermission.#ctor">
      <summary>初始化 <see cref="T:System.Data.Odbc.OdbcPermission" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Odbc.OdbcPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>新实例初始化 <see cref="T:System.Data.Odbc.OdbcPermission" /> 类之一 <see cref="T:System.Security.Permissions.PermissionState" /> 值。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcPermission.#ctor(System.Security.Permissions.PermissionState,System.Boolean)">
      <summary>初始化 <see cref="T:System.Data.Odbc.OdbcPermission" /> 类的新实例。</summary>
      <param name="state">System.Security.Permissions.PermissionState 值之一。</param>
      <param name="allowBlankPassword">指示是否允许密码为空。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcPermission.Add(System.String,System.String,System.Data.KeyRestrictionBehavior)">
      <summary>将指定的连接字符串的访问权限添加到现有的权限状态。</summary>
      <param name="connectionString">允许的连接字符串。</param>
      <param name="restrictions">标识允许或禁止使用的连接字符串参数的字符串。</param>
      <param name="behavior">
        <see cref="T:System.Data.KeyRestrictionBehavior" /> 值之一。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcPermission.Copy">
      <summary>返回 <see cref="T:System.Data.Odbc.OdbcPermission" /> 作为 <see cref="T:System.Security.IPermission" />。</summary>
      <returns>当前权限对象的副本。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>新实例初始化 <see cref="T:System.Data.Odbc.OdbcPermissionAttribute" /> 类之一 <see cref="T:System.Security.Permissions.SecurityAction" /> 值。</summary>
      <param name="action">其中一个 <see cref="T:System.Security.Permissions.SecurityAction" /> 表示可通过使用声明性安全执行的操作的值。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcPermissionAttribute.CreatePermission">
      <summary>返回 <see cref="T:System.Data.Odbc.OdbcPermission" /> 特性属性根据配置的对象。</summary>
      <returns>一个 <see cref="T:System.Data.Odbc.OdbcPermission" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Odbc.OdbcRowUpdatedEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>初始化 <see cref="T:System.Data.Odbc.OdbcRowUpdatedEventArgs" /> 类的新实例。</summary>
      <param name="row">DataRow 发送通过更新操作。</param>
      <param name="command">
        <see cref="T:System.Data.Odbc.OdbcCommand" /> 时执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 调用。</param>
      <param name="statementType">其中一个 <see cref="T:System.Data.StatementType" /> 值，该值指定执行查询的类型。</param>
      <param name="tableMapping">
        <see cref="T:System.Data.Common.DataTableMapping" /> 通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcRowUpdatingEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>初始化 <see cref="T:System.Data.Odbc.OdbcRowUpdatingEventArgs" /> 类的新实例。</summary>
      <param name="row">要更新的 <see cref="T:System.Data.DataRow" />。</param>
      <param name="command">
        <see cref="T:System.Data.Odbc.OdbcCommand" /> 更新操作过程中执行。</param>
      <param name="statementType">其中一个 <see cref="T:System.Data.StatementType" /> 值，该值指定执行查询的类型。</param>
      <param name="tableMapping">
        <see cref="T:System.Data.Common.DataTableMapping" /> 通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcTransaction.Commit">
      <summary>提交数据库事务。</summary>
      <exception cref="T:System.Exception">在尝试提交事务时出错。</exception>
      <exception cref="T:System.InvalidOperationException">已提交或回滚事务。- 或 - 连接已断开。</exception>
    </member>
    <member name="M:System.Data.Odbc.OdbcTransaction.Rollback">
      <summary>从挂起状态回滚事务。</summary>
      <exception cref="T:System.Exception">在尝试提交事务时出错。</exception>
      <exception cref="T:System.InvalidOperationException">已提交或回滚事务。- 或 - 连接已断开。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommand.#ctor">
      <summary>初始化 <see cref="T:System.Data.OleDb.OleDbCommand" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommand.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Data.OleDb.OleDbCommand" /> 用文本的查询的类。</summary>
      <param name="cmdText">查询的文本。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommand.#ctor(System.String,System.Data.OleDb.OleDbConnection)">
      <summary>新实例初始化 <see cref="T:System.Data.OleDb.OleDbCommand" /> 用文本的查询的类和一个 <see cref="T:System.Data.OleDb.OleDbConnection" />。</summary>
      <param name="cmdText">查询的文本。</param>
      <param name="connection">
        <see cref="T:System.Data.OleDb.OleDbConnection" /> 表示到数据源的连接。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommand.#ctor(System.String,System.Data.OleDb.OleDbConnection,System.Data.OleDb.OleDbTransaction)">
      <summary>新实例初始化 <see cref="T:System.Data.OleDb.OleDbCommand" /> 类用文本的查询、 查询 <see cref="T:System.Data.OleDb.OleDbConnection" />, ，和 <see cref="P:System.Data.OleDb.OleDbCommand.Transaction" />。</summary>
      <param name="cmdText">查询的文本。</param>
      <param name="connection">
        <see cref="T:System.Data.OleDb.OleDbConnection" /> 表示到数据源的连接。</param>
      <param name="transaction">在其中事务 <see cref="T:System.Data.OleDb.OleDbCommand" /> 执行。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommand.Cancel">
      <summary>尝试取消执行 <see cref="T:System.Data.OleDb.OleDbCommand" />。</summary>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommand.Clone">
      <summary>创建一个新 <see cref="T:System.Data.OleDb.OleDbCommand" /> 对象，它是当前实例的副本。</summary>
      <returns>一个新 <see cref="T:System.Data.OleDb.OleDbCommand" /> 对象，它是此实例的副本。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommand.CreateParameter">
      <summary>创建的新实例 <see cref="T:System.Data.OleDb.OleDbParameter" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Data.OleDb.OleDbParameter" /> 对象。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommand.ExecuteNonQuery">
      <summary>执行 SQL 语句针对 <see cref="P:System.Data.OleDb.OleDbCommand.Connection" /> ，并返回受影响的行数。</summary>
      <returns>受影响的行数。</returns>
      <exception cref="T:System.InvalidOperationException">该连接不存在。- 或 - 连接未打开。- 或 - 无法从最初在其中登记连接上下文执行不同的事务上下文中的命令。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommand.ExecuteReader">
      <summary>将发送 <see cref="P:System.Data.OleDb.OleDbCommand.CommandText" /> 到 <see cref="P:System.Data.OleDb.OleDbCommand.Connection" /> 并生成 <see cref="T:System.Data.OleDb.OleDbDataReader" />。</summary>
      <returns>一个 <see cref="T:System.Data.OleDb.OleDbDataReader" /> 对象。</returns>
      <exception cref="T:System.InvalidOperationException">无法从最初在其中登记连接上下文执行不同的事务上下文中的命令。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommand.ExecuteReader(System.Data.CommandBehavior)">
      <summary>将发送 <see cref="P:System.Data.OleDb.OleDbCommand.CommandText" /> 到 <see cref="P:System.Data.OleDb.OleDbCommand.Connection" />, ，并生成 <see cref="T:System.Data.OleDb.OleDbDataReader" /> 使用一种 <see cref="T:System.Data.CommandBehavior" /> 值。</summary>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。</param>
      <returns>一个 <see cref="T:System.Data.OleDb.OleDbDataReader" /> 对象。</returns>
      <exception cref="T:System.InvalidOperationException">无法从最初在其中登记连接上下文执行不同的事务上下文中的命令。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommand.ExecuteScalar">
      <summary>执行查询，并返回由查询返回的结果集中的第一行的第一列。 其他列或行将被忽略。</summary>
      <returns>在结果中的第一行的第一列设置，或为 null 引用的结果集是否为空。</returns>
      <exception cref="T:System.InvalidOperationException">无法从最初在其中登记连接上下文执行不同的事务上下文中的命令。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommand.Prepare">
      <summary>在数据源上创建命令的已准备好 （或已编译） 版本。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Data.OleDb.OleDbCommand.Connection" /> 未设置。- 或 - <see cref="P:System.Data.OleDb.OleDbCommand.Connection" /> 未打开。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommand.ResetCommandTimeout">
      <summary>重置 <see cref="P:System.Data.OleDb.OleDbCommand.CommandTimeout" /> 属性设置为默认值。</summary>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommand.System#Data#IDbCommand#ExecuteReader">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.Data.IDbCommand.ExecuteReader" />。</summary>
      <returns>一个 <see cref="T:System.Data.IDataReader" /> 对象。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommand.System#Data#IDbCommand#ExecuteReader(System.Data.CommandBehavior)">
      <summary>执行 <see cref="P:System.Data.IDbCommand.CommandText" /> 针对 <see cref="P:System.Data.IDbCommand.Connection" />, ，并生成 <see cref="T:System.Data.IDataReader" /> 使用一种 <see cref="T:System.Data.CommandBehavior" /> 值。</summary>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。</param>
      <returns>
        <see cref="T:System.Data.IDataReader" /> 构建使用一种 <see cref="T:System.Data.CommandBehavior" /> 值。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommand.System#ICloneable#Clone">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.ICloneable.Clone" />。</summary>
      <returns>新的 <see cref="T:System.Object" /> 对象，是此实例的副本。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommandBuilder.#ctor">
      <summary>初始化 <see cref="T:System.Data.OleDb.OleDbCommandBuilder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommandBuilder.#ctor(System.Data.OleDb.OleDbDataAdapter)">
      <summary>新实例初始化 <see cref="T:System.Data.OleDb.OleDbCommandBuilder" /> 使用关联的类 <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> 对象。</summary>
      <param name="adapter">一个 <see cref="T:System.Data.OleDb.OleDbDataAdapter" />。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommandBuilder.DeriveParameters(System.Data.OleDb.OleDbCommand)">
      <summary>从在指定的存储过程中检索参数信息 <see cref="T:System.Data.OleDb.OleDbCommand" /> 并填充 <see cref="P:System.Data.OleDb.OleDbCommand.Parameters" /> 的指定集合 <see cref="T:System.Data.OleDb.OleDbCommand" /> 对象。</summary>
      <param name="command">
        <see cref="T:System.Data.OleDb.OleDbCommand" /> 引用存储的过程将为派生参数信息。 派生的参数添加到 <see cref="P:System.Data.OleDb.OleDbCommand.Parameters" /> 集合 <see cref="T:System.Data.OleDb.OleDbCommand" />。</param>
      <exception cref="T:System.InvalidOperationException">基础 OLE DB 访问接口不支持返回存储的过程的参数信息、 命令文本不是有效的存储的过程名称，或 <see cref="P:System.Data.OleDb.OleDbCommand.CommandType" /> 指定未 StoredProcedure。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommandBuilder.GetDeleteCommand">
      <summary>获取自动生成 <see cref="T:System.Data.OleDb.OleDbCommand" /> 对象所需执行删除操作在数据源。</summary>
      <returns>自动生成 <see cref="T:System.Data.OleDb.OleDbCommand" /> 对象所需执行删除操作。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommandBuilder.GetDeleteCommand(System.Boolean)">
      <summary>获取自动生成 <see cref="T:System.Data.OleDb.OleDbCommand" /> 对象所需执行删除操作在数据源。</summary>
      <param name="useColumnsForParameterNames">如果 true, ，它是否可以生成与列名称相匹配的参数名称。 如果 false, 、 生成 @p1，@p2，依次类推。</param>
      <returns>自动生成 <see cref="T:System.Data.OleDb.OleDbCommand" /> 对象所需执行删除操作。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommandBuilder.GetInsertCommand">
      <summary>获取自动生成 <see cref="T:System.Data.OleDb.OleDbCommand" /> 需要执行插入操作的数据源对象。</summary>
      <returns>自动生成 <see cref="T:System.Data.OleDb.OleDbCommand" /> 对象所需执行插入操作。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommandBuilder.GetInsertCommand(System.Boolean)">
      <summary>获取自动生成 <see cref="T:System.Data.OleDb.OleDbCommand" /> 需要执行插入操作的数据源对象。</summary>
      <param name="useColumnsForParameterNames">如果 true, ，它是否可以生成与列名称相匹配的参数名称。 如果 false, 、 生成 @p1，@p2，依次类推。</param>
      <returns>自动生成 <see cref="T:System.Data.OleDb.OleDbCommand" /> 对象所需执行插入操作。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommandBuilder.GetUpdateCommand">
      <summary>获取自动生成 <see cref="T:System.Data.OleDb.OleDbCommand" /> 对象所需的数据源执行更新。</summary>
      <returns>自动生成 <see cref="T:System.Data.OleDb.OleDbCommand" /> 对象所需执行更新。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommandBuilder.GetUpdateCommand(System.Boolean)">
      <summary>获取自动生成 <see cref="T:System.Data.OleDb.OleDbCommand" /> 对象所需数据源，可以选择使用列作为参数名在执行更新。</summary>
      <param name="useColumnsForParameterNames">如果 true, ，它是否可以生成与列名称相匹配的参数名称。 如果 false, 、 生成 @p1，@p2，依次类推。</param>
      <returns>自动生成 <see cref="T:System.Data.OleDb.OleDbCommand" /> 对象所需执行更新。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommandBuilder.QuoteIdentifier(System.String)">
      <summary>给定在正确的目录的情况下不带引号的标识符，将返回正确的带引号的标识符形式。 这包括正确转义任何嵌入的引号标识符中。</summary>
      <param name="unquotedIdentifier">原始的不带引号的标识符。</param>
      <returns>带引号的标识符版本。 正确转义标识符中嵌入的引号。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommandBuilder.QuoteIdentifier(System.String,System.Data.OleDb.OleDbConnection)">
      <summary>给定在正确的目录的情况下不带引号的标识符，将返回正确的带引号的标识符形式。 这包括正确转义任何嵌入的引号标识符中。</summary>
      <param name="unquotedIdentifier">若要以带引号的格式返回不带引号的标识符。</param>
      <param name="connection">当传递连接时，将导致从 OLE DB 访问接口获取的引号字符的托管的包装。 当传递时没有连接时，字符串括在引号中的值使用 <see cref="P:System.Data.Common.DbCommandBuilder.QuotePrefix" /> 和 <see cref="P:System.Data.Common.DbCommandBuilder.QuoteSuffix" />。</param>
      <returns>带引号的标识符版本。 正确转义标识符中嵌入的引号。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommandBuilder.UnquoteIdentifier(System.String)">
      <summary>给定带引号的标识符，将返回该标识符的正确不带引号的形式。 这包括正确地取消转义任何嵌入的引号标识符中。</summary>
      <param name="quotedIdentifier">将删除其嵌入的引号的标识符。</param>
      <returns>不带引号的标识符，其嵌入的引号正确地取消转义。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbCommandBuilder.UnquoteIdentifier(System.String,System.Data.OleDb.OleDbConnection)">
      <summary>给定带引号的标识符，将返回该标识符的正确不带引号的形式。 这包括正确地取消转义任何嵌入的引号标识符中。</summary>
      <param name="quotedIdentifier">将删除其嵌入的引号的标识符。</param>
      <param name="connection">
        <see cref="T:System.Data.OleDb.OleDbConnection" />。</param>
      <returns>不带引号的标识符，其嵌入的引号正确地取消转义。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnection.#ctor">
      <summary>初始化 <see cref="T:System.Data.OleDb.OleDbConnection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnection.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Data.OleDb.OleDbConnection" /> 类，具有指定的连接字符串。</summary>
      <param name="connectionString">用于打开数据库的连接。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnection.BeginTransaction">
      <summary>开始数据库事务与当前 <see cref="T:System.Data.IsolationLevel" /> 值。</summary>
      <returns>表示新事务的对象。</returns>
      <exception cref="T:System.InvalidOperationException">不支持并行事务。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnection.BeginTransaction(System.Data.IsolationLevel)">
      <summary>以指定的隔离级别启动数据库事务。</summary>
      <param name="isolationLevel">事务应在其下运行的隔离级别。</param>
      <returns>表示新事务的对象。</returns>
      <exception cref="T:System.InvalidOperationException">不支持并行事务。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnection.ChangeDatabase(System.String)">
      <summary>更改已打开的 <see cref="T:System.Data.OleDb.OleDbConnection" /> 的当前数据库。</summary>
      <param name="value">数据库名称。</param>
      <exception cref="T:System.ArgumentException">数据库名称无效。</exception>
      <exception cref="T:System.InvalidOperationException">连接未打开。</exception>
      <exception cref="T:System.Data.OleDb.OleDbException">不能更改数据库。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnection.Close">
      <summary>关闭与数据源的连接。</summary>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnection.CreateCommand">
      <summary>创建并返回 <see cref="T:System.Data.OleDb.OleDbCommand" /> 与关联对象 <see cref="T:System.Data.OleDb.OleDbConnection" />。</summary>
      <returns>一个 <see cref="T:System.Data.OleDb.OleDbCommand" /> 对象。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)">
      <summary>在指定的事务中登记为分布式事务。</summary>
      <param name="transaction">对用于登记的现有 <see cref="T:System.EnterpriseServices.ITransaction" /> 的引用。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnection.EnlistTransaction(System.Transactions.Transaction)">
      <summary>在指定的事务中登记为分布式事务。</summary>
      <param name="transaction">对用于登记的现有 <see cref="T:System.Transactions.Transaction" /> 的引用。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnection.GetOleDbSchemaTable(System.Guid,System.Object[])">
      <summary>由一个 GUID，并在应用指定的限制之后，请从数据源返回架构信息。</summary>
      <param name="schema">其中一个 <see cref="T:System.Data.OleDb.OleDbSchemaGuid" /> 值，该值指定要返回的架构表。</param>
      <param name="restrictions">
        <see cref="T:System.Object" /> 限制值的数组。 这些适用的限制列的顺序。 也就是说，适用于第一个限制列的第一个限制值，第二个限制值应用到的第二个限制列中，依次类推。</param>
      <returns>一个 <see cref="T:System.Data.DataTable" /> 包含请求的架构信息。</returns>
      <exception cref="T:System.Data.OleDb.OleDbException">指定的限制集是无效的。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.OleDb.OleDbConnection" /> 已关闭。</exception>
      <exception cref="T:System.ArgumentException">OLE DB 访问接口不支持指定的架构行集。- 或 - <paramref name="schema" /> 参数包含的值 <see cref="F:System.Data.OleDb.OleDbSchemaGuid.DbInfoLiterals" /> 和 <paramref name="restrictions" /> 参数包含一个或多个限制。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnection.GetSchema">
      <summary>返回的数据源的架构信息 <see cref="T:System.Data.OleDb.OleDbConnection" />。</summary>
      <returns>一个包含架构信息的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnection.GetSchema(System.String)">
      <summary>返回的数据源的架构信息 <see cref="T:System.Data.OleDb.OleDbConnection" /> 使用架构名称指定的字符串。</summary>
      <param name="collectionName">指定要返回的架构的名称。 </param>
      <returns>一个包含架构信息的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnection.GetSchema(System.String,System.String[])">
      <summary>返回的数据源的架构信息 <see cref="T:System.Data.OleDb.OleDbConnection" /> 架构名称和指定的字符串数组的限制值使用指定的字符串。</summary>
      <param name="collectionName">指定要返回的架构的名称。</param>
      <param name="restrictionValues">指定一组请求的架构的限制值。</param>
      <returns>一个包含架构信息的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnection.Open">
      <summary>使用指定的属性设置打开数据库连接 <see cref="P:System.Data.OleDb.OleDbConnection.ConnectionString" />。</summary>
      <exception cref="T:System.InvalidOperationException">连接已打开。</exception>
      <exception cref="T:System.Data.OleDb.OleDbException">打开连接时出现的连接级别错误。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnection.ReleaseObjectPool">
      <summary>指示 <see cref="T:System.Data.OleDb.OleDbConnection" /> 对象池可以释放最后一个基础连接时释放。</summary>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnection.ResetState">
      <summary>更新 <see cref="P:System.Data.OleDb.OleDbConnection.State" /> 属性 <see cref="T:System.Data.OleDb.OleDbConnection" /> 对象。</summary>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnection.System#ICloneable#Clone">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.ICloneable.Clone" />。</summary>
      <returns>新的 <see cref="T:System.Object" /> 对象，是此实例的副本。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnectionStringBuilder.#ctor">
      <summary>初始化 <see cref="T:System.Data.OleDb.OleDbConnectionStringBuilder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnectionStringBuilder.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.OleDb.OleDbConnectionStringBuilder" /> 类的新实例。 所提供的连接字符串为实例的内部连接信息提供数据。</summary>
      <param name="connectionString">对象内部连接信息的基础。 分析为键/值对。</param>
      <exception cref="T:System.ArgumentException">连接字符串格式不正确 （可能缺少必需的"="中的键/值对）。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnectionStringBuilder.Clear">
      <summary>清除 <see cref="T:System.Data.OleDb.OleDbConnectionStringBuilder" /> 实例的内容。</summary>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnectionStringBuilder.ContainsKey(System.String)">
      <summary>确定 <see cref="T:System.Data.OleDb.OleDbConnectionStringBuilder" /> 是否包含特定键。</summary>
      <param name="keyword">要在 <see cref="T:System.Data.OleDb.OleDbConnectionStringBuilder" /> 中定位的键。</param>
      <returns>true <see cref="T:System.Data.OleDb.OleDbConnectionStringBuilder" /> 包含具有指定的元素键; 否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为 Null（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnectionStringBuilder.Remove(System.String)">
      <summary>从 <see cref="T:System.Data.OleDb.OleDbConnectionStringBuilder" /> 实例中移除具有指定的键的项。</summary>
      <param name="keyword">要从此 <see cref="T:System.Data.OleDb.OleDbConnectionStringBuilder" /> 中的连接字符串移除的键/值对中的键。</param>
      <returns>true 如果该键存在的连接字符串中并已被删除， false 如果该键不存在。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为 Null（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
      <summary>检索一个值，对应于从提供的密钥 <see cref="T:System.Data.OleDb.OleDbConnectionStringBuilder" /> 实例。</summary>
      <param name="keyword">要检索的项的键。</param>
      <param name="value">与 <paramref name="keyword." /> 对应的值</param>
      <returns>true 如果 <paramref name="keyword" /> 在连接字符串中找到; 否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 包含一个 null 值（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataAdapter.#ctor">
      <summary>初始化 <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataAdapter.#ctor(System.Data.OleDb.OleDbCommand)">
      <summary>新实例初始化 <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> 类与指定 <see cref="T:System.Data.OleDb.OleDbCommand" /> 作为 <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" /> 属性。</summary>
      <param name="selectCommand">
        <see cref="T:System.Data.OleDb.OleDbCommand" /> ，SELECT 语句或存储的过程，并设置为 <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" /> 属性 <see cref="T:System.Data.OleDb.OleDbDataAdapter" />。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataAdapter.#ctor(System.String,System.Data.OleDb.OleDbConnection)">
      <summary>用 <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> 初始化 <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" /> 类的新实例。</summary>
      <param name="selectCommandText">一个字符串，它 SQL SELECT 语句或存储的过程以通过使用 <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" /> 属性 <see cref="T:System.Data.OleDb.OleDbDataAdapter" />。</param>
      <param name="selectConnection">
        <see cref="T:System.Data.OleDb.OleDbConnection" /> 表示的连接。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataAdapter.#ctor(System.String,System.String)">
      <summary>用 <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> 初始化 <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" /> 类的新实例。</summary>
      <param name="selectCommandText">一个字符串，它 SQL SELECT 语句或存储的过程以通过使用 <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" /> 属性 <see cref="T:System.Data.OleDb.OleDbDataAdapter" />。</param>
      <param name="selectConnectionString">连接字符串。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataSet,System.Object,System.String)">
      <summary>添加或刷新中行 <see cref="T:System.Data.DataSet" /> 以与 ADO 中的匹配 Recordset 或 Record 对象使用指定 <see cref="T:System.Data.DataSet" />, ，ADO 对象和源表名称。</summary>
      <param name="dataSet">一个 <see cref="T:System.Data.DataSet" /> 要用记录填充以及它是必需的如果架构。</param>
      <param name="ADODBRecordSet">ADO Recordset 或 Record 对象。</param>
      <param name="srcTable">用于表映射的源表。</param>
      <returns>行数已成功添加到或在刷新 <see cref="T:System.Data.DataSet" />。 这不包括不返回行的语句影响的行。</returns>
      <exception cref="T:System.SystemException">此源表是无效的。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataTable,System.Object)">
      <summary>添加或刷新中行 <see cref="T:System.Data.DataTable" /> 以与 ADO 中的匹配 Recordset 或 Record 对象使用指定 <see cref="T:System.Data.DataTable" /> 和 ADO 对象。</summary>
      <param name="dataTable">一个 <see cref="T:System.Data.DataTable" /> 要用记录填充以及它是必需的如果架构。</param>
      <param name="ADODBRecordSet">ADO Recordset 或 Record 对象。</param>
      <returns>行数已成功刷新到 <see cref="T:System.Data.DataTable" />。 这不包括不返回行的语句影响的行。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataAdapter.System#ICloneable#Clone">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.ICloneable.Clone" />。</summary>
      <returns>新的 <see cref="T:System.Object" /> 对象，是此实例的副本。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.Close">
      <summary>关闭 <see cref="T:System.Data.OleDb.OleDbDataReader" /> 对象。</summary>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetBoolean(System.Int32)">
      <summary>以布尔值的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetByte(System.Int32)">
      <summary>以字节的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>以字节的形式指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>流读入的字节从指定的列偏移量到缓冲区作为数组从给定的缓冲区偏移量处开始。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="dataIndex">中自其开始读取的操作的字段的索引。</param>
      <param name="buffer">若要读取的字节流读入的缓冲区。</param>
      <param name="bufferIndex">中的索引位置 <paramref name="buffer" /> 写入操作旨在启动。</param>
      <param name="length">要复制到缓冲区的最大长度。</param>
      <returns>读取的实际字节数。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetChar(System.Int32)">
      <summary>字符的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>读取字符流从指定的列偏移量到缓冲区作为数组从给定的缓冲区偏移量处开始。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <param name="dataIndex">从其开始读取的操作的行中的索引。</param>
      <param name="buffer">若要将数据复制到的缓冲区。</param>
      <param name="bufferIndex">中的索引位置 <paramref name="buffer" /> 写入操作旨在启动。</param>
      <param name="length">要读取的字符数。</param>
      <returns>读取的实际字符数。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetData(System.Int32)">
      <summary>返回 <see cref="T:System.Data.OleDb.OleDbDataReader" /> 对象请求的列序号。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>一个 <see cref="T:System.Data.OleDb.OleDbDataReader" /> 对象。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetDataTypeName(System.Int32)">
      <summary>获取源数据类型的名称。</summary>
      <param name="index">从零开始的列序号。</param>
      <returns>后端数据类型的名称。 有关详细信息，请参阅 SQL Server data types 或 Access data types。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetDateTime(System.Int32)">
      <summary>以 <see cref="T:System.DateTime" /> 对象的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetDecimal(System.Int32)">
      <summary>以 <see cref="T:System.Decimal" /> 对象的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetDouble(System.Int32)">
      <summary>获取指定列的值作为双精度浮点数。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetEnumerator">
      <summary>返回一个可用于循环访问数据读取器中的行的 <see cref="T:System.Collections.IEnumerator" />。</summary>
      <returns>一个 <see cref="T:System.Collections.IEnumerator" />，可用于循环访问数据读取器中的行。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetFieldType(System.Int32)">
      <summary>获取 <see cref="T:System.Type" /> ，它是该对象的数据类型。</summary>
      <param name="index">从零开始的列序号。</param>
      <returns>
        <see cref="T:System.Type" /> ，它是该对象的数据类型。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetFloat(System.Int32)">
      <summary>获取指定列的值作为单精度浮点数。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetGuid(System.Int32)">
      <summary>以全局唯一标识符 (GUID) 的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetInt16(System.Int32)">
      <summary>16 位有符号整数形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetInt32(System.Int32)">
      <summary>作为 32 位有符号整数获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetInt64(System.Int32)">
      <summary>以 64 位有符号整数的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetName(System.Int32)">
      <summary>获取指定列的名称。</summary>
      <param name="index">从零开始的列序号。</param>
      <returns>指定列的名称。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetOrdinal(System.String)">
      <summary>获取列序号，给定的列的名称。</summary>
      <param name="name">列的名称。</param>
      <returns>从零开始的列序号。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定的名称不是有效的列名。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetSchemaTable">
      <summary>返回一个描述 <see cref="T:System.Data.DataTable" /> 的列元数据的 <see cref="T:System.Data.OleDb.OleDbDataReader" />。</summary>
      <returns>一个描述列元数据的 <see cref="T:System.Data.DataTable" />。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.OleDb.OleDbDataReader" /> 已关闭。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetString(System.Int32)">
      <summary>获取指定列的值作为字符串。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetTimeSpan(System.Int32)">
      <summary>以 <see cref="T:System.TimeSpan" /> 对象的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetValue(System.Int32)">
      <summary>获取以其本机格式表示的指定序号处的列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>要返回的值。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.GetValues(System.Object[])">
      <summary>使用来填充数组的对象的当前行的列的值。</summary>
      <param name="values">要将属性列复制到的 <see cref="T:System.Object" /> 数组。</param>
      <returns>数组中的 <see cref="T:System.Object" /> 实例数。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.IsDBNull(System.Int32)">
      <summary>获取一个值，该值指示列中是否包含不存在或丢失的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>true 如果指定的列的值等效于 <see cref="T:System.DBNull" />; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.NextResult">
      <summary>在读取批处理 SQL 语句的结果时，将数据读取器推进到下一个结果。</summary>
      <returns>true 如果有多个结果集;否则为 false。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbDataReader.Read">
      <summary>前移 <see cref="T:System.Data.OleDb.OleDbDataReader" /> 到下一个记录。</summary>
      <returns>true 如果有多个行;否则为 false。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbEnumerator.#ctor">
      <summary>创建 <see cref="T:System.Data.OleDb.OleDbEnumerator" /> 类的实例。</summary>
    </member>
    <member name="M:System.Data.OleDb.OleDbEnumerator.GetElements">
      <summary>检索 <see cref="T:System.Data.DataTable" /> ，包含有关所有可见的 OLE DB 访问接口信息。</summary>
      <returns>返回 <see cref="T:System.Data.DataTable" /> 包含可见的 OLE DB 提供程序的信息。</returns>
      <exception cref="T:System.InvalidCastException">提供程序不支持 ISourcesRowset。</exception>
      <exception cref="T:System.Data.OleDb.OleDbException">基础提供程序中发生了异常。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbEnumerator.GetEnumerator(System.Type)">
      <summary>使用特定的 OLE DB 枚举器返回 <see cref="T:System.Data.OleDb.OleDbDataReader" /> ，而无需的实例包含有关当前安装的 OLE DB 访问接口、 信息 <see cref="T:System.Data.OleDb.OleDbEnumerator" /> 类。</summary>
      <param name="type">
        <see cref="T:System.Type" />。</param>
      <returns>返回 <see cref="T:System.Data.OleDb.OleDbDataReader" /> 包含请求的 OLE DB 访问接口，使用指定的 OLE DB 枚举器有关的信息。</returns>
      <exception cref="T:System.InvalidCastException">提供程序不支持 ISourcesRowset。</exception>
      <exception cref="T:System.Data.OleDb.OleDbException">基础提供程序中发生异常。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbEnumerator.GetRootEnumerator">
      <summary>返回 <see cref="T:System.Data.OleDb.OleDbDataReader" /> ，而无需的实例包含有关当前安装的 OLE DB 访问接口、 信息 <see cref="T:System.Data.OleDb.OleDbEnumerator" /> 类。</summary>
      <returns>返回 <see cref="T:System.Data.OleDb.OleDbDataReader" /> 包含可见的 OLE DB 提供程序的信息。</returns>
      <exception cref="T:System.InvalidCastException">提供程序不支持 ISourcesRowset。</exception>
      <exception cref="T:System.Data.OleDb.OleDbException">基础提供程序中发生了异常。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbError.ToString">
      <summary>获取错误信息的完整文本。</summary>
      <returns>错误信息的完整文本。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbErrorCollection.CopyTo(System.Array,System.Int32)">
      <summary>中的元素复制 <see cref="T:System.Data.OleDb.OleDbErrorCollection" /> 到 <see cref="T:System.Array" />, 内指定索引处开始， <see cref="T:System.Array" />。</summary>
      <param name="array">
        <see cref="T:System.Array" /> 要将元素复制到其中。</param>
      <param name="index">起始索引 <paramref name="array" />。</param>
      <exception cref="T:System.ArgumentException">总和 <paramref name="index" /> 和中的元素数 <see cref="T:System.Data.OleDb.OleDbErrorCollection" /> 个的长度大于 <see cref="T:System.Array" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 无效，不能 <paramref name="array" />。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbErrorCollection.CopyTo(System.Data.OleDb.OleDbError[],System.Int32)">
      <summary>将当前 <see cref="T:System.Data.OleDb.OleDbErrorCollection" /> 的所有元素复制到指定的 <see cref="T:System.Data.OleDb.OleDbErrorCollection" /> 中，并以指定的目标索引位置作为复制到的起始位置。</summary>
      <param name="array">作为当前 <see cref="T:System.Data.OleDb.OleDbErrorCollection" /> 中的元素的复制目标的 <see cref="T:System.Data.OleDb.OleDbErrorCollection" />。</param>
      <param name="index">一个 32 位整数，表示 <see cref="T:System.Data.OleDb.OleDbErrorCollection" /> 中开始复制的位置的索引。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbErrorCollection.GetEnumerator">
      <summary>公开 <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> 方法，该方法支持 .NET Framework 数据提供程序对集合进行简单的迭代。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>此成员重写 <see cref="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />。</summary>
      <param name="si">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它保存关于所引发异常的序列化对象数据。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="si" /> 参数为空引用 (Nothing 在 Visual Basic 中)。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbFactory.CreateCommand">
      <summary>返回一个强类型 <see cref="T:System.Data.Common.DbCommand" /> 实例。</summary>
      <returns>新的强类型实例的 <see cref="T:System.Data.Common.DbCommand" />。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbFactory.CreateCommandBuilder">
      <summary>返回一个强类型 <see cref="T:System.Data.Common.DbCommandBuilder" /> 实例。</summary>
      <returns>新的强类型实例的 <see cref="T:System.Data.Common.DbCommandBuilder" />。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbFactory.CreateConnection">
      <summary>返回一个强类型 <see cref="T:System.Data.Common.DbConnection" /> 实例。</summary>
      <returns>新的强类型实例的 <see cref="T:System.Data.Common.DbConnection" />。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbFactory.CreateConnectionStringBuilder">
      <summary>返回一个强类型 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 实例。</summary>
      <returns>新的强类型实例的 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbFactory.CreateDataAdapter">
      <summary>返回一个强类型 <see cref="T:System.Data.Common.DbDataAdapter" /> 实例。</summary>
      <returns>新的强类型实例的 <see cref="T:System.Data.Common.DbDataAdapter" />。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbFactory.CreateParameter">
      <summary>返回一个强类型 <see cref="T:System.Data.Common.DbParameter" /> 实例。</summary>
      <returns>新的强类型实例的 <see cref="T:System.Data.Common.DbParameter" />。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbFactory.CreatePermission(System.Security.Permissions.PermissionState)">
      <summary>返回一个强类型 <see cref="T:System.Security.CodeAccessPermission" /> 实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 枚举的一个成员。</param>
      <returns>强类型化实例 <see cref="T:System.Security.CodeAccessPermission" />。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbInfoMessageEventArgs.ToString">
      <summary>检索的字符串表示形式 <see cref="E:System.Data.OleDb.OleDbConnection.InfoMessage" /> 事件。</summary>
      <returns>一个字符串，表示 <see cref="E:System.Data.OleDb.OleDbConnection.InfoMessage" /> 事件。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameter.#ctor">
      <summary>初始化 <see cref="T:System.Data.OleDb.OleDbParameter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameter.#ctor(System.String,System.Data.OleDb.OleDbType)">
      <summary>新实例初始化 <see cref="T:System.Data.OleDb.OleDbParameter" /> 类，该类使用参数名称和数据类型。</summary>
      <param name="name">要映射的参数的名称。</param>
      <param name="dataType">
        <see cref="T:System.Data.OleDb.OleDbType" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">中提供的值 <paramref name="dataType" /> 参数是无效的后端数据类型。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameter.#ctor(System.String,System.Data.OleDb.OleDbType,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Data.OleDb.OleDbParameter" /> 类，该类使用参数名称、 数据类型和长度。</summary>
      <param name="name">要映射的参数的名称。</param>
      <param name="dataType">
        <see cref="T:System.Data.OleDb.OleDbType" /> 值之一。</param>
      <param name="size">参数的长度。</param>
      <exception cref="T:System.ArgumentException">中提供的值 <paramref name="dataType" /> 参数是无效的后端数据类型。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameter.#ctor(System.String,System.Data.OleDb.OleDbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
      <summary>新实例初始化 <see cref="T:System.Data.OleDb.OleDbParameter" /> 类，该类使用参数名称、 数据类型、 长度、 源列名称、 参数方向、 数值精度和其他属性。</summary>
      <param name="parameterName">参数的名称。</param>
      <param name="dbType">
        <see cref="T:System.Data.OleDb.OleDbType" /> 值之一。</param>
      <param name="size">参数的长度。</param>
      <param name="direction">
        <see cref="T:System.Data.ParameterDirection" /> 值之一。</param>
      <param name="isNullable">如果字段的值可以为 null，则为 true；否则为 false。</param>
      <param name="precision">所解析的 <see cref="P:System.Data.OleDb.OleDbParameter.Value" /> 的小数点左右两侧的总位数。</param>
      <param name="scale">所解析的 <see cref="P:System.Data.OleDb.OleDbParameter.Value" /> 的总小数位数。</param>
      <param name="srcColumn">源列的名称。</param>
      <param name="srcVersion">
        <see cref="T:System.Data.DataRowVersion" /> 值之一。</param>
      <param name="value">作为 <see cref="T:System.Object" /> 的值的 <see cref="T:System.Data.OleDb.OleDbParameter" />。</param>
      <exception cref="T:System.ArgumentException">中提供的值 <paramref name="dataType" /> 参数是无效的后端数据类型。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameter.#ctor(System.String,System.Data.OleDb.OleDbType,System.Int32,System.Data.ParameterDirection,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Boolean,System.Object)">
      <summary>新实例初始化 <see cref="T:System.Data.OleDb.OleDbParameter" /> 类，该类使用参数名称、 数据类型、 长度、 源列名称、 参数方向、 数值精度和其他属性。</summary>
      <param name="parameterName">参数的名称。</param>
      <param name="dbType">
        <see cref="T:System.Data.OleDb.OleDbType" /> 值之一。</param>
      <param name="size">参数的长度。</param>
      <param name="direction">
        <see cref="T:System.Data.ParameterDirection" /> 值之一。</param>
      <param name="precision">所解析的 <see cref="P:System.Data.OleDb.OleDbParameter.Value" /> 的小数点左右两侧的总位数。</param>
      <param name="scale">所解析的 <see cref="P:System.Data.OleDb.OleDbParameter.Value" /> 的总小数位数。</param>
      <param name="sourceColumn">源列的名称。</param>
      <param name="sourceVersion">
        <see cref="T:System.Data.DataRowVersion" /> 值之一。</param>
      <param name="sourceColumnNullMapping">如果源列可以为 null，则为 true；否则为 ￼false￼。</param>
      <param name="value">作为 <see cref="T:System.Object" /> 的值的 <see cref="T:System.Data.OleDb.OleDbParameter" />。</param>
      <exception cref="T:System.ArgumentException">中提供的值 <paramref name="dataType" /> 参数是无效的后端数据类型。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameter.#ctor(System.String,System.Data.OleDb.OleDbType,System.Int32,System.String)">
      <summary>新实例初始化 <see cref="T:System.Data.OleDb.OleDbParameter" /> 类，该类使用参数名称、 数据类型、 长度和源列名称。</summary>
      <param name="name">要映射的参数的名称。</param>
      <param name="dataType">
        <see cref="T:System.Data.OleDb.OleDbType" /> 值之一。</param>
      <param name="size">参数的长度。</param>
      <param name="srcColumn">源列的名称。</param>
      <exception cref="T:System.ArgumentException">中提供的值 <paramref name="dataType" /> 参数是无效的后端数据类型。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameter.#ctor(System.String,System.Object)">
      <summary>新实例初始化 <see cref="T:System.Data.OleDb.OleDbParameter" /> 类，该类使用参数名称和新值 <see cref="T:System.Data.OleDb.OleDbParameter" />。</summary>
      <param name="name">要映射的参数的名称。</param>
      <param name="value">新的值 <see cref="T:System.Data.OleDb.OleDbParameter" /> 对象。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameter.ResetDbType">
      <summary>重置与此 <see cref="T:System.Data.OleDb.OleDbParameter" /> 关联的类型。</summary>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameter.ResetOleDbType">
      <summary>重置与此 <see cref="T:System.Data.OleDb.OleDbParameter" /> 关联的类型。</summary>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameter.System#ICloneable#Clone">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.ICloneable.Clone" />。</summary>
      <returns>新的 <see cref="T:System.Object" /> 对象，是此实例的副本。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameter.ToString">
      <summary>获取一个包含 <see cref="P:System.Data.OleDb.OleDbParameter.ParameterName" /> 的字符串。</summary>
      <returns>一个包含 <see cref="P:System.Data.OleDb.OleDbParameter.ParameterName" /> 的字符串。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.Add(System.Data.OleDb.OleDbParameter)">
      <summary>添加指定 <see cref="T:System.Data.OleDb.OleDbParameter" /> 到 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />。</summary>
      <param name="value">要添加到集合中的 <see cref="T:System.Data.OleDb.OleDbParameter" />。</param>
      <returns>新的 <see cref="T:System.Data.OleDb.OleDbParameter" /> 对象的索引。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.OleDb.OleDbParameter" /> 中指定 <paramref name="value" /> 参数已添加到这个或其他 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.Add(System.Object)">
      <summary>将指定的 <see cref="T:System.Data.OleDb.OleDbParameter" /> 对象添加到 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 中。</summary>
      <param name="value">
        <see cref="T:System.Object" />。</param>
      <returns>新的索引 <see cref="T:System.Data.OleDb.OleDbParameter" /> 集合中的对象。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.Add(System.String,System.Data.OleDb.OleDbType)">
      <summary>添加 <see cref="T:System.Data.OleDb.OleDbParameter" /> 到 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />, ，给定参数名称和数据类型。</summary>
      <param name="parameterName">参数的名称。</param>
      <param name="oleDbType">
        <see cref="T:System.Data.OleDb.OleDbType" /> 值之一。</param>
      <returns>新的 <see cref="T:System.Data.OleDb.OleDbParameter" /> 对象的索引。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.Add(System.String,System.Data.OleDb.OleDbType,System.Int32)">
      <summary>添加 <see cref="T:System.Data.OleDb.OleDbParameter" /> 到 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 给定参数名称、 数据类型和列的长度。</summary>
      <param name="parameterName">参数的名称。</param>
      <param name="oleDbType">
        <see cref="T:System.Data.OleDb.OleDbType" /> 值之一。</param>
      <param name="size">列的长度。</param>
      <returns>新的 <see cref="T:System.Data.OleDb.OleDbParameter" /> 对象的索引。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.Add(System.String,System.Data.OleDb.OleDbType,System.Int32,System.String)">
      <summary>添加 <see cref="T:System.Data.OleDb.OleDbParameter" /> 到 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 给定参数名称、 数据类型、 列长度和源列名称。</summary>
      <param name="parameterName">参数的名称。</param>
      <param name="oleDbType">
        <see cref="T:System.Data.OleDb.OleDbType" /> 值之一。</param>
      <param name="size">列的长度。</param>
      <param name="sourceColumn">源列的名称。</param>
      <returns>新的 <see cref="T:System.Data.OleDb.OleDbParameter" /> 对象的索引。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.Add(System.String,System.Object)">
      <summary>添加 <see cref="T:System.Data.OleDb.OleDbParameter" /> 到 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 给定参数名称和值。</summary>
      <param name="parameterName">参数的名称。</param>
      <param name="value">
        <see cref="P:System.Data.OleDb.OleDbParameter.Value" /> 的 <see cref="T:System.Data.OleDb.OleDbParameter" /> 要添加到集合。</param>
      <returns>新的 <see cref="T:System.Data.OleDb.OleDbParameter" /> 对象的索引。</returns>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 参数不是 <see cref="T:System.Data.OleDb.OleDbParameter" />。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.AddRange(System.Array)">
      <summary>向 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 的末尾添加一个值数组。</summary>
      <param name="values">要添加的 <see cref="T:System.Array" /> 值。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.AddRange(System.Data.OleDb.OleDbParameter[])">
      <summary>向 <see cref="T:System.Data.OleDb.OleDbParameter" /> 的末尾添加一个 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 值数组。</summary>
      <param name="values">要添加的 <see cref="T:System.Data.OleDbParameter" /> 值。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.AddWithValue(System.String,System.Object)">
      <summary>向 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 的末尾添加一个值。</summary>
      <param name="parameterName">参数的名称。</param>
      <param name="value">要添加的值。</param>
      <returns>一个 <see cref="T:System.Data.OleDb.OleDbParameter" /> 对象。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.Clear">
      <summary>删除所有 <see cref="T:System.Data.OleDb.OleDbParameter" /> 对象从 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />。</summary>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.Contains(System.Data.OleDb.OleDbParameter)">
      <summary>确定指定的 <see cref="T:System.Data.OleDb.OleDbParameter" /> 是否在此 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 中。</summary>
      <param name="value">
        <see cref="T:System.Data.OleDb.OleDbParameter" /> 值。</param>
      <returns>true 如果 <see cref="T:System.Data.OleDb.OleDbParameter" /> 在集合中; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.Contains(System.Object)">
      <summary>确定指定的 <see cref="T:System.Object" /> 是否在此 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 中。</summary>
      <param name="value">
        <see cref="T:System.Object" /> 值。</param>
      <returns>true 如果 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 包含 <paramref name="value" />; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.Contains(System.String)">
      <summary>确定指定的 <see cref="T:System.String" /> 是否在此 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 中。</summary>
      <param name="value">
        <see cref="T:System.String" /> 值。</param>
      <returns>true 如果 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 包含的值; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.CopyTo(System.Array,System.Int32)">
      <summary>将当前 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 的所有元素复制到指定的一维 <see cref="T:System.Array" /> 中，并以指定的目标 <see cref="T:System.Array" /> 索引位置作为复制到的起始位置。</summary>
      <param name="array">作为当前 <see cref="T:System.Array" /> 中的元素的复制目标的一维 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />。</param>
      <param name="index">一个 32 位整数，表示 <see cref="T:System.Array" /> 中开始复制的位置的索引。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.CopyTo(System.Data.OleDb.OleDbParameter[],System.Int32)">
      <summary>将当前 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 的所有元素复制到指定的 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 中，并以指定的目标索引位置作为复制到的起始位置。</summary>
      <param name="array">作为当前 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 中的元素的复制目标的 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />。</param>
      <param name="index">一个 32 位整数，表示 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 中开始复制的位置的索引。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 的枚举数。</summary>
      <returns>用于 <see cref="T:System.Collections.Generic.IEnumerator" /> 的 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.IndexOf(System.Data.OleDb.OleDbParameter)">
      <summary>获取指定的位置 <see cref="T:System.Data.OleDb.OleDbParameter" /> 在集合中。</summary>
      <param name="value">
        <see cref="T:System.Data.OleDb.OleDbParameter" /> 集合中要查找的对象。</param>
      <returns>指定的从零开始的位置 <see cref="T:System.Data.OleDb.OleDbParameter" /> 即 <see cref="T:System.Data.OleDb.OleDbParameter" /> 在集合中。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.IndexOf(System.Object)">
      <summary>指定的位置 <see cref="T:System.Object" /> 在集合中。</summary>
      <param name="value">要查找的 <see cref="T:System.Object" />。</param>
      <returns>指定的从零开始的位置 <see cref="T:System.Object" /> 即 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 在集合中。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.IndexOf(System.String)">
      <summary>获取具有指定名称的指定 <see cref="T:System.Data.OleDb.OleDbParameter" /> 的位置。</summary>
      <param name="parameterName">要查找的 <see cref="T:System.Data.OleDb.OleDbParameter" /> 的名称（区分大小写）。</param>
      <returns>具有指定名称（区分大小写）的指定 <see cref="T:System.Data.OleDb.OleDbParameter" /> 的位置（从零开始）。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.Insert(System.Int32,System.Data.OleDb.OleDbParameter)">
      <summary>在 <see cref="T:System.Data.OleDb.OleDbParameter" /> 中的指定索引处插入一个 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 对象。</summary>
      <param name="index">应将值插入到的位置的索引（从零开始）。</param>
      <param name="value">
        <see cref="T:System.Data.OleDb.OleDbParameter" /> 中要插入对象 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.Insert(System.Int32,System.Object)">
      <summary>将插入 <see cref="T:System.Object" /> 到 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 中指定索引处。</summary>
      <param name="index">应将值插入到的位置的索引（从零开始）。</param>
      <param name="value">一个 <see cref="T:System.Object" /> 中插入 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.Remove(System.Data.OleDb.OleDbParameter)">
      <summary>删除 <see cref="T:System.Data.OleDb.OleDbParameter" /> 从 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />。</summary>
      <param name="value">
        <see cref="T:System.Data.OleDb.OleDbParameter" /> 要从集合中移除对象。</param>
      <exception cref="T:System.InvalidCastException">该参数不是 <see cref="T:System.Data.OleDb.OleDbParameter" />。</exception>
      <exception cref="T:System.SystemException">集合中不存在该参数。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.Remove(System.Object)">
      <summary>删除 <see cref="T:System.Object" /> 对象从 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />。</summary>
      <param name="value">
        <see cref="T:System.Object" /> 从删除 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.RemoveAt(System.Int32)">
      <summary>从 <see cref="T:System.Data.OleDb.OleDbParameter" /> 的指定索引处移除 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />。</summary>
      <param name="index">要移除的 <see cref="T:System.Data.OleDb.OleDbParameter" /> 对象的索引（从零开始）。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbParameterCollection.RemoveAt(System.String)">
      <summary>从 <see cref="T:System.Data.OleDb.OleDbParameter" /> 中移除具有指定参数名称的 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />。</summary>
      <param name="parameterName">名称 <see cref="T:System.Data.OleDb.OleDbParameter" /> 要移除对象。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbPermission.#ctor">
      <summary>初始化 <see cref="T:System.Data.OleDb.OleDbPermission" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.OleDb.OleDbPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>初始化 <see cref="T:System.Data.OleDb.OleDbPermission" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbPermission.#ctor(System.Security.Permissions.PermissionState,System.Boolean)">
      <summary>初始化 <see cref="T:System.Data.OleDb.OleDbPermission" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
      <param name="allowBlankPassword">指示是否允许密码为空。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbPermission.Copy">
      <summary>返回 <see cref="T:System.Data.OleDb.OleDbPermission" /> 作为 <see cref="T:System.Security.IPermission" />。</summary>
      <returns>当前权限对象的副本。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>初始化 <see cref="T:System.Data.OleDb.OleDbPermissionAttribute" /> 类的新实例。</summary>
      <param name="action">其中一个 <see cref="T:System.Security.Permissions.SecurityAction" /> 表示可通过使用声明性安全执行的操作的值。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbPermissionAttribute.CreatePermission">
      <summary>返回 <see cref="T:System.Data.OleDb.OleDbPermission" /> 特性属性根据配置的对象。</summary>
      <returns>一个 <see cref="T:System.Data.OleDb.OleDbPermission" /> 对象。</returns>
    </member>
    <member name="M:System.Data.OleDb.OleDbRowUpdatedEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>初始化 <see cref="T:System.Data.OleDb.OleDbRowUpdatedEventArgs" /> 类的新实例。</summary>
      <param name="dataRow">
        <see cref="T:System.Data.DataRow" /> 通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</param>
      <param name="command">
        <see cref="T:System.Data.IDbCommand" /> 时执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 调用。</param>
      <param name="statementType">其中一个 <see cref="T:System.Data.StatementType" /> 值，该值指定执行查询的类型。</param>
      <param name="tableMapping">
        <see cref="T:System.Data.Common.DataTableMapping" /> 通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbRowUpdatingEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>初始化 <see cref="T:System.Data.OleDb.OleDbRowUpdatingEventArgs" /> 类的新实例。</summary>
      <param name="dataRow">
        <see cref="T:System.Data.DataRow" /> 到 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</param>
      <param name="command">
        <see cref="T:System.Data.IDbCommand" /> 过程中执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</param>
      <param name="statementType">其中一个 <see cref="T:System.Data.StatementType" /> 值，该值指定执行查询的类型。</param>
      <param name="tableMapping">
        <see cref="T:System.Data.Common.DataTableMapping" /> 通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbSchemaGuid.#ctor">
      <summary>初始化 <see cref="T:System.Data.OleDb.OleDbSchemaGuid" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.OleDb.OleDbTransaction.Begin">
      <summary>启动嵌套的数据库事务。</summary>
      <returns>嵌套的数据库事务。</returns>
      <exception cref="T:System.InvalidOperationException">不支持嵌套的事务。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbTransaction.Begin(System.Data.IsolationLevel)">
      <summary>启动嵌套的数据库事务，并指定要用于新事务的隔离级别。</summary>
      <param name="isolevel">要用于该事务的隔离级别。</param>
      <returns>嵌套的数据库事务。</returns>
      <exception cref="T:System.InvalidOperationException">不支持嵌套的事务。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbTransaction.Commit">
      <summary>提交数据库事务。</summary>
      <exception cref="T:System.Exception">在尝试提交事务时出错。</exception>
      <exception cref="T:System.InvalidOperationException">已提交或回滚事务。- 或 - 连接已断开。</exception>
    </member>
    <member name="M:System.Data.OleDb.OleDbTransaction.Rollback">
      <summary>从挂起状态回滚事务。</summary>
      <exception cref="T:System.Exception">在尝试提交事务时出错。</exception>
      <exception cref="T:System.InvalidOperationException">已提交或回滚事务。- 或 - 连接已断开。</exception>
    </member>
    <member name="M:System.Data.PropertyCollection.#ctor">
      <summary>初始化 <see cref="T:System.Data.PropertyCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.PropertyCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化 <see cref="T:System.Data.PropertyCollection" /> 类的新实例。</summary>
      <param name="info">要序列化或反序列化对象所需的数据。</param>
      <param name="context">源和给定序列化流的目标。</param>
    </member>
    <member name="M:System.Data.PropertyCollection.Clone">
      <summary>创建 <see cref="T:System.Data.PropertyCollection" /> 对象的浅表副本。</summary>
      <returns>返回 <see cref="T:System.Object" />, 的浅表副本 <see cref="T:System.Data.PropertyCollection" /> 对象。</returns>
    </member>
    <member name="M:System.Data.ReadOnlyException.#ctor">
      <summary>初始化 <see cref="T:System.Data.ReadOnlyException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.ReadOnlyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>新实例初始化 <see cref="T:System.Data.ReadOnlyException" /> 用序列化信息的类。</summary>
      <param name="info">要序列化或反序列化对象所需的数据。</param>
      <param name="context">源和目标的指定的序列化流的说明。</param>
    </member>
    <member name="M:System.Data.ReadOnlyException.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Data.ReadOnlyException" /> 类，具有指定的字符串。</summary>
      <param name="s">要在引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.ReadOnlyException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.ReadOnlyException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="M:System.Data.RowNotInTableException.#ctor">
      <summary>初始化 <see cref="T:System.Data.RowNotInTableException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.RowNotInTableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>新实例初始化 <see cref="T:System.Data.RowNotInTableException" /> 用序列化信息的类。</summary>
      <param name="info">要序列化或反序列化对象所需的数据。</param>
      <param name="context">源和目标的指定的序列化流的说明。</param>
    </member>
    <member name="M:System.Data.RowNotInTableException.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Data.RowNotInTableException" /> 类，具有指定的字符串。</summary>
      <param name="s">要在引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.RowNotInTableException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.RowNotInTableException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="M:System.Data.Sql.SqlDataSourceEnumerator.GetDataSources">
      <summary>检索 <see cref="T:System.Data.DataTable" /> 包含所有可见 SQL Server 2000 或 SQL Server 2005 实例有关的信息。</summary>
      <returns>返回 <see cref="T:System.Data.DataTable" /> 包含可见的 SQL Server 实例有关的信息。</returns>
    </member>
    <member name="M:System.Data.Sql.SqlNotificationRequest.#ctor">
      <summary>使用默认值创建 <see cref="T:System.Data.Sql.SqlNotificationRequest" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Sql.SqlNotificationRequest.#ctor(System.String,System.String,System.Int32)">
      <summary>创建的新实例 <see cref="T:System.Data.Sql.SqlNotificationRequest" /> 类和用户定义的字符串，用来标识特定的通知请求，预定义的 SQL Server 2005 Service Broker 服务名称和超时期限内，名称以秒为单位。</summary>
      <param name="userData">一个字符串，包含此通知的应用程序特定标识符。 通知基础结构，不使用它，但它允许您将通知与应用程序状态相关联。 指示此参数中的值包含在 Service Broker 队列消息。</param>
      <param name="options">一个字符串，包含其中发布通知消息，并且它必须包含数据库名称或 GUID，将服务名称查找的作用域限制为特定数据库的 Service Broker 实例的 Service Broker 服务名。有关格式的详细信息 <paramref name="options" /> 参数，请参阅 <see cref="P:System.Data.Sql.SqlNotificationRequest.Options" />。</param>
      <param name="timeout">以秒为单位，要等待一条通知消息的时间。</param>
      <exception cref="T:System.ArgumentNullException">值 <paramref name="options" /> 参数为 NULL。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 或 <paramref name="userData" /> 参数的长度超过 uint16.MaxValue 或中的值 <paramref name="timeout" /> 参数小于零。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)">
      <summary>使用 <see cref="T:System.Data.SqlClient.SqlConnection" /> 的指定打开实例初始化 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 类的新实例。</summary>
      <param name="connection">将用于执行批量复制操作的已经打开的 <see cref="T:System.Data.SqlClient.SqlConnection" /> 实例。 如果连接字符串不使用 Integrated Security = true，则可以使用 <see cref="T:System.Data.SqlClient.SqlCredential" /> 来传递用户 ID 和密码，这比将用户 ID 和密码指定为连接字符串中的文本更安全。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)">
      <summary>使用提供的 <see cref="T:System.Data.SqlClient.SqlConnection" /> 的现有打开实例初始化 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 类的新实例。<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 实例的行为取决于 <paramref name="copyOptions" /> 参数中提供的选项。 如果提供非空 <see cref="T:System.Data.SqlClient.SqlTransaction" />，则复制操作将在该事务中执行。</summary>
      <param name="connection">将用于执行批量复制操作的已经打开的 <see cref="T:System.Data.SqlClient.SqlConnection" /> 实例。 如果连接字符串不使用 Integrated Security = true，则可以使用 <see cref="T:System.Data.SqlClient.SqlCredential" /> 来传递用户 ID 和密码，这比将用户 ID 和密码指定为连接字符串中的文本更安全。</param>
      <param name="copyOptions">
        <see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" /> 枚举中的值的组合，该枚举确定将哪些数据源行复制到目标表中。</param>
      <param name="externalTransaction">现有的 <see cref="T:System.Data.SqlClient.SqlTransaction" /> 实例，批量复制操作将在该实例下进行。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)">
      <summary>基于提供的 <paramref name="connectionString" /> 初始化并打开 <see cref="T:System.Data.SqlClient.SqlConnection" /> 的新实例。 该构造函数使用 <see cref="T:System.Data.SqlClient.SqlConnection" /> 来初始化 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 类的新实例。</summary>
      <param name="connectionString">定义将打开供 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 实例使用的连接的字符串。 如果该连接字符串不使用 Integrated Security = true，则可以使用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" /> 或 <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" /> 和 <see cref="T:System.Data.SqlClient.SqlCredential" /> 来传递用户 ID 和密码，这比将用户 ID 和密码指定为连接字符串中的文本更安全。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)">
      <summary>基于提供的 <paramref name="connectionString" /> 初始化并打开 <see cref="T:System.Data.SqlClient.SqlConnection" /> 的新实例。 构造函数使用该 <see cref="T:System.Data.SqlClient.SqlConnection" /> 来初始化 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 类的新实例。<see cref="T:System.Data.SqlClient.SqlConnection" /> 实例的行为取决于 <paramref name="copyOptions" /> 参数中提供的选项。</summary>
      <param name="connectionString">定义将打开供 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 实例使用的连接的字符串。 如果该连接字符串不使用 Integrated Security = true，则可以使用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" /> 或 <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" /> 和 <see cref="T:System.Data.SqlClient.SqlCredential" /> 来传递用户 ID 和密码，这比将用户 ID 和密码指定为连接字符串中的文本更安全。</param>
      <param name="copyOptions">
        <see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" /> 枚举中的值的组合，该枚举确定将哪些数据源行复制到目标表中。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopy.Close">
      <summary>关闭 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 实例。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose">
      <summary>释放 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 类的当前实例所使用的所有资源。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)">
      <summary>将所有行从提供的 <see cref="T:System.Data.Common.DbDataReader" /> 数组复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表中。</summary>
      <param name="reader">一个 <see cref="T:System.Data.Common.DbDataReader" />，其行将复制到目标表。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])">
      <summary>将所有行从提供的 <see cref="T:System.Data.DataRow" /> 数组复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表中。</summary>
      <param name="rows">将复制到目标表的 <see cref="T:System.Data.DataRow" /> 对象数组。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)">
      <summary>将所有行从提供的 <see cref="T:System.Data.DataTable" /> 复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表中。</summary>
      <param name="table">一个 <see cref="T:System.Data.DataTable" />，其行将复制到目标表。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)">
      <summary>仅将与提供的 <see cref="T:System.Data.DataTable" /> 中提供的行状态匹配的行复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表。</summary>
      <param name="table">一个 <see cref="T:System.Data.DataTable" />，其行将复制到目标表。</param>
      <param name="rowState">
        <see cref="T:System.Data.DataRowState" /> 枚举中的一个值。 只有与行状态匹配的行才会复制到目标中。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)">
      <summary>将所有行从提供的 <see cref="T:System.Data.IDataReader" /> 复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表中。</summary>
      <param name="reader">一个 <see cref="T:System.Data.IDataReader" />，其行将复制到目标表。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" /> 的异步版本，它将所有行从提供的 <see cref="T:System.Data.Common.DbDataReader" /> 数组复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表。</summary>
      <param name="reader">一个 <see cref="T:System.Data.Common.DbDataReader" />，其行将复制到目标表。</param>
      <returns>表示异步操作的任务。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" /> 的异步版本，它将所有行从提供的 <see cref="T:System.Data.Common.DbDataReader" /> 数组复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表。</summary>
      <param name="reader">一个 <see cref="T:System.Data.Common.DbDataReader" />，其行将复制到目标表。</param>
      <param name="cancellationToken">取消指令。 此参数中的 <see cref="P:System.Threading.CancellationToken.None" /> 值将使此方法等效于 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)" />。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task" />。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> 的异步版本，它将所有行从提供的 <see cref="T:System.Data.DataRow" /> 数组复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表。</summary>
      <param name="rows">将复制到目标表的 <see cref="T:System.Data.DataRow" /> 对象数组。</param>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.InvalidOperationException">在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />。在完成任务前，为同一个实例调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> 和 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />。在执行 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> 期间连接断开或关闭。在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象在执行方法时关闭。在任务对象中返回后存在连接池超时。在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlConnection" /> 对象在执行方法前关闭。在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">由 SQL Server 在任务对象中返回的任意错误，这些错误是打开连接时出现的。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> 的异步版本，它将所有行从提供的 <see cref="T:System.Data.DataRow" /> 数组复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表。取消标记可用于请求在命令超时超过前放弃操作。  将通过返回的任务对象报告异常。</summary>
      <param name="rows">将复制到目标表的 <see cref="T:System.Data.DataRow" /> 对象数组。</param>
      <param name="cancellationToken">取消指令。 此参数中的 <see cref="P:System.Threading.CancellationToken.None" /> 值将使此方法等效于 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />。</param>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.InvalidOperationException">在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />。在完成任务前，为同一个实例调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> 和 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />。在执行 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> 期间连接断开或关闭。在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象在执行方法时关闭。在任务对象中返回后存在连接池超时。在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlConnection" /> 对象在执行方法前关闭。在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">由 SQL Server 在任务对象中返回的任意错误，这些错误是打开连接时出现的。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> 的异步版本，它将提供的 <see cref="T:System.Data.DataTable" /> 中的所有行复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表。</summary>
      <param name="table">一个 <see cref="T:System.Data.DataTable" />，其行将复制到目标表。</param>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.InvalidOperationException">在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />。在完成任务前，为同一个实例调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> 和 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />。在执行 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> 期间连接断开或关闭。在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象在执行方法时关闭。在任务对象中返回后存在连接池超时。在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlConnection" /> 对象在执行方法前关闭。在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">由 SQL Server 在任务对象中返回的任意错误，这些错误是打开连接时出现的。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> 的异步版本，它只将匹配所提供 <see cref="T:System.Data.DataTable" /> 中所提供行状态的行复制到  <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表中。</summary>
      <param name="table">一个 <see cref="T:System.Data.DataTable" />，其行将复制到目标表。</param>
      <param name="rowState">
        <see cref="T:System.Data.DataRowState" /> 枚举中的一个值。 只有与行状态匹配的行才会复制到目标中。</param>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.InvalidOperationException">在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />。在完成任务前，为同一个实例调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> 和 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />。在执行 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> 期间连接断开或关闭。在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象在执行方法时关闭。在任务对象中返回后存在连接池超时。在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlConnection" /> 对象在执行方法前关闭。在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">由 SQL Server 在任务对象中返回的任意错误，这些错误是打开连接时出现的。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> 的异步版本，它只将匹配所提供 <see cref="T:System.Data.DataTable" /> 中所提供行状态的行复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表中。取消标记可用于请求在命令超时超过前放弃操作。  将通过返回的任务对象报告异常。</summary>
      <param name="table">一个 <see cref="T:System.Data.DataTable" />，其行将复制到目标表。</param>
      <param name="rowState">
        <see cref="T:System.Data.DataRowState" /> 枚举中的一个值。 只有与行状态匹配的行才会复制到目标中。</param>
      <param name="cancellationToken">取消指令。 此参数中的 <see cref="P:System.Threading.CancellationToken.None" /> 值将使此方法等效于 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />。</param>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.InvalidOperationException">在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />。在完成任务前，为同一个实例调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> 和 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />。在执行 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> 期间连接断开或关闭。在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象在执行方法时关闭。在任务对象中返回后存在连接池超时。在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlConnection" /> 对象在执行方法前关闭。在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">由 SQL Server 在任务对象中返回的任意错误，这些错误是打开连接时出现的。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> 的异步版本，它将提供的 <see cref="T:System.Data.DataTable" /> 中的所有行复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表。取消标记可用于请求在命令超时超过前放弃操作。  将通过返回的任务对象报告异常。</summary>
      <param name="table">一个 <see cref="T:System.Data.DataTable" />，其行将复制到目标表。</param>
      <param name="cancellationToken">取消指令。 此参数中的 <see cref="P:System.Threading.CancellationToken.None" /> 值将使此方法等效于 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />。</param>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.InvalidOperationException">在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />。在完成任务前，为同一个实例调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> 和 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />。在执行 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> 期间连接断开或关闭。在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象在执行方法时关闭。在任务对象中返回后存在连接池超时。在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlConnection" /> 对象在执行方法前关闭。在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">由 SQL Server 在任务对象中返回的任意错误，这些错误是打开连接时出现的。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> 的异步版本，它将提供的 <see cref="T:System.Data.IDataReader" /> 中的所有行复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表。</summary>
      <param name="reader">一个 <see cref="T:System.Data.IDataReader" />，其行将复制到目标表。</param>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.InvalidOperationException">在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />。在完成任务前，为同一个实例调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> 和 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />。在执行 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> 期间连接断开或关闭。在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象在执行方法时关闭。在任务对象中返回后存在连接池超时。在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlConnection" /> 对象在执行方法前关闭。在完成的 <see cref="T:System.Threading.Tasks.Task" /> 返回之前，<see cref="T:System.Data.IDataReader" /> 已关闭。在完成的 <see cref="T:System.Threading.Tasks.Task" /> 返回之前，与 <see cref="T:System.Data.IDataReader" /> 相关的连接已关闭。在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">由 SQL Server 在任务对象中返回的任意错误，这些错误是打开连接时出现的。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> 的异步版本，它将提供的 <see cref="T:System.Data.IDataReader" /> 中的所有行复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性指定的目标表。取消标记可用于请求在命令超时超过前放弃操作。  将通过返回的任务对象报告异常。</summary>
      <param name="reader">一个 <see cref="T:System.Data.IDataReader" />，其行将复制到目标表。</param>
      <param name="cancellationToken">取消指令。 此参数中的 <see cref="P:System.Threading.CancellationToken.None" /> 值将使此方法等效于 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />。</param>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.InvalidOperationException">在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />。在完成任务前，为同一个实例调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> 和 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />。在执行 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> 期间连接断开或关闭。在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象在执行方法时关闭。在任务对象中返回后存在连接池超时。在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlConnection" /> 对象在执行方法前关闭。在完成的 <see cref="T:System.Threading.Tasks.Task" /> 返回之前，<see cref="T:System.Data.IDataReader" /> 已关闭。在完成的 <see cref="T:System.Threading.Tasks.Task" /> 返回之前，与 <see cref="T:System.Data.IDataReader" /> 相关的连接已关闭。在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">由 SQL Server 在任务对象中返回的任意错误，这些错误是打开连接时出现的。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopyColumnMapping.#ctor">
      <summary>初始化一个新的默认构造函数 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 对象。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopyColumnMapping.#ctor(System.Int32,System.Int32)">
      <summary>创建一个新的列映射，并使用列序号来引用的源和目标列。</summary>
      <param name="sourceColumnOrdinal">数据源中的源列的序号位置。</param>
      <param name="destinationOrdinal">目标表中的目标列的序号位置。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopyColumnMapping.#ctor(System.Int32,System.String)">
      <summary>创建新的列映射，并使用列的序号引用的源列和目标列的列名称。</summary>
      <param name="sourceColumnOrdinal">数据源中的源列的序号位置。</param>
      <param name="destinationColumn">目标表中的目标列的名称。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopyColumnMapping.#ctor(System.String,System.Int32)">
      <summary>创建新的列映射，并使用一个列名称来引用的源列和的列序号目标列。</summary>
      <param name="sourceColumn">数据源中的源列的名称。</param>
      <param name="destinationOrdinal">目标表中的目标列的序号位置。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopyColumnMapping.#ctor(System.String,System.String)">
      <summary>创建一个新的列映射，并使用列名称来引用的源和目标列。</summary>
      <param name="sourceColumn">数据源中的源列的名称。</param>
      <param name="destinationColumn">目标表中的目标列的名称。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Add(System.Data.SqlClient.SqlBulkCopyColumnMapping)">
      <summary>指定将映射添加到 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection" />。</summary>
      <param name="bulkCopyColumnMapping">
        <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 对象，描述要添加到集合的映射。</param>
      <returns>一个 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 对象。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Add(System.Int32,System.Int32)">
      <summary>创建一个新 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 并将其添加到集合中，使用序号指定源和目标列。</summary>
      <param name="sourceColumnIndex">数据源中的源列的序号位置。</param>
      <param name="destinationColumnIndex">目标表中的目标列的序号位置。</param>
      <returns>列映射。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Add(System.Int32,System.String)">
      <summary>创建一个新 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 并将其添加到集合中，使用源列和目标列的字符串的序号。</summary>
      <param name="sourceColumnIndex">数据源中的源列的序号位置。</param>
      <param name="destinationColumn">目标表中的目标列的名称。</param>
      <returns>列映射。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Add(System.String,System.Int32)">
      <summary>创建一个新 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 并将其添加到集合中，使用一个列名称来描述源列和指定的目标列的序号。</summary>
      <param name="sourceColumn">数据源中的源列的名称。</param>
      <param name="destinationColumnIndex">目标表中的目标列的序号位置。</param>
      <returns>列映射。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Add(System.String,System.String)">
      <summary>创建一个新 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 并将其添加到集合中，使用列名称来指定源和目标列。</summary>
      <param name="sourceColumn">数据源中的源列的名称。</param>
      <param name="destinationColumn">目标表中的目标列的名称。</param>
      <returns>列映射。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Clear">
      <summary>清除集合的内容。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Contains(System.Data.SqlClient.SqlBulkCopyColumnMapping)">
      <summary>获取一个值，该值指示是否指定 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 集合中存在的对象。</summary>
      <param name="value">一个有效 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 对象。</param>
      <returns>true 如果指定的映射存在于集合;否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.CopyTo(System.Data.SqlClient.SqlBulkCopyColumnMapping[],System.Int32)">
      <summary>中的元素复制 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection" /> 指向数组 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 开头的特定索引处的项。</summary>
      <param name="array">一维 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 数组，表示从复制的元素的目标 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection" />。 该数组的索引必须从零开始。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.IndexOf(System.Data.SqlClient.SqlBulkCopyColumnMapping)">
      <summary>获取指定的索引 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 对象。</summary>
      <param name="value">
        <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 要搜索的对象。</param>
      <returns>列映射或如果在集合中找不到列映射为-1 的从零开始的索引。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Insert(System.Int32,System.Data.SqlClient.SqlBulkCopyColumnMapping)">
      <summary>插入一个新 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 指定索引处。</summary>
      <param name="index">中的位置的整数值 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection" />  在此处插入新 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />。</param>
      <param name="value">
        <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 若要插入到集合中的对象。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Remove(System.Data.SqlClient.SqlBulkCopyColumnMapping)">
      <summary>移除指定 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 元素从 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection" />。</summary>
      <param name="value">
        <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 若要从集合中移除的对象。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.RemoveAt(System.Int32)">
      <summary>从集合中移除指定索引处的映射。</summary>
      <param name="index">从零开始的索引 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 要从集合中移除对象。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientFactory.CreateCommand">
      <summary>返回一个强类型 <see cref="T:System.Data.Common.DbCommand" /> 实例。</summary>
      <returns>强类型化的新实例 <see cref="T:System.Data.Common.DbCommand" />。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientFactory.CreateCommandBuilder">
      <summary>返回一个强类型 <see cref="T:System.Data.Common.DbCommandBuilder" /> 实例。</summary>
      <returns>强类型化的新实例 <see cref="T:System.Data.Common.DbCommandBuilder" />。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientFactory.CreateConnection">
      <summary>返回一个强类型 <see cref="T:System.Data.Common.DbConnection" /> 实例。</summary>
      <returns>强类型化的新实例 <see cref="T:System.Data.Common.DbConnection" />。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientFactory.CreateConnectionStringBuilder">
      <summary>返回一个强类型 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 实例。</summary>
      <returns>强类型化的新实例 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientFactory.CreateDataAdapter">
      <summary>返回一个强类型 <see cref="T:System.Data.Common.DbDataAdapter" /> 实例。</summary>
      <returns>强类型化的新实例 <see cref="T:System.Data.Common.DbDataAdapter" />。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientFactory.CreateDataSourceEnumerator">
      <summary>返回一个新的 <see cref="T:System.Data.Sql.SqlDataSourceEnumerator" />。</summary>
      <returns>新的数据源枚举器。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientFactory.CreateParameter">
      <summary>返回一个强类型 <see cref="T:System.Data.Common.DbParameter" /> 实例。</summary>
      <returns>强类型化的新实例 <see cref="T:System.Data.Common.DbParameter" />。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientFactory.CreatePermission(System.Security.Permissions.PermissionState)">
      <summary>返回一个新的 <see cref="T:System.Security.CodeAccessPermission" />。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 枚举的一个成员。</param>
      <returns>强类型化的实例的 <see cref="T:System.Security.CodeAccessPermission" />。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientFactory.System#IServiceProvider#GetService(System.Type)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.IServiceProvider.GetService(System.Type)" />。</summary>
      <param name="serviceType">一个对象，它指定要获取的服务对象的类型。</param>
      <returns>一个服务对象。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientPermission.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlClient.SqlClientPermission" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>初始化 <see cref="T:System.Data.SqlClient.SqlClientPermission" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientPermission.#ctor(System.Security.Permissions.PermissionState,System.Boolean)">
      <summary>初始化 <see cref="T:System.Data.SqlClient.SqlClientPermission" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
      <param name="allowBlankPassword">指示是否允许密码为空。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientPermission.Add(System.String,System.String,System.Data.KeyRestrictionBehavior)">
      <summary>添加新的连接字符串和一组受限制的关键字为 <see cref="T:System.Data.SqlClient.SqlClientPermission" /> 对象。</summary>
      <param name="connectionString">连接字符串。</param>
      <param name="restrictions">键的限制。</param>
      <param name="behavior">其中一个 <see cref="T:System.Data.KeyRestrictionBehavior" /> 枚举。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientPermission.Copy">
      <summary>返回 <see cref="T:System.Data.SqlClient.SqlClientPermission" /> 作为 <see cref="T:System.Security.IPermission" />。</summary>
      <returns>当前权限对象的副本。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>初始化 <see cref="T:System.Data.SqlClient.SqlClientPermissionAttribute" /> 类的新实例。</summary>
      <param name="action">其中一个 <see cref="T:System.Security.Permissions.SecurityAction" /> 表示可通过使用声明性安全执行的操作的值。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientPermissionAttribute.CreatePermission">
      <summary>返回 <see cref="T:System.Data.SqlClient.SqlClientPermission" /> 特性属性根据配置的对象。</summary>
      <returns>一个 <see cref="T:System.Data.SqlClient.SqlClientPermission" /> 对象。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlColumnEncryptionCertificateStoreProvider.#ctor">
      <summary>Windows 证书存储的密钥存储提供程序。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlColumnEncryptionCertificateStoreProvider.DecryptColumnEncryptionKey(System.String,System.String,System.Byte[])">
      <summary>对列加密密钥的指定加密值进行解密。 加密值预期应使用具有指定密钥路径的证书和指定的算法进行加密。 密钥路径的格式应为“Local Machine/My/&lt;certificate_thumbrint&gt;”或“Current User/My/&lt;certificate_thumbprint&gt;”。</summary>
      <param name="masterKeyPath">主密钥路径。</param>
      <param name="encryptionAlgorithm">加密算法。 当前，唯一有效的值是：RSA_OAEP。</param>
      <param name="encryptedColumnEncryptionKey">加密的列加密密钥。</param>
      <returns>返回 <see cref="T:System.Byte" />。已解密的列加密密钥。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlColumnEncryptionCertificateStoreProvider.EncryptColumnEncryptionKey(System.String,System.String,System.Byte[])">
      <summary>使用具有指定密钥路径的证书和使用指定的算法对列加密密钥进行加密。 密钥路径的格式应为“Local Machine/My/&lt;certificate_thumbrint&gt;”或“Current User/My/&lt;certificate_thumbprint&gt;”。</summary>
      <param name="masterKeyPath">主密钥路径。</param>
      <param name="encryptionAlgorithm">加密算法。 当前，唯一有效的值是：RSA_OAEP。</param>
      <param name="columnEncryptionKey">加密的列加密密钥。</param>
      <returns>返回 <see cref="T:System.Byte" />。加密的列加密密钥。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlColumnEncryptionCngProvider.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlClient.SqlColumnEncryptionCngProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlColumnEncryptionCngProvider.DecryptColumnEncryptionKey(System.String,System.String,System.Byte[])">
      <summary>使用由密钥路径和指定算法指定的非对称密钥对给定的加密值进行解密。 密钥路径将采用格式 [ProviderName]/KeyIdentifier，并且应当为存储在指定 CNG 密钥存储提供程序中的非对称密钥。 用于加密/解密 CEK 的有效算法是“RSA_OAEP”。</summary>
      <param name="masterKeyPath">主密钥路径。</param>
      <param name="encryptionAlgorithm">加密算法。</param>
      <param name="encryptedColumnEncryptionKey">加密的列加密密钥。</param>
      <returns>已解密的列加密密钥。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlColumnEncryptionCngProvider.EncryptColumnEncryptionKey(System.String,System.String,System.Byte[])">
      <summary>通过使用由密钥路径和指定算法所指定的非对称密钥，对给定的纯文本列加密密钥进行加密。 密钥路径将采用格式 [ProviderName]/KeyIdentifier，并且应当为存储在指定 CNG 密钥存储提供程序中的非对称密钥。 用于加密/解密 CEK 的有效算法是“RSA_OAEP”。</summary>
      <param name="masterKeyPath">主密钥路径。</param>
      <param name="encryptionAlgorithm">加密算法。</param>
      <param name="columnEncryptionKey">加密的列加密密钥。</param>
      <returns>加密的列加密密钥。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlColumnEncryptionCspProvider.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlClient.SqlColumnEncryptionCspProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlColumnEncryptionCspProvider.DecryptColumnEncryptionKey(System.String,System.String,System.Byte[])">
      <summary>使用由密钥路径和算法指定的非对称密钥对给定的加密值进行解密。 密钥路径将采用格式 [ProviderName]/ KeyIdentifier，并且应为存储在指定 CSP 提供程序中的非对称密钥。 用于加密/解密 CEK 的有效算法是“RSA_OAEP”。</summary>
      <param name="masterKeyPath">主密钥路径。</param>
      <param name="encryptionAlgorithm">加密算法。</param>
      <param name="encryptedColumnEncryptionKey">加密的列加密密钥。</param>
      <returns>已解密的列加密密钥。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlColumnEncryptionCspProvider.EncryptColumnEncryptionKey(System.String,System.String,System.Byte[])">
      <summary>通过使用由密钥路径和指定算法所指定的非对称密钥，对给定的纯文本列加密密钥进行加密。 密钥路径将采用格式 [ProviderName]/ KeyIdentifier，并且应为存储在指定 CSP 提供程序中的非对称密钥。 用于加密/解密 CEK 的有效算法是“RSA_OAEP”。</summary>
      <param name="masterKeyPath">主密钥路径。</param>
      <param name="encryptionAlgorithm">加密算法。</param>
      <param name="columnEncryptionKey">加密的列加密密钥。</param>
      <returns>加密的列加密密钥。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider.#ctor">
      <summary>初始化 SqlColumnEncryptionKeyStoreProviderClass 的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider.DecryptColumnEncryptionKey(System.String,System.String,System.Byte[])">
      <summary>对列加密密钥的指定加密值进行解密。 加密值预期应使用具有指定密钥路径的列主密钥和使用指定的算法进行加密。</summary>
      <param name="masterKeyPath">主密钥路径。</param>
      <param name="encryptionAlgorithm">加密算法。</param>
      <param name="encryptedColumnEncryptionKey">加密的列加密密钥。</param>
      <returns>返回 <see cref="T:System.Byte" />。已解密的列加密密钥。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider.EncryptColumnEncryptionKey(System.String,System.String,System.Byte[])">
      <summary>使用具有指定密钥路径的列主密钥和使用指定的算法对列加密密钥进行加密。</summary>
      <param name="masterKeyPath">主密钥路径。</param>
      <param name="encryptionAlgorithm">加密算法。</param>
      <param name="columnEncryptionKey">加密的列加密密钥。</param>
      <returns>返回 <see cref="T:System.Byte" />。加密的列加密密钥。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlClient.SqlCommand" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.#ctor(System.String)">
      <summary>使用查询的文本初始化 <see cref="T:System.Data.SqlClient.SqlCommand" /> 类的新实例。</summary>
      <param name="cmdText">查询的文本。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection)">
      <summary>使用查询的文本和 <see cref="T:System.Data.SqlClient.SqlConnection" /> 初始化 <see cref="T:System.Data.SqlClient.SqlCommand" /> 类的新实例。</summary>
      <param name="cmdText">查询的文本。</param>
      <param name="connection">表示到 SQL Server 实例的连接的 <see cref="T:System.Data.SqlClient.SqlConnection" />。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
      <summary>使用查询文本、<see cref="T:System.Data.SqlClient.SqlConnection" /> 以及 <see cref="T:System.Data.SqlClient.SqlTransaction" /> 初始化 <see cref="T:System.Data.SqlClient.SqlCommand" /> 类的新实例。</summary>
      <param name="cmdText">查询的文本。</param>
      <param name="connection">表示到 SQL Server 实例的连接的 <see cref="T:System.Data.SqlClient.SqlConnection" />。</param>
      <param name="transaction">其中执行 <see cref="T:System.Data.SqlClient.SqlCommand" /> 的 <see cref="T:System.Data.SqlClient.SqlTransaction" />。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.SqlClient.SqlCommandColumnEncryptionSetting)">
      <summary>使用指定的命令文本、连接、事务和加密设置初始化 <see cref="T:System.Data.SqlClient.SqlCommand" /> 类的新实例。</summary>
      <param name="cmdText">查询的文本。</param>
      <param name="connection">表示到 SQL Server 实例的连接的 <see cref="T:System.Data.SqlClient.SqlConnection" />。</param>
      <param name="transaction">其中执行 <see cref="T:System.Data.SqlClient.SqlCommand" /> 的 <see cref="T:System.Data.SqlClient.SqlTransaction" />。</param>
      <param name="columnEncryptionSetting">加密设置。 有关详细信息，请参阅 Always Encrypted。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery">
      <summary>启动此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 描述的 Transact-SQL 语句或存储过程的异步执行。</summary>
      <returns>可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />；当调用可返回受影响的行数的 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" /> 时，也需要该值。</returns>
      <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 SqlClient 流支持。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时出现的任何错误。流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.InvalidOperationException">名称/值对“Asynchronous Processing=true”未包含在为此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 定义连接的连接字符串中。流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery(System.AsyncCallback,System.Object)">
      <summary>在给定回调过程和状态信息的情况下，启动此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 描述的 Transact-SQL 语句或存储过程的异步执行。</summary>
      <param name="callback">命令执行完成时调用的 <see cref="T:System.AsyncCallback" /> 委托。 传递 null（在 Microsoft Visual Basic 中为 Nothing）以指示不需要回调。</param>
      <param name="stateObject">传递到回调过程的用户定义的状态对象。 使用 <see cref="P:System.IAsyncResult.AsyncState" /> 属性从回调过程内检索此对象。</param>
      <returns>可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />；当调用可返回受影响的行数的 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" /> 时，也需要该值。</returns>
      <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 SqlClient 流支持。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时出现的任何错误。流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.InvalidOperationException">名称/值对“Asynchronous Processing=true”未包含在为此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 定义连接的连接字符串中。流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.BeginExecuteReader">
      <summary>启动此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 描述的 Transact-SQL 语句或存储过程的异步执行，并从服务器中检索一个或多个结果集。</summary>
      <returns>可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />；在调用 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" /> 时，也需要该值。该调用会返回一个可用于检索返回行的 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 实例。</returns>
      <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 SqlClient 流支持。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时出现的任何错误。流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.InvalidOperationException">名称/值对“Asynchronous Processing=true”未包含在为此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 定义连接的连接字符串中。流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.BeginExecuteReader(System.AsyncCallback,System.Object)">
      <summary>在给定回调过程和状态信息的情况下，启动此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 描述的 Transact-SQL 语句或存储过程的异步执行，并从服务器中检索一个或多个结果集。</summary>
      <param name="callback">命令执行完成时调用的 <see cref="T:System.AsyncCallback" /> 委托。 传递 null（在 Microsoft Visual Basic 中为 Nothing）以指示不需要回调。</param>
      <param name="stateObject">传递到回调过程的用户定义的状态对象。 使用 <see cref="P:System.IAsyncResult.AsyncState" /> 属性从回调过程内检索此对象。</param>
      <returns>可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />；当调用会返回可用于检索返回行的 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 实例的 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" /> 时，也需要该值。</returns>
      <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 SqlClient 流支持。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时出现的任何错误。流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.InvalidOperationException">名称/值对“Asynchronous Processing=true”未包含在为此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 定义连接的连接字符串中。流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.BeginExecuteReader(System.AsyncCallback,System.Object,System.Data.CommandBehavior)">
      <summary>在给定回调过程和状态信息的情况下，通过使用 CommandBehavior 值之一并从服务器中检索一个或多个结果集，启动由此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 描述的 Transact-SQL 语句或存储过程的异步执行。</summary>
      <param name="callback">命令执行完成时调用的 <see cref="T:System.AsyncCallback" /> 委托。 传递 null（在 Microsoft Visual Basic 中为 Nothing）以指示不需要回调。</param>
      <param name="stateObject">传递到回调过程的用户定义的状态对象。 使用 <see cref="P:System.IAsyncResult.AsyncState" /> 属性从回调过程内检索此对象。</param>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一，指示用于语句执行和数据检索的选项。</param>
      <returns>可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />；在调用 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" /> 时，也需要该值。该调用会返回一个可用于检索返回行的 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 实例。</returns>
      <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 SqlClient 流支持。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时出现的任何错误。流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.InvalidOperationException">名称/值对“Asynchronous Processing=true”未包含在为此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 定义连接的连接字符串中。流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.BeginExecuteReader(System.Data.CommandBehavior)">
      <summary>通过使用 <see cref="T:System.Data.CommandBehavior" /> 值之一，启动此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 描述的 Transact-SQL 语句或存储过程的异步执行。</summary>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一，指示用于语句执行和数据检索的选项。</param>
      <returns>可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />；当调用会返回一个可用于检索返回行的 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 实例的 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" /> 时，也需要该值。</returns>
      <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 SqlClient 流支持。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时出现的任何错误。流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.InvalidOperationException">名称/值对“Asynchronous Processing=true”未包含在为此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 定义连接的连接字符串中。流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader">
      <summary>启动此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 描述的 Transact-SQL 语句或存储过程的异步执行，并将结果作为 <see cref="T:System.Xml.XmlReader" /> 对象返回。</summary>
      <returns>可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />；当调用会返回单个 XML 值的 EndExecuteXmlReader 时，也需要该值。</returns>
      <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 SqlClient 流支持。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时出现的任何错误。流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.InvalidOperationException">名称/值对“Asynchronous Processing=true”未包含在为此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 定义连接的连接字符串中。流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader(System.AsyncCallback,System.Object)">
      <summary>通过使用回调过程，启动此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 描述的 Transact-SQL 语句或存储过程的异步执行，并将结果作为 <see cref="T:System.Xml.XmlReader" /> 对象返回。</summary>
      <param name="callback">命令执行完成时调用的 <see cref="T:System.AsyncCallback" /> 委托。 传递 null（在 Microsoft Visual Basic 中为 Nothing）以指示不需要回调。</param>
      <param name="stateObject">传递到回调过程的用户定义的状态对象。 使用 <see cref="P:System.IAsyncResult.AsyncState" /> 属性从回调过程内检索此对象。</param>
      <returns>可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />；当调用 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult)" /> 时，也需要该值，用于将命令的结果作为 XML 返回。</returns>
      <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 SqlClient 流支持。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时出现的任何错误。流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.InvalidOperationException">名称/值对“Asynchronous Processing=true”未包含在为此 <see cref="T:System.Data.SqlClient.SqlCommand" /> 定义连接的连接字符串中。流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.Cancel">
      <summary>尝试取消 <see cref="T:System.Data.SqlClient.SqlCommand" /> 的执行。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.Clone">
      <summary>创建属于当前实例的副本的新 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</summary>
      <returns>属于此实例副本的新 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.CreateParameter">
      <summary>创建 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象的新实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)">
      <summary>完成 Transact-SQL 语句的异步执行。</summary>
      <param name="asyncResult">通过调用 <see cref="T:System.IAsyncResult" /> 返回的 <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery" />。</param>
      <returns>受影响的行数（与 <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteNonQuery" /> 相同的行为）。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 参数为 null（在 Microsoft Visual Basic 中为 Nothing）</exception>
      <exception cref="T:System.InvalidOperationException">不止一次为单个命令执行调用了 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" />，或该方法不匹配其执行方法（例如，代码调用了 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" /> 以完成对 <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader" /> 调用的执行。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">
        <see cref="P:System.Data.SqlClient.SqlCommand.CommandTimeout" /> 中指定的时间已过，并且使用 <see cref="Overload:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery" /> 指定的异步操作不完整。在某些情况下，<see cref="T:System.IAsyncResult" /> 可能不正确地设置为 IsCompleted。 如果发生这种情况并且调用 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" />，则 EndExecuteNonQuery 可能引发 SqlException 错误（如果 <see cref="P:System.Data.SqlClient.SqlCommand.CommandTimeout" /> 中指定的时间已过，并且使用 <see cref="Overload:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery" /> 指定的异步操作不完整）。 若要更正这种情况，应增加 CommandTimeout 的值或减少正由异步操作完成的工作。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)">
      <summary>完成 Transact-SQL 语句的异步执行，从而返回请求的 <see cref="T:System.Data.SqlClient.SqlDataReader" />。</summary>
      <param name="asyncResult">通过调用 <see cref="T:System.IAsyncResult" /> 返回的 <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteReader" />。</param>
      <returns>可用于检索请求行的 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 对象。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 参数为 null（在 Microsoft Visual Basic 中为 Nothing）</exception>
      <exception cref="T:System.InvalidOperationException">不止一次为单个命令执行调用了 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" />，或该方法不匹配其执行方法（例如，代码调用了 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" /> 以完成对 <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader" /> 调用的执行。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult)">
      <summary>完成 Transact-SQL 语句的异步执行，从而将请求的数据以 XML 形式返回。</summary>
      <param name="asyncResult">通过调用 <see cref="T:System.IAsyncResult" /> 返回的 <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader" />。</param>
      <returns>可用于获取生成的 XML 数据的 <see cref="T:System.Xml.XmlReader" /> 对象。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 参数为 null（在 Microsoft Visual Basic 中为 Nothing）</exception>
      <exception cref="T:System.InvalidOperationException">不止一次为单个命令执行调用了 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult)" />，或该方法不匹配其执行方法（例如，代码调用了 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult)" /> 以完成对 <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery" /> 调用的执行。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.ExecuteNonQuery">
      <summary>对连接执行 Transact-SQL 语句并返回受影响的行数。</summary>
      <returns>受影响的行数。</returns>
      <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 SqlClient 流支持。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">对锁定的行执行命令时出现异常。 当使用 Microsoft .NET Framework 1.0 版时不生成此异常。流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.InvalidOperationException">流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteNonQuery" /> 的异步版本，它对连接执行 Transact-SQL 语句并返回受影响的行数。 取消标记可用于请求在命令超时超过前放弃操作。  将通过返回的任务对象报告异常。</summary>
      <param name="cancellationToken">取消指令。</param>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 SqlClient 流支持。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
      <exception cref="T:System.InvalidOperationException">在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)" />。流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 SqlClient 流支持。在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时，SQL Server 返回了一个错误。流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.ExecuteReader">
      <summary>将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> 发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />，并生成 <see cref="T:System.Data.SqlClient.SqlDataReader" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 对象。</returns>
      <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 SqlClient 流支持。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">对锁定的行执行命令时出现异常。 当使用 Microsoft .NET Framework 1.0 版时不生成此异常。流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.InvalidOperationException">连接的当前状态已关闭。<see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReader" /> 需要打开 <see cref="T:System.Data.SqlClient.SqlConnection" />。流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.ExecuteReader(System.Data.CommandBehavior)">
      <summary>将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> 发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />，并使用 <see cref="T:System.Data.CommandBehavior" /> 值之一生成 <see cref="T:System.Data.SqlClient.SqlDataReader" />。</summary>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。</param>
      <returns>一个 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 对象。</returns>
      <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 SqlClient 流支持。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.InvalidOperationException">流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReader" /> 的异步版本，它可以将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> 发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />，并生成 <see cref="T:System.Data.SqlClient.SqlDataReader" />。 将通过返回的任务对象报告异常。</summary>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 SqlClient 流支持。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
      <exception cref="T:System.ArgumentException">无效的 <see cref="T:System.Data.CommandBehavior" /> 值。</exception>
      <exception cref="T:System.InvalidOperationException">在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync" />。流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 SqlClient 流支持。在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时，SQL Server 返回了一个错误。流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReader(System.Data.CommandBehavior)" /> 的异步版本，用于将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> 发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />，并生成一个 <see cref="T:System.Data.SqlClient.SqlDataReader" />。 将通过返回的任务对象报告异常。</summary>
      <param name="behavior">语句执行和数据检索的选项。  当设置为 Default 时，<see cref="M:System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)" /> 将在返回完整任务前读取整行。</param>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 SqlClient 流支持。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
      <exception cref="T:System.ArgumentException">无效的 <see cref="T:System.Data.CommandBehavior" /> 值。</exception>
      <exception cref="T:System.InvalidOperationException">在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior)" />。流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 SqlClient 流支持。在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时，SQL Server 返回了一个错误。流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReader(System.Data.CommandBehavior)" /> 的异步版本，它可以将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> 发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />，并生成 <see cref="T:System.Data.SqlClient.SqlDataReader" />。取消标记可用于请求在命令超时超过前放弃操作。  将通过返回的任务对象报告异常。</summary>
      <param name="behavior">语句执行和数据检索的选项。  当设置为 Default 时，<see cref="M:System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)" /> 将在返回完整任务前读取整行。</param>
      <param name="cancellationToken">取消指令。</param>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 SqlClient 流支持。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
      <exception cref="T:System.ArgumentException">无效的 <see cref="T:System.Data.CommandBehavior" /> 值。</exception>
      <exception cref="T:System.InvalidOperationException">在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />。流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 SqlClient 流支持。在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时，SQL Server 返回了一个错误。流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReader" /> 的异步版本，它可以将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> 发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />，并生成 <see cref="T:System.Data.SqlClient.SqlDataReader" />。取消标记可用于请求在命令超时超过前放弃操作。  将通过返回的任务对象报告异常。</summary>
      <param name="cancellationToken">取消指令。</param>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 SqlClient 流支持。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
      <exception cref="T:System.ArgumentException">无效的 <see cref="T:System.Data.CommandBehavior" /> 值。</exception>
      <exception cref="T:System.InvalidOperationException">在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />。流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 SqlClient 流支持。在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时，SQL Server 返回了一个错误。流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.ExecuteScalar">
      <summary>执行查询，并返回由查询返回的结果集中的第一行的第一列。 其他列或行将被忽略。</summary>
      <returns>为结果集中的第一行的第一列，或者，如果结果集为空，则为 null 引用（在 Visual Basic 中为 Nothing）。 返回的最大字符数为 2033 个字符。</returns>
      <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 SqlClient 流支持。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">对锁定的行执行命令时出现异常。 当使用 Microsoft .NET Framework 1.0 版时不生成此异常。流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.InvalidOperationException">流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteScalar" /> 的异步版本，该版本异步执行查询，并返回由查询返回的结果集中的第一行的第一列。 其他列或行将被忽略。取消标记可用于请求在命令超时超过前放弃操作。 将通过返回的任务对象报告异常。</summary>
      <param name="cancellationToken">取消指令。</param>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 SqlClient 流支持。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
      <exception cref="T:System.InvalidOperationException">在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)" />。流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 SqlClient 流支持。在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时，SQL Server 返回了一个错误。流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReader">
      <summary>将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> 发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />，并生成一个 <see cref="T:System.Xml.XmlReader" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Xml.XmlReader" /> 对象。</returns>
      <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 SqlClient 流支持。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">对锁定的行执行命令时出现异常。 当使用 Microsoft .NET Framework 1.0 版时不生成此异常。流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.InvalidOperationException">流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReader" /> 的异步版本，可以将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> 发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />，并生成 <see cref="T:System.Xml.XmlReader" /> 对象。将通过返回的任务对象报告异常。</summary>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 SqlClient 流支持。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
      <exception cref="T:System.InvalidOperationException">在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)" />。流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 SqlClient 流支持。在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时，SQL Server 返回了一个错误。流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync(System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReader" /> 的异步版本，可以将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> 发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />，并生成 <see cref="T:System.Xml.XmlReader" /> 对象。取消标记可用于请求在命令超时超过前放弃操作。  将通过返回的任务对象报告异常。</summary>
      <param name="cancellationToken">取消指令。</param>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.InvalidCastException">将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.Stream" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Binary 或 VarBinary。 有关流式处理的详细信息，请参阅 SqlClient 流支持。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.IO.TextReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Char、NChar、NVarChar、VarChar 或 Xml。将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 设置为 <see cref="T:System.Xml.XmlReader" /> 时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> 而不是 Xml。</exception>
      <exception cref="T:System.InvalidOperationException">在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)" />。流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />。 有关流式处理的详细信息，请参阅 SqlClient 流支持。在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时，SQL Server 返回了一个错误。流式处理操作期间发生了超时。 有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.IO.IOException">流式处理操作期间在 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象中出现了错误。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
      <exception cref="T:System.ObjectDisposedException">流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.IO.TextReader" /> 对象。  有关流式处理的详细信息，请参阅 SqlClient 流支持。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.Prepare">
      <summary>在 SQL Server 的实例上创建命令的一个准备版本。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.ResetCommandTimeout">
      <summary>将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandTimeout" /> 属性重置为其默认值。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.System#ICloneable#Clone">
      <summary>创建属于当前实例的副本的新 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</summary>
      <returns>属于此实例副本的新 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommandBuilder.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommandBuilder.#ctor(System.Data.SqlClient.SqlDataAdapter)">
      <summary>新实例初始化 <see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> 使用关联的类 <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> 对象。</summary>
      <param name="adapter">
        <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> 的名称。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommandBuilder.DeriveParameters(System.Data.SqlClient.SqlCommand)">
      <summary>从在指定的存储过程中检索参数信息 <see cref="T:System.Data.SqlClient.SqlCommand" /> 并填充 <see cref="P:System.Data.SqlClient.SqlCommand.Parameters" /> 的指定集合 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</summary>
      <param name="command">
        <see cref="T:System.Data.SqlClient.SqlCommand" /> 引用存储的过程将为派生参数信息。 派生的参数添加到 <see cref="P:System.Data.SqlClient.SqlCommand.Parameters" /> 集合 <see cref="T:System.Data.SqlClient.SqlCommand" />。</param>
      <exception cref="T:System.InvalidOperationException">命令文本不是有效的存储的过程名称。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand">
      <summary>获取自动生成 <see cref="T:System.Data.SqlClient.SqlCommand" /> 在数据库上执行删除操作所需的对象。</summary>
      <returns>自动生成 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象所需执行删除操作。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand(System.Boolean)">
      <summary>获取自动生成 <see cref="T:System.Data.SqlClient.SqlCommand" /> 在数据库上执行删除操作所需的对象。</summary>
      <param name="useColumnsForParameterNames">如果 true, ，生成尽可能与列名相匹配的参数名。 如果 false, 、 生成 @p1，@p2，依次类推。</param>
      <returns>自动生成 <see cref="T:System.Data.SqlClient.SqlCommand" /> 执行删除操作所需的对象。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand">
      <summary>获取自动生成 <see cref="T:System.Data.SqlClient.SqlCommand" /> 在数据库上执行插入操作所需的对象。</summary>
      <returns>自动生成 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象所需执行插入操作。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand(System.Boolean)">
      <summary>获取自动生成 <see cref="T:System.Data.SqlClient.SqlCommand" /> 在数据库上执行插入操作所需的对象。</summary>
      <param name="useColumnsForParameterNames">如果 true, ，生成尽可能与列名相匹配的参数名。 如果 false, 、 生成 @p1，@p2，依次类推。</param>
      <returns>自动生成 <see cref="T:System.Data.SqlClient.SqlCommand" /> 执行插入操作所需的对象。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand">
      <summary>获取自动生成 <see cref="T:System.Data.SqlClient.SqlCommand" /> 在数据库上执行更新所需的对象。</summary>
      <returns>自动生成 <see cref="T:System.Data.SqlClient.SqlCommand" /> 执行更新所需的对象。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand(System.Boolean)">
      <summary>获取自动生成 <see cref="T:System.Data.SqlClient.SqlCommand" /> 在数据库上执行更新所需的对象。</summary>
      <param name="useColumnsForParameterNames">如果 true, ，生成尽可能与列名相匹配的参数名。 如果 false, 、 生成 @p1，@p2，依次类推。</param>
      <returns>自动生成 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象所需执行更新。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommandBuilder.QuoteIdentifier(System.String)">
      <summary>给定在正确的目录的情况下不带引号的标识符，将返回正确的带引号的标识符形式。 这包括正确转义任何嵌入的引号标识符中。</summary>
      <param name="unquotedIdentifier">原始的不带引号的标识符。</param>
      <returns>带引号的标识符版本。 正确转义标识符中嵌入的引号。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommandBuilder.UnquoteIdentifier(System.String)">
      <summary>给定带引号的标识符，将返回该标识符的正确不带引号的形式。 这包括正确地非转义标识符中任何嵌入的引号。</summary>
      <param name="quotedIdentifier">将删除其嵌入的引号的标识符。</param>
      <returns>不带引号的标识符，其嵌入的引号正确进行非转义。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlClient.SqlConnection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.#ctor(System.String)">
      <summary>如果给定包含连接字符串的字符串，则初始化 <see cref="T:System.Data.SqlClient.SqlConnection" /> 类的新实例。</summary>
      <param name="connectionString">用于打开 SQL Server 数据库的连接。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.#ctor(System.String,System.Data.SqlClient.SqlCredential)">
      <summary>在给定连接字符串的情况下，初始化 <see cref="T:System.Data.SqlClient.SqlConnection" /> 类的新实例，该连接字符串不使用 Integrated Security = true 和包含用户 ID 和密码的 <see cref="T:System.Data.SqlClient.SqlCredential" /> 对象。</summary>
      <param name="connectionString">不使用 ContextConnection = true 或以下任何连接字符串关键字的连接字符串：Integrated Security = true、UserId 或 Password。</param>
      <param name="credential">一个 <see cref="T:System.Data.SqlClient.SqlCredential" /> 对象。 如果 <paramref name="credential" /> 为 null，则 <see cref="M:System.Data.SqlClient.SqlConnection.#ctor(System.String,System.Data.SqlClient.SqlCredential)" /> 在功能上等效于 <see cref="M:System.Data.SqlClient.SqlConnection.#ctor(System.String)" />。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.BeginTransaction">
      <summary>开始数据库事务。</summary>
      <returns>表示新事务的对象。</returns>
      <exception cref="T:System.Data.SqlClient.SqlException">使用多个活动结果集 (MARS) 时，不允许并行事务。</exception>
      <exception cref="T:System.InvalidOperationException">不支持并行事务。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel)">
      <summary>以指定的隔离级别启动数据库事务。</summary>
      <param name="iso">事务应在其下运行的隔离级别。</param>
      <returns>表示新事务的对象。</returns>
      <exception cref="T:System.Data.SqlClient.SqlException">使用多个活动结果集 (MARS) 时，不允许并行事务。</exception>
      <exception cref="T:System.InvalidOperationException">不支持并行事务。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel,System.String)">
      <summary>以指定的隔离级别和事务名称启动数据库事务。</summary>
      <param name="iso">事务应在其下运行的隔离级别。</param>
      <param name="transactionName">事务名称。</param>
      <returns>表示新事务的对象。</returns>
      <exception cref="T:System.Data.SqlClient.SqlException">使用多个活动结果集 (MARS) 时，不允许并行事务。</exception>
      <exception cref="T:System.InvalidOperationException">不支持并行事务。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.BeginTransaction(System.String)">
      <summary>以指定的事务名称启动数据库事务。</summary>
      <param name="transactionName">事务名称。</param>
      <returns>表示新事务的对象。</returns>
      <exception cref="T:System.Data.SqlClient.SqlException">使用多个活动结果集 (MARS) 时，不允许并行事务。</exception>
      <exception cref="T:System.InvalidOperationException">不支持并行事务。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.ChangeDatabase(System.String)">
      <summary>更改已打开的 <see cref="T:System.Data.SqlClient.SqlConnection" /> 的当前数据库。</summary>
      <param name="database">要代替当前数据库加以使用的数据库的名称。</param>
      <exception cref="T:System.ArgumentException">数据库名称无效。</exception>
      <exception cref="T:System.InvalidOperationException">连接未打开。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">不能更改数据库。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.Data.SqlClient.SqlCredential,System.Security.SecureString)">
      <summary>更改 <see cref="T:System.Data.SqlClient.SqlCredential" /> 对象中指示的用户的 SQL Server 密码。</summary>
      <param name="connectionString">包含连接至服务器的足够信息的连接字符串。 连接字符串不应使用以下任何一个连接字符串关键字：Integrated Security = true、UserId 或 Password；或 ContextConnection = true。</param>
      <param name="credential">一个 <see cref="T:System.Data.SqlClient.SqlCredential" /> 对象。</param>
      <param name="newSecurePassword">新密码。<paramref name="newSecurePassword" /> 必须为只读。 该密码也必须符合服务器上设置的任何密码安全策略（例如：最小长度、特定字符要求）。</param>
      <exception cref="T:System.ArgumentException">连接字符串包含的任意组合 UserId, ，Password, ，或 Integrated Security=true。连接字符串包含 Context Connection=true。<paramref name="newSecurePassword" /> 大于 128 个字符。<paramref name="newSecurePassword" /> 不是只读。<paramref name="newSecurePassword" /> 是一个空字符串。</exception>
      <exception cref="T:System.ArgumentNullException">其中一个参数（<paramref name="connectionString" />、<paramref name="credential" /> 或 <paramref name="newSecurePassword" />）为 null。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.String)">
      <summary>将连接字符串中指示的用户的 SQL Server 密码更改为提供的新密码。</summary>
      <param name="connectionString">包含连接至所需服务器的足够信息的连接字符串。 连接字符串必须包含用户 ID 和当前密码。</param>
      <param name="newPassword">要设置的新密码。 此密码必须符合服务器上设置的任何密码安全策略，包括最小长度、特定字符要求等等。</param>
      <exception cref="T:System.ArgumentException">连接字符串包括将使用集成安全性的选项。Or <paramref name="newPassword" /> 超过了 128 个字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="connectionString" /> 或 <paramref name="newPassword" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.ClearAllPools">
      <summary>清空连接池。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.ClearPool(System.Data.SqlClient.SqlConnection)">
      <summary>清空与指定连接关联的连接池。</summary>
      <param name="connection">要从池中清除的 <see cref="T:System.Data.SqlClient.SqlConnection" />。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.Close">
      <summary>关闭与数据库之间的连接。 此方法是关闭任何打开连接的首选方法。</summary>
      <exception cref="T:System.Data.SqlClient.SqlException">打开连接时出现的连接级别的错误。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.CreateCommand">
      <summary>创建并返回与 <see cref="T:System.Data.SqlClient.SqlConnection" /> 关联的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)">
      <summary>在指定的事务中登记为分布式事务。</summary>
      <param name="transaction">对用于登记的现有 <see cref="T:System.EnterpriseServices.ITransaction" /> 的引用。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.EnlistTransaction(System.Transactions.Transaction)">
      <summary>在指定的事务中登记为分布式事务。</summary>
      <param name="transaction">对用于登记的现有 <see cref="T:System.Transactions.Transaction" /> 的引用。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.GetSchema">
      <summary>返回此 <see cref="T:System.Data.SqlClient.SqlConnection" /> 的数据源的架构信息。 有关方案的详细信息，请参阅 SQL Server Schema Collections。</summary>
      <returns>一个包含架构信息的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.GetSchema(System.String)">
      <summary>通过使用架构名称的指定字符串，返回此 <see cref="T:System.Data.SqlClient.SqlConnection" /> 的数据源的架构信息。</summary>
      <param name="collectionName">指定要返回的架构的名称。</param>
      <returns>一个包含架构信息的 <see cref="T:System.Data.DataTable" />。</returns>
      <exception cref="T:System.ArgumentException">将 <paramref name="collectionName" /> 指定为 null。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.GetSchema(System.String,System.String[])">
      <summary>通过使用指定字符串作为架构名称，指定字符串数组作为限制值，返回此 <see cref="T:System.Data.SqlClient.SqlConnection" /> 的数据源的架构信息。</summary>
      <param name="collectionName">指定要返回的架构的名称。</param>
      <param name="restrictionValues">请求的架构的一组限制值。</param>
      <returns>一个包含架构信息的 <see cref="T:System.Data.DataTable" />。</returns>
      <exception cref="T:System.ArgumentException">将 <paramref name="collectionName" /> 指定为 null。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.Open">
      <summary>使用由 <see cref="P:System.Data.SqlClient.SqlConnection.ConnectionString" /> 指定的属性设置打开一个数据库连接。</summary>
      <exception cref="T:System.InvalidOperationException">如果不指定数据源或服务器，则无法打开连接。或连接已打开。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">打开连接时出现的连接级别错误。 如果 <see cref="P:System.Data.SqlClient.SqlException.Number" /> 属性包含值 18487 或 18488，这表明指定的密码已过期或必须重置。 有关更多信息，请参阅 <see cref="M:System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.String)" /> 方法。App.config 文件中的 &lt;system.data.localdb&gt; 标记具有无效或未知元素。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">&lt;localdbinstances&gt; 部分中有两个具有相同名称的条目。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlConnection.Open" /> 的异步版本，打开 <see cref="P:System.Data.SqlClient.SqlConnection.ConnectionString" /> 指定的属性设置的数据库连接。 取消标记可用于请求在连接超时超过前放弃操作。  异常将通过返回的任务传播。 如果在未成功连接的情况下连接超时时间已过，则返回的任务将被标记为“附带异常出错”。 实现返回一个不带有用于共用和非共用连接的锁定调用线程的“任务”。</summary>
      <param name="cancellationToken">取消指令。</param>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.InvalidOperationException">在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)" />。在连接字符串中指定 Context Connection=true。在经过连接超时时间之前从连接池中的连接不可用。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">打开连接时出现的任何由 SQL Server 返回的错误。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders(System.Collections.Generic.IDictionary{System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider})">
      <summary>注册列加密密钥存储提供程序。</summary>
      <param name="customProviders">自定义提供程序</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.ResetStatistics">
      <summary>如果启用了统计信息收集，所有值都将重置为零。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.RetrieveStatistics">
      <summary>调用此方法时，将返回统计信息的名称值对集合。</summary>
      <returns>返回 <see cref="T:System.Collections.DictionaryEntry" /> 项的 <see cref="T:System.Collections.IDictionary" /> 类型的引用。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.System#ICloneable#Clone">
      <summary>创建作为当前实例副本的新对象。</summary>
      <returns>作为此实例副本的新对象。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnectionStringBuilder.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnectionStringBuilder.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 类的新实例。 所提供的连接字符串为实例的内部连接信息提供数据。</summary>
      <param name="connectionString">对象内部连接信息的基础。 分析为名称/值对。 无效的键名会引发 <see cref="T:System.Collections.Generic.KeyNotFoundException" />。</param>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">连接字符串中包含无效的键名。</exception>
      <exception cref="T:System.FormatException">连接字符串中包含无效的值（具体而言，需要使用布尔值或数值，但字符串中并未提供）。</exception>
      <exception cref="T:System.ArgumentException">所提供的 <paramref name="connectionString" /> 无效。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnectionStringBuilder.Clear">
      <summary>清除 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 实例的内容。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnectionStringBuilder.ContainsKey(System.String)">
      <summary>确定 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 是否包含特定键。</summary>
      <param name="keyword">要在 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 中定位的键。</param>
      <returns>如果 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 包含具有指定键的元素，则为 true；否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为 Null（在 Visual Basic 中为 Nothing）</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnectionStringBuilder.Remove(System.String)">
      <summary>从 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 实例中移除具有指定的键的项。</summary>
      <param name="keyword">要从此 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 中的连接字符串移除的键/值对中的键。</param>
      <returns>如果该键存在于连接字符串中并已被移除，则为 true；如果该键不存在，则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为 Null（在 Visual Basic 中为 Nothing）</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnectionStringBuilder.ShouldSerialize(System.String)">
      <summary>指示此 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 实例中是否存在指定的键。</summary>
      <param name="keyword">要在 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 中定位的键。</param>
      <returns>如果 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 包含具有指定键的项，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
      <summary>从此 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 中检索与提供的键相对应的值。</summary>
      <param name="keyword">要检索的项的键。</param>
      <param name="value">与 <paramref name="keyword." /> 对应的值</param>
      <returns>如果在连接字符串中找到 <paramref name="keyword" />，则为 true；否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 包含一个 null 值（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlCredential.#ctor(System.String,System.Security.SecureString)">
      <summary>创建 <see cref="T:System.Data.SqlClient.SqlCredential" /> 类型的对象。</summary>
      <param name="userId">用户 id。</param>
      <param name="password">密码，则为 <see cref="T:System.Security.SecureString" /> 值标记为只读的。  传递读/写 <see cref="T:System.Security.SecureString" /> 参数将引发 <see cref="T:System.ArgumentException" />。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataAdapter.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataAdapter.#ctor(System.Data.SqlClient.SqlCommand)">
      <summary>新实例初始化 <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> 类与指定 <see cref="T:System.Data.SqlClient.SqlCommand" /> 作为 <see cref="P:System.Data.SqlClient.SqlDataAdapter.SelectCommand" /> 属性。</summary>
      <param name="selectCommand">一个 <see cref="T:System.Data.SqlClient.SqlCommand" /> ，TRANSACT-SQL SELECT 语句或存储的过程并被设置为 <see cref="P:System.Data.SqlClient.SqlDataAdapter.SelectCommand" /> 属性 <see cref="T:System.Data.SqlClient.SqlDataAdapter" />。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataAdapter.#ctor(System.String,System.Data.SqlClient.SqlConnection)">
      <summary>新实例初始化 <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> 类 <see cref="P:System.Data.SqlClient.SqlDataAdapter.SelectCommand" /> 和 <see cref="T:System.Data.SqlClient.SqlConnection" /> 对象。</summary>
      <param name="selectCommandText">一个 <see cref="T:System.String" /> 即 TRANSACT-SQL SELECT 语句或存储的过程以通过使用 <see cref="P:System.Data.SqlClient.SqlDataAdapter.SelectCommand" /> 属性 <see cref="T:System.Data.SqlClient.SqlDataAdapter" />。</param>
      <param name="selectConnection">一个 <see cref="T:System.Data.SqlClient.SqlConnection" /> 表示的连接。 如果连接字符串不使用 Integrated Security = true，则可以使用 <see cref="T:System.Data.SqlClient.SqlCredential" /> 来传递用户 ID 和密码，这比将用户 ID 和密码指定为连接字符串中的文本更安全。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataAdapter.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> 类 <see cref="P:System.Data.SqlClient.SqlDataAdapter.SelectCommand" /> 和连接字符串。</summary>
      <param name="selectCommandText">一个 <see cref="T:System.String" /> 即 TRANSACT-SQL SELECT 语句或存储的过程以通过使用 <see cref="P:System.Data.SqlClient.SqlDataAdapter.SelectCommand" /> 属性 <see cref="T:System.Data.SqlClient.SqlDataAdapter" />。</param>
      <param name="selectConnectionString">连接字符串。 如果您的连接字符串未使用 Integrated Security = true, ，您可以使用 <see cref="M:System.Data.SqlClient.SqlDataAdapter.#ctor(System.String,System.Data.SqlClient.SqlConnection)" /> 和 <see cref="T:System.Data.SqlClient.SqlCredential" /> 相比，通过更安全地传递用户 ID 和密码作为连接字符串中的文本中指定的用户 ID 和密码。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataAdapter.System#ICloneable#Clone">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.ICloneable.Clone" />。</summary>
      <returns>当前实例副本的新对象。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.Close">
      <summary>关闭 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 对象。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetBoolean(System.Int32)">
      <summary>以布尔值的形式获取指定列的值。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetByte(System.Int32)">
      <summary>以字节的形式获取指定列的值。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>以字节的形式指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>从指定的列偏移量将字节流读入数组以给定的缓冲区偏移量开始的缓冲区。</summary>
      <param name="i">从零开始的列序号。</param>
      <param name="dataIndex">中自其开始读取的操作的字段的索引。</param>
      <param name="buffer">若要读取的字节流读入的缓冲区。</param>
      <param name="bufferIndex">中的索引位置 <paramref name="buffer" /> 写入操作旨在启动。</param>
      <param name="length">要复制到缓冲区的最大长度。</param>
      <returns>读取的实际字节数。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetChar(System.Int32)">
      <summary>以单个字符的形式获取指定列的值。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>读取字符流从指定的列偏移量到缓冲区作为数组从给定的缓冲区偏移量处开始。</summary>
      <param name="i">从零开始的列序号。</param>
      <param name="dataIndex">中自其开始读取的操作的字段的索引。</param>
      <param name="buffer">若要读取的字节流读入的缓冲区。</param>
      <param name="bufferIndex">中的索引位置 <paramref name="buffer" /> 写入操作旨在启动。</param>
      <param name="length">要复制到缓冲区的最大长度。</param>
      <returns>读取的实际字符数。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetDataTypeName(System.Int32)">
      <summary>获取表示指定列的数据类型的字符串。</summary>
      <param name="i">要查找的列从零开始的序号位置。</param>
      <returns>表示指定列的数据类型的字符串。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetDateTime(System.Int32)">
      <summary>以 <see cref="T:System.DateTime" /> 对象的形式获取指定列的值。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetDateTimeOffset(System.Int32)">
      <summary>检索指定列的值 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetDecimal(System.Int32)">
      <summary>以 <see cref="T:System.Decimal" /> 对象的形式获取指定列的值。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetDouble(System.Int32)">
      <summary>以双精度浮点数字的形式获取指定列的值。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetEnumerator">
      <summary>返回 <see cref="T:System.Collections.IEnumerator" /> ，它循环访问 <see cref="T:System.Data.SqlClient.SqlDataReader" />。</summary>
      <returns>用于 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Data.SqlClient.SqlDataReader" />。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetFieldType(System.Int32)">
      <summary>获取 <see cref="T:System.Type" /> ，它是该对象的数据类型。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>
        <see cref="T:System.Type" /> ，它是该对象的数据类型。 如果客户端上，如果一个用户定义类型 (UDT) 从数据库中，返回上不存在类型 GetFieldType ，则返回 null。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetFieldValue``1(System.Int32)">
      <summary>作为一种类型，以同步方式获取指定列的值。<see cref="M:System.Data.SqlClient.SqlDataReader.GetFieldValueAsync``1(System.Int32,System.Threading.CancellationToken)" /> 是此方法的异步版本。</summary>
      <param name="i">要检索的列。</param>
      <typeparam name="T">要返回的值的类型。 请参阅备注部分以了解更多信息。</typeparam>
      <returns>返回的类型对象中。</returns>
      <exception cref="T:System.InvalidOperationException">连接断开或很期间数据检索已关闭。<see cref="T:System.Data.SqlClient.SqlDataReader" /> 数据检索过程中关闭。没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.SqlClient.SqlDataReader.Read" /> 没有调用，或返回了 false)。尝试读取顺序模式中的以前读取列。没有正在进行的异步操作。 这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。</exception>
      <exception cref="T:System.IndexOutOfRangeException">试图读取某个列不存在。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">列的值为 null (<see cref="M:System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)" /> = = true)，检索某一非 SQL 类型。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="T" /> 与返回的类型不匹配 SQL Server 或不能强制转换。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetFieldValueAsync``1(System.Int32,System.Threading.CancellationToken)">
      <summary>以异步方式获取指定列的值作为一种类型。<see cref="M:System.Data.SqlClient.SqlDataReader.GetFieldValue``1(System.Int32)" /> 是此方法的同步版本。</summary>
      <param name="i">要检索的列。</param>
      <param name="cancellationToken">取消指令，传播有关应取消操作的通知。 这不保证取消。 如果设置为 CancellationToken.None 使得此方法等效于 <see cref="M:System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)" />。 返回的任务必须标记为已取消。</param>
      <typeparam name="T">要返回的值的类型。 请参阅备注部分以了解更多信息。</typeparam>
      <returns>返回的类型对象中。</returns>
      <exception cref="T:System.InvalidOperationException">连接断开或很期间数据检索已关闭。<see cref="T:System.Data.SqlClient.SqlDataReader" /> 数据检索过程中关闭。没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.SqlClient.SqlDataReader.Read" /> 没有调用，或返回了 false)。尝试读取顺序模式中的以前读取列。没有正在进行的异步操作。 这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.IndexOutOfRangeException">试图读取某个列不存在。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">列的值为 null (<see cref="M:System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)" /> = = true)，检索某一非 SQL 类型。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="T" /> 与返回的类型不匹配 SQL Server 或不能强制转换。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetFloat(System.Int32)">
      <summary>以单精度浮点数字的形式获取指定列的值。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetGuid(System.Int32)">
      <summary>以全局唯一标识符 (GUID) 的形式获取指定列的值。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetInt16(System.Int32)">
      <summary>16 位有符号整数形式获取指定列的值。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetInt32(System.Int32)">
      <summary>作为 32 位有符号整数获取指定列的值。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetInt64(System.Int32)">
      <summary>以 64 位有符号整数的形式获取指定列的值。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetName(System.Int32)">
      <summary>获取指定列的名称。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>指定列的名称。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetOrdinal(System.String)">
      <summary>获取列序号，给定的列的名称。</summary>
      <param name="name">列的名称。</param>
      <returns>从零开始的列序号。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定的名称不是有效的列名。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetProviderSpecificFieldType(System.Int32)">
      <summary>获取 Object ，它表示的基础提供程序特定的字段类型。</summary>
      <param name="i">
        <see cref="T:System.Int32" /> 表示列序号。</param>
      <returns>获取 <see cref="T:System.Object" /> ，它表示的基础提供程序特定的字段类型。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetProviderSpecificValue(System.Int32)">
      <summary>获取 Object ，它表示基础提供程序特定值。</summary>
      <param name="i">
        <see cref="T:System.Int32" /> 表示列序号。</param>
      <returns>
        <see cref="T:System.Object" /> ，它表示基础提供程序特定值。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetProviderSpecificValues(System.Object[])">
      <summary>获取基础提供程序特定值的表示形式的对象的数组。</summary>
      <param name="values">一个数组 <see cref="T:System.Object" /> 向其复制的列的值。</param>
      <returns>基础提供程序特定值的表示形式的对象的数组。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSchemaTable">
      <summary>返回一个描述 <see cref="T:System.Data.DataTable" /> 的列元数据的 <see cref="T:System.Data.SqlClient.SqlDataReader" />。</summary>
      <returns>一个描述列元数据的 <see cref="T:System.Data.DataTable" />。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.SqlClient.SqlDataReader" /> 已关闭。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlBinary(System.Int32)">
      <summary>获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlBinary" />。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>表示为列的值 <see cref="T:System.Data.SqlTypes.SqlBinary" />。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlBoolean(System.Int32)">
      <summary>获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>列的值。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlByte(System.Int32)">
      <summary>获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>表示为列的值  <see cref="T:System.Data.SqlTypes.SqlByte" />。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlBytes(System.Int32)">
      <summary>获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlBytes" />。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>表示为列的值 <see cref="T:System.Data.SqlTypes.SqlBytes" />。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlChars(System.Int32)">
      <summary>获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlChars" />。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>表示为列的值  <see cref="T:System.Data.SqlTypes.SqlChars" />。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlDateTime(System.Int32)">
      <summary>获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlDateTime" />。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>表示为列的值  <see cref="T:System.Data.SqlTypes.SqlDateTime" />。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlDecimal(System.Int32)">
      <summary>获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>表示为列的值 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlDouble(System.Int32)">
      <summary>获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>表示为列的值  <see cref="T:System.Data.SqlTypes.SqlDouble" />。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlGuid(System.Int32)">
      <summary>获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>表示为列的值  <see cref="T:System.Data.SqlTypes.SqlGuid" />。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlInt16(System.Int32)">
      <summary>获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>表示为列的值 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlInt32(System.Int32)">
      <summary>获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>表示为列的值 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlInt64(System.Int32)">
      <summary>获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>表示为列的值 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlMoney(System.Int32)">
      <summary>获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>表示为列的值 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlSingle(System.Int32)">
      <summary>获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>表示为列的值 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlString(System.Int32)">
      <summary>获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>表示为列的值 <see cref="T:System.Data.SqlTypes.SqlString" />。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlValue(System.Int32)">
      <summary>作为 SQL Server 类型，指定列中返回的数据值。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>表示为列的值 <see cref="T:System.Data.SqlDbType" />。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlValues(System.Object[])">
      <summary>填充数组 <see cref="T:System.Object" /> ，其中包含的记录中的所有列的值表示为 SQL Server 类型。</summary>
      <param name="values">一个数组 <see cref="T:System.Object" /> 要将值复制到其中。 与 SQL Server 类型表示的列的值。</param>
      <returns>一个整数，指示复制的列数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 为 null。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlXml(System.Int32)">
      <summary>获取指定列的值作为一个 XML 值。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlXml" /> 值，该值包含相应字段中存储的 XML。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问中为已关闭的列 <see cref="T:System.Data.SqlClient.SqlDataReader" />。</exception>
      <exception cref="T:System.InvalidCastException">检索到的数据与不兼容 <see cref="T:System.Data.SqlTypes.SqlXml" /> 类型。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetStream(System.Int32)">
      <summary>检索二进制、 图像、 varbinary、 UDT 和 variant 数据类型为 <see cref="T:System.IO.Stream" />。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>一个流对象。</returns>
      <exception cref="T:System.InvalidOperationException">连接断开或很期间数据检索已关闭。<see cref="T:System.Data.SqlClient.SqlDataReader" /> 数据检索过程中关闭。没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.SqlClient.SqlDataReader.Read" /> 没有调用，或返回了 false)。尝试读取顺序模式中的以前读取列。没有正在进行的异步操作。 这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。</exception>
      <exception cref="T:System.IndexOutOfRangeException">试图读取某个列不存在。</exception>
      <exception cref="T:System.InvalidCastException">返回的类型不是以下类型之一 ︰binary图像varbinaryudt</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetString(System.Int32)">
      <summary>获取指定列的值作为字符串。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetTextReader(System.Int32)">
      <summary>检索 Char、 NChar、 NText、 NVarChar、 text、 varChar、 和 Variant 数据类型为 <see cref="T:System.IO.TextReader" />。</summary>
      <param name="i">要检索的列。</param>
      <returns>返回的对象。</returns>
      <exception cref="T:System.InvalidOperationException">连接断开或很期间数据检索已关闭。<see cref="T:System.Data.SqlClient.SqlDataReader" /> 数据检索过程中关闭。没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.SqlClient.SqlDataReader.Read" /> 没有调用，或返回了 false)。尝试读取顺序模式中的以前读取列。没有正在进行的异步操作。 这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。</exception>
      <exception cref="T:System.IndexOutOfRangeException">试图读取某个列不存在。</exception>
      <exception cref="T:System.InvalidCastException">返回的类型不是以下类型之一 ︰charncharntextnvarchar文本varchar</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetTimeSpan(System.Int32)">
      <summary>检索指定列的值 <see cref="T:System.TimeSpan" /> 对象。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetValue(System.Int32)">
      <summary>以其本机格式获取指定列的值。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>此方法返回 <see cref="T:System.DBNull" /> 用于 null 数据库列。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetValues(System.Object[])">
      <summary>使用来填充数组的对象的当前行的列的值。</summary>
      <param name="values">要将属性列复制到的 <see cref="T:System.Object" /> 数组。</param>
      <returns>数组中的 <see cref="T:System.Object" /> 实例数。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetXmlReader(System.Int32)">
      <summary>检索数据的类型为作为 XML <see cref="T:System.Xml.XmlReader" />。</summary>
      <param name="i">指定列的值。</param>
      <returns>返回的对象。</returns>
      <exception cref="T:System.InvalidOperationException">连接断开或很期间数据检索已关闭。<see cref="T:System.Data.SqlClient.SqlDataReader" /> 数据检索过程中关闭。没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.SqlClient.SqlDataReader.Read" /> 没有调用，或返回了 false)。试图读取顺序模式中的以前读取的列。没有正在进行的异步操作。 这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。</exception>
      <exception cref="T:System.IndexOutOfRangeException">试图读取某个列不存在。</exception>
      <exception cref="T:System.InvalidCastException">返回的类型不是 xml。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.IsCommandBehavior(System.Data.CommandBehavior)">
      <summary>确定是否指定 <see cref="T:System.Data.CommandBehavior" /> 匹配的 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 。</summary>
      <param name="condition">一个 <see cref="T:System.Data.CommandBehavior" /> 枚举。</param>
      <returns>true 如果指定 <see cref="T:System.Data.CommandBehavior" /> 为 true， false 否则为。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)">
      <summary>获取一个值，该值指示列是否包含不存在或缺少的值。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>true 如果指定的列的值等效于 <see cref="T:System.DBNull" />; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)">
      <summary>异步版本 <see cref="M:System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)" />, ，后者将获取一个值，该值指示列是否包含不存在或缺少的值。取消标记可用于请求在命令超时超过前放弃操作。 将通过返回的任务对象报告异常。</summary>
      <param name="i">要检索的从零开始的列。</param>
      <param name="cancellationToken">取消指令，传播有关应取消操作的通知。 这不保证取消。 如果设置为 CancellationToken.None 使得此方法等效于 <see cref="M:System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)" />。 返回的任务必须标记为已取消。</param>
      <returns>true 如果指定的列的值等效于 DBNull 否则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">连接断开或很期间数据检索已关闭。<see cref="T:System.Data.SqlClient.SqlDataReader" /> 数据检索过程中关闭。没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.SqlClient.SqlDataReader.Read" /> 没有调用，或返回了 false)。试图读取顺序模式中的以前读取的列。没有正在进行的异步操作。 这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.IndexOutOfRangeException">试图读取某个列不存在。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.NextResult">
      <summary>在读取批 TRANSACT-SQL 语句的结果时，将数据读取器推进到下一个结果。</summary>
      <returns>true 如果有多个结果集;否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.NextResultAsync(System.Threading.CancellationToken)">
      <summary>异步版本 <see cref="M:System.Data.SqlClient.SqlDataReader.NextResult" />, ，该数据读取器推进到下一个结果，在读取批处理的结果时 Transact-SQL 语句。取消标记可用于请求在命令超时超过前放弃操作。  将通过返回的任务对象报告异常。</summary>
      <param name="cancellationToken">取消指令。</param>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.InvalidOperationException">调用 <see cref="M:System.Data.SqlClient.SqlDataReader.NextResultAsync(System.Threading.CancellationToken)" /> 不止一次在任务完成之前对同一个实例。在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时，SQL Server 返回了一个错误。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.Read">
      <summary>让 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 前进到下一条记录。</summary>
      <returns>如果存在更多行，则为 true；否则为 false。</returns>
      <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时，SQL Server 返回了一个错误。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)">
      <summary>异步版本 <see cref="M:System.Data.SqlClient.SqlDataReader.Read" />, ，哪些改进 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 到下一个记录。取消标记可用于请求在命令超时超过前放弃操作。 将通过返回的任务对象报告异常。</summary>
      <param name="cancellationToken">取消指令。</param>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.InvalidOperationException">调用 <see cref="M:System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)" /> 不止一次在任务完成之前对同一个实例。在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">执行命令文本时，SQL Server 返回了一个错误。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.System#Data#IDataRecord#GetData(System.Int32)">
      <summary>返回 <see cref="T:System.Data.IDataReader" /> 指定的列序号。</summary>
      <param name="i">列序号。</param>
      <returns>
        <see cref="T:System.Data.IDataReader" /> 实例指定的列序号。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SQLDebugging.#ctor">
      <summary>包含以支持调试应用程序。 不适用于直接使用。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlDependency.#ctor">
      <summary>创建的新实例 <see cref="T:System.Data.SqlClient.SqlDependency" /> 类使用默认设置。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlDependency.#ctor(System.Data.SqlClient.SqlCommand)">
      <summary>创建的新实例 <see cref="T:System.Data.SqlClient.SqlDependency" /> 类并将其与关联 <see cref="T:System.Data.SqlClient.SqlCommand" /> 参数。</summary>
      <param name="command">
        <see cref="T:System.Data.SqlClient.SqlCommand" /> 要与此关联对象 <see cref="T:System.Data.SqlClient.SqlDependency" /> 对象。 构造函数将设置 <see cref="T:System.Data.Sql.SqlNotificationRequest" /> 对象，并将其绑定到该命令。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="command" /> 参数为 NULL。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象已具有 <see cref="T:System.Data.Sql.SqlNotificationRequest" /> 对象分配给其 <see cref="P:System.Data.SqlClient.SqlCommand.Notification" /> 属性，且该 <see cref="T:System.Data.Sql.SqlNotificationRequest" /> 与这种依赖关系都不关联。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDependency.#ctor(System.Data.SqlClient.SqlCommand,System.String,System.Int32)">
      <summary>创建的新实例 <see cref="T:System.Data.SqlClient.SqlDependency" /> 类中，将其与相关联 <see cref="T:System.Data.SqlClient.SqlCommand" /> 参数，并指定通知选项和超时值。</summary>
      <param name="command">
        <see cref="T:System.Data.SqlClient.SqlCommand" /> 要与此关联对象 <see cref="T:System.Data.SqlClient.SqlDependency" /> 对象。 该构造函数设置 <see cref="T:System.Data.Sql.SqlNotificationRequest" /> 对象，并将其绑定到该命令。</param>
      <param name="options">此依赖关系要使用通知请求选项。<paramref name="null" /> 若要使用默认服务。</param>
      <param name="timeout">此通知以秒为单位的超时值。 默认值为 0，指示应使用的服务器超时。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="command" /> 参数为 NULL。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">超时值小于零。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象已具有 <see cref="T:System.Data.Sql.SqlNotificationRequest" /> 对象分配给其 <see cref="P:System.Data.SqlClient.SqlCommand.Notification" /> 属性且 <see cref="T:System.Data.Sql.SqlNotificationRequest" /> 与这种依赖关系都不关联。尝试创建 SqlDependency 从实例时在 SQLCLR 内。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDependency.AddCommandDependency(System.Data.SqlClient.SqlCommand)">
      <summary>将相关联 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象与此 <see cref="T:System.Data.SqlClient.SqlDependency" /> 实例。</summary>
      <param name="command">一个 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象，它包含无效的通知的语句。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="command" /> 参数为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象已具有 <see cref="T:System.Data.Sql.SqlNotificationRequest" /> 对象分配给其 <see cref="P:System.Data.SqlClient.SqlCommand.Notification" /> 属性，且该 <see cref="T:System.Data.Sql.SqlNotificationRequest" /> 与这种依赖关系都不关联。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDependency.Start(System.String)">
      <summary>启动侦听器来接收来自通过连接字符串指定的 SQL Server 实例的依赖项更改通知。</summary>
      <param name="connectionString">实例的连接字符串 SQL Server 要从中获取更改通知。</param>
      <returns>true 如果侦听器初始化成功，则 false 如果的兼容侦听器已存在。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="connectionString" /> 参数为 NULL。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="connectionString" /> 参数等同于以前调用此方法，但其他参数不同。在 CLR 中调用该方法。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所需 <see cref="T:System.Data.SqlClient.SqlClientPermission" /> 代码访问安全性 (CAS) 权限。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">该方法的后续调用已使用等效 <paramref name="connectionString" /> 具有不同的用户或用户不属于同一架构的默认参数。此外，任何基础 SqlClient 异常。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDependency.Start(System.String,System.String)">
      <summary>启动侦听器来接收来自通过使用指定的 SQL Server Service Broker 队列的连接字符串指定的 SQL Server 实例的依赖项更改通知。</summary>
      <param name="connectionString">要从中获取 SQL Server 实例的连接字符串的更改通知。</param>
      <param name="queue">要使用现有 SQL Server Service Broker 队列。 如果 null, ，使用默认的队列。</param>
      <returns>true 如果侦听器初始化成功，则 false 如果的兼容侦听器已存在。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="connectionString" /> 参数为 NULL。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="connectionString" /> 参数等同于以前调用此方法，但其他参数不同。在 CLR 中调用该方法。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所需 <see cref="T:System.Data.SqlClient.SqlClientPermission" /> 代码访问安全性 (CAS) 权限。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">该方法的后续调用已使用等效 <paramref name="connectionString" /> 参数，但其他用户或用户不会默认到相同的架构。此外，任何基础 SqlClient 异常。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDependency.Stop(System.String)">
      <summary>停止在以前指定的连接的侦听器 <see cref="Overload:System.Data.SqlClient.SqlDependency.Start" /> 调用。</summary>
      <param name="connectionString">在之前使用的 SQL Server 实例的连接字符串 <see cref="M:System.Data.SqlClient.SqlDependency.Start(System.String)" /> 调用。</param>
      <returns>true 如果完全停止侦听器; false 如果 <see cref="T:System.AppDomain" /> 被不从该侦听器，解除绑定，但是有至少一个其他 <see cref="T:System.AppDomain" /> 使用相同的侦听器。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="connectionString" /> 参数为 NULL。</exception>
      <exception cref="T:System.InvalidOperationException">从上在 SQLCLR 内调用该方法。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所需 <see cref="T:System.Data.SqlClient.SqlClientPermission" /> 代码访问安全性 (CAS) 权限。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">基础 SqlClient 出现异常。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDependency.Stop(System.String,System.String)">
      <summary>停止在以前指定的连接的侦听器 <see cref="Overload:System.Data.SqlClient.SqlDependency.Start" /> 调用。</summary>
      <param name="connectionString">在之前使用的 SQL Server 实例的连接字符串 <see cref="M:System.Data.SqlClient.SqlDependency.Start(System.String,System.String)" /> 调用。</param>
      <param name="queue">在之前使用的 SQL Server Service Broker 队列 <see cref="M:System.Data.SqlClient.SqlDependency.Start(System.String,System.String)" /> 调用。</param>
      <returns>true 如果完全停止侦听器; false 如果 <see cref="T:System.AppDomain" /> 已从侦听器，未绑定但没有至少一个其他 <see cref="T:System.AppDomain" /> 使用相同的侦听器。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="connectionString" /> 参数为 NULL。</exception>
      <exception cref="T:System.InvalidOperationException">从上在 SQLCLR 内调用该方法。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所需 <see cref="T:System.Data.SqlClient.SqlClientPermission" /> 代码访问安全性 (CAS) 权限。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">和基础 SqlClient 出现异常。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlError.ToString">
      <summary>获取错误信息的完整文本。</summary>
      <returns>错误信息的完整文本。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlErrorCollection.CopyTo(System.Array,System.Int32)">
      <summary>中的元素复制 <see cref="T:System.Data.SqlClient.SqlErrorCollection" /> 集合转换为 <see cref="T:System.Array" />, 、 指定索引处开始。</summary>
      <param name="array">
        <see cref="T:System.Array" /> 复制到的元素。</param>
      <param name="index">从其开始复制到索引 <paramref name="array" /> 参数。</param>
      <exception cref="T:System.ArgumentException">总和 <paramref name="index" /> 和中的元素数 <see cref="T:System.Data.SqlClient.SqlErrorCollection" /> 集合大于 <see cref="P:System.Array.Length" /> 的 <see cref="T:System.Array" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 无效，不能 <paramref name="array" />。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlErrorCollection.CopyTo(System.Data.SqlClient.SqlError[],System.Int32)">
      <summary>中的元素复制 <see cref="T:System.Data.SqlClient.SqlErrorCollection" /> 集合转换为 <see cref="T:System.Data.SqlClient.SqlErrorCollection" />, 、 指定索引处开始。</summary>
      <param name="array">
        <see cref="T:System.Data.SqlClient.SqlErrorCollection" /> 要复制到的元素。</param>
      <param name="index">从其开始复制到索引 <paramref name="array" /> 参数。</param>
      <exception cref="T:System.ArgumentException">总和 <paramref name="index" /> 和中的元素数 <see cref="T:System.Data.SqlClient.SqlErrorCollection" /> 集合参数的长度大于 <see cref="T:System.Data.SqlClient.SqlErrorCollection" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 无效，不能 <paramref name="array" />。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlErrorCollection.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Data.SqlClient.SqlErrorCollection" /> 的枚举数。</summary>
      <returns>用于 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Data.SqlClient.SqlErrorCollection" />。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用关于异常的信息设置 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="si">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它保存关于所引发异常的序列化对象数据。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="si" /> 参数为空引用 (Nothing 在 Visual Basic 中)。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlException.ToString">
      <summary>返回一个字符串，表示当前 <see cref="T:System.Data.SqlClient.SqlException" /> 对象，并包括客户端连接 ID (有关详细信息，请参阅 <see cref="P:System.Data.SqlClient.SqlException.ClientConnectionId" />)。</summary>
      <returns>一个字符串，表示当前 <see cref="T:System.Data.SqlClient.SqlException" /> 对象。<see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlInfoMessageEventArgs.ToString">
      <summary>检索的字符串表示形式 <see cref="E:System.Data.SqlClient.SqlConnection.InfoMessage" /> 事件。</summary>
      <returns>一个字符串，表示 <see cref="E:System.Data.SqlClient.SqlConnection.InfoMessage" /> 事件。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlNotificationEventArgs.#ctor(System.Data.SqlClient.SqlNotificationType,System.Data.SqlClient.SqlNotificationInfo,System.Data.SqlClient.SqlNotificationSource)">
      <summary>创建 <see cref="T:System.Data.SqlClient.SqlNotificationEventArgs" /> 对象的新实例。</summary>
      <param name="type">
        <see cref="T:System.Data.SqlClient.SqlNotificationType" /> 值，该值指示是否由于实际的改变，因此，将生成此通知或订阅。</param>
      <param name="info">
        <see cref="T:System.Data.SqlClient.SqlNotificationInfo" /> 值，该值指示通知事件的原因。 这可能是因为实际更改存储区中的数据，或者通知变为无效 （例如，它已超时）。</param>
      <param name="source">
        <see cref="T:System.Data.SqlClient.SqlNotificationSource" /> 值，该值指示生成了通知的源。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameter.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlClient.SqlParameter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameter.#ctor(System.String,System.Data.SqlDbType)">
      <summary>使用提供的参数名称和数据类型初始化 <see cref="T:System.Data.SqlClient.SqlParameter" /> 类的新实例。</summary>
      <param name="parameterName">要映射的参数的名称。</param>
      <param name="dbType">
        <see cref="T:System.Data.SqlDbType" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">参数 <paramref name="dbType" /> 中提供的值不是有效的后端数据类型。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameter.#ctor(System.String,System.Data.SqlDbType,System.Int32)">
      <summary>使用参数名称、<see cref="T:System.Data.SqlDbType" /> 和大小初始化 <see cref="T:System.Data.SqlClient.SqlParameter" /> 类的新实例。</summary>
      <param name="parameterName">要映射的参数的名称。</param>
      <param name="dbType">
        <see cref="T:System.Data.SqlDbType" /> 值之一。</param>
      <param name="size">参数的长度。</param>
      <exception cref="T:System.ArgumentException">参数 <paramref name="dbType" /> 中提供的值不是有效的后端数据类型。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameter.#ctor(System.String,System.Data.SqlDbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
      <summary>使用提供的参数名称、参数类型、参数大小、<see cref="T:System.Data.ParameterDirection" />、参数精度、参数小数位数、源列、要使用的 <see cref="T:System.Data.DataRowVersion" /> 以及参数值初始化 <see cref="T:System.Data.SqlClient.SqlParameter" /> 类的新实例。</summary>
      <param name="parameterName">要映射的参数的名称。</param>
      <param name="dbType">
        <see cref="T:System.Data.SqlDbType" /> 值之一。</param>
      <param name="size">参数的长度。</param>
      <param name="direction">
        <see cref="T:System.Data.ParameterDirection" /> 值之一。</param>
      <param name="isNullable">如果字段的值可以为 null，则为 true；否则为 false。</param>
      <param name="precision">所解析的 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 的小数点左右两侧的总位数。</param>
      <param name="scale">所解析的 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 的总小数位数。</param>
      <param name="sourceColumn">源列名 (<see cref="P:System.Data.SqlClient.SqlParameter.SourceColumn" />)（如果在调用 <see cref="Overload:System.Data.Common.DbDataAdapter.Update" /> 中使用了此 <see cref="T:System.Data.SqlClient.SqlParameter" />）。</param>
      <param name="sourceVersion">
        <see cref="T:System.Data.DataRowVersion" /> 值之一。</param>
      <param name="value">作为 <see cref="T:System.Object" /> 的值的 <see cref="T:System.Data.SqlClient.SqlParameter" />。</param>
      <exception cref="T:System.ArgumentException">参数 <paramref name="dbType" /> 中提供的值不是有效的后端数据类型。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameter.#ctor(System.String,System.Data.SqlDbType,System.Int32,System.Data.ParameterDirection,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Boolean,System.Object,System.String,System.String,System.String)">
      <summary>使用以下信息初始化 <see cref="T:System.Data.SqlClient.SqlParameter" /> 类的新实例：参数名、参数类型、参数长度、参数传递方向、参数精度、参数的范围、源列名、<see cref="T:System.Data.DataRowVersion" /> 的一个值、源列映射的布尔值、SqlParameter 的值、此 XML 实例的架构集所在的数据库名称、此 XML 实例的架构集所在的关系型架构，以及此参数的架构集的名称。</summary>
      <param name="parameterName">要映射的参数的名称。</param>
      <param name="dbType">
        <see cref="T:System.Data.SqlDbType" /> 值之一。</param>
      <param name="size">参数的长度。</param>
      <param name="direction">
        <see cref="T:System.Data.ParameterDirection" /> 值之一。</param>
      <param name="precision">所解析的 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 的小数点左右两侧的总位数。</param>
      <param name="scale">所解析的 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 的总小数位数。</param>
      <param name="sourceColumn">源列名 (<see cref="P:System.Data.SqlClient.SqlParameter.SourceColumn" />)（如果在调用 <see cref="Overload:System.Data.Common.DbDataAdapter.Update" /> 中使用了此 <see cref="T:System.Data.SqlClient.SqlParameter" />）。</param>
      <param name="sourceVersion">
        <see cref="T:System.Data.DataRowVersion" /> 值之一。</param>
      <param name="sourceColumnNullMapping">如果源列可以为 null，则为 true；否则为 ￼false￼。</param>
      <param name="value">作为 <see cref="T:System.Object" /> 的值的 <see cref="T:System.Data.SqlClient.SqlParameter" />。</param>
      <param name="xmlSchemaCollectionDatabase">此 XML 实例的架构集合所在的数据库的名称。</param>
      <param name="xmlSchemaCollectionOwningSchema">此 XML 实例的架构集合所在的所属关系架构。</param>
      <param name="xmlSchemaCollectionName">此参数的架构集的名称。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameter.#ctor(System.String,System.Data.SqlDbType,System.Int32,System.String)">
      <summary>使用提供的参数名称、<see cref="T:System.Data.SqlDbType" />、大小和源列名初始化 <see cref="T:System.Data.SqlClient.SqlParameter" /> 类的新实例。</summary>
      <param name="parameterName">要映射的参数的名称。</param>
      <param name="dbType">
        <see cref="T:System.Data.SqlDbType" /> 值之一。</param>
      <param name="size">参数的长度。</param>
      <param name="sourceColumn">源列名 (<see cref="P:System.Data.SqlClient.SqlParameter.SourceColumn" />)（如果在调用 <see cref="Overload:System.Data.Common.DbDataAdapter.Update" /> 中使用了此 <see cref="T:System.Data.SqlClient.SqlParameter" />）。</param>
      <exception cref="T:System.ArgumentException">参数 <paramref name="dbType" /> 中提供的值不是有效的后端数据类型。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameter.#ctor(System.String,System.Object)">
      <summary>初始化 <see cref="T:System.Data.SqlClient.SqlParameter" /> 类的新实例，该类使用参数名称和新 <see cref="T:System.Data.SqlClient.SqlParameter" /> 的值。</summary>
      <param name="parameterName">要映射的参数的名称。</param>
      <param name="value">作为 <see cref="T:System.Object" /> 的值的 <see cref="T:System.Data.SqlClient.SqlParameter" />。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameter.ResetDbType">
      <summary>重置与此 <see cref="T:System.Data.SqlClient.SqlParameter" /> 关联的类型。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameter.ResetSqlDbType">
      <summary>重置与此 <see cref="T:System.Data.SqlClient.SqlParameter" /> 关联的类型。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameter.System#ICloneable#Clone">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.ICloneable.Clone" />。</summary>
      <returns>新的 <see cref="T:System.Object" /> 对象，是此实例的副本。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameter.ToString">
      <summary>获取一个包含 <see cref="P:System.Data.SqlClient.SqlParameter.ParameterName" /> 的字符串。</summary>
      <returns>一个包含 <see cref="P:System.Data.SqlClient.SqlParameter.ParameterName" /> 的字符串。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.Add(System.Data.SqlClient.SqlParameter)">
      <summary>将指定的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象添加到 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中。</summary>
      <param name="value">要添加到集合中的 <see cref="T:System.Data.SqlClient.SqlParameter" />。</param>
      <returns>一个新 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.SqlClient.SqlParameter" /> 中指定 <paramref name="value" /> 参数已添加到这个或其他 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />。</exception>
      <exception cref="T:System.InvalidCastException">传递的参数不是 <see cref="T:System.Data.SqlClient.SqlParameter" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.Add(System.Object)">
      <summary>将指定的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象添加到 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中。</summary>
      <param name="value">一个 <see cref="T:System.Object" />。</param>
      <returns>新的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象的索引。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.Add(System.String,System.Data.SqlDbType)">
      <summary>在给定参数名称和数据类型时向 <see cref="T:System.Data.SqlClient.SqlParameter" /> 中添加一个 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />。</summary>
      <param name="parameterName">参数的名称。</param>
      <param name="sqlDbType">
        <see cref="T:System.Data.SqlDbType" /> 值之一。</param>
      <returns>一个新 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.Add(System.String,System.Data.SqlDbType,System.Int32)">
      <summary>添加 <see cref="T:System.Data.SqlClient.SqlParameter" /> 到 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />, ，给出指定的参数名 <see cref="T:System.Data.SqlDbType" /> 和大小。</summary>
      <param name="parameterName">参数的名称。</param>
      <param name="sqlDbType">
        <see cref="T:System.Data.SqlDbType" /> 的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 要添加到集合。</param>
      <param name="size">大小作为 <see cref="T:System.Int32" />。</param>
      <returns>一个新 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.Add(System.String,System.Data.SqlDbType,System.Int32,System.String)">
      <summary>使用给定的参数名称、数据类型和列长度向 <see cref="T:System.Data.SqlClient.SqlParameter" /> 中添加一个 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />。</summary>
      <param name="parameterName">参数的名称。</param>
      <param name="sqlDbType">
        <see cref="T:System.Data.SqlDbType" /> 值之一。</param>
      <param name="size">列的长度。</param>
      <param name="sourceColumn">源列名 (<see cref="P:System.Data.SqlClient.SqlParameter.SourceColumn" />)（如果在调用 <see cref="Overload:System.Data.Common.DbDataAdapter.Update" /> 中使用了此 <see cref="T:System.Data.SqlClient.SqlParameter" />）。</param>
      <returns>一个新 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.Add(System.String,System.Object)">
      <summary>将指定的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象添加到 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中。</summary>
      <param name="parameterName">名称 <see cref="T:System.Data.SqlClient.SqlParameter" /> 要添加到集合。</param>
      <param name="value">
        <see cref="T:System.Object" />。</param>
      <returns>一个新 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象。正在使用的此重载时要格外小心 SqlParameterCollection.Add 方法，以便指定整数参数值。 因为此重载接受 <paramref name="value" /> 类型的 <see cref="T:System.Object" />, ，必须将转换整数值与 <see cref="T:System.Object" /> 键入时的值为零，如下面的 C# 示例所示。parameters.Add("@pname", Convert.ToInt32(0));如果不执行此转换，则编译器假定您尝试调用 SqlParameterCollection.Add (string, ，SqlDbType) 重载。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.SqlClient.SqlParameter" /> 中指定 <paramref name="value" /> 参数已添加到这个或其他 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.AddRange(System.Array)">
      <summary>向 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 的末尾添加一个值数组。</summary>
      <param name="values">要添加的 <see cref="T:System.Array" /> 值。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.AddRange(System.Data.SqlClient.SqlParameter[])">
      <summary>向 <see cref="T:System.Data.SqlClient.SqlParameter" /> 的末尾添加一个 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 值数组。</summary>
      <param name="values">要添加的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 值。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.AddWithValue(System.String,System.Object)">
      <summary>向 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 的末尾添加一个值。</summary>
      <param name="parameterName">参数的名称。</param>
      <param name="value">要添加的值。 使用 <see cref="F:System.DBNull.Value" /> 而不是 null，以指示 null 值。</param>
      <returns>一个 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.Clear">
      <summary>从 <see cref="T:System.Data.SqlClient.SqlParameter" /> 中移除所有的 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 对象。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.Contains(System.Data.SqlClient.SqlParameter)">
      <summary>确定指定的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 是否在此 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中。</summary>
      <param name="value">
        <see cref="T:System.Data.SqlClient.SqlParameter" /> 值。</param>
      <returns>true 如果 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 包含的值; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.Contains(System.Object)">
      <summary>确定指定的 <see cref="T:System.Object" /> 是否在此 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中。</summary>
      <param name="value">
        <see cref="T:System.Object" /> 值。</param>
      <returns>true 如果 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 包含的值; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.Contains(System.String)">
      <summary>确定指定的参数名称是否在此 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />。</summary>
      <param name="value">
        <see cref="T:System.String" /> 值。</param>
      <returns>true 如果 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 包含的值; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.CopyTo(System.Array,System.Int32)">
      <summary>将当前 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 的所有元素复制到指定的一维 <see cref="T:System.Array" /> 中，并以指定的目标 <see cref="T:System.Array" /> 索引位置作为复制到的起始位置。</summary>
      <param name="array">作为当前 <see cref="T:System.Array" /> 中的元素的复制目标的一维 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />。</param>
      <param name="index">一个 32 位整数，表示 <see cref="T:System.Array" /> 中开始复制的位置的索引。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.CopyTo(System.Data.SqlClient.SqlParameter[],System.Int32)">
      <summary>将当前 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 的所有元素复制到指定的 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中，并以指定的目标索引位置作为复制到的起始位置。</summary>
      <param name="array">作为当前 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中的元素的复制目标的 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />。</param>
      <param name="index">一个 32 位整数，表示 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中开始复制的位置的索引。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 的枚举数。</summary>
      <returns>用于 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.IndexOf(System.Data.SqlClient.SqlParameter)">
      <summary>获取指定的位置 <see cref="T:System.Data.SqlClient.SqlParameter" /> 在集合中。</summary>
      <param name="value">要查找的 <see cref="T:System.Data.SqlClient.SqlParameter" />。</param>
      <returns>指定的从零开始的位置 <see cref="T:System.Data.SqlClient.SqlParameter" /> 即 <see cref="T:System.Data.SqlClient.SqlParameter" /> 在集合中。 如果 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中不存在该对象，则返回 -1。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.IndexOf(System.Object)">
      <summary>获取指定的位置 <see cref="T:System.Object" /> 在集合中。</summary>
      <param name="value">要查找的 <see cref="T:System.Object" />。</param>
      <returns>指定的从零开始的位置 <see cref="T:System.Object" /> 即 <see cref="T:System.Data.SqlClient.SqlParameter" /> 在集合中。 如果 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中不存在该对象，则返回 -1。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.IndexOf(System.String)">
      <summary>获取具有指定名称的指定 <see cref="T:System.Data.SqlClient.SqlParameter" /> 的位置。</summary>
      <param name="parameterName">要查找的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 的名称（区分大小写）。</param>
      <returns>具有指定名称（区分大小写）的指定 <see cref="T:System.Data.SqlClient.SqlParameter" /> 的位置（从零开始）。 如果 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中不存在该对象，则返回 -1。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.Insert(System.Int32,System.Data.SqlClient.SqlParameter)">
      <summary>在 <see cref="T:System.Data.SqlClient.SqlParameter" /> 中的指定索引处插入一个 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 对象。</summary>
      <param name="index">应将值插入到的位置的索引（从零开始）。</param>
      <param name="value">要插入到 <see cref="T:System.Data.SqlClient.SqlParameter" /> 中的 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.Insert(System.Int32,System.Object)">
      <summary>在 <see cref="T:System.Object" /> 中的指定索引处插入一个 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />。</summary>
      <param name="index">应将值插入到的位置的索引（从零开始）。</param>
      <param name="value">要插入到 <see cref="T:System.Object" /> 中的 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.Remove(System.Data.SqlClient.SqlParameter)">
      <summary>从集合中移除指定的 <see cref="T:System.Data.SqlClient.SqlParameter" />。</summary>
      <param name="value">要从集合中移除的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象。</param>
      <exception cref="T:System.InvalidCastException">该参数不是 <see cref="T:System.Data.SqlClient.SqlParameter" />。</exception>
      <exception cref="T:System.SystemException">集合中不存在该参数。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.Remove(System.Object)">
      <summary>从集合中移除指定的 <see cref="T:System.Data.SqlClient.SqlParameter" />。</summary>
      <param name="value">要从集合中移除的对象。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.RemoveAt(System.Int32)">
      <summary>从 <see cref="T:System.Data.SqlClient.SqlParameter" /> 的指定索引处移除 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />。</summary>
      <param name="index">要移除的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象的索引（从零开始）。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.RemoveAt(System.String)">
      <summary>从 <see cref="T:System.Data.SqlClient.SqlParameter" /> 中移除具有指定参数名称的 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />。</summary>
      <param name="parameterName">要移除的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 的名称。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlRowsCopiedEventArgs.#ctor(System.Int64)">
      <summary>创建 <see cref="T:System.Data.SqlClient.SqlRowsCopiedEventArgs" /> 对象的新实例。</summary>
      <param name="rowsCopied">
        <see cref="T:System.Int64" /> ，该值指示当前的大容量复制操作期间复制的行数。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlRowUpdatedEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>初始化 <see cref="T:System.Data.SqlClient.SqlRowUpdatedEventArgs" /> 类的新实例。</summary>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> 通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</param>
      <param name="command">
        <see cref="T:System.Data.IDbCommand" /> 时执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 调用。</param>
      <param name="statementType">其中一个 <see cref="T:System.Data.StatementType" /> 值，该值指定执行查询的类型。</param>
      <param name="tableMapping">
        <see cref="T:System.Data.Common.DataTableMapping" /> 通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlRowUpdatingEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>初始化 <see cref="T:System.Data.SqlClient.SqlRowUpdatingEventArgs" /> 类的新实例。</summary>
      <param name="row">
        <see cref="T:System.Data.DataRow" /> 到 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</param>
      <param name="command">
        <see cref="T:System.Data.IDbCommand" /> 过程中执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</param>
      <param name="statementType">其中一个 <see cref="T:System.Data.StatementType" /> 值，该值指定执行查询的类型。</param>
      <param name="tableMapping">
        <see cref="T:System.Data.Common.DataTableMapping" /> 通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlTransaction.Commit">
      <summary>提交数据库事务。</summary>
      <exception cref="T:System.Exception">在尝试提交事务时出错。</exception>
      <exception cref="T:System.InvalidOperationException">已提交或回滚事务。- 或 - 连接已断开。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlTransaction.Rollback">
      <summary>从挂起状态回滚事务。</summary>
      <exception cref="T:System.Exception">在尝试提交事务时出错。</exception>
      <exception cref="T:System.InvalidOperationException">已提交或回滚事务。- 或 - 连接已断开。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlTransaction.Rollback(System.String)">
      <summary>从挂起状态回滚事务，并指定在事务或保存点名称。</summary>
      <param name="transactionName">事务回滚或要回滚到保存点的名称。</param>
      <exception cref="T:System.ArgumentException">指定没有事务名称。</exception>
      <exception cref="T:System.InvalidOperationException">已提交或回滚事务。- 或 - 连接已断开。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlTransaction.Save(System.String)">
      <summary>可以用来回滚事务的一部分，并且指定的保存点名称的事务中创建一个保存点。</summary>
      <param name="savePointName">保存点的名称。</param>
      <exception cref="T:System.Exception">在尝试提交事务时出错。</exception>
      <exception cref="T:System.InvalidOperationException">已提交或回滚事务。- 或 - 连接已断开。</exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlAlreadyFilledException.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlAlreadyFilledException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlAlreadyFilledException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlAlreadyFilledException" /> 类的新实例。</summary>
      <param name="message">要在引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlAlreadyFilledException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlAlreadyFilledException" /> 类的新实例。</summary>
      <param name="message">要在引发异常时显示的字符串。</param>
      <param name="e">对内部异常的引用。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.#ctor(System.Byte[])">
      <summary>新实例初始化 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构，将 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 属性设置为提供的字节数组的内容。</summary>
      <param name="value">要存储或检索的字节数组。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.Add(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>串联两个指定 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 值以创建一个新 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> x 的串联的值和 y。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.CompareTo(System.Data.SqlTypes.SqlBinary)">
      <summary>比较此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象与所提供 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象并返回对其相对值的指示。</summary>
      <param name="value">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象进行比较的这 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <returns>一个有符号的数字，它指示此相对值 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构和对象。返回值 条件 小于零 此值 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象是小于的对象。零 这 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象是对象相同。大于零 这 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象是否大于对象。- 或 - 该对象为 null 引用。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.CompareTo(System.Object)">
      <summary>比较此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象传递给所提供的对象并返回对其相对值的指示。</summary>
      <param name="value">与此比较的对象 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <returns>一个有符号的数字，它指示此相对值 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构和对象。返回值 条件 小于零 此值 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象是小于的对象。零 这 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象是对象相同。大于零 这 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象是否大于对象。- 或 - 该对象为 null 引用。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.Concat(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>串联两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构，以创建一个新 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <returns>串联的值 <paramref name="x" /> 和 <paramref name="y" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.Equals(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构以确定它们是否相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <returns>true 如果两个值是否相等。 否则为 false。 如果任一实例为 null，则 SqlBinary 将为 null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.Equals(System.Object)">
      <summary>将提供的对象参数 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</summary>
      <param name="value">要比较的对象。</param>
      <returns>true 如果对象的实例 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 安全以及需要两个相等; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.GetHashCode">
      <summary>返回此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      <param name="schemaSet">一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>一个 string ，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.GreaterThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构，以确定第一个是否大于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.GreaterThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构，以确定第一个是否大于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.LessThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构以确定第一个是否小于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.LessThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构以确定第一个是否小于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.NotEquals(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构以确定它们是否不相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Addition(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>串联两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 参数，以创建一个新 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <returns>串联的值 <paramref name="x" /> 和 <paramref name="y" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Equality(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构以确定它们是否相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 两个实例是否相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 如果两个实例是否不相等。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Explicit(System.Data.SqlTypes.SqlBinary)~System.Byte[]">
      <summary>将转换 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构 <see cref="T:System.Byte" /> 数组。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <returns>
        <see cref="T:System.Byte" /> 数组。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Explicit(System.Data.SqlTypes.SqlGuid)~System.Data.SqlTypes.SqlBinary">
      <summary>将转换 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <returns>要转换的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_GreaterThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构，以确定第一个是否大于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构以确定第一个是否大于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Implicit(System.Byte[])~System.Data.SqlTypes.SqlBinary">
      <summary>将转换的字节数组到 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</summary>
      <param name="x">要转换的字节数组。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构，它表示转换后的字节数组。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Inequality(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构以确定它们是否不相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_LessThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构以确定第一个是否小于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_LessThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构以确定第一个是否小于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />。</summary>
      <returns>一个 <see cref="T:System.Xml.Schema.XMLSchema" /> 实例。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />。</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.ToSqlGuid">
      <summary>将此实例的转换 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 到 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.ToString">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象与字符串。</summary>
      <returns>一个字符串，包含 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBinary" />。 如果 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 为的 null 则字符串将包含"null"。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.#ctor(System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，使用提供的布尔值。</summary>
      <param name="value">为新值 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构; 两个 true 或 false。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.#ctor(System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，使用指定的整数值。</summary>
      <param name="value">其值是要用于新的整数 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.And(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>计算两个指定的按位与运算 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>逻辑与运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.CompareTo(System.Data.SqlTypes.SqlBoolean)">
      <summary>比较此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 对象与所提供 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 对象并返回对其相对值的指示。</summary>
      <param name="value">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /><see cref="T:System.Data.SqlTypes.SqlBoolean" /> 要比较对象，则为 null 引用 (Nothing 在 Visual Basic 中)。</param>
      <returns>有符号的数字，该值指示此实例和值的相对值。值 描述 负整数 此实例小于 <paramref name="value" />。零 此实例等于 <paramref name="value" />。正整数 此实例大于 <paramref name="value" />。- 或 - <paramref name="value" /> 为空引用（在 Visual Basic 中为 Nothing）。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.CompareTo(System.Object)">
      <summary>比较此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构与指定对象并返回对其相对值的指示。</summary>
      <param name="value">要比较对象，则为 null 引用 (Nothing 在 Visual Basic 中)。</param>
      <returns>有符号的数字，该值指示此实例和值的相对值。值 描述 负整数 此实例小于 <paramref name="value" />。零 此实例等于 <paramref name="value" />。正整数 此实例大于 <paramref name="value" />。- 或 - <paramref name="value" /> 为空引用（在 Visual Basic 中为 Nothing）。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.Equals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构以确定它们是否相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 两个实例是否相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 如果两个实例是否不相等。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.Equals(System.Object)">
      <summary>将提供的对象参数 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <param name="value">要比较的对象。</param>
      <returns>true 如果对象的实例 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 安全以及需要两个相等; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>一个 string 值，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.GreaterThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 以确定第一个是否大于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 true 的第一个实例是否大于第二个实例; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.GreaterThanOrEquals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 以确定第一个是否大于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 true 的第一个实例是否大于或等于第二个实例; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.LessThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 以确定第一个是否小于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 true 如果第一个实例小于第二个实例; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.LessThanOrEquals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 以确定第一个是否小于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 true 如果第一个实例小于或等于第二个实例，; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.NotEquals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 是否相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.OnesComplement(System.Data.SqlTypes.SqlBoolean)">
      <summary>执行对一个值的求补运算对提供 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>二进制反码所提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_BitwiseAnd(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>计算两个指定的按位与运算 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>逻辑与运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_BitwiseOr(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>计算其操作数的按位 OR。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>逻辑或运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Equality(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 两个实例是否相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 如果两个实例是否不相等。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_ExclusiveOr(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>执行按位异或 (XOR) 运算对提供的参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>逻辑异或运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Boolean">
      <summary>将转换 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 为布尔值。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将转换。</param>
      <returns>一个布尔值设置为 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlBoolean">
      <summary>将转换 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 可转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，其值等于 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlBoolean">
      <summary>将转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 可转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，其值等于 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlBoolean">
      <summary>将转换 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 可转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，其值等于 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlBoolean">
      <summary>将转换 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 可转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，其值等于 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlBoolean">
      <summary>将转换 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 可转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，其值等于 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlBoolean">
      <summary>将转换 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 可转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，其值等于 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlBoolean">
      <summary>将转换 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 可转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，其值等于 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlBoolean">
      <summary>将转换 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 可转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，其值等于 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlBoolean">
      <summary>将转换 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 可转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，其值等于 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_False(System.Data.SqlTypes.SqlBoolean)">
      <summary>False 运算符可以用于测试 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 以确定是否为 false。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构以进行测试。</param>
      <returns>返回 true 所提供的参数是否 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 为 false， false 否则为。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_GreaterThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，以确定第一个是否大于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 对象。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 对象。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 true 的第一个实例是否大于第二个实例; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，以确定第一个是否大于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 true 的第一个实例是否大于或等于第二个实例; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Implicit(System.Boolean)~System.Data.SqlTypes.SqlBoolean">
      <summary>提供的字节将值转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <param name="x">要转换为一个字节值 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 值，该值包含 0 或 1。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Inequality(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 以确定它们是否不相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_LessThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 以确定第一个是否小于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 true 如果第一个实例小于第二个实例; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_LessThanOrEqual(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 以确定第一个是否小于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 true 如果第一个实例小于或等于第二个实例，; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_LogicalNot(System.Data.SqlTypes.SqlBoolean)">
      <summary>对执行 NOT 运算 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 上执行非运算。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 与 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /><see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 参数是否为 true， <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> 如果参数为空，并且 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 否则为。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_OnesComplement(System.Data.SqlTypes.SqlBoolean)">
      <summary>执行对一个值的求补运算对提供 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>二进制反码所提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_True(System.Data.SqlTypes.SqlBoolean)">
      <summary>True 运算符可以用于测试 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 以确定其是否为 true。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构以进行测试。</param>
      <returns>返回 true 所提供的参数是否 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 为 true， false 否则为。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.Or(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>执行按位或运算，对两个指定 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，其值为按位或运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.Parse(System.String)">
      <summary>将指定 <see cref="T:System.String" /> 到一个逻辑值的表示形式及其 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 等效。</summary>
      <param name="s">要转换的 <see cref="T:System.String" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，其中包含已分析的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <returns>一个 XmlSchema。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="reader">XmlReader </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="writer">XmlWriter </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlByte">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，其值为 1 或 0。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 true, ，新 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的值为 1。 否则为新 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的值为 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlDecimal">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，其值为 1 或 0。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 true 新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值为 1。 否则为新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值为 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlDouble">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，其值为 1 或 0。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 true 新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的值为 1。 否则为新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的值为 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlInt16">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>一个新 SqlInt16 结构，其值为 1 或 0。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 true 新 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的值为 1。 否则为新 SqlInt16 结构的值为 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlInt32">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个新 SqlInt32 结构，其值为 1 或 0。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 true, ，新 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构的值为 1。 否则为新 SqlInt32 结构的值为 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlInt64">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新 SqlInt64 结构，其值为 1 或 0。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 true, ，新 <see cref="T:System.Data.SqlTypes.SqlInt64" />  结构的值为 1。 否则为新 SqlInt64 结构的值为 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlMoney">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，其值为 1 或 0。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 true, ，新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 值为 1。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 false, ，新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 值为 0。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值不是 1 或 0，新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 值是 <see cref="F:System.Data.SqlTypes.SqlMoney.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlSingle">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，其值为 1 或 0。如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 true，则新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的值为 1; 否则为新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的值为 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlString">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构，其值为 1 或 0。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 true 然后 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的值为 1。 否则为新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的值为 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToString">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 为字符串的结构。</summary>
      <returns>一个字符串，包含的值 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。 如果值为 null，则字符串将包含"null"。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.Xor(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>执行按位异或运算对提供的参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>逻辑异或运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.#ctor(System.Byte)">
      <summary>新实例初始化 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，使用指定的字节值。</summary>
      <param name="value">要存储在一个字节值 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性的新 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Add(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>计算两个指定的和 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 Value 属性包含添加的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.BitwiseAnd(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>计算的按位 AND 其 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>按位与运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.BitwiseOr(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>计算其两个的按位 OR <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>按位或运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.CompareTo(System.Data.SqlTypes.SqlByte)">
      <summary>将与所提供的此实例进行比较 <see cref="T:System.Data.SqlTypes.SqlByte" /> 对象并返回对其相对值的指示。</summary>
      <param name="value">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 对象进行比较。</param>
      <returns>一个有符号的数字，指示实例和对象的相对值。返回值 条件 小于零 此实例是早于该对象。零 此实例与对象相同。大于零 此实例大于对象 - 或 - 该对象为空引用 (Nothing 在 Visual Basic 中) </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.CompareTo(System.Object)">
      <summary>将与所提供的此实例进行比较 <see cref="T:System.Object" /> 并返回对其相对值的指示。</summary>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <returns>一个有符号的数字，指示实例和对象的相对值。返回值 条件 小于零 此实例是早于该对象。零 此实例与对象相同。大于零 此实例大于对象 - 或 - 该对象为空引用 (Nothing 在 Visual Basic 中) </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Divide(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>将其第一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数除以第二个操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性包含除法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Equals(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构以确定它们是否相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>true 如果两个值是否相等。 否则为 false。 如果任一实例为 null，则 SqlByte 将为 null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Equals(System.Object)">
      <summary>比较提供 <see cref="T:System.Object" /> 参数 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlByte" /> 对象。</summary>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <returns>true 如果对象的实例 <see cref="T:System.Data.SqlTypes.SqlByte" /> 安全以及需要两个相等; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>一个 string 值，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.GreaterThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 以确定第一个是否大于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlByte" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.GreaterThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，以确定第一个是否大于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlByte" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.LessThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 以确定第一个是否小于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlByte" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.LessThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 以确定第一个是否小于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlByte" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Mod(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>计算其第一个相除的余数 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数除以第二个操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 包含其余部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Modulus(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>将两个划分 <see cref="T:System.Data.SqlTypes.SqlByte" /> 值并返回余数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" />。</param>
      <returns>得到的余数后在执行除法运算 <paramref name="x" /> 和 <paramref name="y" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Multiply(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>计算两个产品 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性包含相乘的积。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.NotEquals(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 以确定它们是否不相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlByte" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.OnesComplement(System.Data.SqlTypes.SqlByte)">
      <summary>二进制反码运算符执行按位码运算上其 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性包含与补数 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Addition(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>计算两个指定的和 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 其 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性包含两个操作数之和。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_BitwiseAnd(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>计算的按位 AND 其 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>按位与运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_BitwiseOr(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>计算其两个的按位 OR <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>按位或运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Division(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>将其第一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数除以第二个操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性包含除法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Equality(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构以确定它们是否相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 两个实例是否相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 如果两个实例是否不相等。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlByte" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_ExclusiveOr(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>执行按位异或运算对提供的参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>按位异或运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlByte">
      <summary>将转换 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 其 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 所提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlByte)~System.Byte">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlByte" /> 到字节的结构。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构转换为一个字节。</param>
      <returns>其值等于一个字节 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlByte">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 到 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等同于 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlByte">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 到 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等同于 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlByte">
      <summary>将转换 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等同于 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlByte">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 到 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等同于 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlByte">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 到 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等同于 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 的 SqlInt64 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlByte">
      <summary>将转换 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <param name="x">一个 SqlMoney 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等同于 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlByte">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等同于 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlByte">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlString" /> 到 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <param name="x">SqlString 类的实例。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性是否等于所表示的数字值 <see cref="T:System.Data.SqlTypes.SqlString" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_GreaterThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 以确定第一个是否大于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlByte" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 以确定第一个是否大于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlByte" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 SqlBoolean 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Implicit(System.Byte)~System.Data.SqlTypes.SqlByte">
      <summary>提供的字节将值转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <param name="x">要转换为一个字节值 <see cref="T:System.Data.SqlTypes.SqlByte" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等于提供的参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Inequality(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 以确定它们是否不相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlByte" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_LessThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 以确定第一个是否小于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlByte" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_LessThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 以确定第一个是否小于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlByte" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Modulus(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>计算其第一个相除的余数 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数除以第二个操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 包含其余部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Multiply(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>计算两个产品 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性包含相乘的积。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_OnesComplement(System.Data.SqlTypes.SqlByte)">
      <summary>二进制反码运算符执行按位码运算上其 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性包含与补数 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Subtraction(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>值中减去第二个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 从第一个操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>结果中减去第二个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 从第一个操作数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Parse(System.String)">
      <summary>将转换 <see cref="T:System.String" /> 为其等效的 8 位无符号整数的数字表示形式。</summary>
      <param name="s">String 要进行分析。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，其中包含所表示的 8 位数字 String 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Subtract(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>值中减去第二个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 从第一个操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>结果中减去第二个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 从第一个操作数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <returns>一个 XmlSchema。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="reader">XmlReader </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="writer">XmlWriter </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlBoolean">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>true 如果 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 为非零; false 如果零; 否则为 Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlDecimal">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个 SqlDecimal 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 等于 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlDouble">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>一个 SqlDouble 具有与此相同的值结构 <see cref="T:System.Data.SqlTypes.SqlByte" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlInt16">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>一个 SqlInt16 具有与此相同的值结构 <see cref="T:System.Data.SqlTypes.SqlByte" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlInt32">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlByte" /> 到 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个 SqlInt32 具有与此相同的值结构 <see cref="T:System.Data.SqlTypes.SqlByte" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlInt64">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个 SqlInt64 结构人员 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 此 <see cref="T:System.Data.SqlTypes.SqlByte" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlMoney">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个 SqlMoney 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 等于 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlSingle">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个 SqlSingle 具有相同的结构 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 如下 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlString">
      <summary>将此实例的转换 <see cref="T:System.Data.SqlTypes.SqlByte" /> 到 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 SqlString ，其中包含的字符串表示形式 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToString">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构 <see cref="T:System.String" />。</summary>
      <returns>一个字符串，包含 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlByte" />。 如果 Value 为 null， String 将是一个空字符串。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Xor(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>执行按位异或运算对提供的参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>异或运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.#ctor(System.Byte[])">
      <summary>新实例初始化 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 类根据指定的字节数组。</summary>
      <param name="buffer">无符号字节的数组。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.#ctor(System.Data.SqlTypes.SqlBinary)">
      <summary>新实例初始化 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 类根据指定 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 值。</summary>
      <param name="value">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.#ctor(System.IO.Stream)">
      <summary>新实例初始化 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 类根据指定 <see cref="T:System.IO.Stream" /> 值。</summary>
      <param name="s">
        <see cref="T:System.IO.Stream" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>一个 string ，该值指示指定的 XSD XmlSchemaSet。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.op_Explicit(System.Data.SqlTypes.SqlBinary)~System.Data.SqlTypes.SqlBytes">
      <summary>将转换 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 结构。</summary>
      <param name="value">要转换的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.op_Explicit(System.Data.SqlTypes.SqlBytes)~System.Data.SqlTypes.SqlBinary">
      <summary>将转换 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 结构 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</summary>
      <param name="value">要转换的 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.Read(System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>将字节复制从此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 到缓冲区中传递的实例，并返回复制的字节数。</summary>
      <param name="offset">
        <see cref="T:System.Int64" /> 长值偏移量中包含的值 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例。</param>
      <param name="buffer">要将复制到的字节数组缓冲区。</param>
      <param name="offsetInBuffer">
        <see cref="T:System.Int32" /> 整数偏移量开始复制到的缓冲区。</param>
      <param name="count">
        <see cref="T:System.Int32" /> 表示的字节数要复制的整数。</param>
      <returns>
        <see cref="T:System.Int64" /> 表示的数的长整型值复制字节。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.SetLength(System.Int64)">
      <summary>设置此长度 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例。</summary>
      <param name="value">
        <see cref="T:System.Int64" /> 长时间值表示长度。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.SetNull">
      <summary>完成这一设置 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例为 null。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>获取序列化信息，其中包含重新实例化此所需的所有数据 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例。</summary>
      <param name="info">用序列化信息填充的对象。</param>
      <param name="context">序列化的目标上下文。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <returns>此成员支持 .NET Framework 结构，不能在代码中直接使用。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="r">XmlReader</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="writer">XmlWriter</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.ToSqlBinary">
      <summary>构造并返回 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 从此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 从此实例。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.Write(System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>将从传入的缓冲区的字节复制到此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例。</summary>
      <param name="offset">
        <see cref="T:System.Int64" /> 长值偏移量中包含的值 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例。</param>
      <param name="buffer">要将复制到的字节数组缓冲区。</param>
      <param name="offsetInBuffer">
        <see cref="T:System.Int32" /> 整数偏移量开始复制到的缓冲区。</param>
      <param name="count">
        <see cref="T:System.Int32" /> 表示的字节数要复制的整数。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlChars" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.#ctor(System.Char[])">
      <summary>新实例初始化 <see cref="T:System.Data.SqlTypes.SqlChars" /> 类根据指定的字符数组。</summary>
      <param name="buffer">
        <see cref="T:System.Char" /> 数组。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.#ctor(System.Data.SqlTypes.SqlString)">
      <summary>新实例初始化 <see cref="T:System.Data.SqlTypes.SqlChars" /> 类根据指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 值。</summary>
      <param name="value">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>一个 string 值，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.op_Explicit(System.Data.SqlTypes.SqlChars)~System.Data.SqlTypes.SqlString">
      <summary>将转换 <see cref="T:System.Data.SqlTypes.SqlChars" /> 结构 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</summary>
      <param name="value">要转换的 <see cref="T:System.Data.SqlTypes.SqlChars" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlChars">
      <summary>将转换 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构 <see cref="T:System.Data.SqlTypes.SqlChars" /> 结构。</summary>
      <param name="value">要转换的 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlChars" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.Read(System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>将字符复制从此 <see cref="T:System.Data.SqlTypes.SqlChars" /> 到缓冲区中传递的实例，并返回复制的字符数。</summary>
      <param name="offset">
        <see cref="T:System.Int64" />long 值偏移量中包含的值 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例。</param>
      <param name="buffer">若要将复制到指定字符数组缓冲区。</param>
      <param name="offsetInBuffer">
        <see cref="T:System.Int32" /> 整数偏移量开始复制到的缓冲区。</param>
      <param name="count">
        <see cref="T:System.Int32" /> 整数值，表示要复制的字符数。</param>
      <returns>
        <see cref="T:System.Int64" />long 表示版本号的值复制字节。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.SetLength(System.Int64)">
      <summary>设置此长度 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例。</summary>
      <param name="value">
        <see cref="T:System.Int64" />long 表示长度值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.SetNull">
      <summary>完成这一设置 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例为 null。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>获取序列化信息，其中包含重新实例化此所需的所有数据 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例。</summary>
      <param name="info">用序列化信息填充的对象。</param>
      <param name="context">序列化的目标上下文。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <returns>此成员支持 .NET Framework 结构，不能在代码中直接使用。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="r">XmlReader</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="writer">XmlWriter</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.ToSqlString">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例传递给它的等效项 <see cref="T:System.Data.SqlTypes.SqlString" /> 表示形式。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 此类型表示形式。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.Write(System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>将从传入的缓冲区的字符复制到此 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例。</summary>
      <param name="offset">一个 long 值偏移量中包含的值 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例。</param>
      <param name="buffer">若要将复制到指定字符数组缓冲区。</param>
      <param name="offsetInBuffer">
        <see cref="T:System.Int32" /> 整数偏移量开始复制到的缓冲区。</param>
      <param name="count">
        <see cref="T:System.Int32" /> 表示的字符数要复制的整数。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.DateTime)">
      <summary>新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构，使用指定 <see cref="T:System.DateTime" /> 值。</summary>
      <param name="value">一个 DateTime 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构，使用提供的参数。</summary>
      <param name="dayTicks">一个整数值，表示为刻度数的日期。</param>
      <param name="timeTicks">一个整数值，表示为刻度数的时间。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构，使用所提供的参数初始化年、 月、 日。</summary>
      <param name="year">一个整数，表示的年份的新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="month">表示新的月份的整数值 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="day">一个整数值，表示新的天数 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构，使用所提供的参数初始化年、 月、 日、 小时、 分钟和第二个新的结构。</summary>
      <param name="year">一个整数值，表示新的年 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="month">表示新的月份的整数值 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="day">一个整数值，表示新的每月天数 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="hour">一个整数值表示的小时部分新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="minute">一个整数值表示时间的分钟数新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="second">一个整数值表示的第二个新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
      <summary>新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构，使用所提供的参数初始化年、 月、 日、 小时、 分钟、 秒和毫秒，新的结构。</summary>
      <param name="year">一个整数值，表示新的年 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="month">表示新的月份的整数值 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="day">一个整数值，表示新的每月天数 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="hour">一个整数值表示的小时部分新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="minute">一个整数值表示时间的分钟数新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="second">一个整数值表示的第二个新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="millisecond">一个 double 值，表示最新的毫秒 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构，使用所提供的参数初始化年、 月、 日、 小时、 分钟、 秒和毫新结构。</summary>
      <param name="year">一个整数值，表示新的年 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="month">表示新的月份的整数值 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="day">一个整数值，表示新的一天 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="hour">一个整数值表示的小时部分新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="minute">一个整数值表示时间的分钟数新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="second">一个整数值表示的第二个新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="bilisecond">一个整数值表示毫第二个） 的新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.Add(System.Data.SqlTypes.SqlDateTime,System.TimeSpan)">
      <summary>添加 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 到指定 TimeSpan。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 值。</param>
      <param name="t">一个 Timespan 值。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.CompareTo(System.Data.SqlTypes.SqlDateTime)">
      <summary>比较此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 与所提供的结构 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构，并返回对其相对值的指示。</summary>
      <param name="value">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构进行比较。</param>
      <returns>一个有符号的数字，指示实例和对象的相对值。返回值 条件 小于零 此实例小于 <see cref="T:System.Data.SqlTypes.SqlDateTime" />。零 此实例与 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 相同。大于零 此实例大于 <see cref="T:System.Data.SqlTypes.SqlDateTime" />- 或 - <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 为空引用 (Nothing 在 Visual Basic 中) </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.CompareTo(System.Object)">
      <summary>比较此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 与所提供的结构 <see cref="T:System.Object" /> 并返回对其相对值的指示。</summary>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <returns>一个有符号的数字，指示实例和对象的相对值。返回值 条件 小于零 此实例是早于该对象。零 此实例与对象相同。大于零 此实例大于对象 - 或 - 该对象为空引用 (Nothing 为 Visual Basic)。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.Equals(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构以确定它们是否相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <returns>true 如果两个值是否相等。 否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.Equals(System.Object)">
      <summary>将提供的对象参数 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 对象。</summary>
      <param name="value">要比较的对象。</param>
      <returns>true 如果对象的实例 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 安全以及需要两个相等; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.GetHashCode">
      <summary>获取此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>一个 string 值，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.GreaterThan(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 以确定第一个是否大于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.GreaterThanOrEqual(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 以确定第一个是否大于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.LessThan(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 以确定第一个是否小于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.LessThanOrEqual(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 以确定第一个是否小于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.NotEquals(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>执行逻辑比较的两个实例 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 以确定它们是否不相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Addition(System.Data.SqlTypes.SqlDateTime,System.TimeSpan)">
      <summary>添加由所提供的时间内 <see cref="T:System.TimeSpan" /> 参数， <paramref name="t" />, ，与所提供 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="t">一个 <see cref="T:System.TimeSpan" /> 结构。</param>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDateTime" />。 如果任一参数为 <see cref="F:System.Data.SqlTypes.SqlDateTime.Null" />, ，新 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 是 <see cref="F:System.Data.SqlTypes.SqlDateTime.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Equality(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构以确定它们是否相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <returns>true 如果两个值是否相等。 否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Explicit(System.Data.SqlTypes.SqlDateTime)~System.DateTime">
      <summary>将转换 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构 <see cref="T:System.DateTime" /> 结构。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <returns>一个 <see cref="T:System.DateTime" /> 对象，其 <see cref="P:System.DateTime.Date" /> 和 <see cref="P:System.DateTime.TimeOfDay" /> 属性包含相同的日期和时间值 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 属性所提供的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlDateTime">
      <summary>将转换 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数 <see cref="T:System.Data.SqlTypes.SqlDateTime" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 等于的日期和时间，由表示 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数。 如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 为 null， Value 新创建的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构将为 null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_GreaterThan(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 以确定第一个是否大于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 以确定第一个是否大于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Implicit(System.DateTime)~System.Data.SqlTypes.SqlDateTime">
      <summary>将转换 <see cref="T:System.DateTime" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</summary>
      <param name="value">一个 DateTime 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 是否等同于合并 <see cref="P:System.DateTime.Date" /> 和 <see cref="P:System.DateTime.TimeOfDay" /> 属性所提供的 <see cref="T:System.DateTime" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Inequality(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>执行逻辑比较的两个实例 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 以确定它们是否不相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_LessThan(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 以确定第一个是否小于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_LessThanOrEqual(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 以确定第一个是否小于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Subtraction(System.Data.SqlTypes.SqlDateTime,System.TimeSpan)">
      <summary>中减去提供 <see cref="T:System.TimeSpan" /> 结构， <paramref name="t" />, ，所提供的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="t">一个 <see cref="T:System.TimeSpan" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构，它表示减法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.Parse(System.String)">
      <summary>将指定 <see cref="T:System.String" /> 日期和时间表示形式及其 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 等效。</summary>
      <param name="s">string 要进行分析。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构等于的日期和时间指定表示 string。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.Subtract(System.Data.SqlTypes.SqlDateTime,System.TimeSpan)">
      <summary>中减去指定 Timespan 从此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 实例。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 值。</param>
      <param name="t">一个 Timespan 值。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <returns>一个 XmlSchema。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="reader">XmlReader </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="writer">XmlWriter </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.ToSqlString">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 SqlString 其值是一个字符串，表示日期和时间的结构是否包含在此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.ToString">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构 <see cref="T:System.String" />。</summary>
      <returns>一个 String 表示 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Byte,System.Byte,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，使用提供的参数。</summary>
      <param name="bPrecision">最大数字位数，可以用于以表示 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性的新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="bScale">小数位数数 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性将解析为新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="fPositive">一个布尔值，该值指示是否新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构表示正数或负数。</param>
      <param name="data1">一个 32 位无符号的整数，它将结合 data2、 data3 和 data4 以组成的 128 位无符号整数，表示新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构值。</param>
      <param name="data2">一个 32 位无符号的整数，它将结合 data1、 data3 和 data4 以组成的 128 位无符号整数，表示新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构值。</param>
      <param name="data3">一个 32 位无符号的整数，它将结合 data1、 data2 和 data4 以组成的 128 位无符号整数，表示新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构值。</param>
      <param name="data4">一个 32 位无符号的整数，它将结合 data1、 data2 和 data3 以组成的 128 位无符号整数，表示新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Byte,System.Byte,System.Boolean,System.Int32[])">
      <summary>新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，使用提供的参数。</summary>
      <param name="bPrecision">最大数字位数，可以用于以表示 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性的新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="bScale">小数位数数 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性将解析为新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="fPositive">一个布尔值，该值指示是否新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构表示正数或负数。</param>
      <param name="bits">提供的新值的 128 位无符号的整数 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Decimal)">
      <summary>新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，使用所提供 <see cref="T:System.Decimal" /> 值。</summary>
      <param name="value">
        <see cref="T:System.Decimal" /> 值存储为 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Double)">
      <summary>新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，使用提供的双精度型参数。</summary>
      <param name="dVal">双精度，这表示的值为新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，使用提供的整数值。</summary>
      <param name="value">提供的整数值，它将用作新值 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Int64)">
      <summary>新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，使用提供的长整型值。</summary>
      <param name="value">提供的长整型值，它将用作新值 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Abs(System.Data.SqlTypes.SqlDecimal)">
      <summary>Abs 方法获取数值的绝对值 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数。</summary>
      <param name="n">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性包含该无符号的数值表示数值的绝对值 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Add(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>计算两个总和 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 运算符。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性包含的总和。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.AdjustScale(System.Data.SqlTypes.SqlDecimal,System.Int32,System.Boolean)">
      <summary>小数位数为 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数将调整为数字参数指示的数字个数。 根据 fRound 参数的值，值将被舍入到相应的数字或截断。</summary>
      <param name="n">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构来进行调整。</param>
      <param name="digits">调整后的结构中的数字个数。</param>
      <param name="fRound">如果此参数为 true, ，新值将舍入，如果 false, ，则该值将被截断。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性包含调整后的数字。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Ceiling(System.Data.SqlTypes.SqlDecimal)">
      <summary>返回大于或等于指定的最小整数 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</summary>
      <param name="n">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构为其上限值进行计算。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 表示最小整数大于或等于指定 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.CompareTo(System.Data.SqlTypes.SqlDecimal)">
      <summary>比较此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 实例与所提供 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 对象并返回对其相对值的指示。</summary>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</param>
      <returns>一个有符号的数字，指示实例和对象的相对值。返回值 条件 小于零 此实例是早于该对象。零 此实例与对象相同。大于零 此实例大于对象 - 或 - 该对象为空引用 (Nothing 在 Visual Basic 中) </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.CompareTo(System.Object)">
      <summary>比较此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 实例与所提供 <see cref="T:System.Object" /> 并返回对其相对值的指示。</summary>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <returns>一个有符号的数字，指示实例和对象的相对值。返回值 条件 小于零 此实例是早于该对象。零 此实例与对象相同。大于零 此实例大于对象 - 或 - 该对象为空引用 (Nothing 在 Visual Basic 中) </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ConvertToPrecScale(System.Data.SqlTypes.SqlDecimal,System.Int32,System.Int32)">
      <summary>值调整 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数指定的精度和小数位数。</summary>
      <param name="n">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，其值进行调整。</param>
      <param name="precision">新的精度 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="scale">新的小数位数 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数中指定其值已调整到的精度和小数位数的结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Divide(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>除法运算符计算除以第一个结果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数除以第二个操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性包含除法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Equals(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数以确定它们是否相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>true 如果两个值是否相等。 否则为 false。 如果任一实例为 null、 的值 SqlDecimal 将为 null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Equals(System.Object)">
      <summary>比较提供 <see cref="T:System.Object" /> 参数 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 实例。</summary>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <returns>true 如果对象的实例 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 和两个是否相等。 否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Floor(System.Data.SqlTypes.SqlDecimal)">
      <summary>指定将舍入 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 数字到下一个较小的整数。</summary>
      <param name="n">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 为其最小值是要计算的结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，其中包含此的整数部分 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>一个 string 值，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.GreaterThan(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，以确定第一个是否大于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.GreaterThanOrEqual(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数，以确定第一个是否大于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.LessThan(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构以确定第一个是否小于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.LessThanOrEqual(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Multiply(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>乘法运算符计算这两个产品 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性包含相乘的积。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.NotEquals(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数，以确定它们是否不相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Addition(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>计算两个总和 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 运算符。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性包含的总和。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Division(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>除法运算符计算除以第一个结果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数除以第二个操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性包含除法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Equality(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数以确定它们是否相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 两个实例是否相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 如果两个实例是否不相等。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlDecimal">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 是否等同于 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Decimal">
      <summary>将转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数 <see cref="T:System.Decimal" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个新 Decimal 结构，其值等于 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlDecimal">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 等于 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlDecimal">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlDecimal">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" /> 要转换对象。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 等于所表示的值 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Double)~System.Data.SqlTypes.SqlDecimal">
      <summary>将转换 <see cref="T:System.Double" /> 参数 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Double" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，其值等于值的 <see cref="T:System.Double" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_GreaterThan(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，以确定第一个是否大于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数，以确定第一个是否大于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlDecimal">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlDecimal">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 到结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" /></summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlDecimal">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性等同于 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlDecimal">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlInt64" /> SqlDecimal 的结构。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 等于 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlDecimal">
      <summary>将转换 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 操作数 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 等于 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Decimal)~System.Data.SqlTypes.SqlDecimal">
      <summary>将转换 <see cref="T:System.Decimal" /> 值赋给 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <param name="x">
        <see cref="T:System.Decimal" /> 要转换的值。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性等于的值 Decimal 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Int64)~System.Data.SqlTypes.SqlDecimal">
      <summary>将转换提供 <see cref="T:System.Int64" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Int64" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性等于的值 <see cref="T:System.Int64" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Inequality(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数，以确定它们是否不相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_LessThan(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构以确定第一个是否小于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_LessThanOrEqual(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Multiply(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>乘法运算符计算这两个产品 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性包含相乘的积。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Subtraction(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>计算的结果中减去第二个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 从第一个操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，其 Value 属性包含该减法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_UnaryNegation(System.Data.SqlTypes.SqlDecimal)">
      <summary>一元减运算符求反 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 要求反的结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，其值包含求反的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Parse(System.String)">
      <summary>将转换 <see cref="T:System.String" /> 到数字表示形式及其 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 等效。</summary>
      <param name="s">String 要进行分析。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 等效于包含的值中指定 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Power(System.Data.SqlTypes.SqlDecimal,System.Double)">
      <summary>引发指定的值 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的指定指数幂。</summary>
      <param name="n">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 要乘幂的结构。</param>
      <param name="exp">双精度值，该值指示数应乘到其中的幂。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它包含的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Round(System.Data.SqlTypes.SqlDecimal,System.Int32)">
      <summary>获取最接近指定的数字 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值与指定的精度。</summary>
      <param name="n">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构要舍入。</param>
      <param name="position">返回值中的有效小数位数 （精度） 数。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，其中包含舍入运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Sign(System.Data.SqlTypes.SqlDecimal)">
      <summary>获取一个值，表示的符号 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性。</summary>
      <param name="n">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 其符号的计算结果的结构。</param>
      <returns>一个数字，指示的符号 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Subtract(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>计算的结果中减去第二个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 从第一个操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，其 Value 属性包含该减法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <returns>一个 XmlSchema。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="reader">XmlReader </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="writer">XmlWriter </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToDouble">
      <summary>返回的内容的双精度等于 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 的此实例的属性。</summary>
      <returns>十进制表示形式 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlBoolean">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>true 如果 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 为非零; false 如果零; 否则为 Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlByte">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 Value 等于 Value 此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。 如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值是 true, 、 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的 Value 将为 1。 否则为 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的 Value 将为 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlDouble">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 具有与此实例相同的值结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlInt16">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 具有与此实例相同的值结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlInt32">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 具有与此实例相同的值结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlInt64">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 具有与此实例相同的值结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlMoney">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 具有与此实例相同的值结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlSingle">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 具有与此实例相同的值结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlString">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构，其值一个字符串，表示在此所包含的值 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToString">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构 <see cref="T:System.String" />。</summary>
      <returns>一个新 <see cref="T:System.String" /> 对象，其中包含的字符串表示形式 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Truncate(System.Data.SqlTypes.SqlDecimal,System.Int32)">
      <summary>将截断指定 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值与您希望的位置。</summary>
      <param name="n">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构被截断。</param>
      <param name="position">数字将被截断的十进制位置。</param>
      <returns>提供一个负值 <paramref name="position" /> 为了截断到小数点左侧的相应位置的值的参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.#ctor(System.Double)">
      <summary>新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构提供的双精度型参数用于设置新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 属性。</summary>
      <param name="value">一个双精度值，其值将用于新 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Add(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>加法运算符计算这两个和 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>这两个 sum <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.CompareTo(System.Data.SqlTypes.SqlDouble)">
      <summary>比较此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 实例与所提供 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 并返回对其相对值的指示。</summary>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</param>
      <returns>一个有符号的数字，指示实例和对象的相对值。返回值 条件 小于零 此实例是早于该对象。零 此实例与对象相同。大于零 此实例大于对象 - 或 - 该对象为空引用 (Nothing 在 Visual Basic 中) </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.CompareTo(System.Object)">
      <summary>比较此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 实例与所提供 <see cref="T:System.Object" /> 并返回对其相对值的指示。</summary>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <returns>一个有符号的数字，指示实例和对象的相对值。返回值 条件 小于零 此实例是早于该对象。零 此实例与对象相同。大于零 此实例大于对象 - 或 - 该对象为空引用 (Nothing 在 Visual Basic 中)。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Divide(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>除法运算符将第一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数除以第二个操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，其中包含除法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Equals(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>对两个实例执行逻辑比较 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 以确定它们是否相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>true 如果两个值是否相等。 否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Equals(System.Object)">
      <summary>将提供的对象参数 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 对象。</summary>
      <param name="value">要比较的对象。</param>
      <returns>true 如果两个值是否相等。 否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.GetHashCode">
      <summary>返回此哈希代码 <see cref="T:System.Data.SqlTypes.SqlDouble" /> structre。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      <param name="schemaSet">一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>一个 string 值，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.GreaterThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 以确定第一个是否大于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.GreaterThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 以确定第一个是否大于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.LessThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 以确定第一个是否小于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.LessThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 以确定第一个是否小于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Multiply(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>乘法运算符计算这两个产品 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>这两个产品 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.NotEquals(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 以确定它们是否不等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Addition(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>加法运算符计算这两个和 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>这两个 sum <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Division(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>除法运算符将第一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数除以第二个操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，其中包含除法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Equality(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>对两个实例执行逻辑比较 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 以确定它们是否相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>true 如果两个值是否相等。 否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlDouble">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 是 0 或 1，具体取决于 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 属性 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数。 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 是 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />, 、 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Double">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 为双精度值的结构。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>Double 等效于指定 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlDouble">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 其 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 等于所表示的数字的值 <see cref="T:System.Data.SqlTypes.SqlString" />。 如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 是 <see cref="F:System.Data.SqlTypes.SqlString.Null" />, 、 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_GreaterThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 以确定第一个是否大于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 以确定第一个是否大于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlDouble">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 是否等同于 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数。 如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 是 <see cref="F:System.Data.SqlTypes.SqlByte.Null" />, 、 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlDouble">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 是否等同于 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数。 如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 是 <see cref="F:System.Data.SqlTypes.SqlDecimal.Null" />, 、 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlDouble">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 是否等同于 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数。 如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 是 <see cref="F:System.Data.SqlTypes.SqlInt16.Null" />, 、 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlDouble">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 其 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 是否等同于 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数。 如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 是 <see cref="F:System.Data.SqlTypes.SqlInt32.Null" />, 、 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlDouble">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 其 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 是否等同于 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数。 如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 是 <see cref="F:System.Data.SqlTypes.SqlInt64.Null" />, 、 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlDouble">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 其 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 是否等同于 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数。 如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 是 <see cref="F:System.Data.SqlTypes.SqlMoney.Null" />, 、 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlDouble">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 是否等同于 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数。 如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 是 <see cref="F:System.Data.SqlTypes.SqlSingle.Null" />, 、 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Double)~System.Data.SqlTypes.SqlDouble">
      <summary>将转换为所提供的双精度值 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <param name="x">要转换的双精度值。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 与指定的双精度型参数的值相同。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Inequality(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 以确定它们是否不相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_LessThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 以确定第一个是否小于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_LessThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 以确定第一个是否小于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Multiply(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>乘法运算符计算这两个产品 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>这两个产品 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Subtraction(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>减法运算符第二个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 从第一个操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>减法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_UnaryNegation(System.Data.SqlTypes.SqlDouble)">
      <summary>返回求反后的指定值 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，其中包含的相反的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Parse(System.String)">
      <summary>将转换 <see cref="T:System.String" /> 为它的等效双精度浮点数的数字表示形式。</summary>
      <param name="s">String 要进行分析。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> ，其中包含所表示的值 String。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Subtract(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>减法运算符第二个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 从第一个操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>减法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <returns>使用.NET Framework 的 XML 架构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlBoolean">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>一个 SqlBoolean 结构，它的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 为非零 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 为零和 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" /> 如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构是 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlByte">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 SqlByte 结构，它的 Value 等于 Value 此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlDecimal">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个新 SqlDecimal 它的已转换的值等于此舍入的值的结构 SqlDouble。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlInt16">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 Value 等于的整数部分 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlInt32">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 Value 等于的整数部分 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlInt64">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 Value 等于的整数部分 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlMoney">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新 SqlMoney 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 是否等于此值 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlSingle">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新 SqlSingle 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 是否等同于 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 此 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlString">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 SqlString 表示 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 此 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToString">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 为字符串的结构。</summary>
      <returns>一个字符串，表示 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 此 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlFileStream.#ctor(System.String,System.Byte[],System.IO.FileAccess)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlFileStream" /> 类的新实例。</summary>
      <param name="path">文件的逻辑路径。 可以通过使用表中基础 FILESTREAM 列中的 Transact-SQL Pathname 函数检索路径。</param>
      <param name="transactionContext">SqlFileStream 对象的事务上下文。 应用程序应返回通过调用 GET_FILESTREAM_TRANSACTION_CONTEXT 方法返回的字节数组。</param>
      <param name="access">打开文件时要使用的访问模式。 支持的 <see cref="T:System.IO.FileAccess" /> 枚举值为 <see cref="F:System.IO.FileAccess.Read" />、<see cref="F:System.IO.FileAccess.Write" /> 和 <see cref="F:System.IO.FileAccess.ReadWrite" />。当使用 FileAccess.Read 时，SqlFileStream 对象可以用于读取所有现有数据。当使用 FileAccess.Write 时，SqlFileStream 指向零字节文件。 当关闭对象并提交事务时，会覆盖现有数据。当使用 FileAccess.ReadWrite 时，SqlFileStream 指向其中包含所有现有数据的文件。 句柄位于文件的开头。 可以使用 System.IOSeek 方法之一在文件内移动句柄位置，以写入或追加新数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 为 null 引用，或者，<paramref name="transactionContext" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="path" /> 是一个空字符串 ("")，仅包含空格，或者包含一个或多个无效字符。<paramref name="path" /> 以“\\.\”开头，例如“\\.\PHYSICALDRIVE0”。通过调用 NTCreateFile 返回的句柄不属于类型 FILE_TYPE_DISK。<paramref name="options" /> 包含不支持的值。</exception>
      <exception cref="T:System.IO.FileNotFoundException">无法找到该文件。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的 <paramref name="path" /> 无效，例如在非映射驱动器上。</exception>
      <exception cref="T:System.UnauthorizedAccessException">指定的路径所对应的操作系统不允许请求的访问。 当指定 Write 或 ReadWrite 访问时发生这种情况，并且文件或目录设置为只读访问。</exception>
      <exception cref="T:System.InvalidOperationException">NtCreateFile 失败，并且错误代码设置为 ERROR_SHARING_VIOLATION。</exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlFileStream.#ctor(System.String,System.Byte[],System.IO.FileAccess,System.IO.FileOptions,System.Int64)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlFileStream" /> 类的新实例。</summary>
      <param name="path">文件的逻辑路径。 可以通过使用表中基础 FILESTREAM 列中的 Transact-SQL Pathname 函数检索路径。</param>
      <param name="transactionContext">SqlFileStream 对象的事务上下文。 当设置为 null 时，隐式事务将用于 SqlFileStream 对象。 应用程序应返回通过调用 GET_FILESTREAM_TRANSACTION_CONTEXT 方法返回的字节数组。</param>
      <param name="access">打开文件时要使用的访问模式。 支持的 <see cref="T:System.IO.FileAccess" /> 枚举值为 <see cref="F:System.IO.FileAccess.Read" />、<see cref="F:System.IO.FileAccess.Write" /> 和 <see cref="F:System.IO.FileAccess.ReadWrite" />。当使用 FileAccess.Read 时，SqlFileStream 对象可以用于读取所有现有数据。当使用 FileAccess.Write 时，SqlFileStream 指向零字节文件。 当关闭对象并提交事务时，会覆盖现有数据。当使用 FileAccess.ReadWrite 时，SqlFileStream 指向其中包含所有现有数据的文件。 句柄位于文件的开头。 可以使用 System.IOSeek 方法之一在文件内移动句柄位置，以写入或追加新数据。</param>
      <param name="options">指定打开文件时要使用的选项。 支持 <see cref="T:System.IO.FileOptions" /> 的值为 <see cref="F:System.IO.FileOptions.Asynchronous" />, ，<see cref="F:System.IO.FileOptions.WriteThrough" />, ，<see cref="F:System.IO.FileOptions.SequentialScan" />, ，和 <see cref="F:System.IO.FileOptions.RandomAccess" />。</param>
      <param name="allocationSize">创建文件时要使用的分配大小。 如果设置为 0，则使用默认值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 为 null 引用，或者，<paramref name="transactionContext" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="path" /> 是一个空字符串 ("")，仅包含空格，或者包含一个或多个无效字符。<paramref name="path" /> 以“\\.\”开头，例如“\\.\PHYSICALDRIVE0”。通过调用 NTCreateFile 返回的句柄不属于类型 FILE_TYPE_DISK。<paramref name="options" /> 包含不支持的值。</exception>
      <exception cref="T:System.IO.FileNotFoundException">无法找到该文件。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的 <paramref name="path" /> 无效，例如在非映射驱动器上。</exception>
      <exception cref="T:System.UnauthorizedAccessException">指定的路径所对应的操作系统不允许请求的访问。 当指定 Write 或 ReadWrite 访问时发生这种情况，并且文件或目录设置为只读访问。</exception>
      <exception cref="T:System.InvalidOperationException">NtCreateFile 失败，并且错误代码设置为 ERROR_SHARING_VIOLATION。</exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlFileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始异步读操作。</summary>
      <param name="buffer">数据读入的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的字节偏移量，从该偏移量开始写入从流中读取的数据。</param>
      <param name="count">最多读取的字节数。</param>
      <param name="callback">可选的异步回调，在完成读取时调用。</param>
      <param name="state">一个用户提供的对象，它将此特定的异步读取请求与其他请求区别开来</param>
      <returns>表示异步读取的 <see cref="T:System.IAsyncResult" />（可能仍处于挂起状态）。</returns>
      <exception cref="T:System.NotSupportedException">不支持在流上读取数据。</exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlFileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始异步写操作。</summary>
      <param name="buffer">从中写入数据的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的字节偏移量，从此处开始写入。</param>
      <param name="count">最多写入的字节数。</param>
      <param name="callback">可选的异步回调，在完成写入时调用。</param>
      <param name="state">一个用户提供的对象，它将该特定的异步写入请求与其他请求区别开来。</param>
      <returns>表示异步写入的 <see cref="T:System.IAsyncResult" />（可能仍处于挂起状态）。</returns>
      <exception cref="T:System.NotSupportedException">该流不支持写入数据。</exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlFileStream.EndRead(System.IAsyncResult)">
      <summary>等待挂起的异步读取完成。</summary>
      <param name="asyncResult">对要完成的挂起异步请求的引用。</param>
      <returns>从流中读取的字节数，介于零 (0) 和所请求的字节数之间。 流仅在流结尾返回零 (0)，否则在至少有 1 个字节可用之前应一直进行阻止。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.IAsyncResult" /> 对象并非来自相应的 BeginRead 方法。</exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlFileStream.EndWrite(System.IAsyncResult)">
      <summary>结束异步写操作。</summary>
      <param name="asyncResult">对未完成的异步 I/O 请求的引用。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.IAsyncResult" /> 对象并非来自相应的 BeginWrite 方法。</exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlFileStream.Finalize">
      <summary>确保垃圾回收器回收 <see cref="T:System.Data.SqlTypes.SqlFileStream" /> 时释放资源并执行其他清理操作。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlFileStream.Flush">
      <summary>清除此流的所有缓冲区并导致所有缓冲数据都写入基础设备中。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlFileStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>从当前流读取字节序列，并将流中的位置向前移动读取的字节数。</summary>
      <param name="buffer">字节数组。 此方法返回时，该缓冲区包含指定的字节数组，该数组的偏移量和（偏移量 + 计数 - 1）之间的值由从当前源中读取的字节替换。</param>
      <param name="offset">缓冲区中从零开始的字节偏移量，从此处开始存储从当前流中读取的数据。</param>
      <param name="count">要从当前流中最多读取的字节数。</param>
      <returns>读入缓冲区中的总字节数。 如果很多字节当前不可用，则总字节数可能小于请求的字节数；如果已到达流结尾，则为零 (0)。</returns>
      <exception cref="T:System.NotSupportedException">对象不支持数据读取。</exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlFileStream.ReadByte">
      <summary>从流中读取一个字节，并将流内的位置向前提升一个字节，或者如果已到达流结尾，则返回 -1。</summary>
      <returns>强制转换为 <see cref="T:System.Int32" /> 的无符号字节，如果到达流的末尾，则为 -1。</returns>
      <exception cref="T:System.NotSupportedException">对象不支持数据读取。</exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>设置当前流中的位置。</summary>
      <param name="offset">相对于 <paramref name="origin" /> 参数的字节偏移量</param>
      <param name="origin">
        <see cref="T:System.IO.SeekOrigin" /> 类型的值，指示用于获取新位置的参考点</param>
      <returns>当前流中的新位置。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlFileStream.SetLength(System.Int64)">
      <summary>设置当前流的长度。</summary>
      <param name="value">所需的当前流的长度（以字节表示）。</param>
      <exception cref="T:System.NotSupportedException">对象不支持数据读取。</exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlFileStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>将字节序列写入当前流，并按写入的字节数向前调整流的当前位置。</summary>
      <param name="buffer">字节数组。 此方法将 <paramref name="count" /> 个字节从 <paramref name="buffer" /> 复制到当前流。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的从零开始的字节偏移量，从此处开始将字节复制到当前流。</param>
      <param name="count">要写入当前流的字节数。</param>
      <exception cref="T:System.NotSupportedException">对象不支持数据写入。</exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlFileStream.WriteByte(System.Byte)">
      <summary>将一个字节写入流内的当前位置，并将流内的位置向前提升一个字节。</summary>
      <param name="value">要写入流中的字节。</param>
      <exception cref="T:System.NotSupportedException">对象不支持数据写入。</exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.#ctor(System.Byte[])">
      <summary>新实例初始化 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构，使用提供的字节数组参数。</summary>
      <param name="value">字节数组。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.#ctor(System.Guid)">
      <summary>新实例初始化 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构，使用指定 <see cref="T:System.Guid" /> 参数。</summary>
      <param name="g">一个 <see cref="T:System.Guid" /></param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>新实例初始化 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构，使用指定的值。</summary>
      <param name="a">前四个字节的 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</param>
      <param name="b">接下来的两个字节的 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</param>
      <param name="c">接下来的两个字节的 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</param>
      <param name="d">下一个字节 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</param>
      <param name="e">下一个字节 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</param>
      <param name="f">下一个字节 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</param>
      <param name="g">下一个字节 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</param>
      <param name="h">下一个字节 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</param>
      <param name="i">下一个字节 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</param>
      <param name="j">下一个字节 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</param>
      <param name="k">下一个字节 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构，使用指定 <see cref="T:System.String" /> 参数。</summary>
      <param name="s">一个 <see cref="T:System.String" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.CompareTo(System.Data.SqlTypes.SqlGuid)">
      <summary>比较此 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 与所提供的结构 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 并返回对其相对值的指示。 比较多个最后 6 个字节，但将视为最重要的比较中的最后 6 个字节。</summary>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</param>
      <returns>一个有符号的数字，指示实例和对象的相对值。返回值 条件 小于零 此实例小于对象。零 此实例与对象相同。大于零 此实例大于对象 - 或 - 对象为 null 引用 (Nothing)。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.CompareTo(System.Object)">
      <summary>比较此 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构与所提供的对象并返回对其相对值的指示。 比较多个最后 6 个字节，但将视为最重要的比较中的最后 6 个字节。</summary>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <returns>一个有符号的数字，指示实例和对象的相对值。返回值 条件 小于零 此实例小于对象。零 此实例与对象相同。大于零 此实例大于对象 - 或 - 对象为 null 引用 (Nothing) </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.Equals(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构以确定它们是否相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <returns>true 如果两个值是否相等。 否则为 false。 如果任一实例为 null，则 SqlGuid 将为 null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.Equals(System.Object)">
      <summary>将提供的对象参数 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 对象。</summary>
      <param name="value">要比较的对象。</param>
      <returns>true 如果对象的实例 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 安全以及需要两个相等; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.GetHashCode">
      <summary>返回此哈希代码 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>一个 string 值，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.GreaterThan(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 以确定第一个是否大于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.GreaterThanOrEqual(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 以确定第一个是否大于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.LessThan(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 以确定第一个是否小于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.LessThanOrEqual(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 以确定第一个是否小于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.NotEquals(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>对两个执行逻辑比较 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构以确定它们是否不相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Equality(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构以确定它们是否相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 两个实例是否相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 如果两个实例是否不相等。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Explicit(System.Data.SqlTypes.SqlBinary)~System.Data.SqlTypes.SqlGuid">
      <summary>将转换 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 参数 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</summary>
      <param name="x">一个 SqlBinary 对象。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 其 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 是否等同于 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Explicit(System.Data.SqlTypes.SqlGuid)~System.Guid">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 参数 <see cref="T:System.Guid" />。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Guid" /> 等于 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlGuid">
      <summary>将指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 其 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 等于所表示的值 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_GreaterThan(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 以确定第一个是否大于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 以确定第一个是否大于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Implicit(System.Guid)~System.Data.SqlTypes.SqlGuid">
      <summary>将转换提供 <see cref="T:System.Guid" /> 参数 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</summary>
      <param name="x">
        <see cref="T:System.Guid" />。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 其 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 是否等同于 <see cref="T:System.Guid" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Inequality(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>对两个执行逻辑比较 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构以确定它们是否不相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_LessThan(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 以确定第一个是否小于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_LessThanOrEqual(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 以确定第一个是否小于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.Parse(System.String)">
      <summary>将指定 <see cref="T:System.String" /> 结构 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</summary>
      <param name="s">String 要进行分析。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 等效于包含的值中指定 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <returns>一个 XmlSchema。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="reader">XmlReader </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="writer">XmlWriter </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.ToByteArray">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 到字节数组的结构。</summary>
      <returns>表示的字节数组 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 此 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.ToSqlBinary">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构 <see cref="T:System.Data.SqlTypes.SqlBinary" />。</summary>
      <returns>一个 SqlBinary 结构，其中包含的字节数 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.ToSqlString">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构，其中包含的字符串表示形式 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.ToString">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构 <see cref="T:System.String" />。</summary>
      <returns>一个 <see cref="T:System.String" /> ，其中包含的字符串表示形式 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.#ctor(System.Int16)">
      <summary>新实例初始化 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，使用提供的短整型参数。</summary>
      <param name="value">短整数。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Add(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>计算两个和 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含两个和 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.BitwiseAnd(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>计算的按位 AND 其 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含结果的按位 and。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.BitwiseOr(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>计算其两个的按位 OR <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含位或运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.CompareTo(System.Data.SqlTypes.SqlInt16)">
      <summary>比较此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 实例与所提供 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 并返回对其相对值的指示。</summary>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</param>
      <returns>一个有符号的数字，指示实例和对象的相对值。返回值 条件 小于零 此实例是早于该对象。零 此实例与对象相同。大于零 此实例大于对象 - 或 - 该对象为空引用 (Nothing 在 Visual Basic 中) </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.CompareTo(System.Object)">
      <summary>比较此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 实例与所提供 <see cref="T:System.Object" /> 并返回对其相对值的指示。</summary>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <returns>一个有符号的数字，指示实例和对象的相对值。返回值 条件 小于零 此实例是早于该对象。零 此实例与对象相同。大于零 此实例大于对象 - 或 - 对象为 null 引用 (Nothing 在 Visual Basic 中) </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Divide(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>将第一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数除以第二个操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 其 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含除法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Equals(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构以确定它们是否相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>true 如果两个值是否相等。 否则为 false。 如果任一实例为 null，则 SqlInt16 将为 null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Equals(System.Object)">
      <summary>比较指定的对象和 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 对象。</summary>
      <param name="value">要比较的对象。</param>
      <returns>true 如果对象的实例 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 安全以及需要两个相等; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      <param name="schemaSet">一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>一个 <see cref="T:System.String" /> 值，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.GreaterThan(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 以确定第一个是否大于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.GreaterThanOrEqual(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，以确定第一个是否大于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.LessThan(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 以确定第一个是否小于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.LessThanOrEqual(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构以确定第一个是否小于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Mod(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>计算其第一个相除的余数 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数除以第二个操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 包含其余部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Modulus(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>将两个划分 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 值并返回余数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 值。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 值。</param>
      <returns>得到的余数后在执行除法运算 <paramref name="x" /> 和 <paramref name="y" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Multiply(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>计算两个产品 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 包含两个参数的乘积。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.NotEquals(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构以确定它们是否不相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.OnesComplement(System.Data.SqlTypes.SqlInt16)">
      <summary>~ 运算符都将执行按位二进制反码运算上其 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含指定的求补 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Addition(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>计算两个和 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含两个和 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_BitwiseAnd(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>计算的按位 AND 其 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含结果的按位 and。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_BitwiseOr(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>计算其两个的按位 OR <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含位或运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Division(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>将第一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数除以第二个操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 其 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含除法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Equality(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构以确定它们是否相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 两个实例是否相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 如果两个实例是否不相等。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_ExclusiveOr(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>执行按位异或运算对提供的参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含按位异或结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlInt16">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性等同于 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 属性 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlInt16">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性等同于 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlInt16">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性是否等于的整数部分 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Int16">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 短整数的结构。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>其值为值的短整型的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlInt16">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性等同于 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 所提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlInt16">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性等同于 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlInt16">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性等同于 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlInt16">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性是否等于的整数部分 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlInt16">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象传递给 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性是否等于所表示的值 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_GreaterThan(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 以确定第一个是否大于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，以确定第一个是否大于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlInt16">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性等同于 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Implicit(System.Int16)~System.Data.SqlTypes.SqlInt16">
      <summary>将转换为提供的短整型 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <param name="x">一个短整数值。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构具有相同的值指定的短整数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Inequality(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构以确定它们是否不相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_LessThan(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 以确定第一个是否小于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_LessThanOrEqual(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构以确定第一个是否小于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Modulus(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>计算其第一个相除的余数 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数除以第二个操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 包含其余部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Multiply(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>计算两个产品 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 包含两个参数的乘积。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_OnesComplement(System.Data.SqlTypes.SqlInt16)">
      <summary>~ 运算符都将执行按位二进制反码运算上其 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含指定的求补 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Subtraction(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>值中减去第二个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 从第一个参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含该减法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_UnaryNegation(System.Data.SqlTypes.SqlInt16)">
      <summary>一元减运算符求反 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，其中包含的相反的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Parse(System.String)">
      <summary>将转换 <see cref="T:System.String" /> 为其等效的 16 位有符号整数的数字表示形式。</summary>
      <param name="s">String 要进行分析。</param>
      <returns>包含的值等效的 16 位有符号的整数指定 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Subtract(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>值中减去第二个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 从第一个参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含该减法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <returns>使用.NET Framework 的 XML 架构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="reader">XmlReader </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="writer">XmlWriter </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlBoolean">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>true 如果 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 为非零; false 如果零; 否则为 Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlByte">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 等于 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。 如果值 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 小于 0 或大于 255， <see cref="T:System.OverflowException" /> 时发生。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlDecimal">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 Value 等于此值 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlDouble">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，它的 Value 等于此值 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlInt32">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 Value 等于此值 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlInt64">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 Value 等于此值 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlMoney">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 Value 等于此值 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlSingle">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 Value 等于此值 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlString">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 表示 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 的此实例的 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToString">
      <summary>将转换 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构 <see cref="T:System.String" />。</summary>
      <returns>一个 <see cref="T:System.String" /> 对象，表示 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 的此实例的 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Xor(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>执行按位异或运算对提供的参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，其中包含异或运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.#ctor(System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，使用提供的整数值。</summary>
      <param name="value">要转换的整数。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Add(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>计算两个指定的和 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性包含指定的总和 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.BitwiseAnd(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>计算的按位 AND 其 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，其中包含按位与运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.BitwiseOr(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>计算指定的按位 OR <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，其中包含按位或运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.CompareTo(System.Data.SqlTypes.SqlInt32)">
      <summary>比较此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 实例与所提供 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 并返回对其相对值的指示。</summary>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</param>
      <returns>一个有符号的数字，指示实例和对象的相对值。返回值 条件 小于零 此实例是早于该对象。零 此实例与对象相同。大于零 此实例大于对象 - 或 - 该对象为空引用 (Nothing 在 Visual Basic 中) </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.CompareTo(System.Object)">
      <summary>比较此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 实例与所提供 <see cref="T:System.Object" /> 并返回对其相对值的指示。</summary>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <returns>一个有符号的数字，指示实例和对象的相对值。返回值 条件 小于零 此实例是早于该对象。零 此实例与对象相同。大于零 此实例大于对象 - 或 - 该对象为空引用 (Nothing 在 Visual Basic 中)。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Divide(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>将第一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 从第二个参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 其 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性包含除法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Equals(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数，以确定它们是否相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>true 如果两个值是否相等。 否则为 false。 如果任一实例为 null，则 SqlInt32 将为 null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Equals(System.Object)">
      <summary>将提供的对象参数 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 对象。</summary>
      <param name="value">要比较的对象。</param>
      <returns>true 如果对象的实例 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 安全以及需要两个相等; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      <param name="schemaSet">一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>一个 string 值，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.GreaterThan(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数，以确定第一个是否大于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.GreaterThanOrEqual(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数，以确定第一个是否大于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.LessThan(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数，以确定第一个是否小于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.LessThanOrEqual(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数，以确定第一个是否小于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Mod(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>计算第一个相除的余数 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 第二个参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 包含其余部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Modulus(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>将两个划分 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 值并返回余数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 值。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 值。</param>
      <returns>得到的余数后在执行除法运算 <paramref name="x" /> 和 <paramref name="y" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Multiply(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>计算两个产品 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 包含两个参数的乘积。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.NotEquals(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数，以确定它们是否不相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.OnesComplement(System.Data.SqlTypes.SqlInt32)">
      <summary>执行按位二进制反码对指定的运算 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，其中包含求补运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Addition(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>计算两个指定的和 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性包含指定的总和 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_BitwiseAnd(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>计算的按位 AND 其 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，其中包含按位与运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_BitwiseOr(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>计算指定的按位 OR <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，其中包含按位或运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Division(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>将第一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 从第二个参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 其 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性包含除法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Equality(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数，以确定它们是否相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 两个实例是否相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 如果两个实例是否不相等。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_ExclusiveOr(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>执行对指定位异或运算 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，其中包含按位异或运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlInt32">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 到 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性等同于 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 属性 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlInt32">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlInt32">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 到 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性值等于的整数部分 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Int32">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 为整数的结构。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>转换后的整数值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlInt32">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 到 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性 SqlInt64 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlInt32">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlInt32">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 到 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性值等于的整数部分 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlInt32">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象传递给 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性值等于所表示的值 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_GreaterThan(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数，以确定第一个是否大于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数，以确定第一个是否大于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlInt32">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlByte" /> 属性设置为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlInt32">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 到 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Implicit(System.Int32)~System.Data.SqlTypes.SqlInt32">
      <summary>提供将整数转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <param name="x">一个整数值。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 其 Value 属性等同于对整数参数的结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Inequality(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数，以确定它们是否不相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_LessThan(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数，以确定第一个是否小于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_LessThanOrEqual(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数，以确定第一个是否小于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Modulus(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>计算第一个相除的余数 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 第二个参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 包含其余部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Multiply(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>计算两个产品 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 包含两个参数的乘积。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_OnesComplement(System.Data.SqlTypes.SqlInt32)">
      <summary>执行按位二进制反码对指定的运算 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，其中包含求补运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Subtraction(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>值中减去第二个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 从第一个参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性包含该减法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_UnaryNegation(System.Data.SqlTypes.SqlInt32)">
      <summary>求反 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，其中包含的相反的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Parse(System.String)">
      <summary>将转换 <see cref="T:System.String" /> 为其等效的 32 位有符号整数的数字表示形式。</summary>
      <param name="s">
        <see cref="T:System.String" /> 要进行分析。</param>
      <returns>包含的值等效的 32 位有符号的整数指定 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Subtract(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>值中减去第二个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 从第一个参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性包含该减法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <returns>一个 XmlSchema。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="reader">XmlReader </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="writer">XmlWriter</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlBoolean">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>true 如果 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 为非零; false 如果零; 否则为 Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlByte">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 Value 等于 Value 此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。 如果值 SqlInt32 小于 0 或大于 255， <see cref="T:System.OverflowException" /> 时发生。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlDecimal">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 等于此值的结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlDouble">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 等于此值的结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlInt16">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 等于此值的结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlInt64">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 等于此值的结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlMoney">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 等于此值的结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlSingle">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 等于此值的结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlString">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlString" /> 等于此值的结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToString">
      <summary>将转换 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构 <see cref="T:System.String" />。</summary>
      <returns>一个 <see cref="T:System.String" /> 等于此值的结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Xor(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>执行对指定位异或运算 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，其中包含按位异或运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.#ctor(System.Int64)">
      <summary>新实例初始化 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，使用提供的长整型。</summary>
      <param name="value">一个长整型。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Add(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>计算两个和 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于这两种合计 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.BitwiseAnd(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>计算的按位 AND 其 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，其中包含按位与运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.BitwiseOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>计算其两个的按位 OR <see cref="T:System.Data.SqlTypes.SqlInt64" /> 操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，其中包含按位或运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.CompareTo(System.Data.SqlTypes.SqlInt64)">
      <summary>比较此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 实例与所提供 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 并返回对其相对值的指示。</summary>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</param>
      <returns>一个有符号的数字，指示实例和对象的相对值。返回值 条件 小于零 此实例是早于该对象。零 此实例与对象相同。大于零 此实例大于对象 - 或 - 该对象为空引用 (Nothing 在 Visual Basic 中)。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.CompareTo(System.Object)">
      <summary>比较此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 实例与所提供 <see cref="T:System.Object" /> 并返回对其相对值的指示。</summary>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <returns>一个有符号的数字，指示实例和对象的相对值。返回值 条件 小于零 此实例是早于该对象。零 此实例与对象相同。大于零 此实例大于对象 - 或 - 该对象为空引用 (Nothing 在 Visual Basic 中)。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Divide(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>将第一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 第二个参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性包含除法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Equals(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数，以确定它们是否相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>true 如果两个值是否相等。 否则为 false。 如果任一实例为 null，则 SqlInt64 将为 null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Equals(System.Object)">
      <summary>将提供的对象参数 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 对象。</summary>
      <param name="value">要比较的对象。</param>
      <returns>true 如果对象的实例 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 安全以及需要两个相等; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      <param name="schemaSet">一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>一个 string ，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.GreaterThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数，以确定第一个是否大于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.GreaterThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数，以确定第一个是否大于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.LessThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个执行逻辑比较 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数，以确定第一个是否小于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.LessThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个执行逻辑比较 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数，以确定第一个是否小于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Mod(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>计算第一个相除的余数 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 第二个参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性包含其余部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Modulus(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>将两个划分 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 值并返回余数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 值。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 值。</param>
      <returns>得到的余数后在执行除法运算 <paramref name="x" /> 和 <paramref name="y" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Multiply(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>计算两个产品 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 是否等同于这两个产品 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.NotEquals(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对以确定它们是否不相等的两个 SqlInt64 参数执行逻辑比较。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.OnesComplement(System.Data.SqlTypes.SqlInt64)">
      <summary>执行按位二进制反码运算上其 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 是否等同于的二进制反码 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Addition(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>计算两个和 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于这两种合计 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_BitwiseAnd(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>计算的按位 AND 其 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，其中包含按位与运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_BitwiseOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>计算其两个的按位 OR <see cref="T:System.Data.SqlTypes.SqlInt64" /> 操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，其中包含按位或运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Division(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>将第一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 第二个参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性包含除法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Equality(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数，以确定它们是否相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 两个实例是否相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 如果两个实例是否不相等。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_ExclusiveOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>执行按位异或运算对提供的参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，其中包含按位异或运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlInt64">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性等同于 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlInt64">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于的整数部分 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlInt64">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性值等于的整数部分 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Int64">
      <summary>将转换 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数长度。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个新的长值等于 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlInt64">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性值等于的整数部分 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlInt64">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性包含的整数部分 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlInt64">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" /> 要转换对象。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 其 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于所表示的值 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_GreaterThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数，以确定第一个是否大于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数，以确定第一个是否大于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlInt64">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlInt64">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlInt64">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Int64)~System.Data.SqlTypes.SqlInt64">
      <summary>将转换为长整型参数 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <param name="x">一个长整型值。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于长参数的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Inequality(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对以确定它们是否不相等的两个 SqlInt64 参数执行逻辑比较。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_LessThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个执行逻辑比较 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数，以确定第一个是否小于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_LessThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个执行逻辑比较 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数，以确定第一个是否小于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Modulus(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>计算第一个相除的余数 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 第二个参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性包含其余部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Multiply(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>计算两个产品 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 是否等同于这两个产品 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_OnesComplement(System.Data.SqlTypes.SqlInt64)">
      <summary>执行按位二进制反码运算上其 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 是否等同于的二进制反码 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Subtraction(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>值中减去第二个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 从第一个参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性值等于减法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_UnaryNegation(System.Data.SqlTypes.SqlInt64)">
      <summary>一元减运算符求反 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 是否等同于求反后 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Parse(System.String)">
      <summary>将转换 <see cref="T:System.String" /> 为其等效的 64 位有符号整数的数字表示形式。</summary>
      <param name="s">
        <see cref="T:System.String" /> 要进行分析。</param>
      <returns>包含的值等效的 64 位有符号的整数指定 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Subtract(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>值中减去第二个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 从第一个参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性值等于减法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <returns>一个 XmlSchema。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="reader">XmlReader</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="writer">XmlWriter</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlBoolean">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>true 如果 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 为非零; false 如果零; 否则为 Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlByte">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 Value 等于 Value 此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlDecimal">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 等于此值 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlDouble">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 等于此值 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlInt16">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 等于此值 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlInt32">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 等于此值 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlMoney">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 等于此值 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlSingle">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 等于此值 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlString">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 表示的值的这 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToString">
      <summary>将此实例的转换 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 到 <see cref="T:System.String" />。</summary>
      <returns>一个 <see cref="T:System.String" /> 表示的值的这 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Xor(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>执行按位异或运算对提供的参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，其中包含按位异或运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.#ctor(System.Decimal)">
      <summary>使用指定的 <see cref="T:System.Decimal" /> 值初始化 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类的新实例。</summary>
      <param name="value">要初始化的货币值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.#ctor(System.Double)">
      <summary>新实例初始化 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类，具有指定的双精度值。</summary>
      <param name="value">要初始化的货币值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.#ctor(System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类，具有指定的整数值。</summary>
      <param name="value">要初始化的货币值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.#ctor(System.Int64)">
      <summary>新实例初始化 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类，具有指定的长整型值。</summary>
      <param name="value">要初始化的货币值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Add(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>计算两个总和 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构其 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含两个总和 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.CompareTo(System.Data.SqlTypes.SqlMoney)">
      <summary>比较此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 实例与所提供 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 并返回对其相对值的指示。</summary>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</param>
      <returns>一个有符号的数字，指示实例和对象的相对值。返回值 条件 小于零 此实例是早于该对象。零 此实例与对象相同。大于零 此实例大于对象 - 或 - 该对象为空引用 (Nothing 在 Visual Basic 中) </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.CompareTo(System.Object)">
      <summary>比较此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 实例与所提供 <see cref="T:System.Object" /> 并返回对其相对值的指示。</summary>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <returns>一个有符号的数字，指示实例和对象的相对值。返回值 条件 小于零 此实例是早于该对象。零 此实例与对象相同。大于零 此实例大于对象 - 或 - 该对象为空引用 (Nothing 在 Visual Basic 中) </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Divide(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>除法运算符将第一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 第二个参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含除法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Equals(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数，以确定它们是否相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>true 如果两个值是否相等。 否则为 false。 如果任一实例为 null，则 SqlMoney 将为 null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Equals(System.Object)">
      <summary>将提供的对象参数 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 对象。</summary>
      <param name="value">要比较的对象。</param>
      <returns>相等比较将返回 true 的实例的对象是否 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 安全以及需要两个相等; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.GetHashCode">
      <summary>获取此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      <param name="schemaSet">一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>一个 string ，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.GreaterThan(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数，以确定第一个是否大于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.GreaterThanOrEqual(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数，以确定第一个是否大于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.LessThan(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定第一个参数是否小于第二个参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.LessThanOrEqual(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Multiply(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>乘法运算符计算这两个产品 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含相乘的积。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.NotEquals(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数，以确定它们是否不相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Addition(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>计算两个总和 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构其 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含两个总和 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Division(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>除法运算符将第一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 第二个参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含除法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Equality(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数，以确定它们是否相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 两个实例是否相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 如果两个实例是否不相等。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlMoney">
      <summary>此隐式运算符将提供 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 属性 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlMoney">
      <summary>此运算符将提供 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlMoney">
      <summary>此运算符将提供 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Decimal">
      <summary>将指定 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构 <see cref="T:System.Decimal" />。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Decimal" /> 结构，其值等于 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlMoney">
      <summary>此运算符将提供 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlMoney">
      <summary>此运算符将 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" /> 要转换对象。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性值等于所表示的值 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Double)~System.Data.SqlTypes.SqlMoney">
      <summary>此隐式运算符将提供 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 属性 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_GreaterThan(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数，以确定第一个是否大于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数，以确定第一个是否大于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlMoney">
      <summary>此隐式运算符将提供 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等同于 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlMoney">
      <summary>此隐式运算符将提供 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlMoney">
      <summary>此隐式运算符将提供 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlMoney">
      <summary>此隐式运算符将提供 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Decimal)~System.Data.SqlTypes.SqlMoney">
      <summary>将转换 <see cref="T:System.Decimal" /> 参数 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <param name="x">
        <see cref="T:System.Decimal" /> 要转换的值。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 等于的值 <see cref="T:System.Decimal" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Int64)~System.Data.SqlTypes.SqlMoney">
      <summary>此隐式运算符将提供 <see cref="T:System.Int64" /> 参数 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Int64" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性是否等于的值 <see cref="T:System.Int64" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Inequality(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数，以确定它们是否不相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_LessThan(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定第一个参数是否小于第二个参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_LessThanOrEqual(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Multiply(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>乘法运算符计算这两个产品 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含相乘的积。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Subtraction(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>减法运算符中减去第二个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 从第一个参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，其中包含该减法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_UnaryNegation(System.Data.SqlTypes.SqlMoney)">
      <summary>一元减运算符求反 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 要求反的结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含求反的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Parse(System.String)">
      <summary>将转换 <see cref="T:System.String" /> 到数字表示形式及其 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 等效。</summary>
      <param name="s">String 要进行分析。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 等效于包含的值中指定 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Subtract(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>减法运算符中减去第二个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 从第一个参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，其中包含该减法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <returns>一个 XmlSchema。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="reader">XmlReader</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="writer">XmlWriter</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToDecimal">
      <summary>将此实例的值转换 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 作为 <see cref="T:System.Decimal" /> 结构。</summary>
      <returns>一个 <see cref="T:System.Decimal" /> 结构，其值等于 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToDouble">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构 <see cref="T:System.Double" />。</summary>
      <returns>一个双精度型值等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToInt32">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构 <see cref="T:System.Int32" />。</summary>
      <returns>一个 32 位整数，其值等于的整数部分 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToInt64">
      <summary>将此值转换 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构 <see cref="T:System.Int64" />。</summary>
      <returns>一个 64 位整数，其值等于的整数部分 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlBoolean">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。 如果值 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构为零， <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlByte">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 等于此值 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlDecimal">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 等于此值 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlDouble">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 等于此值 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlInt16">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 等于此值 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlInt32">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 等于此值 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlInt64">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 等于此值 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlSingle">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 等于此值 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlString">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构，其值为一个字符串，表示此值 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToString">
      <summary>将此实例的转换 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 为字符串。</summary>
      <returns>一个字符串，其值的字符串表示形式的数 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNotFilledException.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlNotFilledException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNotFilledException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlNotFilledException" /> 类的新实例。</summary>
      <param name="message">要在引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNotFilledException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlNotFilledException" /> 类的新实例。</summary>
      <param name="message">要在引发异常时显示的字符串。</param>
      <param name="e">对内部异常的引用。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNullValueException.#ctor">
      <summary>使用由系统提供的用来描述错误的消息初始化 <see cref="T:System.Data.SqlTypes.SqlNullValueException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNullValueException.#ctor(System.String)">
      <summary>使用指定的描述错误的消息初始化 <see cref="T:System.Data.SqlTypes.SqlNullValueException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNullValueException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.SqlTypes.SqlNullValueException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="e">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.#ctor(System.Double)">
      <summary>新实例初始化 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，使用提供的双精度型参数。</summary>
      <param name="value">一个双精度值，该值将用作 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.#ctor(System.Single)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的新实例。</summary>
      <param name="value">浮点数，它将用作 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Add(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>计算两个指定的和 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，其中包含两个指定的总和 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.CompareTo(System.Data.SqlTypes.SqlSingle)">
      <summary>比较此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 实例与所提供 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 并返回对其相对值的指示。</summary>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</param>
      <returns>一个有符号的数字，指示实例和对象的相对值。返回值 条件 小于零 此实例是早于该对象。零 此实例与对象相同。大于零 此实例大于对象 - 或 - 该对象为空引用 (Nothing 在 Visual Basic 中) </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.CompareTo(System.Object)">
      <summary>比较此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 实例与所提供 <see cref="T:System.Object" /> 并返回对其相对值的指示。</summary>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <returns>一个有符号的数字，指示实例和对象的相对值。返回值 条件 小于零 此实例是早于该对象。零 此实例与对象相同。大于零 此实例大于对象 - 或 - 该对象为空引用 (Nothing 在 Visual Basic 中) </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Divide(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>将第一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 SqlInt64 结构，其中包含除法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Equals(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数，以确定它们是否相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>true 如果两个值是否相等。 否则为 false。 如果任一实例为 null，则 SqlSingle 将为 null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Equals(System.Object)">
      <summary>将提供的对象参数 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 对象。</summary>
      <param name="value">要比较的对象。</param>
      <returns>true 如果对象的实例 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 和两个是否相等。 否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.GetHashCode">
      <summary>获取此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>一个 string 值，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.GreaterThan(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 以确定第一个是否大于第二个操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.GreaterThanOrEqual(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，以确定第一个是否大于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.LessThan(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数执行逻辑比较，以确定第一个参数是否小于第二个参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.LessThanOrEqual(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Multiply(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>计算两个指定的积 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，其中包含乘法的乘积。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.NotEquals(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数，以确定它们是否不相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Addition(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>计算两个指定的和 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，其中包含两个指定的总和 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Division(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>将第一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，其中包含除法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Equality(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>执行逻辑比较两个 SqlSingle 参数以确定它们是否相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 两个实例是否相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 如果两个实例是否不相等。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlSingle">
      <summary>此隐式运算符将提供 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 到 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 是否等同于 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlSingle">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 要转换的参数。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 是否等同于 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Single">
      <summary>将指定 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 为 float 的结构。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 转换为浮点数的值。</param>
      <returns>包含的值的浮点数 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlSingle">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" /> 要转换对象。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等于所表示的值 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_GreaterThan(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 以确定第一个是否大于第二个操作数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，以确定第一个是否大于或等于第二个。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlSingle">
      <summary>此隐式运算符将 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlByte" />。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 属性等于 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlSingle">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 是否等同于 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlSingle">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 是否等同于 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlSingle">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 是否等同于 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlSingle">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 是否等同于 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlSingle">
      <summary>将转换提供 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 是否等同于 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Single)~System.Data.SqlTypes.SqlSingle">
      <summary>将转换指定的浮点值到 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <param name="x">浮点值转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，其中包含指定的浮点值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Inequality(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数，以确定它们是否不相等。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_LessThan(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数执行逻辑比较，以确定第一个参数是否小于第二个参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_LessThanOrEqual(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Multiply(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>计算两个指定的积 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，其中包含乘法的乘积。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Subtraction(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>值中减去第二个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 从第一个结构。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，其中包含该减法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_UnaryNegation(System.Data.SqlTypes.SqlSingle)">
      <summary>求反 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 指定 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，其中包含的相反的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Parse(System.String)">
      <summary>将指定 <see cref="T:System.String" /> 到 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</summary>
      <param name="s">
        <see cref="T:System.String" /> 要进行分析。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 等效于包含的值中指定 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Subtract(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>值中减去第二个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 从第一个结构。</summary>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，其中包含该减法运算的结果。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <returns>一个 XmlSchema。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="reader">XmlReader </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="writer">XmlWriter</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlBoolean">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>true 如果 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 为非零; false 如果零; 否则为 Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlByte">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 Value 等于 Value 此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。 如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的值是 true, 、 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的 Value 将为 1。 否则为 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的 Value 将为 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlDecimal">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个新 SqlDecimal 等于此值 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlDouble">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>一个新 SqlDouble 等于此值 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlInt16">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>一个新 SqlInt16 等于此值 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlInt32">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 等于此值 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlInt64">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 等于此值 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlMoney">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 等于此值 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlString">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 表示的值的这 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToString">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构 <see cref="T:System.String" />。</summary>
      <returns>一个 String 对象，表示此值 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[])">
      <summary>新实例初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构使用指定的区域设置 id，请比较选项和数据。</summary>
      <param name="lcid">指定地理区域设置和语言新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</param>
      <param name="compareOptions">指定新的比较选项 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</param>
      <param name="data">要存储的数据数组。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Boolean)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 类的新实例。</summary>
      <param name="lcid">指定地理区域设置和语言新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</param>
      <param name="compareOptions">指定新的比较选项 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</param>
      <param name="data">要存储的数据数组。</param>
      <param name="fUnicode">true 如果 Unicode 编码。 否则为 false。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 类的新实例。</summary>
      <param name="lcid">指定地理区域设置和语言新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</param>
      <param name="compareOptions">指定新的比较选项 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</param>
      <param name="data">要存储的数据数组。</param>
      <param name="index">该数组内的起始索引。</param>
      <param name="count">从索引复制的字符数。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Int32,System.Int32,System.Boolean)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 类的新实例。</summary>
      <param name="lcid">指定地理区域设置和语言新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</param>
      <param name="compareOptions">指定新的比较选项 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</param>
      <param name="data">要存储的数据数组。</param>
      <param name="index">该数组内的起始索引。</param>
      <param name="count">从索引复制的字符数。</param>
      <param name="fUnicode">true 如果 Unicode 编码。 否则为 false。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构，使用指定的字符串。</summary>
      <param name="data">要存储的字符串。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.String,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构，使用指定的字符串和区域设置 id 值。</summary>
      <param name="data">要存储的字符串。</param>
      <param name="lcid">指定地理区域设置和语言新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.String,System.Int32,System.Data.SqlTypes.SqlCompareOptions)">
      <summary>新实例初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构，使用指定的字符串、 区域设置 id 和比较选项值。</summary>
      <param name="data">要存储的字符串。</param>
      <param name="lcid">指定地理区域设置和语言新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</param>
      <param name="compareOptions">指定新的比较选项 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Add(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>串联两个指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 值以创建一个新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 的串联的值，它是 <paramref name="x" /> 和 <paramref name="y" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Clone">
      <summary>会创建一份 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlString" /> 中所有属性值是与原始对象相同的对象。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.CompareOptionsFromSqlCompareOptions(System.Data.SqlTypes.SqlCompareOptions)">
      <summary>获取 <see cref="T:System.Globalization.CompareOptions" /> 枚举等效的指定 <see cref="T:System.Data.SqlTypes.SqlCompareOptions" /> 值。</summary>
      <param name="compareOptions">一个 <see cref="T:System.Data.SqlTypes.SqlCompareOptions" /> 值，该值描述的比较选项 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</param>
      <returns>一个 CompareOptions 对应于值 SqlCompareOptions 此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.CompareTo(System.Data.SqlTypes.SqlString)">
      <summary>比较此 <see cref="T:System.Data.SqlTypes.SqlString" /> 实例与所提供 <see cref="T:System.Data.SqlTypes.SqlString" /> 并返回对其相对值的指示。</summary>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>一个有符号的数字，指示实例和对象的相对值。返回值 条件 小于零 此实例是早于该对象。零 此实例与对象相同。大于零 此实例大于对象 - 或 - 该对象为空引用 (Nothing 在 Visual Basic 中)。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.CompareTo(System.Object)">
      <summary>比较此 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象与所提供 <see cref="T:System.Object" /> 并返回对其相对值的指示。</summary>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <returns>一个有符号的数字，指示实例和对象的相对值。返回值 条件 小于零 此实例是早于该对象。零 此实例与对象相同。大于零 此实例大于对象 - 或 - 该对象为空引用 (Nothing 在 Visual Basic 中) </returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Concat(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>串联两个指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" /> ，其中包含新串联的值表示两个内容 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Equals(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数以确定它们是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>true 如果两个值是否相等。 否则为 false。 如果任一实例为 null，则 SqlString 将为 null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Equals(System.Object)">
      <summary>将提供的对象参数 <see cref="P:System.Data.SqlTypes.SqlString.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象。</summary>
      <param name="value">要比较的对象。</param>
      <returns>相等比较将返回 true 的实例的对象是否 <see cref="T:System.Data.SqlTypes.SqlString" /> 安全以及需要两个相等; 否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GetHashCode">
      <summary>获取此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GetNonUnicodeBytes">
      <summary>获取字节数组，包含内容的 <see cref="T:System.Data.SqlTypes.SqlString" /> 以 ANSI 格式。</summary>
      <returns>一个字节数组，包含内容的 <see cref="T:System.Data.SqlTypes.SqlString" /> 以 ANSI 格式。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GetUnicodeBytes">
      <summary>获取字节数组，包含内容的 <see cref="T:System.Data.SqlTypes.SqlString" /> 以 Unicode 格式。</summary>
      <returns>一个字节数组，包含内容的 <see cref="T:System.Data.SqlTypes.SqlString" /> 以 Unicode 格式。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>一个 string 值，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GreaterThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 以确定第一个是否大于第二个操作数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlString" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GreaterThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 以确定第一个是否大于或等于第二个操作数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlString" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.LessThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数以确定第一个是否小于第二个。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlString" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.LessThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 以确定第一个是否小于或等于第二个操作数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlString" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.NotEquals(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数以确定它们是否不相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlString" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Addition(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>串联两个指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" /> ，其中包含新串联的值表示两个内容 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Equality(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数以确定它们是否相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 两个实例是否相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 如果两个实例是否不相等。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlString" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlString">
      <summary>将指定 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlString" /> ，其中包含的字符串表示形式 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlString">
      <summary>将指定 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象，其中包含的字符串表示形式 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlDateTime)~System.Data.SqlTypes.SqlString">
      <summary>将指定 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 参数 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlString" /> ，其中包含的字符串表示形式 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlString">
      <summary>将指定 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <param name="x">要转换的 SqlDecimal 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlString" /> ，其中包含的字符串表示形式 SqlDecimal 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlString">
      <summary>将指定 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlString" /> ，其中包含的字符串表示形式 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlGuid)~System.Data.SqlTypes.SqlString">
      <summary>将指定 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 参数 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 值的字符串表示形式指定 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlString">
      <summary>将指定 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象，其中包含的字符串表示形式 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlString">
      <summary>将指定 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <param name="x">要转换的 SqlInt32 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象，其中包含的字符串表示形式 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlString">
      <summary>将指定 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象，其中包含的字符串表示形式 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlString">
      <summary>将指定 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlString" /> ，其中包含的字符串表示形式 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlString">
      <summary>将指定 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlString" /> ，其中包含的字符串表示形式 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlString)~System.String">
      <summary>将转换 <see cref="T:System.Data.SqlTypes.SqlString" /> 到 <see cref="T:System.String" /></summary>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>一个 String, ，其内容将与相同 <see cref="P:System.Data.SqlTypes.SqlString.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_GreaterThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 以确定第一个是否大于第二个操作数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlString" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 以确定第一个是否大于或等于第二个操作数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 的第一个实例是否大于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlString" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Implicit(System.String)~System.Data.SqlTypes.SqlString">
      <summary>将转换 <see cref="T:System.String" /> 参数 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <param name="x">要转换的 <see cref="T:System.String" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" /> ，其中包含指定的值 String。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Inequality(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数以确定它们是否不相等。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" /> 的两个实例是否相等。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlString" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_LessThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数以确定第一个是否小于第二个。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlString" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_LessThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 以确定第一个是否小于或等于第二个操作数。</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" /> 如果第一个实例小于或等于第二个实例。 否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。 如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlString" /> 为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <returns>一个 XmlSchema。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="reader">XmlReader</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
      <param name="writer">XmlWriter</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlBoolean">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>true 如果 <see cref="P:System.Data.SqlTypes.SqlString.Value" /> 为非零; false 如果零; 否则为 Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlByte">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个新 SqlByte 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 等于所表示的数 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlDateTime">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDateTime" />。</summary>
      <returns>一个新 SqlDateTime 结构，其中包含由此表示的日期值 <see cref="T:System.Data.SqlTypes.SqlString" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlDecimal">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> ，其中包含此值 <see cref="T:System.Data.SqlTypes.SqlString" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlDouble">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> ，它等于此数值 <see cref="T:System.Data.SqlTypes.SqlString" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlGuid">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 是 Guid 由此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlInt16">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt16" /> ，它等于此数值 <see cref="T:System.Data.SqlTypes.SqlString" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlInt32">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" /> ，它等于此数值 <see cref="T:System.Data.SqlTypes.SqlString" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlInt64">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> ，它等于此数值 <see cref="T:System.Data.SqlTypes.SqlString" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlMoney">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> ，它等于此数值 <see cref="T:System.Data.SqlTypes.SqlString" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlSingle">
      <summary>将此转换 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> ，它等于此数值 <see cref="T:System.Data.SqlTypes.SqlString" />...</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToString">
      <summary>将转换 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象传递给 <see cref="T:System.String" />。</summary>
      <returns>一个 <see cref="T:System.String" /> 与此相同的值与 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTruncateException.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlTruncateException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTruncateException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.Data.SqlTypes.SqlTruncateException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTruncateException.#ctor(System.String,System.Exception)">
      <summary>新实例初始化 <see cref="T:System.Data.SqlTypes.SqlTruncateException" /> 使用指定的错误消息和对引用 <see cref="T:System.Exception" />。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="e">对内部引用 <see cref="T:System.Exception" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypeException.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlTypeException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Data.SqlTypes.SqlTypeException" /> 类的新实例。</summary>
      <param name="si">承载序列化对象数据的对象。</param>
      <param name="sc">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypeException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.Data.SqlTypes.SqlTypeException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypeException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.SqlTypes.SqlTypeException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="e">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" /> 类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。</summary>
      <param name="name">一个字符串形式的名称。</param>
      <param name="destinationType">字符串形式的目标类型。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper.#ctor(System.String,System.String,System.Boolean)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" /> 类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。</summary>
      <param name="name">一个字符串形式的名称。</param>
      <param name="destinationType">字符串形式的目标类型。</param>
      <param name="direct">一个布尔值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper.#ctor(System.String,System.String,System.String[],System.CodeDom.CodeNamespaceImport[],System.String,System.Boolean)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" /> 类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。</summary>
      <param name="name">一个字符串形式的名称。</param>
      <param name="targetNamespace">目标命名空间。</param>
      <param name="references">引用的字符串数组。</param>
      <param name="namespaceImports">CodeNamespaceImport 对象的数组。</param>
      <param name="destinationType">字符串形式的目标类型。</param>
      <param name="direct">适用于直接一个布尔值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper.ImportSchemaType(System.String,System.String,System.Xml.Schema.XmlSchemaObject,System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.XmlSchemaImporter,System.CodeDom.CodeCompileUnit,System.CodeDom.CodeNamespace,System.Xml.Serialization.CodeGenerationOptions,System.CodeDom.Compiler.CodeDomProvider)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" /> 类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。</summary>
      <param name="name">
        <paramref name="name" />
      </param>
      <param name="xmlNamespace">
        <paramref name="xmlNamespace" />
      </param>
      <param name="context">
        <paramref name="context" />
      </param>
      <param name="schemas">
        <paramref name="schemas" />
      </param>
      <param name="importer">
        <paramref name="importer" />
      </param>
      <param name="compileUnit">
        <paramref name="compileUnit" />
      </param>
      <param name="mainNamespace">
        <paramref name="mainNamespace" />
      </param>
      <param name="options">
        <paramref name="options" />
      </param>
      <param name="codeProvider">
        <paramref name="codeProvider" />
      </param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" /> 类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper.ImportSchemaType(System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaObject,System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.XmlSchemaImporter,System.CodeDom.CodeCompileUnit,System.CodeDom.CodeNamespace,System.Xml.Serialization.CodeGenerationOptions,System.CodeDom.Compiler.CodeDomProvider)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" /> 类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。</summary>
      <param name="type">
        <paramref name="type" />
      </param>
      <param name="context">
        <paramref name="context" />
      </param>
      <param name="schemas">
        <paramref name="schemas" />
      </param>
      <param name="importer">
        <paramref name="importer" />
      </param>
      <param name="compileUnit">
        <paramref name="compileUnit" />
      </param>
      <param name="mainNamespace">
        <paramref name="mainNamespace" />
      </param>
      <param name="options">
        <paramref name="options" />
      </param>
      <param name="codeProvider">
        <paramref name="codeProvider" />
      </param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" /> 类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.#ctor">
      <summary>创建一个新的 <see cref="T:System.Data.SqlTypes.SqlXml" /> 实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.#ctor(System.IO.Stream)">
      <summary>创建一个新 <see cref="T:System.Data.SqlTypes.SqlXml" /> 实例，以提供从提供的 XML 值 <see cref="T:System.IO.Stream" />-派生实例。</summary>
      <param name="value">一个 <see cref="T:System.IO.Stream" />-派生实例 (如 <see cref="T:System.IO.FileStream" />) 要从其中加载 <see cref="T:System.Data.SqlTypes.SqlXml" /> 实例的 Xml 内容。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.#ctor(System.Xml.XmlReader)">
      <summary>创建一个新 <see cref="T:System.Data.SqlTypes.SqlXml" /> 实例，并将其与所提供的内容关联 <see cref="T:System.Xml.XmlReader" />。</summary>
      <param name="value">
        <see cref="T:System.Xml.XmlReader" />的派生类实例要用作新值 <see cref="T:System.Data.SqlTypes.SqlXml" /> 实例。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.CreateReader">
      <summary>获取此内容的 xml 值 <see cref="T:System.Data.SqlTypes.SqlXml" /> 作为 <see cref="T:System.Xml.XmlReader" />。</summary>
      <returns>一个 <see cref="T:System.Xml.XmlReader" />-派生的实例，它包含的 XML 内容。 可能会有所不同的实际类型 (例如，返回值可能是 <see cref="T:System.Xml.XmlTextReader" />) 具体取决于如何呈现的信息是在内部，在服务器上。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">尝试访问此属性上的 null 实例 <see cref="T:System.Data.SqlTypes.SqlXml" />。</exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      <param name="schemaSet">一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
      <returns>一个字符串，指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />。</summary>
      <returns>一个 <see cref="T:System.Xml.Schema.XmlSchema" />，描述由 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> 方法生成并由 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> 方法使用的对象的 XML 表示形式。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />。</summary>
      <param name="r">XmlReader。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />。</summary>
      <param name="writer">XmlWriter</param>
    </member>
    <member name="M:System.Data.SqlTypes.TypeBigIntSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeBigIntSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeBinarySchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeBinarySchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeBitSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeBitSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeCharSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeCharSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeDateTimeSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeDateTimeSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeDecimalSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeDecimalSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeFloatSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeFloatSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeIntSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeIntSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeMoneySchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeMoneySchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeNCharSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeNCharSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeNTextSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeNTextSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeNumericSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeNumericSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeNVarCharSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeNVarCharSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeRealSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeRealSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeSmallDateTimeSchemaImporterExtension.#ctor">
      <summary>新实例初始化 TypeSmallDateTimeSchemaImporterExtension 类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeSmallIntSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeSmallIntSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeSmallMoneySchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeSmallMoneySchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeTextSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeTextSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeTinyIntSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeTinyIntSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeUniqueIdentifierSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeUniqueIdentifierSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeVarBinarySchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeVarBinarySchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeVarCharSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeVarCharSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.TypeVarImageSchemaImporterExtension.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.TypeVarImageSchemaImporterExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.StateChangeEventArgs.#ctor(System.Data.ConnectionState,System.Data.ConnectionState)">
      <summary>新实例初始化 <see cref="T:System.Data.StateChangeEventArgs" /> 类，在给定的原始状态和该对象的当前状态。</summary>
      <param name="originalState">
        <see cref="T:System.Data.ConnectionState" /> 值之一。</param>
      <param name="currentState">
        <see cref="T:System.Data.ConnectionState" /> 值之一。</param>
    </member>
    <member name="M:System.Data.StatementCompletedEventArgs.#ctor(System.Int32)">
      <summary>创建 <see cref="T:System.Data.StatementCompletedEventArgs" /> 类的新实例。</summary>
      <param name="recordCount">指示导致的语句所影响的行数 <see cref="E:System.Data.SqlClient.SqlCommand.StatementCompleted" />  事件发生。</param>
    </member>
    <member name="M:System.Data.StrongTypingException.#ctor">
      <summary>初始化 <see cref="T:System.Data.StrongTypingException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.StrongTypingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>新实例初始化 <see cref="T:System.Data.StrongTypingException" /> 类使用指定的序列化信息和流上下文。</summary>
      <param name="info">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 结构。</param>
    </member>
    <member name="M:System.Data.StrongTypingException.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Data.StrongTypingException" /> 类，具有指定的字符串。</summary>
      <param name="message">要在引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.StrongTypingException.#ctor(System.String,System.Exception)">
      <summary>新实例初始化 <see cref="T:System.Data.StrongTypingException" /> 使用指定的字符串和内部异常的类。</summary>
      <param name="s">要在引发异常时显示的字符串。</param>
      <param name="innerException">对内部异常的引用。</param>
    </member>
    <member name="M:System.Data.SyntaxErrorException.#ctor">
      <summary>初始化 <see cref="T:System.Data.SyntaxErrorException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SyntaxErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>新实例初始化 <see cref="T:System.Data.SyntaxErrorException" /> 类 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</summary>
      <param name="info">要序列化或反序列化对象所需的数据。</param>
      <param name="context">源和目标的特定序列化的流。</param>
    </member>
    <member name="M:System.Data.SyntaxErrorException.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Data.SyntaxErrorException" /> 类，具有指定的字符串。</summary>
      <param name="s">要在引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.SyntaxErrorException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.SyntaxErrorException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="M:System.Data.TypedDataSetGenerator.#ctor">
      <summary>初始化 <see cref="T:System.Data.TypedDataSetGenerator" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.TypedDataSetGenerator.Generate(System.Data.DataSet,System.CodeDom.CodeNamespace,System.CodeDom.Compiler.ICodeGenerator)">
      <summary>生成强类型化 <see cref="T:System.Data.DataSet" />。</summary>
      <param name="dataSet">源 <see cref="T:System.Data.DataSet" /> 指定的类型化的元数据 <see cref="T:System.Data.DataSet" />。</param>
      <param name="codeNamespace">提供的类型化的目标命名空间的命名空间 <see cref="T:System.Data.DataSet" />。</param>
      <param name="codeGen">用于创建类型化的生成器 <see cref="T:System.Data.DataSet" />。</param>
    </member>
    <member name="M:System.Data.TypedDataSetGenerator.GenerateIdName(System.String,System.CodeDom.Compiler.ICodeGenerator)">
      <summary>一个字符串是有效的转换类型化 <see cref="T:System.Data.DataSet" /> 名称。</summary>
      <param name="name">要将转换为一个有效的源名称键入 <see cref="T:System.Data.DataSet" /> 名称。</param>
      <param name="codeGen">用于执行转换的生成器。</param>
      <returns>一个字符串，表示转换后的名称。</returns>
    </member>
    <member name="M:System.Data.TypedDataSetGeneratorException.#ctor">
      <summary>初始化 <see cref="T:System.Data.TypedDataSetGeneratorException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.TypedDataSetGeneratorException.#ctor(System.Collections.ArrayList)">
      <summary>初始化 <see cref="T:System.Data.TypedDataSetGeneratorException" /> 类的新实例。</summary>
      <param name="list">
        <see cref="T:System.Collections.ArrayList" /> 对象，包含异常的动态列表。</param>
    </member>
    <member name="M:System.Data.TypedDataSetGeneratorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>新实例初始化 <see cref="T:System.Data.TypedDataSetGeneratorException" /> 类使用指定的序列化信息和流上下文。</summary>
      <param name="info">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 结构。</param>
    </member>
    <member name="M:System.Data.TypedDataSetGeneratorException.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Data.TypedDataSetGeneratorException" /> 类，具有指定的字符串。</summary>
      <param name="message">要在引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.TypedDataSetGeneratorException.#ctor(System.String,System.Exception)">
      <summary>新实例初始化 <see cref="T:System.Data.TypedDataSetGeneratorException" /> 使用指定的字符串和内部异常的类。</summary>
      <param name="message">要在引发异常时显示的字符串。</param>
      <param name="innerException">对内部异常的引用。</param>
    </member>
    <member name="M:System.Data.TypedDataSetGeneratorException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>实现 ISerializable 接口，并返回序列化所需的数据 <see cref="T:System.Data.TypedDataSetGeneratorException" /> 对象。</summary>
      <param name="info">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 结构。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.Data.DataColumn)">
      <summary>使用指定的 <see cref="T:System.Data.UniqueConstraint" /> 初始化 <see cref="T:System.Data.DataColumn" /> 类的新实例。</summary>
      <param name="column">
        <see cref="T:System.Data.DataColumn" /> 来约束。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.Data.DataColumn,System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.Data.UniqueConstraint" /> 类 <see cref="T:System.Data.DataColumn" /> 要约束和指定约束是否为主键的值。</summary>
      <param name="column">
        <see cref="T:System.Data.DataColumn" /> 来约束。</param>
      <param name="isPrimaryKey">true 若要指示约束是主键;否则为 false。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.Data.DataColumn[])">
      <summary>新实例初始化 <see cref="T:System.Data.UniqueConstraint" /> 与给定的数组类 <see cref="T:System.Data.DataColumn" /> 对象。</summary>
      <param name="columns">数组 <see cref="T:System.Data.DataColumn" /> 要约束的对象。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.Data.DataColumn[],System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.Data.UniqueConstraint" /> 使用数组类 <see cref="T:System.Data.DataColumn" /> 对象，如果要限制和一个值，指定约束是否为主键。</summary>
      <param name="columns">一个数组 <see cref="T:System.Data.DataColumn" /> 要约束的对象。</param>
      <param name="isPrimaryKey">true 若要指示约束是主键;否则为 false。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.String,System.Data.DataColumn)">
      <summary>新实例初始化 <see cref="T:System.Data.UniqueConstraint" /> 类具有指定名称和 <see cref="T:System.Data.DataColumn" />。</summary>
      <param name="name">约束的名称。</param>
      <param name="column">
        <see cref="T:System.Data.DataColumn" /> 来约束。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.String,System.Data.DataColumn,System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.Data.UniqueConstraint" /> 初始化具有指定名称 <see cref="T:System.Data.DataColumn" /> 要约束和指定约束是否为主键的值。</summary>
      <param name="name">约束的名称。</param>
      <param name="column">
        <see cref="T:System.Data.DataColumn" /> 来约束。</param>
      <param name="isPrimaryKey">true 若要指示约束是主键;否则为 false。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.String,System.Data.DataColumn[])">
      <summary>新实例初始化 <see cref="T:System.Data.UniqueConstraint" /> 带有指定的名称和构成的数组类 <see cref="T:System.Data.DataColumn" /> 对象。</summary>
      <param name="name">约束的名称。</param>
      <param name="columns">数组 <see cref="T:System.Data.DataColumn" /> 要约束的对象。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.String,System.Data.DataColumn[],System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.Data.UniqueConstraint" /> 初始化具有指定名称的数组 <see cref="T:System.Data.DataColumn" /> 对象，如果要限制和一个值，指定约束是否为主键。</summary>
      <param name="name">约束的名称。</param>
      <param name="columns">一个数组 <see cref="T:System.Data.DataColumn" /> 要约束的对象。</param>
      <param name="isPrimaryKey">true 若要指示约束是主键;否则为 false。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.String,System.String[],System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.Data.UniqueConstraint" /> 初始化具有指定名称的数组 <see cref="T:System.Data.DataColumn" /> 对象，如果要限制和一个值，指定约束是否为主键。</summary>
      <param name="name">约束的名称。</param>
      <param name="columnNames">一个数组 <see cref="T:System.Data.DataColumn" /> 要约束的对象。</param>
      <param name="isPrimaryKey">true 若要指示约束是主键;否则为 false。</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.Equals(System.Object)">
      <summary>比较此约束到一秒钟，以确定是否两者均相同。</summary>
      <param name="key2">与此对象 <see cref="T:System.Data.UniqueConstraint" /> 进行比较。</param>
      <returns>true, 如果约束相等，则否则为 false。</returns>
    </member>
    <member name="M:System.Data.UniqueConstraint.GetHashCode">
      <summary>获取此实例的哈希代码 <see cref="T:System.Data.UniqueConstraint" /> 对象。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.VersionNotFoundException.#ctor">
      <summary>初始化 <see cref="T:System.Data.VersionNotFoundException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.VersionNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>新实例初始化 <see cref="T:System.Data.VersionNotFoundException" /> 用序列化信息的类。</summary>
      <param name="info">要序列化或反序列化对象所需的数据。</param>
      <param name="context">源和目标的指定的序列化流的说明。</param>
    </member>
    <member name="M:System.Data.VersionNotFoundException.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Data.VersionNotFoundException" /> 类，具有指定的字符串。</summary>
      <param name="s">要在引发异常时显示的字符串。</param>
    </member>
    <member name="M:System.Data.VersionNotFoundException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.VersionNotFoundException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="M:System.Xml.XmlDataDocument.#ctor">
      <summary>初始化 <see cref="T:System.Xml.XmlDataDocument" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xml.XmlDataDocument.#ctor(System.Data.DataSet)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlDataDocument" /> 初始化 <see cref="T:System.Data.DataSet" /> 类的新实例。</summary>
      <param name="dataset">DataSet 加载到 XmlDataDocument。</param>
    </member>
    <member name="M:System.Xml.XmlDataDocument.CloneNode(System.Boolean)">
      <summary>创建当前节点的副本。</summary>
      <param name="deep">若要递归地克隆指定节点下的子树，则为 true；若仅克隆节点本身，则为 false。</param>
      <returns>克隆的节点。</returns>
    </member>
    <member name="M:System.Xml.XmlDataDocument.CreateElement(System.String,System.String,System.String)">
      <summary>创建具有指定的元素 <see cref="P:System.Xml.XmlNode.Prefix" />, ，<see cref="P:System.Xml.XmlDocument.LocalName" /> , ，和 <see cref="P:System.Xml.XmlNode.NamespaceURI" />。</summary>
      <param name="prefix">新元素的前缀。 如果 String.Empty 或 null, ，没有前缀。</param>
      <param name="localName">新元素的本地名称。</param>
      <param name="namespaceURI">命名空间统一资源标识符 (URI) 将新元素。 如果 String.Empty 或 null, ，没有任何 namespaceURI。</param>
      <returns>一个新的 <see cref="T:System.Xml.XmlElement" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDataDocument.CreateEntityReference(System.String)">
      <summary>创建具有指定名称的 <see cref="T:System.Xml.XmlEntityReference" />。</summary>
      <param name="name">实体引用的名称。</param>
      <returns>
        <see cref="T:System.Xml.XmlEntityReference" /> 具有指定名称。</returns>
      <exception cref="T:System.NotSupportedException">调用此方法。</exception>
    </member>
    <member name="M:System.Xml.XmlDataDocument.CreateNavigator(System.Xml.XmlNode)">
      <summary>创建一个用于导航此文档的新 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象。XPathNavigator 定位在中指定的节点上 <paramref name="node" /> 参数。</summary>
      <param name="node">希望导航器最初定位在的 <see cref="T:System.Xml.XmlNode" />。</param>
      <returns>XPathNavigator 用于在文档中导航。</returns>
    </member>
    <member name="M:System.Xml.XmlDataDocument.GetElementById(System.String)">
      <summary>获取具有指定 ID 的 <see cref="T:System.Xml.XmlElement" />。 此方法不受 <see cref="T:System.Xml.XmlDataDocument" /> 类。 调用此方法将引发异常。</summary>
      <param name="elemId">要匹配的属性 ID。</param>
      <returns>
        <see cref="T:System.Xml.XmlElement" /> 替换为指定的 id。</returns>
      <exception cref="T:System.NotSupportedException">调用此方法。</exception>
    </member>
    <member name="M:System.Xml.XmlDataDocument.GetElementFromRow(System.Data.DataRow)">
      <summary>检索 <see cref="T:System.Xml.XmlElement" /> 关联的 <see cref="T:System.Data.DataRow" />。</summary>
      <param name="r">DataRow 其关联 XmlElement 您想要检索。</param>
      <returns>XmlElement 包含表示形式指定 DataRow。</returns>
    </member>
    <member name="M:System.Xml.XmlDataDocument.GetElementsByTagName(System.String)">
      <summary>返回一个 <see cref="T:System.Xml.XmlNodeList" />，它包含与指定 <see cref="P:System.Xml.XmlDocument.Name" /> 匹配的所有子代元素的列表。</summary>
      <param name="name">要匹配的限定名称。 它针对匹配节点的 <see cref="P:System.Xml.XmlDocument.Name" /> 属性进行匹配。 特殊值“*”匹配所有标记。</param>
      <returns>
        <see cref="T:System.Xml.XmlNodeList" />，包含所有匹配节点的列表。</returns>
    </member>
    <member name="M:System.Xml.XmlDataDocument.GetRowFromElement(System.Xml.XmlElement)">
      <summary>检索 <see cref="T:System.Data.DataRow" /> 关联的 <see cref="T:System.Xml.XmlElement" />。</summary>
      <param name="e">XmlElement 其关联 DataRow 您想要检索。</param>
      <returns>DataRow 包含表示形式 XmlElement; null 是否存在任何 DataRow 与关联 XmlElement。</returns>
    </member>
    <member name="M:System.Xml.XmlDataDocument.Load(System.IO.Stream)">
      <summary>加载 XmlDataDocument 从指定的流。</summary>
      <param name="inStream">包含要加载的 XML 文档的流。</param>
    </member>
    <member name="M:System.Xml.XmlDataDocument.Load(System.IO.TextReader)">
      <summary>加载 XmlDataDocument 从指定 <see cref="T:System.IO.TextReader" />。</summary>
      <param name="txtReader">用于将 XML 数据输送到文档中的 TextReader。</param>
    </member>
    <member name="M:System.Xml.XmlDataDocument.Load(System.String)">
      <summary>加载 XmlDataDocument 使用指定的 URL。</summary>
      <param name="filename">要加载包含 XML 文档的文件的 URL。</param>
    </member>
    <member name="M:System.Xml.XmlDataDocument.Load(System.Xml.XmlReader)">
      <summary>加载 XmlDataDocument 从指定 <see cref="T:System.Xml.XmlReader" />。</summary>
      <param name="reader">XmlReader 包含要加载的 XML 文档。</param>
      <exception cref="T:System.NotSupportedException">所加载的 XML 包含实体引用，并将读取器不能解析实体。</exception>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlContext.IsAvailable">
      <summary>指定是否在 SQL Server 内运行调用代码，并可访问上下文连接。</summary>
      <returns>True 上下文连接是否可用，另一个 <see cref="T:Microsoft.SqlServer.Server.SqlContext" /> 可以访问成员。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlContext.Pipe">
      <summary>获取允许调用方发送结果集、 消息以及向客户端的命令的执行结果的管道对象。</summary>
      <returns>一个实例 <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> 管道是否可用，或 null 如果在上下文中调用管道不可用 （例如，在用户定义函数）。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlContext.TriggerContext">
      <summary>获取用于调用方提供了有关导致触发器激发，以及已更新的列的映射信息的触发器上下文。</summary>
      <returns>一个实例 <see cref="T:Microsoft.SqlServer.Server.SqlTriggerContext" /> 触发器上下文是否可用，或 null 如果触发器调用外部调用。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlContext.WindowsIdentity">
      <summary>调用方的 Microsoft Windows 标识。</summary>
      <returns>一个 <see cref="T:System.Security.Principal.WindowsIdentity" /> 实例，它表示调用方的 Windows 标识或 null 如果客户端进行身份验证使用 SQL Server 身份验证。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount">
      <summary>获取数据行的列数。 此属性是只读的。</summary>
      <returns>数据行的列数，其形式为整数。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlDataRecord.Item(System.Int32)">
      <summary>为列 <paramref name="ordinal" /> 参数所指定的列，获取公共语言运行时 (CLR) 类型值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>
        <paramref name="ordinal" /> 指定的列的 CLR 类型值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlDataRecord.Item(System.String)">
      <summary>为列 <paramref name="name" /> 参数所指定的列，获取公共语言运行时 (CLR) 类型值。</summary>
      <param name="name">列的名称。</param>
      <returns>
        <paramref name="name" /> 指定的列的 CLR 类型值。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlFacetAttribute.IsFixedLength">
      <summary>指示用户定义类型的返回类型是否为固定长度。</summary>
      <returns>true 如果返回类型是固定的长度。否则为 false。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlFacetAttribute.IsNullable">
      <summary>指示是否可以为用户定义类型的返回类型 null。</summary>
      <returns>true 如果用户定义类型的返回类型可以为 null; 否则为 false。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlFacetAttribute.MaxSize">
      <summary>使用逻辑单位，用户定义类型的基础的字段类型的最大大小。</summary>
      <returns>
        <see cref="T:System.Int32" /> 表示的最大大小的基础的字段类型的逻辑单元。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlFacetAttribute.Precision">
      <summary>用户定义类型的返回类型的精度。</summary>
      <returns>
        <see cref="T:System.Int32" /> 表示返回类型的精度。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlFacetAttribute.Scale">
      <summary>用户定义类型的返回类型的小数位数。</summary>
      <returns>
        <see cref="T:System.Int32" /> 表示返回类型的小数位数。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlFunctionAttribute.DataAccess">
      <summary>指示函数是否涉及 SQL Server 的本地实例中存储的用户数据访问权限。</summary>
      <returns>
        <see cref="T:Microsoft.SqlServer.Server.DataAccessKind" />。None︰ 不访问数据。<see cref="T:Microsoft.SqlServer.Server.DataAccessKind" />。Read︰ 只是读取用户数据。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlFunctionAttribute.FillRowMethodName">
      <summary>TVF 约定所使用的表值函数 (TVF) 位于同一类中的方法的名称。</summary>
      <returns>一个 <see cref="T:System.String" /> 值，该值表示 TVF 约定所使用的方法的名称。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlFunctionAttribute.IsDeterministic">
      <summary>指示用户定义函数是否具有确定性。</summary>
      <returns>true 如果该函数具有确定性。否则为 false。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlFunctionAttribute.IsPrecise">
      <summary>指示函数是否涉及不精确的计算，如浮点运算。</summary>
      <returns>true 如果函数涉及精确的计算;否则为 false。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlFunctionAttribute.Name">
      <summary>在 SQL Server 中应在其下注册该函数的名称。</summary>
      <returns>一个 <see cref="T:System.String" /> 值，该值表示应在其下注册的函数的名称。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlFunctionAttribute.SystemDataAccess">
      <summary>指示函数是否需要对存储在系统目录或 SQL Server 的虚拟系统表中的数据的访问。</summary>
      <returns>
        <see cref="T:Microsoft.SqlServer.Server.DataAccessKind" />。None︰ 不会访问系统数据。<see cref="T:Microsoft.SqlServer.Server.DataAccessKind" />。Read︰ 仅读取系统数据。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlFunctionAttribute.TableDefinition">
      <summary>一个字符串，表示表定义的结果时，如果该方法用作表值函数 (TVF)。</summary>
      <returns>一个 <see cref="T:System.String" /> 值，该值表示表定义的结果。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.CompareOptions">
      <summary>获取用于列或参数的比较规则。</summary>
      <returns>使用列或参数的比较规则 <see cref="T:System.Data.SqlTypes.SqlCompareOptions" />。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.DbType">
      <summary>获取列或参数的数据类型。</summary>
      <returns>数据类型的列或参数作为 <see cref="T:System.Data.DbType" />。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.IsUniqueKey">
      <summary>指示表值参数中的列是否唯一。</summary>
      <returns>一个 Boolean 值。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.LocaleId">
      <summary>获取列或参数的区域设置 ID。</summary>
      <returns>列或参数的区域设置 ID <see cref="T:System.Int64" />。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.Max">
      <summary>获取的长度 text, ，ntext, ，和 image 数据类型。</summary>
      <returns>长度 text, ，ntext, ，和 image 数据类型。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.MaxLength">
      <summary>获取列或参数的最大长度。</summary>
      <returns>列或参数的最大长度 <see cref="T:System.Int64" />。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.Name">
      <summary>获取列或参数的名称。</summary>
      <returns>名称的列或参数作为 <see cref="T:System.String" />。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="Name" /> 中的指定构造函数的长度超过 128 个字符。</exception>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.Precision">
      <summary>获取列或参数的精度。</summary>
      <returns>列或参数的精度 <see cref="T:System.Byte" />。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.Scale">
      <summary>获取列或参数的小数位数。</summary>
      <returns>列或参数的小数位数。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.SortOrder">
      <summary>返回某一列的排序顺序。</summary>
      <returns>一个 <see cref="T:System.Data.SqlClient.SortOrder" /> 对象。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.SortOrdinal">
      <summary>返回的第几个排序列。</summary>
      <returns>排序列的序号。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.SqlDbType">
      <summary>获取列或参数的数据类型。</summary>
      <returns>数据类型的列或参数作为 <see cref="T:System.Data.DbType" />。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.Type">
      <summary>获取用户定义类型 (UDT) 的公共语言运行时 (CLR) 类型。</summary>
      <returns>作为用户定义的类型的 CLR 类型名称 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.TypeName">
      <summary>获取用户定义类型 (UDT) 或 SQL Server 类型实例所表示的由三部分名称。</summary>
      <returns>为 UDT 或 SQL Server 类型的名称 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.UseServerDefault">
      <summary>将报告此列是否应使用默认服务器值。</summary>
      <returns>一个 Boolean 值。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.XmlSchemaCollectionDatabase">
      <summary>获取此 XML 实例的架构集合所在的数据库的名称。</summary>
      <returns>此 XML 实例的架构集合所在的位置作为数据库的名称 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.XmlSchemaCollectionName">
      <summary>获取此 XML 实例的架构集合的名称。</summary>
      <returns>作为此 XML 实例的架构集合的名称 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.XmlSchemaCollectionOwningSchema">
      <summary>获取此 XML 实例的架构集合所在的位置的所属关系架构。</summary>
      <returns>作为此 XML 实例的架构集合的位置的所属关系架构 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMethodAttribute.InvokeIfReceiverIsNull">
      <summary>指示 SQL Server 是否应调用在针对 null 实例方法。</summary>
      <returns>true 如果 SQL Server 应调用在针对 null 实例; 方法否则为 false。 如果不能调用该方法 （由于方法上属性）， SQL ServerDbNull 返回。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMethodAttribute.IsMutator">
      <summary>指示用户定义类型 (UDT) 上的方法是否为赋值函数。</summary>
      <returns>true 如果该方法是赋值函数。否则为 false。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMethodAttribute.OnNullCall">
      <summary>指示是否对用户定义类型 (UDT) 方法调用时 null 方法调用中指定输入的参数。</summary>
      <returns>true 如果调用方法时 null 输入的参数指定在方法调用中; false 如果该方法返回 null 时有其输入参数的值 null。 如果不能调用该方法 （由于方法上属性）， SQL ServerDbNull 返回。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlPipe.IsSendingResults">
      <summary>获取一个值，该值指示是否 <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> 中将单个结果集发送回客户端的模式。 此属性是只读的。</summary>
      <returns>true 如果 <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> 调用方法和 <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> 处于的模式将单个结果集发送回客户端; 否则为 false。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlProcedureAttribute.Name">
      <summary>存储过程的名称。</summary>
      <returns>一个 <see cref="T:System.String" /> 表示存储过程的名称。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlTriggerAttribute.Event">
      <summary>触发器及其数据操作语言 (DML) 操作激活触发器的类型。</summary>
      <returns>一个 <see cref="T:System.String" /> 值，该值表示触发器和数据操作语言 (DML) 操作激活触发器的类型。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlTriggerAttribute.Name">
      <summary>触发器的名称。</summary>
      <returns>一个 <see cref="T:System.String" /> 值，该值表示触发器的名称。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlTriggerAttribute.Target">
      <summary>触发器适用的表。</summary>
      <returns>一个 <see cref="T:System.String" /> 值，该值表示表名。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlTriggerContext.ColumnCount">
      <summary>获取由绑定到触发器的数据表所包含的列数。 此属性是只读的。</summary>
      <returns>绑定到触发器，以整数形式的数据表所包含的列数。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlTriggerContext.EventData">
      <summary>获取事件数据特定于激发触发器的操作。</summary>
      <returns>特定于激发的触发器的操作的事件数据 <see cref="T:System.Data.SqlTypes.SqlXml" /> 的详细信息是否可用，则 null 否则为。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlTriggerContext.TriggerAction">
      <summary>指示激发触发器的操作。</summary>
      <returns>激发的触发器的操作 <see cref="T:Microsoft.SqlServer.Server.TriggerAction" />。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute.Format">
      <summary>序列化格式为 <see cref="T:Microsoft.SqlServer.Server.Format" />。</summary>
      <returns>一个 <see cref="T:Microsoft.SqlServer.Server.Format" /> 表示序列化格式。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute.IsInvariantToDuplicates">
      <summary>指示聚合是否与重复值无关。</summary>
      <returns>true 如果聚合与重复值无关;否则为 false。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute.IsInvariantToNulls">
      <summary>指示聚合是否对 null 值固定不变。</summary>
      <returns>true 如果聚合与空值无关;否则为 false。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute.IsInvariantToOrder">
      <summary>指示聚合是否与顺序无关。</summary>
      <returns>true 如果对顺序; 固定不变，则聚合处于否则为 false。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute.IsNullIfEmpty">
      <summary>指示聚合是否返回 null 如果积累了没有值。</summary>
      <returns>true 如果聚合返回 null 如果没有值已累计; 否则为 false。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute.MaxByteSize">
      <summary>以字节为单位的聚合实例的最大大小。</summary>
      <returns>
        <see cref="T:System.Int32" /> 值，该值表示聚合实例的最大大小。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute.Name">
      <summary>聚合的名称。</summary>
      <returns>一个 <see cref="T:System.String" /> 值，该值表示聚合的名称。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute.Format">
      <summary>序列化格式为 <see cref="T:Microsoft.SqlServer.Server.Format" />。</summary>
      <returns>一个 <see cref="T:Microsoft.SqlServer.Server.Format" /> 值，该值表示序列化格式。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute.IsByteOrdered">
      <summary>指示用户定义类型是否为字节进行排序。</summary>
      <returns>true 如果用户定义类型是字节进行排序;否则为 false。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute.IsFixedLength">
      <summary>指示此用户定义类型的所有实例都是否具有相同的长度。</summary>
      <returns>true 如果此类型的所有实例都都具有相同的长度;否则为 false。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute.MaxByteSize">
      <summary>实例，以字节为单位的最大大小。</summary>
      <returns>
        <see cref="T:System.Int32" /> 值，该值表示该实例的最大大小。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute.Name">
      <summary>用户定义类型的 SQL Server 名称。</summary>
      <returns>一个 <see cref="T:System.String" /> 值，该值表示用户定义类型的 SQL Server 名称。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute.ValidationMethodName">
      <summary>用来验证用户定义类型的实例的方法的名称。</summary>
      <returns>一个 <see cref="T:System.String" /> 表示用来验证用户定义类型的实例的方法的名称。</returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill">
      <summary>获取或设置一个值，该值指示是否 <see cref="M:System.Data.DataRow.AcceptChanges" /> 上调用 <see cref="T:System.Data.DataRow" /> 添加到后 <see cref="T:System.Data.DataTable" /> 期间的任何 填充 操作。</summary>
      <returns>true 如果 <see cref="M:System.Data.DataRow.AcceptChanges" /> 上调用 <see cref="T:System.Data.DataRow" />; 否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.AcceptChangesDuringUpdate">
      <summary>获取或设置是否 <see cref="M:System.Data.DataRow.AcceptChanges" /> 期间调用 <see cref="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)" />。</summary>
      <returns>true 如果 <see cref="M:System.Data.DataRow.AcceptChanges" /> 期间调用 <see cref="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)" />; 否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.ContinueUpdateOnError">
      <summary>获取或设置一个值，指定是否生成错误时出现的异常在过程中遇到的行更新。</summary>
      <returns>true 若要继续而不会生成异常，则此更新否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.FillLoadOption">
      <summary>获取或设置 <see cref="T:System.Data.LoadOption" /> ，它确定适配器的填充方式 <see cref="T:System.Data.DataTable" /> 从 <see cref="T:System.Data.Common.DbDataReader" />。</summary>
      <returns>一个 <see cref="T:System.Data.LoadOption" /> 值。</returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.MissingMappingAction">
      <summary>确定当传入的数据没有匹配的表或列时要执行的操作。</summary>
      <returns>
        <see cref="T:System.Data.MissingMappingAction" /> 值之一。 默认值为 Passthrough。</returns>
      <exception cref="T:System.ArgumentException">设置的值不是之一 <see cref="T:System.Data.MissingMappingAction" /> 值。</exception>
    </member>
    <member name="P:System.Data.Common.DataAdapter.MissingSchemaAction">
      <summary>确定要在现有时执行的操作 <see cref="T:System.Data.DataSet" /> 架构与传入的数据不匹配。</summary>
      <returns>
        <see cref="T:System.Data.MissingSchemaAction" /> 值之一。 默认值为 Add。</returns>
      <exception cref="T:System.ArgumentException">设置的值不是之一 <see cref="T:System.Data.MissingSchemaAction" /> 值。</exception>
    </member>
    <member name="P:System.Data.Common.DataAdapter.ReturnProviderSpecificTypes">
      <summary>获取或设置是否 Fill 方法应返回提供程序特定值或常见符合 cls 的值。</summary>
      <returns>true 如果 Fill 方法应返回提供程序特定的值; 否则为 false 返回常见符合 cls 的值。</returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings">
      <summary>指示如何将源表映射到数据集表。</summary>
      <returns>一个集合，提供返回的记录之间的主映射和 <see cref="T:System.Data.DataSet" />。 默认值为空集合。</returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.TableMappings">
      <summary>获取一个集合，它提供了源表之间的主映射的 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>一个集合，提供返回的记录之间的主映射和 <see cref="T:System.Data.DataSet" />。 默认值为空集合。</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMapping.DataSetColumn">
      <summary>获取或设置中的列名称 <see cref="T:System.Data.DataSet" /> 映射到。</summary>
      <returns>中的数据列的名称 <see cref="T:System.Data.DataSet" /> 映射到。 名称不区分大小写。</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMapping.SourceColumn">
      <summary>获取或设置数据源从映射中的列的名称。 名称是区分大小写。</summary>
      <returns>区分大小写的数据源中的列名称。</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.Count">
      <summary>获取的数 <see cref="T:System.Data.Common.DataColumnMapping" /> 集合中的对象。</summary>
      <returns>集合中项的数目。</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.Item(System.Int32)">
      <summary>获取或设置 <see cref="T:System.Data.Common.DataColumnMapping" /> 的指定索引处的对象。</summary>
      <param name="index">从零开始的索引 <see cref="T:System.Data.Common.DataColumnMapping" /> 要查找对象。</param>
      <returns>
        <see cref="T:System.Data.Common.DataColumnMapping" /> 中指定索引处的对象。</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.Item(System.String)">
      <summary>获取或设置 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象具有指定的源列名称。</summary>
      <param name="sourceColumn">区分大小写的源列的名称。</param>
      <returns>
        <see cref="T:System.Data.Common.DataColumnMapping" /> 对象具有指定的源列名称。</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示对 <see cref="T:System.Collections.ICollection" /> 的访问是否同步（线程安全）。</summary>
      <returns>如果对 true 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否具有固定大小。</summary>
      <returns>如果 true 具有固定大小，则为 <see cref="T:System.Collections.IList" />；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否为只读。</summary>
      <returns>如果 <see cref="T:System.Collections.IList" /> 是只读的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置指定索引处的元素。</summary>
      <param name="index">要获取或设置的元素的从零开始的索引。</param>
      <returns>指定索引处的元素。</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Data#IColumnMappingCollection#Item(System.String)">
      <summary>获取或设置 <see cref="T:System.Data.IColumnMapping" /> 对象具有指定 SourceColumn 名称。</summary>
      <param name="index">元素的索引。</param>
      <returns>IColumnMapping 对象具有指定 SourceColumn 名称。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMapping.ColumnMappings">
      <summary>获取 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 的 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>数据列映射集合。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMapping.DataSetTable">
      <summary>获取或设置中的表名称 <see cref="T:System.Data.DataSet" />。</summary>
      <returns>中的表名称 <see cref="T:System.Data.DataSet" />。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMapping.SourceTable">
      <summary>获取或设置从数据源的区分大小写的源表名称。</summary>
      <returns>数据源的区分大小写的源表名称。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMapping.System#Data#ITableMapping#ColumnMappings">
      <summary>获取派生 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 为 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>数据列映射集合。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.Count">
      <summary>获取的数 <see cref="T:System.Data.Common.DataTableMapping" /> 集合中的对象。</summary>
      <returns>数 DataTableMapping 集合中的对象。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.Item(System.Int32)">
      <summary>获取或设置 <see cref="T:System.Data.Common.DataTableMapping" /> 的指定索引处的对象。</summary>
      <param name="index">从零开始的索引 <see cref="T:System.Data.Common.DataTableMapping" /> 要返回对象。</param>
      <returns>
        <see cref="T:System.Data.Common.DataTableMapping" /> 中指定索引处的对象。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.Item(System.String)">
      <summary>获取或设置 <see cref="T:System.Data.Common.DataTableMapping" /> 对象使用指定的源的表名。</summary>
      <param name="sourceTable">区分大小写的源表的名称。</param>
      <returns>
        <see cref="T:System.Data.Common.DataTableMapping" /> 对象使用指定的源的表名。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果对 true 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否具有固定大小。</summary>
      <returns>如果 true 具有固定大小，则为 <see cref="T:System.Collections.IList" />；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否为只读。</summary>
      <returns>如果 <see cref="T:System.Collections.IList" /> 是只读的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置指定索引处的集合中的项。</summary>
      <param name="index">要获取或设置项的从零开始索引。</param>
      <returns>指定索引处的元素。</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Data#ITableMappingCollection#Item(System.String)">
      <summary>获取或设置的实例 <see cref="T:System.Data.ITableMapping" /> 具有指定 <see cref="P:System.Data.ITableMapping.SourceTable" /> 名称。</summary>
      <param name="index">SourceTable 名称 <see cref="T:System.Data.ITableMapping" />。</param>
      <returns>实例 <see cref="T:System.Data.ITableMapping" /> 具有指定 SourceTable 名称。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.CommandText">
      <summary>获取或设置要对数据源运行的文本命令。</summary>
      <returns>要执行的文本命令。 默认值为空字符串 ("")。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.CommandTimeout">
      <summary>获取或设置在终止尝试执行命令并生成错误之前的等待时间。</summary>
      <returns>等待命令执行所需的时间（以秒为单位）。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.CommandType">
      <summary>指示或指定了 <see cref="P:System.Data.Common.DbCommand.CommandText" /> 属性将被解释。</summary>
      <returns>
        <see cref="T:System.Data.CommandType" /> 值之一。 默认值为 Text。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.Connection">
      <summary>获取或设置此 <see cref="T:System.Data.Common.DbConnection" /> 使用的 <see cref="T:System.Data.Common.DbCommand" />。</summary>
      <returns>与数据源的连接。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.DbConnection">
      <summary>获取或设置此 <see cref="T:System.Data.Common.DbConnection" /> 使用的 <see cref="T:System.Data.Common.DbCommand" />。</summary>
      <returns>与数据源的连接。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.DbParameterCollection">
      <summary>获取的集合 <see cref="T:System.Data.Common.DbParameter" /> 对象。</summary>
      <returns>SQL 语句或存储的过程的参数。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.DbTransaction">
      <summary>获取或设置 <see cref="P:System.Data.Common.DbCommand.DbTransaction" /> 中此 <see cref="T:System.Data.Common.DbCommand" /> 对象执行。</summary>
      <returns>.NET Framework 数据提供程序的命令对象在其中执行的事务。 默认值为空引用 (Nothing 在 Visual Basic 中)。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.DesignTimeVisible">
      <summary>获取或设置一个值，该值指示命令对象是否应在一个自定义的界面控件中可见。</summary>
      <returns>true, 如果命令对象应会显示在控件;否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.Parameters">
      <summary>获取的集合 <see cref="T:System.Data.Common.DbParameter" /> 对象。 有关参数的详细信息，请参阅 配置参数和参数数据类型。</summary>
      <returns>SQL 语句或存储的过程的参数。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.System#Data#IDbCommand#Connection">
      <summary>获取或设置 <see cref="T:System.Data.IDbConnection" /> 此实例所使用的 <see cref="T:System.Data.IDbCommand" />。</summary>
      <returns>与数据源的连接。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.System#Data#IDbCommand#Parameters">
      <summary>获取 <see cref="T:System.Data.IDataParameterCollection" />。</summary>
      <returns>SQL 语句或存储的过程的参数。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.System#Data#IDbCommand#Transaction">
      <summary>获取或设置 <see cref="P:System.Data.Common.DbCommand.DbTransaction" /> 中此 <see cref="T:System.Data.Common.DbCommand" /> 对象执行。</summary>
      <returns>在其中事务 Command 对象的.NET Framework 数据提供程序执行。 默认值为空引用 (Nothing 在 Visual Basic 中)。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.Transaction">
      <summary>获取或设置 <see cref="T:System.Data.Common.DbTransaction" /> 中此 <see cref="T:System.Data.Common.DbCommand" /> 对象执行。</summary>
      <returns>在其中事务 Command 对象的.NET Framework 数据提供程序执行。 默认值为空引用 (Nothing 在 Visual Basic 中)。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.UpdatedRowSource">
      <summary>获取或设置如何将命令结果应用于 <see cref="T:System.Data.DataRow" /> 时使用的 Update 方法 <see cref="T:System.Data.Common.DbDataAdapter" />。</summary>
      <returns>
        <see cref="T:System.Data.UpdateRowSource" /> 值之一。 默认值是 Both 如果该命令自动生成。 默认值为 None。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.CatalogLocation">
      <summary>获取或设置 <see cref="T:System.Data.Common.CatalogLocation" /> 实例 <see cref="T:System.Data.Common.DbCommandBuilder" /> 类。</summary>
      <returns>一个 <see cref="T:System.Data.Common.CatalogLocation" /> 对象。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.CatalogSeparator">
      <summary>设置或获取一个字符串，用于为实例的目录分隔符 <see cref="T:System.Data.Common.DbCommandBuilder" /> 类。</summary>
      <returns>一个字符串，指示的实例一起使用的目录分隔符 <see cref="T:System.Data.Common.DbCommandBuilder" /> 类。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.ConflictOption">
      <summary>指定使用哪些 <see cref="T:System.Data.ConflictOption" /> 是要使用 <see cref="T:System.Data.Common.DbCommandBuilder" />。</summary>
      <returns>返回的一个 <see cref="T:System.Data.ConflictOption" /> 描述此行为值 <see cref="T:System.Data.Common.DbCommandBuilder" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.DataAdapter">
      <summary>获取或设置 <see cref="T:System.Data.Common.DbDataAdapter" /> 对于的 TRANSACT-SQL 语句会自动生成的对象。</summary>
      <returns>一个 <see cref="T:System.Data.Common.DbDataAdapter" /> 对象。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.QuotePrefix">
      <summary>获取或设置的起始字符或字符指定其名称包含空格或保留的标记等字符的数据库对象 （例如，表或列） 时使用。</summary>
      <returns>开头字符或要使用的字符。 默认值为一个空字符串。</returns>
      <exception cref="T:System.InvalidOperationException">生成 insert、 update 或 delete 命令后，不能更改此属性。</exception>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.QuoteSuffix">
      <summary>获取或设置结束字符或字符指定其名称包含空格或保留的标记等字符的数据库对象 （例如，表或列） 时使用。</summary>
      <returns>结束字符或要使用的字符。 默认值为一个空字符串。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.SchemaSeparator">
      <summary>获取或设置要用于架构标识符和任何其他标识符之间的分隔符的字符。</summary>
      <returns>要用作架构分隔符的字符。</returns>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.SetAllValues">
      <summary>指定是否在 update 语句中所有列的值都是包含还是仅更改的列值。</summary>
      <returns>true 如果由生成的 UPDATE 语句 <see cref="T:System.Data.Common.DbCommandBuilder" /> 要包括所有列; false 如果它都包含仅更改了列。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnection.ConnectionString">
      <summary>获取或设置用来打开该连接的字符串。</summary>
      <returns>用于建立初始连接的连接字符串。 连接字符串的确切内容取决于此连接的特定数据源。 默认值为一个空字符串。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnection.ConnectionTimeout">
      <summary>获取要在终止尝试并生成错误之前的连接时等待的时间。</summary>
      <returns>等待连接打开所需的时间（以秒为单位）。 默认值是由正在使用的连接的特定类型确定的。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnection.Database">
      <summary>获取打开连接时后, 当前数据库的名称或打开连接前在连接字符串中指定的数据库名称。</summary>
      <returns>当前数据库的名称或打开连接后要使用的数据库的名称。 默认值为一个空字符串。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnection.DataSource">
      <summary>获取要连接到数据库服务器的名称。</summary>
      <returns>要连接到数据库服务器的名称。 默认值为一个空字符串。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnection.DbProviderFactory">
      <summary>获取此 <see cref="T:System.Data.Common.DbProviderFactory" /> 的 <see cref="T:System.Data.Common.DbConnection" />。</summary>
      <returns>一组方法用于创建一个提供程序实现的数据源类的实例。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnection.ServerVersion">
      <summary>获取一个字符串，表示该对象连接到服务器的版本。</summary>
      <returns>数据库的版本。 返回的字符串的格式取决于正在使用的连接的特定类型。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Data.Common.DbConnection.ServerVersion" /> 返回的任务尚未完成，在调用后未打开连接时调用了 <see cref="Overload:System.Data.Common.DbConnection.OpenAsync" />。</exception>
    </member>
    <member name="P:System.Data.Common.DbConnection.State">
      <summary>获取一个字符串，描述连接状态。</summary>
      <returns>连接的状态。 返回的字符串的格式取决于正在使用的连接的特定类型。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.BrowsableConnectionString">
      <summary>获取或设置一个值，该值指示 <see cref="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString" /> 属性是否在 Visual Studio 设计器中可见。</summary>
      <returns>如果连接字符串在设计器中可见，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString">
      <summary>获取或设置与 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 相关联的连接字符串。</summary>
      <returns>使用 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 中包含的键/值对创建的当前连接字符串。 默认值为一个空字符串。</returns>
      <exception cref="T:System.ArgumentException">提供的连接字符串参数无效。</exception>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.Count">
      <summary>获取属性 <see cref="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString" /> 中包含的键的当前数目。</summary>
      <returns>由 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 实例维护的连接字符串中包含的键的数目。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 是否具有固定大小。</summary>
      <returns>如果 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 具有固定大小，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 是否为只读。</summary>
      <returns>如果 true 为只读，则为 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.Item(System.String)">
      <summary>获取或设置与指定的键关联的值。</summary>
      <param name="keyword">要获取或设置的项的键。</param>
      <returns>与指定的键相关联的值。 如果指定键未找到，尝试让其返回空引用（在 Visual Basic 中为 Nothing），并尝试设置为使用指定键创建新的元素。传递 null 键（在 Visual Basic 中为 Nothing）将引发 <see cref="T:System.ArgumentNullException" />。 分配一个删除键/值对的 null 值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为空引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.NotSupportedException">设置了该属性，但 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 为只读。- 或 -设置了该属性，但 <paramref name="keyword" /> 不存在于集合中，且 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 具有固定的大小。</exception>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.Keys">
      <summary>获取包含 <see cref="T:System.Collections.ICollection" /> 中的键的 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 中的键。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果对 true 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Item(System.Object)">
      <summary>获取或设置具有指定键的元素。</summary>
      <param name="keyword">要获取或设置的元素的键。</param>
      <returns>带有指定键的元素。</returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.Values">
      <summary>获取包含 <see cref="T:System.Collections.ICollection" /> 中的值的 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，包含 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 中的值。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.DeleteCommand">
      <summary>获取或设置用于从数据集中删除记录的命令。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> 过程中使用 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> 来删除已删除行在数据集中的数据源中的记录。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.FillCommandBehavior">
      <summary>获取或设置用于填充数据适配器的命令的行为。</summary>
      <returns>
        <see cref="T:System.Data.CommandBehavior" /> 的用来填充数据适配器的命令。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.InsertCommand">
      <summary>获取或设置用来将新记录插入到数据源的命令。</summary>
      <returns>一个 <see cref="T:System.Data.IDbCommand" /> 过程中使用 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> 以新行在数据集中的数据源中插入记录。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.SelectCommand">
      <summary>获取或设置用来选择数据源中的记录的命令。</summary>
      <returns>一个 <see cref="T:System.Data.IDbCommand" /> 过程中使用 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> 从放入数据集中的数据源选择记录。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand">
      <summary>获取或设置用于从数据集中删除记录的 SQL 语句。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> 过程中使用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 来删除已删除行在数据集中的数据源中的记录。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand">
      <summary>获取或设置用于将新记录插入到数据源的 SQL 语句。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> 过程中使用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 以新行在数据集中的数据源中插入记录。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand">
      <summary>获取或设置用于在数据源中选择记录的 SQL 语句。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> 过程中使用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 从放入数据集中的数据源选择记录。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand">
      <summary>获取或设置用于更新数据源中的记录的 SQL 语句。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> 过程中使用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 来更新数据集中的已修改行的数据源中的记录。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.UpdateBatchSize">
      <summary>获取或设置一个值，启用或禁用批处理支持，并指定可以在一个批次中执行的命令数。</summary>
      <returns>要处理的每批行数。值是效果0批大小没有限制。1禁用批量更新。&gt; 1使用多批发送更改 <see cref="P:System.Data.Common.DbDataAdapter.UpdateBatchSize" /> 一次的操作。当将此值设置为 1 以外的值，与关联的所有命令 <see cref="T:System.Data.Common.DbDataAdapter" /> 必须具有其 <see cref="P:System.Data.IDbCommand.UpdatedRowSource" /> 属性设置为 无 或 输出参数。 否则将引发异常。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.UpdateCommand">
      <summary>获取或设置用于更新数据源中的记录的命令。</summary>
      <returns>一个 <see cref="T:System.Data.IDbCommand" /> 过程中使用 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> 来更新数据集中的已修改行的数据源中的记录。</returns>
    </member>
    <member name="P:System.Data.Common.DBDataPermission.AllowBlankPassword">
      <summary>获取一个值，该值指示是否允许使用空白密码。</summary>
      <returns>true 如果允许密码为空，否则， false。</returns>
    </member>
    <member name="P:System.Data.Common.DBDataPermissionAttribute.AllowBlankPassword">
      <summary>获取或设置一个值，该值指示是否允许密码为空。</summary>
      <returns>true 如果允许使用空白密码;否则为 false。</returns>
    </member>
    <member name="P:System.Data.Common.DBDataPermissionAttribute.ConnectionString">
      <summary>获取或设置允许的连接字符串。</summary>
      <returns>允许的连接字符串。</returns>
    </member>
    <member name="P:System.Data.Common.DBDataPermissionAttribute.KeyRestrictionBehavior">
      <summary>标识是否由连接字符串参数的列表标识 <see cref="P:System.Data.Common.DBDataPermissionAttribute.KeyRestrictions" /> 属性是允许的唯一连接字符串参数。</summary>
      <returns>
        <see cref="T:System.Data.KeyRestrictionBehavior" /> 值之一。</returns>
    </member>
    <member name="P:System.Data.Common.DBDataPermissionAttribute.KeyRestrictions">
      <summary>获取或设置允许或禁止使用的字符串参数的连接。</summary>
      <returns>一个或多个连接字符串参数，允许或禁止使用。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataReader.Depth">
      <summary>获取一个值，该值指示当前行的嵌套深度。</summary>
      <returns>当前行的嵌套深度。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataReader.FieldCount">
      <summary>获取当前行中的列数。</summary>
      <returns>当前行中的列数。</returns>
      <exception cref="T:System.NotSupportedException">没有当前连接到 SQL Server 的实例。</exception>
    </member>
    <member name="P:System.Data.Common.DbDataReader.HasRows">
      <summary>获取一个值，该值指示此 <see cref="T:System.Data.Common.DbDataReader" /> 是否包含一个或多个行。</summary>
      <returns>true 如果 <see cref="T:System.Data.Common.DbDataReader" /> 包含一个或多个行; 否则为 false。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataReader.IsClosed">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.Common.DbDataReader" /> 是否已关闭。</summary>
      <returns>true 如果 <see cref="T:System.Data.Common.DbDataReader" /> 已关闭，否则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.SqlClient.SqlDataReader" /> 已关闭。</exception>
    </member>
    <member name="P:System.Data.Common.DbDataReader.Item(System.Int32)">
      <summary>以 <see cref="T:System.Object" /> 实例的形式获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引超出了范围 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />。</exception>
    </member>
    <member name="P:System.Data.Common.DbDataReader.Item(System.String)">
      <summary>以 <see cref="T:System.Object" /> 实例的形式获取指定列的值。</summary>
      <param name="name">列的名称。</param>
      <returns>指定列的值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">找到具有指定名称没有列。</exception>
    </member>
    <member name="P:System.Data.Common.DbDataReader.RecordsAffected">
      <summary>获取通过执行 SQL 语句更改、插入或删除的行数。</summary>
      <returns>更改、插入或删除的行数。 在为 SELECT 语句; 的-1如果受不影响任何行，则为 0 或语句失败。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataReader.VisibleFieldCount">
      <summary>获取 <see cref="T:System.Data.Common.DbDataReader" /> 中未隐藏的字段的数目。</summary>
      <returns>未隐藏的字段的数目。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataRecord.FieldCount">
      <summary>指示当前记录中字段的数目。 此属性是只读的。</summary>
      <returns>当前记录中的字段数。</returns>
      <exception cref="T:System.NotSupportedException">未连接到要读取的数据源。</exception>
    </member>
    <member name="P:System.Data.Common.DbDataRecord.Item(System.Int32)">
      <summary>指示在给定列序号其本机格式中的指定列的值。 此属性是只读的。</summary>
      <param name="i">列序号。</param>
      <returns>以其本机格式的指定列处的值。</returns>
    </member>
    <member name="P:System.Data.Common.DbDataRecord.Item(System.String)">
      <summary>指示在给定列名称其本机格式中的指定列的值。 此属性是只读的。</summary>
      <param name="name">列名。</param>
      <returns>以其本机格式的指定列处的值。</returns>
    </member>
    <member name="P:System.Data.Common.DbEnumerator.Current">
      <summary>获取集合中的当前元素。</summary>
      <returns>集合中的当前元素。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在集合或最后一个元素之后的第一个元素之前。</exception>
    </member>
    <member name="P:System.Data.Common.DbParameter.DbType">
      <summary>获取或设置参数的 <see cref="T:System.Data.DbType" />。</summary>
      <returns>
        <see cref="T:System.Data.DbType" /> 值之一。 默认值为 <see cref="F:System.Data.DbType.String" />。</returns>
      <exception cref="T:System.ArgumentException">该属性未设置为有效 <see cref="T:System.Data.DbType" />。</exception>
    </member>
    <member name="P:System.Data.Common.DbParameter.Direction">
      <summary>获取或设置一个值，该值指示参数是只可输入的参数、只可输出的参数、双向参数还是存储过程返回值参数。</summary>
      <returns>
        <see cref="T:System.Data.ParameterDirection" /> 值之一。 默认值为 Input。</returns>
      <exception cref="T:System.ArgumentException">属性未设置为一个有效 <see cref="T:System.Data.ParameterDirection" /> 值。</exception>
    </member>
    <member name="P:System.Data.Common.DbParameter.IsNullable">
      <summary>获取或设置一个值，该值指示参数是否接受 null 值。</summary>
      <returns>如果接受 null 值，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.ParameterName">
      <summary>获取或设置 <see cref="T:System.Data.Common.DbParameter" /> 的名称。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbParameter" /> 的名称。 默认值为空字符串("")。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.Precision">
      <summary>[在 .NET Framework 4.5.1 和更高版本中受支持] 获取或设置用于表示 <see cref="P:System.Data.Common.DbParameter.Value" /> 属性的最大位数。</summary>
      <returns>用于表示 <see cref="P:System.Data.Common.DbParameter.Value" /> 属性的最大位数。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.Scale">
      <summary>获取或设置所解析的 <see cref="P:System.Data.Common.DbParameter.Value" /> 的小数位数。</summary>
      <returns>所解析的 <see cref="P:System.Data.Common.DbParameter.Value" /> 的小数位数。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.Size">
      <summary>获取或设置列中的数据的最大大小（以字节为单位）。</summary>
      <returns>列中的数据的最大大小（以字节为单位）。 默认值将根据参数值进行推断。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.SourceColumn">
      <summary>获取或设置映射到的源列的名称 <see cref="T:System.Data.DataSet" /> ，并且用于加载或返回 <see cref="P:System.Data.Common.DbParameter.Value" />。</summary>
      <returns>映射到 <see cref="T:System.Data.DataSet" /> 的源列的名称。 默认值为一个空字符串。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.SourceColumnNullMapping">
      <summary>设置或获取一个值，该值指示源列是否可以为 null。 这允许 <see cref="T:System.Data.Common.DbCommandBuilder" /> 来正确生成为 null 的列的 Update 语句。</summary>
      <returns>如果源列可以为 null，则为 true；否则为 ￼false￼。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.SourceVersion">
      <summary>获取或设置 <see cref="T:System.Data.DataRowVersion" /> 来加载时使用 <see cref="P:System.Data.Common.DbParameter.Value" />。</summary>
      <returns>
        <see cref="T:System.Data.DataRowVersion" /> 值之一。 默认值为 Current。</returns>
      <exception cref="T:System.ArgumentException">属性未设置为其中一个 <see cref="T:System.Data.DataRowVersion" /> 值。</exception>
    </member>
    <member name="P:System.Data.Common.DbParameter.System#Data#IDbDataParameter#Precision">
      <summary>指示数值参数的精度。</summary>
      <returns>用来表示的数字的最大数 Value 数据提供程序属性 Parameter 对象。 默认值为 0，它表示数据提供程序设置的精度 Value。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.System#Data#IDbDataParameter#Scale">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.Data.IDbDataParameter.Scale" />。</summary>
      <returns>所解析的 <see cref="T:System.Data.OleDb.OleDbParameter.Value" /> 的小数位数。 默认值为 0。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.Value">
      <summary>获取或设置参数的值。</summary>
      <returns>充当参数值的 <see cref="T:System.Object" />。 默认值为 null。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.Count">
      <summary>指定集合中项的数目。</summary>
      <returns>集合中项的数目。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.IsFixedSize">
      <summary>指定集合是否为固定大小。</summary>
      <returns>如果集合为固定大小，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.IsReadOnly">
      <summary>指定集合是否为只读。</summary>
      <returns>如果该集合为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.IsSynchronized">
      <summary>指定是否同步集合。</summary>
      <returns>如果同步集合，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.Item(System.Int32)">
      <summary>获取和设置指定索引处的 <see cref="T:System.Data.Common.DbParameter" />。</summary>
      <param name="index">参数的从零开始的索引。</param>
      <returns>位于指定索引处的 <see cref="T:System.Data.Common.DbParameter" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定的索引不存在。</exception>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.Item(System.String)">
      <summary>获取和设置具有指定名称的 <see cref="T:System.Data.Common.DbParameter" />。</summary>
      <param name="parameterName">参数的名称。</param>
      <returns>具有指定名称的 <see cref="T:System.Data.Common.DbParameter" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定的索引不存在。</exception>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.SyncRoot">
      <summary>指定将用于同步集合访问的 <see cref="T:System.Object" />。</summary>
      <returns>用于同步 <see cref="T:System.Data.Common.DbParameterCollection" /> 访问的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置指定索引处的元素。</summary>
      <param name="index">要获取或设置的元素的从零开始的索引。</param>
      <returns>指定索引处的元素。</returns>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.System#Data#IDataParameterCollection#Item(System.String)">
      <summary>获取或设置指定索引处的参数。</summary>
      <param name="parameterName">要检索的参数的名称。</param>
      <returns>
        <see cref="T:System.Object" /> 中指定索引处。</returns>
    </member>
    <member name="P:System.Data.Common.DbProviderFactory.CanCreateDataSourceEnumerator">
      <summary>指定是否特定于 <see cref="T:System.Data.Common.DbProviderFactory" /> 支持 <see cref="T:System.Data.Common.DbDataSourceEnumerator" /> 类。</summary>
      <returns>true 如果实例 <see cref="T:System.Data.Common.DbProviderFactory" /> 支持 <see cref="T:System.Data.Common.DbDataSourceEnumerator" /> 类; 否则为 false。</returns>
    </member>
    <member name="P:System.Data.Common.DbProviderSpecificTypePropertyAttribute.IsProviderSpecificTypeProperty">
      <summary>指示特性化的属性是否是特定于提供程序类型。</summary>
      <returns>true 如果此特性应用于该属性是特定于提供程序类型属性;否则为 false。</returns>
    </member>
    <member name="P:System.Data.Common.DbTransaction.Connection">
      <summary>指定 <see cref="T:System.Data.Common.DbConnection" /> 与事务关联的对象。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbConnection" /> 与事务关联的对象。</returns>
    </member>
    <member name="P:System.Data.Common.DbTransaction.DbConnection">
      <summary>指定 <see cref="T:System.Data.Common.DbConnection" /> 与事务关联的对象。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbConnection" /> 与事务关联的对象。</returns>
    </member>
    <member name="P:System.Data.Common.DbTransaction.IsolationLevel">
      <summary>指定 <see cref="T:System.Data.IsolationLevel" /> 此事务。</summary>
      <returns>
        <see cref="T:System.Data.IsolationLevel" /> 此事务。</returns>
    </member>
    <member name="P:System.Data.Common.DbTransaction.System#Data#IDbTransaction#Connection">
      <summary>获取 <see cref="T:System.Data.Common.DbConnection" /> 对象与该事务，则为 null 引用，如果该事务将不再有效。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbConnection" /> 与事务关联的对象。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.Command">
      <summary>获取 <see cref="T:System.Data.IDbCommand" /> 时执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 调用。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> 时执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 调用。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.Errors">
      <summary>获取由.NET Framework 数据提供程序生成的任何错误时 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> 后执行。</summary>
      <returns>.NET Framework 数据提供程序所生成错误时 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> 后执行。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.RecordsAffected">
      <summary>获取通过执行 SQL 语句更改、插入或删除的行数。</summary>
      <returns>更改、 插入或删除，则行数如果受不影响任何行，则为 0 或语句失败。和-1 表示 SELECT 语句。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.Row">
      <summary>获取 <see cref="T:System.Data.DataRow" /> 通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</summary>
      <returns>
        <see cref="T:System.Data.DataRow" /> 通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.RowCount">
      <summary>获取已更新的记录的批中处理的行数。</summary>
      <returns>int 指定处理的行数。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.StatementType">
      <summary>获取执行 SQL 语句的类型。</summary>
      <returns>执行 SQL 语句的类型。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.Status">
      <summary>获取 <see cref="T:System.Data.UpdateStatus" /> 的 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> 属性。</summary>
      <returns>
        <see cref="T:System.Data.UpdateStatus" /> 值之一。 默认值为 Continue。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.TableMapping">
      <summary>获取 <see cref="T:System.Data.Common.DataTableMapping" /> 通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</summary>
      <returns>
        <see cref="T:System.Data.Common.DataTableMapping" /> 通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.BaseCommand">
      <summary>获取或设置 <see cref="T:System.Data.IDbCommand" /> 的此类的实例的对象。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> 过程中执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.Command">
      <summary>获取 <see cref="T:System.Data.IDbCommand" /> 过程中执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 操作。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> 过程中执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.Errors">
      <summary>获取由.NET Framework 数据提供程序生成的任何错误时 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> 执行。</summary>
      <returns>.NET Framework 数据提供程序所生成错误时 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> 执行。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.Row">
      <summary>获取 <see cref="T:System.Data.DataRow" /> ，将向服务器发送，作为插入、 更新或删除操作的一部分。</summary>
      <returns>
        <see cref="T:System.Data.DataRow" /> 通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.StatementType">
      <summary>获取要执行的 SQL 语句的类型。</summary>
      <returns>要执行的 SQL 语句的类型。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.Status">
      <summary>获取或设置 <see cref="T:System.Data.UpdateStatus" /> 的 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" /> 属性。</summary>
      <returns>
        <see cref="T:System.Data.UpdateStatus" /> 值之一。 默认值为 Continue。</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.TableMapping">
      <summary>获取 <see cref="T:System.Data.Common.DataTableMapping" /> 通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</summary>
      <returns>
        <see cref="T:System.Data.Common.DataTableMapping" /> 通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</returns>
    </member>
    <member name="P:System.Data.Constraint._DataSet">
      <summary>获取 <see cref="T:System.Data.DataSet" /> 此约束所属。</summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> 约束所属。</returns>
    </member>
    <member name="P:System.Data.Constraint.ConstraintName">
      <summary>中的约束的名称 <see cref="T:System.Data.ConstraintCollection" />。</summary>
      <returns>
        <see cref="T:System.Data.Constraint" /> 的名称。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.Constraint" /> 名称为 null 值或空字符串。</exception>
      <exception cref="T:System.Data.DuplicateNameException">
        <see cref="T:System.Data.ConstraintCollection" /> 已包含 <see cref="T:System.Data.Constraint" /> 具有相同名称 （比较不区分大小写。）。</exception>
    </member>
    <member name="P:System.Data.Constraint.ExtendedProperties">
      <summary>获取用户定义的约束属性的集合。</summary>
      <returns>一个 <see cref="T:System.Data.PropertyCollection" /> 的自定义信息。</returns>
    </member>
    <member name="P:System.Data.Constraint.Table">
      <summary>获取 <see cref="T:System.Data.DataTable" /> 向应用约束。</summary>
      <returns>一个 <see cref="T:System.Data.DataTable" /> 向应用约束。</returns>
    </member>
    <member name="P:System.Data.ConstraintCollection.Item(System.Int32)">
      <summary>获取 <see cref="T:System.Data.Constraint" /> 从集合中的指定索引处。</summary>
      <param name="index">要返回的约束的索引。</param>
      <returns>位于指定索引处的 <see cref="T:System.Data.Constraint" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">索引值大于集合中的项的数目。</exception>
    </member>
    <member name="P:System.Data.ConstraintCollection.Item(System.String)">
      <summary>获取 <see cref="T:System.Data.Constraint" /> 从具有指定名称的集合。</summary>
      <param name="name">
        <see cref="P:System.Data.Constraint.ConstraintName" /> 要返回的约束。</param>
      <returns>
        <see cref="T:System.Data.Constraint" /> 具有指定名称; 否则为空值如果 <see cref="T:System.Data.Constraint" /> 不存在。</returns>
    </member>
    <member name="P:System.Data.DataColumn.AllowDBNull">
      <summary>获取或设置一个值，该值指示是否允许空值在本专栏中属于表的行。</summary>
      <returns>true 如果允许 null 值的值;否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Data.DataColumn.AutoIncrement">
      <summary>获取或设置一个值，指示该列是否自动递增的新行添加到表中列的值。</summary>
      <returns>true 如果列的值递增自动保存功能。，否则为 false。 默认值为 false。</returns>
      <exception cref="T:System.ArgumentException">列是计算所得的列。</exception>
    </member>
    <member name="P:System.Data.DataColumn.AutoIncrementSeed">
      <summary>获取或设置包含的列的起始值及其 <see cref="P:System.Data.DataColumn.AutoIncrement" /> 属性设置为 true。 默认值为 0。</summary>
      <returns>起始值为 <see cref="P:System.Data.DataColumn.AutoIncrement" /> 功能。</returns>
    </member>
    <member name="P:System.Data.DataColumn.AutoIncrementStep">
      <summary>获取或设置某一列使用的增量其 <see cref="P:System.Data.DataColumn.AutoIncrement" /> 属性设置为 true。</summary>
      <returns>列的值自动递增的编号。 默认值为 1。</returns>
      <exception cref="T:System.ArgumentException">设置的值为零。</exception>
    </member>
    <member name="P:System.Data.DataColumn.Caption">
      <summary>获取或设置列标题。</summary>
      <returns>列的标题。 如果未设置，则返回 <see cref="P:System.Data.DataColumn.ColumnName" /> 值。</returns>
    </member>
    <member name="P:System.Data.DataColumn.ColumnMapping">
      <summary>获取或设置 <see cref="T:System.Data.MappingType" /> 的列。</summary>
      <returns>
        <see cref="T:System.Data.MappingType" /> 值之一。</returns>
    </member>
    <member name="P:System.Data.DataColumn.ColumnName">
      <summary>获取或设置中的列的名称 <see cref="T:System.Data.DataColumnCollection" />。</summary>
      <returns>列的名称。</returns>
      <exception cref="T:System.ArgumentException">该属性设置为 null 或为空字符串和列属于一个集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">集合中已存在具有相同名称的列。 名称比较不区分大小写。</exception>
    </member>
    <member name="P:System.Data.DataColumn.DataType">
      <summary>获取或设置列中存储的数据类型。</summary>
      <returns>一个 <see cref="T:System.Type" /> 对象，表示列的数据类型。</returns>
      <exception cref="T:System.ArgumentException">已在列存储的数据。</exception>
    </member>
    <member name="P:System.Data.DataColumn.DateTimeMode">
      <summary>获取或设置 DateTimeMode 的列。</summary>
      <returns>
        <see cref="T:System.Data.DataSetDateTime" /> 为指定的列。</returns>
    </member>
    <member name="P:System.Data.DataColumn.DefaultValue">
      <summary>获取或设置列的默认值，则在创建新行。</summary>
      <returns>适合于列的值 <see cref="P:System.Data.DataColumn.DataType" />。</returns>
      <exception cref="T:System.InvalidCastException">当添加行时，默认值不是列的数据类型的实例。</exception>
    </member>
    <member name="P:System.Data.DataColumn.Expression">
      <summary>获取或设置用来筛选行、 计算列中的值或创建聚合列的表达式。</summary>
      <returns>一个表达式来计算列的值或创建聚合列。 一个表达式，表达式的返回类型由 <see cref="P:System.Data.DataColumn.DataType" /> 的列。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Data.DataColumn.AutoIncrement" /> 或 <see cref="P:System.Data.DataColumn.Unique" /> 属性设置为 true。</exception>
      <exception cref="T:System.FormatException">当使用 CONVERT 函数时，表达式的计算结果为一个字符串，但该字符串不包含可以转换为类型参数中的表示形式。</exception>
      <exception cref="T:System.InvalidCastException">当使用 CONVERT 函数时，所请求的转换不可能。 请参阅下列部分获取有关可能的强制转换详细信息中的转换函数。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">当您使用 SUBSTRING 函数时，start 参数超出了范围。- 或 - 当您使用 SUBSTRING 函数时，长度参数超出了范围。</exception>
      <exception cref="T:System.Exception">当您使用 LEN 函数或 TRIM 函数时，该表达式计算结果不为字符串。 这包括表达式的计算结果为 <see cref="T:System.Char" />。</exception>
    </member>
    <member name="P:System.Data.DataColumn.ExtendedProperties">
      <summary>获取与相关联的自定义用户信息的集合 <see cref="T:System.Data.DataColumn" />。</summary>
      <returns>一个 <see cref="T:System.Data.PropertyCollection" /> 的自定义信息。</returns>
    </member>
    <member name="P:System.Data.DataColumn.MaxLength">
      <summary>获取或设置文本列的最大长度。</summary>
      <returns>以字符为单位的列的最大长度。 如果该列具有没有最大长度，值为-1 （默认值）。</returns>
    </member>
    <member name="P:System.Data.DataColumn.Namespace">
      <summary>获取或设置的命名空间 <see cref="T:System.Data.DataColumn" />。</summary>
      <returns>命名空间 <see cref="T:System.Data.DataColumn" />。</returns>
      <exception cref="T:System.ArgumentException">命名空间已有数据。</exception>
    </member>
    <member name="P:System.Data.DataColumn.Ordinal">
      <summary>获取 （从零开始） 中的列的位置 <see cref="T:System.Data.DataColumnCollection" /> 集合。</summary>
      <returns>列的位置。 如果列不是某个集合的成员，则获取-1。</returns>
    </member>
    <member name="P:System.Data.DataColumn.Prefix">
      <summary>获取或设置 XML 前缀的命名空间别名 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>XML 前缀 <see cref="T:System.Data.DataTable" /> 命名空间。</returns>
    </member>
    <member name="P:System.Data.DataColumn.ReadOnly">
      <summary>获取或设置一个值，指示行已添加到表时，就立即列是否允许的更改。</summary>
      <returns>true 如果列只读的;否则为 false。 默认值为 false。</returns>
      <exception cref="T:System.ArgumentException">该属性设置为 false 计算所得的列。</exception>
    </member>
    <member name="P:System.Data.DataColumn.Table">
      <summary>获取 <see cref="T:System.Data.DataTable" /> 列属于对。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> ， <see cref="T:System.Data.DataColumn" /> 属于。</returns>
    </member>
    <member name="P:System.Data.DataColumn.Unique">
      <summary>获取或设置一个值，该值指示是否必须唯一列的每个行中的值。</summary>
      <returns>true 如果值必须是唯一的。否则为 false。 默认值为 false。</returns>
      <exception cref="T:System.ArgumentException">列是计算的列。</exception>
    </member>
    <member name="P:System.Data.DataColumnChangeEventArgs.Column">
      <summary>获取 <see cref="T:System.Data.DataColumn" /> 带有可变值。</summary>
      <returns>
        <see cref="T:System.Data.DataColumn" /> 带有可变值。</returns>
    </member>
    <member name="P:System.Data.DataColumnChangeEventArgs.ProposedValue">
      <summary>获取或设置列建议的新值。</summary>
      <returns>建议的值，类型的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.Data.DataColumnChangeEventArgs.Row">
      <summary>获取 <see cref="T:System.Data.DataRow" /> 具有可变值的列。</summary>
      <returns>
        <see cref="T:System.Data.DataRow" /> 具有可变值的列。</returns>
    </member>
    <member name="P:System.Data.DataColumnCollection.Item(System.Int32)">
      <summary>获取 <see cref="T:System.Data.DataColumn" /> 从集合中的指定索引处。</summary>
      <param name="index">要返回的列的从零开始的索引。</param>
      <returns>位于指定索引处的 <see cref="T:System.Data.DataColumn" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">索引值大于集合中的项的数目。</exception>
    </member>
    <member name="P:System.Data.DataColumnCollection.Item(System.String)">
      <summary>获取 <see cref="T:System.Data.DataColumn" /> 从具有指定名称的集合。</summary>
      <param name="name">
        <see cref="P:System.Data.DataColumn.ColumnName" /> 要返回的列。</param>
      <returns>
        <see cref="T:System.Data.DataColumn" /> 集合中具有指定 <see cref="P:System.Data.DataColumn.ColumnName" />; 否则为空值如果 <see cref="T:System.Data.DataColumn" /> 不存在。</returns>
    </member>
    <member name="P:System.Data.DataRelation.ChildColumns">
      <summary>获取子 <see cref="T:System.Data.DataColumn" /> 这一关系中的对象。</summary>
      <returns>一个 <see cref="T:System.Data.DataColumn" /> 对象数组。</returns>
    </member>
    <member name="P:System.Data.DataRelation.ChildKeyConstraint">
      <summary>获取 <see cref="T:System.Data.ForeignKeyConstraint" /> 关系。</summary>
      <returns>ForeignKeyConstraint。</returns>
    </member>
    <member name="P:System.Data.DataRelation.ChildTable">
      <summary>获取此关系的子表。</summary>
      <returns>一个 <see cref="T:System.Data.DataTable" /> ，它是一种关系的子表。</returns>
    </member>
    <member name="P:System.Data.DataRelation.DataSet">
      <summary>获取 <see cref="T:System.Data.DataSet" /> 到 <see cref="T:System.Data.DataRelation" /> 所属。</summary>
      <returns>一个 <see cref="T:System.Data.DataSet" /> 到 <see cref="T:System.Data.DataRelation" /> 所属。</returns>
    </member>
    <member name="P:System.Data.DataRelation.ExtendedProperties">
      <summary>获取存储自定义的属性的集合。</summary>
      <returns>一个 <see cref="T:System.Data.PropertyCollection" /> ，它包含自定义的属性。</returns>
    </member>
    <member name="P:System.Data.DataRelation.Nested">
      <summary>获取或设置一个值，该值指示是否 <see cref="T:System.Data.DataRelation" /> 对象是否嵌套。</summary>
      <returns>true, 如果 <see cref="T:System.Data.DataRelation" /> 对象是否嵌套; 否则为 false。</returns>
    </member>
    <member name="P:System.Data.DataRelation.ParentColumns">
      <summary>获取一个数组 <see cref="T:System.Data.DataColumn" /> 对象的父列 <see cref="T:System.Data.DataRelation" />。</summary>
      <returns>一个数组 <see cref="T:System.Data.DataColumn" /> 对象的父列 <see cref="T:System.Data.DataRelation" />。</returns>
    </member>
    <member name="P:System.Data.DataRelation.ParentKeyConstraint">
      <summary>获取 <see cref="T:System.Data.UniqueConstraint" /> 保证的父列中的值 <see cref="T:System.Data.DataRelation" /> 是唯一的。</summary>
      <returns>一个 <see cref="T:System.Data.UniqueConstraint" /> 确保父列中的值是唯一。</returns>
    </member>
    <member name="P:System.Data.DataRelation.ParentTable">
      <summary>获取父 <see cref="T:System.Data.DataTable" /> 此 <see cref="T:System.Data.DataRelation" />。</summary>
      <returns>一个 <see cref="T:System.Data.DataTable" /> ，它是此关系的父表。</returns>
    </member>
    <member name="P:System.Data.DataRelation.RelationName">
      <summary>获取或设置用于检索名称 <see cref="T:System.Data.DataRelation" /> 从 <see cref="T:System.Data.DataRelationCollection" />。</summary>
      <returns>名称 <see cref="T:System.Data.DataRelation" />。</returns>
      <exception cref="T:System.ArgumentException">null 或空字符串 ("") 传递到 <see cref="T:System.Data.DataColumn" /> 即 <see cref="T:System.Data.DataRelation" />。</exception>
      <exception cref="T:System.Data.DuplicateNameException">
        <see cref="T:System.Data.DataRelation" /> 属于集合已包含 <see cref="T:System.Data.DataRelation" /> 具有相同的名称。</exception>
    </member>
    <member name="P:System.Data.DataRelationCollection.Item(System.Int32)">
      <summary>获取 <see cref="T:System.Data.DataRelation" /> 的指定索引处的对象。</summary>
      <param name="index">要查找的从零开始索引。</param>
      <returns>
        <see cref="T:System.Data.DataRelation" />, ，或为空值，如果指定 <see cref="T:System.Data.DataRelation" /> 不存在。</returns>
      <exception cref="T:System.IndexOutOfRangeException">索引值大于集合中的项的数目。</exception>
    </member>
    <member name="P:System.Data.DataRelationCollection.Item(System.String)">
      <summary>获取 <see cref="T:System.Data.DataRelation" /> 由名称指定的对象。</summary>
      <param name="name">若要查找的关系的名称。</param>
      <returns>命名的 <see cref="T:System.Data.DataRelation" />, ，或为空值，如果指定 <see cref="T:System.Data.DataRelation" /> 不存在。</returns>
    </member>
    <member name="P:System.Data.DataRow.HasErrors">
      <summary>获取一个值，该值指示行是否存在错误。</summary>
      <returns>true 如果行中包含错误。否则为 false。</returns>
    </member>
    <member name="P:System.Data.DataRow.Item(System.Data.DataColumn)">
      <summary>获取或设置存储在指定的数据 <see cref="T:System.Data.DataColumn" />。</summary>
      <param name="column">一个 <see cref="T:System.Data.DataColumn" /> 包含数据。</param>
      <returns>包该数据的 <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.ArgumentException">列不属于此表。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> 为 null。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试对已删除的行设置值。</exception>
      <exception cref="T:System.InvalidCastException">值与列的数据类型不匹配。</exception>
    </member>
    <member name="P:System.Data.DataRow.Item(System.Data.DataColumn,System.Data.DataRowVersion)">
      <summary>获取存储在指定的数据的指定的版本 <see cref="T:System.Data.DataColumn" />。</summary>
      <param name="column">
        <see cref="T:System.Data.DataColumn" />，包含有关该列的信息。</param>
      <param name="version">其中一个 <see cref="T:System.Data.DataRowVersion" /> 值，该值指定所需的行版本。 可能值为 Default、Original、Current 和 Proposed。</param>
      <returns>包该数据的 <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.ArgumentException">列不属于表。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> 参数包含 null 值。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">行不具有此版本的数据。</exception>
    </member>
    <member name="P:System.Data.DataRow.Item(System.Int32)">
      <summary>获取或设置指定索引的列中存储的数据。</summary>
      <param name="columnIndex">列的从零开始的索引。</param>
      <returns>包该数据的 <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">当您尝试在已删除的行上设置一个值时出现。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="columnIndex" /> 参数不在范围。</exception>
      <exception cref="T:System.InvalidCastException">当您设置的值和新值时发生 <see cref="T:System.Type" /> 不符 <see cref="P:System.Data.DataColumn.DataType" />。</exception>
    </member>
    <member name="P:System.Data.DataRow.Item(System.Int32,System.Data.DataRowVersion)">
      <summary>获取指定索引和版本要检索的数据的列中存储的数据。</summary>
      <param name="columnIndex">列的从零开始的索引。</param>
      <param name="version">其中一个 <see cref="T:System.Data.DataRowVersion" /> 值，该值指定所需的行版本。 可能值为 Default、Original、Current 和 Proposed。</param>
      <returns>包该数据的 <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="columnIndex" /> 参数不在范围。</exception>
      <exception cref="T:System.InvalidCastException">值与列的数据类型不匹配。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">行不具有此版本的数据。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试对已删除的行设置值。</exception>
    </member>
    <member name="P:System.Data.DataRow.Item(System.String)">
      <summary>获取或设置指定名称的列中存储的数据。</summary>
      <param name="columnName">列的名称。</param>
      <returns>包该数据的 <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.ArgumentException">指定的列 <paramref name="columnName" /> 找不到。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">当您尝试在已删除的行上设置一个值时出现。</exception>
      <exception cref="T:System.InvalidCastException">当您设置一个值并将其 <see cref="T:System.Type" /> 不符 <see cref="P:System.Data.DataColumn.DataType" />。</exception>
      <exception cref="T:System.Data.NoNullAllowedException">当尝试将 null 值插入列时会发生其中 <see cref="P:System.Data.DataColumn.AllowDBNull" /> 设置为 false。</exception>
    </member>
    <member name="P:System.Data.DataRow.Item(System.String,System.Data.DataRowVersion)">
      <summary>获取指定列中存储的数据的指定的版本。</summary>
      <param name="columnName">列的名称。</param>
      <param name="version">其中一个 <see cref="T:System.Data.DataRowVersion" /> 值，该值指定所需的行版本。 可能值为 Default、Original、Current 和 Proposed。</param>
      <returns>包该数据的 <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.ArgumentException">指定的列 <paramref name="columnName" /> 找不到。</exception>
      <exception cref="T:System.InvalidCastException">值与列的数据类型不匹配。</exception>
      <exception cref="T:System.Data.VersionNotFoundException">行不具有此版本的数据。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">行已被删除。</exception>
    </member>
    <member name="P:System.Data.DataRow.ItemArray">
      <summary>获取或设置通过数组此行的所有值。</summary>
      <returns>
        <see cref="T:System.Object" /> 类型的数组。</returns>
      <exception cref="T:System.ArgumentException">该数组将大于表中的列数。</exception>
      <exception cref="T:System.InvalidCastException">数组中的值不匹配其 <see cref="P:System.Data.DataColumn.DataType" /> 在其各个供应商 <see cref="T:System.Data.DataColumn" />。</exception>
      <exception cref="T:System.Data.ConstraintException">编辑破坏了约束。</exception>
      <exception cref="T:System.Data.ReadOnlyException">编辑尝试更改只读列的值。</exception>
      <exception cref="T:System.Data.NoNullAllowedException">编辑尝试放入列中的 null 值其中 <see cref="P:System.Data.DataColumn.AllowDBNull" /> 的 <see cref="T:System.Data.DataColumn" /> 对象是 false。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">行已被删除。</exception>
    </member>
    <member name="P:System.Data.DataRow.RowError">
      <summary>获取或设置某一行的自定义错误说明。</summary>
      <returns>描述错误的文本。</returns>
    </member>
    <member name="P:System.Data.DataRow.RowState">
      <summary>获取有关及其与关系行的当前状态 <see cref="T:System.Data.DataRowCollection" />。</summary>
      <returns>
        <see cref="T:System.Data.DataRowState" /> 值之一。</returns>
    </member>
    <member name="P:System.Data.DataRow.Table">
      <summary>获取 <see cref="T:System.Data.DataTable" /> 为其该行有一个架构。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> 此行所属。</returns>
    </member>
    <member name="P:System.Data.DataRowChangeEventArgs.Action">
      <summary>获取发生的操作 <see cref="T:System.Data.DataRow" />。</summary>
      <returns>
        <see cref="T:System.Data.DataRowAction" /> 值之一。</returns>
    </member>
    <member name="P:System.Data.DataRowChangeEventArgs.Row">
      <summary>获取在其发生操作的行。</summary>
      <returns>
        <see cref="T:System.Data.DataRow" /> 后发生了操作。</returns>
    </member>
    <member name="P:System.Data.DataRowCollection.Count">
      <summary>获取的总数 <see cref="T:System.Data.DataRow" /> 此集合中的对象。</summary>
      <returns>总次数 <see cref="T:System.Data.DataRow" /> 此集合中的对象。</returns>
    </member>
    <member name="P:System.Data.DataRowCollection.Item(System.Int32)">
      <summary>获取指定索引处的行。</summary>
      <param name="index">要返回的行的从零开始的索引。</param>
      <returns>指定的 <see cref="T:System.Data.DataRow" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">索引值大于集合中的项的数目。</exception>
    </member>
    <member name="P:System.Data.DataRowView.DataView">
      <summary>获取 <see cref="T:System.Data.DataView" /> 此行所属。</summary>
      <returns>DataView 此行所属。</returns>
    </member>
    <member name="P:System.Data.DataRowView.IsEdit">
      <summary>指示行是否处于编辑模式。</summary>
      <returns>true 如果在行处于，编辑模式，则为否则为 false。</returns>
    </member>
    <member name="P:System.Data.DataRowView.IsNew">
      <summary>指示是否 <see cref="T:System.Data.DataRowView" /> 的新增功能。</summary>
      <returns>true 如果该行被新;否则为 false。</returns>
    </member>
    <member name="P:System.Data.DataRowView.Item(System.Int32)">
      <summary>获取或设置一个值，指定列中。</summary>
      <param name="ndx">指定的列。</param>
      <returns>列的值。</returns>
    </member>
    <member name="P:System.Data.DataRowView.Item(System.String)">
      <summary>获取或设置一个值，指定列中。</summary>
      <param name="property">包含指定的列的字符串。</param>
      <returns>列的值。</returns>
    </member>
    <member name="P:System.Data.DataRowView.Row">
      <summary>获取 <see cref="T:System.Data.DataRow" /> 正在查看。</summary>
      <returns>
        <see cref="T:System.Data.DataRow" /> 正被查看 <see cref="T:System.Data.DataRowView" />。</returns>
    </member>
    <member name="P:System.Data.DataRowView.RowVersion">
      <summary>获取的当前版本说明 <see cref="T:System.Data.DataRow" />。</summary>
      <returns>
        <see cref="T:System.Data.DataRowVersion" /> 值之一。 可能的值有 <see cref="P:System.Data.DataRowView.RowVersion" /> 属性 Default, ，Original, ，Current, ，和 Proposed。</returns>
    </member>
    <member name="P:System.Data.DataRowView.System#ComponentModel#IDataErrorInfo#Error">
      <summary>获取描述对象的任何验证错误的消息。</summary>
      <returns>该对象上的验证错误。</returns>
    </member>
    <member name="P:System.Data.DataRowView.System#ComponentModel#IDataErrorInfo#Item(System.String)">
      <summary>获取具有给定名称的属性的错误消息。</summary>
      <param name="colName">若要获取其错误信息的属性的名称。</param>
      <returns>错误消息中的属性。 默认值为空字符串("")。</returns>
    </member>
    <member name="P:System.Data.DataSet.CaseSensitive">
      <summary>获取或设置一个值，该值指示是否中的字符串比较 <see cref="T:System.Data.DataTable" /> 对象是区分大小写。</summary>
      <returns>true 如果字符串比较是区分大小写。否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Data.DataSet.DataSetName">
      <summary>获取或设置的当前名称 <see cref="T:System.Data.DataSet" />。</summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> 的名称。</returns>
    </member>
    <member name="P:System.Data.DataSet.DefaultViewManager">
      <summary>获取中包含的数据的自定义视图 <see cref="T:System.Data.DataSet" /> 以允许筛选、 搜索和导航使用自定义 <see cref="T:System.Data.DataViewManager" />。</summary>
      <returns>一个 <see cref="T:System.Data.DataViewManager" /> 对象。</returns>
    </member>
    <member name="P:System.Data.DataSet.EnforceConstraints">
      <summary>获取或设置一个值，该值指示是否在尝试任何更新操作时遵循约束规则。</summary>
      <returns>true 如果强制执行规则;否则为 false。 默认值为 true。</returns>
      <exception cref="T:System.Data.ConstraintException">一个或多个约束不能强制实施。</exception>
    </member>
    <member name="P:System.Data.DataSet.ExtendedProperties">
      <summary>获取与相关联的自定义的用户信息的集合 DataSet。</summary>
      <returns>一个 <see cref="T:System.Data.PropertyCollection" /> 与自定义用户的所有信息。</returns>
    </member>
    <member name="P:System.Data.DataSet.HasErrors">
      <summary>获取一个值，该值指示在任何中是否有错误 <see cref="T:System.Data.DataTable" /> 对象在此 <see cref="T:System.Data.DataSet" />。</summary>
      <returns>true 如果任何表中包含错误，否则为 false。</returns>
    </member>
    <member name="P:System.Data.DataSet.IsInitialized">
      <summary>获取一个值，该值指示是否 <see cref="T:System.Data.DataSet" /> 初始化。</summary>
      <returns>true 指示组件已完成初始化，则为否则为 false。</returns>
    </member>
    <member name="P:System.Data.DataSet.Locale">
      <summary>获取或设置用来比较字符串表中的区域设置信息。</summary>
      <returns>一个 <see cref="T:System.Globalization.CultureInfo" /> ，其中包含有关用户的计算机区域设置的数据。 默认值为 null。</returns>
    </member>
    <member name="P:System.Data.DataSet.Namespace">
      <summary>获取或设置的命名空间 <see cref="T:System.Data.DataSet" />。</summary>
      <returns>命名空间 <see cref="T:System.Data.DataSet" />。</returns>
      <exception cref="T:System.ArgumentException">命名空间已有数据。</exception>
    </member>
    <member name="P:System.Data.DataSet.Prefix">
      <summary>获取或设置 XML 前缀的命名空间别名 <see cref="T:System.Data.DataSet" />。</summary>
      <returns>XML 前缀 <see cref="T:System.Data.DataSet" /> 命名空间。</returns>
    </member>
    <member name="P:System.Data.DataSet.Relations">
      <summary>获取关系链接表，并允许导航从父表到子表的集合。</summary>
      <returns>一个包含 <see cref="T:System.Data.DataRelationCollection" /> 对象集合的 <see cref="T:System.Data.DataRelation" />。 如果不是返回一个空集合 <see cref="T:System.Data.DataRelation" /> 存在的对象。</returns>
    </member>
    <member name="P:System.Data.DataSet.RemotingFormat">
      <summary>获取或设置 <see cref="T:System.Data.SerializationFormat" /> 为 <see cref="T:System.Data.DataSet" /> 远程处理期间使用。</summary>
      <returns>一个 <see cref="T:System.Data.SerializationFormat" /> 对象。</returns>
    </member>
    <member name="P:System.Data.DataSet.SchemaSerializationMode">
      <summary>获取或设置 <see cref="T:System.Data.SchemaSerializationMode" /> 为 <see cref="T:System.Data.DataSet" />。</summary>
      <returns>获取或设置 <see cref="T:System.Data.SchemaSerializationMode" /> 为 <see cref="T:System.Data.DataSet" />。</returns>
    </member>
    <member name="P:System.Data.DataSet.Site">
      <summary>获取或设置 <see cref="T:System.Data.DataSet" /> 的 <see cref="T:System.ComponentModel.ISite" />。</summary>
      <returns>用于 <see cref="T:System.ComponentModel.ISite" /> 的 <see cref="T:System.Data.DataSet" />。</returns>
    </member>
    <member name="P:System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />。</summary>
      <returns>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />。</returns>
    </member>
    <member name="P:System.Data.DataSet.Tables">
      <summary>获取集合中包含的表 <see cref="T:System.Data.DataSet" />。</summary>
      <returns>
        <see cref="T:System.Data.DataTableCollection" /> 包含由此 <see cref="T:System.Data.DataSet" />。 如果不是返回一个空集合 <see cref="T:System.Data.DataTable" /> 存在的对象。</returns>
    </member>
    <member name="P:System.Data.DataSysDescriptionAttribute.Description">
      <summary>获取说明的文本。</summary>
      <returns>描述字符串中。</returns>
    </member>
    <member name="P:System.Data.DataTable.CaseSensitive">
      <summary>指示在表中的字符串比较是否区分大小写。</summary>
      <returns>true 如果该比较是区分大小写。否则为 false。 默认值设置为 parent <see cref="T:System.Data.DataSet" /> 对象的 <see cref="P:System.Data.DataSet.CaseSensitive" /> 属性，或 false 如果 <see cref="T:System.Data.DataTable" /> 独立于创建 <see cref="T:System.Data.DataSet" />。</returns>
    </member>
    <member name="P:System.Data.DataTable.ChildRelations">
      <summary>获取此子关系的集合 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>一个 <see cref="T:System.Data.DataRelationCollection" /> ，包含表的子关系。 如果不是返回一个空集合 <see cref="T:System.Data.DataRelation" /> 存在的对象。</returns>
    </member>
    <member name="P:System.Data.DataTable.Columns">
      <summary>获取属于此表的列的集合。</summary>
      <returns>一个 <see cref="T:System.Data.DataColumnCollection" /> 包含集合的 <see cref="T:System.Data.DataColumn" /> 表的对象。 如果不是返回一个空集合 <see cref="T:System.Data.DataColumn" /> 存在的对象。</returns>
    </member>
    <member name="P:System.Data.DataTable.Constraints">
      <summary>获取此表是由约束的集合。</summary>
      <returns>一个 <see cref="T:System.Data.ConstraintCollection" /> 包含集合的 <see cref="T:System.Data.Constraint" /> 表的对象。 如果不是返回一个空集合 <see cref="T:System.Data.Constraint" /> 存在的对象。</returns>
    </member>
    <member name="P:System.Data.DataTable.DataSet">
      <summary>获取 <see cref="T:System.Data.DataSet" /> 此表所属。</summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> 此表所属。</returns>
    </member>
    <member name="P:System.Data.DataTable.DefaultView">
      <summary>获取可能包括已筛选的视图或光标位置的表的自定义的视图。</summary>
      <returns>与 <see cref="T:System.Data.DataView" /> 关联的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="P:System.Data.DataTable.DisplayExpression">
      <summary>获取或设置返回用来表示此表在用户界面中的值的表达式。DisplayExpression 属性，允许您在用户界面中显示此表的名称。</summary>
      <returns>显示字符串。</returns>
    </member>
    <member name="P:System.Data.DataTable.ExtendedProperties">
      <summary>获取自定义的用户信息的集合。</summary>
      <returns>一个 <see cref="T:System.Data.PropertyCollection" /> ，包含自定义用户信息。</returns>
    </member>
    <member name="P:System.Data.DataTable.HasErrors">
      <summary>获取一个值，该值指示是否有任何任一的表中的行中的错误 <see cref="T:System.Data.DataSet" /> 表属于。</summary>
      <returns>true 如果存在错误;否则为 false。</returns>
    </member>
    <member name="P:System.Data.DataTable.IsInitialized">
      <summary>获取一个值，该值指示是否 <see cref="T:System.Data.DataTable" /> 初始化。</summary>
      <returns>true 指示组件已完成初始化，则为否则为 false。</returns>
    </member>
    <member name="P:System.Data.DataTable.Locale">
      <summary>获取或设置用来比较字符串表中的区域设置信息。</summary>
      <returns>一个 <see cref="T:System.Globalization.CultureInfo" /> ，其中包含有关用户的计算机区域设置的数据。 默认值是 <see cref="T:System.Data.DataSet" /> 对象的 <see cref="T:System.Globalization.CultureInfo" /> (返回 <see cref="P:System.Data.DataSet.Locale" /> 属性) 向其 <see cref="T:System.Data.DataTable" /> 所属; 如果表不属于 <see cref="T:System.Data.DataSet" />, ，默认值是当前系统 <see cref="T:System.Globalization.CultureInfo" />。</returns>
    </member>
    <member name="P:System.Data.DataTable.MinimumCapacity">
      <summary>获取或设置此表的初始起始大小。</summary>
      <returns>在此表的行中初始起始大小。 默认值为 50。</returns>
    </member>
    <member name="P:System.Data.DataTable.Namespace">
      <summary>获取或设置的 XML 表示形式中存储的数据的命名空间 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>命名空间 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="P:System.Data.DataTable.ParentRelations">
      <summary>获取为此父关系的集合 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>一个 <see cref="T:System.Data.DataRelationCollection" /> ，包含表的父关系。 如果不是返回一个空集合 <see cref="T:System.Data.DataRelation" /> 存在的对象。</returns>
    </member>
    <member name="P:System.Data.DataTable.Prefix">
      <summary>获取或设置的 XML 表示形式中存储的数据的命名空间 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>前缀 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="P:System.Data.DataTable.PrimaryKey">
      <summary>获取或设置列的数组该函数为数据表为主键。</summary>
      <returns>一个 <see cref="T:System.Data.DataColumn" /> 对象数组。</returns>
      <exception cref="T:System.Data.DataException">该密钥是外键。</exception>
    </member>
    <member name="P:System.Data.DataTable.RemotingFormat">
      <summary>获取或设置序列化格式。</summary>
      <returns>一个 <see cref="T:System.Data.SerializationFormat" /> 枚举指定 Binary 或 Xml 序列化。</returns>
    </member>
    <member name="P:System.Data.DataTable.Rows">
      <summary>获取属于此表的行的集合。</summary>
      <returns>一个 <see cref="T:System.Data.DataRowCollection" /> ，其中包含 <see cref="T:System.Data.DataRow" /> 对象; 否则为空值如果没有 <see cref="T:System.Data.DataRow" /> 存在的对象。</returns>
    </member>
    <member name="P:System.Data.DataTable.Site">
      <summary>获取或设置 <see cref="T:System.Data.DataTable" /> 的 <see cref="T:System.ComponentModel.ISite" />。</summary>
      <returns>用于 <see cref="T:System.ComponentModel.ISite" /> 的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="P:System.Data.DataTable.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />。</summary>
      <returns>true 如果集合是一套 <see cref="T:System.Collections.IList" /> 对象; 否则为 false。</returns>
    </member>
    <member name="P:System.Data.DataTable.TableName">
      <summary>获取或设置 <see cref="T:System.Data.DataTable" /> 的名称。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> 的名称。</returns>
      <exception cref="T:System.ArgumentException">null 或空字符串 ("") 中传递和此表所属的集合。</exception>
      <exception cref="T:System.Data.DuplicateNameException">此表所属的集合已具有相同名称的表。 （比较是区分大小写。）</exception>
    </member>
    <member name="P:System.Data.DataTableClearEventArgs.Table">
      <summary>获取正在清除其行的表。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> 正在清除其行。</returns>
    </member>
    <member name="P:System.Data.DataTableClearEventArgs.TableName">
      <summary>获取正在清除其行的表名称。</summary>
      <returns>一个 <see cref="T:System.String" /> ，该值指示表名。</returns>
    </member>
    <member name="P:System.Data.DataTableClearEventArgs.TableNamespace">
      <summary>获取正在清除其行的表的命名空间。</summary>
      <returns>一个 <see cref="T:System.String" /> ，该值指示命名空间名称。</returns>
    </member>
    <member name="P:System.Data.DataTableCollection.Item(System.Int32)">
      <summary>获取 <see cref="T:System.Data.DataTable" /> 的指定索引处的对象。</summary>
      <param name="index">从零开始的索引 <see cref="T:System.Data.DataTable" /> 来查找。</param>
      <returns>一个 <see cref="T:System.Data.DataTable" />具有指定的索引; 否则为 null 如果 <see cref="T:System.Data.DataTable" /> 不存在。</returns>
      <exception cref="T:System.IndexOutOfRangeException">索引值大于集合中的项的数目。</exception>
    </member>
    <member name="P:System.Data.DataTableCollection.Item(System.String)">
      <summary>获取 <see cref="T:System.Data.DataTable" /> 具有指定名称的对象。</summary>
      <param name="name">名称 DataTable 来查找。</param>
      <returns>一个 <see cref="T:System.Data.DataTable" /> 具有指定名称; 否则为 null 如果 <see cref="T:System.Data.DataTable" /> 不存在。</returns>
    </member>
    <member name="P:System.Data.DataTableCollection.Item(System.String,System.String)">
      <summary>获取 <see cref="T:System.Data.DataTable" /> 与指定的命名空间中的指定名称的对象。</summary>
      <param name="name">名称 DataTable 来查找。</param>
      <param name="tableNamespace">名称 <see cref="T:System.Data.DataTable" /> 命名空间中进行查找。</param>
      <returns>一个 <see cref="T:System.Data.DataTable" /> 具有指定名称; 否则为 null 如果 <see cref="T:System.Data.DataTable" /> 不存在。</returns>
    </member>
    <member name="P:System.Data.DataTableNewRowEventArgs.Row">
      <summary>获取要添加的行。</summary>
      <returns>
        <see cref="T:System.Data.DataRow" /> 正被添加。</returns>
    </member>
    <member name="P:System.Data.DataTableReader.Depth">
      <summary>当前行的嵌套深度 <see cref="T:System.Data.DataTableReader" />。</summary>
      <returns>当前行; 嵌套的深度始终为零。</returns>
    </member>
    <member name="P:System.Data.DataTableReader.FieldCount">
      <summary>返回当前行中的列数。</summary>
      <returns>如果未放在有效的结果集中，0;否则为中当前行的列数。</returns>
      <exception cref="T:System.InvalidOperationException">尝试检索中为已关闭的字段计数 <see cref="T:System.Data.DataTableReader" />。</exception>
    </member>
    <member name="P:System.Data.DataTableReader.HasRows">
      <summary>获取一个值，该值指示是否 <see cref="T:System.Data.DataTableReader" /> 包含一个或多个行。</summary>
      <returns>true 如果 <see cref="T:System.Data.DataTableReader" /> 包含一个或多个行; 否则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">尝试检索有关已关闭的信息 <see cref="T:System.Data.DataTableReader" />。</exception>
    </member>
    <member name="P:System.Data.DataTableReader.IsClosed">
      <summary>获取一个值，该值指示是否 <see cref="T:System.Data.DataTableReader" /> 已关闭。</summary>
      <returns>返回 true 如果 <see cref="T:System.Data.DataTableReader" /> 关闭; 否则为 false。</returns>
    </member>
    <member name="P:System.Data.DataTableReader.Item(System.Int32)">
      <summary>以其本机格式，在给定列序号获取指定列的值。</summary>
      <param name="ordinal">从零开始的列序号。</param>
      <returns>以其本机格式指定列的值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1。</exception>
    </member>
    <member name="P:System.Data.DataTableReader.Item(System.String)">
      <summary>获取指定列的值以其本机格式，在给定列名称。</summary>
      <param name="name">列的名称。</param>
      <returns>以其本机格式指定列的值。</returns>
      <exception cref="T:System.ArgumentException">指定的名称不是有效的列名。</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试从已删除的行中检索数据。</exception>
      <exception cref="T:System.InvalidOperationException">尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />。</exception>
    </member>
    <member name="P:System.Data.DataTableReader.RecordsAffected">
      <summary>获取插入、 发生更改时，或通过执行 SQL 语句删除的行数。</summary>
      <returns>
        <see cref="T:System.Data.DataTableReader" /> 不支持此属性，并且始终返回 0。</returns>
    </member>
    <member name="P:System.Data.DataView.AllowDelete">
      <summary>设置或获取一个值，该值指示是否允许删除。</summary>
      <returns>如果允许删除，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.DataView.AllowEdit">
      <summary>获取或设置一个值，该值指示是否允许编辑。</summary>
      <returns>如果允许编辑，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.DataView.AllowNew">
      <summary>获取或设置一个值，该值指示是否可以通过使用 <see cref="M:System.Data.DataView.AddNew" /> 方法添加新行。</summary>
      <returns>如果可以添加新行，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.DataView.ApplyDefaultSort">
      <summary>获取或设置一个值，该值指示是否使用默认排序。 默认排序是通过 <see cref="P:System.Data.DataTable.PrimaryKey" /> 指定的所有主键进行排序（升序）。</summary>
      <returns>如果使用默认排序，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.DataView.Count">
      <summary>在应用 <see cref="P:System.Data.DataView.RowFilter" /> 和 <see cref="P:System.Data.DataView.RowStateFilter" /> 之后，获取 <see cref="T:System.Data.DataView" /> 中的记录数。</summary>
      <returns>
        <see cref="T:System.Data.DataView" /> 中的记录数。</returns>
    </member>
    <member name="P:System.Data.DataView.DataViewManager">
      <summary>获取与此视图关联的 <see cref="T:System.Data.DataViewManager" />。</summary>
      <returns>创建了此视图的 DataViewManager。 如果这是 <see cref="T:System.Data.DataTable" /> 的默认 <see cref="T:System.Data.DataView" />，那么 DataViewManager 属性将返回 DataSet 的默认 DataViewManager。 否则，如果在没有 DataViewManager 的情况下创建了 DataView，那么此属性为 null。</returns>
    </member>
    <member name="P:System.Data.DataView.IsInitialized">
      <summary>获取一个值，该值指示组件是否已初始化。</summary>
      <returns>如果为 true，说明组件已完成初始化；否则为 false。</returns>
    </member>
    <member name="P:System.Data.DataView.IsOpen">
      <summary>获取一个值，该值指示数据源当前是否打开并投影 <see cref="T:System.Data.DataTable" /> 上的数据视图。</summary>
      <returns>如果源打开，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.DataView.Item(System.Int32)">
      <summary>从指定的表中获取数据行。</summary>
      <param name="recordIndex">
        <see cref="T:System.Data.DataTable" /> 中的记录的索引。</param>
      <returns>所需的行的 <see cref="T:System.Data.DataRowView" />。</returns>
    </member>
    <member name="P:System.Data.DataView.RowFilter">
      <summary>获取或设置用于筛选在 <see cref="T:System.Data.DataView" /> 中查看哪些行的表达式。</summary>
      <returns>用于指定行的筛选方式的字符串。 有关详细信息，请参阅“备注”部分。</returns>
    </member>
    <member name="P:System.Data.DataView.RowStateFilter">
      <summary>获取或设置用于 <see cref="T:System.Data.DataView" /> 中的行状态筛选器。</summary>
      <returns>
        <see cref="T:System.Data.DataViewRowState" /> 值之一。</returns>
    </member>
    <member name="P:System.Data.DataView.Sort">
      <summary>获取或设置 <see cref="T:System.Data.DataView" /> 的一个或多个排序列和排序顺序。</summary>
      <returns>一个字符串，该字符串包含后跟“ASC”（升序）或"DESC"（降序）的列名。 默认情况下，列按升序排序。 可以用逗号分隔多个列。</returns>
    </member>
    <member name="P:System.Data.DataView.System#Collections#ICollection#IsSynchronized">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.Collections.ICollection.IsSynchronized" />。</summary>
      <returns>有关此成员的说明，请参阅 <see cref="P:System.Collections.ICollection.IsSynchronized" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#Collections#ICollection#SyncRoot">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.Collections.ICollection.SyncRoot" />。</summary>
      <returns>有关此成员的说明，请参阅 <see cref="P:System.Collections.ICollection.SyncRoot" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#Collections#IList#IsFixedSize">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.Collections.IList.IsFixedSize" />。</summary>
      <returns>有关此成员的说明，请参阅 <see cref="P:System.Collections.IList.IsFixedSize" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#Collections#IList#IsReadOnly">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.Collections.IList.IsReadOnly" />。</summary>
      <returns>有关此成员的说明，请参阅 <see cref="P:System.Collections.IList.IsReadOnly" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#Collections#IList#Item(System.Int32)">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.Collections.IList.Item(System.Int32)" />。</summary>
      <param name="recordIndex">一个 <see cref="System.Int32" /> 值。</param>
      <returns>有关此成员的说明，请参阅 <see cref="P:System.Collections.IList.Item(System.Int32)" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#AllowEdit">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.AllowEdit" />。</summary>
      <returns>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.AllowEdit" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#AllowNew">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.AllowNew" />。</summary>
      <returns>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.AllowNew" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#AllowRemove">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.AllowRemove" />。</summary>
      <returns>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.AllowRemove" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#IsSorted">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.IsSorted" />。</summary>
      <returns>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.IsSorted" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#SortDirection">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SortDirection" />。</summary>
      <returns>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SortDirection" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#SortProperty">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SortProperty" />。</summary>
      <returns>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SortProperty" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#SupportsChangeNotification">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />。</summary>
      <returns>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#SupportsSearching">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />。</summary>
      <returns>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#SupportsSorting">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />。</summary>
      <returns>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingListView#Filter">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingListView.Filter" />。</summary>
      <returns>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingListView.Filter" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingListView#SortDescriptions">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingListView.SortDescriptions" />。</summary>
      <returns>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingListView.SortDescriptions" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingListView#SupportsAdvancedSorting">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingListView.SupportsAdvancedSorting" />。</summary>
      <returns>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingListView.SupportsAdvancedSorting" />。</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingListView#SupportsFiltering">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingListView.SupportsFiltering" />。</summary>
      <returns>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingListView.SupportsFiltering" />。</returns>
    </member>
    <member name="P:System.Data.DataView.Table">
      <summary>获取或设置源 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>为此视图提供数据的 <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.DataSet">
      <summary>获取或设置 <see cref="T:System.Data.DataSet" /> 用于 <see cref="T:System.Data.DataViewManager" />。</summary>
      <returns>要使用的 <see cref="T:System.Data.DataSet" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.DataViewSettingCollectionString">
      <summary>获取或设置一个值，用于代码持久性。</summary>
      <returns>一个值，用于代码持久性。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.DataViewSettings">
      <summary>获取 <see cref="T:System.Data.DataViewSettingCollection" /> 为每个 <see cref="T:System.Data.DataTable" /> 中 <see cref="T:System.Data.DataSet" />。</summary>
      <returns>一个 <see cref="T:System.Data.DataViewSettingCollection" /> 为每个 DataTable。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#ICollection#Count">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.Collections.ICollection.Count" />。</summary>
      <returns>有关此成员的说明，请参阅 <see cref="P:System.Collections.ICollection.Count" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#ICollection#IsSynchronized">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.Collections.ICollection.IsSynchronized" />。</summary>
      <returns>如果对 true 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 false。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#ICollection#SyncRoot">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.Collections.ICollection.SyncRoot" />。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#IList#IsFixedSize">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.Collections.IList.IsFixedSize" />。</summary>
      <returns>如果 true 具有固定大小，则为 <see cref="T:System.Collections.IList" />；否则为 false。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#IList#IsReadOnly">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.Collections.IList.IsReadOnly" />。</summary>
      <returns>有关此成员的说明，请参阅 <see cref="P:System.Collections.IList.IsReadOnly" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置指定索引处的元素。</summary>
      <param name="index">要获取或设置的元素的从零开始的索引。</param>
      <returns>指定索引处的元素。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#AllowEdit">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.AllowEdit" />。</summary>
      <returns>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.AllowEdit" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#AllowNew">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.AllowNew" />。</summary>
      <returns>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.AllowNew" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#AllowRemove">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.AllowRemove" />。</summary>
      <returns>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.AllowRemove" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#IsSorted">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.IsSorted" />。</summary>
      <returns>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.IsSorted" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#SortDirection">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SortDirection" />。</summary>
      <returns>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SortDirection" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#SortProperty">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SortProperty" />。</summary>
      <returns>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SortProperty" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#SupportsChangeNotification">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />。</summary>
      <returns>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#SupportsSearching">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />。</summary>
      <returns>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />。</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#SupportsSorting">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />。</summary>
      <returns>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />。</returns>
    </member>
    <member name="P:System.Data.DataViewSetting.ApplyDefaultSort">
      <summary>获取或设置一个值，该值指示是否使用默认排序。</summary>
      <returns>true 如果使用默认排序;否则为 false。</returns>
    </member>
    <member name="P:System.Data.DataViewSetting.DataViewManager">
      <summary>获取包含此 <see cref="T:System.Data.DataViewManager" /> 的 <see cref="T:System.Data.DataViewSetting" />。</summary>
      <returns>一个 <see cref="T:System.Data.DataViewManager" /> 对象。</returns>
    </member>
    <member name="P:System.Data.DataViewSetting.RowFilter">
      <summary>获取或设置要在应用筛选器 <see cref="T:System.Data.DataView" />。 请参阅 <see cref="P:System.Data.DataView.RowFilter" /> 使用 RowFilter 的代码示例。</summary>
      <returns>一个字符串，包含要应用的筛选器。</returns>
    </member>
    <member name="P:System.Data.DataViewSetting.RowStateFilter">
      <summary>获取或设置一个值，该值指示是否显示当前、 已删除、 修改当前、 ModifiedOriginal、 新建、 原始、 未更改或在任何行 <see cref="T:System.Data.DataView" />。</summary>
      <returns>一个值，指示要显示的行。</returns>
    </member>
    <member name="P:System.Data.DataViewSetting.Sort">
      <summary>获取或设置一个值，该值中要应用的排序 <see cref="T:System.Data.DataView" />。</summary>
      <returns>中要应用的排序 <see cref="T:System.Data.DataView" />。</returns>
    </member>
    <member name="P:System.Data.DataViewSetting.Table">
      <summary>获取 <see cref="T:System.Data.DataTable" /> 到 <see cref="T:System.Data.DataViewSetting" /> 属性应用。</summary>
      <returns>一个 <see cref="T:System.Data.DataTable" /> 对象。</returns>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.Count">
      <summary>获取的数 <see cref="T:System.Data.DataViewSetting" /> 中的对象 <see cref="T:System.Data.DataViewSettingCollection" />。</summary>
      <returns>数 <see cref="T:System.Data.DataViewSetting" /> 集合中的对象。</returns>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.DataViewSettingCollection" /> 是否为只读。</summary>
      <returns>返回 true。</returns>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Data.DataViewSettingCollection" /> 的访问（线程安全）。</summary>
      <returns>此属性始终为 false, ，除非由派生类中重写。</returns>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.Item(System.Data.DataTable)">
      <summary>获取 <see cref="T:System.Data.DataViewSetting" /> 的指定对象 <see cref="T:System.Data.DataTable" /> 集合中。</summary>
      <param name="table">要查找的 <see cref="T:System.Data.DataTable" />。</param>
      <returns>
        <see cref="T:System.Data.DataViewSetting" /> 对象的集合。</returns>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.Item(System.Int32)">
      <summary>获取 <see cref="T:System.Data.DataViewSetting" /> 的对象 <see cref="T:System.Data.DataTable" /> 由索引指定。</summary>
      <param name="index">从零开始的索引 <see cref="T:System.Data.DataTable" /> 来查找。</param>
      <returns>
        <see cref="T:System.Data.DataViewSetting" /> 对象的集合。</returns>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.Item(System.String)">
      <summary>获取 <see cref="T:System.Data.DataViewSetting" /> 的 <see cref="T:System.Data.DataTable" /> 按名称指定。</summary>
      <param name="tableName">名称 <see cref="T:System.Data.DataTable" /> 来查找。</param>
      <returns>
        <see cref="T:System.Data.DataViewSetting" /> 对象的集合。</returns>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Data.DataViewSettingCollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Data.DataViewSettingCollection" /> 的访问的对象。</returns>
    </member>
    <member name="P:System.Data.DBConcurrencyException.Row">
      <summary>获取或设置的值 <see cref="T:System.Data.DataRow" /> 生成 <see cref="T:System.Data.DBConcurrencyException" />。</summary>
      <returns>
        <see cref="T:System.Data.DataRow" /> 的值。</returns>
    </member>
    <member name="P:System.Data.DBConcurrencyException.RowCount">
      <summary>获取其更新失败，生成此异常的行数。</summary>
      <returns>包含其更新失败的行数的整数。</returns>
    </member>
    <member name="P:System.Data.FillErrorEventArgs.Continue">
      <summary>获取或设置一个值，该值指示是否要继续填充操作忽略错误。</summary>
      <returns>true 如果应继续填充操作;否则为 false。</returns>
    </member>
    <member name="P:System.Data.FillErrorEventArgs.DataTable">
      <summary>获取 <see cref="T:System.Data.DataTable" /> 发生错误时进行更新。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> 正在更新。</returns>
    </member>
    <member name="P:System.Data.FillErrorEventArgs.Errors">
      <summary>获取正在处理的错误。</summary>
      <returns>正在处理的错误。</returns>
    </member>
    <member name="P:System.Data.FillErrorEventArgs.Values">
      <summary>获取发生错误时正在更新的行的值。</summary>
      <returns>正在更新的行的值。</returns>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.AcceptRejectRule">
      <summary>指示应发生通过该约束的操作时 <see cref="M:System.Data.DataTable.AcceptChanges" /> 调用。</summary>
      <returns>
        <see cref="T:System.Data.AcceptRejectRule" /> 值之一。 可能的值包括 None, ，和 Cascade。 默认值为 None。</returns>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.Columns">
      <summary>获取此约束列的子级。</summary>
      <returns>一个数组 <see cref="T:System.Data.DataColumn" /> 是该约束的子列的对象。</returns>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.DeleteRule">
      <summary>获取或设置通过该约束删除了某行时发生的操作。</summary>
      <returns>
        <see cref="T:System.Data.Rule" /> 值之一。 默认值为 Cascade。</returns>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.RelatedColumns">
      <summary>此约束的父列。</summary>
      <returns>一个数组 <see cref="T:System.Data.DataColumn" /> 约束的父列的对象。</returns>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.RelatedTable">
      <summary>获取此约束的父表。</summary>
      <returns>父 <see cref="T:System.Data.DataTable" /> 此约束。</returns>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.Table">
      <summary>获取此约束的子表。</summary>
      <returns>一个 <see cref="T:System.Data.DataTable" /> 约束中的子表。</returns>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.UpdateRule">
      <summary>获取或设置当更新行时，通过此约束发生的操作。</summary>
      <returns>
        <see cref="T:System.Data.Rule" /> 值之一。 默认值为 Cascade。</returns>
    </member>
    <member name="P:System.Data.IColumnMapping.DataSetColumn">
      <summary>获取或设置中的列名称 <see cref="T:System.Data.DataSet" /> 映射到。</summary>
      <returns>中的数据列的名称 <see cref="T:System.Data.DataSet" /> 映射到。 名称不区分大小写。</returns>
    </member>
    <member name="P:System.Data.IColumnMapping.SourceColumn">
      <summary>获取或设置数据源从映射中的列的名称。 名称是区分大小写。</summary>
      <returns>区分大小写的数据源中的列名称。</returns>
    </member>
    <member name="P:System.Data.IColumnMappingCollection.Item(System.String)">
      <summary>获取或设置 <see cref="T:System.Data.IColumnMapping" /> 对象具有指定 SourceColumn 名称。</summary>
      <param name="index">SourceColumn 名称 IColumnMapping 要查找对象。</param>
      <returns>IColumnMapping 对象具有指定 SourceColumn 名称。</returns>
    </member>
    <member name="P:System.Data.IDataAdapter.MissingMappingAction">
      <summary>指示或指定是否未映射的源的表或列传递与其源名一起以进行筛选，或者将引发错误。</summary>
      <returns>
        <see cref="T:System.Data.MissingMappingAction" /> 值之一。 默认值为 Passthrough。</returns>
      <exception cref="T:System.ArgumentException">设置的值不是之一 <see cref="T:System.Data.MissingMappingAction" /> 值。</exception>
    </member>
    <member name="P:System.Data.IDataAdapter.MissingSchemaAction">
      <summary>指示或指定是否丢失的源表、 列和它们之间的关系添加到数据集架构，将被忽略，或者会导致错误被引发。</summary>
      <returns>
        <see cref="T:System.Data.MissingSchemaAction" /> 值之一。 默认值为 Add。</returns>
      <exception cref="T:System.ArgumentException">设置的值不是之一 <see cref="T:System.Data.MissingSchemaAction" /> 值。</exception>
    </member>
    <member name="P:System.Data.IDataAdapter.TableMappings">
      <summary>指示如何将源表映射到数据集表。</summary>
      <returns>一个集合，提供返回的记录之间的主映射和 <see cref="T:System.Data.DataSet" />。 默认值为空集合。</returns>
    </member>
    <member name="P:System.Data.IDataParameter.DbType">
      <summary>获取或设置参数的 <see cref="T:System.Data.DbType" />。</summary>
      <returns>
        <see cref="T:System.Data.DbType" /> 值之一。 默认值为 <see cref="F:System.Data.DbType.String" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性未设置为有效 <see cref="T:System.Data.DbType" />。</exception>
    </member>
    <member name="P:System.Data.IDataParameter.Direction">
      <summary>获取或设置一个值，该值指示参数是仅输入、 输出、 双向参数还是存储的过程返回值参数。</summary>
      <returns>
        <see cref="T:System.Data.ParameterDirection" /> 值之一。 默认值为 Input。</returns>
      <exception cref="T:System.ArgumentException">属性未设置为有效的 <see cref="T:System.Data.ParameterDirection" /> 值之一。</exception>
    </member>
    <member name="P:System.Data.IDataParameter.IsNullable">
      <summary>获取一个值，该值指示参数是否接受 null 值。</summary>
      <returns>true 如果接受 null 值;否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Data.IDataParameter.ParameterName">
      <summary>获取或设置 <see cref="T:System.Data.IDataParameter" /> 的名称。</summary>
      <returns>
        <see cref="T:System.Data.IDataParameter" /> 的名称。 默认值为一个空字符串。</returns>
    </member>
    <member name="P:System.Data.IDataParameter.SourceColumn">
      <summary>获取或设置映射到的源列的名称 <see cref="T:System.Data.DataSet" /> ，并且用于加载或返回 <see cref="P:System.Data.IDataParameter.Value" />。</summary>
      <returns>映射到的源列的名称 <see cref="T:System.Data.DataSet" />。 默认值为一个空字符串。</returns>
    </member>
    <member name="P:System.Data.IDataParameter.SourceVersion">
      <summary>获取或设置 <see cref="T:System.Data.DataRowVersion" /> 在加载时要使用 <see cref="P:System.Data.IDataParameter.Value" />。</summary>
      <returns>
        <see cref="T:System.Data.DataRowVersion" /> 值之一。 默认值为 Current。</returns>
      <exception cref="T:System.ArgumentException">该属性未设置之一 <see cref="T:System.Data.DataRowVersion" /> 值。</exception>
    </member>
    <member name="P:System.Data.IDataParameter.Value">
      <summary>获取或设置参数的值。</summary>
      <returns>充当参数值的 <see cref="T:System.Object" />。 默认值为 null。</returns>
    </member>
    <member name="P:System.Data.IDataParameterCollection.Item(System.String)">
      <summary>获取或设置指定索引处的参数。</summary>
      <param name="parameterName">要检索的参数的名称。</param>
      <returns>
        <see cref="T:System.Object" /> 中指定索引处。</returns>
    </member>
    <member name="P:System.Data.IDataReader.Depth">
      <summary>获取一个值，该值指示当前行的嵌套深度。</summary>
      <returns>嵌套的级别。</returns>
    </member>
    <member name="P:System.Data.IDataReader.IsClosed">
      <summary>获取一个值，该值指示是否关闭数据读取器。</summary>
      <returns>true 如果关闭数据读取器;否则为 false。</returns>
    </member>
    <member name="P:System.Data.IDataReader.RecordsAffected">
      <summary>获取通过执行 SQL 语句更改、插入或删除的行数。</summary>
      <returns>更改、 插入或删除，则行数如果受不影响任何行，则为 0 或语句失败。和-1 表示 SELECT 语句。</returns>
    </member>
    <member name="P:System.Data.IDataRecord.FieldCount">
      <summary>获取当前行中的列数。</summary>
      <returns>如果未放在有效记录集中，0;否则为为当前记录中的列数。 默认值为 -1。</returns>
    </member>
    <member name="P:System.Data.IDataRecord.Item(System.Int32)">
      <summary>获取位于指定索引处的列。</summary>
      <param name="i">要获取的列的从零开始的索引。</param>
      <returns>作为指定索引处的列位于 <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引超出了范围 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />。</exception>
    </member>
    <member name="P:System.Data.IDataRecord.Item(System.String)">
      <summary>获取具有指定名称的列。</summary>
      <param name="name">要查找的列的名称。</param>
      <returns>具有指定名称作为列 <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">找到具有指定名称没有列。</exception>
    </member>
    <member name="P:System.Data.IDbCommand.CommandText">
      <summary>获取或设置要对数据源运行的文本命令。</summary>
      <returns>要执行的文本命令。 默认值为空字符串 ("")。</returns>
    </member>
    <member name="P:System.Data.IDbCommand.CommandTimeout">
      <summary>获取或设置在终止尝试执行命令并生成错误之前的等待时间。</summary>
      <returns>时间 （以秒为单位） 以等待要执行的命令。 默认值为 30 秒。</returns>
      <exception cref="T:System.ArgumentException">分配的属性值小于 0。</exception>
    </member>
    <member name="P:System.Data.IDbCommand.CommandType">
      <summary>指示或指定了 <see cref="P:System.Data.IDbCommand.CommandText" /> 属性将被解释。</summary>
      <returns>
        <see cref="T:System.Data.CommandType" /> 值之一。 默认值为 Text。</returns>
    </member>
    <member name="P:System.Data.IDbCommand.Connection">
      <summary>获取或设置 <see cref="T:System.Data.IDbConnection" /> 此实例所使用的 <see cref="T:System.Data.IDbCommand" />。</summary>
      <returns>与数据源的连接。</returns>
    </member>
    <member name="P:System.Data.IDbCommand.Parameters">
      <summary>获取 <see cref="T:System.Data.IDataParameterCollection" />。</summary>
      <returns>SQL 语句或存储的过程的参数。</returns>
    </member>
    <member name="P:System.Data.IDbCommand.Transaction">
      <summary>获取或设置在其中事务 Command 对象的.NET Framework 数据提供程序执行。</summary>
      <returns>Command 对象的.NET Framework 数据提供程序执行。 默认值为 null。</returns>
    </member>
    <member name="P:System.Data.IDbCommand.UpdatedRowSource">
      <summary>获取或设置如何将命令结果应用于 <see cref="T:System.Data.DataRow" /> 时使用的 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> 方法 <see cref="T:System.Data.Common.DbDataAdapter" />。</summary>
      <returns>
        <see cref="T:System.Data.UpdateRowSource" /> 值之一。 默认值是 Both 如果该命令自动生成。 默认值为 None。</returns>
      <exception cref="T:System.ArgumentException">输入的值不是之一 <see cref="T:System.Data.UpdateRowSource" /> 值。</exception>
    </member>
    <member name="P:System.Data.IDbConnection.ConnectionString">
      <summary>获取或设置用于打数据库的字符串。</summary>
      <returns>包含连接设置的字符串。</returns>
    </member>
    <member name="P:System.Data.IDbConnection.ConnectionTimeout">
      <summary>获取终止尝试并生成错误之前在尝试建立连接时所等待的时间。</summary>
      <returns>等待连接打开所需的时间（以秒为单位）。 默认值为 15 秒。</returns>
    </member>
    <member name="P:System.Data.IDbConnection.Database">
      <summary>获取当前数据库的名称或打开连接后要使用的数据库的名称。</summary>
      <returns>当前数据库的名称或一次使用的数据库的名称连接处于打开状态。 默认值为一个空字符串。</returns>
    </member>
    <member name="P:System.Data.IDbConnection.State">
      <summary>获取连接的当前状态。</summary>
      <returns>
        <see cref="T:System.Data.ConnectionState" /> 值之一。</returns>
    </member>
    <member name="P:System.Data.IDbDataAdapter.DeleteCommand">
      <summary>获取或设置用于从数据集中删除记录的 SQL 语句。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> 过程中使用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 来删除已删除行在数据集中的数据源中的记录。</returns>
    </member>
    <member name="P:System.Data.IDbDataAdapter.InsertCommand">
      <summary>获取或设置用于将新记录插入到数据源的 SQL 语句。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> 过程中使用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 以新行在数据集中的数据源中插入记录。</returns>
    </member>
    <member name="P:System.Data.IDbDataAdapter.SelectCommand">
      <summary>获取或设置用于在数据源中选择记录的 SQL 语句。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> 过程中使用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 从放入数据集中的数据源选择记录。</returns>
    </member>
    <member name="P:System.Data.IDbDataAdapter.UpdateCommand">
      <summary>获取或设置用于更新数据源中的记录的 SQL 语句。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> 过程中使用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 来更新数据集中的已修改行的数据源中的记录。</returns>
    </member>
    <member name="P:System.Data.IDbDataParameter.Precision">
      <summary>指示数值参数的精度。</summary>
      <returns>最大位数用来表示数据提供程序参数对象的 Value 属性数。 默认值为 0，指示数据访问接口设置值的精度。</returns>
    </member>
    <member name="P:System.Data.IDbDataParameter.Scale">
      <summary>指示数值参数的小数位数。</summary>
      <returns>所解析的 <see cref="T:System.Data.OleDb.OleDbParameter.Value" /> 的小数位数。 默认值为 0。</returns>
    </member>
    <member name="P:System.Data.IDbDataParameter.Size">
      <summary>参数的大小。</summary>
      <returns>列中的数据的最大大小（以字节为单位）。 默认值，则从推断的参数值。</returns>
    </member>
    <member name="P:System.Data.IDbTransaction.Connection">
      <summary>指定要与事务关联的连接对象。</summary>
      <returns>要与事务关联的连接对象。</returns>
    </member>
    <member name="P:System.Data.IDbTransaction.IsolationLevel">
      <summary>指定 <see cref="T:System.Data.IsolationLevel" /> 此事务。</summary>
      <returns>
        <see cref="T:System.Data.IsolationLevel" /> 此事务。 默认值为 ReadCommitted。</returns>
    </member>
    <member name="P:System.Data.InternalDataCollectionBase.Count">
      <summary>获取集合中的元素总数。</summary>
      <returns>集合中的元素的总数。</returns>
    </member>
    <member name="P:System.Data.InternalDataCollectionBase.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.InternalDataCollectionBase" /> 是否为只读。</summary>
      <returns>如果该集合为只读，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Data.InternalDataCollectionBase.IsSynchronized">
      <summary>获取一个值，该值指示是否 <see cref="T:System.Data.InternalDataCollectionBase" /> 是同步。</summary>
      <returns>true 如果该集合已同步;否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Data.InternalDataCollectionBase.List">
      <summary>获取作为列表集合的项。</summary>
      <returns>
        <see cref="T:System.Collections.ArrayList" /> 包含的集合。</returns>
    </member>
    <member name="P:System.Data.InternalDataCollectionBase.SyncRoot">
      <summary>获取可用于同步集合的对象。</summary>
      <returns>
        <see cref="T:System.object" /> 用于同步集合。</returns>
    </member>
    <member name="P:System.Data.ITableMapping.ColumnMappings">
      <summary>获取派生 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 为 <see cref="T:System.Data.DataTable" />。</summary>
      <returns>数据列映射的集合。</returns>
    </member>
    <member name="P:System.Data.ITableMapping.DataSetTable">
      <summary>获取或设置表中的不区分大小写名称 <see cref="T:System.Data.DataSet" />。</summary>
      <returns>表中的不区分大小写名称 <see cref="T:System.Data.DataSet" />。</returns>
    </member>
    <member name="P:System.Data.ITableMapping.SourceTable">
      <summary>获取或设置对源表的区分大小写的名称。</summary>
      <returns>区分大小写的源表的名称。</returns>
    </member>
    <member name="P:System.Data.ITableMappingCollection.Item(System.String)">
      <summary>获取或设置的实例 <see cref="T:System.Data.ITableMapping" /> 具有指定 <see cref="P:System.Data.ITableMapping.SourceTable" /> 名称。</summary>
      <param name="index">SourceTable 名称 <see cref="T:System.Data.ITableMapping" />。</param>
      <returns>实例 <see cref="T:System.Data.ITableMapping" /> 具有指定 SourceTable 名称。</returns>
    </member>
    <member name="P:System.Data.MergeFailedEventArgs.Conflict">
      <summary>返回合并冲突的说明。</summary>
      <returns>合并冲突的说明。</returns>
    </member>
    <member name="P:System.Data.MergeFailedEventArgs.Table">
      <summary>返回 <see cref="T:System.Data.DataTable" /> 对象。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> 对象。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcCommand.CommandText">
      <summary>获取或设置的 SQL 语句或存储的过程来针对数据源执行。</summary>
      <returns>SQL 语句或执行存储的过程。 默认值为空字符串 ("")。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcCommand.CommandTimeout">
      <summary>获取或设置在终止尝试执行命令并生成错误之前的等待时间。</summary>
      <returns>等待命令执行所需的时间（以秒为单位）。 默认值为 30 秒。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcCommand.CommandType">
      <summary>获取或设置一个值，指示如何 <see cref="P:System.Data.Odbc.OdbcCommand.CommandText" /> 属性将被解释。</summary>
      <returns>
        <see cref="T:System.Data.CommandType" /> 值之一。 默认值为 Text。</returns>
      <exception cref="T:System.ArgumentException">该值不是有效的 <see cref="T:System.Data.CommandType" />。</exception>
    </member>
    <member name="P:System.Data.Odbc.OdbcCommand.Connection">
      <summary>获取或设置 <see cref="T:System.Data.Odbc.OdbcConnection" /> 此实例所使用的 <see cref="T:System.Data.Odbc.OdbcCommand" />。</summary>
      <returns>到数据源的连接。 默认值为 null 值。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Data.Odbc.OdbcCommand.Connection" /> 属性在事务执行过程中发生了更改。</exception>
    </member>
    <member name="P:System.Data.Odbc.OdbcCommand.DesignTimeVisible">
      <summary>获取或设置一个值，该值指示命令对象是否应在一个自定义的界面控件中可见。</summary>
      <returns>true, ，如果命令对象应在控件中可见; 否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcCommand.Parameters">
      <summary>获取 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />。</summary>
      <returns>SQL 语句或存储的过程的参数。 默认值为空集合。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcCommand.Transaction">
      <summary>获取或设置要在其中执行 <see cref="T:System.Data.Odbc.OdbcTransaction" /> 的 <see cref="T:System.Data.Odbc.OdbcCommand" />。</summary>
      <returns>一个 <see cref="T:System.Data.Odbc.OdbcTransaction" />。 默认值为 null 值。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcCommand.UpdatedRowSource">
      <summary>获取或设置一个值，指定如何 更新 方法应该应用到的命令结果 DataRow。</summary>
      <returns>
        <see cref="T:System.Data.UpdateRowSource" /> 值之一。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcCommandBuilder.DataAdapter">
      <summary>获取或设置 <see cref="T:System.Data.Odbc.OdbcDataAdapter" /> 由此对象 <see cref="T:System.Data.Odbc.OdbcCommandBuilder" /> 对象将生成的 SQL 语句。</summary>
      <returns>
        <see cref="T:System.Data.Odbc.OdbcDataAdapter" /> 对象，它是与此关联 <see cref="T:System.Data.Odbc.OdbcCommandBuilder" />。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcConnection.ConnectionString">
      <summary>获取或设置用来打开数据源的字符串。</summary>
      <returns>ODBC 驱动程序连接字符串中包含的设置，如建立初始连接所需的数据源名称。 默认值为空字符串 ("")。 最大长度为 1024年个字符。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcConnection.ConnectionTimeout">
      <summary>获取或设置要在尝试建立在终止尝试并生成错误之前的连接时等待的时间。</summary>
      <returns>以秒为单位时要等待连接打开的时间。 默认值为 15 秒。</returns>
      <exception cref="T:System.ArgumentException">设置的值小于 0。</exception>
    </member>
    <member name="P:System.Data.Odbc.OdbcConnection.Database">
      <summary>获取当前数据库的名称或打开连接后要使用的数据库的名称。</summary>
      <returns>当前数据库的名称。 默认值为空字符串 ("") 之前在打开的连接。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcConnection.DataSource">
      <summary>获取服务器名称或数据源的文件名。</summary>
      <returns>服务器名称或数据源的文件名。 默认值为空字符串 ("") 之前在打开的连接。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcConnection.Driver">
      <summary>获取指定当前连接的 ODBC 驱动程序的名称。</summary>
      <returns>ODBC 驱动程序的名称。 这通常是 DLL 名称 (例如，Sqlsrv32.dll)。 默认值为空字符串 ("") 之前在打开的连接。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcConnection.ServerVersion">
      <summary>获取一个字符串，包含客户端连接到服务器的版本。</summary>
      <returns>已连接的服务器的版本。</returns>
      <exception cref="T:System.InvalidOperationException">连接已关闭。</exception>
    </member>
    <member name="P:System.Data.Odbc.OdbcConnection.State">
      <summary>获取连接的当前状态。</summary>
      <returns>
        <see cref="T:System.Data.ConnectionState" /> 值的按位组合。 默认值为 Closed。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcConnectionStringBuilder.Driver">
      <summary>获取或设置与连接关联的 ODBC 驱动程序的名称。</summary>
      <returns>值 <see cref="P:System.Data.Odbc.OdbcConnectionStringBuilder.Driver" /> 属性，或 String.Empty 如果未提供任何。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcConnectionStringBuilder.Dsn">
      <summary>获取或设置与连接关联的数据源名称 (DSN) 的名称。</summary>
      <returns>值 <see cref="P:System.Data.Odbc.OdbcConnectionStringBuilder.Dsn" /> 属性，或 String.Empty 如果未提供任何。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcConnectionStringBuilder.Item(System.String)">
      <summary>获取或设置与指定的键关联的值。 在 C# 中，此属性为索引器。</summary>
      <param name="keyword">要获取或设置的项的键。</param>
      <returns>与指定的键相关联的值。</returns>
      <exception cref="T:System.ArgumentException">连接字符串格式不正确 （可能缺少必需的"="中的键/值对）。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为空引用（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="P:System.Data.Odbc.OdbcConnectionStringBuilder.Keys">
      <summary>获取包含 <see cref="T:System.Collections.ICollection" /> 中的键的 <see cref="T:System.Data.Odbc.OdbcConnectionStringBuilder" />。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Data.Odbc.OdbcConnectionStringBuilder" /> 中的键。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcDataAdapter.DeleteCommand">
      <summary>获取或设置 SQL 语句或存储的过程，用于删除数据源中的记录。</summary>
      <returns>
        <see cref="T:System.Data.Odbc.OdbcCommand" /> 更新操作期间用于删除数据源中对应的已删除行的记录 <see cref="T:System.Data.DataSet" />。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcDataAdapter.InsertCommand">
      <summary>获取或设置 SQL 语句或存储的过程，用于将新记录插入到数据源。</summary>
      <returns>
        <see cref="T:System.Data.Odbc.OdbcCommand" /> 更新操作期间用于在对应于中的新行的数据源中插入记录 <see cref="T:System.Data.DataSet" />。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcDataAdapter.SelectCommand">
      <summary>获取或设置的 SQL 语句或存储的过程用于在数据源中选择记录。</summary>
      <returns>
        <see cref="T:System.Data.Odbc.OdbcCommand" /> ，填充操作过程中，用于从数据源以便放入选择记录 <see cref="T:System.Data.DataSet" />。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcDataAdapter.System#Data#IDbDataAdapter#DeleteCommand">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.Data.IDbDataAdapter.DeleteCommand" />。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> 在更新过程中用于删除数据集中已删除行的数据源中的记录。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcDataAdapter.System#Data#IDbDataAdapter#InsertCommand">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.Data.IDbDataAdapter.InsertCommand" />。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> ，在更新过程中，用于放置在数据集中的数据源中插入记录。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcDataAdapter.System#Data#IDbDataAdapter#SelectCommand">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.Data.IDbDataAdapter.SelectCommand" />。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> ，在更新过程中，用于从数据源以便放入数据集中选择记录。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcDataAdapter.System#Data#IDbDataAdapter#UpdateCommand">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.Data.IDbDataAdapter.UpdateCommand" />。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> 在数据源中更新来更新记录过程中使用数据集中已修改的行。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcDataAdapter.UpdateCommand">
      <summary>获取或设置的 SQL 语句或存储的过程用于更新数据源中的记录。</summary>
      <returns>
        <see cref="T:System.Data.Odbc.OdbcCommand" /> 更新操作期间用于更新数据源相对应的记录为已修改的行 <see cref="T:System.Data.DataSet" />。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcDataReader.Depth">
      <summary>获取一个值，该值指示当前行的嵌套深度。</summary>
      <returns>当前行的嵌套深度。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcDataReader.FieldCount">
      <summary>获取当前行中的列数。</summary>
      <returns>如果未定位在有效记录集中，0;否则为当前记录中的列数。 默认值为 -1。</returns>
      <exception cref="T:System.NotSupportedException">没有当前连接到数据源。</exception>
    </member>
    <member name="P:System.Data.Odbc.OdbcDataReader.HasRows">
      <summary>获取一个值，该值指示是否 <see cref="T:System.Data.Odbc.OdbcDataReader" /> 包含一个或多个行。</summary>
      <returns>true 如果 <see cref="T:System.Data.Odbc.OdbcDataReader" /> 包含一个或多个行; 否则为 false。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcDataReader.IsClosed">
      <summary>指示是否 <see cref="T:System.Data.Odbc.OdbcDataReader" /> 已关闭。</summary>
      <returns>true 如果 <see cref="T:System.Data.Odbc.OdbcDataReader" /> 已关闭，否则为 false。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcDataReader.Item(System.Int32)">
      <summary>以其本机格式，在给定列序号获取指定列的值。</summary>
      <param name="i">列序号。</param>
      <returns>以其本机格式指定列的值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引超出了范围 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />。</exception>
    </member>
    <member name="P:System.Data.Odbc.OdbcDataReader.Item(System.String)">
      <summary>获取指定列的值以其本机格式，在给定列名称。</summary>
      <param name="value">列名。</param>
      <returns>以其本机格式指定列的值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">找到具有指定名称没有列。</exception>
    </member>
    <member name="P:System.Data.Odbc.OdbcDataReader.RecordsAffected">
      <summary>获取通过执行 SQL 语句更改、插入或删除的行数。</summary>
      <returns>更改、插入或删除的行数。 在为 SELECT 语句; 的-1如果没有行受到影响，则为 0 或语句失败。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcError.Message">
      <summary>获取错误的简短说明。</summary>
      <returns>错误说明。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcError.NativeError">
      <summary>获取数据源特定的错误信息。</summary>
      <returns>数据源特定的错误信息。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcError.Source">
      <summary>获取生成错误的驱动程序的名称。</summary>
      <returns>生成错误的驱动程序的名称。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcError.SQLState">
      <summary>获取数据库的五个字符的错误代码遵循 ANSI SQL 标准。</summary>
      <returns>如果该错误可以由多个位置颁发标识错误来源的五个字符的错误代码。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcErrorCollection.Count">
      <summary>获取集合中的错误数。</summary>
      <returns>集合中错误的总数。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcErrorCollection.Item(System.Int32)">
      <summary>获取指定索引处的错误。</summary>
      <param name="i">要检索的错误的从零开始的索引。</param>
      <returns>
        <see cref="T:System.Data.Odbc.OdbcError" /> ，其中包含错误的指定索引处。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcErrorCollection.System#Collections#ICollection#IsSynchronized">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.Collections.ICollection.IsSynchronized" />。</summary>
      <returns>如果对 true 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcErrorCollection.System#Collections#ICollection#SyncRoot">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.Collections.ICollection.SyncRoot" />。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcException.Errors">
      <summary>获取一个或多个集合 <see cref="T:System.Data.Odbc.OdbcError" /> 对象可提供有关用于 ODBC 的.NET Framework 数据提供程序生成的异常的详细的信息。</summary>
      <returns>收集的实例 <see cref="T:System.Data.Odbc.OdbcError" /> 类。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcException.Source">
      <summary>获取生成错误的 ODBC 驱动程序的名称。</summary>
      <returns>生成错误的 ODBC 驱动程序的名称。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcInfoMessageEventArgs.Errors">
      <summary>获取从数据源发送的警告的集合。</summary>
      <returns>从数据源发送的警告集合。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcInfoMessageEventArgs.Message">
      <summary>获取从数据库发送的错误的完整文本。</summary>
      <returns>完整的错误文本。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcParameter.DbType">
      <summary>获取或设置参数的 <see cref="T:System.Data.DbType" />。</summary>
      <returns>
        <see cref="T:System.Data.DbType" /> 值之一。 默认值为 <see cref="T:System.String" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性未设置为有效 <see cref="T:System.Data.DbType" />。</exception>
    </member>
    <member name="P:System.Data.Odbc.OdbcParameter.Direction">
      <summary>获取或设置一个值，该值指示参数是只可输入的参数、只可输出的参数、双向参数还是存储过程返回值参数。</summary>
      <returns>
        <see cref="T:System.Data.ParameterDirection" /> 值之一。 默认值为 Input。</returns>
      <exception cref="T:System.ArgumentException">属性未设置为有效的 <see cref="T:System.Data.ParameterDirection" /> 值之一。</exception>
    </member>
    <member name="P:System.Data.Odbc.OdbcParameter.IsNullable">
      <summary>获取或设置一个值，该值指示参数是否接受 null 值。</summary>
      <returns>如果接受 null 值，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcParameter.OdbcType">
      <summary>获取或设置参数的 <see cref="T:System.Data.Odbc.OdbcType" />。</summary>
      <returns>
        <see cref="T:System.Data.Odbc.OdbcType" /> 值，该值是 <see cref="T:System.Data.Odbc.OdbcType" /> 的参数。 默认值为 Nchar。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcParameter.ParameterName">
      <summary>获取或设置 <see cref="T:System.Data.Odbc.OdbcParameter" /> 的名称。</summary>
      <returns>
        <see cref="T:System.Data.Odbc.OdbcParameter" /> 的名称。 默认值为空字符串("")。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcParameter.Precision">
      <summary>获取或设置用来表示的数字个数 <see cref="P:System.Data.Odbc.OdbcParameter.Value" /> 属性。</summary>
      <returns>用于表示 <see cref="P:System.Data.Odbc.OdbcParameter.Value" /> 属性的最大位数。 默认值为 0，它表示的数据提供程序设置的精度 <see cref="P:System.Data.Odbc.OdbcParameter.Value" />。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcParameter.Scale">
      <summary>获取或设置所解析的 <see cref="P:System.Data.Odbc.OdbcParameter.Value" /> 的小数位数。</summary>
      <returns>所解析的 <see cref="P:System.Data.Odbc.OdbcParameter.Value" /> 的小数位数。 默认值为 0。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcParameter.Size">
      <summary>获取或设置列中数据的最大大小。</summary>
      <returns>列中数据的最大大小。 默认值将根据参数值进行推断。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcParameter.SourceColumn">
      <summary>获取或设置映射到的源列的名称 <see cref="T:System.Data.DataSet" /> ，并且用于加载或返回 <see cref="P:System.Data.Odbc.OdbcParameter.Value" />。</summary>
      <returns>将用于设置此参数的值的源列的名称。 默认值为空字符串("")。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcParameter.SourceColumnNullMapping">
      <summary>设置或获取一个值，该值指示源列是否可以为 null。 这样就 <see cref="T:System.Data.Common.DbCommandBuilder" /> 正确生成为 null 的列的 Update 语句。</summary>
      <returns>如果源列可以为 null，则为 true；否则为 ￼false￼。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcParameter.SourceVersion">
      <summary>获取或设置 <see cref="T:System.Data.DataRowVersion" /> 来加载时使用 <see cref="P:System.Data.Odbc.OdbcParameter.Value" />。</summary>
      <returns>
        <see cref="T:System.Data.DataRowVersion" /> 值之一。 默认值为当前。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcParameter.Value">
      <summary>获取或设置参数的值。</summary>
      <returns>充当参数值的 <see cref="T:System.Object" />。 默认值为 null。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcParameterCollection.Count">
      <summary>返回一个整数，包含中的元素数 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />。 只读。</summary>
      <returns>以整数形式表示的 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 中的元素数。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcParameterCollection.IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 是否具有固定大小。 只读。</summary>
      <returns>如果 true 具有固定大小，则为 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />；否则为 false。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcParameterCollection.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 是否为只读。</summary>
      <returns>true 如果 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 为只读，否则， false。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcParameterCollection.IsSynchronized">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 是否已同步。 只读。</summary>
      <returns>true 如果 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 同步; 否则为 false。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcParameterCollection.Item(System.Int32)">
      <summary>获取或设置指定索引处的 <see cref="T:System.Data.Odbc.OdbcParameter" />。</summary>
      <param name="index">要检索的参数的索引（从零开始）。</param>
      <returns>位于指定索引处的 <see cref="T:System.Data.Odbc.OdbcParameter" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定的索引不存在。</exception>
    </member>
    <member name="P:System.Data.Odbc.OdbcParameterCollection.Item(System.String)">
      <summary>获取或设置 <see cref="T:System.Data.Odbc.OdbcParameter" /> 具有指定名称。</summary>
      <param name="parameterName">要检索的参数的名称。</param>
      <returns>具有指定名称的 <see cref="T:System.Data.Odbc.OdbcParameter" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定的名称不存在。</exception>
    </member>
    <member name="P:System.Data.Odbc.OdbcParameterCollection.SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 的访问的对象。 只读。</summary>
      <returns>可用于同步对 <see cref="T:System.Data.Odbc.OdbcParameterCollection" /> 的访问的对象。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcRowUpdatedEventArgs.Command">
      <summary>获取 <see cref="T:System.Data.Odbc.OdbcCommand" /> 时执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 调用。</summary>
      <returns>
        <see cref="T:System.Data.Odbc.OdbcCommand" /> 时执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 调用。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcRowUpdatingEventArgs.Command">
      <summary>获取或设置 <see cref="T:System.Data.Odbc.OdbcCommand" /> 时要执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 调用。</summary>
      <returns>
        <see cref="T:System.Data.Odbc.OdbcCommand" /> 时要执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 调用。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcTransaction.Connection">
      <summary>获取 <see cref="T:System.Data.Odbc.OdbcConnection" /> 与该事务关联的对象或 null 如果该事务将不再有效。</summary>
      <returns>
        <see cref="T:System.Data.Odbc.OdbcConnection" /> 与事务关联的对象。</returns>
    </member>
    <member name="P:System.Data.Odbc.OdbcTransaction.IsolationLevel">
      <summary>指定 <see cref="T:System.Data.IsolationLevel" /> 此事务。</summary>
      <returns>
        <see cref="T:System.Data.IsolationLevel" /> 此事务。 默认值取决于基础的 ODBC 驱动程序。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbCommand.CommandText">
      <summary>获取或设置 SQL 语句或存储的过程以在数据源中执行。</summary>
      <returns>SQL 语句或执行存储的过程。 默认值为一个空字符串。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbCommand.CommandTimeout">
      <summary>获取或设置在终止尝试执行命令并生成错误之前的等待时间。</summary>
      <returns>时间 （以秒为单位） 以等待要执行的命令。 默认值为 30 秒。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbCommand.CommandType">
      <summary>获取或设置一个值，指示如何 <see cref="P:System.Data.OleDb.OleDbCommand.CommandText" /> 属性将被解释。</summary>
      <returns>
        <see cref="P:System.Data.OleDb.OleDbCommand.CommandType" /> 值之一。 默认值为 Text。</returns>
      <exception cref="T:System.ArgumentException">值不是有效 <see cref="P:System.Data.OleDb.OleDbCommand.CommandType" />。</exception>
    </member>
    <member name="P:System.Data.OleDb.OleDbCommand.Connection">
      <summary>获取或设置 <see cref="T:System.Data.OleDb.OleDbConnection" /> 此实例所使用的 <see cref="T:System.Data.OleDb.OleDbCommand" />。</summary>
      <returns>到数据源的连接。 默认值为 null。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Data.OleDb.OleDbCommand.Connection" /> 属性在事务执行过程中发生了更改。</exception>
    </member>
    <member name="P:System.Data.OleDb.OleDbCommand.DesignTimeVisible">
      <summary>获取或设置一个值，该值指示命令对象是否应在自定义 Windows 窗体设计器控件中可见。</summary>
      <returns>一个指示命令对象在控件中是否应该可见的值。 默认值为 true。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbCommand.Parameters">
      <summary>获取 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />。</summary>
      <returns>SQL 语句或存储的过程的参数。 默认值为空集合。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbCommand.Transaction">
      <summary>获取或设置要在其中执行 <see cref="T:System.Data.OleDb.OleDbTransaction" /> 的 <see cref="T:System.Data.OleDb.OleDbCommand" />。</summary>
      <returns>
        <see cref="T:System.Data.OleDb.OleDbTransaction" />。 默认值为 null。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbCommand.UpdatedRowSource">
      <summary>获取或设置如何将命令结果应用于 <see cref="T:System.Data.DataRow" /> 时使用的 Update 方法 <see cref="T:System.Data.OleDb.OleDbDataAdapter" />。</summary>
      <returns>
        <see cref="T:System.Data.UpdateRowSource" /> 值之一。</returns>
      <exception cref="T:System.ArgumentException">输入的值不是之一 <see cref="T:System.Data.UpdateRowSource" /> 值。</exception>
    </member>
    <member name="P:System.Data.OleDb.OleDbCommandBuilder.DataAdapter">
      <summary>获取或设置 <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> 对于哪些 SQL 语句会自动生成的对象。</summary>
      <returns>一个 <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> 对象。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbConnection.ConnectionString">
      <summary>获取或设置用于打数据库的字符串。</summary>
      <returns>OLE DB 提供程序连接字符串中包含数据源名称和建立初始连接所需的其他参数。 默认值为一个空字符串。</returns>
      <exception cref="T:System.ArgumentException">提供了无效的连接字符串参数或尚未提供所需的连接字符串参数。</exception>
    </member>
    <member name="P:System.Data.OleDb.OleDbConnection.ConnectionTimeout">
      <summary>获取终止尝试并生成错误之前在尝试建立连接时所等待的时间。</summary>
      <returns>以秒为单位时要等待连接打开的时间。 默认值为 15 秒。</returns>
      <exception cref="T:System.ArgumentException">设置的值小于 0。</exception>
    </member>
    <member name="P:System.Data.OleDb.OleDbConnection.Database">
      <summary>获取当前数据库的名称或打开连接后要使用的数据库的名称。</summary>
      <returns>当前数据库的名称或打开连接后要使用的数据库的名称。 默认值为一个空字符串。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbConnection.DataSource">
      <summary>获取服务器名称或数据源的文件名。</summary>
      <returns>服务器名称或数据源的文件名。 默认值为一个空字符串。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbConnection.Provider">
      <summary>获取在指定的 OLE DB 提供程序的名称"提供程序 ="连接字符串的子句。</summary>
      <returns>在指定的提供程序的名称"提供程序 ="连接字符串的子句。 默认值为一个空字符串。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbConnection.ServerVersion">
      <summary>获取一个字符串，包含客户端连接到服务器的版本。</summary>
      <returns>已连接的服务器的版本。</returns>
      <exception cref="T:System.InvalidOperationException">连接已关闭。</exception>
    </member>
    <member name="P:System.Data.OleDb.OleDbConnection.State">
      <summary>获取连接的当前状态。</summary>
      <returns>
        <see cref="T:System.Data.ConnectionState" /> 值的按位组合。 默认值已关闭。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbConnectionStringBuilder.DataSource">
      <summary>获取或设置要连接到的数据源的名称。</summary>
      <returns>值 <see cref="P:System.Data.OleDb.OleDbConnectionStringBuilder.DataSource" /> 属性，或 String.Empty 如果未提供任何。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbConnectionStringBuilder.FileName">
      <summary>获取或设置用于连接到数据源的通用数据链接 (UDL) 文件的名称。</summary>
      <returns>值 <see cref="P:System.Data.OleDb.OleDbConnectionStringBuilder.FileName" /> 属性，或 String.Empty 如果未提供任何。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbConnectionStringBuilder.Item(System.String)">
      <summary>获取或设置与指定的键关联的值。 在 C# 中，此属性为索引器。</summary>
      <param name="keyword">要获取或设置的项的键。</param>
      <returns>与指定的键相关联的值。</returns>
      <exception cref="T:System.ArgumentException">连接字符串格式不正确 （可能缺少必需的"="中的键/值对）。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为空引用（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="P:System.Data.OleDb.OleDbConnectionStringBuilder.Keys">
      <summary>获取包含 <see cref="T:System.Collections.ICollection" /> 中的键的 <see cref="T:System.Data.OleDb.OleDbConnectionStringBuilder" />。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Data.OleDb.OleDbConnectionStringBuilder" /> 中的键。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbConnectionStringBuilder.OleDbServices">
      <summary>获取或设置要传递的连接字符串中的 OLE DB 服务密钥的值。</summary>
      <returns>返回与连接字符串内的 OLE DB 服务键对应的值。 默认情况下，值为-13。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbConnectionStringBuilder.PersistSecurityInfo">
      <summary>获取或设置一个布尔值，该值指示是否安全敏感信息，如密码，返回作为连接的一部分中，是否连接是打开的或者一直处于打开状态。</summary>
      <returns>值 <see cref="P:System.Data.OleDb.OleDbConnectionStringBuilder.PersistSecurityInfo" /> 属性，或 false 如果未提供任何。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbConnectionStringBuilder.Provider">
      <summary>获取或设置一个字符串，包含与内部连接字符串相关联的数据提供程序的名称。</summary>
      <returns>值 <see cref="P:System.Data.OleDb.OleDbConnectionStringBuilder.Provider" /> 属性，或 String.Empty 如果未提供任何。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbDataAdapter.DeleteCommand">
      <summary>获取或设置的 SQL 语句或存储的过程用于从数据集中删除记录。</summary>
      <returns>
        <see cref="T:System.Data.OleDb.OleDbCommand" /> 过程中使用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 尝试删除对应的数据源中的记录已删除的行中的 <see cref="T:System.Data.DataSet" />。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbDataAdapter.InsertCommand">
      <summary>获取或设置 SQL 语句或存储的过程，用于将新记录插入到数据源。</summary>
      <returns>
        <see cref="T:System.Data.OleDb.OleDbCommand" /> 过程中使用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 对应于中的新行的数据源中插入记录 <see cref="T:System.Data.DataSet" />。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand">
      <summary>获取或设置的 SQL 语句或存储的过程用于在数据源中选择记录。</summary>
      <returns>
        <see cref="T:System.Data.OleDb.OleDbCommand" /> 过程中使用 <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> 从放置中的数据源选择记录 <see cref="T:System.Data.DataSet" />。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.Data.IDbDataAdapter.DeleteCommand" />。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> 在更新过程中用于删除数据集中已删除行的数据源中的记录。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#InsertCommand">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.Data.IDbDataAdapter.InsertCommand" />。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> ，在更新过程中，用于放置在数据集中的数据源中插入记录。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#SelectCommand">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.Data.IDbDataAdapter.SelectCommand" />。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> ，在更新过程中，用于从数据源以便放入数据集中选择记录。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.Data.IDbDataAdapter.UpdateCommand" />。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> 在数据源中更新来更新记录过程中使用数据集中已修改的行。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbDataAdapter.UpdateCommand">
      <summary>获取或设置的 SQL 语句或存储的过程用于更新数据源中的记录。</summary>
      <returns>
        <see cref="T:System.Data.OleDb.OleDbCommand" /> 过程中使用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 以更新对应的数据源中的记录已修改的行中的 <see cref="T:System.Data.DataSet" />。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbDataReader.Depth">
      <summary>获取一个值，该值指示当前行的嵌套深度。</summary>
      <returns>当前行的嵌套深度。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbDataReader.FieldCount">
      <summary>获取当前行中的列数。</summary>
      <returns>如果未放在有效记录集中，0;否则为当前记录中的列数。 默认值为 -1。</returns>
      <exception cref="T:System.NotSupportedException">没有当前连接到数据源。</exception>
    </member>
    <member name="P:System.Data.OleDb.OleDbDataReader.HasRows">
      <summary>获取一个值，该值指示是否 <see cref="T:System.Data.OleDb.OleDbDataReader" /> 包含一个或多个行。</summary>
      <returns>true 如果 <see cref="T:System.Data.OleDb.OleDbDataReader" /> 包含一个或多个行; 否则为 false。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbDataReader.IsClosed">
      <summary>指示是否关闭数据读取器。</summary>
      <returns>true 如果 <see cref="T:System.Data.OleDb.OleDbDataReader" /> 关闭; 否则为 false。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbDataReader.Item(System.Int32)">
      <summary>以其本机格式，在给定列序号获取指定列的值。</summary>
      <param name="index">列序号。</param>
      <returns>以其本机格式指定列的值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引超出了范围 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />。</exception>
    </member>
    <member name="P:System.Data.OleDb.OleDbDataReader.Item(System.String)">
      <summary>获取指定列的值以其本机格式，在给定列名称。</summary>
      <param name="name">列名。</param>
      <returns>以其本机格式指定列的值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">找到具有指定名称没有列。</exception>
    </member>
    <member name="P:System.Data.OleDb.OleDbDataReader.RecordsAffected">
      <summary>获取通过执行 SQL 语句更改、插入或删除的行数。</summary>
      <returns>更改、 插入或删除，则行数如果受不影响任何行，则为 0 或语句失败。和-1 表示 SELECT 语句。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbDataReader.VisibleFieldCount">
      <summary>获取 <see cref="T:System.Data.OleDb.OleDbDataReader" /> 中未隐藏的字段的数目。</summary>
      <returns>未隐藏的字段的数目。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbError.Message">
      <summary>获取错误的简短说明。</summary>
      <returns>错误的简短描述。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbError.NativeError">
      <summary>获取特定于数据库的错误信息。</summary>
      <returns>特定于数据库的错误信息。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbError.Source">
      <summary>获取生成错误的提供程序的名称。</summary>
      <returns>生成错误的提供程序的名称。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbError.SQLState">
      <summary>获取数据库的五个字符的错误代码遵循 ANSI SQL 标准。</summary>
      <returns>五个字符的错误代码，它标识错误的源，如果该错误可以由多个位置颁发。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbErrorCollection.Count">
      <summary>获取集合中的错误数。</summary>
      <returns>集合中错误的总数。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbErrorCollection.Item(System.Int32)">
      <summary>获取指定索引处的错误。</summary>
      <param name="index">要检索的错误的从零开始的索引。</param>
      <returns>
        <see cref="T:System.Data.OleDb.OleDbError" /> ，其中包含错误的指定索引处。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbErrorCollection.System#Collections#ICollection#IsSynchronized">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.Collections.ICollection.IsSynchronized" />。</summary>
      <returns>如果对集合的访问是同步的（线程安全），则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbErrorCollection.System#Collections#ICollection#SyncRoot">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.Collections.ICollection.SyncRoot" />。</summary>
      <returns>一个 <see cref="T:System.Object" /> 可用于同步对集合的访问。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbException.ErrorCode">
      <summary>获取错误的 HRESULT。</summary>
      <returns>该错误的 HRESULT。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbException.Errors">
      <summary>获取一个或多个集合 <see cref="T:System.Data.OleDb.OleDbError" /> 对象可提供有关对于 OLE DB 的.NET Framework 数据提供程序生成的异常的详细的信息。</summary>
      <returns>收集的实例 <see cref="T:System.Data.OleDb.OleDbError" /> 类。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbInfoMessageEventArgs.ErrorCode">
      <summary>获取 HRESULT 遵循 ANSI SQL 标准的数据库。</summary>
      <returns>HRESULT，它确定的错误的来源，如果该错误可以由多个位置颁发。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbInfoMessageEventArgs.Errors">
      <summary>获取从数据源发送的警告的集合。</summary>
      <returns>从数据源发送的警告集合。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbInfoMessageEventArgs.Message">
      <summary>获取从数据源发送的错误的完整文本。</summary>
      <returns>完整的错误文本。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbInfoMessageEventArgs.Source">
      <summary>获取生成错误的对象的名称。</summary>
      <returns>生成错误的对象的名称。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbParameter.DbType">
      <summary>获取或设置参数的 <see cref="T:System.Data.DbType" />。</summary>
      <returns>
        <see cref="T:System.Data.DbType" /> 值之一。 默认值为 <see cref="F:System.Data.DbType.String" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性未设置为有效 <see cref="T:System.Data.DbType" />。</exception>
    </member>
    <member name="P:System.Data.OleDb.OleDbParameter.Direction">
      <summary>获取或设置一个值，该值指示参数是仅输入、 输出、 双向参数还是存储的过程返回值参数。</summary>
      <returns>
        <see cref="T:System.Data.ParameterDirection" /> 值之一。 默认值为 Input。</returns>
      <exception cref="T:System.ArgumentException">属性未设置为有效的 <see cref="T:System.Data.ParameterDirection" /> 值之一。</exception>
    </member>
    <member name="P:System.Data.OleDb.OleDbParameter.IsNullable">
      <summary>获取或设置一个值，该值指示参数是否接受 null 值。</summary>
      <returns>如果接受 null 值，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbParameter.OleDbType">
      <summary>获取或设置参数的 <see cref="T:System.Data.OleDb.OleDbType" />。</summary>
      <returns>参数的 <see cref="T:System.Data.OleDb.OleDbType" />。 默认值为 <see cref="F:System.Data.OleDb.OleDbType.VarWChar" />。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbParameter.ParameterName">
      <summary>获取或设置 <see cref="T:System.Data.OleDb.OleDbParameter" /> 的名称。</summary>
      <returns>
        <see cref="T:System.Data.OleDb.OleDbParameter" /> 的名称。 默认值为空字符串("")。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbParameter.Precision">
      <summary>获取或设置用于表示 <see cref="P:System.Data.OleDb.OleDbParameter.Value" /> 属性的最大位数。</summary>
      <returns>用于表示 <see cref="P:System.Data.OleDb.OleDbParameter.Value" /> 属性的最大位数。 默认值为 0，它表示的数据提供程序设置的精度 <see cref="P:System.Data.OleDb.OleDbParameter.Value" />。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbParameter.Scale">
      <summary>获取或设置所解析的 <see cref="P:System.Data.OleDb.OleDbParameter.Value" /> 的小数位数。</summary>
      <returns>所解析的 <see cref="P:System.Data.OleDb.OleDbParameter.Value" /> 的小数位数。 默认值为 0。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbParameter.Size">
      <summary>获取或设置列中的数据的最大大小（以字节为单位）。</summary>
      <returns>列中的数据的最大大小（以字节为单位）。 默认值将根据参数值进行推断。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbParameter.SourceColumn">
      <summary>获取或设置映射到的源列的名称 <see cref="T:System.Data.DataSet" /> ，并且用于加载或返回 <see cref="P:System.Data.OleDb.OleDbParameter.Value" />。</summary>
      <returns>映射到 <see cref="T:System.Data.DataSet" /> 的源列的名称。 默认值为一个空字符串。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbParameter.SourceColumnNullMapping">
      <summary>设置或获取一个值，该值指示源列是否可以为 null。 这允许 <see cref="T:System.Data.Common.DbCommandBuilder" /> 来正确生成为 null 的列的 Update 语句。</summary>
      <returns>如果源列可以为 null，则为 true；否则为 ￼false￼。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbParameter.SourceVersion">
      <summary>获取或设置 <see cref="T:System.Data.DataRowVersion" /> 来加载时使用 <see cref="P:System.Data.OleDb.OleDbParameter.Value" />。</summary>
      <returns>
        <see cref="T:System.Data.DataRowVersion" /> 值之一。 默认值为 Current。</returns>
      <exception cref="T:System.ArgumentException">该属性未设置为其中一个 <see cref="T:System.Data.DataRowVersion" /> 值。</exception>
    </member>
    <member name="P:System.Data.OleDb.OleDbParameter.Value">
      <summary>获取或设置参数的值。</summary>
      <returns>充当参数值的 <see cref="T:System.Object" />。 默认值为 null。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbParameterCollection.Count">
      <summary>返回一个整数，包含中的元素数 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />。 只读。</summary>
      <returns>中的元素数 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 为整数。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbParameterCollection.IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 是否具有固定大小。 只读。</summary>
      <returns>true 如果 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 具有固定大小; 否则为 false。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbParameterCollection.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 是否为只读。</summary>
      <returns>true 如果 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> ; 否则为读取 false。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbParameterCollection.IsSynchronized">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 是否已同步。 只读。</summary>
      <returns>true 如果 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 同步; 否则为 false。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbParameterCollection.Item(System.Int32)">
      <summary>获取或设置指定索引处的 <see cref="T:System.Data.OleDb.OleDbParameter" />。</summary>
      <param name="index">要检索的参数的索引（从零开始）。</param>
      <returns>位于指定索引处的 <see cref="T:System.Data.OleDb.OleDbParameter" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定的索引不存在。</exception>
    </member>
    <member name="P:System.Data.OleDb.OleDbParameterCollection.Item(System.String)">
      <summary>获取或设置 <see cref="T:System.Data.OleDb.OleDbParameter" /> 具有指定名称。</summary>
      <param name="parameterName">要检索的参数的名称。</param>
      <returns>具有指定名称的 <see cref="T:System.Data.OleDb.OleDbParameter" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定的名称不存在。</exception>
    </member>
    <member name="P:System.Data.OleDb.OleDbParameterCollection.SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 的访问的对象。 只读。</summary>
      <returns>可用于同步对 <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> 的访问的对象。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbPermission.Provider">
      <summary>此属性已被标记为过时。 将此属性设置将不起作用。</summary>
      <returns>此属性已被标记为过时。 将此属性设置将不起作用。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbPermissionAttribute.Provider">
      <summary>获取或设置由逗号分隔字符串，包含支持的提供程序的列表。</summary>
      <returns>受安全策略允许的提供程序的以逗号分隔列表。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbRowUpdatedEventArgs.Command">
      <summary>获取 <see cref="T:System.Data.OleDb.OleDbCommand" /> 时执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 调用。</summary>
      <returns>
        <see cref="T:System.Data.OleDb.OleDbCommand" /> 时执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 调用。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbRowUpdatingEventArgs.Command">
      <summary>获取或设置 <see cref="T:System.Data.OleDb.OleDbCommand" /> 时要执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</summary>
      <returns>
        <see cref="T:System.Data.OleDb.OleDbCommand" /> 时要执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbTransaction.Connection">
      <summary>获取 <see cref="T:System.Data.OleDb.OleDbConnection" /> 与该事务关联的对象或 null 如果该事务将不再有效。</summary>
      <returns>
        <see cref="T:System.Data.OleDb.OleDbConnection" /> 与事务关联的对象。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbTransaction.IsolationLevel">
      <summary>指定 <see cref="T:System.Data.IsolationLevel" /> 此事务。</summary>
      <returns>
        <see cref="T:System.Data.IsolationLevel" /> 此事务。 默认值为 ReadCommitted。</returns>
    </member>
    <member name="P:System.Data.Sql.SqlDataSourceEnumerator.Instance">
      <summary>获取实例 <see cref="T:System.Data.Sql.SqlDataSourceEnumerator" />, ，它可以用于检索有关可用的 SQL Server 实例的信息。</summary>
      <returns>一个实例 <see cref="T:System.Data.Sql.SqlDataSourceEnumerator" /> 用于检索有关可用的 SQL Server 实例的信息。</returns>
    </member>
    <member name="P:System.Data.Sql.SqlNotificationRequest.Options">
      <summary>获取或设置 SQL Server Service Broker 服务名称其中发布通知消息。</summary>
      <returns>string 包含其中发布通知消息的 SQL Server 2005 Service Broker 服务名称和数据库或服务 broker 实例 GUID 来划分在作用域的服务器名称查找。</returns>
      <exception cref="T:System.ArgumentNullException">值为 NULL。</exception>
      <exception cref="T:System.ArgumentException">值的长度超过 uint16.MaxValue。</exception>
    </member>
    <member name="P:System.Data.Sql.SqlNotificationRequest.Timeout">
      <summary>获取或设置一个值，指定 SQL Server 更改发生在操作超时之前要等待多长时间。</summary>
      <returns>指定 SQL Server 等待操作超时之前出现的更改的时间长度，以秒为单位，有符号的整数值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于零。</exception>
    </member>
    <member name="P:System.Data.Sql.SqlNotificationRequest.UserData">
      <summary>获取或设置针对此通知的应用程序特定的标识符。</summary>
      <returns>一个 string 此通知的应用程序特定标识符值。</returns>
      <exception cref="T:System.ArgumentException">值的长度超过 uint16.MaxValue。</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlBulkCopy.BatchSize">
      <summary>每个批处理中的行数。 在每个批处理结束时，批处理中的行将发送到服务器。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlBulkCopy.BatchSize" /> 属性的整数值；如果未设置任何值，则为零。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout">
      <summary>超时之前可用于完成操作的秒数。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" /> 属性的整数值。 默认值为 30 秒。 值为 0 表示无限制，大容量复制将无限期等待。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlBulkCopy.ColumnMappings">
      <summary>返回 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 项的集合。 列映射定义数据源中的列和目标中的列之间的关系。</summary>
      <returns>列映射集合。 默认情况下为空集合。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName">
      <summary>服务器上的目标表的名称。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 属性的字符串值，如果未提供任何值，则为 null。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlBulkCopy.EnableStreaming">
      <summary>启用或禁用 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象，以流式传输 <see cref="T:System.Data.IDataReader" /> 对象中的数据</summary>
      <returns>如果 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 对象可以流式传输 <see cref="T:System.Data.IDataReader" /> 对象中的数据，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter">
      <summary>定义生成通知事件之前要处理的行数。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" /> 属性的整数值，如果未设置任何属性，则为零。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationColumn">
      <summary>正在映射的目标数据库表中的列的名称。</summary>
      <returns>字符串值 <see cref="P:System.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationColumn" /> 属性。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationOrdinal">
      <summary>目标表中的目标列的序号值。</summary>
      <returns>整数值 <see cref="P:System.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationOrdinal" /> 属性，否则为-1 未设置该属性。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlBulkCopyColumnMapping.SourceColumn">
      <summary>正在映射的数据源中的列的名称。</summary>
      <returns>字符串值 <see cref="P:System.Data.SqlClient.SqlBulkCopyColumnMapping.SourceColumn" /> 属性。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlBulkCopyColumnMapping.SourceOrdinal">
      <summary>数据源中的源列的序号位置。</summary>
      <returns>整数值 <see cref="P:System.Data.SqlClient.SqlBulkCopyColumnMapping.SourceOrdinal" /> 属性。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection.Item(System.Int32)">
      <summary>获取 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 的指定索引处的对象。</summary>
      <param name="index">从零开始的索引 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 来查找。</param>
      <returns>一个 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 对象。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlClientFactory.CanCreateDataSourceEnumerator">
      <summary>返回 true 如果 <see cref="T:System.Data.Sql.SqlDataSourceEnumerator" /> 可创建; 否则为 false 。</summary>
      <returns>true 如果 <see cref="T:System.Data.Sql.SqlDataSourceEnumerator" /> 可创建; 否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlCommand.ColumnEncryptionSetting">
      <summary>获取或设置此命令的列加密设置。</summary>
      <returns>此命令的列加密设置。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlCommand.CommandText">
      <summary>获取或设置要在数据源中执行的 Transact-SQL 语句、表名或存储过程。</summary>
      <returns>要执行的 Transact-SQL 语句或存储过程。 默认值为一个空字符串。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlCommand.CommandTimeout">
      <summary>获取或设置在终止尝试执行命令并生成错误之前的等待时间。</summary>
      <returns>等待命令执行所需的时间（以秒为单位）。 默认值为 30 秒。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlCommand.CommandType">
      <summary>获取或设置一个值，该值指示解释 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> 属性的方式。</summary>
      <returns>
        <see cref="T:System.Data.CommandType" /> 值之一。 默认值为 Text。</returns>
      <exception cref="T:System.ArgumentException">该值不是有效的 <see cref="T:System.Data.CommandType" />。</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlCommand.Connection">
      <summary>获取或设置 <see cref="T:System.Data.SqlClient.SqlCommand" /> 的此实例使用的 <see cref="T:System.Data.SqlClient.SqlConnection" />。</summary>
      <returns>到数据源的连接。 默认值为 null。</returns>
      <exception cref="T:System.InvalidOperationException">命令在事务中登记时 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" /> 属性被更改。</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlCommand.DesignTimeVisible">
      <summary>获取或设置一个值，该值指示命令对象是否应在 Windows 窗体设计器控件中可见。</summary>
      <returns>一个指示命令对象是否应在控件中可见的值。 默认值为 true。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlCommand.Notification">
      <summary>获取或设置一个指定绑定到此命令的 <see cref="T:System.Data.Sql.SqlNotificationRequest" /> 对象的值。</summary>
      <returns>如果设置为 null（默认值），则不应请求任何通知。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlCommand.NotificationAutoEnlist">
      <summary>获取或设置一个值，该值指示应用程序是否应自动接收来自通用 <see cref="T:System.Data.SqlClient.SqlDependency" /> 对象的查询通知。</summary>
      <returns>如果应用程序应自动接收查询通知，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlCommand.Parameters">
      <summary>获取 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />。</summary>
      <returns>Transact-SQL 语句或存储过程的参数。 默认值为空集合。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlCommand.Transaction">
      <summary>获取或设置要在其中执行 <see cref="T:System.Data.SqlClient.SqlTransaction" /> 的 <see cref="T:System.Data.SqlClient.SqlCommand" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlClient.SqlTransaction" />。 默认值为 null。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlCommand.UpdatedRowSource">
      <summary>获取或设置命令结果在由 <see cref="T:System.Data.Common.DbDataAdapter" /> 的 Update  方法使用时应用于 <see cref="T:System.Data.DataRow" /> 的方式。</summary>
      <returns>
        <see cref="T:System.Data.UpdateRowSource" /> 值之一。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlCommandBuilder.CatalogLocation">
      <summary>获取或设置 <see cref="T:System.Data.Common.CatalogLocation" /> 实例 <see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> 类。</summary>
      <returns>一个 <see cref="T:System.Data.Common.CatalogLocation" /> 对象。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlCommandBuilder.CatalogSeparator">
      <summary>设置或获取一个字符串，用于为实例的目录分隔符 <see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> 类。</summary>
      <returns>一个字符串，指示的实例一起使用的目录分隔符 <see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> 类。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlCommandBuilder.DataAdapter">
      <summary>获取或设置 <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> 对于的 TRANSACT-SQL 语句会自动生成的对象。</summary>
      <returns>一个 <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> 对象。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlCommandBuilder.QuotePrefix">
      <summary>获取或设置用于指定 SQL Server 数据库对象，如表或列，其名称包含空格或保留的标记等字符时的起始字符。</summary>
      <returns>若要使用的字符或起始字符。 默认值为一个空字符串。</returns>
      <exception cref="T:System.InvalidOperationException">此属性不能更改后的 INSERT、 UPDATE，或生成删除命令。</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix">
      <summary>获取或设置一个字符或字符，用于指定 SQL Server 数据库对象，如表或列，其名称包含空格或保留的标记等字符结束。</summary>
      <returns>结束字符或要使用的字符。 默认值为一个空字符串。</returns>
      <exception cref="T:System.InvalidOperationException">生成 insert、 update 或 delete 命令后，不能更改此属性。</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlCommandBuilder.SchemaSeparator">
      <summary>获取或设置要用于架构标识符和任何其他标识符之间的分隔符的字符。</summary>
      <returns>要用作架构分隔符的字符。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnection.AccessToken">
      <summary>获取或设置用于连接的访问令牌。</summary>
      <returns>用于连接的访问令牌。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnection.ClientConnectionId">
      <summary>最近连接尝试连接的 ID，无论该尝试是成功还是失败。</summary>
      <returns>最近连接尝试的连接 ID。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl">
      <summary>获取或设置的生存时间的列加密项中的列加密密钥缓存 Always Encrypted 功能。 默认值为 2 小时。 0 表示无缓存根本。</summary>
      <returns>时间间隔中。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled">
      <summary>获取或设置一个值，该值指示是否启用查询元数据缓存 (为 true)，或未针对运行参数化查询的 (false) Always Encrypted 启用了数据库。 默认值为 true。</summary>
      <returns>如果启用查询元数据缓存，则返回 true否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths">
      <summary>允许你设置数据库服务器的受信任密钥路径列表。 如果在处理应用程序查询时驱动程序接收到不位于列表中的密钥路径，则查询会失败。 此属性针对安全攻击提供附加保护，这些安全攻击涉及提供伪造密钥路径的受威胁的 SQL Server，可能导致密钥存储凭据泄露。</summary>
      <returns>适用于列加密的受信任主密钥路径的列表。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnection.ConnectionString">
      <summary>获取或设置用于打开 SQL Server 数据库的字符串。</summary>
      <returns>连接字符串，其中包含源数据库名称和建立初始连接所需的其他参数。 默认值为一个空字符串。</returns>
      <exception cref="T:System.ArgumentException">提供了一个无效的连接字符串参数，或者未提供所需的连接字符串参数。</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnection.ConnectionTimeout">
      <summary>获取终止尝试并生成错误之前在尝试建立连接时所等待的时间。</summary>
      <returns>等待连接打开所需的时间（以秒为单位）。 默认值为 15 秒。</returns>
      <exception cref="T:System.ArgumentException">设置的值小于 0。</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnection.Credential">
      <summary>获取或设置此连接的 <see cref="T:System.Data.SqlClient.SqlCredential" /> 对象。</summary>
      <returns>此连接的 <see cref="T:System.Data.SqlClient.SqlCredential" /> 对象。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnection.Database">
      <summary>获取当前数据库的名称或打开连接后要使用的数据库的名称。</summary>
      <returns>当前数据库的名称或打开连接后要使用的数据库的名称。 默认值为一个空字符串。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnection.DataSource">
      <summary>获取要连接的 SQL Server 的实例的名称。</summary>
      <returns>要连接的 SQL Server 的实例的名称。 默认值为一个空字符串。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors">
      <summary>获取或设置 <see cref="P:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors" /> 属性。</summary>
      <returns>如果已设置了 <see cref="P:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors" /> 属性，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnection.PacketSize">
      <summary>获取用于与 SQL Server 的实例进行通信的网络数据包的大小（以字节为单位）。</summary>
      <returns>网络数据包的大小（以字节为单位）。 默认值为 8000。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnection.ServerVersion">
      <summary>获取一个字符串，该字符串包含客户端所连接到的 SQL Server 的实例的版本。</summary>
      <returns>SQL Server 的实例的版本。</returns>
      <exception cref="T:System.InvalidOperationException">连接已关闭。当返回的任务未完成，且在调用 <see cref="M:System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)" /> 后未打开连接时，调用了 <see cref="P:System.Data.SqlClient.SqlConnection.ServerVersion" />。</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnection.State">
      <summary>最近在连接上执行网络操作时表示 <see cref="T:System.Data.SqlClient.SqlConnection" /> 的状态。</summary>
      <returns>一个 <see cref="T:System.Data.ConnectionState" /> 枚举。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnection.StatisticsEnabled">
      <summary>如果设置为 true，则对当前连接启用统计信息收集。</summary>
      <returns>如果启用了统计信息收集，则返回 true；否则返回 false。 默认为 false。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnection.WorkstationId">
      <summary>获取一个标识数据库客户端的字符串。</summary>
      <returns>一个标识数据库客户端的字符串。 如果未指定，则为客户端计算机的名称。 如果两个都没有指定，则值为空字符串。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.ApplicationIntent">
      <summary>连接到 SQL Server 可用性组中的数据库时声明应用程序工作负荷类型。 您可以使用 <see cref="T:System.Data.SqlClient.ApplicationIntent" /> 设置此属性的值。 有关 AlwaysOn 可用性组的 SqlClient 支持的更多信息，请参见SqlClient 对高可用性的支持，灾难恢复。</summary>
      <returns>返回该属性的当前值（类型 <see cref="T:System.Data.SqlClient.ApplicationIntent" /> 的值）。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.ApplicationName">
      <summary>获取或设置与连接字符串关联的应用程序的名称。</summary>
      <returns>应用程序的名称；或者，如果未提供名称，则为“.NET SqlClient Data Provider”。</returns>
      <exception cref="T:System.ArgumentNullException">若要将值设置为 null，请使用 <see cref="F:System.DBNull.Value" />。</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.AsynchronousProcessing">
      <summary>获取或设置一个布尔值，该值指定使用此连接字符串创建的连接是否允许异步处理。</summary>
      <returns>将忽略此属性从 .NET Framework 4.5。 有关 SqlClient 支持异步编程的详细信息，请参阅 异步编程。为 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.AsynchronousProcessing" /> 属性的值，或者，如果未提供任何值，则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.AttachDBFilename">
      <summary>获取或设置包含主数据文件名称的字符串。 该字符串包括可附加数据库的完整路径名。</summary>
      <returns>为 AttachDBFilename 属性的值，或者，如果未提供任何值，则为 String.Empty。</returns>
      <exception cref="T:System.ArgumentNullException">若要将值设置为 null，请使用 <see cref="F:System.DBNull.Value" />。</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.Authentication">
      <summary>获取连接字符串的身份验证。</summary>
      <returns>连接字符串的身份验证。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.ColumnEncryptionSetting">
      <summary>获取连接字符串生成器的列加密设置。</summary>
      <returns>连接字符串生成器的列加密设置。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.ConnectionReset">
      <summary>已过时。 获取或设置一个布尔值，该值指示在从连接池中提取连接时是否重置连接。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.ConnectionReset" /> 属性的值；如果未提供任何值，则为 true。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.ConnectRetryCount">
      <summary>[在 .NET Framework 4.5.1 和更高版本中受支持] 在确定有一个空闲的连接失败之后尝试重新连接的次数。 该值必须是介于 0 和 255 之间的整数。 默认值为 1。 设置为 0 将禁止在空闲连接失败时重新连接。 如果设置的值超过允许的范围，则将引发 <see cref="T:System.ArgumentException" />。</summary>
      <returns>在确定有一个空闲的连接失败之后尝试重新连接的次数。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.ConnectRetryInterval">
      <summary>[在 .NET Framework 4.5.1 和更高版本中受支持] 标识空闲连接失败之后每次重新连接尝试之间的时间量（以秒为单位）。 此值必须是介于 1 和 60 之间的整数。 默认值为 10 秒。 如果设置的值超过允许的范围，则将引发 <see cref="T:System.ArgumentException" />。</summary>
      <returns>标识空闲连接失败之后每次重新连接尝试之间的时间量（以秒为单位）。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.ConnectTimeout">
      <summary>获取或设置在终止尝试并产生错误之前，等待与服务器连接的时间长度（以秒为单位）。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.ConnectTimeout" /> 属性的值；如果未提供任何值，则为 15 秒。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.ContextConnection">
      <summary>获取或设置一个值，该值指示应建立与 SQL Server 的客户端/服务器连接还是进程内连接。</summary>
      <returns>为 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.ContextConnection" /> 属性的值，或者，如果未提供任何值，则为 False。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.CurrentLanguage">
      <summary>获取或设置 SQL Server 语言记录名称。</summary>
      <returns>为 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.CurrentLanguage" /> 属性的值，或者，如果未提供任何值，则为 String.Empty。</returns>
      <exception cref="T:System.ArgumentNullException">若要将值设置为 null，请使用 <see cref="F:System.DBNull.Value" />。</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.DataSource">
      <summary>获取或设置要连接到的 SQL Server 实例的名称或网络地址。</summary>
      <returns>为 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.DataSource" /> 属性的值，或者，如果未提供任何值，则为 String.Empty。</returns>
      <exception cref="T:System.ArgumentNullException">若要将值设置为 null，请使用 <see cref="F:System.DBNull.Value" />。</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.Encrypt">
      <summary>获取或设置一个布尔值，该值指示在服务器安装了证书的情况下，SQL Server 是否为客户端和服务器之间发送的所有数据使用 SSL 加密。</summary>
      <returns>为 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.Encrypt" /> 属性的值，或者，如果未提供任何值，则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.Enlist">
      <summary>获取或设置一个布尔值，该值指示 SQL Server 连接池程序是否在创建线程的当前事务上下文中自动登记连接。</summary>
      <returns>为属性 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.Enlist" /> 的值，或者，如果未提供任何值，则为 true 。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.FailoverPartner">
      <summary>获取或设置在主服务器停机时要连接到的伙伴服务器的名称或地址。</summary>
      <returns>为 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.FailoverPartner" /> 属性的值，或者，如果未提供任何值，则为 String.Empty。</returns>
      <exception cref="T:System.ArgumentNullException">若要将值设置为 null，请使用 <see cref="F:System.DBNull.Value" />。</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.InitialCatalog">
      <summary>获取或设置与该连接关联的数据库的名称。</summary>
      <returns>为 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.InitialCatalog" /> 属性的值，或者，如果未提供任何值，则为 String.Empty。</returns>
      <exception cref="T:System.ArgumentNullException">若要将值设置为 null，请使用 <see cref="F:System.DBNull.Value" />。</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.IntegratedSecurity">
      <summary>获取或设置一个布尔值，该值指示是否在连接中指定用户 ID 和密码（值为 false 时），或者是否使用当前的 Windows 帐户凭据进行身份验证（值为 true 时）。</summary>
      <returns>为 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.IntegratedSecurity" /> 属性的值，或者，如果未提供任何值，则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 是否具有固定大小。</summary>
      <returns>任何情况下都为 true，因为 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 提供固定大小的键/值对集合。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.Item(System.String)">
      <summary>获取或设置与指定的键关联的值。 在 C# 中，此属性为索引器。</summary>
      <param name="keyword">要获取或设置的项的键。</param>
      <returns>与指定的键相关联的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为空引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">尝试添加的键不存在于可用键内。</exception>
      <exception cref="T:System.FormatException">连接字符串中包含无效的值（具体而言，需要使用布尔值或数值，但字符串中并未提供）。</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.Keys">
      <summary>获取包含 <see cref="T:System.Collections.ICollection" /> 中的键的 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" />。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 中的键。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.LoadBalanceTimeout">
      <summary>获取或设置连接被销毁前在连接池中存活的最短时间（以秒为单位）。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.LoadBalanceTimeout" /> 属性的值，如果未提供任何值，则为 0。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.MaxPoolSize">
      <summary>获取或设置针对此特定连接字符串连接池中所允许的最大连接数。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.MaxPoolSize" /> 属性的值；如果未提供任何值，则为 100。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.MinPoolSize">
      <summary>获取或设置针对此特定连接字符串连接池中所允许的最小连接数。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.MinPoolSize" /> 属性的值，如果未提供任何值，则为 0。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.MultipleActiveResultSets">
      <summary>如果为 true，则应用程序可以维护多个活动结果集 (MARS)。 如果为 false，则应用程序必须先处理或取消某一批中的所有结果集，才可以在该连接上执行任何其他批次。有关详细信息，请参阅 Multiple Active Result Sets (MARS)。</summary>
      <returns>为 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.MultipleActiveResultSets" /> 属性的值，或者，如果未提供任何值，则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.MultiSubnetFailover">
      <summary>如果您的应用程序要连接到不同子网上的 AlwaysOn 可用性组 (AG)，则设置 MultiSubnetFailover=true 会加快检测（当前）活动服务器以及与服务器的连接。 有关 AlwaysOn 可用性组的 SqlClient 支持的更多信息，请参见SqlClient 对高可用性的支持，灾难恢复。</summary>
      <returns>返回 <see cref="T:System.Boolean" />，这指示属性的当前值。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.NetworkLibrary">
      <summary>获取或设置一个字符串，该字符串包含用于建立与 SQL Server 的连接的网络库的名称。</summary>
      <returns>为 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.NetworkLibrary" /> 属性的值，或者，如果未提供任何值，则为 String.Empty。</returns>
      <exception cref="T:System.ArgumentNullException">若要将值设置为 null，请使用 <see cref="F:System.DBNull.Value" />。</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.PacketSize">
      <summary>获取或设置用来与 SQL Server 的实例通信的网络数据包的大小（以字节为单位）。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.PacketSize" /> 属性的值；如果未提供任何值，则为 8000。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.Password">
      <summary>获取或设置 SQL Server 帐户的密码。</summary>
      <returns>为 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.Password" /> 属性的值，或者，如果未提供任何值，则为 String.Empty。</returns>
      <exception cref="T:System.ArgumentNullException">密码错误地设置为 null。  请参阅下面的代码示例。</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.PersistSecurityInfo">
      <summary>获取或设置一个布尔值，该值指示如果连接是打开的或者一直处于打开状态，那么安全敏感信息（如密码）是否将不作为连接的一部分返回。</summary>
      <returns>为 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.PersistSecurityInfo" /> 属性的值，或者，如果未提供任何值，则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.PoolBlockingPeriod">
      <summary>连接池阻塞期间行为。</summary>
      <returns>可用的阻塞期设置。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.Pooling">
      <summary>获取或设置一个布尔值，该值指示每次请求连接时该连接是汇入连接池还是显式打开。</summary>
      <returns>为 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.Pooling" /> 属性的值，或者，如果未提供任何值，则为 true。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.Replication">
      <summary>获取或设置一个布尔值，该值指示是否使用连接来支持复制。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.Replication" /> 属性的值；如果未提供任何值，则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.TransactionBinding">
      <summary>获取或设置一个字符串值，该值表示连接如何保持与登记的 System.Transactions 事务的关联。</summary>
      <returns>为 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.TransactionBinding" /> 属性的值，或者，如果未提供任何值，则为 String.Empty。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.TransparentNetworkIPResolution">
      <summary>获取或设置一个布尔值。</summary>
      <returns>一个布尔值。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.TrustServerCertificate">
      <summary>获取或设置一个值，该值指示在跳过用于验证信任的证书链遍历时是否加密信道。</summary>
      <returns>Boolean。 已识别的值为 true、false、yes 和 no。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.TypeSystemVersion">
      <summary>获取或设置一个字符串值，该值指示应用程序所需的类型系统。</summary>
      <returns>下表列出了 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.TypeSystemVersion" /> 属性的可能值：值描述SQL Server 2005使用 SQL Server 2005年类型系统。 未对当前版本的 ADO.NET 执行转换。SQL Server 2008使用 SQL Server 2008 类型系统。最新使用此客户端/服务器对能够处理的最新版本。 这个最新版本将随着客户端和服务器组件的升级自动更新。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.UserID">
      <summary>获取或设置连接到 SQL Server 时要使用的用户 ID。</summary>
      <returns>为 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.UserID" /> 属性的值，或者，如果未提供任何值，则为 String.Empty。</returns>
      <exception cref="T:System.ArgumentNullException">若要将值设置为 null，请使用 <see cref="F:System.DBNull.Value" />。</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.UserInstance">
      <summary>获取或设置一个值，该值指示是否将连接从默认的 SQL Server Express 实例重定向到在调用方帐户之下运行并且在运行时启动的实例。</summary>
      <returns>为 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.UserInstance" /> 属性的值，或者，如果未提供任何值，则为 False。</returns>
      <exception cref="T:System.ArgumentNullException">若要将值设置为 null，请使用 <see cref="F:System.DBNull.Value" />。</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.Values">
      <summary>获取包含 <see cref="T:System.Collections.ICollection" /> 中的值的 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" />。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，包含 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 中的值。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.WorkstationID">
      <summary>获取或设置连接到 SQL Server 的工作站的名称。</summary>
      <returns>为 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.WorkstationID" /> 属性的值，或者，如果未提供任何值，则为 String.Empty。</returns>
      <exception cref="T:System.ArgumentNullException">若要将值设置为 null，请使用 <see cref="F:System.DBNull.Value" />。</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlCredential.Password">
      <summary>返回的密码部分 <see cref="T:System.Data.SqlClient.SqlCredential" /> 对象。</summary>
      <returns>返回的密码部分 <see cref="T:System.Data.SqlClient.SqlCredential" /> 对象。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlCredential.UserId">
      <summary>返回的用户 ID 组件 <see cref="T:System.Data.SqlClient.SqlCredential" /> 对象。</summary>
      <returns>返回的用户 ID 组件 <see cref="T:System.Data.SqlClient.SqlCredential" /> 对象...</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataAdapter.DeleteCommand">
      <summary>获取或设置 TRANSACT-SQL 语句或存储的过程来从数据集中删除记录。</summary>
      <returns>一个 <see cref="T:System.Data.SqlClient.SqlCommand" /> 过程中使用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 删除对应于数据库中的记录已删除的行中的 <see cref="T:System.Data.DataSet" />。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataAdapter.InsertCommand">
      <summary>获取或设置 TRANSACT-SQL 语句或存储的过程以将新记录插入到数据源。</summary>
      <returns>一个 <see cref="T:System.Data.SqlClient.SqlCommand" /> 过程中使用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 将记录插入数据库中的新行与对应 <see cref="T:System.Data.DataSet" />。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataAdapter.SelectCommand">
      <summary>获取或设置 TRANSACT-SQL 语句或存储的过程用于在数据源中选择记录。</summary>
      <returns>一个 <see cref="T:System.Data.SqlClient.SqlCommand" /> 过程中使用 <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> 从以便放入数据库中选择记录 <see cref="T:System.Data.DataSet" />。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#DeleteCommand">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.Data.IDbDataAdapter.DeleteCommand" />。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> 过程中使用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 来删除数据集中已删除行的数据源中的记录。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#InsertCommand">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.Data.IDbDataAdapter.InsertCommand" />。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> 过程中使用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 以新行在数据集中的数据源中插入记录。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#SelectCommand">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.Data.IDbDataAdapter.SelectCommand" />。</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> 过程中使用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 从放入数据集中的数据源选择记录。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#UpdateCommand">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.Data.IDbDataAdapter.UpdateCommand" />。</summary>
      <returns>
        <see cref="T:System.Data.IdbCommand" /> 过程中使用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 来更新数据集中的已修改行的数据源中的记录。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataAdapter.UpdateBatchSize">
      <summary>获取或设置在每个往返中进行处理的行数，到服务器。</summary>
      <returns>要处理每个批的行数。值是效果0批大小没有限制...1禁用批量更新。&gt;1使用多批发送更改 <see cref="P:System.Data.SqlClient.SqlDataAdapter.UpdateBatchSize" /> 一次的操作。当将此值设置为 1 以外的值，与关联的所有命令 <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> 必须具有其 UpdatedRowSource 属性设置为 None 或 OutputParameters。 否则引发异常。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataAdapter.UpdateCommand">
      <summary>获取或设置 TRANSACT-SQL 语句或存储的过程用于更新数据源中的记录。</summary>
      <returns>一个 <see cref="T:System.Data.SqlClient.SqlCommand" /> 过程中使用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 更新对应于数据库中的记录已修改的行中的 <see cref="T:System.Data.DataSet" />。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataReader.Connection">
      <summary>获取与 <see cref="T:System.Data.SqlClient.SqlConnection" /> 关联的 <see cref="T:System.Data.SqlClient.SqlDataReader" />。</summary>
      <returns>与 <see cref="T:System.Data.SqlClient.SqlConnection" /> 关联的 <see cref="T:System.Data.SqlClient.SqlDataReader" />。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataReader.Depth">
      <summary>获取一个值，该值指示当前行的嵌套深度。</summary>
      <returns>当前行的嵌套深度。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataReader.FieldCount">
      <summary>获取当前行中的列数。</summary>
      <returns>如果未放在有效记录集中，0;否则为中当前行的列数。 默认值为 -1。</returns>
      <exception cref="T:System.NotSupportedException">没有当前连接到 SQL Server 的实例。</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataReader.HasRows">
      <summary>获取一个值，该值指示是否 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 包含一个或多个行。</summary>
      <returns>true 如果 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 包含一个或多个行; 否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataReader.IsClosed">
      <summary>检索一个布尔值，该值指示是否指定 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 实例已关闭。</summary>
      <returns>true 如果指定 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 实例已关闭，否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataReader.Item(System.Int32)">
      <summary>以其本机格式，在给定列序号获取指定列的值。</summary>
      <param name="i">从零开始的列序号。</param>
      <returns>以其本机格式指定列的值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引超出了范围 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />。</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataReader.Item(System.String)">
      <summary>获取指定列的值以其本机格式，在给定列名称。</summary>
      <param name="name">列名。</param>
      <returns>以其本机格式指定列的值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">找到具有指定名称没有列。</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataReader.RecordsAffected">
      <summary>获取已更改、 插入或删除通过执行 TRANSACT-SQL 语句的行数。</summary>
      <returns>更改、 插入或删除，则行数如果受不影响任何行，则为 0 或语句失败。和-1 表示 SELECT 语句。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataReader.VisibleFieldCount">
      <summary>获取 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 中未隐藏的字段的数目。</summary>
      <returns>未隐藏的字段的数目。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlDependency.HasChanges">
      <summary>获取一个值，该值指示一个与依赖项关联的结果集是否发生了更改。</summary>
      <returns>一个布尔值，该值指示是否结果之一设置已更改。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlDependency.Id">
      <summary>获取一个值，用于唯一标识的此实例 <see cref="T:System.Data.SqlClient.SqlDependency" /> 类。</summary>
      <returns>字符串表示形式的每个实例生成一个 GUID <see cref="T:System.Data.SqlClient.SqlDependency" /> 类。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlError.Class">
      <summary>获取从 SQL Server 返回的错误的严重级别。</summary>
      <returns>一个 1 至 25 的值，它指示错误的严重级别。 默认值为 0。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlError.LineNumber">
      <summary>从包含错误的 Transact-SQL 批命令或存储过程中获取行号。</summary>
      <returns>Transact-SQL 批命令或存储过程内包含错误的行号。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlError.Message">
      <summary>获取对错误进行描述的文本。</summary>
      <returns>对错误进行描述的文本。有关由 SQL Server 生成的错误的更多信息，请参见 SQL Server 联机丛书。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlError.Number">
      <summary>获取一个标识错误类型的数字。</summary>
      <returns>标识错误类型的数字。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlError.Procedure">
      <summary>获取生成错误的存储过程或远程过程调用 (RPC) 的名称。</summary>
      <returns>存储过程或 RPC 的名称。有关由 SQL Server 生成的错误的更多信息，请参见 SQL Server 联机丛书。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlError.Server">
      <summary>获取生成错误的 SQL Server 实例的名称。</summary>
      <returns>SQL Server 实例的名称。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlError.Source">
      <summary>获取生成错误的提供程序的名称。</summary>
      <returns>生成错误的提供程序的名称。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlError.State">
      <summary>某些错误消息可能在数据库引擎的代码中多次引发。 例如，几种不同的情况下可引发 1105 错误。 引发错误的每种特定情况将分配一个唯一状态代码。</summary>
      <returns>状态代码。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlErrorCollection.Count">
      <summary>获取集合中的错误数。</summary>
      <returns>集合中错误的总数。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlErrorCollection.Item(System.Int32)">
      <summary>获取指定索引处的错误。</summary>
      <param name="index">要检索的错误的从零开始的索引。</param>
      <returns>一个 <see cref="T:System.Data.SqlClient.SqlError" /> ，其中包含错误的指定索引处。</returns>
      <exception cref="T:System.IndexOutOfRangeException">索引参数是超出数组界限。</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlErrorCollection.System#Collections#ICollection#IsSynchronized">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.Collections.ICollection.IsSynchronized" />。</summary>
      <returns>如果对 true 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlErrorCollection.System#Collections#ICollection#SyncRoot">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.Collections.ICollection.SyncRoot" />。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlException.Class">
      <summary>获取适用于 SQL Server 从.NET Framework 数据提供程序返回的错误的严重性级别。</summary>
      <returns>一个 1 至 25 的值，它指示错误的严重级别。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlException.ClientConnectionId">
      <summary>表示客户端连接 id。 有关详细信息，请参阅ADO.NET 中的数据跟踪。</summary>
      <returns>返回客户端连接 id。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlException.Errors">
      <summary>获取一个或多个集合 <see cref="T:System.Data.SqlClient.SqlError" /> 为提供适用于 SQL Server 的.NET Framework 数据提供程序生成的异常有关的详细的信息的对象。</summary>
      <returns>收集的实例 <see cref="T:System.Data.SqlClient.SqlError" /> 类。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlException.LineNumber">
      <summary>获取生成错误的存储的过程的 TRANSACT-SQL 命令批处理中的行号。</summary>
      <returns>中的 TRANSACT-SQL 命令批处理或存储的过程生成该错误的行号。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlException.Number">
      <summary>获取一个标识错误类型的数字。</summary>
      <returns>标识错误类型的数字。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlException.Procedure">
      <summary>获取生成错误的存储过程或远程过程调用 (RPC) 的名称。</summary>
      <returns>存储过程或 RPC 的名称。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlException.Server">
      <summary>获取正在运行的生成错误的 SQL Server 实例的计算机的名称。</summary>
      <returns>运行 SQL Server 实例的计算机的名称。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlException.Source">
      <summary>获取生成错误的提供程序的名称。</summary>
      <returns>生成错误的提供程序的名称。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlException.State">
      <summary>从表示错误、 警告或"未找到数据"消息的 SQL Server 中获取数字错误代码。 有关如何对这些值进行解码的详细信息，请参阅 SQL Server 联机丛书。</summary>
      <returns>表示错误代码的数字。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlInfoMessageEventArgs.Errors">
      <summary>获取从服务器发送的警告集合。</summary>
      <returns>从服务器发送的警告集合。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlInfoMessageEventArgs.Message">
      <summary>获取从数据库发送的错误的完整文本。</summary>
      <returns>完整的错误文本。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlInfoMessageEventArgs.Source">
      <summary>获取生成错误的对象的名称。</summary>
      <returns>生成错误的对象的名称。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlNotificationEventArgs.Info">
      <summary>获取一个值，指示通知事件，例如，被修改的数据库或被截断的表中的行的原因。</summary>
      <returns>通知事件原因。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlNotificationEventArgs.Source">
      <summary>获取一个值，该值指示生成通知，如对查询数据或数据库的状态更改的源。</summary>
      <returns>通知的源。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlNotificationEventArgs.Type">
      <summary>获取一个值，该值指示是否由于实际发生了更改，生成此通知或订阅。</summary>
      <returns>一个值，该值指示是否由订阅或更改生成通知。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.CompareInfo">
      <summary>获取或设置 <see cref="T:System.Globalization.CompareInfo" /> 对象，它定义应如何对此参数执行字符串比较。</summary>
      <returns>
        <see cref="T:System.Globalization.CompareInfo" /> 对象，它定义此参数的字符串比较。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.DbType">
      <summary>获取或设置参数的 <see cref="T:System.Data.SqlDbType" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlDbType" /> 值之一。 默认值为 NVarChar。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.Direction">
      <summary>获取或设置一个值，该值指示参数是只可输入的参数、只可输出的参数、双向参数还是存储过程返回值参数。</summary>
      <returns>
        <see cref="T:System.Data.ParameterDirection" /> 值之一。 默认值为 Input。</returns>
      <exception cref="T:System.ArgumentException">属性未设置为有效的 <see cref="T:System.Data.ParameterDirection" /> 值之一。</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.ForceColumnEncryption">
      <summary>实施时使用的参数的加密 Always Encrypted。 如果 SQL Server 通知驱动程序参数不需要进行加密，则使用该参数的查询会失败。 此属性针对安全攻击提供附加保护，这些安全攻击涉及向客户端提供不正确的加密元数据的受威胁的 SQL Server，可能导致数据泄露。</summary>
      <returns>如果参数具有强制列加密，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.IsNullable">
      <summary>获取或设置一个值，该值指示参数是否接受 null 值。<see cref="P:System.Data.SqlClient.SqlParameter.IsNullable" /> 不用于验证参数的值，并且在执行命令时不会阻止发送或接收 null 值。</summary>
      <returns>如果接受 null 值，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.LocaleId">
      <summary>获取或设置确定某一特定区域的约定和语言设置的区域设置标识符。</summary>
      <returns>返回与此参数相关联的区域设置标识符。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.Offset">
      <summary>获取或设置 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 属性的偏移量。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 的偏移量。 默认值为 0。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.ParameterName">
      <summary>获取或设置 <see cref="T:System.Data.SqlClient.SqlParameter" /> 的名称。</summary>
      <returns>
        <see cref="T:System.Data.SqlClient.SqlParameter" /> 的名称。 默认值为一个空字符串。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.Precision">
      <summary>获取或设置用于表示 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 属性的最大位数。</summary>
      <returns>用于表示 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 属性的最大位数。 默认值为 0。 这指示数据提供程序将设置 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 的精度。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.Scale">
      <summary>获取或设置所解析的 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 的小数位数。</summary>
      <returns>所解析的 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 的小数位数。 默认值为 0。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.Size">
      <summary>获取或设置列中的数据的最大大小（以字节为单位）。</summary>
      <returns>列中的数据的最大大小（以字节为单位）。 默认值将根据参数值进行推断。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.SourceColumn">
      <summary>获取或设置映射到 <see cref="T:System.Data.DataSet" /> 并且用于加载或返回 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 的源列的名称</summary>
      <returns>映射到 <see cref="T:System.Data.DataSet" /> 的源列的名称。 默认值为一个空字符串。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.SourceColumnNullMapping">
      <summary>设置或获取一个值，该值指示源列是否可以为 null。 通过此操作，<see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> 能够为可以为 null 的列正确地生成 Update 语句。</summary>
      <returns>如果源列可以为 null，则为 true；否则为 ￼false￼。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.SourceVersion">
      <summary>获取或设置要在加载 <see cref="T:System.Data.DataRowVersion" /> 时使用的 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />。</summary>
      <returns>
        <see cref="T:System.Data.DataRowVersion" /> 值之一。 默认值为 Current。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.SqlDbType">
      <summary>获取或设置参数的 <see cref="T:System.Data.SqlDbType" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlDbType" /> 值之一。 默认值为 NVarChar。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.SqlValue">
      <summary>获取或设置作为 SQL 类型的参数的值。</summary>
      <returns>
        <see cref="T:System.Object" /> 对象，是使用 SQL 类型的参数的值。 默认值为 null。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.TypeName">
      <summary>获取或设置表值参数的类型名称。</summary>
      <returns>指定的表值参数的类型名称。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.UdtTypeName">
      <summary>获取或设置作为参数的表示用户定义类型的 string。</summary>
      <returns>表示数据库中用户定义类型的完全限定名称的 string。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.Value">
      <summary>获取或设置参数的值。</summary>
      <returns>充当参数值的 <see cref="T:System.Object" />。 默认值为 null。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.XmlSchemaCollectionDatabase">
      <summary>获取此 XML 实例的架构集合所在的数据库的名称。</summary>
      <returns>此 XML 实例的架构集合所在的数据库的名称。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.XmlSchemaCollectionName">
      <summary>获取此 XML 实例的架构集合的名称。</summary>
      <returns>此 XML 实例的架构集合的名称。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.XmlSchemaCollectionOwningSchema">
      <summary>此 XML 实例的架构集合所在的所属关系架构。</summary>
      <returns>此 XML 实例的所属关系架构。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameterCollection.Count">
      <summary>返回一个整数，包含中的元素数 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />。 只读。</summary>
      <returns>以整数形式表示的 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中的元素数。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameterCollection.IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 是否具有固定大小。</summary>
      <returns>返回 true 如果 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 具有固定大小; 否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameterCollection.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 是否为只读。</summary>
      <returns>返回 true 如果 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> ; 否则为读取 false。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameterCollection.IsSynchronized">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 是否已同步。</summary>
      <returns>返回 true 如果 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 同步; 否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameterCollection.Item(System.Int32)">
      <summary>获取位于指定索引处的 <see cref="T:System.Data.SqlClient.SqlParameter" />。</summary>
      <param name="index">要检索的参数的索引（从零开始）。</param>
      <returns>位于指定索引处的 <see cref="T:System.Data.SqlClient.SqlParameter" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定的索引不存在。</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameterCollection.Item(System.String)">
      <summary>获取具有指定名称的 <see cref="T:System.Data.SqlClient.SqlParameter" />。</summary>
      <param name="parameterName">要检索的参数的名称。</param>
      <returns>具有指定名称的 <see cref="T:System.Data.SqlClient.SqlParameter" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定 <paramref name="parameterName" /> 无效。</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameterCollection.SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 的访问的对象。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort">
      <summary>获取或设置一个值，该值指示是否应中止批量复制操作。</summary>
      <returns>true 如果应中止批量复制操作;否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlRowsCopiedEventArgs.RowsCopied">
      <summary>获取一个值，返回当前的大容量复制操作期间复制的行数。</summary>
      <returns>int 返回复制的行数。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlRowUpdatedEventArgs.Command">
      <summary>获取或设置 <see cref="T:System.Data.SqlClient.SqlCommand" /> 时执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 调用。</summary>
      <returns>
        <see cref="T:System.Data.SqlClient.SqlCommand" /> 时执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 调用。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlRowUpdatingEventArgs.Command">
      <summary>获取或设置 <see cref="T:System.Data.SqlClient.SqlCommand" /> 时要执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlClient.SqlCommand" /> 时要执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlTransaction.Connection">
      <summary>获取 <see cref="T:System.Data.SqlClient.SqlConnection" /> 与该事务关联的对象或 null 如果该事务将不再有效。</summary>
      <returns>
        <see cref="T:System.Data.SqlClient.SqlConnection" /> 与事务关联的对象。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlTransaction.IsolationLevel">
      <summary>指定 <see cref="T:System.Data.IsolationLevel" /> 此事务。</summary>
      <returns>
        <see cref="T:System.Data.IsolationLevel" /> 此事务。 默认值为 ReadCommitted。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.INullable.IsNull">
      <summary>指示结构是否为 null。 此属性是只读的。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />true 如果此对象的值为 null。 否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBinary.IsNull">
      <summary>指示是否此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构为 null。 此属性是只读的。</summary>
      <returns>true 如果 null; 否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBinary.Item(System.Int32)">
      <summary>获取从单字节 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 属性整数参数指示的位置位于 <paramref name="index" />。 如果 <paramref name="index" /> 指示超出末尾的字节数组中，位置 <see cref="T:System.Data.SqlTypes.SqlNullValueException" /> 将会引发。 此属性是只读的。</summary>
      <param name="index">要检索的字节的位置。</param>
      <returns>由整数参数指示的位置处的字节。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">该属性为只读时 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 属性包含 <see cref="F:System.Data.SqlTypes.SqlBinary.Null" />- 或 - <paramref name="index" /> 参数指示的位置超过字节数组的长度，如中所示 <see cref="P:System.Data.SqlTypes.SqlBinary.Length" /> 属性。</exception>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBinary.Length">
      <summary>获取用字节表示长度 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 属性。 此属性是只读的。</summary>
      <returns>中的二进制数据的长度 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 属性。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">
        <see cref="P:System.Data.SqlTypes.SqlBinary.Length" /> 属性为只读时 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 属性包含 <see cref="F:System.Data.SqlTypes.SqlBinary.Null" />。</exception>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBinary.Value">
      <summary>获取的值 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。 此属性是只读的。</summary>
      <returns>值 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">
        <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 属性只读的属性时包含 <see cref="F:System.Data.SqlTypes.SqlBinary.Null" />。</exception>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBoolean.ByteValue">
      <summary>获取的值 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 字节形式的结构。</summary>
      <returns>一个字节表示的值的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBoolean.IsFalse">
      <summary>指示是否当前 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 是 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。</summary>
      <returns>true 如果 Value 是 False; 否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBoolean.IsNull">
      <summary>指示是否此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构为 null。</summary>
      <returns>true 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构为空; 否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBoolean.IsTrue">
      <summary>指示是否当前 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 是 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。</summary>
      <returns>true 如果 Value 是 True; 否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBoolean.Value">
      <summary>获取 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值。 此属性是只读的。</summary>
      <returns>true 如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 是 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />; 否则为 false。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">该属性设置为 null。</exception>
    </member>
    <member name="P:System.Data.SqlTypes.SqlByte.IsNull">
      <summary>获取一个布尔值，该值指示是否此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构为 null。</summary>
      <returns>true 如果为 null。 否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlByte.Value">
      <summary>获取的值 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。 此属性是只读的</summary>
      <returns>值 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Buffer">
      <summary>返回对内部缓冲区的引用。</summary>
      <returns>返回对内部缓冲区的引用。 有关 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 在非托管指针之上创建的实例，它将返回内部缓冲区的托管的副本。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.IsNull">
      <summary>获取一个布尔值，该值指示是否此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 为 null。</summary>
      <returns>true 如果 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 为 null， false 否则为。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Item(System.Int64)">
      <summary>获取或设置 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例的指定索引位置。</summary>
      <param name="offset">一个 <see cref="T:System.Int64" /> 值。</param>
      <returns>一个 <see cref="T:System.Byte" /> 值。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Length">
      <summary>获取中包含的值的长度 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，该值表示中包含的值的长度 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例。如果没有缓冲区，对该实例可用，或者值为 null，则返回-1。返回 <see cref="P:System.IO.Stream.Length" /> 流包装的实例。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.MaxLength">
      <summary>获取此的内部缓冲区的值的最大长度 <see cref="T:System.Data.SqlTypes.SqlBytes" />。</summary>
      <returns>Long 值表示的值的内部缓冲区的最大长度。 则返回-1 流包装 <see cref="T:System.Data.SqlTypes.SqlBytes" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Null">
      <summary>返回的 null 实例 <see cref="T:System.Data.SqlTypes.SqlBytes" />。</summary>
      <returns>返回一个实例，在这种方式， <see cref="P:System.Data.SqlTypes.SqlBytes.IsNull" /> 返回 true。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Storage">
      <summary>返回有关的存储状态信息 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.StorageState" /> 枚举。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Stream">
      <summary>获取或设置此数据 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 以流的形式。</summary>
      <returns>包含 SqlBytes 数据的流。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Value">
      <summary>返回此保留的值的托管的副本 <see cref="T:System.Data.SqlTypes.SqlBytes" />。</summary>
      <returns>此值 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 作为字节数组。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Buffer">
      <summary>返回对内部缓冲区的引用。</summary>
      <returns>返回对内部缓冲区的引用。 有关 <see cref="T:System.Data.SqlTypes.SqlChars" /> 在非托管指针之上创建的实例，它将返回内部缓冲区的托管的副本。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.IsNull">
      <summary>获取一个布尔值，该值指示是否此 <see cref="T:System.Data.SqlTypes.SqlChars" /> 为 null。</summary>
      <returns>true 如果 <see cref="T:System.Data.SqlTypes.SqlChars" /> 为 null。 否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Item(System.Int64)">
      <summary>获取或设置 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例的指定索引位置。</summary>
      <param name="offset">一个 <see cref="T:System.Int64" /> 值。</param>
      <returns>一个 <see cref="T:System.Char" /> 值。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Length">
      <summary>获取中包含的值的长度 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，该值指示以字符为单位中包含的值的长度 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例。如果没有缓冲区可用的实例，或者如果值为 null，则返回-1。返回 <see cref="P:System.IO.Stream.Length" /> 流包装的实例。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.MaxLength">
      <summary>获取内部缓冲区可以容纳的值的双字节字符中的最大长度。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值表示双字节字符的值的内部缓冲区的最大长度。则返回-1 流包装 <see cref="T:System.Data.SqlTypes.SqlChars" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Null">
      <summary>返回的 null 实例 <see cref="T:System.Data.SqlTypes.SqlChars" />。</summary>
      <returns>返回一个实例，在这种方式， <see cref="P:System.Data.SqlTypes.SqlChars.IsNull" /> 返回 true。 有关更多信息，请参见处理 Null 值。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Storage">
      <summary>返回有关的存储状态信息 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.StorageState" /> 枚举。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Value">
      <summary>返回此保留的值的托管的副本 <see cref="T:System.Data.SqlTypes.SqlChars" />。</summary>
      <returns>此值 <see cref="T:System.Data.SqlTypes.SqlChars" /> 作为一个字符数组。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDateTime.DayTicks">
      <summary>获取表示此日期的计时周期数 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</summary>
      <returns>表示日期中包含的计时周期数 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 属性 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">当 Value 结构的 <see cref="N:System.Data.SqlTypes" /> 属性设置为 null 时所引发的异常。</exception>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDateTime.IsNull">
      <summary>指示是否此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构为 null。</summary>
      <returns>true 如果为 null。 否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDateTime.TimeTicks">
      <summary>获取表示此时间的计时周期数 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</summary>
      <returns>表示此时间的计时周期数 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDateTime.Value">
      <summary>获取的值 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。 此属性是只读的。</summary>
      <returns>此值 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">当 Value 结构的 <see cref="N:System.Data.SqlTypes" /> 属性设置为 null 时所引发的异常。</exception>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.BinData">
      <summary>获取此值的二进制表示 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 作为字节数组的结构。</summary>
      <returns>一个包含二进制表示形式的字节数组 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.Data">
      <summary>获取的二进制表示形式这 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 作为一个整数数组的结构。</summary>
      <returns>整数数组，其中包含的二进制表示形式这 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.IsNull">
      <summary>指示是否此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构为 null。</summary>
      <returns>true 如果此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构为 null。 否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.IsPositive">
      <summary>指示是否 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构是大于零。</summary>
      <returns>true 如果 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 赋 null 值。 否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.Precision">
      <summary>获取用于表示的数字的最大数目 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性。</summary>
      <returns>用来表示的数字的最大数 Value 此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.Scale">
      <summary>获取到的小数位数 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 得到解决。</summary>
      <returns>小数位数数 Value 属性是否已解决。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.Value">
      <summary>获取的值 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。 此属性是只读的。</summary>
      <returns>范围-79228162514264337593543950335 到 79,228,162,514,162,514,264,337,593,543,950,335 内的数字。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDouble.IsNull">
      <summary>返回一个布尔值，该值指示是否此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 实例为 null。</summary>
      <returns>true 如果 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 为 null。 否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDouble.Value">
      <summary>获取的值 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。 此属性是只读的。</summary>
      <returns>值 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlFileStream.CanRead">
      <summary>获取一个值，该值指示当前流是否支持读取。</summary>
      <returns>如果当前流支持读取，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlFileStream.CanSeek">
      <summary>获取一个值，该值指示当前流是否支持查找。</summary>
      <returns>如果当前流支持查找，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlFileStream.CanTimeout">
      <summary>获取指示当前流是否可以超时的值。</summary>
      <returns>如果当前流可以超时，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlFileStream.CanWrite">
      <summary>获取一个值，该值指示当前流是否支持写入。</summary>
      <returns>如果当前流支持写入，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlFileStream.Length">
      <summary>获取一个指示当前流的长度的值（以字节为单位）。</summary>
      <returns>一个指示当前流的长度的 <see cref="T:System.Int64" />（以字节为单位）。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlFileStream.Name">
      <summary>获取传递给构造函数的 <see cref="T:System.Data.SqlTypes.SqlFileStream" /> 的逻辑路径。</summary>
      <returns>一个指示 <see cref="T:System.Data.SqlTypes.SqlFileStream" /> 的名称的字符串值。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlFileStream.Position">
      <summary>获取或设置当前流中的位置。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlFileStream" /> 中的当前位置。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlFileStream.ReadTimeout">
      <summary>获取或设置一个值（以毫秒为单位），该值确定流在超时前将尝试读取的时间。</summary>
      <returns>一个值（以毫秒为单位），该值确定流在超时前将尝试读取的时间。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlFileStream.TransactionContext">
      <summary>获取或设置此 <see cref="T:System.Data.SqlTypes.SqlFileStream" /> 对象的事务上下文。</summary>
      <returns>传递到此 <see cref="T:System.Data.SqlTypes.SqlFileStream" /> 对象的构造函数的 <paramref name="transactionContext" /> 数组。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlFileStream.WriteTimeout">
      <summary>获取或设置一个值（以毫秒为单位），该值确定流在超时前将尝试写入多长时间。</summary>
      <returns>一个确定流在超时前将尝试写入多长时间的值（以毫秒为单位）。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlGuid.IsNull">
      <summary>获取一个布尔值，该值指示是否此 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构为 null。</summary>
      <returns>true 如果 null。 否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlGuid.Value">
      <summary>获取的值 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。 此属性是只读的。</summary>
      <returns>一个 <see cref="T:System.Guid" /> 结构。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt16.IsNull">
      <summary>指示是否此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构为 null。</summary>
      <returns>true 如果为 null。 否则为 false。 有关详细信息，请参阅处理 Null 值。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt16.Value">
      <summary>获取此实例的值 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。 此属性是只读的。</summary>
      <returns>一个短整型，表示此值 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt32.IsNull">
      <summary>指示是否此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构为 null。</summary>
      <returns>此属性是 true 如果 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 为 null。 否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt32.Value">
      <summary>获取此值 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。 此属性是只读的。</summary>
      <returns>一个整数，表示此值 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">该属性包含 <see cref="F:System.Data.SqlTypes.SqlInt32.Null" />。</exception>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt64.IsNull">
      <summary>获取一个布尔值，该值指示是否此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构为 null。</summary>
      <returns>true 如果为 null。 否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt64.Value">
      <summary>获取此值 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。 此属性是只读的。</summary>
      <returns>一个长整型，表示此值 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlMoney.IsNull">
      <summary>返回一个布尔值，该值指示是否此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构为 null。</summary>
      <returns>true 如果为 null。 否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlMoney.Value">
      <summary>获取实例的货币值 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。 此属性是只读的。</summary>
      <returns>实例的货币值 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">该属性设置为 null。</exception>
    </member>
    <member name="P:System.Data.SqlTypes.SqlSingle.IsNull">
      <summary>指示是否此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构为 null。</summary>
      <returns>true 如果为 null。 否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlSingle.Value">
      <summary>获取此值 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。 此属性是只读的。</summary>
      <returns>一个浮点值范围在-3.40 e + 38 到 3.40 e + 38。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.CompareInfo">
      <summary>获取 <see cref="T:System.Globalization.CompareInfo" /> 对象，它定义如何为此执行字符串比较 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</summary>
      <returns>一个 CompareInfo 定义此字符串比较的对象 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.CultureInfo">
      <summary>获取 <see cref="T:System.Globalization.CultureInfo" /> 结构，它表示此有关区域性的信息 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Globalization.CultureInfo" /> 介绍有关区域性的信息包括区域性、 书写系统，以及所使用的日历，名称此 SqlString 结构的结构，还提供用于常见的操作，如设置日期格式和排序字符串的方法的特定于区域性的对象的访问。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.IsNull">
      <summary>指示是否此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构为 null。</summary>
      <returns>true 如果 <see cref="P:System.Data.SqlTypes.SqlString.Value" /> 是 <see cref="F:System.Data.SqlTypes.SqlString.Null" />。 否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.LCID">
      <summary>指定的地理区域设置和语言 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</summary>
      <returns>中存储的字符串的区域设置 id <see cref="P:System.Data.SqlTypes.SqlString.Value" /> 属性。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.SqlCompareOptions">
      <summary>一个或多个组合 <see cref="T:System.Data.SqlTypes.SqlCompareOptions" /> 这些关键字表示此方法的枚举值 <see cref="T:System.Data.SqlTypes.SqlString" /> 应与其他比较 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</summary>
      <returns>值，该值指定如何将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 应与其他比较 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.Value">
      <summary>获取存储在此字符串 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。 此属性是只读的。</summary>
      <returns>用于存储的字符串。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">该字符串的值是 <see cref="F:System.Data.SqlTypes.SqlString.Null" />。</exception>
    </member>
    <member name="P:System.Data.SqlTypes.SqlXml.IsNull">
      <summary>该值指示此实例是否表示 null <see cref="T:System.Data.SqlTypes.SqlXml" /> 值。</summary>
      <returns>true 如果 Value 为 null。 否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlXml.Null">
      <summary>表示的 null 实例 <see cref="T:System.Data.SqlTypes.SqlXml" /> 类型。</summary>
      <returns>Null 实例 <see cref="T:System.Data.SqlTypes.SqlXml" /> 类型。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlXml.Value">
      <summary>获取此内容的字符串表示形式 XML <see cref="T:System.Data.SqlTypes.SqlXml" /> 实例。</summary>
      <returns>字符串表示形式的 XML 内容中。</returns>
    </member>
    <member name="P:System.Data.StateChangeEventArgs.CurrentState">
      <summary>获取连接的新状态。 连接对象将事件激发时已处于新建状态。</summary>
      <returns>
        <see cref="T:System.Data.ConnectionState" /> 值之一。</returns>
    </member>
    <member name="P:System.Data.StateChangeEventArgs.OriginalState">
      <summary>获取连接的原始状态。</summary>
      <returns>
        <see cref="T:System.Data.ConnectionState" /> 值之一。</returns>
    </member>
    <member name="P:System.Data.StatementCompletedEventArgs.RecordCount">
      <summary>指示导致的语句所影响的行数 <see cref="E:System.Data.SqlClient.SqlCommand.StatementCompleted" /> 事件发生。</summary>
      <returns>受影响的行数。</returns>
    </member>
    <member name="P:System.Data.TypedDataSetGeneratorException.ErrorList">
      <summary>获取生成的错误的动态列表。</summary>
      <returns>
        <see cref="T:System.Collections.ArrayList" /> 对象。</returns>
    </member>
    <member name="P:System.Data.UniqueConstraint.Columns">
      <summary>获取此约束影响的列的数组。</summary>
      <returns>一个 <see cref="T:System.Data.DataColumn" /> 对象数组。</returns>
    </member>
    <member name="P:System.Data.UniqueConstraint.IsPrimaryKey">
      <summary>获取一个值，该值指示在主键上为该约束。</summary>
      <returns>true, 如果约束是对主键;否则为 false。</returns>
    </member>
    <member name="P:System.Data.UniqueConstraint.Table">
      <summary>获取此约束所属的表。</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> 约束所属。</returns>
    </member>
    <member name="P:System.Xml.XmlDataDocument.DataSet">
      <summary>获取 <see cref="T:System.Data.DataSet" /> ，它提供的关系表示形式中的数据 XmlDataDocument。</summary>
      <returns>一个 DataSet 可用来访问中的数据 XmlDataDocument 使用关系模型。</returns>
    </member>
    <member name="T:Microsoft.SqlServer.Server.DataAccessKind">
      <summary>描述为用户定义的方法或函数访问用户数据的类型。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.DataAccessKind.None">
      <summary>该方法或函数不访问用户数据。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.DataAccessKind.Read">
      <summary>该方法或函数读取用户数据。</summary>
    </member>
    <member name="T:Microsoft.SqlServer.Server.Format">
      <summary>使用 <see cref="T:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute" /> 和 <see cref="T:Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute" /> 以指示用户定义类型 (UDT) 或聚合的序列化格式。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.Format.Unknown">
      <summary>序列化格式是未知的。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.Format.Native">
      <summary>Native 序列化格式使用一种非常简单的算法，使 SQL Server 用户定义的类型的有效表示存储在磁盘上。 类型标记为 Native 序列化只能具有值类型 （结构在 Microsoft Visual C#） 和 Microsoft Visual Basic.NET 中的结构作为成员。 引用的成员类型 （例如类 Visual C# 和 Visual Basic 中），该框架中存在或用户定义的其中任何一个 (如 <see cref="T:System.String" />)，不受支持。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.Format.UserDefined">
      <summary>UserDefined 开发人员完全控制通过二进制格式的序列化格式提供 <see cref="T:Microsoft.SqlServer.Server.IBinarySerialize" />.Write 和 <see cref="T:Microsoft.SqlServer.Server.IBinarySerialize" />.Read 方法。</summary>
    </member>
    <member name="T:Microsoft.SqlServer.Server.IBinarySerialize">
      <summary>提供自定义实现用户定义类型 (UDT) 和用户定义聚合的序列化和反序列化。</summary>
    </member>
    <member name="T:Microsoft.SqlServer.Server.InvalidUdtException">
      <summary>时，引发 SQL Server 或 ADO.NET <see cref="N:System.Data.SqlClient" /> 提供程序检测到无效的用户定义类型 (UDT)。</summary>
    </member>
    <member name="T:Microsoft.SqlServer.Server.SqlContext">
      <summary>表示调用方的上下文中，它提供对访问的抽象 <see cref="T:Microsoft.SqlServer.Server.SqlPipe" />, ，<see cref="T:Microsoft.SqlServer.Server.SqlTriggerContext" />, ，和 <see cref="T:System.Security.Principal.WindowsIdentity" /> 对象。 此类不能被继承。</summary>
    </member>
    <member name="T:Microsoft.SqlServer.Server.SqlDataRecord">
      <summary>表示数据和其元数据的单个行。 此类不能被继承。</summary>
    </member>
    <member name="T:Microsoft.SqlServer.Server.SqlFacetAttribute">
      <summary>批注所返回的用户定义的类型 (UDT) 的可以在 TRANSACT-SQL 中使用的其他信息的结果。</summary>
    </member>
    <member name="T:Microsoft.SqlServer.Server.SqlFunctionAttribute">
      <summary>用来标记用户定义聚合的 SQL Server 中用作函数的方法定义。 在特性上的属性反映在该类型注册到 SQL Server 时使用的物理特征。</summary>
    </member>
    <member name="T:Microsoft.SqlServer.Server.SqlMetaData">
      <summary>指定并从的参数和列中检索元数据信息 <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> 对象。 此类不能被继承。</summary>
    </member>
    <member name="T:Microsoft.SqlServer.Server.SqlMethodAttribute">
      <summary>表示一种方法的确定性和数据访问属性或用户定义类型 (UDT) 的属性。 在特性上的属性反映在该类型注册到 SQL Server 时使用的物理特征。</summary>
    </member>
    <member name="T:Microsoft.SqlServer.Server.SqlPipe">
      <summary>允许在 SQL Server 数据库来将结果返回到调用方上的托管存储的过程正在运行进程。 此类不能被继承。</summary>
    </member>
    <member name="T:Microsoft.SqlServer.Server.SqlProcedureAttribute">
      <summary>用来标记程序集作为存储过程的方法定义。 在特性上的属性反映在该类型注册到 SQL Server 时使用的物理特征。 此类不能被继承。</summary>
    </member>
    <member name="T:Microsoft.SqlServer.Server.SqlTriggerAttribute">
      <summary>用来标记程序集作为 SQL Server 中的触发器的方法定义。 在特性上的属性反映在该类型注册到 SQL Server 时使用的物理属性。 此类不能被继承。</summary>
    </member>
    <member name="T:Microsoft.SqlServer.Server.SqlTriggerContext">
      <summary>提供有关已激发该触发器的上下文信息。</summary>
    </member>
    <member name="T:Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute">
      <summary>指示应将该类型注册为用户定义聚合。 在特性上的属性反映在该类型注册到 SQL Server 时使用的物理属性。 此类不能被继承。</summary>
    </member>
    <member name="T:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute">
      <summary>用于将标记为用户定义类型 (UDT) 在 SQL Server 中的程序集中的类型定义。 在特性上的属性反映在该类型注册到 SQL Server 时使用的物理特征。 此类不能被继承。</summary>
    </member>
    <member name="T:Microsoft.SqlServer.Server.SystemDataAccessKind">
      <summary>描述对系统数据访问的用户定义的方法或函数的类型。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.SystemDataAccessKind.None">
      <summary>该方法或函数不访问系统数据。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.SystemDataAccessKind.Read">
      <summary>该方法或函数读取系统数据。</summary>
    </member>
    <member name="T:Microsoft.SqlServer.Server.TriggerAction">
      <summary>
        <see cref="T:Microsoft.SqlServer.Server.TriggerAction" /> 枚举由 <see cref="T:Microsoft.SqlServer.Server.SqlTriggerContext" /> 类，以指示激发触发器的操作。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.Invalid">
      <summary>无效的触发器操作，该操作不会公开给用户，发生。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.Insert">
      <summary>插入 TRANSACT-SQL 语句已执行。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.Update">
      <summary>在执行更新 TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.Delete">
      <summary>在执行删除 TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateTable">
      <summary>在执行 CREATE TABLE Transact SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.AlterTable">
      <summary>在执行 ALTER TABLE TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropTable">
      <summary>执行了 DROP TABLE TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateIndex">
      <summary>在执行 CREATE INDEX TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.AlterIndex">
      <summary>在执行 ALTER INDEX TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropIndex">
      <summary>执行了删除索引 TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateSynonym">
      <summary>创建同义词 TRANSACT-SQL 语句已执行。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropSynonym">
      <summary>删除同义词 TRANSACT-SQL 语句已执行。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateSecurityExpression">
      <summary>不可用。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropSecurityExpression">
      <summary>不可用。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateView">
      <summary>执行了 CREATE 视图 TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.AlterView">
      <summary>在执行 ALTER VIEW TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropView">
      <summary>执行了 DROP 查看 Transact SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateProcedure">
      <summary>在执行 CREATE 过程 TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.AlterProcedure">
      <summary>在执行 ALTER PROCEDURE TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropProcedure">
      <summary>执行了 DROP PROCEDURE TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateFunction">
      <summary>CREATE 函数 TRANSACT-SQL 语句已执行。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.AlterFunction">
      <summary>在执行 ALTER 函数 TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropFunction">
      <summary>执行了 DROP 函数 TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateTrigger">
      <summary>创建触发器的 TRANSACT-SQL 语句已执行。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.AlterTrigger">
      <summary>在执行 ALTER 触发器 TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropTrigger">
      <summary>删除触发器的 TRANSACT-SQL 语句已执行。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateEventNotification">
      <summary>创建事件通知 TRANSACT-SQL 语句已执行。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropEventNotification">
      <summary>删除事件通知 TRANSACT-SQL 语句已执行。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateType">
      <summary>在执行 CREATE 类型 TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropType">
      <summary>在执行 DROP TYPE TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateAssembly">
      <summary>在执行 CREATE ASSEMBLY TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.AlterAssembly">
      <summary>在执行 ALTER ASSEMBLY TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropAssembly">
      <summary>执行了 DROP ASSEMBLY TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateUser">
      <summary>在执行 CREATE USER Transact SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.AlterUser">
      <summary>在执行 ALTER USER TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropUser">
      <summary>执行了 DROP USER TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateRole">
      <summary>在执行 CREATE 角色 TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.AlterRole">
      <summary>在执行 ALTER 角色 TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropRole">
      <summary>执行了 DROP 角色 TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateAppRole">
      <summary>创建应用程序角色 TRANSACT-SQL 语句已执行。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.AlterAppRole">
      <summary>在执行 ALTER 应用程序角色 TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropAppRole">
      <summary>执行了删除应用程序角色 TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateSchema">
      <summary>在执行 CREATE 架构 TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.AlterSchema">
      <summary>在执行 ALTER 架构 TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropSchema">
      <summary>删除架构的 TRANSACT-SQL 语句已执行。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateLogin">
      <summary>创建登录名 TRANSACT-SQL 语句已执行。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.AlterLogin">
      <summary>在执行 ALTER LOGIN TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropLogin">
      <summary>执行了 DROP LOGIN TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateMsgType">
      <summary>创建消息类型 TRANSACT-SQL 语句已执行。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropMsgType">
      <summary>删除消息类型 TRANSACT-SQL 语句已执行。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateContract">
      <summary>在执行 CREATE 协定 TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropContract">
      <summary>执行了 DROP 协定 TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateQueue">
      <summary>创建队列 TRANSACT-SQL 语句已执行。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.AlterQueue">
      <summary>在执行 ALTER 队列 TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropQueue">
      <summary>删除队列 TRANSACT-SQL 语句已执行。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateService">
      <summary>在执行 CREATE SERVICE TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.AlterService">
      <summary>在执行 ALTER SERVICE Transact SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropService">
      <summary>执行了 DROP SERVICE Transact SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateRoute">
      <summary>执行了创建路由 TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.AlterRoute">
      <summary>在执行 ALTER ROUTE TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropRoute">
      <summary>执行了 DROP ROUTE TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.GrantStatement">
      <summary>执行了授予 TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DenyStatement">
      <summary>执行了拒绝 TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.RevokeStatement">
      <summary>执行了吊销 TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.GrantObject">
      <summary>执行了授予对象 TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DenyObject">
      <summary>DENY 对象权限 TRANSACT-SQL 语句已执行。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.RevokeObject">
      <summary>执行了吊销对象 TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreateBinding">
      <summary>在数据库或服务器实例上创建的事件通知时指定 CREATE_REMOTE_SERVICE_BINDING 事件类型。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.AlterBinding">
      <summary>在数据库或服务器实例上创建的事件通知时指定了 ALTER_REMOTE_SERVICE_BINDING 事件类型。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropBinding">
      <summary>在数据库或服务器实例上创建的事件通知时指定 DROP_REMOTE_SERVICE_BINDING 事件类型。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreatePartitionFunction">
      <summary>创建分区函数的 TRANSACT-SQL 语句已执行。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.AlterPartitionFunction">
      <summary>在执行 ALTER 分区函数 TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropPartitionFunction">
      <summary>删除分区函数的 TRANSACT-SQL 语句已执行。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.CreatePartitionScheme">
      <summary>创建分区方案 TRANSACT-SQL 语句已执行。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.AlterPartitionScheme">
      <summary>在执行 ALTER 分区方案 TRANSACT-SQL 语句。</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Server.TriggerAction.DropPartitionScheme">
      <summary>删除分区方案 TRANSACT-SQL 语句已执行。</summary>
    </member>
    <member name="T:System.Data.AcceptRejectRule">
      <summary>确定所发生的操作时 <see cref="M:System.Data.DataSet.AcceptChanges" /> 或 <see cref="M:System.Data.DataTable.RejectChanges" /> 上调用方法 <see cref="T:System.Data.DataTable" /> 与 <see cref="T:System.Data.ForeignKeyConstraint" />。</summary>
    </member>
    <member name="F:System.Data.AcceptRejectRule.None">
      <summary>不发生操作 （默认值）。</summary>
    </member>
    <member name="F:System.Data.AcceptRejectRule.Cascade">
      <summary>跨关系中级联更改。</summary>
    </member>
    <member name="T:System.Data.CommandBehavior">
      <summary>提供查询结果及其对数据库的影响的说明。</summary>
    </member>
    <member name="F:System.Data.CommandBehavior.Default">
      <summary>此查询可能返回多个结果集。 执行的查询可能会影响数据库状态。Default 不设置 <see cref="T:System.Data.CommandBehavior" /> 标志，因此调用 ExecuteReader(CommandBehavior.Default) 在功能上等效于调用 ExecuteReader()。</summary>
    </member>
    <member name="F:System.Data.CommandBehavior.SingleResult">
      <summary>查询会返回单个结果集。</summary>
    </member>
    <member name="F:System.Data.CommandBehavior.SchemaOnly">
      <summary>该查询仅返回列信息。 当使用 <see cref="F:System.Data.CommandBehavior.SchemaOnly" />, ，SQL Server.NET Framework 数据提供程序之前使用 SET FMTONLY ON 正在执行的语句。</summary>
    </member>
    <member name="F:System.Data.CommandBehavior.KeyInfo">
      <summary>查询返回列和主键信息。</summary>
    </member>
    <member name="F:System.Data.CommandBehavior.SingleRow">
      <summary>查询应返回单个行的第一个结果集。 执行的查询可能会影响数据库状态。 某些.NET Framework 数据访问接口可能，但不是需要，使用此信息来优化性能的命令。 当您指定 <see cref="F:System.Data.CommandBehavior.SingleRow" /> 与 <see cref="M:System.Data.OleDb.OleDbCommand.ExecuteReader" /> 方法 <see cref="T:System.Data.OleDb.OleDbCommand" /> 对象，用于 OLE DB 的.NET Framework 数据提供程序执行绑定使用 OLE DB IRow 接口是否可用。 否则，它使用 IRowset 接口。 如果您的 SQL 语句将返回单个行，则指定 <see cref="F:System.Data.CommandBehavior.SingleRow" /> 还可提高应用程序的性能。 可以指定 SingleRow 时执行查询，都应该返回多个结果集。  在这种情况下，其中同时多结果集的 SQL 查询，指定单个行，则返回的结果将包含仅第一个结果集的第一行。 不会返回其他结果集的查询。</summary>
    </member>
    <member name="F:System.Data.CommandBehavior.SequentialAccess">
      <summary>为提供一种 DataReader 处理包含大型二进制值的列的行。 而不是加载整行， SequentialAccess 使 DataReader 加载流形式的数据。 然后，可以使用 GetBytes 或 GetChars 方法，以指定要开始读取的操作和所返回的数据的有限的缓冲区大小的字节位置。</summary>
    </member>
    <member name="F:System.Data.CommandBehavior.CloseConnection">
      <summary>执行命令时，关联 Connection 对象已关闭时关联 DataReader 对象已关闭。</summary>
    </member>
    <member name="T:System.Data.CommandType">
      <summary>指定如何解释命令字符串。</summary>
    </member>
    <member name="F:System.Data.CommandType.Text">
      <summary>SQL 文本命令。 （默认值）。</summary>
    </member>
    <member name="F:System.Data.CommandType.StoredProcedure">
      <summary>存储过程的名称。</summary>
    </member>
    <member name="F:System.Data.CommandType.TableDirect">
      <summary>表的名称。</summary>
    </member>
    <member name="T:System.Data.Common.CatalogLocation">
      <summary>指示目录名称的文本命令中的限定的表名中的位置。</summary>
    </member>
    <member name="F:System.Data.Common.CatalogLocation.Start">
      <summary>指示在文本命令中的完全限定的表名的架构部分之前发生的位置的目录名称。</summary>
    </member>
    <member name="F:System.Data.Common.CatalogLocation.End">
      <summary>指示目录名称的位置中的文本命令中的完全限定的表名的架构部分后发生。</summary>
    </member>
    <member name="T:System.Data.Common.DataAdapter">
      <summary>表示用于填充 <see cref="T:System.Data.DataSet" /> 和更新数据源的一组 SQL 命令和一个数据库连接。</summary>
    </member>
    <member name="T:System.Data.Common.DataColumnMapping">
      <summary>包含继承的对象的一般列映射 <see cref="T:System.Data.Common.DataAdapter" />。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Data.Common.DataColumnMappingCollection">
      <summary>包含 <see cref="T:System.Data.Common.DataColumnMapping" /> 对象的集合。</summary>
    </member>
    <member name="T:System.Data.Common.DataTableMapping">
      <summary>包含源表与 <see cref="T:System.Data.DataTable" /> 之间的映射关系的说明。 此类由 <see cref="T:System.Data.Common.DataAdapter" /> 在填充 <see cref="T:System.Data.DataSet" /> 时使用。</summary>
    </member>
    <member name="T:System.Data.Common.DataTableMappingCollection">
      <summary>
        <see cref="T:System.Data.Common.DataTableMapping" /> 对象的集合。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Data.Common.DbCommand">
      <summary>表示要对数据源执行的 SQL 语句或存储过程。 提供表示命令的数据库特定类的基类。<see cref="Overload:System.Data.Common.DbCommand.ExecuteNonQueryAsync" /></summary>
    </member>
    <member name="T:System.Data.Common.DbCommandBuilder">
      <summary>自动生成用于协调所做的更改的单表命令 <see cref="T:System.Data.DataSet" /> 与关联的数据库。 这是一个抽象类，只能被继承。</summary>
    </member>
    <member name="T:System.Data.Common.DbConnection">
      <summary>表示数据库连接。</summary>
    </member>
    <member name="T:System.Data.Common.DbConnectionStringBuilder">
      <summary>提供强类型化连接字符串生成器的基类。</summary>
    </member>
    <member name="T:System.Data.Common.DbDataAdapter">
      <summary>帮助实现 <see cref="T:System.Data.IDbDataAdapter" /> 接口。<see cref="T:System.Data.Common.DbDataAdapter" /> 的继承类实现了一组功能以提供强类型，但是继承了完全实现 DataAdapter 所需的大部分功能。</summary>
    </member>
    <member name="T:System.Data.Common.DBDataPermission">
      <summary>启用.NET Framework 数据提供程序，以帮助确保用户具有足够用来访问数据的安全级别。</summary>
    </member>
    <member name="T:System.Data.Common.DBDataPermissionAttribute">
      <summary>将安全操作相关联的自定义安全特性。</summary>
    </member>
    <member name="T:System.Data.Common.DbDataReader">
      <summary>从数据源中读取行的只进流。</summary>
    </member>
    <member name="T:System.Data.Common.DbDataRecord">
      <summary>实现 <see cref="T:System.Data.IDataRecord" /> 和 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />, ，并提供对数据绑定支持 <see cref="T:System.Data.Common.DbEnumerator" />。</summary>
    </member>
    <member name="T:System.Data.Common.DbDataSourceEnumerator">
      <summary>提供枚举的本地网络中的数据库服务器的所有可用实例的机制。</summary>
    </member>
    <member name="T:System.Data.Common.DbEnumerator">
      <summary>公开 <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> 方法，该方法支持 .NET Framework 数据提供程序对集合进行简单的迭代。</summary>
    </member>
    <member name="T:System.Data.Common.DbException">
      <summary>代表数据源引发的所有异常的基类。</summary>
    </member>
    <member name="T:System.Data.Common.DbMetaDataCollectionNames">
      <summary>提供的已知的常量列表 MetaDataCollections: DataSourceInformation, ，DataTypes, ，MetaDataCollections, ，ReservedWords, ，和 限制。</summary>
    </member>
    <member name="T:System.Data.Common.DbMetaDataColumnNames">
      <summary>提供用于中的列名称的静态值 MetaDataCollection 中所含对象 <see cref="T:System.Data.DataTable" />。<see cref="T:System.Data.DataTable" /> 由创建 GetSchema 方法。</summary>
    </member>
    <member name="T:System.Data.Common.DbParameter">
      <summary>表示 <see cref="T:System.Data.Common.DbCommand" /> 的参数，还可以是它到 <see cref="T:System.Data.DataSet" /> 列的映射。 有关参数的详细信息，请参阅 配置参数和参数数据类型。</summary>
    </member>
    <member name="T:System.Data.Common.DbParameterCollection">
      <summary>与 <see cref="T:System.Data.Common.DbCommand" /> 相关的参数集合的基类。</summary>
    </member>
    <member name="T:System.Data.Common.DbProviderConfigurationHandler">
      <summary>此类可由任何提供程序，用于支持特定于提供程序的配置节。</summary>
    </member>
    <member name="T:System.Data.Common.DbProviderFactories">
      <summary>表示一组静态方法，这些方法用于创建 <see cref="T:System.Data.Common.DbProviderFactory" /> 类的一个或多个实例。</summary>
    </member>
    <member name="T:System.Data.Common.DbProviderFactoriesConfigurationHandler">
      <summary>此类型支持 .NET Framework 基础结构，不能在代码中直接使用。</summary>
    </member>
    <member name="T:System.Data.Common.DbProviderFactory">
      <summary>表示一组方法，这些方法用于创建数据源类的提供程序实现的实例。</summary>
    </member>
    <member name="T:System.Data.Common.DbProviderSpecificTypePropertyAttribute">
      <summary>标识设置特定于提供程序类型时要使用强类型化的参数类中的提供程序特定属性。</summary>
    </member>
    <member name="T:System.Data.Common.DbTransaction">
      <summary>事务的基类。</summary>
    </member>
    <member name="T:System.Data.Common.GroupByBehavior">
      <summary>在 SELECT 语句的选择列表中指定 GROUP BY 子句中的列和非聚合列之间的关系。</summary>
    </member>
    <member name="F:System.Data.Common.GroupByBehavior.Unknown">
      <summary>GROUP BY 子句的支持是未知的。</summary>
    </member>
    <member name="F:System.Data.Common.GroupByBehavior.NotSupported">
      <summary>不支持 GROUP BY 子句。</summary>
    </member>
    <member name="F:System.Data.Common.GroupByBehavior.Unrelated">
      <summary>GROUP BY 子句中的列和选择列表中的非聚合的列之间没有关系。 可以按任何列进行分组。</summary>
    </member>
    <member name="F:System.Data.Common.GroupByBehavior.MustContainAll">
      <summary>GROUP BY 子句必须包含在选择列表中，所有非聚集的列，并且可以包含不在列表中选择其他列。</summary>
    </member>
    <member name="F:System.Data.Common.GroupByBehavior.ExactMatch">
      <summary>GROUP BY 子句必须包含在选择列表中，所有非聚集的列，并且不能包含不在列表中选择其他列。</summary>
    </member>
    <member name="T:System.Data.Common.IdentifierCase">
      <summary>指定标识符时如何对待通过数据源来搜索系统目录。</summary>
    </member>
    <member name="F:System.Data.Common.IdentifierCase.Unknown">
      <summary>数据源的标识符大小写规则不明确，无法识别此信息。</summary>
    </member>
    <member name="F:System.Data.Common.IdentifierCase.Insensitive">
      <summary>搜索系统目录时，数据源将忽略标识符的大小写。 将匹配的标识符"ab"和"AB"。</summary>
    </member>
    <member name="F:System.Data.Common.IdentifierCase.Sensitive">
      <summary>搜索系统目录时，数据源会将标识符的大小写区分开来。 将不匹配的标识符"ab"和"AB"。</summary>
    </member>
    <member name="T:System.Data.Common.RowUpdatedEventArgs">
      <summary>将提供数据供 RowUpdated 的.NET Framework 数据提供程序的事件。</summary>
    </member>
    <member name="T:System.Data.Common.RowUpdatingEventArgs">
      <summary>将提供数据供 RowUpdating 的.NET Framework 数据提供程序的事件。</summary>
    </member>
    <member name="T:System.Data.Common.SchemaTableColumn">
      <summary>描述列元数据的数据库表的架构。</summary>
    </member>
    <member name="T:System.Data.Common.SchemaTableOptionalColumn">
      <summary>描述数据库表的架构的可选列元数据。</summary>
    </member>
    <member name="T:System.Data.Common.SupportedJoinOperators">
      <summary>指定哪些类型的 Transact SQL join 语句支持的数据源。</summary>
    </member>
    <member name="F:System.Data.Common.SupportedJoinOperators.None">
      <summary>数据源不支持联接查询。</summary>
    </member>
    <member name="F:System.Data.Common.SupportedJoinOperators.Inner">
      <summary>数据源支持内部联接。</summary>
    </member>
    <member name="F:System.Data.Common.SupportedJoinOperators.LeftOuter">
      <summary>数据源支持左外部联接。</summary>
    </member>
    <member name="F:System.Data.Common.SupportedJoinOperators.RightOuter">
      <summary>数据源支持右外部联接。</summary>
    </member>
    <member name="F:System.Data.Common.SupportedJoinOperators.FullOuter">
      <summary>数据源支持完全外部联接。</summary>
    </member>
    <member name="T:System.Data.ConflictOption">
      <summary>指定如何相互冲突的更改的数据检测和解决源。</summary>
    </member>
    <member name="F:System.Data.ConflictOption.CompareAllSearchableValues">
      <summary>Update 和 delete 语句的 WHERE 子句中将包括所有可搜索表中的列。 这相当于同时指定 CompareAllValuesUpdate | CompareAllValuesDelete。</summary>
    </member>
    <member name="F:System.Data.ConflictOption.CompareRowVersion">
      <summary>如果表中存在的任何时间戳列，它们用于 WHERE 子句中的所有生成的 update 语句。 这相当于同时指定 CompareRowVersionUpdate | CompareRowVersionDelete。</summary>
    </member>
    <member name="F:System.Data.ConflictOption.OverwriteChanges">
      <summary>所有 update 和 delete 语句只能包含 <see cref="P:System.Data.DataTable.PrimaryKey" /> WHERE 子句中的列。 如果没有 <see cref="P:System.Data.DataTable.PrimaryKey" /> 是定义，所有可搜索的列都包含 WHERE 子句中。 这相当于 OverwriteChangesUpdate | OverwriteChangesDelete。</summary>
    </member>
    <member name="T:System.Data.ConnectionState">
      <summary>描述与数据源连接的当前状态。</summary>
    </member>
    <member name="F:System.Data.ConnectionState.Closed">
      <summary>连接已关闭。</summary>
    </member>
    <member name="F:System.Data.ConnectionState.Open">
      <summary>连接处于打开状态。</summary>
    </member>
    <member name="F:System.Data.ConnectionState.Connecting">
      <summary>连接对象连接到数据源。</summary>
    </member>
    <member name="F:System.Data.ConnectionState.Executing">
      <summary>连接对象执行命令。 （此值保留供该产品的未来版本中）。</summary>
    </member>
    <member name="F:System.Data.ConnectionState.Fetching">
      <summary>连接对象正在检索数据。 （此值保留供该产品的未来版本中）。</summary>
    </member>
    <member name="F:System.Data.ConnectionState.Broken">
      <summary>与数据源的连接已断开。 只有在打开连接后，才发生这种。 处于此状态的连接可能关闭并重新打开。 （此值保留供该产品的未来版本中）。</summary>
    </member>
    <member name="T:System.Data.Constraint">
      <summary>表示对一个或多个可以强制实施的约束 <see cref="T:System.Data.DataColumn" /> 对象。</summary>
    </member>
    <member name="T:System.Data.ConstraintCollection">
      <summary>表示的约束集合 <see cref="T:System.Data.DataTable" />。</summary>
    </member>
    <member name="T:System.Data.ConstraintException">
      <summary>表示在尝试执行违反约束的操作时引发的异常。</summary>
    </member>
    <member name="T:System.Data.DataColumn">
      <summary>表示架构中的列 <see cref="T:System.Data.DataTable" />。</summary>
    </member>
    <member name="T:System.Data.DataColumnChangeEventArgs">
      <summary>为 <see cref="E:System.Data.DataTable.ColumnChanging" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.Data.DataColumnChangeEventHandler">
      <summary>表示用来处理 <see cref="E:System.Data.DataTable.ColumnChanging" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.DataColumnChangeEventArgs" />。</param>
    </member>
    <member name="T:System.Data.DataColumnCollection">
      <summary>表示一套 <see cref="T:System.Data.DataColumn" /> 对象 <see cref="T:System.Data.DataTable" />。</summary>
    </member>
    <member name="T:System.Data.DataException">
      <summary>表示使用 ADO.NET 组件生成的错误时引发的异常。</summary>
    </member>
    <member name="T:System.Data.DataRelation">
      <summary>表示两个区域之间的父/子关系 <see cref="T:System.Data.DataTable" /> 对象。</summary>
    </member>
    <member name="T:System.Data.DataRelationCollection">
      <summary>表示集合的 <see cref="T:System.Data.DataRelation" /> 对象的 <see cref="T:System.Data.DataSet" />。</summary>
    </member>
    <member name="T:System.Data.DataRow">
      <summary>表示行中的数据 <see cref="T:System.Data.DataTable" />。</summary>
    </member>
    <member name="T:System.Data.DataRowAction">
      <summary>描述对执行的操作 <see cref="T:System.Data.DataRow" />。</summary>
    </member>
    <member name="F:System.Data.DataRowAction.Nothing">
      <summary>未更改行。</summary>
    </member>
    <member name="F:System.Data.DataRowAction.Delete">
      <summary>从表中已删除行。</summary>
    </member>
    <member name="F:System.Data.DataRowAction.Change">
      <summary>行已更改。</summary>
    </member>
    <member name="F:System.Data.DataRowAction.Rollback">
      <summary>已回滚到的行的最新更改。</summary>
    </member>
    <member name="F:System.Data.DataRowAction.Commit">
      <summary>对行的更改已提交。</summary>
    </member>
    <member name="F:System.Data.DataRowAction.Add">
      <summary>行已添加到表。</summary>
    </member>
    <member name="F:System.Data.DataRowAction.ChangeOriginal">
      <summary>已更改行的原始版本。</summary>
    </member>
    <member name="F:System.Data.DataRowAction.ChangeCurrentAndOriginal">
      <summary>原始和行的当前版本已更改。</summary>
    </member>
    <member name="T:System.Data.DataRowBuilder">
      <summary>DataRowBuilder 类型支持.NET Framework 基础结构，不宜在代码中直接使用。</summary>
    </member>
    <member name="T:System.Data.DataRowChangeEventArgs">
      <summary>将提供数据供 <see cref="E:System.Data.DataTable.RowChanged" />, ，<see cref="E:System.Data.DataTable.RowChanging" />, ，<see cref="M:System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)" />, ，和 <see cref="M:System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)" /> 事件。</summary>
    </member>
    <member name="T:System.Data.DataRowChangeEventHandler">
      <summary>表示将处理的方法 <see cref="E:System.Data.DataTable.RowChanging" />, ，<see cref="E:System.Data.DataTable.RowChanged" />, ，<see cref="E:System.Data.DataTable.RowDeleting" />, ，和 <see cref="E:System.Data.DataTable.RowDeleted" /> 事件 <see cref="T:System.Data.DataTable" />。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.DataRowChangeEventArgs" />。</param>
    </member>
    <member name="T:System.Data.DataRowCollection">
      <summary>表示的行的集合 <see cref="T:System.Data.DataTable" />。</summary>
    </member>
    <member name="T:System.Data.DataRowState">
      <summary>获取状态 <see cref="T:System.Data.DataRow" /> 对象。</summary>
    </member>
    <member name="F:System.Data.DataRowState.Detached">
      <summary>行已创建，但不属于任何 <see cref="T:System.Data.DataRowCollection" />。 一个 <see cref="T:System.Data.DataRow" /> 处于此状态，已创建后和之前添加到一个集合，或者如果已从集合中删除它。</summary>
    </member>
    <member name="F:System.Data.DataRowState.Unchanged">
      <summary>以来未更改行 <see cref="M:System.Data.DataRow.AcceptChanges" /> 上一次调用。</summary>
    </member>
    <member name="F:System.Data.DataRowState.Added">
      <summary>行已添加到 <see cref="T:System.Data.DataRowCollection" />, ，和 <see cref="M:System.Data.DataRow.AcceptChanges" /> 尚未调用。</summary>
    </member>
    <member name="F:System.Data.DataRowState.Deleted">
      <summary>使用已删除该行 <see cref="M:System.Data.DataRow.Delete" /> 方法 <see cref="T:System.Data.DataRow" />。</summary>
    </member>
    <member name="F:System.Data.DataRowState.Modified">
      <summary>被修改的行和 <see cref="M:System.Data.DataRow.AcceptChanges" /> 尚未调用。</summary>
    </member>
    <member name="T:System.Data.DataRowVersion">
      <summary>本文介绍的版本 <see cref="T:System.Data.DataRow" />。</summary>
    </member>
    <member name="F:System.Data.DataRowVersion.Original">
      <summary>该行中包含其原始值。</summary>
    </member>
    <member name="F:System.Data.DataRowVersion.Current">
      <summary>该行中包含当前值。</summary>
    </member>
    <member name="F:System.Data.DataRowVersion.Proposed">
      <summary>该行中包含建议的值。</summary>
    </member>
    <member name="F:System.Data.DataRowVersion.Default">
      <summary>默认版本 <see cref="T:System.Data.DataRowState" />。 有关 DataRowState 值 Added, ，Modified 或 Deleted, ，默认的版本是 Current。 有关 <see cref="T:System.Data.DataRowState" /> 值 Detached, ，该版本是 Proposed。</summary>
    </member>
    <member name="T:System.Data.DataRowView">
      <summary>表示 <see cref="T:System.Data.DataRow" /> 的自定义视图。</summary>
    </member>
    <member name="T:System.Data.DataSet">
      <summary>表示数据在内存中的缓存。</summary>
    </member>
    <member name="T:System.Data.DataSetDateTime">
      <summary>介绍用于序列化格式 <see cref="T:System.DateTime" /> 中的列 <see cref="T:System.Data.DataSet" />。</summary>
    </member>
    <member name="F:System.Data.DataSetDateTime.Local">
      <summary>DateTime 始终在本地存储。 如果 <see cref="F:System.Data.DataSetDateTime.Utc" /> 或 <see cref="F:System.Data.DataSetDateTime.Unspecified" /> 分配给此模式中的列，则首先要将其转换为本地。 在此模式下的序列化始终在本地执行。 在序列化期间没有偏移量。</summary>
    </member>
    <member name="F:System.Data.DataSetDateTime.Unspecified">
      <summary>DateTime 始终会存储在未指定。 如果 <see cref="F:System.Data.DataSetDateTime.Local" /> 或 <see cref="F:System.Data.DataSetDateTime.Utc" /> 分配给此模式中的列，则首先要将其转换为 <see cref="F:System.Data.DataSetDateTime.Unspecified" />。 在此模式下的序列化不会导致某一偏移量。</summary>
    </member>
    <member name="F:System.Data.DataSetDateTime.UnspecifiedLocal">
      <summary>DateTime 存储在未指定。 如果 <see cref="F:System.Data.DataSetDateTime.Local" /> 或 <see cref="F:System.Data.DataSetDateTime.Utc" /> 分配给此模式中的列，则首先要将其转换为 <see cref="F:System.Data.DataSetDateTime.Unspecified" />。 在此模式下的序列化会导致偏移量。 这是默认行为，可以向后兼容。 此选项应被认为是在存储中未指定，但应用的偏移量，类似于 <see cref="F:System.Data.DataSetDateTime.Local" /> 在序列化过程。</summary>
    </member>
    <member name="F:System.Data.DataSetDateTime.Utc">
      <summary>DateTime 以协调世界时 (UTC) 存储。 如果 <see cref="F:System.Data.DataSetDateTime.Local" /> 或 <see cref="F:System.Data.DataSetDateTime.Unspecified" /> 分配给此模式中的列，则首先要将其转换为 Utc 格式。 始终在中执行这种模式中的序列化 Utc。 在序列化期间没有偏移量。</summary>
    </member>
    <member name="T:System.Data.DataSetSchemaImporterExtension">
      <summary>此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
    </member>
    <member name="T:System.Data.DataSysDescriptionAttribute">
      <summary>将标记属性、 事件或扩展程序的说明。 在引用该成员时，可视化设计器可以显示此说明。</summary>
    </member>
    <member name="T:System.Data.DataTable">
      <summary>表示内存中数据的一个表。</summary>
    </member>
    <member name="T:System.Data.DataTableClearEventArgs">
      <summary>将提供数据供 <see cref="M:System.Data.DataTable.Clear" /> 方法。</summary>
    </member>
    <member name="T:System.Data.DataTableClearEventHandler">
      <summary>表示用于处理的方法 <see cref="M:System.Data.DataTable.Clear" /> 方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.DataTableClearEventArgs" />。</param>
    </member>
    <member name="T:System.Data.DataTableCollection">
      <summary>表示表的集合 <see cref="T:System.Data.DataSet" />。</summary>
    </member>
    <member name="T:System.Data.DataTableNewRowEventArgs">
      <summary>将提供数据供 <see cref="M:System.Data.DataTable.NewRow" /> 方法。</summary>
    </member>
    <member name="T:System.Data.DataTableNewRowEventHandler">
      <summary>表示用于处理的方法 <see cref="M:System.Data.DataTable.NewRow" /> 方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.DataTableNewRowEventArgs" />。</param>
    </member>
    <member name="T:System.Data.DataTableReader">
      <summary>
        <see cref="T:System.Data.DataTableReader" /> 以一个或多个只读、只进结果集的形式获取一个或多个 <see cref="T:System.Data.DataTable" /> 对象的内容。</summary>
    </member>
    <member name="T:System.Data.DataView">
      <summary>代表 <see cref="T:System.Data.DataTable" /> 的可绑定数据的自定义视图，它用于排序、筛选、搜索、编辑和导航。<see cref="T:System.Data.DataView" /> 不存储数据，而改为表示对应的 <see cref="T:System.Data.DataTable" /> 的连接视图。 更改 <see cref="T:System.Data.DataView" /> 的数据将影响 <see cref="T:System.Data.DataTable" />。 更改 <see cref="T:System.Data.DataTable" /> 的数据将影响与之关联的所有 <see cref="T:System.Data.DataView" />。</summary>
    </member>
    <member name="T:System.Data.DataViewManager">
      <summary>在 <see cref="T:System.Data.DataSet" /> 中包含每个 <see cref="T:System.Data.DataTable" /> 的默认 <see cref="T:System.Data.DataViewSettingCollection" />。</summary>
    </member>
    <member name="T:System.Data.DataViewRowState">
      <summary>描述中的数据的版本 <see cref="T:System.Data.DataRow" />。</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.None">
      <summary>无。</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.Unchanged">
      <summary>未更改的行。</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.Added">
      <summary>新行。</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.Deleted">
      <summary>已删除的行。</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.ModifiedCurrent">
      <summary>已修改的原始数据的当前版本 (请参阅 ModifiedOriginal)。</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.ModifiedOriginal">
      <summary>已修改数据的原始版本。 (尽管数据已被修改，则可以用作 ModifiedCurrent)。</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.OriginalRows">
      <summary>原始行包括不变，且已删除的行。</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.CurrentRows">
      <summary>当前行包括保持不变，新的、 行和已修改的行。 默认情况下， <see cref="T:System.Data.DataViewRowState" /> 设置为当前行。</summary>
    </member>
    <member name="T:System.Data.DataViewSetting">
      <summary>表示的默认设置 <see cref="P:System.Data.DataView.ApplyDefaultSort" />, ，<see cref="P:System.Data.DataView.DataViewManager" />, ，<see cref="P:System.Data.DataView.RowFilter" />, ，<see cref="P:System.Data.DataView.RowStateFilter" />, ，<see cref="P:System.Data.DataView.Sort" />, ，和 <see cref="P:System.Data.DataView.Table" /> Dataview 创建从 <see cref="T:System.Data.DataViewManager" />。</summary>
    </member>
    <member name="T:System.Data.DataViewSettingCollection">
      <summary>包含一个只读集合 <see cref="T:System.Data.DataViewSetting" /> 为每个对象 <see cref="T:System.Data.DataTable" /> 中 <see cref="T:System.Data.DataSet" />。</summary>
    </member>
    <member name="T:System.Data.DBConcurrencyException">
      <summary>通过引发的异常 <see cref="T:System.Data.Common.DataAdapter" /> 期间插入、 更新或删除操作，如果受影响的行数等于零。</summary>
    </member>
    <member name="T:System.Data.DbType">
      <summary>指定的字段、 属性的数据类型或 Parameter .NET Framework 数据提供程序的对象。</summary>
    </member>
    <member name="F:System.Data.DbType.AnsiString">
      <summary>范围在 1 到 8000 个字符之间的非 Unicode 字符长度可变的流。</summary>
    </member>
    <member name="F:System.Data.DbType.Binary">
      <summary>范围在 1 到 8000 个字节之间的二进制数据长度可变的流。</summary>
    </member>
    <member name="F:System.Data.DbType.Byte">
      <summary>取值范围为从 0 到 255 之间的值的 8 位无符号的整数。</summary>
    </member>
    <member name="F:System.Data.DbType.Boolean">
      <summary>简单类型，表示布尔值的 true 或 false。</summary>
    </member>
    <member name="F:System.Data.DbType.Currency">
      <summary>货币值，范围从-2 63 （或-922337203685，477.5808） 到 2 63 -1 （或 + 922337203685，477.5807），精确到货币单位的万分之一。</summary>
    </member>
    <member name="F:System.Data.DbType.Date">
      <summary>表示日期值的类型。</summary>
    </member>
    <member name="F:System.Data.DbType.DateTime">
      <summary>表示日期和时间值的类型。</summary>
    </member>
    <member name="F:System.Data.DbType.Decimal">
      <summary>简单类型，表示值范围从 1.0 x 10 -28 大约 7.9 x 10 28 具有 28-29 个有效数字。</summary>
    </member>
    <member name="F:System.Data.DbType.Double">
      <summary>浮点类型，表示从大约 5.0 x 10 范围内的值 -324 1.7 x 10 308 15 到 16 位的精度。</summary>
    </member>
    <member name="F:System.Data.DbType.Guid">
      <summary>全局唯一标识符 （或 GUID） 中。</summary>
    </member>
    <member name="F:System.Data.DbType.Int16">
      <summary>整型，表示有符号 16 位整数的值介于-32768 到 32767 之间。</summary>
    </member>
    <member name="F:System.Data.DbType.Int32">
      <summary>整型，表示有符号 32 位整数的值介于-2147483648 和 2147483647 之间。</summary>
    </member>
    <member name="F:System.Data.DbType.Int64">
      <summary>整型，表示有符号 64 位整数的值介于-9223372036854775808 到 9223372036854775807 之间。</summary>
    </member>
    <member name="F:System.Data.DbType.Object">
      <summary>常规类型，表示由另一个未明确表示任何引用或值类型 DbType 值。</summary>
    </member>
    <member name="F:System.Data.DbType.SByte">
      <summary>整型，表示有符号值介于-128 和 127 之间的 8 位整数。</summary>
    </member>
    <member name="F:System.Data.DbType.Single">
      <summary>浮点类型，表示从大约 1.5 x 10 范围内的值 -45 3.4 x 10 38 且精度为 7 位数字。</summary>
    </member>
    <member name="F:System.Data.DbType.String">
      <summary>表示 Unicode 字符串的类型。</summary>
    </member>
    <member name="F:System.Data.DbType.Time">
      <summary>表示 SQL Server 的类型 DateTime 值。 如果你想要使用 SQL Server time 值，请使用 <see cref="F:System.Data.SqlDbType.Time" />。</summary>
    </member>
    <member name="F:System.Data.DbType.UInt16">
      <summary>整数类型表示无符号的 16 位整数，其值介于 0 和 65535 之间。</summary>
    </member>
    <member name="F:System.Data.DbType.UInt32">
      <summary>整数类型表示其值介于 0 和 4294967295 之间的无符号的 32 位整数。</summary>
    </member>
    <member name="F:System.Data.DbType.UInt64">
      <summary>整数类型表示无符号的 64 位整数的值介于 0 到 18446744073709551615 之间。</summary>
    </member>
    <member name="F:System.Data.DbType.VarNumeric">
      <summary>可变长度的数字值。</summary>
    </member>
    <member name="F:System.Data.DbType.AnsiStringFixedLength">
      <summary>非 Unicode 字符固定长度流。</summary>
    </member>
    <member name="F:System.Data.DbType.StringFixedLength">
      <summary>一个固定长度的字符串的 Unicode 字符。</summary>
    </member>
    <member name="F:System.Data.DbType.Xml">
      <summary>已分析的 XML 文档或片断的表示形式。</summary>
    </member>
    <member name="F:System.Data.DbType.DateTime2">
      <summary>日期和时间数据。 日期值范围是从 1 月 1，1 AD 到公元 9999 年 12 月 31 日。 时间值范围是 00:00:00 到 23:59:59.9999999 100 纳秒精度。</summary>
    </member>
    <member name="F:System.Data.DbType.DateTimeOffset">
      <summary>时区的日期和时间数据。 日期值范围是从 1 月 1，1 AD 到公元 9999 年 12 月 31 日。 时间值范围是 00:00:00 到 23:59:59.9999999 100 纳秒精度。 时区值范围是-14:00 至 + 14:00。</summary>
    </member>
    <member name="T:System.Data.DeletedRowInaccessibleException">
      <summary>表示尝试操作时引发的异常 <see cref="T:System.Data.DataRow" /> 已被删除。</summary>
    </member>
    <member name="T:System.Data.DuplicateNameException">
      <summary>表示添加操作中的过程中遇到重复的数据库对象名称时引发的异常 <see cref="T:System.Data.DataSet" /> 的相关的对象。</summary>
    </member>
    <member name="T:System.Data.EvaluateException">
      <summary>表示时，将引发的异常 <see cref="P:System.Data.DataColumn.Expression" /> 属性 <see cref="T:System.Data.DataColumn" /> 无法计算的值。</summary>
    </member>
    <member name="T:System.Data.FillErrorEventArgs">
      <summary>将提供数据供 <see cref="E:System.Data.Common.DataAdapter.FillError" /> 事件 <see cref="T:System.Data.Common.DbDataAdapter" />。</summary>
    </member>
    <member name="T:System.Data.FillErrorEventHandler">
      <summary>表示用来处理 <see cref="E:System.Data.Common.DataAdapter.FillError" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.FillErrorEventArgs" />。</param>
    </member>
    <member name="T:System.Data.ForeignKeyConstraint">
      <summary>表示某个值或行已删除或更新时在一组主键/外键关系的列上强制执行的操作限制。</summary>
    </member>
    <member name="T:System.Data.IColumnMapping">
      <summary>将相关联的数据源列 <see cref="T:System.Data.DataSet" /> 列中，并由实现 <see cref="T:System.Data.Common.DataColumnMapping" /> 类，该类由.NET Framework 数据提供程序共同使用。</summary>
    </member>
    <member name="T:System.Data.IColumnMappingCollection">
      <summary>包含 DataColumnMapping 对象的集合，由实现 <see cref="T:System.Data.Common.DataColumnMappingCollection" />, ，将使用该通用.NET Framework 数据提供程序。</summary>
    </member>
    <member name="T:System.Data.IDataAdapter">
      <summary>允许对象实现 DataAdapter，并表示一组方法和映射与操作相关的属性，用于填充和更新 <see cref="T:System.Data.DataSet" /> 和更新数据源。<see cref="T:System.Data.IDbDataAdapter" /> 实例是在 （或类似于） 使用文本命令的关系数据库的数据源 (如 Transact-SQL)，而 <see cref="T:System.Data.IDataAdapter" /> 实例可以使用任何类型的数据源。</summary>
    </member>
    <member name="T:System.Data.IDataParameter">
      <summary>命令对象，以及 （可选） 到其映射到表示参数 <see cref="T:System.Data.DataSet" /> 列; 并由.NET Framework 数据提供程序访问数据源实现。</summary>
    </member>
    <member name="T:System.Data.IDataParameterCollection">
      <summary>收集与创建命令对象并将其映射到相关的所有参数 <see cref="T:System.Data.DataSet" /> 列，并由.NET Framework 数据提供程序访问数据源实现。</summary>
    </member>
    <member name="T:System.Data.IDataReader">
      <summary>提供了一种读取的数据源，在执行命令通过获取的结果集的一个或多个只进流，并由访问关系数据库的.NET Framework 数据提供程序实现。</summary>
    </member>
    <member name="T:System.Data.IDataRecord">
      <summary>提供对每行中的列值的访问 DataReader, ，并由访问关系数据库的.NET Framework 数据提供程序实现。</summary>
    </member>
    <member name="T:System.Data.IDbCommand">
      <summary>表示在连接到数据源时执行，并且由访问关系数据库的.NET Framework 数据提供程序实现的 SQL 语句。</summary>
    </member>
    <member name="T:System.Data.IDbConnection">
      <summary>表示的开放连接到数据源，并由访问关系数据库的.NET Framework 数据提供程序实现。</summary>
    </member>
    <member name="T:System.Data.IDbDataAdapter">
      <summary>表示一组与命令相关的属性，用于填充 <see cref="T:System.Data.DataSet" /> 和更新数据源，并由访问关系数据库的.NET Framework 数据提供程序实现。</summary>
    </member>
    <member name="T:System.Data.IDbDataParameter">
      <summary>Visual Basic.NET 数据设计器用于命令对象，以及 （可选） 到其映射到表示参数 <see cref="T:System.Data.DataSet" /> 列。</summary>
    </member>
    <member name="T:System.Data.IDbTransaction">
      <summary>表示要在数据源上执行的事务，并由访问关系数据库的.NET Framework 数据提供程序实现。</summary>
    </member>
    <member name="T:System.Data.InRowChangingEventException">
      <summary>表示在调用时引发的异常 <see cref="M:System.Data.DataRow.EndEdit" /> 方法是在 <see cref="E:System.Data.DataTable.RowChanging" /> 事件。</summary>
    </member>
    <member name="T:System.Data.InternalDataCollectionBase">
      <summary>提供用于创建集合的基本功能。</summary>
    </member>
    <member name="T:System.Data.InvalidConstraintException">
      <summary>表示当错误地尝试创建或访问某个关系时引发的异常。</summary>
    </member>
    <member name="T:System.Data.InvalidExpressionException">
      <summary>表示当你尝试添加时引发的异常 <see cref="T:System.Data.DataColumn" /> ，其中包含一个无效的 <see cref="P:System.Data.DataColumn.Expression" /> 到 <see cref="T:System.Data.DataColumnCollection" />。</summary>
    </member>
    <member name="T:System.Data.IsolationLevel">
      <summary>指定连接的事务锁定行为。</summary>
    </member>
    <member name="F:System.Data.IsolationLevel.Unspecified">
      <summary>正在使用比指定不同的隔离级别，但不能确定其级别。</summary>
    </member>
    <member name="F:System.Data.IsolationLevel.Chaos">
      <summary>无法覆盖从更高隔离级别的事务挂起的更改。</summary>
    </member>
    <member name="F:System.Data.IsolationLevel.ReadUncommitted">
      <summary>脏读，则意味着发布任何共享的锁，然后利用任何排他锁将生效。</summary>
    </member>
    <member name="F:System.Data.IsolationLevel.ReadCommitted">
      <summary>正在读取数据以避免脏读，但在该事务，从而导致不可重复读取或幻像数据末尾之前可以更改数据时，将保持共享的锁。</summary>
    </member>
    <member name="F:System.Data.IsolationLevel.RepeatableRead">
      <summary>在查询中，阻止其他用户更新的数据使用的所有数据上放置锁。 防止非可重复读取，但幻像行仍有可能。</summary>
    </member>
    <member name="F:System.Data.IsolationLevel.Serializable">
      <summary>范围锁放置在 <see cref="T:System.Data.DataSet" />, ，阻止其他用户更新或将行插入到数据集，直到事务完成。</summary>
    </member>
    <member name="F:System.Data.IsolationLevel.Snapshot">
      <summary>减少阻止通过存储数据的一个应用程序可以读取另一个修改相同的数据的同时版本。 指示，从一个事务无法查看其他事务中所做的更改即便重新查询。</summary>
    </member>
    <member name="T:System.Data.ITableMapping">
      <summary>将源表中的表与相关联 <see cref="T:System.Data.DataSet" />, ，并由实现 <see cref="T:System.Data.Common.DataTableMapping" /> 类，该类由.NET Framework 数据提供程序共同使用。</summary>
    </member>
    <member name="T:System.Data.ITableMappingCollection">
      <summary>包含 TableMapping 对象的集合，由实现 <see cref="T:System.Data.Common.DataTableMappingCollection" />, ，将使用该通用.NET Framework 数据提供程序。</summary>
    </member>
    <member name="T:System.Data.KeyRestrictionBehavior">
      <summary>标识连接字符串参数标识的一组 KeyRestrictions 允许或不允许使用的属性。</summary>
    </member>
    <member name="F:System.Data.KeyRestrictionBehavior.AllowOnly">
      <summary>默认。 标识允许的唯一附加连接字符串参数。</summary>
    </member>
    <member name="F:System.Data.KeyRestrictionBehavior.PreventUsage">
      <summary>标识不允许使用的其他连接字符串参数。</summary>
    </member>
    <member name="T:System.Data.LoadOption">
      <summary>控制如何从数据源的值将应用于现有行时使用 <see cref="Overload:System.Data.DataTable.Load" /> 或 <see cref="Overload:System.Data.DataSet.Load" /> 方法。</summary>
    </member>
    <member name="F:System.Data.LoadOption.OverwriteChanges">
      <summary>此行的传入值将为每个列数据的版本写入到当前值和原始值。</summary>
    </member>
    <member name="F:System.Data.LoadOption.PreserveChanges">
      <summary>此行的传入值将写入每一列的原始值版本。 每个列中的数据的当前版本将不会更改。  这是默认设置。</summary>
    </member>
    <member name="F:System.Data.LoadOption.Upsert">
      <summary>此行的传入值将写入每一列的当前版本。 每个列的数据的原始版本将不会更改。</summary>
    </member>
    <member name="T:System.Data.MappingType">
      <summary>指定如何 <see cref="T:System.Data.DataColumn" /> 映射。</summary>
    </member>
    <member name="F:System.Data.MappingType.Element">
      <summary>将列映射到 XML 元素。</summary>
    </member>
    <member name="F:System.Data.MappingType.Attribute">
      <summary>列映射到一个 XML 属性。</summary>
    </member>
    <member name="F:System.Data.MappingType.SimpleContent">
      <summary>列映射到 <see cref="T:System.Xml.XmlText" /> 节点。</summary>
    </member>
    <member name="F:System.Data.MappingType.Hidden">
      <summary>列映射到的内部结构。</summary>
    </member>
    <member name="T:System.Data.MergeFailedEventArgs">
      <summary>当目标和源时发生 DataRow 具有相同的主键值，和 <see cref="P:System.Data.DataSet.EnforceConstraints" /> 属性设置为 true。</summary>
    </member>
    <member name="T:System.Data.MergeFailedEventHandler">
      <summary>表示用来处理 <see cref="E:System.Data.DataSet.MergeFailed" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">事件的数据。</param>
    </member>
    <member name="T:System.Data.MissingMappingAction">
      <summary>确定当映射处于源表或源列中缺少时发生的操作。</summary>
    </member>
    <member name="F:System.Data.MissingMappingAction.Passthrough">
      <summary>创建并添加到源表的源列 <see cref="T:System.Data.DataSet" /> 使用其原始名称。</summary>
    </member>
    <member name="F:System.Data.MissingMappingAction.Ignore">
      <summary>将忽略的列或表不具有映射。 返回 null。</summary>
    </member>
    <member name="F:System.Data.MissingMappingAction.Error">
      <summary>
        <see cref="T:System.InvalidOperationException" /> 缺少指定的列映射时生成。</summary>
    </member>
    <member name="T:System.Data.MissingPrimaryKeyException">
      <summary>表示当您尝试访问没有主键的表中的行时引发的异常。</summary>
    </member>
    <member name="T:System.Data.MissingSchemaAction">
      <summary>指定的操作时将数据添加到要执行 <see cref="T:System.Data.DataSet" /> 以及所需 <see cref="T:System.Data.DataTable" /> 或 <see cref="T:System.Data.DataColumn" /> 缺少。</summary>
    </member>
    <member name="F:System.Data.MissingSchemaAction.Add">
      <summary>添加必需的列以完成架构。</summary>
    </member>
    <member name="F:System.Data.MissingSchemaAction.Ignore">
      <summary>将忽略额外的列。</summary>
    </member>
    <member name="F:System.Data.MissingSchemaAction.Error">
      <summary>
        <see cref="T:System.InvalidOperationException" /> 缺少指定的列映射时生成。</summary>
    </member>
    <member name="F:System.Data.MissingSchemaAction.AddWithKey">
      <summary>添加必要的列和主键信息以完成架构。 有关如何主键信息的详细信息添加到 <see cref="T:System.Data.DataTable" />, ，请参阅 <see cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />。才能正常运行.NET Framework 数据提供程序与用于 OLE DB AddWithKey 需要本机 OLE DB 访问接口通过设置 DBPROP_UNIQUEROWS 属性来获取必要的主键信息，然后确定哪些列是通过检查在 IColumnsRowset DBCOLUMN_KEYCOLUMN 主键列。 作为替代方法，用户可以显式设置每个主键约束 <see cref="T:System.Data.DataTable" />。 这可确保与现有记录匹配的传入记录进行更新，而不是追加。 当使用 AddWithKey, ，SQL Server.NET Framework 数据提供程序将 FOR BROWSE 子句附加到正在执行的语句。 用户应注意的潜在负面影响，例如使用 SET FMTONLY ON 语句的干扰。 有关详细信息，请参阅 SQL Server 联机丛书。</summary>
    </member>
    <member name="T:System.Data.NoNullAllowedException">
      <summary>表示在尝试将 NULL 值插入 <see cref="P:System.Data.DataColumn.AllowDBNull" /> 设置为 false 的列中时引发的异常。</summary>
    </member>
    <member name="T:System.Data.Odbc.OdbcCommand">
      <summary>表示要对数据源执行的 SQL 语句或存储过程。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Data.Odbc.OdbcCommandBuilder">
      <summary>自动生成用于协调所做的更改的单表命令 <see cref="T:System.Data.DataSet" /> 对关联的数据源。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Data.Odbc.OdbcConnection">
      <summary>表示与数据源的开放连接。</summary>
    </member>
    <member name="T:System.Data.Odbc.OdbcConnectionStringBuilder">
      <summary>为创建和管理由 <see cref="T:System.Data.Odbc.OdbcConnection" /> 类使用的连接字符串的内容提供了一种简单方法。</summary>
    </member>
    <member name="T:System.Data.Odbc.OdbcDataAdapter">
      <summary>表示用于填充 <see cref="T:System.Data.DataSet" /> 和更新数据源的一组数据命令和一个数据源连接。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Data.Odbc.OdbcDataReader">
      <summary>提供了一种从数据源中读取数据行的只进流。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Data.Odbc.OdbcError">
      <summary>收集与警告或错误的数据源返回的相关信息。</summary>
    </member>
    <member name="T:System.Data.Odbc.OdbcErrorCollection">
      <summary>收集 <see cref="T:System.Data.Odbc.OdbcDataAdapter" /> 生成的所有错误。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Data.Odbc.OdbcException">
      <summary>ODBC 数据源返回警告或错误时，将生成的异常。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Data.Odbc.OdbcFactory">
      <summary>表示一组方法用于创建 ODBC 访问接口的实现的数据源类的实例。</summary>
    </member>
    <member name="T:System.Data.Odbc.OdbcInfoMessageEventArgs">
      <summary>为 <see cref="E:System.Data.Odbc.OdbcConnection.InfoMessage" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.Data.Odbc.OdbcInfoMessageEventHandler">
      <summary>表示将处理的方法 <see cref="E:System.Data.Odbc.OdbcConnection.InfoMessage" /> 事件 <see cref="T:System.Data.Odbc.OdbcConnection" />。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.Odbc.OdbcInfoMessageEventArgs" /> 对象。</param>
    </member>
    <member name="T:System.Data.Odbc.OdbcMetaDataCollectionNames">
      <summary>提供与一起使用的常量列表 GetSchema 方法来检索元数据集合。</summary>
    </member>
    <member name="T:System.Data.Odbc.OdbcMetaDataColumnNames">
      <summary>提供用于中的列名称的静态值 <see cref="T:System.Data.Odbc.OdbcMetaDataCollectionNames" /> 中所含对象 <see cref="T:System.Data.DataTable" />。<see cref="T:System.Data.DataTable" /> 由创建 GetSchema 方法。</summary>
    </member>
    <member name="T:System.Data.Odbc.OdbcParameter">
      <summary>表示 <see cref="T:System.Data.Odbc.OdbcCommand" /> 的参数，还可以表示它到 <see cref="T:System.Data.DataColumn" /> 的映射。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Data.Odbc.OdbcParameterCollection">
      <summary>表示与 <see cref="T:System.Data.Odbc.OdbcCommand" /> 相关的参数的集合以及各个参数到 <see cref="T:System.Data.DataSet" /> 中列的映射。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Data.Odbc.OdbcPermission">
      <summary>启用.NET Framework 数据提供程序用于 ODBC 来帮助确保用户具有足够的权限访问 ODBC 数据源的安全级别。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Data.Odbc.OdbcPermissionAttribute">
      <summary>将安全操作相关联的自定义安全特性。</summary>
    </member>
    <member name="T:System.Data.Odbc.OdbcRowUpdatedEventArgs">
      <summary>为 <see cref="E:System.Data.Odbc.OdbcDataAdapter.RowUpdated" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.Data.Odbc.OdbcRowUpdatedEventHandler">
      <summary>表示将处理的方法 <see cref="E:System.Data.Odbc.OdbcDataAdapter.RowUpdated" /> 事件 <see cref="T:System.Data.Odbc.OdbcDataAdapter" />。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.Odbc.OdbcRowUpdatedEventArgs" />。</param>
    </member>
    <member name="T:System.Data.Odbc.OdbcRowUpdatingEventArgs">
      <summary>为 <see cref="E:System.Data.Odbc.OdbcDataAdapter.RowUpdating" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.Data.Odbc.OdbcRowUpdatingEventHandler">
      <summary>表示将处理的方法 <see cref="E:System.Data.Odbc.OdbcDataAdapter.RowUpdating" /> 事件 <see cref="T:System.Data.Odbc.OdbcDataAdapter" />。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.Odbc.OdbcRowUpdatingEventArgs" />。</param>
    </member>
    <member name="T:System.Data.Odbc.OdbcTransaction">
      <summary>表示要在数据源进行的 SQL 事务。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Data.Odbc.OdbcType">
      <summary>指定的字段、 属性，以便在中使用的数据类型 <see cref="T:System.Data.Odbc.OdbcParameter" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.BigInt">
      <summary>确切数值，其精度为 19 （如果已签名） 或 20 （如果无符号），小数位数为 0 (签名:-2 [63] &lt; = n &lt; = 2 [63] – 1，未签名 ︰ 0 &lt; = n &lt; = 2 [64] – 1) (SQL_BIGINT)。 此方法映射到 <see cref="T:System.Int64" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.Binary">
      <summary>二进制数据 (SQL_BINARY) 的流。 此方法映射到 <see cref="T:System.Array" /> 类型的 <see cref="T:System.Byte" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.Bit">
      <summary>单个位的二进制数据 (SQL_BIT)。 此方法映射到 <see cref="T:System.Boolean" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.Char">
      <summary>固定长度的字符字符串 (SQL_CHAR)。 此方法映射到 <see cref="T:System.String" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.DateTime">
      <summary>日期格式 yyyymmddhhmmss (SQL_TYPE_TIMESTAMP) 中的数据。 此方法映射到 <see cref="T:System.DateTime" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.Decimal">
      <summary>有符号，精确数值精度为至少为 p 和小数位数 s，其中 1 &lt; = p &lt; = 15 和 s &lt; = p。 星期四e 最大精度是特定于驱动程序 (SQL_DECIMAL)。 此方法映射到 <see cref="T:System.Decimal" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.Numeric">
      <summary>有符号，精确数值精度 p 和小数位数 s，其中 1 &lt; = p &lt; = 15 和 s &lt; = p (SQL_NUMERIC)。 此方法映射到 <see cref="T:System.Decimal" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.Double">
      <summary>已签名，其二进制精度为 53 的近似的数字值 （零个或绝对值 10 [–308] 到 10[308]) (SQL_DOUBLE)。 此方法映射到 <see cref="T:System.Double" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.Image">
      <summary>可变长度二进制数据。 最大长度为数据源而定 (SQL_LONGVARBINARY)。 此方法映射到 <see cref="T:System.Array" /> 类型的 <see cref="T:System.Byte" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.Int">
      <summary>确切数值，其精度为 10，小数位数为 0 (签名:-2 [31] &lt; = n &lt; = 2 [31] – 1，未签名 ︰ 0 &lt; = n &lt; = 2 [32] – 1) (SQL_INTEGER)。 此方法映射到 <see cref="T:System.Int32" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.NChar">
      <summary>Unicode 字符的固定的字符串的长度 (SQL_WCHAR) 的字符串。 此方法映射到 <see cref="T:System.String" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.NText">
      <summary>长度可变的字符的 Unicode 数据。 最大长度为数据源而定。 (SQL_WLONGVARCHAR)。 此方法映射到 <see cref="T:System.String" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.NVarChar">
      <summary>Unicode 字符 (SQL_WVARCHAR) 长度可变的流。 此方法映射到 <see cref="T:System.String" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.Real">
      <summary>已签名，其二进制精度为 24 的近似的数字值 （零个或绝对值 10 [–38] 到 10[38])。(SQL_REAL)。 此方法映射到 <see cref="T:System.Single" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.UniqueIdentifier">
      <summary>方法是固定长度的 GUID (SQL_GUID)。 此方法映射到 <see cref="T:System.Guid" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.SmallDateTime">
      <summary>数据和时间格式 yyyymmddhhmmss (SQL_TYPE_TIMESTAMP) 中的数据。 此方法映射到 <see cref="T:System.DateTime" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.SmallInt">
      <summary>确切数值，其精度为 5，小数位数为 0 (签名:-32768 &lt; = n &lt; = 32767，未签名 ︰ 0 &lt; = n &lt; = 65535) (SQL_SMALLINT)。 此方法映射到 <see cref="T:System.Int16" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.Text">
      <summary>可变长度字符数据。 最大长度为数据源而定 (SQL_LONGVARCHAR)。 此方法映射到 <see cref="T:System.String" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.Timestamp">
      <summary>二进制数据 (SQL_BINARY) 的流。 此方法映射到 <see cref="T:System.Array" /> 类型的 <see cref="T:System.Byte" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.TinyInt">
      <summary>确切数值，其精度为 3，小数位数为 0 (签名:-128 &lt; = n &lt; = 127，未签名 ︰ 0 &lt; = n &lt; = 255)(SQL_TINYINT)。 此方法映射到 <see cref="T:System.Byte" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.VarBinary">
      <summary>可变长度二进制。 最大值由用户 (SQL_VARBINARY) 设置。 此方法映射到 <see cref="T:System.Array" /> 类型的 <see cref="T:System.Byte" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.VarChar">
      <summary>可变长度流，字符字符串 (SQL_CHAR)。 此方法映射到 <see cref="T:System.String" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.Date">
      <summary>日期格式 yyyymmdd (SQL_TYPE_DATE) 中的数据。 此方法映射到 <see cref="T:System.DateTime" />。</summary>
    </member>
    <member name="F:System.Data.Odbc.OdbcType.Time">
      <summary>日期格式 hhmmss (SQL_TYPE_TIMES) 中的数据。 此方法映射到 <see cref="T:System.DateTime" />。</summary>
    </member>
    <member name="T:System.Data.OleDb.OleDbCommand">
      <summary>表示要对数据源执行的 SQL 语句或存储过程。</summary>
    </member>
    <member name="T:System.Data.OleDb.OleDbCommandBuilder">
      <summary>自动生成用于协调所做的更改的单表命令 <see cref="T:System.Data.DataSet" /> 与关联的数据库。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Data.OleDb.OleDbConnection">
      <summary>表示与数据源的开放连接。</summary>
    </member>
    <member name="T:System.Data.OleDb.OleDbConnectionStringBuilder">
      <summary>为创建和管理由 <see cref="T:System.Data.OleDb.OleDbConnection" /> 类使用的连接字符串的内容提供了一种简单方法。</summary>
    </member>
    <member name="T:System.Data.OleDb.OleDbDataAdapter">
      <summary>表示用于填充 <see cref="T:System.Data.DataSet" /> 和更新数据源的一组数据命令和一个数据库连接。</summary>
    </member>
    <member name="T:System.Data.OleDb.OleDbDataReader">
      <summary>提供了一种从数据源中读取数据行的只进流。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Data.OleDb.OleDbEnumerator">
      <summary>提供枚举所有的可用 OLE DB 提供程序在本地网络中的机制。</summary>
    </member>
    <member name="T:System.Data.OleDb.OleDbError">
      <summary>收集与警告或错误的数据源返回的相关信息。</summary>
    </member>
    <member name="T:System.Data.OleDb.OleDbErrorCollection">
      <summary>收集 OLE DB .NET Framework 数据提供程序生成的所有错误。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Data.OleDb.OleDbException">
      <summary>当基础提供程序返回的警告或错误的 OLE DB 数据源时引发异常。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Data.OleDb.OleDbFactory">
      <summary>表示一组方法用于创建 OLEDB 访问接口的实现的数据源类的实例。</summary>
    </member>
    <member name="T:System.Data.OleDb.OleDbInfoMessageEventArgs">
      <summary>为 <see cref="E:System.Data.OleDb.OleDbConnection.InfoMessage" /> 事件提供数据。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Data.OleDb.OleDbInfoMessageEventHandler">
      <summary>表示将处理的方法 <see cref="E:System.Data.OleDb.OleDbConnection.InfoMessage" /> 事件 <see cref="T:System.Data.OleDb.OleDbConnection" />。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.OleDb.OleDbInfoMessageEventArgs" /> 对象。</param>
    </member>
    <member name="T:System.Data.OleDb.OleDbLiteral">
      <summary>返回有关在文本命令、 数据值和数据库对象中使用的文本信息。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Invalid">
      <summary>值无效。 映射到 DBLITERAL_INVALID。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Binary_Literal">
      <summary>中的二进制文本的文本命令中。 映射到 DBLITERAL_BINARY_LITERAL。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Catalog_Name">
      <summary>中的文本命令中的目录名称。 映射到 DBLITERAL_CATALOG_NAME。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Catalog_Separator">
      <summary>从文本命令中标识符的其余部分分隔的目录名称的字符。 映射到 DBLITERAL_CATALOG_SEPARATOR。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Char_Literal">
      <summary>中的字符文本的文本命令中。 映射到 DBLITERAL_CHAR_LITERAL。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Column_Alias">
      <summary>中的文本命令中的列别名。 映射到 DBLITERAL_COLUMN_ALIAS。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Column_Name">
      <summary>列名称，或在数据定义接口中的文本命令中使用。 映射到 DBLITERAL_COLUMN_NAME。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Correlation_Name">
      <summary>中的文本命令中的相关名称 （表别名）。 映射到 DBLITERAL_CORRELATION_NAME。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Cursor_Name">
      <summary>中的文本命令中的游标名称。 映射到 DBLITERAL_CURSOR_NAME。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Escape_Percent_Prefix">
      <summary>在 LIKE 子句用于为 DBLITERAL_LIKE_PERCENT 文本返回对字符进行转义的字符。 例如，如果百分号 （%） 用于匹配零个或更多的字符，这是反斜杠 (\)，字符"abc\%%"与匹配所有以"abc %"开头的字符值。 某些 SQL 语句支持可用于重写此值的子句 （转义子句）。 映射到 DBLITERAL_ESCAPE_PERCENT_PREFIX。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Escape_Underscore_Prefix">
      <summary>在 LIKE 子句用于为 DBLITERAL_LIKE_UNDERSCORE 文本返回对字符进行转义的字符。 例如，如果下划线 (_) 被用来匹配一个字符，这是反斜杠 (\) 字符"abc\_ _"与匹配五个字符长并且以"abc_"开头的所有字符值。 某些 SQL 语句支持可用于重写此值的子句 （转义子句）。 映射到 DBLITERAL_ESCAPE_UNDERSCORE_PREFIX。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Index_Name">
      <summary>用于文本命令中或数据定义接口的索引名称。 映射到 DBLITERAL_INDEX_NAME。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Like_Percent">
      <summary>LIKE 子句中用来匹配零个或多个字符的字符。 例如，如果这是百分号 （%），字符"abc %"将匹配所有以"abc"开头的字符值。 映射到 DBLITERAL_LIKE_PERCENT。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Like_Underscore">
      <summary>LIKE 子句中用于匹配一个字符的字符。 例如，如果这是下划线 (_)，字符"abc_"与匹配四个字符长并且以"abc"开头的所有字符值。 映射到 DBLITERAL_LIKE_UNDERSCORE。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Procedure_Name">
      <summary>中的文本命令中的过程名。 映射到 DBLITERAL_PROCEDURE_NAME。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Quote_Prefix">
      <summary>用文本命令中作为左引号包含特殊字符的标识符引起来的字符。 映射到 DBLITERAL_QUOTE_PREFIX。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Schema_Name">
      <summary>中的文本命令中的架构名。 映射到 DBLITERAL_SCHEMA_NAME。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Table_Name">
      <summary>表名称，或在数据定义接口中的文本命令中使用。 映射到 DBLITERAL_TABLE_NAME。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Text_Command">
      <summary>文本命令，如 SQL 语句。 映射到 DBLITERAL_TEXT_COMMAND。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.User_Name">
      <summary>中的文本命令中的用户名。 映射到 DBLITERAL_USER_NAME。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.View_Name">
      <summary>中的文本命令中的视图名称。 映射到 DBLITERAL_VIEW_NAME。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Cube_Name">
      <summary>架构 （或如果该提供程序不支持架构的目录） 中的多维数据集的名称。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Dimension_Name">
      <summary>维度的名称。 如果维度是多个多维数据集的一部分，则为每个多维数据集/维度组合的一行。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Hierarchy_Name">
      <summary>层次结构的名称。 如果该维度不包含层次结构，或者只有一个层次结构，当前列将包含 null 值。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Level_Name">
      <summary>当前级别所属的多维数据集的名称。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Member_Name">
      <summary>成员名。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Property_Name">
      <summary>属性的名称。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Schema_Separator">
      <summary>从文本命令中标识符的其余部分分开的架构名称的字符。 映射到 DBLITERAL_SCHEMA_SEPARATOR。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Quote_Suffix">
      <summary>用文本命令中用作右引号，包含特殊字符的标识符引起来的字符。 使用相同的字符作为前缀和后缀的 1.x 提供程序可能不会返回此文本值，并可以将 DBLITERAL 结构中的成员设置为 DBLITERAL_INVALID 如果请求。 映射到 DBLITERAL_QUOTE_SUFFIX。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Escape_Percent_Suffix">
      <summary>转义符，如果有的话，用于后缀为 DBLITERAL_LIKE_PERCENT 文字返回的字符。 例如，如果百分号 （%） 用于匹配零个或更多的字符和百分比符号括在左括号和右方括号进行转义，DBLITERAL_ESCAPE_PERCENT_PREFIX 是"["，DBLITERAL_ESCAPE_PERCENT_SUFFIX 是"]"，并且字符"abc [%] %"匹配所有以"abc %"开头的字符值。 不使用后缀字符 DBLITERAL_ESCAPE_PERCENT 字符进行转义的提供程序不返回此文本值，可以将 DBLITERAL 结构的 lt 成员设置为 DBLITERAL_INVALID 如果请求。 映射到 DBLITERAL_ESCAPE_PERCENT_SUFFIX。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbLiteral.Escape_Underscore_Suffix">
      <summary>在 LIKE 子句用于为 DBLITERAL_LIKE_UNDERSCORE 文本返回对字符进行转义的字符。 例如，如果下划线 (_) 被用来匹配一个字符，这是反斜杠 (\) 字符"abc\_ _"与匹配五个字符长并且以"abc_"开头的所有字符值。 某些 SQL 语句支持可用于重写此值的子句 （转义子句）。 映射到 DBLITERAL_ESCAPE_UNDERSCORE_SUFFIX。</summary>
    </member>
    <member name="T:System.Data.OleDb.OleDbMetaDataCollectionNames">
      <summary>提供与一起使用的常量列表 GetSchema 方法来检索元数据集合。</summary>
    </member>
    <member name="T:System.Data.OleDb.OleDbMetaDataColumnNames">
      <summary>提供用于中的列名称的静态值 <see cref="T:System.Data.OleDb.OleDbMetaDataCollectionNames" /> 中所含对象 <see cref="T:System.Data.DataTable" />。<see cref="T:System.Data.DataTable" /> 由创建 GetSchema 方法。</summary>
    </member>
    <member name="T:System.Data.OleDb.OleDbParameter">
      <summary>表示 <see cref="T:System.Data.OleDb.OleDbCommand" /> 的参数，还可以是参数到 <see cref="T:System.Data.DataSet" /> 列的映射。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Data.OleDb.OleDbParameterCollection">
      <summary>表示与 <see cref="T:System.Data.OleDb.OleDbCommand" /> 相关的参数集合及其各自到 <see cref="T:System.Data.DataSet" /> 中列的映射。</summary>
    </member>
    <member name="T:System.Data.OleDb.OleDbPermission">
      <summary>启用.NET Framework 数据提供程序用于 OLE DB 来帮助确保用户具有足够的权限访问的 OLE DB 数据源的安全级别。</summary>
    </member>
    <member name="T:System.Data.OleDb.OleDbPermissionAttribute">
      <summary>将安全操作相关联的自定义安全特性。</summary>
    </member>
    <member name="T:System.Data.OleDb.OleDbRowUpdatedEventArgs">
      <summary>为 <see cref="E:System.Data.OleDb.OleDbDataAdapter.RowUpdated" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.Data.OleDb.OleDbRowUpdatedEventHandler">
      <summary>表示将处理的方法 <see cref="E:System.Data.OleDb.OleDbDataAdapter.RowUpdated" /> 事件 <see cref="T:System.Data.OleDb.OleDbDataAdapter" />。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.OleDb.OleDbRowUpdatedEventArgs" />。</param>
    </member>
    <member name="T:System.Data.OleDb.OleDbRowUpdatingEventArgs">
      <summary>为 <see cref="E:System.Data.OleDb.OleDbDataAdapter.RowUpdating" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.Data.OleDb.OleDbRowUpdatingEventHandler">
      <summary>表示将处理的方法 <see cref="E:System.Data.OleDb.OleDbDataAdapter.RowUpdating" /> 事件 <see cref="T:System.Data.OleDb.OleDbDataAdapter" />。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.OleDb.OleDbRowUpdatingEventArgs" />。</param>
    </member>
    <member name="T:System.Data.OleDb.OleDbSchemaGuid">
      <summary>返回由指定的架构表的类型 <see cref="M:System.Data.OleDb.OleDbConnection.GetOleDbSchemaTable(System.Guid,System.Object[])" /> 方法。</summary>
    </member>
    <member name="T:System.Data.OleDb.OleDbTransaction">
      <summary>表示要在数据源进行的 SQL 事务。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Data.OleDb.OleDbType">
      <summary>指定的字段、 属性，以便在中使用的数据类型 <see cref="T:System.Data.OleDb.OleDbParameter" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.BigInt">
      <summary>(DBTYPE_I8) 64 位有符号的整数。 此方法映射到 <see cref="T:System.Int64" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.Binary">
      <summary>二进制数据 (DBTYPE_BYTES) 的流。 此方法映射到 <see cref="T:System.Array" /> 类型的 <see cref="T:System.Byte" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.Boolean">
      <summary>一个布尔值 (DBTYPE_BOOL)。 此方法映射到 <see cref="T:System.Boolean" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.BSTR">
      <summary>Null 终止字符的字符串的 Unicode 字符 (DBTYPE_BSTR)。 此方法映射到 <see cref="T:System.String" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.Char">
      <summary>字符串 (DBTYPE_STR)。 此方法映射到 <see cref="T:System.String" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.Currency">
      <summary>货币值，范围从-2 63 （或-922337203685，477.5808） 到 2 63 精度为千分之十个货币单位 (DBTYPE_CY)-1 （或 + 922337203685，477.5807）。 此方法映射到 <see cref="T:System.Decimal" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.Date">
      <summary>日期数据，存储为一个双精度值 (DBTYPE_DATE)。 整数部分是自 1899 年 12 月 30 日以来的天数和小数部分是一天中的一小部分。 此方法映射到 <see cref="T:System.DateTime" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.DBDate">
      <summary>日期格式的数据 yyyymmdd (DBTYPE_DBDATE)。 此方法映射到 <see cref="T:System.DateTime" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.DBTime">
      <summary>时间格式的数据 hhmmss (DBTYPE_DBTIME)。 此方法映射到 <see cref="T:System.TimeSpan" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.DBTimeStamp">
      <summary>数据和时间格式的数据 yyyymmddhhmmss (DBTYPE_DBTIMESTAMP)。 此方法映射到 <see cref="T:System.DateTime" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.Decimal">
      <summary>固定的精度和小数位数之间的数值范围为-10 38 -1 和 10 38 -1 (DBTYPE_DECIMAL)。 此方法映射到 <see cref="T:System.Decimal" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.Double">
      <summary>浮点数，范围在-1.79 e + 308 到 1.79 e + 308 (DBTYPE_R8)。 此方法映射到 <see cref="T:System.Double" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.Empty">
      <summary>没有值 (DBTYPE_EMPTY)。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.Error">
      <summary>32 位错误代码 (DBTYPE_ERROR)。 此方法映射到 <see cref="T:System.Exception" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.Filetime">
      <summary>从 (DBTYPE_FILETIME) 1601 年 1 月 1 日表示的 100 毫微秒隔数的 64 位无符号的整数。 此方法映射到 <see cref="T:System.DateTime" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.Guid">
      <summary>全局唯一标识符 （或 GUID） (DBTYPE_GUID)。 此方法映射到 <see cref="T:System.Guid" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.IDispatch">
      <summary>一个指向 IDispatch 接口 (DBTYPE_IDISPATCH)。 此方法映射到 <see cref="T:System.Object" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.Integer">
      <summary>(DBTYPE_I4) 32 位有符号的整数。 此方法映射到 <see cref="T:System.Int32" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.IUnknown">
      <summary>一个指向 IUnknown 接口 (DBTYPE_UNKNOWN)。 此方法映射到 <see cref="T:System.Object" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.LongVarBinary">
      <summary>长二进制值 (<see cref="T:System.Data.OleDb.OleDbParameter" /> 仅)。 此方法映射到 <see cref="T:System.Array" /> 类型的 <see cref="T:System.Byte" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.LongVarChar">
      <summary>长字符串值 (<see cref="T:System.Data.OleDb.OleDbParameter" /> 仅)。 此方法映射到 <see cref="T:System.String" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.LongVarWChar">
      <summary>一个长时间的以 null 结尾的 Unicode 字符串值 (<see cref="T:System.Data.OleDb.OleDbParameter" /> 仅)。 此方法映射到 <see cref="T:System.String" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.Numeric">
      <summary>具有固定的精度和小数位数 (DBTYPE_NUMERIC) 精确数值。 此方法映射到 <see cref="T:System.Decimal" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.PropVariant">
      <summary>自动化 PROPVARIANT (DBTYPE_PROP_VARIANT)。 此方法映射到 <see cref="T:System.Object" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.Single">
      <summary>浮点数，范围在-3.40 e + 38 到 3.40 e + 38 之间 (DBTYPE_R4)。 此方法映射到 <see cref="T:System.Single" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.SmallInt">
      <summary>(DBTYPE_I2) 一个 16 位有符号的整数。 此方法映射到 <see cref="T:System.Int16" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.TinyInt">
      <summary>(DBTYPE_I1) 8 位有符号的整数。 此方法映射到 <see cref="T:System.SByte" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.UnsignedBigInt">
      <summary>(DBTYPE_UI8) 64 位无符号的整数。 此方法映射到 <see cref="T:System.UInt64" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.UnsignedInt">
      <summary>(DBTYPE_UI4) 32 位无符号的整数。 此方法映射到 <see cref="T:System.UInt32" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.UnsignedSmallInt">
      <summary>(DBTYPE_UI2) 一个 16 位无符号的整数。 此方法映射到 <see cref="T:System.UInt16" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.UnsignedTinyInt">
      <summary>(DBTYPE_UI1) 一个 8 位无符号的整数。 此方法映射到 <see cref="T:System.Byte" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.VarBinary">
      <summary>二进制数据的长度可变的流 (<see cref="T:System.Data.OleDb.OleDbParameter" /> 仅)。 此方法映射到 <see cref="T:System.Array" /> 类型的 <see cref="T:System.Byte" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.VarChar">
      <summary>非 Unicode 字符的长度可变的流 (<see cref="T:System.Data.OleDb.OleDbParameter" /> 仅)。 此方法映射到 <see cref="T:System.String" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.Variant">
      <summary>可以包含数字、 字符串、 二进制文件中，或日期数据以及这两个特殊的特殊数据类型值 Empty 和 Null (DBTYPE_VARIANT)。 如果未指定任何其他，则认为此类型。 此方法映射到 <see cref="T:System.Object" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.VarNumeric">
      <summary>长度可变的数值 (<see cref="T:System.Data.OleDb.OleDbParameter" /> 仅)。 此方法映射到 <see cref="T:System.Decimal" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.VarWChar">
      <summary>长度可变的、 以 null 结尾的 Unicode 字符流 (<see cref="T:System.Data.OleDb.OleDbParameter" /> 仅)。 此方法映射到 <see cref="T:System.String" />。</summary>
    </member>
    <member name="F:System.Data.OleDb.OleDbType.WChar">
      <summary>Null 终止的 Unicode 字符 (DBTYPE_WSTR) 流。 此方法映射到 <see cref="T:System.String" />。</summary>
    </member>
    <member name="T:System.Data.OperationAbortedException">
      <summary>当用户中止正在进行的操作时，引发此异常。</summary>
    </member>
    <member name="T:System.Data.ParameterDirection">
      <summary>指定相对于查询内使用的参数类型 <see cref="T:System.Data.DataSet" />。</summary>
    </member>
    <member name="F:System.Data.ParameterDirection.Input">
      <summary>该参数为输入参数。</summary>
    </member>
    <member name="F:System.Data.ParameterDirection.Output">
      <summary>该参数为输出参数。</summary>
    </member>
    <member name="F:System.Data.ParameterDirection.InputOutput">
      <summary>该参数是支持的输入和输出。</summary>
    </member>
    <member name="F:System.Data.ParameterDirection.ReturnValue">
      <summary>该参数表示从某操作（如存储过程、内置函数或用户定义的函数）返回的值。</summary>
    </member>
    <member name="T:System.Data.PropertyAttributes">
      <summary>指定属性的特性。</summary>
    </member>
    <member name="F:System.Data.PropertyAttributes.NotSupported">
      <summary>该属性不受提供程序。</summary>
    </member>
    <member name="F:System.Data.PropertyAttributes.Required">
      <summary>初始化数据源之前，用户必须指定此属性的值。</summary>
    </member>
    <member name="F:System.Data.PropertyAttributes.Optional">
      <summary>用户不必初始化数据源之前指定此属性的值。</summary>
    </member>
    <member name="F:System.Data.PropertyAttributes.Read">
      <summary>用户可以读取该属性。</summary>
    </member>
    <member name="F:System.Data.PropertyAttributes.Write">
      <summary>用户可以写入该属性。</summary>
    </member>
    <member name="T:System.Data.PropertyCollection">
      <summary>表示可添加到的属性的集合 <see cref="T:System.Data.DataColumn" />, ，<see cref="T:System.Data.DataSet" />, ，或 <see cref="T:System.Data.DataTable" />。</summary>
    </member>
    <member name="T:System.Data.ReadOnlyException">
      <summary>表示在尝试更改只读列的值时引发的异常。</summary>
    </member>
    <member name="T:System.Data.RowNotInTableException">
      <summary>表示当您尝试上执行操作时引发的异常 <see cref="T:System.Data.DataRow" /> 未处于 <see cref="T:System.Data.DataTable" />。</summary>
    </member>
    <member name="T:System.Data.Rule">
      <summary>指示所发生的操作时 <see cref="T:System.Data.ForeignKeyConstraint" /> 强制执行。</summary>
    </member>
    <member name="F:System.Data.Rule.None">
      <summary>对相关行执行任何操作。</summary>
    </member>
    <member name="F:System.Data.Rule.Cascade">
      <summary>删除或更新相关的行。 这是默认设置。</summary>
    </member>
    <member name="F:System.Data.Rule.SetNull">
      <summary>对相关行中设置值 DBNull。</summary>
    </member>
    <member name="F:System.Data.Rule.SetDefault">
      <summary>中包含的值的相关行中设置值 <see cref="P:System.Data.DataColumn.DefaultValue" /> 属性。</summary>
    </member>
    <member name="T:System.Data.SchemaSerializationMode">
      <summary>表示类型化的架构的序列化模式 <see cref="T:System.Data.DataSet" />。</summary>
    </member>
    <member name="F:System.Data.SchemaSerializationMode.IncludeSchema">
      <summary>包括架构对于类型化的序列化 <see cref="T:System.Data.DataSet" />。 默认值。</summary>
    </member>
    <member name="F:System.Data.SchemaSerializationMode.ExcludeSchema">
      <summary>将跳过架构对于类型化的序列化 <see cref="T:System.Data.DataSet" />。</summary>
    </member>
    <member name="T:System.Data.SchemaType">
      <summary>指定如何处理现有的架构映射，在执行时 <see cref="M:System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" /> 操作。</summary>
    </member>
    <member name="F:System.Data.SchemaType.Source">
      <summary>忽略任何 DataAdapter 上的一个表映射。 配置 <see cref="T:System.Data.DataSet" /> 使用传入的架构，而不应用任何转换。</summary>
    </member>
    <member name="F:System.Data.SchemaType.Mapped">
      <summary>将任何现有的表映射应用于传入的架构。 配置 <see cref="T:System.Data.DataSet" /> 用转换的架构。</summary>
    </member>
    <member name="T:System.Data.SerializationFormat">
      <summary>确定的序列化格式 <see cref="T:System.Data.DataSet" />。</summary>
    </member>
    <member name="F:System.Data.SerializationFormat.Xml">
      <summary>将序列化为 XML 内容。 默认值。</summary>
    </member>
    <member name="F:System.Data.SerializationFormat.Binary">
      <summary>将序列化为二进制内容。 在仅 ADO.NET 2.0 中可用。</summary>
    </member>
    <member name="T:System.Data.Sql.SqlDataSourceEnumerator">
      <summary>提供枚举的本地网络中的 SQL Server 的所有可用实例的机制。</summary>
    </member>
    <member name="T:System.Data.Sql.SqlNotificationRequest">
      <summary>表示有关给定命令的通知的请求。</summary>
    </member>
    <member name="T:System.Data.SqlClient.ApplicationIntent">
      <summary>指定 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.ApplicationIntent" /> 的值。 可能的值为 ReadWrite 和 ReadOnly。</summary>
    </member>
    <member name="F:System.Data.SqlClient.ApplicationIntent.ReadWrite">
      <summary>连接到服务器时的应用程序工作负荷类型是可读写的。</summary>
    </member>
    <member name="F:System.Data.SqlClient.ApplicationIntent.ReadOnly">
      <summary>连接到服务器时的应用程序工作负荷类型是只读的。</summary>
    </member>
    <member name="T:System.Data.SqlClient.OnChangeEventHandler">
      <summary>处理 <see cref="E:System.Data.SqlClient.SqlDependency.OnChange" /> 时与关联的命令的任何收到通知，将触发的事件 <see cref="T:System.Data.SqlClient.SqlDependency" /> 对象。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.SqlClient.SqlNotificationEventArgs" /> 对象。</param>
    </member>
    <member name="T:System.Data.SqlClient.PoolBlockingPeriod">
      <summary>指定 PoolBlockingPeriod 属性 的值。</summary>
    </member>
    <member name="F:System.Data.SqlClient.PoolBlockingPeriod.Auto">
      <summary>阻止时间段关闭对于 Azure SQL 服务器，但是在所有其他 SQL server。</summary>
    </member>
    <member name="F:System.Data.SqlClient.PoolBlockingPeriod.AlwaysBlock">
      <summary>为包括 Azure SQL server 的所有 SQL server 在阻塞期。</summary>
    </member>
    <member name="F:System.Data.SqlClient.PoolBlockingPeriod.NeverBlock">
      <summary>阻塞期 OFF 包括 Azure SQL server 的所有 SQL server。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SortOrder">
      <summary>指定的数据行的排序方式。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SortOrder.Unspecified">
      <summary>默认值。 不指定任何排序顺序。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SortOrder.Ascending">
      <summary>行按升序排序。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SortOrder.Descending">
      <summary>行按降序排序。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlAuthenticationMethod">
      <summary>介绍可供连接到 Azure SQL 数据库的客户端使用的不同 SQL 身份验证方法。 有关详细信息，请参阅 Connecting to SQL Database By Using Azure Active Directory Authentication。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlAuthenticationMethod.NotSpecified">
      <summary>未指定身份验证方法。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlAuthenticationMethod.SqlPassword">
      <summary>身份验证方法为 SQL 密码。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlAuthenticationMethod.ActiveDirectoryPassword">
      <summary>身份验证方法使用 Active Directory 密码。 使用 Active Directory 密码连接到使用 Azure AD 主体名称和密码的 SQL 数据库。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlAuthenticationMethod.ActiveDirectoryIntegrated">
      <summary>身份验证方法使用 Active Directory Integrated。 使用 Active Directory Integrated 连接到使用集成 Windows 身份验证的 SQL 数据库。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlBulkCopy">
      <summary>允许你使用其他源的数据有效地批量加载 SQL Server 表。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlBulkCopyColumnMapping">
      <summary>定义中的列之间的映射 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 实例的数据源和实例的目标表中的列。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection">
      <summary>从 <see cref="T:System.Collections.CollectionBase" /> 继承的 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> 对象的集合。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlBulkCopyOptions">
      <summary>按位标志，指定要与 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 的实例一起使用的一个或多个选项。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlBulkCopyOptions.Default">
      <summary>使用所有选项的默认值。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlBulkCopyOptions.KeepIdentity">
      <summary>保留源标识值。 未指定标识值时，该值由目标指派。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints">
      <summary>插入数据时检查约束。 默认情况下，不检查约束。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlBulkCopyOptions.TableLock">
      <summary>获取批量复制操作持续时间的批量更新锁定。 如果未指定，则使用行锁定。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlBulkCopyOptions.KeepNulls">
      <summary>在目标表中保留 null 值，而不考虑默认值的设置。 如果未指定，由默认值替换 null 值（适用时）。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlBulkCopyOptions.FireTriggers">
      <summary>如果指定，则使服务器激发插入触发器，从而使行插入数据库。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction">
      <summary>如果指定，批量复制操作的每一批都将在事务内发生。 如果指示该选项，并且还向构造函数提供 <see cref="T:System.Data.SqlClient.SqlTransaction" /> 对象，则发生 <see cref="T:System.ArgumentException" />。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlBulkCopyOptions.AllowEncryptedValueModifications">
      <summary>如果指定，AllowEncryptedValueModifications 将启用表或数据库之间加密数据的大容量复制，而且无需对数据解密。 通常情况下，应用程序会从一个表的加密列中选择数据并且不对数据解密（该应用程序会连接到列加密设置关键字设置为已禁用的数据库），然后使用此选项大容量插入数据（仍然为加密状态）。 有关详细信息，请参阅 Always Encrypted。指定 AllowEncryptedValueModifications 时要格外小心，因为这可能导致数据库损坏，原因是驱动程序不会检查数据是否确实已加密，或者是否使用与目标列相同的加密类型、算法和密钥进行了正确加密。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlClientFactory">
      <summary>表示一组方法用于创建实例 <see cref="N:System.Data.SqlClient" /> 的数据源类的提供程序的实现。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlClientMetaDataCollectionNames">
      <summary>提供与一起使用的常量列表 GetSchema 方法来检索元数据集合。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlClientPermission">
      <summary>启用.NET Framework 数据提供程序 SQL Server，以帮助确保用户具有足够的权限访问数据源的安全级别。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlClientPermissionAttribute">
      <summary>将安全操作相关联的自定义安全特性。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlColumnEncryptionCertificateStoreProvider">
      <summary>Windows 证书存储的密钥存储提供程序的实现。 借助此类，可将 Windows 证书存储中存储的证书用作列的主密钥。 有关详细信息，请参阅 Always Encrypted。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlColumnEncryptionCngProvider">
      <summary>CMK 存储提供程序实现使用 Microsoft 加密 API: Next Generation (CNG) 与 Always Encrypted。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlColumnEncryptionCspProvider">
      <summary>使用 Microsoft CAPI CMK 存储提供程序实现基于使用的加密服务提供程序 (CSP) Always Encrypted。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider">
      <summary>所有密钥存储提供程序的基类。 自定义提供程序必须从此类中派生而来并重写其成员函数，然后使用 SqlConnection.RegisterColumnEncryptionKeyStoreProviders() 对其进行注册。 有关详细信息，请参阅 Always Encrypted。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlCommand">
      <summary>表示要对 SQL Server 数据库执行的一个 Transact-SQL 语句或存储过程。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlCommandBuilder">
      <summary>自动生成用于协调通过关联的 SQL Server 数据库对 <see cref="T:System.Data.DataSet" /> 所做更改的单表命令。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlCommandColumnEncryptionSetting">
      <summary>指定读取和写入加密列时将如何发送及接收数据。 根据特定的查询，正当使用非加密列时跳过 Always Encrypted 驱动程序的处理可能会降低性能影响。 请注意这些设置不能用于绕过加密以及获取纯文本数据的访问权限。 有关详细信息，请参阅 Always Encrypted (Database Engine)</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlCommandColumnEncryptionSetting.UseConnectionSetting">
      <summary>指定该命令应默认为连接字符串中的 Always Encrypted 设置。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlCommandColumnEncryptionSetting.Enabled">
      <summary>为查询启用 Always Encrypted。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlCommandColumnEncryptionSetting.ResultSetOnly">
      <summary>指定驱动程序中 Always Encrypted 例程应只能处理命令的结果。 当命令不具有需要加密的任何参数时使用此值。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlCommandColumnEncryptionSetting.Disabled">
      <summary>对查询禁用 Always Encrypted。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlConnection">
      <summary>表示到 SQL Server 数据库的打开连接。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlConnectionColumnEncryptionSetting">
      <summary>指定在连接中启用“始终加密”功能。 请注意这些设置不能用于绕过加密以及获取纯文本数据的访问权限。 有关详细信息，请参阅 Always Encrypted (Database Engine)。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlConnectionColumnEncryptionSetting.Disabled">
      <summary>指定连接不使用“始终加密”功能。 如果未通过该连接发送访问加密列的查询，则应使用此设置。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlConnectionColumnEncryptionSetting.Enabled">
      <summary>启用连接的“始终加密”功能。 将以透明方式加密与加密列对应的查询参数和加密列的查询结果。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlConnectionStringBuilder">
      <summary>为创建和管理由 <see cref="T:System.Data.SqlClient.SqlConnection" /> 类使用的连接字符串的内容提供了一种简单方法。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlCredential">
      <summary>
        <see cref="T:System.Data.SqlClient.SqlCredential" /> 提供了更安全的方式来指定登录名尝试使用密码 SQL Server 身份验证。<see cref="T:System.Data.SqlClient.SqlCredential" /> 用户 id 和密码，将用来组成 SQL Server 身份验证。 中的密码 <see cref="T:System.Data.SqlClient.SqlCredential" /> 对象属于类型 <see cref="T:System.Security.SecureString" />。<see cref="T:System.Data.SqlClient.SqlCredential" /> 不能被继承。Windows 身份验证 (Integrated Security = true) 保持最安全的方式来登录到 SQL Server 数据库。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlDataAdapter">
      <summary>表示用于填充 <see cref="T:System.Data.DataSet" /> 和更新 SQL Server 数据库的一组数据命令和一个数据库连接。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlDataReader">
      <summary>提供一种从 SQL Server 数据库中读取只进的行流的方式。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SQLDebugging">
      <summary>包含以支持调试应用程序。 不适用于直接使用。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlDependency">
      <summary>
        <see cref="T:System.Data.SqlClient.SqlDependency" /> 对象都表示应用程序和 SQL Server 实例之间的查询通知依赖项。 应用程序可以创建 <see cref="T:System.Data.SqlClient.SqlDependency" /> 对象并进行注册以接收通知通过 <see cref="T:System.Data.SqlClient.OnChangeEventHandler" /> 事件处理程序。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlError">
      <summary>收集与 SQL Server 返回的警告或错误有关的信息。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlErrorCollection">
      <summary>收集用于 SQL Server 的 .NET Framework 数据提供程序生成的所有错误。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlException">
      <summary>SQL Server 返回警告或错误时引发的异常。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlInfoMessageEventArgs">
      <summary>为 <see cref="E:System.Data.SqlClient.SqlConnection.InfoMessage" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlInfoMessageEventHandler">
      <summary>表示将用来处理 <see cref="E:System.Data.SqlClient.SqlConnection.InfoMessage" /> 的 <see cref="T:System.Data.SqlClient.SqlConnection" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.SqlClient.SqlInfoMessageEventArgs" /> 对象。</param>
    </member>
    <member name="T:System.Data.SqlClient.SqlNotificationEventArgs">
      <summary>表示传递给通知事件处理程序的参数集。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlNotificationInfo">
      <summary>此枚举提供有关依赖项事件处理程序都可以接收的不同通知的其他信息。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationInfo.Truncate">
      <summary>一个或多个表已截断。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationInfo.Insert">
      <summary>数据已更改的 INSERT 语句。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationInfo.Update">
      <summary>数据已更改由 UPDATE 语句。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationInfo.Delete">
      <summary>数据已更改的 DELETE 语句。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationInfo.Drop">
      <summary>与查询相关的基础对象而被丢弃。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationInfo.Alter">
      <summary>已修改的查询相关的基础服务器对象。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationInfo.Restart">
      <summary>重新启动服务器 （通知发送期间重启。）。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationInfo.Error">
      <summary>发生了内部服务器错误。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationInfo.Query">
      <summary>SELECT 语句无法向其通报或已提供的说明。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationInfo.Invalid">
      <summary>所提供不能被通知 （例如，UPDATE 语句） 的一条语句。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationInfo.Options">
      <summary>在订阅时没有适当地设置的 SET 选项。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationInfo.Isolation">
      <summary>不是有效的隔离模式下执行该语句时 （例如，快照）。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationInfo.Expired">
      <summary>SqlDependency 对象已过期。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationInfo.Resource">
      <summary>由于服务器资源不足而激发。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationInfo.PreviousFire">
      <summary>前一个语句导致在当前事务下激发了查询通知。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationInfo.TemplateLimit">
      <summary>订阅查询导致其中一个超过最大容限的目标表上的模板数。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationInfo.Merge">
      <summary>用于区分触发查询通知的服务器端原因。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationInfo.Unknown">
      <summary>在信息选项由服务器发送无法识别客户端时使用。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationInfo.AlreadyChanged">
      <summary>SqlDependency 对象已激发，并且不能向其中添加新的命令。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlNotificationSource">
      <summary>指示依赖项事件处理程序收到的通知的源。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationSource.Data">
      <summary>数据已更改;例如，插入、 更新、 删除或截断操作发生。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationSource.Timeout">
      <summary>订阅超时已过期。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationSource.Object">
      <summary>数据库对象没有改变。例如，基础对象的查询相关的已删除或修改。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationSource.Database">
      <summary>数据库状态已更改;例如，数据库的查询相关的已删除或分离。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationSource.System">
      <summary>发生系统相关的事件。 例如，时发生内部错误、 重新启动服务器，或导致无效的资源压力。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationSource.Statement">
      <summary>TRANSACT-SQL 语句不能用于通知;例如，在执行 SELECT 语句，不会通知或非 SELECT 语句。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationSource.Environment">
      <summary>运行时环境不是与通知，则兼容例如，隔离级别设置为快照，或者一个或多个 SET 选项不兼容。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationSource.Execution">
      <summary>执行期间出现运行时错误。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationSource.Owner">
      <summary>仅限; 内部不应在代码中使用。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationSource.Unknown">
      <summary>在源选项由服务器发送无法识别客户端时使用。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationSource.Client">
      <summary>将出现了客户端启动的通知，例如客户端超时或由于而尝试将命令添加到已激发的依赖项。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlNotificationType">
      <summary>介绍可由接收的不同通知类型 <see cref="T:System.Data.SqlClient.OnChangeEventHandler" /> 事件处理程序通过 <see cref="T:System.Data.SqlClient.SqlNotificationEventArgs" /> 参数。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationType.Change">
      <summary>更改在被监视的服务器上的数据。 使用 <see cref="T:System.Data.SqlClient.SqlNotificationInfo" /> 项来确定更改的详细信息。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationType.Subscribe">
      <summary>无法创建通知订阅。 使用 <see cref="T:System.Data.SqlClient.SqlNotificationEventArgs" /> 对象的 <see cref="T:System.Data.SqlClient.SqlNotificationInfo" /> 项来确定失败的原因。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SqlNotificationType.Unknown">
      <summary>在类型选项由服务器发送无法识别客户端时使用。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlParameter">
      <summary>表示 <see cref="T:System.Data.SqlClient.SqlCommand" /> 的参数，或者其与 <see cref="T:System.Data.DataSet" /> 列的映射。 无法继承此类。 有关参数的详细信息，请参阅配置参数和参数数据类型。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlParameterCollection">
      <summary>表示与 <see cref="T:System.Data.SqlClient.SqlCommand" /> 关联的参数的集合以及各个参数到 <see cref="T:System.Data.DataSet" /> 中列的映射。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlRowsCopiedEventArgs">
      <summary>表示传递给参数集 <see cref="T:System.Data.SqlClient.SqlRowsCopiedEventHandler" />。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlRowsCopiedEventHandler">
      <summary>表示用于处理的方法 <see cref="E:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied" /> 事件 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.SqlClient.SqlRowsCopiedEventArgs" /> 对象。</param>
    </member>
    <member name="T:System.Data.SqlClient.SqlRowUpdatedEventArgs">
      <summary>为 <see cref="E:System.Data.SqlClient.SqlDataAdapter.RowUpdated" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlRowUpdatedEventHandler">
      <summary>表示将用来处理 <see cref="E:System.Data.SqlClient.SqlDataAdapter.RowUpdated" /> 的 <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.SqlClient.SqlRowUpdatedEventArgs" />。</param>
    </member>
    <member name="T:System.Data.SqlClient.SqlRowUpdatingEventArgs">
      <summary>为 <see cref="E:System.Data.SqlClient.SqlDataAdapter.RowUpdating" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlRowUpdatingEventHandler">
      <summary>表示将用来处理 <see cref="E:System.Data.SqlClient.SqlDataAdapter.RowUpdating" /> 的 <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.SqlClient.SqlRowUpdatingEventArgs" />。</param>
    </member>
    <member name="T:System.Data.SqlClient.SqlTransaction">
      <summary>表示将在 SQL Server 数据库中进行的 Transact-SQL 事务。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Data.SqlDbType">
      <summary>指定 SQL Server 特定数据类型的字段、 属性，用于 <see cref="T:System.Data.SqlClient.SqlParameter" />。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.BigInt">
      <summary>
        <see cref="T:System.Int64" />。 64 位带符号整数。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Binary">
      <summary>
        <see cref="T:System.Array" />类型<see cref="T:System.Byte" />。 固定长度流，范围在 1 到 8000 个字节之间的二进制数据。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Bit">
      <summary>
        <see cref="T:System.Boolean" />。 无符号的数字值，可为 0，1，或 null。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Char">
      <summary>
        <see cref="T:System.String" />。 范围在 1 到 8000 个字符之间的非 Unicode 字符固定长度流。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.DateTime">
      <summary>
        <see cref="T:System.DateTime" />。 日期和时间数据，值范围从 1753 年 1 月 1 日至 12 月 31 日，精确到 3.33 毫秒到 9999。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Decimal">
      <summary>
        <see cref="T:System.Decimal" />。 固定的精度和小数位数之间的数值范围为-10 38 -1 和 10 38 -1。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Float">
      <summary>
        <see cref="T:System.Double" />。 浮点数，范围在-1.79 e + 308 到 1.79 e + 308 之间。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Image">
      <summary>
        <see cref="T:System.Array" />类型<see cref="T:System.Byte" />。 范围从 0 到 2 的二进制数据的长度可变的流 31 -1 （或者 2147483647） 字节。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Int">
      <summary>
        <see cref="T:System.Int32" />。 32 位带符号整数。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Money">
      <summary>
        <see cref="T:System.Decimal" />。 货币值，范围从-2 63 （即-9223372036854775808） 到 2 63 -1 （或 9223372036854775807），精确到货币单位的万分之一。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.NChar">
      <summary>
        <see cref="T:System.String" />。 范围在 1 到 4000 个字符之间的 Unicode 字符的固定长度流。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.NText">
      <summary>
        <see cref="T:System.String" />。 最大长度为 2 Unicode 数据的长度可变的流 30 -1 （或者 1073741823） 个字符。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.NVarChar">
      <summary>
        <see cref="T:System.String" />。 范围在 1 到 4000 个字符之间的 Unicode 字符长度可变的流。 如果字符串大于 4000 个字符，隐式转换将失败。 使用字符串长度超过 4000 个字符时，请显式设置对象。 使用 <see cref="F:System.Data.SqlDbType.NVarChar" /> 数据库列时 nvarchar(max)。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Real">
      <summary>
        <see cref="T:System.Single" />。 浮点数，范围在-3.40 e + 38 到 3.40 e + 38 之间。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.UniqueIdentifier">
      <summary>
        <see cref="T:System.Guid" />。 全局唯一标识符 （或 GUID） 中。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.SmallDateTime">
      <summary>
        <see cref="T:System.DateTime" />。 数值范围从 1900 年 1 月 1 日到 2079 年 6 月 6 日精度为一分钟的日期和时间数据。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.SmallInt">
      <summary>
        <see cref="T:System.Int16" />。 16 位带符号整数。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.SmallMoney">
      <summary>
        <see cref="T:System.Decimal" />。 一个范围从-214，748.3648 到 +214,748.3647，精确到货币单位的万分之一的货币值。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Text">
      <summary>
        <see cref="T:System.String" />。 最大长度为 2 的非 Unicode 数据的变量长度流 31 -1 （或者 2147483647） 个字符。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Timestamp">
      <summary>
        <see cref="T:System.Array" />类型<see cref="T:System.Byte" />。 自动生成二进制数字，保证在数据库中是唯一。timestamp 通常用作为表行加版本戳的机制。 存储大小为 8 个字节。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.TinyInt">
      <summary>
        <see cref="T:System.Byte" />。 8 位无符号整数。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.VarBinary">
      <summary>
        <see cref="T:System.Array" />类型<see cref="T:System.Byte" />。 范围在 1 到 8000 个字节之间的二进制数据长度可变的流。 如果字节数组大于 8000 个字节，隐式转换将失败。 在使用字节数组大于 8000 个字节时，请显式设置对象。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.VarChar">
      <summary>
        <see cref="T:System.String" />。 范围在 1 到 8000 个字符之间的非 Unicode 字符长度可变的流。 使用 <see cref="F:System.Data.SqlDbType.VarChar" /> 数据库列时 varchar(max)。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Variant">
      <summary>
        <see cref="T:System.Object" />。 可以包含数值的特殊数据类型，字符串、 二进制文件中，或日期数据，以及 SQL Server 值的空和 Null，这将假定如果没有其他声明类型。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Xml">
      <summary>XML 值。 获取将 XML 作为字符串使用 <see cref="M:System.Data.SqlClient.SqlDataReader.GetValue(System.Int32)" /> 方法或 <see cref="P:System.Data.SqlTypes.SqlXml.Value" /> 属性，或指定为 <see cref="T:System.Xml.XmlReader" /> 通过调用 <see cref="M:System.Data.SqlTypes.SqlXml.CreateReader" /> 方法。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Udt">
      <summary>一个 SQL Server 用户定义类型 (UDT)。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Structured">
      <summary>用于指定包含在表值参数中的结构化的数据的特殊数据类型。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Date">
      <summary>日期数据，从 1 月的值范围为 1，1 AD 到公元 9999 年 12 月 31 日。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Time">
      <summary>基于 24 小时制时间数据。 时间值范围是 00:00:00 到 23:59:59.9999999 100 纳秒精度。 对应于 SQL Server time 值。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.DateTime2">
      <summary>日期和时间数据。 日期值范围是从 1 月 1，1 AD 到公元 9999 年 12 月 31 日。 时间值范围是 00:00:00 到 23:59:59.9999999 100 纳秒精度。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.DateTimeOffset">
      <summary>时区的日期和时间数据。 日期值范围是从 1 月 1，1 AD 到公元 9999 年 12 月 31 日。 时间值范围是 00:00:00 到 23:59:59.9999999 100 纳秒精度。 时区值范围是-14:00 至 + 14:00。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.INullable">
      <summary>所有 <see cref="N:System.Data.SqlTypes" /> 对象，而结构实现 INullable 接口。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlAlreadyFilledException">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlAlreadyFilledException" /> 类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlBinary">
      <summary>表示要在存储中或从数据库中检索二进制数据的长度可变的流。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlBoolean">
      <summary>表示一个整数值，为 1 或 0，则存储在或者从数据库中检索。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlByte">
      <summary>表示一个 8 位无符号的整数，0 和 255 之间，范围中要存储中或从数据库中检索。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlBytes">
      <summary>表示可变的引用类型包装 <see cref="P:System.Data.SqlTypes.SqlBytes.Buffer" /> 或 <see cref="P:System.Data.SqlTypes.SqlBytes.Stream" />。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlChars">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlChars" /> 是可变的引用类型包装 <see cref="T:System.Char" /> 数组或 <see cref="T:System.Data.SqlTypes.SqlString" /> 实例。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlCompareOptions">
      <summary>指定的比较选项值 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.None">
      <summary>指定的默认选项设置 <see cref="T:System.Data.SqlTypes.SqlString" /> 比较。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.IgnoreCase">
      <summary>指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 比较必须忽略大小写。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.IgnoreNonSpace">
      <summary>指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 比较必须忽略非空格组合字符，如标注字符。 Unicode 标准定义为与基的字符，以生成新的字符组合的字符组合字符。 非空格组合字符不在呈现时本身使用字符空间。 有关非空格组合字符有关的详细信息，请参阅 http://www.unicode.org Unicode 标准。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.IgnoreKanaType">
      <summary>指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 比较必须忽略假名类型。 假名类型是指表示日语中的语音的日语平假名和片假名字符。 平假名用于本机日语表达式和单词，而片假名用于从"计算机"或"Internet"等其他语言借用的词语。 拼音声音可以表示在平假名和片假名。 如果选择此值，则一种声音的平假名字符视为相等的同一个声音的片假名字符。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.IgnoreWidth">
      <summary>指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 比较必须忽略字符宽度。 例如，日语的片假名字符可以写为全角或半角，并且如果选择此值，则片假名字符的全角形式被视为等同于编写的半角字符相同。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.BinarySort">
      <summary>指定的排序应基于字符的数字值而不是其字母数字值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.BinarySort2">
      <summary>执行二进制排序。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlDateTime">
      <summary>表示数值范围从 1753 年 1 月 1 日至 12 月 31 日，精确到 3.33 毫秒要存储中或从数据库中检索到 9999 的日期和时间数据。<see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构都有其对应的.NET Framework 类型，从不同的基础数据结构 <see cref="T:System.DateTime" />, ，该类型可表示 12:00:00 AM 之间任何时间 0001 年 1 月 1 日和 11:59:59 PM 12/31/9999，100 纳秒的准确性。<see cref="T:System.Data.SqlTypes.SqlDateTime" /> 实际上都存储到 00:00:00 AM 的相对差值 1900 年 1 月 1 日。 因此，从转换"00:00:00 AM 为整数的 1/1/1900年"将返回 0。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlDecimal">
      <summary>表示数值之间-10 ^38 + 1 和 10 ^38-1，具有固定的精度和小数位数。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlDouble">
      <summary>表示一个浮点数字中范围在-1.79 e + 308 到 1.79 e + 308 之间要存储中或从数据库中检索。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlFileStream">
      <summary>公开与作为字节序列的 FILESTREAM 列属性存储的 SQL Server 数据。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlGuid">
      <summary>表示要在存储或从数据库中检索一个 GUID。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlInt16">
      <summary>表示要存储中或从数据库中检索的 16 位有符号的整数。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlInt32">
      <summary>表示要存储中或从数据库中检索的 32 位有符号的整数。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlInt64">
      <summary>表示要存储在或从数据库中检索 64 位带符号的整数。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlMoney">
      <summary>表示货币值，范围从-2 63 （或-922337203685，477.5808） 到 2 63 精度为千分之十个货币单位要存储中或从数据库中检索为-1 （或 + 922337203685，477.5807）。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlNotFilledException">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlNotFilledException" /> 类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlNullValueException">
      <summary>当 Value 结构的 <see cref="N:System.Data.SqlTypes" /> 属性设置为 null 时所引发的异常。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlSingle">
      <summary>表示浮点数，范围在-3.40 e + 38 到 3.40 e + 38 之间要存储中或从数据库中检索。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlString">
      <summary>表示存储在中或从数据库中检索的字符的长度可变的流。<see cref="T:System.Data.SqlTypes.SqlString" /> 具有不同的基础数据结构从其相应的.NET Framework <see cref="T:System.String" /> 数据类型。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlTruncateException">
      <summary>设置一个值时引发的异常 <see cref="N:System.Data.SqlTypes" /> 结构会截断该值。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlTypeException">
      <summary>基异常类 <see cref="N:System.Data.SqlTypes" />。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" /> 类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlXml">
      <summary>表示 XML 数据存储在数据库中或从服务器检索。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.StorageState">
      <summary>
        <see cref="T:System.Data.SqlTypes.StorageState" /> 不应用作独立组件，而应用作其他类从中派生标准功能的枚举。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.StorageState.Buffer">
      <summary>缓冲区大小。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.StorageState.Stream">
      <summary>流。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.StorageState.UnmanagedBuffer">
      <summary>非托管的缓冲区。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeBigIntSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeBigIntSchemaImporterExtension" /> 类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeBinarySchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeBinarySchemaImporterExtension" /> 类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeBitSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeBitSchemaImporterExtension" /> 类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeCharSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeCharSchemaImporterExtension" /> 类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeDateTimeSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeDateTimeSchemaImporterExtension" /> 类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeDecimalSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeDecimalSchemaImporterExtension" /> 类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeFloatSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeFloatSchemaImporterExtension" /> 类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeIntSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeIntSchemaImporterExtension" /> 类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeMoneySchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeMoneySchemaImporterExtension" /> 类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeNCharSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeNCharSchemaImporterExtension" /> 类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeNTextSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeNTextSchemaImporterExtension" /> 类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeNumericSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeNumericSchemaImporterExtension" /> 类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeNVarCharSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeNVarCharSchemaImporterExtension" /> 类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeRealSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeRealSchemaImporterExtension" /> 类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeSmallDateTimeSchemaImporterExtension">
      <summary>TypeSmallDateTimeSchemaImporterExtension 类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeSmallIntSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeSmallIntSchemaImporterExtension" /> 类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeSmallMoneySchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeSmallMoneySchemaImporterExtension" /> 类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeTextSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeTextSchemaImporterExtension" /> 类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeTinyIntSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeTinyIntSchemaImporterExtension" /> 类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeUniqueIdentifierSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeUniqueIdentifierSchemaImporterExtension" /> 类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeVarBinarySchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeVarBinarySchemaImporterExtension" /> 类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeVarCharSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeVarCharSchemaImporterExtension" /> 类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.TypeVarImageSchemaImporterExtension">
      <summary>
        <see cref="T:System.Data.SqlTypes.TypeVarImageSchemaImporterExtension" /> 类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。</summary>
    </member>
    <member name="T:System.Data.StateChangeEventArgs">
      <summary>提供 .NET Framework 数据提供程序的状态更改事件数据。</summary>
    </member>
    <member name="T:System.Data.StateChangeEventHandler">
      <summary>表示用来处理 <see cref="E:System.Data.Common.DbConnection.StateChange" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.StateChangeEventArgs" />。</param>
    </member>
    <member name="T:System.Data.StatementCompletedEventArgs">
      <summary>为提供附加信息 <see cref="E:System.Data.SqlClient.SqlCommand.StatementCompleted" /> 事件。</summary>
    </member>
    <member name="T:System.Data.StatementCompletedEventHandler">
      <summary>事件处理程序委托类型 <see cref="E:System.Data.SqlClient.SqlCommand.StatementCompleted" /> 事件。</summary>
      <param name="sender">事件源。</param>
      <param name="e">事件的数据。</param>
    </member>
    <member name="T:System.Data.StatementType">
      <summary>指定要使用的 SQL 查询的类型 <see cref="T:System.Data.OleDb.OleDbRowUpdatedEventArgs" />, ，<see cref="T:System.Data.OleDb.OleDbRowUpdatingEventArgs" />, ，<see cref="T:System.Data.SqlClient.SqlRowUpdatedEventArgs" />, ，或 <see cref="T:System.Data.SqlClient.SqlRowUpdatingEventArgs" /> 类。</summary>
    </member>
    <member name="F:System.Data.StatementType.Select">
      <summary>是由 SELECT 语句的 SQL 查询。</summary>
    </member>
    <member name="F:System.Data.StatementType.Insert">
      <summary>是一条 INSERT 语句的 SQL 查询。</summary>
    </member>
    <member name="F:System.Data.StatementType.Update">
      <summary>是一条 UPDATE 语句的 SQL 查询。</summary>
    </member>
    <member name="F:System.Data.StatementType.Delete">
      <summary>SQL 查询是 DELETE 语句。</summary>
    </member>
    <member name="F:System.Data.StatementType.Batch">
      <summary>SQL 查询，批语句。</summary>
    </member>
    <member name="T:System.Data.StrongTypingException">
      <summary>则会引发该异常通过强类型化 <see cref="T:System.Data.DataSet" /> 当用户访问 DBNull 值。</summary>
    </member>
    <member name="T:System.Data.SyntaxErrorException">
      <summary>表示时，将引发的异常 <see cref="P:System.Data.DataColumn.Expression" /> 属性 <see cref="T:System.Data.DataColumn" /> 包含语法错误。</summary>
    </member>
    <member name="T:System.Data.TypedDataSetGenerator">
      <summary>用于创建强类型化 <see cref="T:System.Data.DataSet" />。</summary>
    </member>
    <member name="T:System.Data.TypedDataSetGeneratorException">
      <summary>当生成强类型 <see cref="T:System.Data.DataSet" /> 的过程中发生名称冲突时引发的异常。</summary>
    </member>
    <member name="T:System.Data.UniqueConstraint">
      <summary>表示对一组列中所有值必须都是唯一的限制。</summary>
    </member>
    <member name="T:System.Data.UpdateRowSource">
      <summary>指定如何将查询命令结果应用于正在更新的行。</summary>
    </member>
    <member name="F:System.Data.UpdateRowSource.None">
      <summary>忽略任何返回的参数或行。</summary>
    </member>
    <member name="F:System.Data.UpdateRowSource.OutputParameters">
      <summary>输出参数映射到已更改的行中 <see cref="T:System.Data.DataSet" />。</summary>
    </member>
    <member name="F:System.Data.UpdateRowSource.FirstReturnedRecord">
      <summary>返回的第一行中的数据映射到已更改的行中 <see cref="T:System.Data.DataSet" />。</summary>
    </member>
    <member name="F:System.Data.UpdateRowSource.Both">
      <summary>输出参数和返回的第一行映射到已更改的行中 <see cref="T:System.Data.DataSet" />。</summary>
    </member>
    <member name="T:System.Data.UpdateStatus">
      <summary>指定有关当前和其余行期间要执行的操作 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />。</summary>
    </member>
    <member name="F:System.Data.UpdateStatus.Continue">
      <summary>
        <see cref="T:System.Data.Common.DataAdapter" /> 可以继续处理的行。</summary>
    </member>
    <member name="F:System.Data.UpdateStatus.ErrorsOccurred">
      <summary>事件处理程序会报告更新应被视为错误。</summary>
    </member>
    <member name="F:System.Data.UpdateStatus.SkipCurrentRow">
      <summary>当前行并不是进行更新。</summary>
    </member>
    <member name="F:System.Data.UpdateStatus.SkipAllRemainingRows">
      <summary>当前行和所有剩余行将不会更新。</summary>
    </member>
    <member name="T:System.Data.VersionNotFoundException">
      <summary>表示当尝试返回的版本时引发的异常 <see cref="T:System.Data.DataRow" /> 已被删除。</summary>
    </member>
    <member name="T:System.Data.XmlReadMode">
      <summary>指定如何读取 XML 数据和关系架构读入 <see cref="T:System.Data.DataSet" />。</summary>
    </member>
    <member name="F:System.Data.XmlReadMode.Auto">
      <summary>默认。</summary>
    </member>
    <member name="F:System.Data.XmlReadMode.ReadSchema">
      <summary>读取内联架构并加载数据。 如果 <see cref="T:System.Data.DataSet" /> 已经包含架构，新表可能会添加到架构，但是如果中已存在内联架构中的任何表，将引发异常 <see cref="T:System.Data.DataSet" />。</summary>
    </member>
    <member name="F:System.Data.XmlReadMode.IgnoreSchema">
      <summary>忽略任何内联架构并将数据读入现有的 <see cref="T:System.Data.DataSet" /> 架构。 如果任何数据与现有架构不匹配，则会丢弃 (包括来自不同的命名空间为定义的数据 <see cref="T:System.Data.DataSet" />)。 如果数据为 DiffGram， IgnoreSchema 具有相同的功能 DiffGram。</summary>
    </member>
    <member name="F:System.Data.XmlReadMode.InferSchema">
      <summary>忽略任何内联架构，推断的数据的架构并加载数据。 如果 <see cref="T:System.Data.DataSet" /> 已包含架构，通过添加新表或向现有表添加列来扩展当前架构。 如果推断的表已经存在，但具有不同的命名空间，则引发异常，或者任何推断的列与现有列发生冲突。</summary>
    </member>
    <member name="F:System.Data.XmlReadMode.DiffGram">
      <summary>读取 DiffGram，将更改应用到的 DiffGram 从 <see cref="T:System.Data.DataSet" />。 语义是相同的 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> 操作。 与 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> 操作， <see cref="P:System.Data.DataRow.RowState" /> 会保留值。 输入到 <see cref="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader)" /> 使用 Diffgram 应仅获取使用从输出 <see cref="M:System.Data.DataSet.WriteXml(System.IO.Stream)" /> 以 diffgram 形式。</summary>
    </member>
    <member name="F:System.Data.XmlReadMode.Fragment">
      <summary>读取 XML 片段，例如那些通过执行针对 SQL Server 实例的 FOR XML 查询生成。 当 <see cref="T:System.Data.XmlReadMode" /> 设置为 Fragment, ，默认命名空间将读取内联架构。</summary>
    </member>
    <member name="F:System.Data.XmlReadMode.InferTypedSchema">
      <summary>忽略任何内联架构、 推断强类型化的数据，从架构并加载数据。 如果从数据，不能推断出类型，它被解释为字符串数据。 如果 <see cref="T:System.Data.DataSet" /> 已经包含一个架构已扩展当前架构，通过添加新表或通过将列添加到现有的表。 如果推断的表已经存在，但具有不同的命名空间，则引发异常，或者任何推断的列与现有列发生冲突。</summary>
    </member>
    <member name="T:System.Data.XmlWriteMode">
      <summary>指定如何编写 XML 数据和从一个关系架构 <see cref="T:System.Data.DataSet" />。</summary>
    </member>
    <member name="F:System.Data.XmlWriteMode.WriteSchema">
      <summary>当前的内容写入 <see cref="T:System.Data.DataSet" /> 以与关系结构作为内联 XSD 架构的 XML 数据形式。 如果 <see cref="T:System.Data.DataSet" /> 只有架构不包含数据，编写仅内联架构。 如果 <see cref="T:System.Data.DataSet" /> 未没有当前的架构，则不写入任何内容。</summary>
    </member>
    <member name="F:System.Data.XmlWriteMode.IgnoreSchema">
      <summary>当前的内容写入 <see cref="T:System.Data.DataSet" /> 作为 XML 数据，而无需 XSD 架构。 如果没有数据加载到 <see cref="T:System.Data.DataSet" />, ，则写入任何内容。</summary>
    </member>
    <member name="F:System.Data.XmlWriteMode.DiffGram">
      <summary>以 DiffGram 形式编写整个 <see cref="T:System.Data.DataSet" />，包括原始值和当前值。 若要生成一个 DiffGram，它包含只会更改值，请调用 <see cref="M:System.Data.DataSet.GetChanges" />, ，然后调用 <see cref="M:System.Data.DataSet.WriteXml(System.IO.Stream)" /> 对返回 DiffGram 形式 <see cref="T:System.Data.DataSet" />。</summary>
    </member>
    <member name="T:System.Xml.XmlDataDocument">
      <summary>可以将结构化的数据存储、 检索和操作通过相关 <see cref="T:System.Data.DataSet" />。</summary>
    </member>
  </members>
</doc>