<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Xaml</name>
  </assembly>
  <members>
    <member name="E:System.Xaml.IXamlNameResolver.OnNameScopeInitializationComplete">
      <summary>XAML 处理器已注册到备份 XAML 名称范围的所有相关名称时发生。</summary>
    </member>
    <member name="F:System.Xaml.XamlLanguage.Xaml2006Namespace">
      <summary>获取一个字符串值，用于标识 XAML (2006) 语言命名空间的字符串。 该命名空间对应于 XAML （2006 年）"x"带前缀的命名空间中定义 [MS-XAML] Section 5.1.1。</summary>
    </member>
    <member name="F:System.Xaml.XamlLanguage.Xml1998Namespace">
      <summary>获取一个字符串值，用于标识 XML (1998) 语言命名空间的字符串。 该命名空间对应的 XML 前缀"xml"命名空间中引用 [MS-XAML] Section 5.1.2。</summary>
    </member>
    <member name="M:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute" /> 类的新实例。</summary>
      <param name="type">此属性将进行相应报告中的返回类型。</param>
    </member>
    <member name="M:System.Windows.Markup.AmbientAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.AmbientAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.ArrayExtension" /> 类的新实例。 这可以创建一个空数组。</summary>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.#ctor(System.Array)">
      <summary>基于所提供的原始数组初始化 <see cref="T:System.Windows.Markup.ArrayExtension" /> 类的新实例。</summary>
      <param name="elements">用于填充创建的数组的数组内容。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Windows.Markup.ArrayExtension" /> 类的新实例，并初始化数组的类型。</summary>
      <param name="arrayType">新数组的对象类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="arrayType" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.AddChild(System.Object)">
      <summary>将所提供的对象添加到数组末尾。</summary>
      <param name="value">要添加到数组末尾的对象。</param>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.AddText(System.String)">
      <summary>将文本节点添加为新数组项。</summary>
      <param name="text">要添加到数组末尾的文本。</param>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.ProvideValue(System.IServiceProvider)">
      <summary>返回一个数组，其大小为 <see cref="P:System.Windows.Markup.ArrayExtension.Items" /> 值中提供的对象数。</summary>
      <param name="serviceProvider">可为标记扩展提供服务的对象。</param>
      <returns>创建的数组，或 null。</returns>
      <exception cref="T:System.InvalidOperationException">处理未提供有效 <see cref="P:System.Windows.Markup.ArrayExtension.Type" /> 的数组。- 或 -数组的已声明 <see cref="P:System.Windows.Markup.ArrayExtension.Type" /> 与其一个或多个 <see cref="P:System.Windows.Markup.ArrayExtension.Items" /> 值之间存在类型不匹配。</exception>
    </member>
    <member name="M:System.Windows.Markup.ConstructorArgumentAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Windows.Markup.ConstructorArgumentAttribute" /> 类的新实例。</summary>
      <param name="argumentName">将初始化关联属性的构造函数的名称。</param>
    </member>
    <member name="M:System.Windows.Markup.ContentPropertyAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.ContentPropertyAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.ContentPropertyAttribute.#ctor(System.String)">
      <summary>使用指定的名称初始化 <see cref="T:System.Windows.Markup.ContentPropertyAttribute" /> 类的新实例。</summary>
      <param name="name">作为内容属性的属性的名称。</param>
    </member>
    <member name="M:System.Windows.Markup.ContentWrapperAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Windows.Markup.ContentWrapperAttribute" /> 类的新实例。</summary>
      <param name="contentWrapper">作为集合类型的内容包装声明的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Windows.Markup.ContentWrapperAttribute.Equals(System.Object)">
      <summary>通过比较 <see cref="P:System.Windows.Markup.ContentWrapperAttribute.ContentWrapper" /> 属性确定指定的 <see cref="T:System.Windows.Markup.ContentWrapperAttribute" /> 是否等效于此 <see cref="T:System.Windows.Markup.ContentWrapperAttribute" />。</summary>
      <param name="obj">要比较的 <see cref="T:System.Windows.Markup.ContentWrapperAttribute" />。</param>
      <returns>如果 <see cref="P:System.Windows.Markup.ContentWrapperAttribute.ContentWrapper" /> 属性相等，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Markup.ContentWrapperAttribute.GetHashCode">
      <summary>获取此实例的哈希代码。</summary>
      <returns>整数哈希代码</returns>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.DateTimeValueSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>确定指定的 <see cref="T:System.String" /> 是否可以转换为 <see cref="T:System.DateTime" /> 的实例。</summary>
      <param name="value">要计算以进行转换的字符串。</param>
      <param name="context">用于转换的上下文信息。</param>
      <returns>如果该值可以转换，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>确定能否将指定的对象转换为 <see cref="T:System.String" />。</summary>
      <param name="value">要进行计算以供转换的对象。</param>
      <param name="context">用于转换的上下文信息。</param>
      <returns>如果可将 <paramref name="value" /> 转换为 <see cref="T:System.String" />，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>将 <see cref="T:System.String" /> 转换为 <see cref="T:System.DateTime" />。</summary>
      <param name="value">要转换为 <see cref="T:System.DateTime" /> 的字符串。</param>
      <param name="context">用于转换的上下文信息。</param>
      <returns>基于所提供的 <paramref name="value" /> 的 <see cref="T:System.DateTime" /> 新实例。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>将 <see cref="T:System.DateTime" /> 的实例转换为 <see cref="T:System.String" />。</summary>
      <param name="value">要转换为字符串的对象。</param>
      <param name="context">用于转换的上下文信息。</param>
      <returns>指定的 <see cref="T:System.DateTime" /> 的字符串表示形式。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> 不是 <see cref="T:System.DateTime" /> 或为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.DependsOnAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Windows.Markup.DependsOnAttribute" /> 类的新实例。</summary>
      <param name="name">与此 <see cref="T:System.Windows.Markup.DependsOnAttribute" /> 关联的属性所依赖的属性。</param>
    </member>
    <member name="M:System.Windows.Markup.DictionaryKeyPropertyAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Windows.Markup.DictionaryKeyPropertyAttribute" /> 类的新实例。</summary>
      <param name="name">提供隐式密钥值的属性的名称。</param>
    </member>
    <member name="M:System.Windows.Markup.IComponentConnector.Connect(System.Int32,System.Object)">
      <summary>将事件和名称附加到已编译的内容。</summary>
      <param name="connectionId">用于区分调用的标识符标记。</param>
      <param name="target">事件和名称所连接到的目标。</param>
    </member>
    <member name="M:System.Windows.Markup.IComponentConnector.InitializeComponent">
      <summary>加载组件的已编译页面。</summary>
    </member>
    <member name="M:System.Windows.Markup.INameScope.FindName(System.String)">
      <summary>返回具有提供的标识名称的对象。</summary>
      <param name="name">发出请求的对象的名称标识符。</param>
      <returns>对象（如果找到）。 如果找不到该名称的对象，则返回 null。</returns>
    </member>
    <member name="M:System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)">
      <summary>将提供的名称注册到当前的 XAML 名称范围中。</summary>
      <param name="name">要注册的名称。</param>
      <param name="scopedElement">提供的 <paramref name="name" /> 所引用的特定元素。</param>
    </member>
    <member name="M:System.Windows.Markup.INameScope.UnregisterName(System.String)">
      <summary>从当前的 XAML 名称范围中注销提供的名称。</summary>
      <param name="name">要注销的名称。</param>
    </member>
    <member name="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)">
      <summary>是否指定的命名的属性可被视为环境当前作用域中的查询。</summary>
      <param name="propertyName">要检查环境状态的属性的名称。</param>
      <returns>true 如果请求的属性可被视为视为环境。否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor(System.ComponentModel.PropertyDescriptor)">
      <summary>获取给定属性描述符的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
      <param name="descriptor">要转换的属性的描述符。</param>
      <returns>一个可以序列化指定属性的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</returns>
    </member>
    <member name="M:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor(System.Type)">
      <summary>获取与指定类型关联的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
      <param name="type">要转换的值的类型。</param>
      <returns>可以序列化指定类型的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</returns>
    </member>
    <member name="M:System.Windows.Markup.IXamlTypeResolver.Resolve(System.String)">
      <summary>将已命名的 XAML 类型解析为相应的 CLR <see cref="T:System.Type" />。</summary>
      <param name="qualifiedTypeName">要解析的 XAML 类型名称。 该类型名称可以由 XML 命名空间的前缀限定。 否则将采用当前默认的 XML 命名空间。</param>
      <returns>
        <paramref name="qualifiedTypeName" /> 要解析为的 <see cref="T:System.Type" />。 </returns>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtension.#ctor">
      <summary>初始化从 <see cref="T:System.Windows.Markup.MarkupExtension" /> 派生的类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
      <summary>当在派生类中实现时，返回用作此标记扩展的目标属性值的对象。</summary>
      <param name="serviceProvider">可为标记扩展提供服务的服务提供程序帮助程序。</param>
      <returns>要在应用了扩展的属性上设置的对象值。</returns>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.#ctor(System.Type)">
      <summary>使用提供的 <see cref="T:System.Type" /> 初始化 <see cref="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute" /> 类的新实例。</summary>
      <param name="returnType">此 .NET Framework 特性 报告的返回类型。</param>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.#ctor(System.Type,System.Type)">
      <summary>不要使用，请参阅“备注”。</summary>
      <param name="returnType">此 .NET Framework 特性 报告的返回类型。</param>
      <param name="expressionType">不要使用；请参阅“备注”。</param>
    </member>
    <member name="M:System.Windows.Markup.MemberDefinition.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.MemberDefinition" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.NameReferenceConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>返回此转换器是否可以转换到另一个对象的一种类型的对象。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType">一个 <see cref="T:System.Type" /> ，它表示您想要将从转换的类型。</param>
      <returns>如果该转换器能够执行转换，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>返回一个值，该值指示此转换器是否可以将对象转换为指定的目标类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="destinationType">要转换为的类型。</param>
      <returns>true 如果该转换器能够执行转换，则否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将所提供的对象转换为另一个对象，使用指定的上下文和区域性信息。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 要用作当前区域性。</param>
      <param name="value">要转换的引用名称字符串。</param>
      <returns>返回的对象，它是有可能是相关支持程序集中的类型映射，并能够与 XAML 名称引用 XAML 中声明的任何对象。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> 为空字符串或空字符串。- 或 -<see cref="T:System.Xaml.IXamlNameResolver" /> 服务已丢失或无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将对象转换为指定的类型。 这被为了在对象图中返回的对象的 XAML 引用名称。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 要用作当前区域性。</param>
      <param name="value">要检索的引用名称的对象。</param>
      <param name="destinationType">要返回的类型。 应始终引用 <see cref="T:System.String" /> 类型。</param>
      <returns>输入的引用名称 <paramref name="value" /> 对象。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xaml.IXamlNameProvider" /> 服务已丢失或无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.NameScopePropertyAttribute.#ctor(System.String)">
      <summary>用指定的名称初始化 <see cref="T:System.Windows.Markup.NameScopePropertyAttribute" /> 类的新实例。</summary>
      <param name="name">提供 XAML 名称范围的特性化类型上属性的名称。</param>
    </member>
    <member name="M:System.Windows.Markup.NameScopePropertyAttribute.#ctor(System.String,System.Type)">
      <summary>使用指定的名称和类型初始化 <see cref="T:System.Windows.Markup.NameScopePropertyAttribute" /> 类的新实例。</summary>
      <param name="name">提供 XAML 名称范围的可附加成员的名称。</param>
      <param name="type">提供 XAML 名称范围的可附加成员的所有者类型。</param>
    </member>
    <member name="M:System.Windows.Markup.NullExtension.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.NullExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.NullExtension.ProvideValue(System.IServiceProvider)">
      <summary>提供 null 以用作此标记扩展的输出值。</summary>
      <param name="serviceProvider">可为标记扩展实现提供服务的对象。</param>
      <returns>一个空引用。</returns>
    </member>
    <member name="M:System.Windows.Markup.PropertyDefinition.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.PropertyDefinition" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.Reference.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.Reference" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.Reference.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Windows.Markup.Reference" /> 类 <paramref name="name" /> 参数。</summary>
      <param name="name">XAML 的引用的元素名称。</param>
    </member>
    <member name="M:System.Windows.Markup.Reference.ProvideValue(System.IServiceProvider)">
      <summary>返回一个对象，它的目标属性的值。 有关 <see cref="T:System.Windows.Markup.Reference" /> 类型，这是对象，提供 <see cref="P:System.Windows.Markup.Reference.Name" /> 引用。</summary>
      <param name="serviceProvider">一个实现类 <see cref="T:System.Xaml.IXamlNameResolver" /> 服务。</param>
      <returns>目标属性的值。 这是有可能是相关支持程序集中的类型映射任何对象。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="serviceProvider" /> 值未实现 <see cref="T:System.Xaml.IXamlNameResolver" /> 服务。- 或 -<see cref="P:System.Windows.Markup.Reference.Name" /> 尚未通过构造或位置的用法设置值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceProvider" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.RootNamespaceAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Windows.Markup.RootNamespaceAttribute" /> 类的新实例。</summary>
      <param name="nameSpace">根命名空间值。</param>
    </member>
    <member name="M:System.Windows.Markup.RuntimeNamePropertyAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Windows.Markup.RuntimeNamePropertyAttribute" /> 类的新实例。</summary>
      <param name="name">用作类的 x:Name 等效项的属性的名称。</param>
    </member>
    <member name="M:System.Windows.Markup.StaticExtension.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.StaticExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.StaticExtension.#ctor(System.String)">
      <summary>使用提供的 <paramref name="member" /> 字符串初始化 <see cref="T:System.Windows.Markup.StaticExtension" /> 类的新实例。</summary>
      <param name="member">用于标识要引用的成员的字符串。 该字符串使用格式 prefix:typeName.fieldOrPropertyName。 prefix 是 XAML 命名空间的映射前缀，并且仅用于未映射到默认 XAML 命名空间的引用静态值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.StaticExtension.ProvideValue(System.IServiceProvider)">
      <summary>返回一个要在应用此扩展的属性上设置的对象值。 对于 <see cref="T:System.Windows.Markup.StaticExtension" />，返回值是针对请求的静态成员所计算的静态值。</summary>
      <param name="serviceProvider">可为标记扩展提供服务的对象。 服务提供商应提供可实现类型解析程序 (<see cref="T:System.Windows.Markup.IXamlTypeResolver" />) 的服务。</param>
      <returns>要在应用了扩展的属性上设置的静态值。</returns>
      <exception cref="T:System.InvalidOperationException">计算时，扩展的 <paramref name="member" /> 值为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 字符串的某部分未进行正确分析。- 或 -<paramref name="serviceProvider" /> 没有为 <see cref="T:System.Windows.Markup.IXamlTypeResolver" /> 提供服务- 或 -<paramref name="member" /> 值未解析为静态成员。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceProvider" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.TrimSurroundingWhitespaceAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.TrimSurroundingWhitespaceAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.TypeExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.#ctor(System.String)">
      <summary>根据所提供的 <paramref name="typeName" /> 字符串初始化 <see cref="P:System.Windows.Markup.TypeExtension.TypeName" /> 值，从而初始化 <see cref="T:System.Windows.Markup.TypeExtension" /> 类的新实例。</summary>
      <param name="typeName">标识要引用的类型的字符串。 该字符串使用格式 prefix:className。 prefix 是 XAML 命名空间的映射前缀，并且仅用于未映射到默认 XAML 命名空间的引用类型。</param>
      <exception cref="T:System.ArgumentNullException">尝试将 <paramref name="typeName" /> 指定为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Windows.Markup.TypeExtension" /> 类的新实例，直接声明类型。</summary>
      <param name="type">将由此 <see cref="T:System.Windows.Markup.TypeExtension" /> 表示的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null</exception>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.ProvideValue(System.IServiceProvider)">
      <summary>返回一个应在应用了此扩展的属性上设置的对象。 对于 <see cref="T:System.Windows.Markup.TypeExtension" />，这是为请求的类型名称计算的 <see cref="T:System.Type" /> 值。</summary>
      <param name="serviceProvider">可为标记扩展提供服务的对象。 此提供程序应为 <see cref="T:System.Windows.Markup.IXamlTypeResolver" /> 提供服务。</param>
      <returns>要在应用了扩展的属性上设置的 <see cref="T:System.Type" />。</returns>
      <exception cref="T:System.InvalidOperationException">扩展的 <paramref name="member" /> 值为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeName" /> 字符串的某部分未进行正确分析。- 或 -<paramref name="serviceProvider" /> 没有为 <see cref="T:System.Windows.Markup.IXamlTypeResolver" /> 提供服务- 或 -<paramref name="typeName" /> 值未解析为类型。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceProvider" /> 为 null</exception>
    </member>
    <member name="M:System.Windows.Markup.UidPropertyAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Windows.Markup.UidPropertyAttribute" /> 类的新实例。</summary>
      <param name="name">提供的属性的名称 x:Uid 值。</param>
    </member>
    <member name="M:System.Windows.Markup.UsableDuringInitializationAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Windows.Markup.UsableDuringInitializationAttribute" /> 类的新实例。</summary>
      <param name="usable">定义关联类在初始化期间是否可用。</param>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.ValueSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>在派生类中重写时，确定指定的 <see cref="T:System.String" /> 能否转换为 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的实现所支持类型的实例。</summary>
      <param name="value">要计算以进行转换的字符串。</param>
      <param name="context">用于转换的上下文信息。</param>
      <returns>如果该值可以转换，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>在派生类中重写时，确定指定对象是否可以转换为 <see cref="T:System.String" />。</summary>
      <param name="value">要进行计算以供转换的对象。</param>
      <param name="context">用于转换的上下文信息。</param>
      <returns>如果可将 <paramref name="value" /> 转换为 <see cref="T:System.String" />，则为 true；否则为 false.。</returns>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>在派生类中重写时，将 <see cref="T:System.String" /> 转换为 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的实现所支持类型的实例。</summary>
      <param name="value">要转换的字符串。</param>
      <param name="context">用于转换的上下文信息。</param>
      <returns>
        <see cref="T:System.Windows.Markup.ValueSerializer" /> 的实现基于提供的 <paramref name="value" /> 而支持的类型的新实例。</returns>
      <exception cref="T:System.NotSupportedException">无法转换 <paramref name="value" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>在派生类中重写时，将指定对象转换为 <see cref="T:System.String" />。</summary>
      <param name="value">要转换为字符串的对象。</param>
      <param name="context">用于转换的上下文信息。</param>
      <returns>指定对象的字符串表示形式。</returns>
      <exception cref="T:System.NotSupportedException">无法转换 <paramref name="value" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetConvertFromException(System.Object)">
      <summary>返回当转换无法执行时所引发的异常。</summary>
      <param name="value">无法转换的对象。</param>
      <returns>当 ConvertFrom 转换无法执行时引发异常的 <see cref="T:System.Exception" /> 对象。</returns>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)">
      <summary>返回当转换无法执行时所引发的异常。</summary>
      <param name="value">无法转换的对象。</param>
      <param name="destinationType">一个类型，表示转换尝试转换为的类型。</param>
      <returns>当 ConvertTo 转换无法执行时引发异常的 <see cref="T:System.Exception" /> 对象。</returns>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
      <summary>通过传递属性的 CLR 属性描述符，获取为属性声明的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
      <param name="descriptor">要进行序列化的属性的 CLR 属性描述符。</param>
      <returns>与指定属性相关联的序列化程序。 可能返回 null。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="descriptor" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)">
      <summary>使用指定上下文获取为指定属性声明的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
      <param name="descriptor">要进行序列化的属性的描述符。</param>
      <param name="context">用于转换的上下文信息。</param>
      <returns>与指定属性相关联的序列化程序。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="descriptor" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
      <summary>为指定类型获取 <see cref="T:System.Windows.Markup.ValueSerializer" /> 声明。</summary>
      <param name="type">要为其获取 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的类型。</param>
      <returns>与指定类型相关联的序列化程序。 可能返回 null。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)">
      <summary>使用指定的内容，获取为指定类型声明的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
      <param name="type">要为其获取 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的类型。</param>
      <param name="context">用于转换的上下文信息。</param>
      <returns>与指定类型相关联的序列化程序。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>获取 <see cref="T:System.Windows.Markup.ValueSerializer" /> 引用的类型的枚举。</summary>
      <param name="value">要序列化的值。</param>
      <param name="context">用于转换的上下文信息。</param>
      <returns>此序列化程序所转换的类型。</returns>
    </member>
    <member name="M:System.Windows.Markup.WhitespaceSignificantCollectionAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.WhitespaceSignificantCollectionAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlDeferLoadAttribute.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Windows.Markup.XamlDeferLoadAttribute" /> 类，使用类型的字符串名称。</summary>
      <param name="loaderType">要用于延迟加载行为的实现类型字符串名称。</param>
      <param name="contentType">延迟的目标/内容类型的字符串名称的类型的加载行为。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="loaderType" /> 或 <paramref name="contentType" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.XamlDeferLoadAttribute.#ctor(System.Type,System.Type)">
      <summary>新实例初始化 <see cref="T:System.Windows.Markup.XamlDeferLoadAttribute" /> 类，使用 CLR <see cref="T:System.Type" /> 值。</summary>
      <param name="loaderType">CLR <see cref="T:System.Type" /> 实现用于延迟加载行为的值。</param>
      <param name="contentType">CLR <see cref="T:System.Type" /> 延迟加载行为的目标/内容类型的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="loaderType" /> 或 <paramref name="contentType" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.XamlSetMarkupExtensionAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionAttribute" /> 类的新实例。</summary>
      <param name="xamlSetMarkupExtensionHandler">设置操作要用于标记扩展的处理程序的名称。</param>
    </member>
    <member name="M:System.Windows.Markup.XamlSetMarkupExtensionEventArgs.#ctor(System.Xaml.XamlMember,System.Windows.Markup.MarkupExtension,System.IServiceProvider)">
      <summary>初始化 <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs" /> 类的新实例。</summary>
      <param name="member">XAML 类型系统 / 设置该成员的架构信息。</param>
      <param name="value">要为所设置的成员提供的标记扩展引用。</param>
      <param name="serviceProvider">服务提供程序信息传递到标记扩展。</param>
    </member>
    <member name="M:System.Windows.Markup.XamlSetMarkupExtensionEventArgs.CallBase">
      <summary>使您能够调用一个回调，在当前活动类型的基类的类上定义。</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetTypeConverterAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" /> 类的新实例。</summary>
      <param name="xamlSetTypeConverterHandler">要用于设置操作的类型转换器的处理程序的名称。</param>
    </member>
    <member name="M:System.Windows.Markup.XamlSetTypeConverterEventArgs.#ctor(System.Xaml.XamlMember,System.ComponentModel.TypeConverter,System.Object,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo)">
      <summary>初始化 <see cref="T:System.Windows.Markup.XamlSetTypeConverterEventArgs" /> 类的新实例。</summary>
      <param name="member">XAML 类型系统 / 设置该成员的架构信息。</param>
      <param name="typeConverter">正在调用的特定类型转换器实例。</param>
      <param name="value">要为所设置的成员提供的值。</param>
      <param name="serviceProvider">服务可以使用的提供程序信息 <paramref name="typeConverter" /> 类。</param>
      <param name="cultureInfo">区域性信息可由 <paramref name="typeConverter" /> 类调用时 <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" /> 和其他方法。</param>
    </member>
    <member name="M:System.Windows.Markup.XamlSetTypeConverterEventArgs.CallBase">
      <summary>使您能够调用一个回调，在当前活动类型的基类的类上定义。</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetValueEventArgs.#ctor(System.Xaml.XamlMember,System.Object)">
      <summary>初始化 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> 类的新实例。</summary>
      <param name="member">XAML 类型系统 / 设置该成员的架构信息。</param>
      <param name="value">要为成员提供的值。</param>
    </member>
    <member name="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase">
      <summary>当在派生类中重写，使您能够调用 SetValue 为在当前活动类型的基类的类上定义的回调。</summary>
    </member>
    <member name="M:System.Windows.Markup.XData.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.XData" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlLangPropertyAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Windows.Markup.XmlLangPropertyAttribute" /> 类的新实例。</summary>
      <param name="name">与 xml:lang 属性关联的属性名。</param>
    </member>
    <member name="M:System.Windows.Markup.XmlnsCompatibleWithAttribute.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Windows.Markup.XmlnsCompatibleWithAttribute" /> 类的新实例。</summary>
      <param name="oldNamespace">引用 XAML 命名空间标识符。</param>
      <param name="newNamespace">包含 XAML 命名空间标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldNamespace" /> 或 <paramref name="newNamespace" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.XmlnsDefinitionAttribute.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Windows.Markup.XmlnsDefinitionAttribute" /> 类的新实例。</summary>
      <param name="xmlNamespace">XAML 命名空间标识符。</param>
      <param name="clrNamespace">引用 CLR 命名空间名称的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlNamespace" /> 或 <paramref name="clrNamespace" /> 为 null。</exception>
    </member>
    <member name="M:System.Windows.Markup.XmlnsPrefixAttribute.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Windows.Markup.XmlnsPrefixAttribute" /> 类的新实例。</summary>
      <param name="xmlNamespace">XAML 命名空间标识符。</param>
      <param name="prefix">建议的前缀字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlNamespace" /> 或 <paramref name="prefix" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.AmbientPropertyValue.#ctor(System.Xaml.XamlMember,System.Object)">
      <summary>初始化 <see cref="T:System.Xaml.AmbientPropertyValue" /> 类的新实例。</summary>
      <param name="property">表示环境的属性的标识符。</param>
      <param name="value">报告的值。</param>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.#ctor(System.Type,System.String)">
      <summary>初始化 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 类的新实例。</summary>
      <param name="declaringType">
        <paramref name="declaringType" /> 组件的标识符，它应该与声明的名称匹配 <see cref="P:System.Xaml.XamlMember.Type" />。</param>
      <param name="memberName">
        <paramref name="memberName" /> 组件的标识符，它应与匹配 <see cref="P:System.Xaml.XamlMember.Name" />。</param>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.Equals(System.Object)">
      <summary>确定是否的此实例 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 和指定的对象具有相同的值。</summary>
      <param name="obj">将与当前 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 进行比较的对象。</param>
      <returns>true 如果 <paramref name="obj" /> 是 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 以及它的值是否与此实例相同; 否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.Equals(System.Xaml.AttachableMemberIdentifier)">
      <summary>确定此实例是否与另一个指定的 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 对象具有相同的值。</summary>
      <param name="other">要与当前的 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 进行比较的 <see cref="T:System.Xaml.AttachableMemberIdentifier" />。</param>
      <returns>true 如果对象具有相同的值;否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.GetHashCode">
      <summary>返回此 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 的哈希代码。</summary>
      <returns>整数哈希代码。</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.op_Equality(System.Xaml.AttachableMemberIdentifier,System.Xaml.AttachableMemberIdentifier)">
      <summary>确定两个指定的 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 对象是否具有相同的值。</summary>
      <param name="left">
        <see cref="T:System.Xaml.AttachableMemberIdentifier" />, ，或 null。</param>
      <param name="right">
        <see cref="T:System.Xaml.AttachableMemberIdentifier" />, ，或 null。</param>
      <returns>如果 true 的值与 <paramref name="left" /> 的值相同，则为 <paramref name="right" />；否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.op_Inequality(System.Xaml.AttachableMemberIdentifier,System.Xaml.AttachableMemberIdentifier)">
      <summary>确定两个指定 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 对象具有不同的值。</summary>
      <param name="left">
        <see cref="T:System.Xaml.AttachableMemberIdentifier" />, ，或 null。</param>
      <param name="right">
        <see cref="T:System.Xaml.AttachableMemberIdentifier" />, ，或 null。</param>
      <returns>true 如果值 <paramref name="left" /> 值不同于的 <paramref name="right" />; 否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.ToString">
      <summary>返回一个 <see cref="T:System.String" />，表示当前的 <see cref="T:System.Xaml.AttachableMemberIdentifier" />。</summary>
      <returns>一个 <see cref="T:System.String" />，表示当前的 <see cref="T:System.Xaml.AttachableMemberIdentifier" />。</returns>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.CopyPropertiesTo(System.Object,System.Collections.Generic.KeyValuePair{System.Xaml.AttachableMemberIdentifier,System.Object}[],System.Int32)">
      <summary>将所有可附加属性/值对从指定可附加属性存储区复制到目标数组。</summary>
      <param name="instance">实现特定的可附加属性存储 <see cref="T:System.Xaml.IAttachedPropertyStore" />; 或任何非 null 对象来访问静态默认可附加属性存储区。</param>
      <param name="array">目标数组。 数组是泛型数组，应传递未标注尺寸，因此应具有的组件 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 和 object。</param>
      <param name="index">要复制到的源索引。</param>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.GetAttachedPropertyCount(System.Object)">
      <summary>返回指定存储区中的可附加属性项的计数。</summary>
      <param name="instance">实现特定的可附加属性存储 <see cref="T:System.Xaml.IAttachedPropertyStore" />; 或任何非 null 对象来访问静态默认可附加属性存储区。</param>
      <returns>存储区中的条目整数计数。</returns>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.RemoveProperty(System.Object,System.Xaml.AttachableMemberIdentifier)">
      <summary>从指定的存储区中删除指定可附加属性的条目。</summary>
      <param name="instance">实现特定的可附加属性存储 <see cref="T:System.Xaml.IAttachedPropertyStore" />; 或任何非 null 对象来访问静态默认可附加属性存储区。</param>
      <param name="name">要从存储中移除的可附加属性项标识符。</param>
      <returns>true 如果要为可附加属性条目 <paramref name="name" /> 存储区中找到并移除从它; 否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.SetProperty(System.Object,System.Xaml.AttachableMemberIdentifier,System.Object)">
      <summary>设置指定存储中的指定可附加属性的值。</summary>
      <param name="instance">实现特定的可附加属性存储 <see cref="T:System.Xaml.IAttachedPropertyStore" />; 或使用静态默认可附加属性存储的任何非 null 对象。</param>
      <param name="name">要为其设置一个值可附加属性项的标识符。</param>
      <param name="value">要设置的值。</param>
      <exception cref="T:System.InvalidOperationException">存储区中，无法设置一个值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.TryGetProperty(System.Object,System.Xaml.AttachableMemberIdentifier,System.Object@)">
      <summary>尝试获取指定存储中指定可附加属性的值。 如果特定可附加属性存储区中不存在，则不引发异常。</summary>
      <param name="instance">实现特定的可附加属性存储 <see cref="T:System.Xaml.IAttachedPropertyStore" />; 或使用静态默认可附加属性存储的任何非 null 对象。</param>
      <param name="name">要为其获取一个值可附加属性项的标识符。</param>
      <param name="value">输出参数。 此方法返回时，包含值的目标对象，如果 <paramref name="name" /> 存储中存在并且包含的值。</param>
      <returns>true 如果要为可附加属性条目 <paramref name="name" /> 是在存储中找到，值已传递到 <paramref name="value" />; 否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.TryGetProperty``1(System.Object,System.Xaml.AttachableMemberIdentifier,``0@)">
      <summary>尝试获取一个值指定可附加属性中指定的存储区返回泛型输出形式。 如果特定可附加属性存储区中不存在，则不引发异常。</summary>
      <param name="instance">实现特定的可附加属性存储 <see cref="T:System.Xaml.IAttachedPropertyStore" />; 或任何非 null 对象来访问静态默认可附加属性存储区。</param>
      <param name="name">要为其获取一个值可附加属性项的标识符。</param>
      <param name="value">输出参数。 此方法返回时，包含值的目标对象，如果 <paramref name="name" /> 存储中存在并且包含的值。</param>
      <typeparam name="T">预期的输出的类型。</typeparam>
      <returns>true 如果要为可附加属性条目 <paramref name="name" /> 是在存储中找到，值已传递到 <paramref name="value" />; 否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetAllAmbientValues(System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Boolean,System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Xaml.XamlMember[])">
      <summary>返回类型和属性的请求集的环境属性信息项的可枚举集合。</summary>
      <param name="ceilingTypes">指定一个或多个向上遍历对象图中时遇到的情况下应停止计算的类型。 此类型包含所需的环境属性。 可为 null。</param>
      <param name="searchLiveStackOnly">true 若要在不使用已保存的上下文中; false 若要使用已保存的上下文。 默认值为 false。 请参阅“备注”。</param>
      <param name="types">指定标识要将其视为环境的类型的一个或多个类型标识符对象。</param>
      <param name="properties">指定一个或多个标识属性以将其视为环境的属性的属性标识符对象。</param>
      <returns>针对所请求的类型和属性的环境属性信息项的可枚举集合。 每个属性信息 <see cref="T:System.Xaml.AmbientPropertyValue" /> 返回匹配其中一个输入 <paramref name="types" /> 或 <paramref name="properties" />。</returns>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetAllAmbientValues(System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Xaml.XamlMember[])">
      <summary>返回请求的属性集的环境属性信息项的可枚举集合。</summary>
      <param name="ceilingTypes">指定一个或多个向上遍历对象图中时遇到的情况下应停止计算的类型。 此类型包含所需的环境属性。 可为 null。</param>
      <param name="properties">指定一个或多个标识属性以将其视为环境的属性的属性标识符对象。</param>
      <returns>请求的属性集的环境属性信息项的可枚举集合。 每个属性信息 <see cref="T:System.Xaml.AmbientPropertyValue" /> 返回匹配其中一个输入 <paramref name="properties" />。</returns>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetAllAmbientValues(System.Xaml.XamlType[])">
      <summary>返回针对请求的类型可能的环境类型的对象实例的可枚举集合。</summary>
      <param name="types">要从中检索环境类型信息的类型集。</param>
      <returns>表示针对所请求的值的对象的可枚举集 <see cref="T:System.Xaml.XamlType" /> 标识符。</returns>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetFirstAmbientValue(System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Xaml.XamlMember[])">
      <summary>从请求的属性，基于第一次遇到哪个属性集返回单个环境属性的信息项。</summary>
      <param name="ceilingTypes">指定一个或多个向上遍历对象图中时遇到的情况下应停止计算的类型。 此类型包含所需的环境属性。</param>
      <param name="properties">指定一个或多个标识属性以将其视为环境的属性的对象。</param>
      <returns>第一个环境属性值的单个环境属性信息项 <paramref name="properties" /> 找到的列表。</returns>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetFirstAmbientValue(System.Xaml.XamlType[])">
      <summary>返回是可能的请求类型的环境类型的第一个匹配对象。</summary>
      <param name="types">要从中检索环境类型信息的类型集。</param>
      <returns>所请求集的的第一个结果对象。</returns>
    </member>
    <member name="M:System.Xaml.IAttachedPropertyStore.CopyPropertiesTo(System.Collections.Generic.KeyValuePair{System.Xaml.AttachableMemberIdentifier,System.Object}[],System.Int32)">
      <summary>副本可附加成员中的所有可附加成员/值对将存储到目标数组。</summary>
      <param name="array">目标数组。 数组是泛型数组，应传递未标注尺寸，因此应具有的组件 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 和 object。</param>
      <param name="index">开始复制处的源索引。</param>
    </member>
    <member name="M:System.Xaml.IAttachedPropertyStore.RemoveProperty(System.Xaml.AttachableMemberIdentifier)">
      <summary>指定可附加成员由该可附加成员存储区中移除的项。</summary>
      <param name="attachableMemberIdentifier">要移除的可附加成员项 XAML 类型系统标识符。</param>
      <returns>true 如果可附加成员条目 <paramref name="attachableMemberIdentifier" /> 存储区中找到并移除; 否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.IAttachedPropertyStore.SetProperty(System.Xaml.AttachableMemberIdentifier,System.Object)">
      <summary>指定可附加成员设置一个值，指定存储中。</summary>
      <param name="attachableMemberIdentifier">要设置的附加成员条目 XAML 类型系统标识符。</param>
      <param name="value">要设置的值。</param>
    </member>
    <member name="M:System.Xaml.IAttachedPropertyStore.TryGetProperty(System.Xaml.AttachableMemberIdentifier,System.Object@)">
      <summary>尝试获取指定可附加成员在指定存储中的值。</summary>
      <param name="attachableMemberIdentifier">要获取的附加成员项 XAML 类型系统标识符。</param>
      <param name="value">输出参数。 此方法返回时，包含值的目标对象，如果 <paramref name="attachableMemberIdentifier" /> 存储中存在并且包含的值。</param>
      <returns>true 如果可附加成员条目 <paramref name="attachableMemberIdentifier" /> 是在存储中找到，值已传递到 <paramref name="value" />; 否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.IDestinationTypeProvider.GetDestinationType">
      <summary>返回 CLR <see cref="T:System.Type" /> 标识相关的类型转换器或标记扩展的目标类型。</summary>
      <returns>CLR <see cref="T:System.Type" /> 目标类型的值。</returns>
    </member>
    <member name="M:System.Xaml.INamespacePrefixLookup.LookupPrefix(System.String)">
      <summary>返回指定的 XAML 命名空间标识符的建议的前缀。</summary>
      <param name="ns">为其获取前缀的 XAML 命名空间标识符字符串。</param>
      <returns>建议的前缀。</returns>
    </member>
    <member name="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)">
      <summary>收集行信息。</summary>
      <param name="lineNumber">要在输出中使用的行号。</param>
      <param name="linePosition">要在输出中使用的行位置。</param>
    </member>
    <member name="M:System.Xaml.IXamlNameProvider.GetName(System.Object)">
      <summary>检索指定对象的 XAML 名称。</summary>
      <param name="value">要获取其名称的对象。</param>
      <returns>所请求对象的 XAML 名称值。</returns>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.GetAllNamesAndValuesInScope">
      <summary>返回 XAML 名称范围中的所有命名的对象的可枚举集合。</summary>
      <returns>可枚举集 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 对象。 每个 <see cref="T:System.Collections.Generic.KeyValuePair`2" />, 、 <see cref="P:System.Collections.Generic.KeyValuePair`2.Key" /> 组件是一个字符串，与 <see cref="P:System.Collections.Generic.KeyValuePair`2.Value" /> 组件是使用对象 <see cref="P:System.Collections.Generic.KeyValuePair`2.Key" /> 中 XAML 名称范围的名称。</returns>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String})">
      <summary>返回一个对象，可以更正为某些生成前向引用的标记模式。</summary>
      <param name="names">不可能的前向引用的集合。</param>
      <returns>一个对象，提供要进行求值更高版本的查找行为的令牌。</returns>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
      <summary>返回一个对象，可以更正为某些生成前向引用的标记模式。</summary>
      <param name="names">不可能的前向引用的集合。</param>
      <param name="canAssignDirectly">true 若要立即将分配给目标属性的已解析的名称引用。false 若要进行重新分析调用用户代码。 默认行为是 false。</param>
      <returns>一个对象，提供要进行求值更高版本的查找行为的令牌。</returns>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.Resolve(System.String)">
      <summary>从解析对象名称引用。</summary>
      <param name="name">要解析的名称引用。</param>
      <returns>已解析的对象;或者为 null。</returns>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.Resolve(System.String,System.Boolean@)">
      <summary>解析名称引用的对象，并提供用于报告是否对象图而完全初始化对象的跟踪值。</summary>
      <param name="name">要解析的名称引用。</param>
      <param name="isFullyInitialized">此方法返回时， true 如果返回的对象具有任何依赖关系无法解析的引用; 否则为 false。</param>
      <returns>一个对象，提供要进行求值更高版本的查找行为的令牌。</returns>
    </member>
    <member name="M:System.Xaml.IXamlNamespaceResolver.GetNamespace(System.String)">
      <summary>检索指定的前缀字符串的 XAML 命名空间标识符。</summary>
      <param name="prefix">要为其检索 XAML 命名空间信息前缀。</param>
      <returns>请求的 XAML 命名空间标识符，为字符串。</returns>
    </member>
    <member name="M:System.Xaml.IXamlNamespaceResolver.GetNamespacePrefixes">
      <summary>返回所有可能的前缀 XAML 命名空间映射 (<see cref="T:System.Xaml.NamespaceDeclaration" /> 值) 的活动的 XAML 架构上下文中提供。</summary>
      <returns>可枚举集 <see cref="T:System.Xaml.NamespaceDeclaration" /> 值。 若要获取所有前缀字符串，都获取 <see cref="P:System.Xaml.NamespaceDeclaration.Prefix" /> 返回组中每个值的值。 若要获取特定 XAML 命名空间前缀，处理任何返回值具有所需 <see cref="P:System.Xaml.NamespaceDeclaration.Namespace" /> 值。</returns>
    </member>
    <member name="M:System.Xaml.IXamlObjectWriterFactory.GetParentSettings">
      <summary>返回 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 从原始内部分析器上下文。</summary>
      <returns>原始的内部分析器上下文中的设置。</returns>
    </member>
    <member name="M:System.Xaml.IXamlObjectWriterFactory.GetXamlObjectWriter(System.Xaml.XamlObjectWriterSettings)">
      <summary>返回 <see cref="T:System.Xaml.XamlObjectWriter" /> ，它是基于活动的 XAML 架构上下文。</summary>
      <param name="settings">设置要用于构造和初始化 <see cref="T:System.Xaml.XamlObjectWriter" />。</param>
      <returns>一个 <see cref="T:System.Xaml.XamlObjectWriter" /> 具有指定的设置。</returns>
    </member>
    <member name="M:System.Xaml.NamespaceDeclaration.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Xaml.NamespaceDeclaration" /> 类使用的初始属性值。</summary>
      <param name="ns">XAML 命名空间标识符，以字符串形式。</param>
      <param name="prefix">为命名空间前缀映射中使用的字符串前缀。</param>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessTo(System.Reflection.Assembly)">
      <summary>返回 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 实例基于请求的程序集 <see cref="T:System.Reflection.Assembly" />。</summary>
      <param name="assembly">请求程序集。</param>
      <returns>一个 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 实例，与 <paramref name="assembly" /> 值，该值用作源信息 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessTo(System.Reflection.AssemblyName)">
      <summary>返回 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 实例基于请求的程序集 <see cref="T:System.Reflection.AssemblyName" />。</summary>
      <param name="assemblyName">请求程序集名称。</param>
      <returns>一个 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 实例，与 <paramref name="assemblyName" /> 值，该值用作源信息 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyName" /> 不是有效的完全限定的程序集名称。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessTo(System.String)">
      <summary>返回 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 实例基于由其限定名指定的特定类型。</summary>
      <param name="assemblyQualifiedTypeName">一个字符串，被分析为程序集限定类型名称。</param>
      <returns>一个 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 实例，与 <paramref name="assemblyQualifiedTypeName" /> 值，该值用作源信息 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessToTypeName" /> 和 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" /> 由反射到的类型。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyQualifiedTypeName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyQualifiedTypeName" /> 不是有效的程序集限定类型名称。- 或 -中的程序集名称 <paramref name="assemblyQualifiedTypeName" /> 不是有效的程序集名称。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessTo(System.Type)">
      <summary>返回 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 实例基于指定的特定类型 <see cref="T:System.Type" />。</summary>
      <param name="type">
        <see cref="T:System.Type" /> 来的请求访问。</param>
      <returns>一个 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 实例，与 <paramref name="type" /> 值，该值用作源信息 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessToTypeName" /> 和 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" /> 由反射到的类型。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.#ctor(System.Collections.Generic.IEnumerable{System.Xaml.Permissions.XamlAccessLevel})">
      <summary>新实例初始化 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 类，使用特定的可枚举集 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 值。</summary>
      <param name="allowedAccess">特定的可枚举集 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="allowedAccess" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="allowedAccess" /> 包含无效的信息，如一个空项。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>新实例初始化 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 类，使用现有的权限。</summary>
      <param name="state">一个 <see cref="T:System.Security.Permissions.PermissionState" /> 枚举值。</param>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.#ctor(System.Xaml.Permissions.XamlAccessLevel)">
      <summary>新实例初始化 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 类，使用单个 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 值。</summary>
      <param name="allowedAccess">定义 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="allowedAccess" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Copy">
      <summary>创建并返回当前的相同副本 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />。</summary>
      <returns>当前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 的副本。</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.FromXml(System.Security.SecurityElement)">
      <summary>通过 XML 编码重新构造具有指定状态的安全对象。</summary>
      <param name="elem">用于重新构造安全对象的 XML 编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elem" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elem" /> 不包含的 XML 编码 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />。- 或 - 中的版本特性 <paramref name="elem" /> 不受支持。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Includes(System.Xaml.Permissions.XamlAccessLevel)">
      <summary>返回是否这 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 包括指定 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 中其 <see cref="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess" /> 列表。</summary>
      <param name="requestedAccess">特定于 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 检查。</param>
      <returns>true 如果 <paramref name="requestedAccess" /> 作为中的项存在 <see cref="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess" /> 的当前列表 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />。 否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestedAccess" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Intersect(System.Security.IPermission)">
      <summary>创建并返回 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> ，它是当前的交集 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 和指定的权限。</summary>
      <param name="target">一个 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 要与当前相交 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />。 可以为 null。</param>
      <returns>一个新的权限，表示当前的交集 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 和指定 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />。 如果交集为空，则此新权限为 null。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 null 或者不是 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定是否当前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 是指定的权限的子集。</summary>
      <param name="target">将要测试子集关系的权限。 可以为 null。</param>
      <returns>true 如果当前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 是指定的权限的子集; 否则为 false。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 null 或者不是 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.IsUnrestricted">
      <summary>返回是否这 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 表示无限制的权限。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 表示无限制的权限。false 如果此 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 中具有特定访问级别限制 <see cref="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess" />, ，或者没有权限。</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.ToXml">
      <summary>创建此 XML 编码 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 及其当前状态。</summary>
      <returns>此 XML 编码 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />, ，包括任何状态信息。</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Union(System.Security.IPermission)">
      <summary>创建一个权限，是当前的联合整体 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 和指定的权限。</summary>
      <param name="other">一个 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />  要与当前组合 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />。 可以为 null。</param>
      <returns>一个新 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> ，它表示当前的联合 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 和指定 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 null 或者不是 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.#ctor(System.Xaml.XamlMember)">
      <summary>新实例初始化 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 类，基于所提供 <see cref="T:System.Xaml.XamlMember" />。</summary>
      <param name="member">
        <see cref="T:System.Xaml.XamlMember" /> 值与此相关的特定 XAML 成员 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.GetValue(System.Object)">
      <summary>从实例中获取相关属性的值。</summary>
      <param name="instance">该成员的所有者类型的实例。</param>
      <returns>请求的属性值中。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">在调用此方法 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 基于未知 <see cref="T:System.Xaml.XamlMember" />。- 或 -调用此方法的只写的成员。- 或 -<see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.SetValue(System.Object,System.Object)">
      <summary>实例上设置相关属性的值。</summary>
      <param name="instance">该成员的所有者类型的实例。</param>
      <param name="value">要设置的属性值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">在调用此方法 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 基于未知 <see cref="T:System.Xaml.XamlMember" />。- 或 -调用此方法对只读成员。- 或 -<see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.ShouldSerializeValue(System.Object)">
      <summary>指示是否需要通过序列化过程中保留的值。</summary>
      <param name="instance">要检查其持久性的属性具有的实例。</param>
      <returns>枚举的一个值。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)">
      <summary>新实例初始化 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 类，基于所提供 <see cref="T:System.Xaml.XamlType" />。</summary>
      <param name="type">
        <see cref="T:System.Xaml.XamlType" /> 值与此相关的特定 XAML 类型 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
      <summary>将所提供的项添加到与此相关类型的实例 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</summary>
      <param name="instance">指定的类型的实例 <see cref="T:System.Xaml.XamlType" /> 用于构造此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</param>
      <param name="item">要添加的项。</param>
      <exception cref="T:System.NotSupportedException">在调用此方法 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 基于未知 <see cref="T:System.Xaml.XamlType" />。- 或 -在调用此方法 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 相关的类型不是一个集合。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 null。</exception>
      <exception cref="T:System.Xaml.XamlSchemaException">
        <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> 为此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 返回 null。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
      <summary>将所提供的密钥和项值添加到与此相关类型的实例 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</summary>
      <param name="instance">指定的类型的实例 <see cref="T:System.Xaml.XamlType" /> 用于构造此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</param>
      <param name="key">要添加的项的字典键。</param>
      <param name="item">要添加的项值。</param>
      <exception cref="T:System.NotSupportedException">在调用此方法 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 基于未知 <see cref="T:System.Xaml.XamlType" />。- 或 -在调用此方法 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 相关的类型不是字典。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 null。</exception>
      <exception cref="T:System.Xaml.XamlSchemaException">
        <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> 为此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 返回 null。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
      <summary>创建对象实例基于构造启动 <see cref="T:System.Xaml.XamlType" /> 此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</summary>
      <param name="arguments">提供的对象的数组 x:ConstructorArgs 的实例。 可能是 null 程序不需要或不使用类型 x:ConstructorArgs。</param>
      <returns>所创建的实例基于构造启动 <see cref="T:System.Xaml.XamlType" /> 此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</returns>
      <exception cref="T:System.MissingMethodException">无法解析一个构造函数。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
      <summary>返回相关 Add 方法 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 与集合或字典。</summary>
      <param name="contentType">
        <see cref="T:System.Xaml.XamlType" /> 使用的项类型 Add 方法。</param>
      <returns>CLR <see cref="T:System.Reflection.MethodInfo" /> 信息 Add 方法，则为 null。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contentType" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
      <summary>返回一个对象，表示可以对项进行枚举的方法。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> 枚举器方法，或 null。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
      <summary>返回 <see cref="T:System.Collections.IEnumerator" /> 表示的项集的对象。</summary>
      <param name="instance">指定的类型的实例 <see cref="T:System.Xaml.XamlType" /> 用于构造此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</param>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 对象，或 null。</returns>
      <exception cref="T:System.NotSupportedException">在调用此方法 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 基于未知 <see cref="T:System.Xaml.XamlType" />。- 或 -在调用此方法 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 相关的类型不是集合或字典的位置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 类，基于名称和命名空间的字符串。</summary>
      <param name="xamlNamespace">XAML 命名空间，其中包含名称。</param>
      <param name="name">要创建的类型的名称 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 有关。</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Xaml.Schema.XamlTypeName})">
      <summary>新实例初始化 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 基于名称和命名空间字符串，以及类型参数的数组的类。</summary>
      <param name="xamlNamespace">包含的 XAML 命名空间 <paramref name="name" />。</param>
      <param name="name">要创建的类型的名称 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 有关。</param>
      <param name="typeArguments">类型参数时，其中每个必须是一个数组 <see cref="T:System.Xaml.Schema.XamlTypeName" />。</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.#ctor(System.Xaml.XamlType)">
      <summary>新实例初始化 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 类，基于现有 <see cref="T:System.Xaml.XamlType" />。</summary>
      <param name="xamlType">现有 <see cref="T:System.Xaml.XamlType" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlType" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.Parse(System.String,System.Xaml.IXamlNamespaceResolver)">
      <summary>提供了 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 值基于类型名称和一个对象，可以将标记前缀解析为命名空间。</summary>
      <param name="typeName">若要创建的类型名称 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 值。</param>
      <param name="namespaceResolver">对象或服务提供程序实现 <see cref="T:System.Xaml.IXamlNamespaceResolver" />。</param>
      <returns>创建的 <see cref="T:System.Xaml.Schema.XamlTypeName" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 或 <paramref name="namespaceResolver" /> 为 null。</exception>
      <exception cref="T:System.FormatException">无法分析字符串。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.ParseList(System.String,System.Xaml.IXamlNamespaceResolver)">
      <summary>提供了 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 值基于一个字符串，可以指定多个类型名称，并可以将标记前缀解析为命名空间的对象。</summary>
      <param name="typeNameList">一个字符串，包含多个类型。 请参阅“备注”。</param>
      <param name="namespaceResolver">对象或服务提供程序实现 <see cref="T:System.Xaml.IXamlNamespaceResolver" />。</param>
      <returns>创建的 <see cref="T:System.Xaml.Schema.XamlTypeName" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeNameList" /> 或 <paramref name="namespaceResolver" /> 为 null。</exception>
      <exception cref="T:System.FormatException">无法分析字符串。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.ToString">
      <summary>将此值转换 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 为其等效的字符串表示形式。</summary>
      <returns>等效字符串表示形式这 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.ToString(System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName},System.Xaml.INamespacePrefixLookup)">
      <summary>将此值转换 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 为其等效的字符串表示形式，这可以是标记语法中使用多个类型的对象元素用法。</summary>
      <param name="typeNameList">类型的列表。</param>
      <param name="prefixLookup">前缀查找服务引用。</param>
      <returns>所有类型的串联的字符串结果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="prefixLookup" /> 或 <paramref name="typeNameList" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.ToString(System.Xaml.INamespacePrefixLookup)">
      <summary>将此值转换 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 为其等效的字符串表示形式，这可以用于标记语法中的一种类型的对象元素用法。</summary>
      <param name="prefixLookup">前缀查找服务引用。</param>
      <returns>一个前缀的用法的字符串。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xaml.Schema.XamlTypeName.Namespace" /> 为此 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 是 null。- 或 -<see cref="P:System.Xaml.Schema.XamlTypeName.Name" /> 无效。- 或 -无法查找该前缀。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.TryParse(System.String,System.Xaml.IXamlNamespaceResolver,System.Xaml.Schema.XamlTypeName@)">
      <summary>提供了 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 值基于类型名称和一个对象，可以将标记前缀解析为命名空间。</summary>
      <param name="typeName">若要创建的类型名称 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 值。</param>
      <param name="namespaceResolver">对象或服务提供程序实现 <see cref="T:System.Xaml.IXamlNamespaceResolver" />。</param>
      <param name="result">Out 参数，其中包含创建 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 如果返回值是 true。</param>
      <returns>true 如果分析成功和 <paramref name="result" /> 包含有用的值; 否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 或 <paramref name="namespaceResolver" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.TryParseList(System.String,System.Xaml.IXamlNamespaceResolver,System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName}@)">
      <summary>提供了 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 值基于一个字符串，可以指定多个类型名称，并可以将标记前缀解析为命名空间的对象。</summary>
      <param name="typeNameList">一个字符串，包含多个类型。 请参阅“备注”。</param>
      <param name="namespaceResolver">对象或服务提供程序实现 <see cref="T:System.Xaml.IXamlNamespaceResolver" />。</param>
      <param name="result">Out 参数，其中包含创建 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 如果返回值是 true。</param>
      <returns>true 如果分析成功和 <paramref name="result" /> 包含有用的值; 否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeNameList" /> 或 <paramref name="namespaceResolver" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.Schema.XamlTypeTypeConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定指定类型的对象是否可以转换为的一个实例 <see cref="T:System.Xaml.XamlType" />, ，使用指定的上下文。</summary>
      <param name="context">提供有关从中调用此转换器的环境的信息的一种格式上下文。</param>
      <param name="sourceType">计算用于转换类型。</param>
      <returns>true 如果该转换器能够执行该操作;否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定实例是否 <see cref="T:System.Xaml.XamlType" /> 可以转换为指定的类型，使用指定的上下文。</summary>
      <param name="context">提供有关从中调用此转换器的环境的信息的一种格式上下文。</param>
      <param name="destinationType">计算用于转换类型。</param>
      <returns>true 如果该转换器能够执行该操作;否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>尝试将转换指定的对象与 <see cref="T:System.Xaml.XamlType" />, ，使用指定的上下文。</summary>
      <param name="context">提供有关从中调用此转换器的环境的信息的一种格式上下文。</param>
      <param name="culture">区域性特定信息。</param>
      <param name="value">要转换的对象。</param>
      <returns>被转换的对象。</returns>
      <exception cref="T:System.NotSupportedException">无法转换 <paramref name="value" />。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>尝试将转换 <see cref="T:System.Xaml.XamlType" /> 到指定的类型，使用指定的上下文。</summary>
      <param name="context">提供有关从中调用此转换器的环境的信息的一种格式上下文。</param>
      <param name="culture">区域性特定信息。</param>
      <param name="value">要转换的对象。</param>
      <param name="destinationType">对象要转换为的类型。</param>
      <returns>被转换的对象。</returns>
      <exception cref="T:System.NotSupportedException">无法转换 <paramref name="value" />。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.#ctor(System.Type,System.Xaml.XamlType)">
      <summary>新实例初始化 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 类，基于转换器实现 <see cref="T:System.Type" /> 和目标类型的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</summary>
      <param name="converterType">
        <see cref="T:System.Type" /> 实现转换器行为。</param>
      <param name="targetType">目标 <see cref="T:System.Xaml.XamlType" /> 的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.#ctor(System.Type,System.Xaml.XamlType,System.String)">
      <summary>新实例初始化 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 类，基于转换器实现 <see cref="T:System.Type" /> 的目标类型 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />, ，以及一个字符串值。</summary>
      <param name="converterType">
        <see cref="T:System.Type" /> 实现转换器行为。</param>
      <param name="targetType">目标 <see cref="T:System.Xaml.XamlType" /> 的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</param>
      <param name="name">字符串名称。</param>
      <exception cref="T:System.ArgumentException">所有三个参数都是 null （至少一个需要为非 null）。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.CreateInstance">
      <summary>返回转换器实现的一个实例。</summary>
      <returns>转换器实现的实例或 null。</returns>
      <exception cref="T:System.Xaml.XamlSchemaException">转换器未实现正确的基类型。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.Equals(System.Object)">
      <summary>确定是否的此实例 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 与指定的对象，还必须是 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 对象，具有相同的值。</summary>
      <param name="obj">要比较的对象。</param>
      <returns>如果 true 是一个 <paramref name="obj" /> 且其值与此实例相等，则为 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />；否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.Equals(System.Xaml.Schema.XamlValueConverter{`0})">
      <summary>确定是否的此实例 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 以及另一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 对象具有相同的值。</summary>
      <param name="other">
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />  进行比较。</param>
      <returns>如果 true 是一个 <paramref name="other" /> 且其值与此实例相等，则为 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />；否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.GetHashCode">
      <summary>返回此 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 的哈希代码。</summary>
      <returns>整数哈希代码。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.op_Equality(System.Xaml.Schema.XamlValueConverter{`0},System.Xaml.Schema.XamlValueConverter{`0})">
      <summary>确定两个指定的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 对象是否具有相同的值。</summary>
      <param name="converter1">一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 或 null。</param>
      <param name="converter2">一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 或 null。</param>
      <returns>如果 true 的值与 <paramref name="converter1" /> 的值相同，则为 <paramref name="converter2" />；否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.op_Inequality(System.Xaml.Schema.XamlValueConverter{`0},System.Xaml.Schema.XamlValueConverter{`0})">
      <summary>确定两个指定的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 对象是否具有不同的值。</summary>
      <param name="converter1">一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 或 null。</param>
      <param name="converter2">一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 或 null。</param>
      <returns>如果 <paramref name="converter1" /> 的值与 <paramref name="converter2" /> 的值不同，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.ToString">
      <summary>返回 <see cref="T:System.String" /> ，表示此 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</summary>
      <returns>表示此 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.#ctor(System.Xaml.XamlReader)">
      <summary>初始化 <see cref="T:System.Xaml.XamlBackgroundReader" /> 类的新实例。</summary>
      <param name="wrappedReader">
        <see cref="T:System.Xaml.XamlReader" /> 此 <see cref="T:System.Xaml.XamlBackgroundReader" /> 为基础。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wrappedReader" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Xaml.XamlBackgroundReader" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">true 若要释放托管的资源;否则为 false。</param>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.Read">
      <summary>提供来自源的下一步 XAML 节点，如果一个节点可用。</summary>
      <returns>true 如果某个节点可用，则否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.StartThread">
      <summary>创建并启动一个新 <see cref="T:System.Threading.Thread" /> (从构造 <see cref="T:System.Threading.ParameterizedThreadStart" />) 处理的命名的线程 <see cref="T:System.Xaml.XamlReader" />。</summary>
      <exception cref="T:System.InvalidOperationException">该线程已启动。</exception>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.StartThread(System.String)">
      <summary>创建并启动一个新 <see cref="T:System.Threading.Thread" /> (从构造 <see cref="T:System.Threading.ParameterizedThreadStart" />) 处理的命名的线程 <see cref="T:System.Xaml.XamlReader" />。 您指定的线程名称作为参数。</summary>
      <param name="threadName">线程名称。</param>
      <exception cref="T:System.InvalidOperationException">该线程已启动。</exception>
    </member>
    <member name="M:System.Xaml.XamlDeferringLoader.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.XamlDeferringLoader" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlDeferringLoader.Load(System.Xaml.XamlReader,System.IServiceProvider)">
      <summary>延迟模式下，取决于在加载 XAML 内容 <see cref="T:System.Xaml.XamlReader" /> 和服务提供商提供的某些所需的服务。</summary>
      <param name="xamlReader">返回到调用的起始读取 <see cref="M:System.Xaml.XamlDeferringLoader.Save(System.Object,System.IServiceProvider)" />。</param>
      <param name="serviceProvider">服务提供程序所需的服务中。</param>
      <returns>由输入生成的根对象 <see cref="T:System.Xaml.XamlReader" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDeferringLoader.Save(System.Object,System.IServiceProvider)">
      <summary>为延迟加载，请提交一个值。</summary>
      <param name="value">要提交为延迟加载的输入的值。</param>
      <param name="serviceProvider">服务提供程序所需的服务中。</param>
      <returns>XAML 读取器，来获取作为 XAML 节点信息的延迟的值。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String,System.Xaml.XamlType,System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter},System.Xaml.Schema.AllowedMemberLocations)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlDirective" /> 类，同时指定值的每个每个用例值 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <param name="xamlNamespaces">一组 XAML 命名空间，这 <see cref="T:System.Xaml.XamlDirective" /> 可以存在，作为标识符字符串的可枚举集传递。</param>
      <param name="name">标识名称 <see cref="T:System.Xaml.XamlDirective" />。</param>
      <param name="xamlType">备份的 XAML 类型 <see cref="T:System.Xaml.XamlDirective" />。</param>
      <param name="typeConverter">类型转换器此 <see cref="T:System.Xaml.XamlDirective" /> 用于文本语法转换。</param>
      <param name="allowedLocation">值为 <see cref="T:System.Xaml.Schema.AllowedMemberLocations" /> 枚举。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlType" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlDirective.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlDirective" /> 类，同时指定一个名称和一个 XAML 命名空间的值。 仅当您希望或预计时，才使用此签名 <see cref="P:System.Xaml.XamlMember.IsUnknown" /> 报告 true 指令。</summary>
      <param name="xamlNamespace">主 XAML 命名空间，这 <see cref="T:System.Xaml.XamlDirective" /> 可以存在。</param>
      <param name="name">标识名称 <see cref="T:System.Xaml.XamlDirective" />。</param>
    </member>
    <member name="M:System.Xaml.XamlDirective.GetHashCode">
      <summary>返回该对象的哈希代码。</summary>
      <returns>整数哈希代码。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.GetXamlNamespaces">
      <summary>此 XAML 成员都将返回 XAML 命名空间的列表。</summary>
      <returns>XAML 命名空间标识符，以字符串形式的列表。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupCustomAttributeProvider">
      <summary>返回 <see cref="T:System.Reflection.ICustomAttributeProvider" /> 实现。 此实现始终返回 null。</summary>
      <returns>始终返回 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupDeferringLoader">
      <summary>返回 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 对象，它在 XAML 声明的对象的延迟加载过程中使用。 此实现始终返回 null。</summary>
      <returns>始终返回 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupDependsOn">
      <summary>返回的列表 <see cref="T:System.Xaml.XamlMember" /> 对象。 列表报告的依赖关系的初始化顺序所在相对于此的成员 <see cref="T:System.Xaml.XamlMember" />。 此实现始终返回 null。</summary>
      <returns>始终返回 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupInvoker">
      <summary>返回 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 关联 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>
        <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 此信息 <see cref="T:System.Xaml.XamlMember" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsAmbient">
      <summary>返回是否这 <see cref="T:System.Xaml.XamlMember" /> 报告作为环境属性。</summary>
      <returns>始终返回 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsEvent">
      <summary>返回是否这 <see cref="T:System.Xaml.XamlDirective" /> 表示一个事件。</summary>
      <returns>始终返回 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsReadOnly">
      <summary>返回是否这 <see cref="T:System.Xaml.XamlDirective" /> 表示预期的只读属性。</summary>
      <returns>始终返回 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsReadPublic">
      <summary>返回是否这 <see cref="T:System.Xaml.XamlDirective" /> 表示一个具有公共的属性 get 取值函数。</summary>
      <returns>始终返回 true。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsUnknown">
      <summary>返回是否这 <see cref="T:System.Xaml.XamlDirective" /> 表示不能用于类型和成员解析的支持系统解析的成员。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlDirective" /> 表示不可解析的成员; 否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsWriteOnly">
      <summary>返回是否这 <see cref="T:System.Xaml.XamlDirective" /> 表示预期的只写属性。</summary>
      <returns>始终返回 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsWritePublic">
      <summary>返回是否这 <see cref="T:System.Xaml.XamlDirective" /> 表示一个具有公共的属性 set 取值函数。</summary>
      <returns>始终返回 true。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupTargetType">
      <summary>返回 <see cref="T:System.Xaml.XamlType" /> 类型的其中 <see cref="T:System.Xaml.XamlMember" /> 可以存在。 此实现始终返回 null。</summary>
      <returns>始终返回 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupType">
      <summary>返回 <see cref="T:System.Xaml.XamlType" /> 成员使用的类型。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlType" /> 成员使用的类型。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupTypeConverter">
      <summary>返回与此关联的类型转换器实现 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 实例，它有 <see cref="T:System.ComponentModel.TypeConverter" /> 约束; 或 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupUnderlyingGetter">
      <summary>返回 get 与此关联的访问器 <see cref="T:System.Xaml.XamlDirective" />。 此实现始终返回 null。</summary>
      <returns>始终返回 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupUnderlyingMember">
      <summary>返回 CLR 反射 <see cref="T:System.Reflection.MemberInfo" /> 这与该键相关联 <see cref="T:System.Xaml.XamlDirective" />。 此实现始终返回 null。</summary>
      <returns>始终返回 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupUnderlyingSetter">
      <summary>返回 set 与此关联的访问器 <see cref="T:System.Xaml.XamlDirective" />。 此实现始终返回 null。</summary>
      <returns>始终返回 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.ToString">
      <summary>返回的字符串表示形式 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>字符串表示形式 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor">
      <summary>使用由系统提供的用来描述错误的消息初始化 <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor(System.String)">
      <summary>使用指定的描述错误的消息初始化 <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor(System.Xaml.XamlMember,System.Xaml.XamlType)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 与报表相关的成员和类型信息的类。</summary>
      <param name="member">向报表 XAML 成员标识符。</param>
      <param name="type">报告为父类型的 XAML 类型标识符。</param>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.XamlException" /> 类的新实例。 该实例包含系统提供的描述错误的消息。</summary>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Xaml.XamlException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Xaml.XamlException" /> 类的新实例。 该实例包含指定的描述错误的消息。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方必须确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Xaml.XamlException" /> 类的新实例。 实例包含指定的错误消息和对导致此异常的内部异常的引用。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方必须确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.Xaml.XamlException" /> 类的新实例。 该实例包含指定的错误消息、 内部异常和行信息。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方必须确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">导致当前异常的异常。</param>
      <param name="lineNumber">报告到调试或行信息的使用者的行号。</param>
      <param name="linePosition">要报告给调试或行信息的使用者的行位置。</param>
    </member>
    <member name="M:System.Xaml.XamlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>实现 <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> 并提供对行信息数据序列化支持。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlInternalException.#ctor">
      <summary>使用由系统提供的用来描述错误的消息初始化 <see cref="T:System.Xaml.XamlInternalException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlInternalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Xaml.XamlInternalException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.Xaml.XamlInternalException.#ctor(System.String)">
      <summary>使用指定的描述错误的消息初始化 <see cref="T:System.Xaml.XamlInternalException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。</param>
    </member>
    <member name="M:System.Xaml.XamlInternalException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Xaml.XamlInternalException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlMember" /> 类使用 CLR 类型系统 <see cref="T:System.Reflection.EventInfo" /> 和 <see cref="T:System.Xaml.XamlSchemaContext" />。</summary>
      <param name="eventInfo">CLR 类型系统 <see cref="T:System.Reflection.EventInfo" /> ，它表示的事件成员。</param>
      <param name="schemaContext">
        <see cref="T:System.Xaml.XamlSchemaContext" /> 限定成员的上下文。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlMember" /> 类使用 CLR 类型系统 <see cref="T:System.Reflection.EventInfo" /> 和 <see cref="T:System.Xaml.XamlSchemaContext" />, ，其中包括 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 信息。</summary>
      <param name="eventInfo">CLR 类型系统 <see cref="T:System.Reflection.EventInfo" /> ，它表示的事件成员。</param>
      <param name="schemaContext">
        <see cref="T:System.Xaml.XamlSchemaContext" /> 限定成员的上下文。</param>
      <param name="invoker">
        <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 处理运行时反射的实现调用针对 <see cref="T:System.Xaml.XamlMember" />。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlMember" /> 类使用 CLR 类型系统 <see cref="T:System.Reflection.PropertyInfo" /> 和 <see cref="T:System.Xaml.XamlSchemaContext" />。</summary>
      <param name="propertyInfo">CLR 类型系统 <see cref="T:System.Reflection.PropertyInfo" /> ，它表示的属性成员。</param>
      <param name="schemaContext">
        <see cref="T:System.Xaml.XamlSchemaContext" /> 限定成员的上下文。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlMember" /> 类使用反射 <see cref="T:System.Reflection.PropertyInfo" /> 和 <see cref="T:System.Xaml.XamlSchemaContext" />, ，其中包括 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 信息。</summary>
      <param name="propertyInfo">CLR 类型系统 <see cref="T:System.Reflection.PropertyInfo" /> ，它表示的属性成员。</param>
      <param name="schemaContext">
        <see cref="T:System.Xaml.XamlSchemaContext" /> 限定成员的上下文。</param>
      <param name="invoker">
        <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 处理运行时调用的实现调用针对 <see cref="T:System.Xaml.XamlMember" />。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlMember" /> 类 <see cref="T:System.Xaml.XamlMember" /> 该对象表示可附加属性。</summary>
      <param name="attachablePropertyName">可附加属性的字符串名称。</param>
      <param name="getter">CLR 类型系统 <see cref="T:System.Reflection.MethodInfo" /> 为 get 可附加的成员的访问器的支持实现。</param>
      <param name="setter">CLR 类型系统 <see cref="T:System.Reflection.MethodInfo" /> 为 set 可附加的成员的访问器的支持实现。</param>
      <param name="schemaContext">
        <see cref="T:System.Xaml.XamlSchemaContext" /> 限定成员的上下文。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlMember" /> 类 <see cref="T:System.Xaml.XamlMember" /> ，它表示可附加属性，包括 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 信息。</summary>
      <param name="attachablePropertyName">可附加属性的字符串名称。</param>
      <param name="getter">CLR 类型系统 <see cref="T:System.Reflection.MethodInfo" /> 为 get 可附加的成员的访问器的支持实现。</param>
      <param name="setter">CLR 类型系统 <see cref="T:System.Reflection.MethodInfo" /> 为 set 可附加的成员的访问器的支持实现。</param>
      <param name="schemaContext">
        <see cref="T:System.Xaml.XamlSchemaContext" /> 限定成员的上下文。</param>
      <param name="invoker">
        <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 处理运行时调用的实现调用针对 <see cref="T:System.Xaml.XamlMember" />。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlMember" /> 类 <see cref="T:System.Xaml.XamlMember" /> 表示附加事件。</summary>
      <param name="attachableEventName">可附加事件的字符串名称。</param>
      <param name="adder">CLR 类型系统 <see cref="T:System.Reflection.MethodInfo" /> 的处理程序 Add 可附加的成员的方法的支持实现。</param>
      <param name="schemaContext">
        <see cref="T:System.Xaml.XamlSchemaContext" /> 限定成员的上下文。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlMember" /> 类 <see cref="T:System.Xaml.XamlMember" /> ，它表示可附加的事件，包括 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 信息。</summary>
      <param name="attachableEventName">可附加事件的字符串名称。</param>
      <param name="adder">CLR 类型系统 <see cref="T:System.Reflection.MethodInfo" /> 的处理程序 Add 可附加的成员的方法的支持实现。</param>
      <param name="schemaContext">
        <see cref="T:System.Xaml.XamlSchemaContext" /> 限定成员的上下文。</param>
      <param name="invoker">
        <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 处理运行时调用的实现调用针对 <see cref="T:System.Xaml.XamlMember" />。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlMember" /> 类使用的字符串名称和声明 <see cref="T:System.Xaml.XamlType" /> 信息。 一个 <see cref="T:System.Xaml.XamlMember" /> 构造与此签名具有明显的限制; 请参阅备注。</summary>
      <param name="name">成员的字符串名称。</param>
      <param name="declaringType">
        <see cref="T:System.Xaml.XamlType" /> 声明类型的信息。</param>
      <param name="isAttachable">true 若要指示该成员是可附加;否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 或 <paramref name="declaringType" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlMember.Equals(System.Object)">
      <summary>指示当前对象是否等于另一个对象。</summary>
      <param name="obj">要与此对象进行比较的对象。</param>
      <returns>如果当前对象等于 <paramref name="obj" /> 参数，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)">
      <summary>指示当前对象是否等于同一类型的另一个对象。</summary>
      <param name="other">一个与此对象进行比较的对象。</param>
      <returns>如果当前对象等于 <paramref name="other" /> 参数，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.GetHashCode">
      <summary>返回该对象的哈希代码。</summary>
      <returns>整数哈希代码。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.GetXamlNamespaces">
      <summary>此 XAML 成员都将返回 XAML 命名空间的列表。</summary>
      <returns>以字符串形式的 XAML 命名空间标识符的列表。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupCustomAttributeProvider">
      <summary>派生类中实现时，返回 <see cref="T:System.Reflection.ICustomAttributeProvider" /> 实现。</summary>
      <returns>
        <see cref="T:System.Reflection.ICustomAttributeProvider" /> 实现。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupDeferringLoader">
      <summary>返回 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 对象，它用于延迟加载的 XAML 声明对象。</summary>
      <returns>一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 具有 <see cref="T:System.Xaml.XamlDeferringLoader" /> 泛型约束。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupDependsOn">
      <summary>返回的列表 <see cref="T:System.Xaml.XamlMember" /> 对象。 项目列表中的报告的依赖关系的初始化顺序所在相对于此的成员 <see cref="T:System.Xaml.XamlMember" />。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlMember" /> 对象的列表。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupInvoker">
      <summary>返回 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 这与该键相关联 <see cref="T:System.Xaml.XamlMember" />。</summary>
      <returns>
        <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 此信息 <see cref="T:System.Xaml.XamlMember" />; 或 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsAmbient">
      <summary>返回是否这 <see cref="T:System.Xaml.XamlMember" /> 报告作为环境属性。</summary>
      <returns>true 若要将此错误报告 <see cref="T:System.Xaml.XamlMember" /> 作为环境属性; 否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsEvent">
      <summary>返回是否这 <see cref="T:System.Xaml.XamlMember" /> 表示一个事件。</summary>
      <returns>true 报告该 <see cref="T:System.Xaml.XamlMember" /> 表示一个事件; 否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsReadOnly">
      <summary>返回是否这 <see cref="T:System.Xaml.XamlMember" /> 表示预期的只读属性。</summary>
      <returns>true 若要将此错误报告 <see cref="T:System.Xaml.XamlMember" /> 为预期的只读属性; 否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsReadPublic">
      <summary>返回是否这 <see cref="T:System.Xaml.XamlMember" /> 表示一个具有公共的属性 get 取值函数。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlMember" /> 表示一个具有公共的属性 get 访问器; 否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsUnknown">
      <summary>返回是否这 <see cref="T:System.Xaml.XamlMember" /> 表示不能用于类型和成员解析的支持系统解析的成员。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlMember" /> 表示不可解析的成员; 否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsWriteOnly">
      <summary>返回是否这 <see cref="T:System.Xaml.XamlMember" /> 表示具有公共成员 set 访问而没有公共 get 取值函数。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlMember" /> 表示一个只写的成员; 否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsWritePublic">
      <summary>返回是否这 <see cref="T:System.Xaml.XamlMember" /> 表示具有公共成员 set 取值函数。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlMember" /> 表示一个可写的成员; 否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupTargetType">
      <summary>返回 <see cref="T:System.Xaml.XamlType" /> 类型的其中 <see cref="T:System.Xaml.XamlMember" /> 可以存在。</summary>
      <returns>类型其中 <see cref="T:System.Xaml.XamlMember" /> 可以存在。 请参阅“备注”。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupType">
      <summary>返回 <see cref="T:System.Xaml.XamlType" /> 成员使用的类型。 请参阅“备注”。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlType" /> 成员使用的类型。 请参阅“备注”。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupTypeConverter">
      <summary>返回与此关联的类型转换器实现 <see cref="T:System.Xaml.XamlMember" />。</summary>
      <returns>一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 实例与 <see cref="T:System.ComponentModel.TypeConverter" /> 约束; 或 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
      <summary>返回 get 与此关联的访问器 <see cref="T:System.Xaml.XamlMember" />。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> 关联 get 访问器; 或 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupUnderlyingMember">
      <summary>返回的 CLR 类型系统 <see cref="T:System.Reflection.MemberInfo" /> 这与该键相关联 <see cref="T:System.Xaml.XamlMember" />。</summary>
      <returns>CLR 类型系统 <see cref="T:System.Reflection.MemberInfo" /> 对象，它是与此关联 <see cref="T:System.Xaml.XamlMember" />; 或 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupUnderlyingSetter">
      <summary>返回 set 与此关联的访问器 <see cref="T:System.Xaml.XamlMember" />。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> 关联 set 访问器; 或 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupValueSerializer">
      <summary>返回与此关联的值序列化程序实现 <see cref="T:System.Xaml.XamlMember" />。</summary>
      <returns>一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 实例与 <see cref="T:System.Windows.Markup.ValueSerializer" /> 约束，或 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
      <summary>确定两个指定的 <see cref="T:System.Xaml.XamlMember" /> 对象是否具有相同的值。</summary>
      <param name="xamlMember1">
        <see cref="T:System.Xaml.XamlMember" /> 或 null。</param>
      <param name="xamlMember2">
        <see cref="T:System.Xaml.XamlMember" /> 或 null。</param>
      <returns>如果 true 的值与 <paramref name="xamlMember1" /> 的值相同，则为 <paramref name="xamlMember2" />；否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
      <summary>确定两个指定 <see cref="T:System.Xaml.XamlMember" /> 对象具有不同的值。</summary>
      <param name="xamlMember1">
        <see cref="T:System.Xaml.XamlMember" /> 或 null。</param>
      <param name="xamlMember2">
        <see cref="T:System.Xaml.XamlMember" /> 或 null。</param>
      <returns>true 如果值 <paramref name="xamlMember1" /> 值不同于的 <paramref name="xamlMember2" />; 否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.ToString">
      <summary>返回的字符串表示形式 <see cref="T:System.Xaml.XamlMember" />。</summary>
      <returns>字符串表示形式 <see cref="T:System.Xaml.XamlMember" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlNodeList.#ctor(System.Xaml.XamlSchemaContext)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlNodeList" /> 类，使用提供的架构上下文。</summary>
      <param name="schemaContext">要用于节点操作的架构上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlNodeList.#ctor(System.Xaml.XamlSchemaContext,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlNodeList" /> 类，使用提供的架构上下文和列表大小。</summary>
      <param name="schemaContext">要用于节点操作的架构上下文。</param>
      <param name="size">目标的项的计数的列表。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlNodeList.Clear">
      <summary>清除此列表中的项。</summary>
    </member>
    <member name="M:System.Xaml.XamlNodeList.GetReader">
      <summary>返回 XAML 读取器实现委托。</summary>
      <returns>XAML 读取器实现委托。</returns>
      <exception cref="T:System.Xaml.XamlException">
        <see cref="T:System.Xaml.XamlNodeList" /> 仍在写入模式。- 或 -用于节点列表是编写器已经没有架构上下文。</exception>
    </member>
    <member name="M:System.Xaml.XamlNodeQueue.#ctor(System.Xaml.XamlSchemaContext)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlNodeQueue" /> 类使用提供的 XAML 架构上下文。</summary>
      <param name="schemaContext">要用于节点操作的架构上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlSchemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectEventArgs.#ctor(System.Object)">
      <summary>初始化 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 类的新实例。</summary>
      <param name="instance">与事件数据相关的对象实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.#ctor(System.Object)">
      <summary>初始化 <see cref="T:System.Xaml.XamlObjectReader" /> 类的新实例。</summary>
      <param name="instance">对象树的根对象图形上以读取 /。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.#ctor(System.Object,System.Xaml.XamlObjectReaderSettings)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlObjectReader" /> 类具有指定的读取器设置。</summary>
      <param name="instance">要读取的对象树的根。</param>
      <param name="settings">一个设置对象。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.#ctor(System.Object,System.Xaml.XamlSchemaContext)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlObjectReader" /> 具有指定的架构上下文类。</summary>
      <param name="instance">要读取的对象树的根。</param>
      <param name="schemaContext">要使用的读取器架构上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.#ctor(System.Object,System.Xaml.XamlSchemaContext,System.Xaml.XamlObjectReaderSettings)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlObjectReader" /> 用指定的架构上下文和读取器设置的类。</summary>
      <param name="instance">要读取的对象树的根。</param>
      <param name="schemaContext">要使用的读取器架构上下文。</param>
      <param name="settings">一个设置对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.Read">
      <summary>提供源对象图中的下一步 XAML 节点，如果一个节点可用。</summary>
      <returns>true 如果某个节点可用，则否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderException.#ctor">
      <summary>使用由系统提供的用来描述错误的消息初始化 <see cref="T:System.Xaml.XamlObjectReaderException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Xaml.XamlObjectReaderException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderException.#ctor(System.String)">
      <summary>使用指定的描述错误的消息初始化 <see cref="T:System.Xaml.XamlObjectReaderException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Xaml.XamlObjectReaderException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderSettings.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.XamlObjectReaderSettings" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlObjectWriter" /> 类使用的 XAML 架构上下文 <see cref="T:System.Xaml.XamlReader" />。</summary>
      <param name="schemaContext">与 XAML 读取器共享的 XAML 架构上下文提供节点以进行写入。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext,System.Xaml.XamlObjectWriterSettings)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlObjectWriter" /> 类使用的上下文，它由 <see cref="T:System.Xaml.XamlReader" /> 及其设置。</summary>
      <param name="schemaContext">与 XAML 读取器共享的 XAML 架构上下文提供节点以进行写入。</param>
      <param name="settings">指定的某些选项将设置对象 <see cref="T:System.Xaml.XamlObjectWriter" /> 行为和输出。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.Clear">
      <summary>重置所有可能的框架，并清除对象图。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.Dispose(System.Boolean)">
      <summary>释放使用的非托管的资源 <see cref="T:System.Xaml.XamlObjectWriter" />, ，并可以选择释放托管的资源。</summary>
      <param name="disposing">为 true 则释放托管资源；否则为 false。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnAfterBeginInit(System.Object)">
      <summary>调用任何 <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler" /> 与相关联的方法 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 此 <see cref="T:System.Xaml.XamlObjectWriter" />。</summary>
      <param name="value">要报告的对象。 该对象封装到 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 何时调用该处理程序。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnAfterEndInit(System.Object)">
      <summary>调用任何 <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler" /> 与相关联的方法 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 此 <see cref="T:System.Xaml.XamlObjectWriter" />。</summary>
      <param name="value">要报告的对象。 值打包到 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 何时调用该处理程序。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnAfterProperties(System.Object)">
      <summary>调用任何 <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler" /> 引用与相关联的方法 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 此 <see cref="T:System.Xaml.XamlObjectWriter" />。</summary>
      <param name="value">要报告的对象。 此对象封装在 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 何时调用该处理程序。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnBeforeProperties(System.Object)">
      <summary>调用任何 <see cref="P:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler" /> 引用与相关联的方法 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 此 <see cref="T:System.Xaml.XamlObjectWriter" />。</summary>
      <param name="value">要传递的值 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 何时调用该处理程序。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)">
      <summary>调用任何 <see cref="P:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler" /> 引用与相关联的方法 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 为此编写器，只要 <paramref name="handled" /> 中 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> 事件数据不是 true。</summary>
      <param name="eventSender">报告为该处理程序的源对象。</param>
      <param name="member">作为的一部分传递到处理程序的名称的属性来设置， <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" />。</param>
      <param name="value">要提供由命名的属性的值 <paramref name="property" />。 值作为的一部分传递到处理程序 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" />。</param>
      <returns>一个布尔值，将由任何关联的处理程序;否则为 false。 请参阅“备注”。</returns>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.SetLineInfo(System.Int32,System.Int32)">
      <summary>实现 <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /> ，并提供有关异常的行信息。</summary>
      <param name="lineNumber">从读取器的行号。</param>
      <param name="linePosition">读取器中的行位置。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteEndMember">
      <summary>关闭当前成员范围内，并关闭时，可以编写成员范围的值。 新范围将成为父对象作用域的成员。</summary>
      <exception cref="T:System.Xaml.XamlObjectWriterException">无法从遇到此调用和前一个之间的值节点创建成员值 StartMember。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteEndObject">
      <summary>关闭当前编写器中的对象范围。 新的对象范围将成为父成员作用域。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteGetObject">
      <summary>写入的概念 StartObject 对象关系图时指定的对象是默认值或父属性的隐式值。 隐式值来自于从 XAML 架构上下文获取的信息和后备类型信息，而不是指定为输入 XAML 节点集中的一个对象值。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
      <summary>定义适用于下一个对象的作用域或成员作用域的命名空间声明。</summary>
      <param name="namespaceDeclaration">要写入的命名空间声明。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="namespaceDeclaration" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">一个组件 <paramref name="namespaceDeclaration" /> 是 null。</exception>
      <exception cref="T:System.Xaml.XamlObjectReaderException">尝试编写无效的作用域中的 XAML 命名空间节点。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
      <summary>将新的成员节点写入当前对象的作用域，并且该范围将成为新的成员范围。</summary>
      <param name="property">要编写的 XAML 属性。 通常您可从 XAML 读取器通过 XAML 节点流中间获得此值。</param>
      <exception cref="T:System.Xaml.XamlObjectWriterException">
        <paramref name="property" /> 具有 <see cref="P:System.Xaml.XamlMember.IsUnknown" /> 设置为 true。- 或 -<see cref="P:System.Xaml.XamlLanguage.UnknownContent" /> 传递，指示 XAML 节点流包含一个对象，不支持内容的内容。- 或 -尝试在无效的作用域中写入的启动成员。</exception>
      <exception cref="T:System.Xaml.XamlDuplicateMemberException">
        <paramref name="property" /> 指定在父对象的作用域中已显式设置的属性。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)">
      <summary>将一个对象节点写入到当前作用域，并将作用域设置为新的对象范围。</summary>
      <param name="xamlType">要写入的类型。 通常您可从 XAML 读取器获得此值。</param>
      <exception cref="T:System.Xaml.XamlObjectWriterException">处理 <see cref="P:System.Xaml.XamlType.IsUnknown" /> 键入并不能创建一个对象。- 或 -尝试在无效的作用域中写入的起始对象。</exception>
      <exception cref="T:System.Xaml.XamlParseException">尝试写入根对象时设置中已提供根对象。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlType" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteValue(System.Object)">
      <summary>将值写入当前成员作用域。 如果当前作用域在内部集合、 字典或数组对象，则值应添加到集合、 字典或数组中。</summary>
      <param name="value">要写入的值。</param>
      <exception cref="T:System.Xaml.XamlObjectWriterException">尝试在无效的作用域中写入一个值。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterException.#ctor">
      <summary>使用由系统提供的用来描述错误的消息初始化 <see cref="T:System.Xaml.XamlObjectWriterException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Xaml.XamlObjectWriterException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterException.#ctor(System.String)">
      <summary>使用指定的描述错误的消息初始化 <see cref="T:System.Xaml.XamlObjectWriterException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Xaml.XamlObjectWriterException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterSettings.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterSettings.#ctor(System.Xaml.XamlObjectWriterSettings)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 基于现有实例的副本的类。</summary>
      <param name="settings">要复制的设置实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="settings" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlParseException.#ctor">
      <summary>使用由系统提供的用来描述错误的消息初始化 <see cref="T:System.Xaml.XamlParseException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Xaml.XamlParseException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.Xaml.XamlParseException.#ctor(System.String)">
      <summary>使用指定的描述错误的消息初始化 <see cref="T:System.Xaml.XamlParseException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.Xaml.XamlParseException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Xaml.XamlParseException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="M:System.Xaml.XamlReader.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.XamlReader" /> 类。</summary>
    </member>
    <member name="M:System.Xaml.XamlReader.Close">
      <summary>关闭 XAML 节点流。</summary>
    </member>
    <member name="M:System.Xaml.XamlReader.Dispose(System.Boolean)">
      <summary>释放使用的非托管的资源 <see cref="T:System.Xaml.XamlReader" />, ，并可以选择释放托管的资源。</summary>
      <param name="disposing">为 true 则释放托管资源；否则为 false。</param>
    </member>
    <member name="M:System.Xaml.XamlReader.Read">
      <summary>派生类中实现时，提供来自源的下一步 XAML 节点，如果一个节点可用。</summary>
      <returns>true 如果某个节点可用，则否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlReader.ReadSubtree">
      <summary>返回 <see cref="T:System.Xaml.XamlReader" /> 基于当前 <see cref="T:System.Xaml.XamlReader" />, ，其中返回 <see cref="T:System.Xaml.XamlReader" /> 用于遍历 XAML 节点结构的子树。</summary>
      <returns>新 XAML 读取器实例的子树。</returns>
    </member>
    <member name="M:System.Xaml.XamlReader.Skip">
      <summary>将跳过当前节点并前进到下一个节点的读取器位置。</summary>
    </member>
    <member name="M:System.Xaml.XamlReader.System#IDisposable#Dispose">
      <summary>释放 <see cref="T:System.Xaml.XamlReader" /> 类的当前实例所使用的所有资源。</summary>
    </member>
    <member name="M:System.Xaml.XamlReaderSettings.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.XamlReaderSettings" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlReaderSettings.#ctor(System.Xaml.XamlReaderSettings)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlReaderSettings" /> 类基于在另一个的值 <see cref="T:System.Xaml.XamlReaderSettings" /> 对象。</summary>
      <param name="settings">一个现有的 <see cref="T:System.Xaml.XamlReaderSettings" /> 对象。</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.XamlSchemaContext" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlSchemaContext" /> 基于一组引用程序集的类。</summary>
      <param name="referenceAssemblies">程序集信息项的可枚举集合。 指定每个程序集信息项 <see cref="T:System.Reflection.Assembly" /> 值。</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Xaml.XamlSchemaContextSettings)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlSchemaContext" /> 基于一组引用程序集和设置对象的类。</summary>
      <param name="referenceAssemblies">程序集信息的可枚举集合。 指定每个程序集信息项 <see cref="T:System.Reflection.Assembly" /> 值。</param>
      <param name="settings">设置对象，用于构造 <see cref="T:System.Xaml.XamlSchemaContext" />。</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.#ctor(System.Xaml.XamlSchemaContextSettings)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlSchemaContext" /> 类，基于设置对象。</summary>
      <param name="settings">设置对象，用于构造 <see cref="T:System.Xaml.XamlSchemaContext" />。</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.Finalize">
      <summary>提供一个非标准 Finalize 实现，它不会调用 Dispose。</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetAllXamlNamespaces">
      <summary>搜索由此持有的程序集 <see cref="T:System.Xaml.XamlSchemaContext" /> ，并返回一组命名空间。</summary>
      <returns>命名空间标识符可枚举集合。 这些标识符以字符串形式提供。</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetAllXamlTypes(System.String)">
      <summary>搜索由此持有的程序集 <see cref="T:System.Xaml.XamlSchemaContext" /> 和返回类型的集合，从指定的 XAML 命名空间。</summary>
      <param name="xamlNamespace">要返回的类型的 XAML 命名空间。</param>
      <returns>XAML 类型的可枚举集合。 在集中的每个 XAML 类型由 <see cref="T:System.Xaml.XamlType" /> 对象。</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetPreferredPrefix(System.String)">
      <summary>获取被报告为使用者使用这些属性映射指定的 XAML 命名空间时的首选前缀的字符串。</summary>
      <param name="xmlns">要获取的首选的前缀的 XAML 命名空间。</param>
      <returns>一个字符串，它们映射为标记指定的 XAML 命名空间时，应使用使用者使用。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlns" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetValueConverter``1(System.Type,System.Xaml.XamlType)">
      <summary>返回可以将转换为所请求的值转换器 <paramref name="targetType" />。</summary>
      <param name="converterType">转换器实现。</param>
      <param name="targetType">转换器所需的目标类型。</param>
      <typeparam name="TConverterBase">特定转换器基类。</typeparam>
      <returns>一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 匹配放在方法调用的约束的约束。</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetXamlDirective(System.String,System.String)">
      <summary>返回 <see cref="T:System.Xaml.XamlDirective" /> 值，该值表示指令，为 XAML 语言或特定的实现。</summary>
      <param name="xamlNamespace">包含命名的指令的 XAML 命名空间。</param>
      <param name="name">要获取的指令的名称。</param>
      <returns>一个 <see cref="T:System.Xaml.XamlDirective" /> 表示请求的指令的对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlNamespace" /> 或 <paramref name="name" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetXamlType(System.String,System.String,System.Xaml.XamlType[])">
      <summary>返回 <see cref="T:System.Xaml.XamlType" /> 基于 XAML 命名空间和类型名称的字符串。 此签名可以指定的类型参数的情况下所需的类型是泛型类型。</summary>
      <param name="xamlNamespace">包含所需的类型的 XAML 命名空间。</param>
      <param name="name">所需类型的字符串名称。</param>
      <param name="typeArguments">泛型类型初始化类型参数。</param>
      <returns>
        <see cref="T:System.Xaml.XamlType" /> 与输入的条件相匹配。</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetXamlType(System.Type)">
      <summary>返回 <see cref="T:System.Xaml.XamlType" /> 基于 CLR 类型标识符。</summary>
      <param name="type">要获取的类型 <see cref="T:System.Xaml.XamlType" /> 有关。</param>
      <returns>
        <see cref="T:System.Xaml.XamlType" /> 匹配输入 <paramref name="type" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetXamlType(System.Xaml.Schema.XamlTypeName)">
      <summary>返回 <see cref="T:System.Xaml.XamlType" /> 基于 XAML 系统类型名称。</summary>
      <param name="xamlTypeName">要获取的 XAML 类型名称 <see cref="T:System.Xaml.XamlType" /> 有关。</param>
      <returns>
        <see cref="T:System.Xaml.XamlType" /> 匹配输入 <paramref name="xamlTypeName" />。</returns>
      <exception cref="T:System.ArgumentException">一个组件 <paramref name="xamlTypeName" /> (<see cref="P:System.Xaml.Schema.XamlTypeName.Name" /> 或 <see cref="P:System.Xaml.Schema.XamlTypeName.Namespace" />) 是 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlTypeName" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.OnAssemblyResolve(System.String)">
      <summary>当操作使用此架构上下文来解决需要解析的 XAML 命名空间，它所包含的程序集时调用。</summary>
      <param name="assemblyName">要加载的程序集的名称。 请参阅“备注”。</param>
      <returns>解析程序集。</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace(System.String,System.String@)">
      <summary>返回对兼容的 XAML 命名空间的请求成功与否。 成功的请求作为输出参数将报告该 XAML 命名空间。</summary>
      <param name="xamlNamespace">xmlns 要检查是否存在兼容结果的 XAML 命名空间的字符串。</param>
      <param name="compatibleNamespace">此方法返回时， xmlns 兼容的 XAML 命名空间请求字符串。 这可能是等于 <paramref name="xamlNamespace" /> 如果该方法返回 false。</param>
      <returns>true 如果 <paramref name="compatibleNamespace" /> 包含可用的结果; 否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlNamespace" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlSchemaContextSettings.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.XamlSchemaContextSettings" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaContextSettings.#ctor(System.Xaml.XamlSchemaContextSettings)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlSchemaContextSettings" /> 通过复制现有的值类 <see cref="T:System.Xaml.XamlSchemaContextSettings" /> 实例。</summary>
      <param name="settings">现有 <see cref="T:System.Xaml.XamlSchemaContextSettings" />。</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaException.#ctor">
      <summary>使用由系统提供的用来描述错误的消息初始化 <see cref="T:System.Xaml.XamlSchemaException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Xaml.XamlSchemaException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaException.#ctor(System.String)">
      <summary>使用指定的描述错误的消息初始化 <see cref="T:System.Xaml.XamlSchemaException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Xaml.XamlSchemaException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.IO.Stream)">
      <summary>加载 <see cref="T:System.IO.Stream" /> XAML 读取器的源，然后将其输出为一个对象图。</summary>
      <param name="stream">要加载作为输入的流。</param>
      <returns>作为输出写入对象关系图。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.IO.TextReader)">
      <summary>创建从一个 XAML 读取器 <see cref="T:System.IO.TextReader" />, ，并返回一个对象关系图。</summary>
      <param name="textReader">
        <see cref="T:System.IO.TextReader" /> 要用于为基础创建 <see cref="T:System.Xml.XmlReader" />。</param>
      <returns>返回对象关系图。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textReader" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.String)">
      <summary>加载 <see cref="T:System.IO.Stream" /> XAML 读取器的源，并返回对象图。</summary>
      <param name="fileName">要加载，并使用作为源的文件名称。</param>
      <returns>返回对象关系图。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 输入是 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.Xaml.XamlReader)">
      <summary>加载特定的 XAML 读取器实现，并返回一个对象关系图。</summary>
      <param name="xamlReader">要用作此读取器的 XAML 读取器实现 Load 操作。</param>
      <returns>返回对象关系图。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlReader" /> 输入是 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.Xml.XmlReader)">
      <summary>加载特定的 XML 读取器实现，并返回一个对象关系图。</summary>
      <param name="xmlReader">
        <see cref="T:System.Xml.XmlReader" /> 实现，以用作此读取器 Load 操作。</param>
      <returns>输出对象关系图。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlReader" /> 输入是 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Parse(System.String)">
      <summary>读取作为字符串输出的 XAML 并返回一个对象关系图。</summary>
      <param name="xaml">要分析的 XAML 字符串输入。</param>
      <returns>返回对象关系图。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xaml" /> 输入是 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.IO.Stream,System.Object)">
      <summary>提供的对象图处理 XAML 节点表示形式插入，然后再进行序列化的输出流。</summary>
      <param name="stream">目标流。</param>
      <param name="instance">要处理的对象关系图的根。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 输入是 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.IO.TextWriter,System.Object)">
      <summary>处理提供的对象图，为 XAML 节点表示形式，然后再将转到所提供的输出到 <see cref="T:System.IO.TextWriter" />。</summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> 写入输出。</param>
      <param name="instance">要处理的对象关系图的根。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 输入是 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.Object)">
      <summary>处理提供的对象树为 XAML 节点表示形式，并返回的字符串表示形式的输出 XAML。</summary>
      <param name="instance">要处理的对象关系图的根。</param>
      <returns>将 XAML 标记输出作为一个字符串。</returns>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.String,System.Object)">
      <summary>提供的对象图处理为 XAML 节点表示形式，然后将其写入提供的位置处的输出文件。</summary>
      <param name="fileName">名称和要将输出写入到文件的位置。</param>
      <param name="instance">要处理的对象关系图的根。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fileName" /> 是一个空字符串。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.Xaml.XamlWriter,System.Object)">
      <summary>提供的对象图处理为 XAML 节点表示形式，然后将其写入提供的 XAML 编写器。</summary>
      <param name="writer">
        <see cref="T:System.Xaml.XamlWriter" /> 要使用的实现。</param>
      <param name="instance">要处理的对象关系图的根。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 输入是 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.Xml.XmlWriter,System.Object)">
      <summary>处理提供的对象图为 XAML 节点表示形式，然后将其写入提供 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> 要使用的实现。</param>
      <param name="instance">要处理的对象关系图的根。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 输入是 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter)">
      <summary>连接 <see cref="T:System.Xaml.XamlReader" /> 和 <see cref="T:System.Xaml.XamlWriter" /> 使用常见的 XAML 节点集。 可能会转换的内容，具体取决于读取器和编写器所提供的类型。</summary>
      <param name="xamlReader">
        <see cref="T:System.Xaml.XamlReader" /> 要使用的实现。</param>
      <param name="xamlWriter">要使用的 <see cref="T:System.Xaml.XamlWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlReader" /> 或 <paramref name="xamlWriter" /> 输入是 null。</exception>
      <exception cref="T:System.Xaml.XamlException">之间所提供的 XAML 架构上下文不匹配 <paramref name="xamlReader" /> 和 <paramref name="xamlWriter" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter,System.Boolean)">
      <summary>连接 <see cref="T:System.Xaml.XamlReader" /> 和 <see cref="T:System.Xaml.XamlWriter" /> 使用常见的 XAML 节点集。 可能会转换的内容，具体取决于读取器和编写器所提供的类型。 提供一个参数，指定是否在调用完成后，关闭编写器。</summary>
      <param name="xamlReader">
        <see cref="T:System.Xaml.XamlReader" /> 要使用的实现。</param>
      <param name="xamlWriter">要使用的 <see cref="T:System.Xaml.XamlWriter" />。</param>
      <param name="closeWriter">true 在调用后关闭编写器已完成; false 将编写器活动保留的最后一个写入位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlReader" /> 或 <paramref name="xamlWriter" /> 输入是 null。</exception>
      <exception cref="T:System.Xaml.XamlException">之间所提供的 XAML 架构上下文不匹配 <paramref name="xamlReader" /> 和 <paramref name="xamlWriter" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlType" /> 类基于类型的字符串名称。</summary>
      <param name="typeName">要创建的类型的名称。</param>
      <param name="typeArguments">类型参数 <see cref="T:System.Xaml.XamlType" /> 表示泛型类型。 可以 （并且通常是） null, ，指示所表示的类型不是泛型类型。</param>
      <param name="schemaContext">XAML 读取器和 XAML 编写器的 XAML 架构上下文。</param>
      <exception cref="T:System.ArgumentNullException">一个或多个 <paramref name="typeName" /> 或 <paramref name="schemaContext" /> 是 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlType" /> 类基于 XAML 命名空间和类型的字符串名称。 此构造函数是专为分析和 XAML 节点记录已知的支持类型系统和 XAML 架构上下文中没有支持的类型用法。</summary>
      <param name="unknownTypeNamespace">字符串形式的类型的 XAML 命名空间。</param>
      <param name="unknownTypeName">在提供的类型的名称 <paramref name="unknownTypeNamespace" /> XAML 命名空间。</param>
      <param name="typeArguments">类型参数 <see cref="T:System.Xaml.XamlType" /> 表示泛型类型。 可以 （并且通常是） null, ，指示所表示的类型不是泛型类型。</param>
      <param name="schemaContext">XAML 读取器或 XAML 编写器的 XAML 架构上下文。</param>
      <exception cref="T:System.ArgumentNullException">一个或多个 <paramref name="unknownTypeNamespace" />, ，<paramref name="unknownTypeName" />, ，或 <paramref name="schemaContext" /> 是 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlType" /> 类根据基础 CLR 类型信息。</summary>
      <param name="underlyingType">基础 CLR <see cref="T:System.Type" /> XAML 类型构造。</param>
      <param name="schemaContext">XAML 读取器或 XAML 编写器的 XAML 架构上下文。</param>
      <exception cref="T:System.ArgumentNullException">一个或多个 <paramref name="underlyingType" /> 或 <paramref name="schemaContext" /> 是 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlType" /> 类根据基础类型信息和一个 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 实现。</summary>
      <param name="underlyingType">若要构造的 XAML 类型基础类型。</param>
      <param name="schemaContext">XAML 读取器的 XAML 架构上下文。</param>
      <param name="invoker">
        <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 处理运行时反射的实现调用针对 <see cref="T:System.Xaml.XamlType" />。</param>
      <exception cref="T:System.ArgumentNullException">一个或多个 <paramref name="underlyingType" /> 或 <paramref name="schemaContext" /> 是 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
      <summary>返回一个值，该值指示此实例是否 <see cref="T:System.Xaml.XamlType" /> 具有指定 <see cref="T:System.Xaml.XamlType" /> 可赋值的类型列表中。</summary>
      <param name="xamlType">要检查针对当前的类型 <see cref="T:System.Xaml.XamlType" /> 。</param>
      <returns>true 如果 <paramref name="xamlType" /> 位于可分配的类型列表中; 否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.Equals(System.Object)">
      <summary>指示当前对象是否等于另一个对象。</summary>
      <param name="obj">要与此对象进行比较的对象。</param>
      <returns>如果当前对象等于 <paramref name="obj" /> 参数，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.Equals(System.Xaml.XamlType)">
      <summary>指示当前对象是否等于同一类型的另一个对象。</summary>
      <param name="other">一个与此对象进行比较的对象。</param>
      <returns>如果当前对象等于 <paramref name="other" /> 参数，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)">
      <summary>返回已经化名为由此 XAML 指令 XAML 成员 <see cref="T:System.Xaml.XamlType" />。</summary>
      <param name="directive">为其查找别名成员指令。</param>
      <returns>别名成员，如果找到，则否则为 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetAllAttachableMembers">
      <summary>返回集合，其中包含由此公开的所有可附加属性 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>一个集合，包含零个或多 <see cref="T:System.Xaml.XamlMember" /> 值。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetAllMembers">
      <summary>返回集合，其中包含由此公开的所有成员 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>一个集合，包含零个或多 <see cref="T:System.Xaml.XamlMember" /> 值。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetAttachableMember(System.String)">
      <summary>返回 <see cref="T:System.Xaml.XamlMember" /> 表示特定命名可附加成员这 <see cref="T:System.Xaml.XamlType" />。</summary>
      <param name="name">若要获取，在可附加成员的名称 ownerTypeName.MemberName 窗体。</param>
      <returns>一个 <see cref="T:System.Xaml.XamlMember" /> 对象请求的附加成员; 否则为 null, ，如果该名称没有附加成员存在。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetHashCode">
      <summary>返回该对象的哈希代码。</summary>
      <returns>整数哈希代码。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetMember(System.String)">
      <summary>返回 <see cref="T:System.Xaml.XamlMember" /> 特定命名成员从此 <see cref="T:System.Xaml.XamlType" />。</summary>
      <param name="name">要获取 （以字符串形式） 的成员的名称。</param>
      <returns>
        <see cref="T:System.Xaml.XamlMember" /> 信息对于成员，此类成员是否找到; 否则为 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
      <summary>对于标记扩展类型，返回此特定标记扩展用法中支持位置参数的类型 <see cref="T:System.Xaml.XamlType" />。</summary>
      <param name="parameterCount">您要获取其信息的特定语法或构造函数模式计数 (arity)。</param>
      <returns>一份 <see cref="T:System.Xaml.XamlType" /> 值，其中每个 <see cref="T:System.Xaml.XamlType" /> 是语法中的此位置的类型。 提供标记扩展的标记输入时，必须以相同的顺序指定的类型。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetXamlNamespaces">
      <summary>返回类型包含在中的 XAML 命名空间的字符串标识符的列表。</summary>
      <returns>字符串值，其中每个字符串是 XAML 命名空间的 URI 标识符列表。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)">
      <summary>返回已经化名为由此 XAML 指令 XAML 成员 <see cref="T:System.Xaml.XamlType" />。</summary>
      <param name="directive">为其查找别名成员指令。</param>
      <returns>别名成员，如果找到，则否则为 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAllAttachableMembers">
      <summary>返回可枚举集合，其中包含由此公开的所有可附加属性 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>包含零个或更多的可枚举集 <see cref="T:System.Xaml.XamlMember" /> 值; 否则为 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAllMembers">
      <summary>返回包含由此公开的所有成员的可枚举集 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>包含零个或更多的可枚举集 <see cref="T:System.Xaml.XamlMember" /> 值。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAllowedContentTypes">
      <summary>返回的类型可用作列表 <see cref="P:System.Xaml.XamlType.ContentProperty" /> 值这 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>可能的内容类型的列表。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
      <summary>返回 <see cref="T:System.Xaml.XamlMember" /> 特定命名可从此附加 <see cref="T:System.Xaml.XamlType" />。</summary>
      <param name="name">若要获取，在可附加成员的名称 ownerTypeName.MemberName 窗体。</param>
      <returns>一个 <see cref="T:System.Xaml.XamlMember" /> 对象请求的附加成员; 否则为 null, ，如果该名称没有附加成员存在。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupBaseType">
      <summary>返回 <see cref="T:System.Xaml.XamlType" /> 立即此 XAML 类型的基类型。 确定此值取决于此的基础类型 <see cref="T:System.Xaml.XamlType" /> 和架构上下文。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlType" /> 立即此 XAML 类型的基类型。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupCollectionKind">
      <summary>返回的值为 <see cref="T:System.Xaml.Schema.XamlCollectionKind" /> 声明哪种特定集合的枚举类型这 <see cref="T:System.Xaml.XamlType" /> 使用。</summary>
      <returns>值为 <see cref="T:System.Xaml.Schema.XamlCollectionKind" /> 枚举。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupConstructionRequiresArguments">
      <summary>返回一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" /> 必须具有参数 (通过泛型约束 x:TypeArguments, ，初始化文本或其他 XAML 技术) 来构造类型的有效实例。</summary>
      <returns>true 如果构造实例需要一些参数值，则为否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupContentProperty">
      <summary>返回 <see cref="T:System.Xaml.XamlMember" /> 的 content 属性的信息 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlMember" /> 内容属性的信息 <see cref="T:System.Xaml.XamlType" />。 可为 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupContentWrappers">
      <summary>获取一份 <see cref="T:System.Xaml.XamlType" /> 值表示的内容包装此 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>一份 <see cref="T:System.Xaml.XamlType" /> 值表示的内容包装此 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupCustomAttributeProvider">
      <summary>派生类中实现时，返回 <see cref="T:System.Reflection.ICustomAttributeProvider" /> 实现。</summary>
      <returns>
        <see cref="T:System.Reflection.ICustomAttributeProvider" /> 实现。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupDeferringLoader">
      <summary>返回 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 对象，适用于 XAML 声明的对象的延迟加载。</summary>
      <returns>一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 具有 <see cref="T:System.Xaml.XamlDeferringLoader" /> 泛型约束。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupInvoker">
      <summary>返回 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 这与该键相关联 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>
        <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 此信息 <see cref="T:System.Xaml.XamlType" />; 否则为 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsAmbient">
      <summary>返回一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" /> 表示环境类型，根据 XAML 定义的信息。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlType" /> 表示环境类型; 否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsConstructible">
      <summary>返回一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" /> 表示构造的类型，根据 XAML 定义的信息。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlType" /> 表示构造的类型; 否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsMarkupExtension">
      <summary>返回一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" /> 表示标记扩展。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlType" /> 表示标记扩展; 否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsNameScope">
      <summary>返回一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" /> 表示 XAML 名称范围，根据 XAML 定义的信息。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlType" /> 表示 XAML 名称范围; 否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsNullable">
      <summary>返回一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" /> 表示 null 的类型，根据 XAML 定义的信息。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlType" /> 表示可以为 null 的类型; 否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsPublic">
      <summary>返回一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" /> 表示相关类型系统中的公共类型。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlType" /> 表示的公共类型; 否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsUnknown">
      <summary>返回一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" /> 表示的基础类型系统中无法解析的类型。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlType" /> 表示不可解析的类型; 否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection">
      <summary>返回一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" /> 表示空格有意义集合按照 XML 定义。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlType" /> 表示空格有意义的集合; 否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsXData">
      <summary>返回一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" /> 代表 XML XDATA, 、 每个 XAML 定义的信息。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlType" /> 表示 XDATA; 否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupItemType">
      <summary>返回一个值，提供的类型信息 Items 属性 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlType" /> 对象的集合中的项的类型，否则为 null 如果此 <see cref="T:System.Xaml.XamlType" /> 不表示集合。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupKeyType">
      <summary>返回一个值，提供的键属性的类型信息 <see cref="T:System.Xaml.XamlType" />, ，如果 <see cref="T:System.Xaml.XamlType" /> 表示字典。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlType" /> 字典用法键的类型的对象或 null 如果此 <see cref="T:System.Xaml.XamlType" /> 不代表一个字典，</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupMarkupExtensionReturnType">
      <summary>返回一个值，提供对返回的类型信息 ProvideValue 此 <see cref="T:System.Xaml.XamlType" />, ，如果它表示标记扩展。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlType" /> 对象的返回类型为标记扩展用法; 否则为 null, ，如果此 <see cref="T:System.Xaml.XamlType" /> 不表示标记扩展。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
      <summary>返回 <see cref="T:System.Xaml.XamlMember" /> 特定命名成员从此 <see cref="T:System.Xaml.XamlType" />。</summary>
      <param name="name">要获取 （以字符串形式） 的成员的名称。</param>
      <param name="skipReadOnlyCheck">true 若要返回的成员，即使该成员具有 true 值 <see cref="P:System.Xaml.XamlMember.IsReadOnly" />; false 使其不返回 <see cref="P:System.Xaml.XamlMember.IsReadOnly" /> 成员。 默认值为 false。</param>
      <returns>
        <see cref="T:System.Xaml.XamlMember" /> 信息对于成员，如果成员已找到; 否则为 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
      <summary>对于标记扩展类型，返回此特定标记扩展用法中支持位置参数的类型 <see cref="T:System.Xaml.XamlType" />。</summary>
      <param name="parameterCount">您要获取其信息的特定语法或构造函数模式计数 (arity)。</param>
      <returns>一份 <see cref="T:System.Xaml.XamlType" /> 值每个此类 <see cref="T:System.Xaml.XamlType" /> 是语法中的此位置的类型。 提供标记扩展的标记输入时，必须以相同的顺序指定这些类型。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupSetMarkupExtensionHandler">
      <summary>返回用于标记扩展的 set 操作处理程序回调。</summary>
      <returns>要用于标记扩展的 set 操作处理程序回调。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupSetTypeConverterHandler">
      <summary>返回一个处理程序以使用类型转换器设置情况。</summary>
      <returns>若要使用类型转换器设置情况下一个处理程序。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupTrimSurroundingWhitespace">
      <summary>返回一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" /> 应使用一种模式，修整周围空白序列化。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlType" /> 应序列化的模式的修整周围空白; 否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupTypeConverter">
      <summary>返回 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 具有 <see cref="T:System.ComponentModel.TypeConverter" /> 约束，它表示此值的类型转换行为 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 与 <see cref="T:System.ComponentModel.TypeConverter" /> 表示值的类型转换行为的约束 <see cref="T:System.Xaml.XamlType" />; 否则为 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupUnderlyingType">
      <summary>返回 CLR <see cref="T:System.Type" /> 的基础这 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>CLR <see cref="T:System.Type" /> 的基础这 <see cref="T:System.Xaml.XamlType" />; 否则为 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
      <summary>返回一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" /> 自上而下构建 XAML 初始化过程。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlType" /> 自上而下的 XAML 初始化过程中; 否则为生成 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupValueSerializer">
      <summary>返回 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 具有 <see cref="T:System.Windows.Markup.ValueSerializer" /> 约束，它表示此值的值序列化行为 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 与 <see cref="T:System.Windows.Markup.ValueSerializer" /> 表示的值的值序列化行为的约束 <see cref="T:System.Xaml.XamlType" />; 否则为 null。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)">
      <summary>确定两个指定的 <see cref="T:System.Xaml.XamlType" /> 对象是否具有相同的值。</summary>
      <param name="xamlType1">
        <see cref="T:System.Xaml.XamlType" /> 或 null。</param>
      <param name="xamlType2">
        <see cref="T:System.Xaml.XamlType" /> 或 null。</param>
      <returns>如果 true 的值与 <paramref name="xamlType1" /> 的值相同，则为 <paramref name="xamlType2" />；否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)">
      <summary>确定两个指定 <see cref="T:System.Xaml.XamlType" /> 对象具有不同的值。</summary>
      <param name="xamlType1">
        <see cref="T:System.Xaml.XamlType" /> 或 null。</param>
      <param name="xamlType2">
        <see cref="T:System.Xaml.XamlType" /> 或 null。</param>
      <returns>如果 true 的值与 <paramref name="xamlType1" /> 的值不同，则为 <paramref name="xamlType2" />；否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.ToString">
      <summary>返回的字符串表示形式 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>字符串表示形式 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlWriter.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.XamlWriter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.Close">
      <summary>关闭 XAML 编写器对象。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Xaml.XamlWriter" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">为 true 则释放托管资源；否则为 false。</param>
    </member>
    <member name="M:System.Xaml.XamlWriter.System#IDisposable#Dispose">
      <summary>请参阅<see cref="M:System.IDisposable.Dispose" />.</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteEndMember">
      <summary>派生类中实现时，将生成结束成员节点的表示形式。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteEndObject">
      <summary>派生类中实现时，将生成结束对象节点的表示形式。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteGetObject">
      <summary>派生类中实现时，生成的情况下，该对象的默认值或隐式设置，而不是指定为输入 XAML 节点集中的离散的对象值的属性值的对象。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
      <summary>派生类中实现时，写入 XAML 命名空间声明节点。</summary>
      <param name="namespaceDeclaration">要写入的命名空间声明。</param>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteNode(System.Xaml.XamlReader)">
      <summary>执行交换基于 XAML 读取器中的节点类型 (<see cref="P:System.Xaml.XamlReader.NodeType" />) 并调用相关 Write 编写器实现的方法。</summary>
      <param name="reader">要用于确定节点的读取器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
      <exception cref="T:System.NotImplementedException">默认实现遇到 <see cref="T:System.Xaml.XamlNodeType" /> 不在默认枚举中。</exception>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteStartMember(System.Xaml.XamlMember)">
      <summary>派生类中实现时，将开始成员节点的表示形式写入。</summary>
      <param name="xamlMember">要写入的成员节点。</param>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteStartObject(System.Xaml.XamlType)">
      <summary>派生类中实现时，将启动对象节点的表示形式写入。</summary>
      <param name="type">要写入的对象的 XAML 类型。</param>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteValue(System.Object)">
      <summary>派生类中实现时，写入的值节点。</summary>
      <param name="value">要写入的值。</param>
    </member>
    <member name="M:System.Xaml.XamlWriterSettings.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.XamlWriterSettings" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriterSettings.#ctor(System.Xaml.XamlWriterSettings)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlWriterSettings" /> 类使用另一个现有的设置实例。</summary>
      <param name="settings">一个现有的 <see cref="T:System.Xaml.XamlWriterSettings" /> 对象。</param>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.Stream)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 基于流的类。</summary>
      <param name="stream">要加载到读取器的初始流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.Stream,System.Xaml.XamlSchemaContext)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 类，基于流，并使用提供的 XAML 架构上下文。</summary>
      <param name="stream">要加载到读取器的初始流。</param>
      <param name="schemaContext">XAML 处理 XAML 架构上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.Stream,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlReaderSettings)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 类，基于流，使用提供的 XAML 架构上下文和特定于 XAML 的设置。</summary>
      <param name="stream">要加载到读取器的初始流。</param>
      <param name="schemaContext">XAML 处理 XAML 架构上下文。</param>
      <param name="settings">特定读取器设置中。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.Stream,System.Xaml.XamlXmlReaderSettings)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 类，基于流，XAML 特定的设置。</summary>
      <param name="stream">要加载到读取器的初始流。</param>
      <param name="settings">特定读取器设置中。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.TextReader)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlXmlReader" /> а а µ <see cref="T:System.IO.TextReader" />。</summary>
      <param name="textReader">
        <see cref="T:System.IO.TextReader" /> 要用于初始化。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textReader" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.TextReader,System.Xaml.XamlSchemaContext)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlXmlReader" /> а а µ <see cref="T:System.IO.TextReader" />, 、 使用提供的架构上下文和特定于 XAML 的设置。</summary>
      <param name="textReader">
        <see cref="T:System.IO.TextReader" /> 要用于初始化。</param>
      <param name="schemaContext">XAML 处理 XAML 架构上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textReader" /> 为 null。- 或 -<paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.TextReader,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlReaderSettings)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlXmlReader" /> а а µ <see cref="T:System.IO.TextReader" />, ，并使用提供的架构上下文和特定于 XAML 的设置。</summary>
      <param name="textReader">
        <see cref="T:System.IO.TextReader" /> 要用于初始化。</param>
      <param name="schemaContext">XAML 处理 XAML 架构上下文。</param>
      <param name="settings">特定读取器设置中。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textReader" /> 为 null。- 或 -<paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.TextReader,System.Xaml.XamlXmlReaderSettings)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlXmlReader" /> а а µ <see cref="T:System.IO.TextReader" />, ，并使用 XAML 特定的设置。</summary>
      <param name="textReader">
        <see cref="T:System.IO.TextReader" /> 要用于初始化。</param>
      <param name="settings">特定读取器设置中。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textReader" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 基于要加载到默认 XML 读取器的文件的文件名称的类。</summary>
      <param name="fileName">要加载的 XML 文件的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.String,System.Xaml.XamlSchemaContext)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 基于要加载到默认 XML 读取器与提供的 XAML 架构上下文的文件的文件名的类。</summary>
      <param name="fileName">要加载的文件的名称。</param>
      <param name="schemaContext">XAML 处理 XAML 架构上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 或 <paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.String,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlReaderSettings)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 类，基于要加载到默认 XML 读取器的文件的文件名，并使用提供的 XAML 架构上下文和特定于 XAML 读取器设置。</summary>
      <param name="fileName">要加载的 XML 文件的名称。</param>
      <param name="schemaContext">XAML 处理 XAML 架构上下文。</param>
      <param name="settings">特定读取器设置中。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 为 null。- 或 -<paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.String,System.Xaml.XamlXmlReaderSettings)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 类，基于要加载到默认 XML 读取器的文件的文件名和使用特定于 XAML 读取器设置。</summary>
      <param name="fileName">要加载的 XML 文件的名称。</param>
      <param name="settings">特定读取器设置中。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.Xml.XmlReader)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 类使用所提供 <see cref="T:System.Xml.XmlReader" />。</summary>
      <param name="xmlReader">
        <see cref="T:System.Xml.XmlReader" /> 要用作中间 XML 处理器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlReader" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.Xml.XmlReader,System.Xaml.XamlSchemaContext)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 类使用所提供 <see cref="T:System.Xml.XmlReader" /> 和架构上下文。</summary>
      <param name="xmlReader">
        <see cref="T:System.Xml.XmlReader" /> 要用作中间 XML 处理器。</param>
      <param name="schemaContext">XAML 处理 XAML 架构上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlReader" /> 或 <paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.Xml.XmlReader,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlReaderSettings)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 类使用所提供 <see cref="T:System.Xml.XmlReader" />, ，架构上下文和读取器设置。</summary>
      <param name="xmlReader">
        <see cref="T:System.Xml.XmlReader" /> 要用作中间 XML 处理器。</param>
      <param name="schemaContext">XAML 处理 XAML 架构上下文。</param>
      <param name="settings">特定的 XAML 读取器设置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlReader" /> 或 <paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.Xml.XmlReader,System.Xaml.XamlXmlReaderSettings)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 类，使用所提供 <see cref="T:System.Xml.XmlReader" /> 和读取器设置。</summary>
      <param name="xmlReader">
        <see cref="T:System.Xml.XmlReader" /> 要用作中间 XML 处理器。</param>
      <param name="settings">特定的 XAML 读取器设置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlReader" /> 或 <paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.Read">
      <summary>提供的加载源中的下一步 XAML 节点，如果 XAML 节点可用。</summary>
      <returns>true 如果某个节点可用，则否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlXmlReaderSettings.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.XamlXmlReaderSettings" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlReaderSettings.#ctor(System.Xaml.XamlXmlReaderSettings)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlXmlReaderSettings" /> 类通过将设置从现有复制 <see cref="T:System.Xaml.XamlXmlReaderSettings" /> 对象。</summary>
      <param name="settings">现有 <see cref="T:System.Xaml.XamlXmlReaderSettings" /> 要从中复制对象。</param>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.IO.Stream,System.Xaml.XamlSchemaContext)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlXmlWriter" /> 从流的类。</summary>
      <param name="stream">要写入的流。</param>
      <param name="schemaContext">XAML 编写器 XAML 架构上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。- 或 -<paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.IO.Stream,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlWriterSettings)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlXmlWriter" /> 从流使用一个编写器设置对象的类。</summary>
      <param name="stream">要写入的流。</param>
      <param name="schemaContext">XAML 编写器 XAML 架构上下文。</param>
      <param name="settings">一个实例 <see cref="T:System.Xaml.XamlXmlWriterSettings" />, ，后者通常具有特定的非默认设置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="schemaContext" /> 是 null</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.IO.TextWriter,System.Xaml.XamlSchemaContext)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlXmlWriter" /> 类 <see cref="T:System.IO.TextWriter" /> 基础。</summary>
      <param name="textWriter">
        <see cref="T:System.IO.TextWriter" /> 写入输出。</param>
      <param name="schemaContext">XAML 编写器 XAML 架构上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textWriter" /> 或 <paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.IO.TextWriter,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlWriterSettings)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlXmlWriter" /> 类 <see cref="T:System.IO.TextWriter" /> 使用设置对象的基础。</summary>
      <param name="textWriter">
        <see cref="T:System.IO.TextWriter" /> 写入输出。</param>
      <param name="schemaContext">XAML 编写器 XAML 架构上下文。</param>
      <param name="settings">一个实例 <see cref="T:System.Xaml.XamlXmlWriterSettings" />, ，后者通常具有特定的非默认设置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textWriter" /> 或 <paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.Xml.XmlWriter,System.Xaml.XamlSchemaContext)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlXmlWriter" /> 类 <see cref="T:System.Xml.XmlWriter" /> 基础。</summary>
      <param name="xmlWriter">
        <see cref="T:System.Xml.XmlWriter" /> 写入输出。</param>
      <param name="schemaContext">XAML 编写器 XAML 架构上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlWriter" /> 或 <paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.Xml.XmlWriter,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlWriterSettings)">
      <summary>新实例初始化 <see cref="T:System.Xaml.XamlXmlWriter" /> 类 <see cref="T:System.Xml.XmlWriter" /> 使用设置对象的基础。</summary>
      <param name="xmlWriter">
        <see cref="T:System.Xml.XmlWriter" /> 写入输出。</param>
      <param name="schemaContext">XAML 编写器 XAML 架构上下文。</param>
      <param name="settings">一个实例 <see cref="T:System.Xaml.XamlXmlWriterSettings" />, ，后者通常具有特定的非默认设置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlWriter" /> 或 <paramref name="schemaContext" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.Dispose(System.Boolean)">
      <summary>释放使用的非托管的资源 <see cref="T:System.Xaml.XamlXmlWriter" /> ，还可以释放托管的资源。</summary>
      <param name="disposing">true 若要释放的非托管的资源;否则为 false。</param>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.Flush">
      <summary>调用 Flush 方法对基础 <see cref="T:System.Xml.XmlWriter" /> 或 <see cref="T:System.IO.TextWriter" />, ，其中写入任何内容，目前在缓冲区中，然后关闭编写器。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteEndMember">
      <summary>将 XAML 结束成员节点写入到基础 <see cref="T:System.Xml.XmlWriter" /> 或 <see cref="T:System.IO.TextWriter" />。 如果 XAML 节点流的当前位置并非在成员中，或者内部编写器状态不支持写入结束成员，则引发异常。</summary>
      <exception cref="T:System.InvalidOperationException">XAML 节点流的当前位置不在成员中。</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">当前的编写器状态不支持编写 end 成员。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteEndObject">
      <summary>将 XAML 结束对象节点写入到基础 <see cref="T:System.Xml.XmlWriter" /> 或 <see cref="T:System.IO.TextWriter" />。 如果正在处理的 XAML 节点流的当前位置与写入结束对象不兼容，则引发异常。</summary>
      <exception cref="T:System.InvalidOperationException">可以在其中写入 end 成员的作用域中不是 XAML 节点流的当前位置。</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">当前的编写器状态不支持写入结束对象。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteGetObject">
      <summary>写入的情况下，指定的对象的默认值或隐式值而不是指定为输入 XAML 节点集中的一个对象值，正在写入的属性的对象。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
      <summary>命名空间的信息写入基础 <see cref="T:System.Xml.XmlWriter" /> 或 <see cref="T:System.IO.TextWriter" />。 可能引发异常，对于某些状态;但是，可能会改为延迟的写入编写器和正在处理的 XAML 节点流之前的命名空间信息到达 XAML 命名空间声明可以插入其中的位置。</summary>
      <param name="namespaceDeclaration">要编写的 XAML 命名空间声明。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="namespaceDeclaration" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="namespaceDeclaration" /> 不是有效的 XAML 命名空间声明 （具有空前缀或 null 标识符组件）。</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">当前的编写器状态不支持编写 XAML 命名空间声明。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteStartMember(System.Xaml.XamlMember)">
      <summary>将 XAML 起始成员节点写入到基础 <see cref="T:System.Xml.XmlWriter" /> 或 <see cref="T:System.IO.TextWriter" />。 如果 XAML 节点流的当前位置位于另一个成员，或如果它不是可以在其中写入的启动成员的作用域或编写器状态，则引发异常。</summary>
      <param name="property">要写入的成员 XAML 成员标识符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="property" /> 不是有效 <see cref="T:System.Xaml.XamlMember" />。</exception>
      <exception cref="T:System.InvalidOperationException">XAML 节点流的当前位置是无效的写入起始成员。</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">写入程序状态无效，不能用于写入开始成员。- 或 -XAML 编写器尝试写入一个重复的成员。 此异常可能具有更精确的内部异常。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteStartObject(System.Xaml.XamlType)">
      <summary>将 XAML 起始对象节点写入到基础 <see cref="T:System.Xml.XmlWriter" /> 或 <see cref="T:System.IO.TextWriter" />。 如果 XAML 节点流的当前位置不在作用域可以写入的起始对象的位置，或编写器未处于可写入开始对象的状态，则引发异常。</summary>
      <param name="type">
        <see cref="T:System.Xaml.XamlType" /> （XAML 类型标识符） 为要写入的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不是有效 <see cref="T:System.Xaml.XamlType" />。</exception>
      <exception cref="T:System.InvalidOperationException">XAML 节点流的当前位置无效，不能用于写入新的启动对象。</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">XAML 编写器的状态无效，不能用于写入新的启动对象。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteValue(System.Object)">
      <summary>将 XAML 值节点写入到基础 <see cref="T:System.Xml.XmlWriter" /> 或 <see cref="T:System.IO.TextWriter" />。 如果 XAML 节点流的当前位置无效，无法写入值，或编写器处于不能在其中写入的值的状态，将引发异常。</summary>
      <param name="value">要写入的值信息。</param>
      <exception cref="T:System.InvalidOperationException">XAML 节点流的当前位置无效，不能用于写入值。</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">XAML 编写器状态不支持对值节点的写入。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 指定一个值，不为 null 或一个字符串。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterException.#ctor">
      <summary>使用由系统提供的用来描述错误的消息初始化 <see cref="T:System.Xaml.XamlXmlWriterException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Xaml.XamlXmlWriterException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterException.#ctor(System.String)">
      <summary>使用指定的描述错误的消息初始化 <see cref="T:System.Xaml.XamlXmlWriterException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Xaml.XamlXmlWriterException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterSettings.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.XamlXmlWriterSettings" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterSettings.Copy">
      <summary>返回一份 <see cref="T:System.Xaml.XamlXmlWriterSettings" /> 实例。</summary>
      <returns>返回的副本。</returns>
    </member>
    <member name="P:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute.Type">
      <summary>获取或设置此属性将进行相应报告的返回类型。</summary>
      <returns>此属性将进行相应报告中的返回类型。</returns>
    </member>
    <member name="P:System.Windows.Markup.ArrayExtension.Items">
      <summary>获取数组的内容。 可在 XAML 中通过 XAML 集合语法设置。</summary>
      <returns>数组内容。</returns>
    </member>
    <member name="P:System.Windows.Markup.ArrayExtension.Type">
      <summary>获取或设置要在调用 <see cref="M:System.Windows.Markup.ArrayExtension.ProvideValue(System.IServiceProvider)" /> 时创建的数组类型。</summary>
      <returns>数组的类型。</returns>
    </member>
    <member name="P:System.Windows.Markup.ConstructorArgumentAttribute.ArgumentName">
      <summary>获取将初始化关联的属性的构造函数的 name 参数。</summary>
      <returns>构造函数的名称。 假定具有 CLR 支持，这对应于相关的构造函数参数的 <see cref="P:System.Reflection.ParameterInfo.Name" />。</returns>
    </member>
    <member name="P:System.Windows.Markup.ContentPropertyAttribute.Name">
      <summary>获取作为内容属性的属性的名称。</summary>
      <returns>作为内容属性的属性的名称。</returns>
    </member>
    <member name="P:System.Windows.Markup.ContentWrapperAttribute.ContentWrapper">
      <summary>获取作为与此特性关联的集合类型的内容包装声明的类型。</summary>
      <returns>作为集合类型的内容包装声明的类型。</returns>
    </member>
    <member name="P:System.Windows.Markup.ContentWrapperAttribute.TypeId">
      <summary>获取此特性的唯一标识符。</summary>
      <returns>此属性的唯一标识符。</returns>
    </member>
    <member name="P:System.Windows.Markup.DependsOnAttribute.Name">
      <summary>获取在此 <see cref="T:System.Windows.Markup.DependsOnAttribute" /> 中声明的相关属性的名称。</summary>
      <returns>相关属性的名称。</returns>
    </member>
    <member name="P:System.Windows.Markup.DependsOnAttribute.TypeId">
      <summary>获取此 <see cref="T:System.Windows.Markup.DependsOnAttribute" /> 的唯一标识符。</summary>
      <returns>唯一标识符。</returns>
    </member>
    <member name="P:System.Windows.Markup.DictionaryKeyPropertyAttribute.Name">
      <summary>获取提供隐式密钥值的属性的名称。</summary>
      <returns>提供隐式密钥值的属性的名称。</returns>
    </member>
    <member name="P:System.Windows.Markup.IProvideValueTarget.TargetObject">
      <summary>获取被报告的目标对象。</summary>
      <returns>被报告的目标对象。</returns>
    </member>
    <member name="P:System.Windows.Markup.IProvideValueTarget.TargetProperty">
      <summary>获取正在报告的目标属性的标识符。</summary>
      <returns>正在报告的目标属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.Markup.IUriContext.BaseUri">
      <summary>获取或设置当前应用程序上下文的基 URI。</summary>
      <returns>应用程序上下文的基 URI。</returns>
    </member>
    <member name="P:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.ExpressionType">
      <summary>不要使用；请参阅“备注”。</summary>
      <returns>不要使用；请参阅“备注”。</returns>
    </member>
    <member name="P:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.ReturnType">
      <summary>获取此 .NET Framework 特性 报告的 <see cref="T:System.Windows.Markup.MarkupExtension" /> 返回类型。</summary>
      <returns>在应用了 <see cref="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute" />  .NET Framework 特性 的标记扩展中，特定 <see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" /> 实现的类型安全的返回类型。</returns>
    </member>
    <member name="P:System.Windows.Markup.MemberDefinition.Name">
      <summary>派生类中实现时，获取或设置要定义的成员的名称。</summary>
      <returns>要定义的成员的名称。</returns>
    </member>
    <member name="P:System.Windows.Markup.NameScopePropertyAttribute.Name">
      <summary>获取提供 XAML 命名空间的属性的名称。</summary>
      <returns>一个字符串值，该值是提供 XAML 命名空间的属性的名称。</returns>
    </member>
    <member name="P:System.Windows.Markup.NameScopePropertyAttribute.Type">
      <summary>获取提供 XAML 命名空间支持的附加属性的所有者类型。</summary>
      <returns>一个 <see cref="T:System.Type" />，它是提供 XAML 命名空间支持的附加属性的所有者类型；或者为 null。 请参阅“备注”。</returns>
    </member>
    <member name="P:System.Windows.Markup.PropertyDefinition.Attributes">
      <summary>获取关联的 CLR 属性的列表。</summary>
      <returns>关联的特性的列表。</returns>
    </member>
    <member name="P:System.Windows.Markup.PropertyDefinition.Modifier">
      <summary>获取或设置为定义的属性的访问级别。</summary>
      <returns>一个字符串形式的已定义属性访问级别。</returns>
    </member>
    <member name="P:System.Windows.Markup.PropertyDefinition.Name">
      <summary>获取或设置要定义的属性的名称。</summary>
      <returns>要定义的属性的名称。</returns>
    </member>
    <member name="P:System.Windows.Markup.PropertyDefinition.Type">
      <summary>获取或设置 <see cref="T:System.Xaml.XamlType" /> 要定义的属性。</summary>
      <returns>要定义的属性的 XAML 类型标识符。</returns>
    </member>
    <member name="P:System.Windows.Markup.Reference.Name">
      <summary>获取或设置要获取其引用的 XAML 名称。</summary>
      <returns>要获取其引用的元素的 XAML 名称。</returns>
    </member>
    <member name="P:System.Windows.Markup.RootNamespaceAttribute.Namespace">
      <summary>获取与 Visual Studio 项目文件中的 RootNamespace 属性的值相对应的字符串。</summary>
      <returns>与 Visual Studio 项目文件中的 RootNamespace 属性的值相对应的字符串。</returns>
    </member>
    <member name="P:System.Windows.Markup.RuntimeNamePropertyAttribute.Name">
      <summary>获取此 <see cref="T:System.Windows.Markup.RuntimeNamePropertyAttribute" /> 指定的运行时名称属性的名称。</summary>
      <returns>属性的名称。</returns>
    </member>
    <member name="P:System.Windows.Markup.StaticExtension.Member">
      <summary>获取或设置用于根据服务提供的类型解析程序解析静态字段或属性的成员名称字符串。</summary>
      <returns>用于标识要引用的成员的字符串。 请参阅“备注”。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将 <see cref="P:System.Windows.Markup.StaticExtension.Member" /> 设置为 null。</exception>
    </member>
    <member name="P:System.Windows.Markup.StaticExtension.MemberType">
      <summary>获取或设置 <see cref="T:System.Type" /> ，它定义要返回的静态成员。</summary>
      <returns>
        <see cref="T:System.Type" /> ，它定义要返回的静态成员。</returns>
      <exception cref="T:System.ArgumentNullException">试图设置 <see cref="P:System.Windows.Markup.StaticExtension.MemberType" />  到 null。</exception>
    </member>
    <member name="P:System.Windows.Markup.TypeExtension.Type">
      <summary>获取或设置此扩展的类型信息。</summary>
      <returns>建立的类型。 对于运行时而言，这可能是 get 访问的 null，但不能设置为 null。</returns>
      <exception cref="T:System.ArgumentNullException">已尝试设置为 null。</exception>
    </member>
    <member name="P:System.Windows.Markup.TypeExtension.TypeName">
      <summary>获取或设置此标记扩展所表示的类型名称。</summary>
      <returns>用于标识类型的字符串。 此字符串使用格式 prefix:className。 （prefix 是 XML 命名空间的映射前缀，并且仅当引用未映射到 WPF 默认 XML 命名空间的类型时才需要 (http://schemas.microsoft.com/winfx/2006/xaml/presentation)。）</returns>
      <exception cref="T:System.ArgumentNullException">已尝试设置为 null。</exception>
    </member>
    <member name="P:System.Windows.Markup.UidPropertyAttribute.Name">
      <summary>获取表示的 CLR 属性的名称 x:Uid Directive 值。</summary>
      <returns>表示 CLR 属性的名称 x:Uid Directive。</returns>
    </member>
    <member name="P:System.Windows.Markup.UsableDuringInitializationAttribute.Usable">
      <summary>获取一个值，该值指示关联类在初始化期间是否可用。</summary>
      <returns>如果关联类在初始化期间可用，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlDeferLoadAttribute.ContentType">
      <summary>获取 CLR <see cref="T:System.Type" /> 延迟加载行为的目标/内容类型的值。</summary>
      <returns>CLR <see cref="T:System.Type" /> 延迟加载行为的目标/内容类型的值。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlDeferLoadAttribute.ContentTypeName">
      <summary>获取要用于延迟加载行为的实现类型的字符串名称。</summary>
      <returns>要用于延迟加载行为转换器的类型的字符串名称。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlDeferLoadAttribute.LoaderType">
      <summary>获取 CLR <see cref="T:System.Type" /> 实现用于延迟加载行为的值。</summary>
      <returns>CLR <see cref="T:System.Type" /> 实现用于延迟加载行为的值。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlDeferLoadAttribute.LoaderTypeName">
      <summary>延迟加载行为的目标/内容类型中获取该类型的字符串名称。</summary>
      <returns>延迟的目标/内容类型的字符串名称的类型的加载行为。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetMarkupExtensionAttribute.XamlSetMarkupExtensionHandler">
      <summary>获取要用于标记扩展的处理程序的名称设置操作。</summary>
      <returns>设置操作要用于标记扩展的处理程序的名称。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetMarkupExtensionEventArgs.MarkupExtension">
      <summary>获取 <see cref="T:System.Windows.Markup.MarkupExtension" /> 与此相关的参考 <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs" />。</summary>
      <returns>与此相关的标记扩展引用 <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs" />。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetMarkupExtensionEventArgs.ServiceProvider">
      <summary>获取传递给标记扩展的服务提供程序信息。</summary>
      <returns>已传递到标记扩展的服务提供程序信息。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetTypeConverterAttribute.XamlSetTypeConverterHandler">
      <summary>获取 <paramref name="xamlSetTypeConverterHandler" /> 初始化值 （处理程序名称） 中指定 <see cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" />。</summary>
      <returns>
        <paramref name="xamlSetTypeConverterHandler" /> 中指定值 <see cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" />。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetTypeConverterEventArgs.CultureInfo">
      <summary>获取 <see cref="T:System.Globalization.CultureInfo" /> 调用时，类型转换器类可使用的信息 <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" /> 和其他方法。</summary>
      <returns>类型转换器类可使用的区域性信息 </returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetTypeConverterEventArgs.ServiceProvider">
      <summary>获取 <see cref="T:System.IServiceProvider" /> 可供类型转换器类信息。</summary>
      <returns>服务可以使用的提供程序信息 <paramref name="typeConverter" /> 类。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetTypeConverterEventArgs.TypeConverter">
      <summary>获取 <see cref="T:System.ComponentModel.TypeConverter" /> 实例，将调用并提供类型转换行为。</summary>
      <returns>提供类型转换行为的类型转换器。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetValueEventArgs.Handled">
      <summary>获取或设置一个值，确定是否正在使用的调用方 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> 可以使用的值而无需调用 <see cref="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase" />。</summary>
      <returns>true 如果值是有用的且调用 <see cref="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase" /> 必要; 否则为不是 false。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetValueEventArgs.Member">
      <summary>获取 XAML 类型系统和要设置的成员的 XAML 架构信息。</summary>
      <returns>XAML 类型系统和要设置的成员的 XAML 架构信息。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetValueEventArgs.Value">
      <summary>获取要用于所设置的成员的值。</summary>
      <returns>要为所设置的成员提供的值。</returns>
    </member>
    <member name="P:System.Windows.Markup.XData.Text">
      <summary>获取或设置文本值字符串，这 <see cref="T:System.Windows.Markup.XData" /> 包装。</summary>
      <returns>文字值的字符串。</returns>
    </member>
    <member name="P:System.Windows.Markup.XData.XmlReader">
      <summary>获取或设置文本的数据的读取器。</summary>
      <returns>文本数据读取器。</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlLangPropertyAttribute.Name">
      <summary>获取此特性中所指定属性的名称。</summary>
      <returns>属性的名称。</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsCompatibleWithAttribute.NewNamespace">
      <summary>获取由此特性报告的包含命名空间标识符。</summary>
      <returns>特性中报告的包含命名空间标识符。</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsCompatibleWithAttribute.OldNamespace">
      <summary>获取由此特性报告的引用命名空间标识符。</summary>
      <returns>引用命名空间标识符。</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.AssemblyName">
      <summary>获取或设置与特性关联的程序集的名称。</summary>
      <returns>程序集名称。</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.ClrNamespace">
      <summary>获取此属性中指定 CLR 命名空间的字符串名称。 </summary>
      <returns>以字符串形式指定的 CLR 命名空间。</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.XmlNamespace">
      <summary>获取此属性中指定的 XAML 命名空间标识符。</summary>
      <returns>XAML 命名空间标识符。</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsPrefixAttribute.Prefix">
      <summary>获取与此属性关联的建议前缀。</summary>
      <returns>建议的前缀字符串。</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsPrefixAttribute.XmlNamespace">
      <summary>获取与此属性关联的 XAML 命名空间标识符。</summary>
      <returns>XAML 命名空间标识符。</returns>
    </member>
    <member name="P:System.Xaml.AmbientPropertyValue.RetrievedProperty">
      <summary>获取 XAML 类型系统标识符 (<see cref="T:System.Xaml.XamlMember" />)，它表示环境的属性。</summary>
      <returns>表示环境的属性的标识符。</returns>
    </member>
    <member name="P:System.Xaml.AmbientPropertyValue.Value">
      <summary>获取环境的属性的值。</summary>
      <returns>环境属性的值。</returns>
    </member>
    <member name="P:System.Xaml.AttachableMemberIdentifier.DeclaringType">
      <summary>获取或设置 <paramref name="declaringType" /> 分量值 <see cref="T:System.Xaml.AttachableMemberIdentifier" />。</summary>
      <returns>
        <paramref name="declaringType" /> 分量值 <see cref="T:System.Xaml.AttachableMemberIdentifier" />。</returns>
    </member>
    <member name="P:System.Xaml.AttachableMemberIdentifier.MemberName">
      <summary>获取或设置 <paramref name="memberName" /> 分量值 <see cref="T:System.Xaml.AttachableMemberIdentifier" />。</summary>
      <returns>
        <paramref name="memberName" /> 分量值 <see cref="T:System.Xaml.AttachableMemberIdentifier" />。</returns>
    </member>
    <member name="P:System.Xaml.IAttachedPropertyStore.PropertyCount">
      <summary>获取此可附加成员存储区中的条目可附加的成员的计数。</summary>
      <returns>存储区中的条目整数计数。</returns>
    </member>
    <member name="P:System.Xaml.IRootObjectProvider.RootObject">
      <summary>从标记或对象图中获取根对象。</summary>
      <returns>根对象。</returns>
    </member>
    <member name="P:System.Xaml.IXamlIndexingReader.Count">
      <summary>获取当前外部节点集中的节点数。</summary>
      <returns>在当前外部节点的节点数设置。</returns>
    </member>
    <member name="P:System.Xaml.IXamlIndexingReader.CurrentIndex">
      <summary>获取或设置 XAML 节点的索引的列表视图的当前读取器位置的索引号。</summary>
      <returns>当前的读取器位置的索引号。</returns>
    </member>
    <member name="P:System.Xaml.IXamlLineInfo.HasLineInfo">
      <summary>获取一个值，指定是否使用行信息。</summary>
      <returns>true 如果行信息可用，则否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.IXamlLineInfo.LineNumber">
      <summary>获取指向报表的行号。</summary>
      <returns>报告的行号。</returns>
    </member>
    <member name="P:System.Xaml.IXamlLineInfo.LinePosition">
      <summary>获取报表的行位置。</summary>
      <returns>报告的行位置。</returns>
    </member>
    <member name="P:System.Xaml.IXamlLineInfoConsumer.ShouldProvideLineInfo">
      <summary>获取一个值，确定是否应提供行信息服务值，并因此，还应调用 <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /> 在相关时。</summary>
      <returns>true 如果行信息由实现;否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.IXamlNameResolver.IsFixupTokenAvailable">
      <summary>获取一个值，确定是否调用 <see cref="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String},System.Boolean)" /> 可用，以将名称解析到的前向解析的标记。</summary>
      <returns>true 如果 <see cref="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String},System.Boolean)" /> 可用作一种实现，返回为前向解析有用标记; 否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.IXamlSchemaContextProvider.SchemaContext">
      <summary>获取 <see cref="T:System.Xaml.XamlSchemaContext" /> 服务上下文报告。</summary>
      <returns>报告服务上下文的 XAML 架构上下文。</returns>
    </member>
    <member name="P:System.Xaml.NamespaceDeclaration.Namespace">
      <summary>获取的标识符部分 <see cref="T:System.Xaml.NamespaceDeclaration" />。</summary>
      <returns>XAML 命名空间声明的标识符。</returns>
    </member>
    <member name="P:System.Xaml.NamespaceDeclaration.Prefix">
      <summary>获取用作的 XAML 命名空间映射前缀的前缀 <see cref="T:System.Xaml.NamespaceDeclaration" />。</summary>
      <returns>为此前缀字符串 <see cref="T:System.Xaml.NamespaceDeclaration" />。</returns>
    </member>
    <member name="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName">
      <summary>获取 <see cref="T:System.Reflection.AssemblyName" /> 用于此程序集的 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 确定权限。</summary>
      <returns>
        <see cref="T:System.Reflection.AssemblyName" /> 用于此程序集的 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 确定权限。</returns>
    </member>
    <member name="P:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessToTypeName">
      <summary>获取此类型的非限定的字符串名 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 确定权限。</summary>
      <returns>此类型的非限定的字符串名 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 确定权限。</returns>
    </member>
    <member name="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess">
      <summary>获取所有的列表 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 值指示此 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 表示。</summary>
      <returns>只读列表 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 值，或 null。 请参阅“备注”。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter">
      <summary>获取 <see cref="T:System.Reflection.MethodInfo" /> clr 属性获取值的方法是适用于此的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> Clr 属性获取值的方法是适用于此的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />, ，或 null。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter">
      <summary>获取 <see cref="T:System.Reflection.MethodInfo" /> CLR 进行设置的属性值的方法是适用于此的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> CLR 进行设置的属性值的方法是适用于此的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />, ，或 null。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker">
      <summary>提供一个静态值，表示未完全实现的未知 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />。</summary>
      <returns>一个静态值，表示未完全实现的未知 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler">
      <summary>获取该处理程序时要使用 <see cref="T:System.Xaml.XamlObjectWriter" /> 调入所实现 <see cref="T:System.Windows.Markup.MarkupExtension" />。</summary>
      <returns>处理这种情况下一个处理程序实现。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler">
      <summary>获取该处理程序时要使用 <see cref="T:System.Xaml.XamlObjectWriter" /> 调入 CLR 实现 <see cref="T:System.ComponentModel.TypeConverter" />。</summary>
      <returns>处理这种情况下一个处理程序实现。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker">
      <summary>提供一个静态值，表示未完全实现的未知 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</summary>
      <returns>一个静态值，表示未完全实现的未知 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeName.Name">
      <summary>获取用于构造此名称 <see cref="T:System.Xaml.Schema.XamlTypeName" />。</summary>
      <returns>类型的名称。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeName.Namespace">
      <summary>获取用于构造此的 XAML 命名空间标识符 <see cref="T:System.Xaml.Schema.XamlTypeName" />。</summary>
      <returns>XAML 命名空间标识符。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeName.TypeArguments">
      <summary>获取用于构造此的类型参数 <see cref="T:System.Xaml.Schema.XamlTypeName" />。</summary>
      <returns>类型参数，如果有的话。 可能为 null。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlValueConverter`1.ConverterInstance">
      <summary>获取转换器实现创建的实例。</summary>
      <returns>转换器实现中，已创建的实例或 null。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlValueConverter`1.ConverterType">
      <summary>获取 <see cref="T:System.Type" /> 实现转换器行为的类。</summary>
      <returns>
        <see cref="T:System.Type" /> 实现转换器行为的类。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlValueConverter`1.Name">
      <summary>获取此字符串名称 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</summary>
      <returns>字符串名称 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlValueConverter`1.TargetType">
      <summary>获取目标 <see cref="T:System.Xaml.XamlType" /> 的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</summary>
      <returns>目标 <see cref="T:System.Xaml.XamlType" /> 的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.HasLineInfo">
      <summary>获取一个值，指定是否使用行信息。</summary>
      <returns>true 如果行信息可用，则否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.IsEof">
      <summary>获取一个值，报表读取器位置是否位于文件结尾。</summary>
      <returns>true 如果位于文件末尾;否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.LineNumber">
      <summary>获取指向报表的行号。</summary>
      <returns>报告的行号。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.LinePosition">
      <summary>获取报表的行位置。</summary>
      <returns>报告的行位置。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.Member">
      <summary>如果读取器位置位于在读取器位置获取的当前成员 <see cref="F:System.Xaml.XamlNodeType.StartMember" />。</summary>
      <returns>当前成员;或 null, ，如果位置不在成员上。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.Namespace">
      <summary>从当前节点中获取的 XAML 命名空间。</summary>
      <returns>XAML 命名空间，如果可用，则否则为 null。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.NodeType">
      <summary>获取当前节点的类型。</summary>
      <returns>值为 <see cref="T:System.Xaml.XamlNodeType" /> 枚举。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.SchemaContext">
      <summary>获取一个对象，提供的信息集的架构上下文信息。</summary>
      <returns>一个对象，提供的信息的架构上下文信息设置。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.Type">
      <summary>获取 <see cref="T:System.Xaml.XamlType" /> 当前节点。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlType" /> 的当前节点; 或 null, ，如果当前的读取器位置不在对象上。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.Value">
      <summary>获取当前节点的值。</summary>
      <returns>当前节点; 的值或 null, ，如果当前的读取器位置不在 <see cref="F:System.Xaml.XamlNodeType.Value" /> 节点类型。</returns>
    </member>
    <member name="P:System.Xaml.XamlDirective.AllowedLocation">
      <summary>获取一个值，指定的 XAML 节点类型，其中，可以指定该指令。</summary>
      <returns>枚举的一个值。 默认值是枚举默认值，即 <see cref="F:System.Xaml.Schema.AllowedMemberLocations.None" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlDuplicateMemberException.DuplicateMember">
      <summary>获取或设置要报告为重复的属性的 XAML 成员标识符。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlMember" /> 对象 （XAML 成员标识符） 来报告。</returns>
    </member>
    <member name="P:System.Xaml.XamlDuplicateMemberException.ParentType">
      <summary>获取或设置要作为父类型的报告的 XAML 类型标识符。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlType" /> 报告为父类型的对象 （XAML 类型标识符）。</returns>
    </member>
    <member name="P:System.Xaml.XamlException.LineNumber">
      <summary>获取或设置异常所报告的 XAML 文本行信息的行号组合。</summary>
      <returns>XAML 文本行信息行编号组件。</returns>
    </member>
    <member name="P:System.Xaml.XamlException.LinePosition">
      <summary>获取或设置异常所报告的 XAML 文本行信息的行位置组成部分。</summary>
      <returns>XAML 文本行信息的行位置组件。</returns>
    </member>
    <member name="P:System.Xaml.XamlException.Message">
      <summary>获取或设置异常消息和行信息可用时，如果向消息追加的行信息。</summary>
      <returns>异常消息，其中包含追加的行信息。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.AllDirectives">
      <summary>获取一个只读的泛型集合，每个 <see cref="T:System.Xaml.XamlDirective" /> 由.NET Framework XAML 服务定义的标识符。</summary>
      <returns>只读的泛型集合，每个 <see cref="T:System.Xaml.XamlDirective" /> 由.NET Framework XAML 服务定义的标识符。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.AllTypes">
      <summary>获取个人的只读泛型集合 <see cref="T:System.Xaml.XamlType" /> 匹配的值或别名，XAML 语言内部定义的.NET Framework XAML 服务。</summary>
      <returns>只读的泛型集合，每个 <see cref="T:System.Xaml.XamlType" /> 与 XAML 语言内部相匹配。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Arguments">
      <summary>获取 <see cref="T:System.Xaml.XamlDirective" /> 为 Arguments 的工厂方法或泛型用法。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlDirective" /> 为 Arguments 的工厂方法或泛型用法。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Array">
      <summary>获取 <see cref="T:System.Xaml.XamlType" /> 为 Array XAML 语言内部函数。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlType" /> 为 Array XAML 语言内部函数。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.AsyncRecords">
      <summary>获取 <see cref="T:System.Xaml.XamlDirective" /> 为 AsyncRecords 伪成员。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlDirective" /> 为 AsyncRecords 伪成员。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Base">
      <summary>获取 <see cref="T:System.Xaml.XamlDirective" /> 为 base 从 XML 指令。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlDirective" /> 为 base 从 XML 指令。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Boolean">
      <summary>获取 <see cref="T:System.Xaml.XamlType" /> 为 Boolean XAML 语言内部函数。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlType" /> 为 Boolean XAML 语言内部函数。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Byte">
      <summary>获取 <see cref="T:System.Xaml.XamlType" /> 为 Byte XAML 语言内部函数。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlType" /> 为 Byte XAML 语言内部函数。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Char">
      <summary>获取 <see cref="T:System.Xaml.XamlType" /> 为 Char XAML 语言内部函数。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlType" /> 为 Char XAML 语言内部函数。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Class">
      <summary>获取 <see cref="T:System.Xaml.XamlDirective" /> 为 Class 从 XAML 指令。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlDirective" /> 为 Class 从 XAML 指令。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.ClassAttributes">
      <summary>获取 <see cref="T:System.Xaml.XamlDirective" /> 为 ClassAttributes 从 XAML 指令。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlDirective" /> 为 ClassAttributes 从 XAML 指令。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.ClassModifier">
      <summary>获取 <see cref="T:System.Xaml.XamlDirective" /> 为 ClassModifier 从 XAML 指令。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlDirective" /> 为 ClassModifier 从 XAML 指令。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Code">
      <summary>获取 <see cref="T:System.Xaml.XamlDirective" /> 为 Code 详见 [MS-XAML]。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlDirective" /> 为 Code 详见 [MS-XAML]。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.ConnectionId">
      <summary>获取 <see cref="T:System.Xaml.XamlDirective" /> ，它标识用于将事件写入处理程序的连接点。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlDirective" /> ，它标识用于将事件写入处理程序的连接点。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Decimal">
      <summary>获取 <see cref="T:System.Xaml.XamlType" /> 为 Decimal XAML 语言内部函数。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlType" /> 为 Decimal XAML 语言内部函数。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Double">
      <summary>获取 <see cref="T:System.Xaml.XamlType" /> 为 Double XAML 语言内部函数。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlType" /> 为 Double XAML 语言内部函数。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.FactoryMethod">
      <summary>获取 <see cref="T:System.Xaml.XamlDirective" /> XAML 的标识的工厂方法。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlDirective" /> XAML 的标识的工厂方法。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.FieldModifier">
      <summary>获取 <see cref="T:System.Xaml.XamlDirective" /> 为 FieldModifier 从 XAML 指令。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlDirective" /> 为 FieldModifier 从 XAML 指令。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Initialization">
      <summary>获取 <see cref="T:System.Xaml.XamlDirective" /> 为 Initialization 从 XAML 指令。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlDirective" /> 为 Initialization 从 XAML 指令。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Int16">
      <summary>获取 <see cref="T:System.Xaml.XamlType" /> 为 Int16 XAML 语言内部函数。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlType" /> 为 Int16 XAML 语言内部函数。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Int32">
      <summary>获取 <see cref="T:System.Xaml.XamlType" /> 为 Int32 XAML 语言内部函数。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlType" /> 为 Int32 XAML 语言内部函数。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Int64">
      <summary>获取 <see cref="T:System.Xaml.XamlType" /> 为 Int64 XAML 语言内部函数。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlType" /> 为 Int64 XAML 语言内部函数。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Items">
      <summary>获取 <see cref="T:System.Xaml.XamlDirective" /> 为 Items 从 XAML 指令。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlDirective" /> 为 Items 从 XAML 指令。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Key">
      <summary>获取 <see cref="T:System.Xaml.XamlDirective" /> 为 Key 从 XAML 指令。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlDirective" /> 为 Key 从 XAML 指令。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Lang">
      <summary>获取 <see cref="T:System.Xaml.XamlDirective" /> 为 lang 从 XML 指令。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlDirective" /> 为 lang 从 XML 指令。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Member">
      <summary>获取 <see cref="T:System.Xaml.XamlType" /> 的项类型的类型为 <see cref="P:System.Xaml.XamlLanguage.Members" />。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlType" /> 的项类型的类型为 <see cref="P:System.Xaml.XamlLanguage.Members" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Members">
      <summary>获取 <see cref="T:System.Xaml.XamlDirective" /> 为 Members 中 XAML 的概念。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlDirective" /> 为 Members 中 XAML 的概念。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Name">
      <summary>获取 <see cref="T:System.Xaml.XamlDirective" /> 为 Name 从 XAML 指令。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlDirective" /> 为 Name 从 XAML 指令。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Null">
      <summary>获取 <see cref="T:System.Xaml.XamlType" /> 为 Null 或 NullExtension XAML 语言内部函数。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlType" /> 为 Null/NullExtension XAML 语言内部函数。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Object">
      <summary>获取 <see cref="T:System.Xaml.XamlType" /> 为 Object XAML 语言概念。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlType" /> 为 Object XAML 语言概念。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.PositionalParameters">
      <summary>获取 <see cref="T:System.Xaml.XamlDirective" /> 为 PositionalParameters 从 XAML 指令。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlDirective" /> 为 PositionalParameters 从 XAML 指令。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Property">
      <summary>获取 <see cref="T:System.Xaml.XamlType" /> 为 Property 中 XAML 的概念。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlType" /> 为 Property 中 XAML 的概念。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Reference">
      <summary>获取 <see cref="T:System.Xaml.XamlType" /> 表示 Reference xaml。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlType" /> 表示 Reference xaml。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Shared">
      <summary>获取 <see cref="T:System.Xaml.XamlDirective" /> 为 Shared xaml 指令。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlDirective" /> 为 Shared xaml 指令。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Single">
      <summary>获取 <see cref="T:System.Xaml.XamlType" /> 为 Single XAML 语言内部函数。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlType" /> 为 Single XAML 语言内部函数。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Space">
      <summary>获取 <see cref="T:System.Xaml.XamlDirective" /> 为 space 从 XML 指令。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlDirective" /> 为 space 从 XML 指令。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Static">
      <summary>获取 <see cref="T:System.Xaml.XamlType" /> 为 Static/StaticExtension XAML 语言内部函数。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlType" /> 为 Static/StaticExtension XAML 语言内部函数。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.String">
      <summary>获取 <see cref="T:System.Xaml.XamlType" /> 为 String XAML 语言内部函数。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlType" /> 为 String XAML 语言内部函数。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Subclass">
      <summary>从 XAML 获取 Subclass 指令的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>来自 XAML 的 Subclass 指令的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.SynchronousMode">
      <summary>获取 <see cref="T:System.Xaml.XamlDirective" /> 这样如果 XAML 处理器支持这种模式以异步方式加载 XAML。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlDirective" /> ，利用它可以以异步方式加载 XAML。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.TimeSpan">
      <summary>获取 <see cref="T:System.Xaml.XamlType" /> 为 TimeSpan 中 XAML 语言概念。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlType" /> 为 TimeSpan XAML 语言概念。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Type">
      <summary>获取 <see cref="T:System.Xaml.XamlType" /> 为 Type/TypeExtension XAML 语言内部函数。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlType" /> 为 Type/TypeExtension XAML 语言内部函数。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.TypeArguments">
      <summary>获取 <see cref="T:System.Xaml.XamlDirective" /> 为 TypeArguments 从 XAML 指令。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlDirective" /> 为 TypeArguments 从 XAML 指令。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Uid">
      <summary>获取 <see cref="T:System.Xaml.XamlDirective" /> 为 Uid 从 XAML 指令。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlDirective" /> 为 Uid 从 XAML 指令。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.UnknownContent">
      <summary>获取 <see cref="T:System.Xaml.XamlDirective" /> 为 UnknownContent 从 XAML 指令。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlDirective" /> 为 UnknownContent 从 XAML 指令。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Uri">
      <summary>获取 <see cref="T:System.Xaml.XamlType" /> 为 Uri XAML 语言概念。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlType" /> 为 Uri XAML 语言概念。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.XamlNamespaces">
      <summary>获取 XAML 命名空间标识符的集合。</summary>
      <returns>XAML 命名空间标识符的集合。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.XData">
      <summary>获取 <see cref="T:System.Xaml.XamlType" /> 备份的 XAML 类型 XData 中 XAML 块。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlType" /> 备份的 XAML 类型 XData 块。 See [MS-XAML] Section 5.2.23.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.XmlNamespaces">
      <summary>获取 XML 命名空间标识符的集合。</summary>
      <returns>XML 命名空间标识符的集合。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.DeclaringType">
      <summary>获取 <see cref="T:System.Xaml.XamlType" /> 声明与此关联的成员的类型为 <see cref="T:System.Xaml.XamlMember" />。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlType" /> 声明与此关联的成员的类型为 <see cref="T:System.Xaml.XamlMember" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.DeferringLoader">
      <summary>获取 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 对象，它用于延迟加载的 XAML 声明对象。</summary>
      <returns>一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 与 <see cref="T:System.Xaml.XamlDeferringLoader" /> 泛型约束。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.DependsOn">
      <summary>获取 <see cref="T:System.Xaml.XamlMember" /> 对象的列表。 这些报告的依赖关系的初始化顺序所在相对于此的成员 <see cref="T:System.Xaml.XamlMember" />。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlMember" /> 对象的列表。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.Invoker">
      <summary>获取 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 与此关联的实现 <see cref="T:System.Xaml.XamlMember" />。</summary>
      <returns>
        <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 与此关联的实现 <see cref="T:System.Xaml.XamlMember" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsAmbient">
      <summary>获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlMember" /> 报告作为环境属性。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlMember" /> 报告作为环境属性; 否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsAttachable">
      <summary>获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlMember" /> 是附加的成员。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlMember" /> 是可附加成员; 否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsDirective">
      <summary>获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlMember" /> 是否为 XAML 指令。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlMember" /> 是一个 XAML 指令; 否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsEvent">
      <summary>获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlMember" /> 表示一个事件成员。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlMember" /> 表示一个事件; 否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsNameValid">
      <summary>获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlMember" /> 具有有效初始化 xamlName 字符串作为其 <see cref="P:System.Xaml.XamlMember.Name" />。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlMember" /> 具有有效初始化 xamlName 字符串; 否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsReadOnly">
      <summary>获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlMember" /> 表示只读成员。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlMember" /> 表示只读成员; 否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsReadPublic">
      <summary>获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlMember" /> 表示具有可调用公共成员 get 取值函数。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlMember" /> 表示可调用公共 get 访问器; 否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsUnknown">
      <summary>获取一个值，该值指示是否该成员不是可解析用于类型和成员解析的支持系统。</summary>
      <returns>true 如果该成员不是可解析; false 如果成员是可解析。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsWriteOnly">
      <summary>获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlMember" /> 表示一个只写的成员。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlMember" /> 表示一个只写的成员; 否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsWritePublic">
      <summary>获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlMember" /> 表示具有可调用公共成员 set 取值函数。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlMember" /> 表示可调用公共 set 访问器; 否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.Name">
      <summary>获取 xamlName name 声明此字符串 <see cref="T:System.Xaml.XamlMember" />。</summary>
      <returns>xamlName Name 声明此字符串 <see cref="T:System.Xaml.XamlMember" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.PreferredXamlNamespace">
      <summary>获取单个 XAML 命名空间 URI，用于标识此主 XAML 命名空间 <see cref="T:System.Xaml.XamlMember" />。</summary>
      <returns>为此主 XAML 命名空间的标识符 <see cref="T:System.Xaml.XamlMember" />, ，作为字符串。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.SerializationVisibility">
      <summary>获取 <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 值，该值指示可视化设计器应如何处理该成员。</summary>
      <returns>值为 <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 枚举。 默认值为 <see cref="F:System.ComponentModel.DesignerSerializationVisibility.Visible" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.TargetType">
      <summary>获取 <see cref="T:System.Xaml.XamlType" /> 类型的其中 <see cref="T:System.Xaml.XamlMember" /> 可以存在。</summary>
      <returns>类型其中 <see cref="T:System.Xaml.XamlMember" /> 可以存在。 请参阅“备注”。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.Type">
      <summary>获取 <see cref="T:System.Xaml.XamlType" /> 成员使用的类型。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlType" /> 成员使用的类型。 请参阅“备注”。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.TypeConverter">
      <summary>获取 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 对象，可用于 XAML 声明的对象的类型转换构造。</summary>
      <returns>一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 值，与 <see cref="T:System.ComponentModel.TypeConverter" /> 泛型约束。 请参阅“备注”。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.UnderlyingMember">
      <summary>获取 CLR 类型系统 <see cref="T:System.Reflection.MemberInfo" /> ，它可用于构造的一个成员 <see cref="T:System.Reflection.PropertyInfo" />, ，<see cref="T:System.Reflection.MethodInfo" />, ，或 <see cref="T:System.Reflection.EventInfo" />。</summary>
      <returns>CLR 类型系统 <see cref="T:System.Reflection.MemberInfo" /> 信息，作为初始构造函数参数强制转换。 一个 <see cref="T:System.Xaml.XamlMember" /> 构造 <see cref="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)" /> 签名返回 null。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.ValueSerializer">
      <summary>获取 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 对象，用于进行 XAML 声明的对象的值序列化。</summary>
      <returns>一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 与 <see cref="T:System.Windows.Markup.ValueSerializer" /> 泛型约束。</returns>
    </member>
    <member name="P:System.Xaml.XamlNodeList.Count">
      <summary>在此获取的节点数 <see cref="T:System.Xaml.XamlNodeList" />。</summary>
      <returns>在此节点数 <see cref="T:System.Xaml.XamlNodeList" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlNodeList.Writer">
      <summary>获取关联的 XAML 编写器。</summary>
      <returns>关联的 XAML 编写器。</returns>
    </member>
    <member name="P:System.Xaml.XamlNodeQueue.Count">
      <summary>获取中的节点数 <see cref="T:System.Xaml.XamlNodeQueue" />。</summary>
      <returns>中的节点数 <see cref="T:System.Xaml.XamlNodeQueue" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlNodeQueue.IsEmpty">
      <summary>获取一个值，确定是否这 <see cref="T:System.Xaml.XamlNodeQueue" /> 不包含的节点。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlNodeQueue" /> 不包含节点，则 false 如果此 <see cref="T:System.Xaml.XamlNodeQueue" /> 包含节点。</returns>
    </member>
    <member name="P:System.Xaml.XamlNodeQueue.Reader">
      <summary>获取 XAML 读取器实现委托。</summary>
      <returns>XAML 读取器实现委托。</returns>
      <exception cref="T:System.Xaml.XamlException">用于节点列表是 XAML 编写器已经没有有效的 XAML 架构上下文。</exception>
    </member>
    <member name="P:System.Xaml.XamlNodeQueue.Writer">
      <summary>获取关联的 XAML 编写器。</summary>
      <returns>关联的 XAML 编写器。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectEventArgs.ElementLineNumber">
      <summary>获取或设置相关对象实例的行号。</summary>
      <returns>元素的行号。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectEventArgs.ElementLinePosition">
      <summary>获取或设置相关对象实例在行中的位置。</summary>
      <returns>元素在行中的位置。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectEventArgs.Instance">
      <summary>获取与事件数据相关的对象实例。</summary>
      <returns>与事件数据相关的对象实例。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectEventArgs.SourceBamlUri">
      <summary>获取或设置相关对象实例的 BAML URI。</summary>
      <returns>相关对象实例的 BAML URI。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Instance">
      <summary>获取在当前的读取器位置的对象实例。</summary>
      <returns>位于当前读取器位置; 的对象实例或 null 如果读取器位置不在对象上。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.IsEof">
      <summary>获取一个值，报表读取器位置是否位于文件末尾。</summary>
      <returns>true 如果读取器位于末尾的该文件;否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Member">
      <summary>获取当前 <see cref="T:System.Xaml.XamlMember" /> 在读取器位置上，如果读取器位置位于 <see cref="F:System.Xaml.XamlNodeType.StartMember" />。</summary>
      <returns>当前成员;或 null 如果读取器位置不在成员上。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Namespace">
      <summary>从当前读取器位置获取 XAML 命名空间声明。</summary>
      <returns>如果读取器定位在的 XAML 命名空间声明 <see cref="F:System.Xaml.XamlNodeType.NamespaceDeclaration" />; 否则为 null。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.NodeType">
      <summary>获取当前节点的类型。</summary>
      <returns>当前节点的类型。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.SchemaContext">
      <summary>获取一个对象，提供的信息集的架构信息。</summary>
      <returns>一个对象，提供的信息集的架构信息。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Type">
      <summary>获取 <see cref="T:System.Xaml.XamlType" /> 位于当前读取器位置的对象。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlType" /> 位于当前读取器位置; 的对象或 null 如果位置不在对象上。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Value">
      <summary>获取当前的读取器位置处的节点的值。</summary>
      <returns>当前节点; 的值或 null, ，如果读取器位置不在 <see cref="F:System.Xaml.XamlNodeType.Value" /> 节点类型。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReaderSettings.RequireExplicitContentVisibility">
      <summary>获取或设置一个值，确定是否编写器，使用关联 <see cref="T:System.Xaml.XamlObjectReader" /> 对于上下文应使用设计器设置来显式写入内容。</summary>
      <returns>true 指定使用此上下文的编写器应使用设计器设置，对于写入任何输出情况 where <see cref="P:System.Xaml.XamlMember.IsWritePublic" /> 报表 false; false 如果应该忽略设计器设置。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriter.Result">
      <summary>获取已写入的最后一个对象。 时，通常只调用节点流位于它的结尾和对象关系图已完成。</summary>
      <returns>写入的最后一个对象或 null。 请参阅“备注”。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriter.RootNameScope">
      <summary>获取 <see cref="T:System.Windows.Markup.INameScope" /> 维护 XAML 名称范围的绝对根节点的 XAML 对象编写器的服务。</summary>
      <returns>
        <see cref="T:System.Windows.Markup.INameScope" /> 维护对象编写器的当前根的 XAML 名称范围的服务。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriter.SchemaContext">
      <summary>获取活动的 XAML 架构上下文。</summary>
      <returns>XAML 架构上下文。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriter.ShouldProvideLineInfo">
      <summary>获取一个值，将进行相应报告行信息服务是否应提供值，并因此，还应调用 <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /> 方法在相关时。</summary>
      <returns>true 如果行信息使用的编写器;否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.AccessLevel">
      <summary>获取或设置 XAML 编写器遵守的 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 权限。</summary>
      <returns>
        <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 权限。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler">
      <summary>获取或设置对 XAML 编写器在调用回调的引用 <see cref="M:System.ComponentModel.ISupportInitialize.BeginInit" /> 阶段创建的每个对象的对象生存期。</summary>
      <returns>通过 XAML 编写器在调用回调 <see cref="M:System.ComponentModel.ISupportInitialize.BeginInit" /> 对象生存期阶段。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler">
      <summary>获取或设置对 XAML 编写器在调用回调的引用 <see cref="M:System.ComponentModel.ISupportInitialize.EndInit" /> 阶段创建的每个对象的对象生存期。</summary>
      <returns>通过 XAML 编写器在调用回调 <see cref="M:System.ComponentModel.ISupportInitialize.EndInit" /> 对象生存期阶段。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler">
      <summary>获取或设置对由 XAML 编写器在每个创建的对象的对象生存期的成员写入阶段调用的回调的引用。</summary>
      <returns>一个由 XAML 编写器在对象生存期的成员写入阶段调用的回调。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler">
      <summary>获取或设置对由 XAML 编写器在每个创建的对象的对象生存期的成员写入前阶段调用的回调的引用。</summary>
      <returns>一个由 XAML 编写器在对象生存期的成员写入前阶段调用的回调。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope">
      <summary>获取或设置 XAML 名称范围，用于注册从 XAML 编写器的名称，如果 <see cref="P:System.Xaml.XamlObjectWriterSettings.RegisterNamesOnExternalNamescope" /> 是 true。</summary>
      <returns>XAML 名称范围用于注册名称。 默认值为 null。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.IgnoreCanConvert">
      <summary>获取或设置一个值，指定 XAML 编写器是否应忽略 （不调用） <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" /> 上的实现 <see cref="T:System.ComponentModel.TypeConverter" /> 在类型转换器的情况下。</summary>
      <returns>true 如果 XAML 编写器将忽略 <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" /> 实现; 否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.PreferUnconvertedDictionaryKeys">
      <summary>获取或设置一个值，确定是否禁用默认 <see cref="T:System.Xaml.XamlObjectWriter" /> 运行类型转换的功能 <paramref name="K" /> 组件 <see cref="T:System.Collections.Generic.Dictionary`2" /> 之前编写对象图表示形式。</summary>
      <returns>true 如果 <paramref name="K" /> 的类型转换 <see cref="T:System.Collections.Generic.Dictionary`2" /> 对象应被禁用。false 如果执行 <paramref name="K" /> 的类型转换 <see cref="T:System.Collections.Generic.Dictionary`2" /> 对象适用。 默认值为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.RegisterNamesOnExternalNamescope">
      <summary>获取或设置一个值，确定是否针对指定应发生名称注册 <see cref="P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope" />。</summary>
      <returns>true 如果是针对情况名称注册 <see cref="P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope" />; false 如果名称注册发生到父 XAML 名称范围。 默认值为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.RootObjectInstance">
      <summary>获取或设置为预先存在的根对象 <see cref="T:System.Xaml.XamlObjectWriter" /> 操作。</summary>
      <returns>预先存在的根对象 <see cref="T:System.Xaml.XamlObjectWriter" /> 操作。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.SkipDuplicatePropertyCheck">
      <summary>获取或设置一个值，确定是否省略 XAML 编写器，以检查检查重复的属性的代码路径。</summary>
      <returns>true 如果应省略重复的属性检查;否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.SkipProvideValueOnRoot">
      <summary>获取或设置一个值，该值指示是否 <see cref="T:System.Xaml.XamlObjectWriter" /> 应省略此项可调用 ProvideValue 对标记扩展，即相关时标记扩展表示对象图的根。</summary>
      <returns>true 如果 <see cref="T:System.Xaml.XamlObjectWriter" /> 应省略此项可调用 ProvideValue 对标记扩展; 否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.SourceBamlUri">
      <summary>用于在 BeginInitHandler 中替代实际 BaseUri。</summary>
      <returns>用于替代实际 BaseUri 的 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler">
      <summary>获取或设置用于调入 CLR 实现的对象编写器的处理程序 SetValue 为依赖项属性。</summary>
      <returns>处理这种情况下一个处理程序实现。</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.IsDisposed">
      <summary>获取是否 <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" /> 已调用。</summary>
      <returns>如果已调用 <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" />，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.IsEof">
      <summary>派生类中实现时，获取一个值，报表读取器位置是否位于文件结尾。</summary>
      <returns>true 如果位置是在 XAML 节点流; 的概念-的文件结束否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.Member">
      <summary>派生类中实现时，获取的当前成员的读取器位置，如果读取器位置位于 <see cref="F:System.Xaml.XamlNodeType.StartMember" />。</summary>
      <returns>当前成员;或 null, ，如果读取器位置不在成员上。</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.Namespace">
      <summary>派生类中实现时，获取当前节点中的 XAML 命名空间信息。</summary>
      <returns>XAML 命名空间的信息，如果可用，则否则为 null。</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.NodeType">
      <summary>派生类中实现时，获取当前节点的类型。</summary>
      <returns>值为 <see cref="T:System.Xaml.XamlNodeType" /> 枚举。</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.SchemaContext">
      <summary>派生类中实现时，获取一个对象，提供的信息集的 XAML 架构上下文信息。</summary>
      <returns>一个对象，提供的信息的 XAML 架构上下文信息设置。</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.Type">
      <summary>派生类中实现时，获取 <see cref="T:System.Xaml.XamlType" /> 当前节点。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlType" /> 的当前节点; 或 null, ，如果当前的读取器位置不在对象上。</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.Value">
      <summary>派生类中实现时，获取当前节点的值。</summary>
      <returns>当前节点; 的值或 null, ，如果当前的读取器位置不在 <see cref="F:System.Xaml.XamlNodeType.Value" /> 节点类型。</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.AllowProtectedMembersOnRoot">
      <summary>获取或设置一个值，该值指示是否根对象可能包括具有受保护的代码访问模型，当报告 XAML 类型表示形式的成员。</summary>
      <returns>true 如果根对象可能包括具有受保护的代码访问模型; 的成员否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.BaseUri">
      <summary>获取或设置用于解析相对路径的基 URI。</summary>
      <returns>要使用的基 URI。 默认值为 null。</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.IgnoreUidsOnPropertyElements">
      <summary>获取或设置一个值，指定 XAML 读取器是否应忽略的值 x:Uid 在属性元素存在的属性。</summary>
      <returns>true 如果读取器应忽略的值 x:Uid 的属性元素的属性。false 如果读取器应处理 x:Uid 的属性元素的属性。 默认值为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.LocalAssembly">
      <summary>获取或设置表示当前本地程序集进行处理的对象。 此程序集信息如用于调用帮助器 Api <see cref="M:System.Xaml.XamlType.GetAllMembers" />。</summary>
      <returns>CLR 反射 <see cref="T:System.Reflection.Assembly" /> 对象。</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.ProvideLineInfo">
      <summary>获取或设置一个值，指定是否将读取器可以提供行号和位置。</summary>
      <returns>true 如果读取器可以提供的行号和位置信息;否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.ValuesMustBeString">
      <summary>获取或设置一个值，指定是否将读取器将强制要求所有 Value 节点处理为 String 类型。</summary>
      <returns>true 如果读取器强制仅 String 中包含 Value 节点; 否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces">
      <summary>获取一个值，指定 XAML 架构及其上下文是否在查找 API 返回的值中使用完全限定的程序集名称。</summary>
      <returns>true 如果 XAML 架构和它的上下文查找 Api; 返回的值中使用完全限定的程序集名称否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlSchemaContext.ReferenceAssemblies">
      <summary>获取 XAML 架构上下文的引用程序集的可枚举集合。</summary>
      <returns>架构上下文的引用程序集的可枚举集合。 指定每个程序集信息项 <see cref="T:System.Reflection.Assembly" /> 值。</returns>
    </member>
    <member name="P:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity">
      <summary>获取一个值，指定的 XAML 架构和它的上下文是否支持拥有带相同 arity （多个输入参数） 的两个构造函数的标记扩展。</summary>
      <returns>true 如果架构上下文允许具有重复 arity; 标记扩展否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces">
      <summary>获取或设置一个值，指定 XAML 架构及其上下文是否在查找 API 返回的值中使用完全限定的程序集名称。</summary>
      <returns>true 如果 XAML 架构和它的上下文查找 Api; 返回的值中使用完全限定的程序集名称否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity">
      <summary>获取或设置一个值，指定是否允许拥有带相同 arity （多个输入参数） 的两个构造函数的标记扩展的 XAML 架构上下文。</summary>
      <returns>true 如果架构上下文允许具有重复 arity; 标记扩展否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.AllowedContentTypes">
      <summary>获取只读集合的类型可用作 <see cref="P:System.Xaml.XamlType.ContentProperty" /> 值这 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>可能的内容类型的只读集合。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.BaseType">
      <summary>获取 <see cref="T:System.Xaml.XamlType" /> 立即此 XAML 类型的基类型。 确定此值取决于此的基础类型 <see cref="T:System.Xaml.XamlType" /> 和架构上下文。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlType" /> 立即此 XAML 类型的基类型。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ConstructionRequiresArguments">
      <summary>获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" /> 必须具有参数 (通过泛型约束 x:TypeArguments, ，初始化文本或其他 XAML 技术) 来构造类型的有效实例。</summary>
      <returns>true 如果构造实例需要一些参数值，则为否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ContentProperty">
      <summary>获取 <see cref="T:System.Xaml.XamlMember" /> 的 content 属性的信息 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlMember" /> 内容属性的信息 <see cref="T:System.Xaml.XamlType" />。 可能是 null 如果不存在任何内容属性。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ContentWrappers">
      <summary>获取用于包装不严格的类型匹配，如在强类型化字符串时其内容的内容属性的类型 Collection&lt;T&gt;。</summary>
      <returns>可能的内容包装类型; 只读集合否则为 null。 请参阅“备注”。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.DeferringLoader">
      <summary>获取 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 表示延迟加载此类型的转换行为。</summary>
      <returns>
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 与 <see cref="T:System.Xaml.XamlDeferringLoader" /> 表示此类型的延迟的加载行为的约束。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.Invoker">
      <summary>获取 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 与此关联的实现 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>
        <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 与此关联的实现 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsAmbient">
      <summary>获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" /> 表示环境类型，根据 XAML 定义的信息。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlType" /> 表示环境类型; 否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsArray">
      <summary>获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" /> 表示一个数组。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlType" /> 表示一个数组; 否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsCollection">
      <summary>获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" /> 表示的集合。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlType" /> 表示的集合; 否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsConstructible">
      <summary>获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" /> 表示构造的类型，根据 XAML 定义的信息。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlType" /> 表示构造的类型; 否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsDictionary">
      <summary>获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" /> 表示字典中，根据 XAML 定义的信息。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlType" /> 表示字典; 否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsGeneric">
      <summary>获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" /> 表示泛型类型。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlType" /> 表示泛型类型; 否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsMarkupExtension">
      <summary>获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" /> 表示标记扩展。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlType" /> 表示标记扩展; 否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsNameScope">
      <summary>获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" /> 表示 XAML 名称范围，根据 XAML 定义的信息。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlType" /> 表示 XAML 名称范围; 否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsNameValid">
      <summary>获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" /> 使用有效的初始化 xamlName 字符串作为其 <see cref="P:System.Xaml.XamlType.Name" />。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlType" /> 使用有效的初始化 xamlName 字符串; 否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsNullable">
      <summary>获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" /> 表示 null 的类型，根据 XAML 定义的信息。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlType" /> 表示可以为 null 的类型; 否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsPublic">
      <summary>获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" /> 表示相关类型系统中的公共类型。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlType" /> 表示的公共类型; 否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsUnknown">
      <summary>获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" /> 表示的基础类型系统中无法解析的类型。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlType" /> 表示无法解析的类型; 否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsUsableDuringInitialization">
      <summary>获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" /> 自上而下构建 XAML 初始化过程。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlType" /> 自上而下的 XAML 初始化过程中; 否则为生成 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsWhitespaceSignificantCollection">
      <summary>获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" /> 表示空格有意义集合按照 XML 定义。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlType" /> 表示空格有意义的集合; 否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsXData">
      <summary>获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" /> 代表 XML XDATA, 、 每个 XAML 定义的信息。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlType" /> 表示 XDATA; 否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ItemType">
      <summary>获取一个值，提供的类型信息 Items 属性 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlType" /> 对象的集合中的项的类型，否则为 null, ，如果此 <see cref="T:System.Xaml.XamlType" /> 不表示集合。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.KeyType">
      <summary>获取一个值，提供的键属性的类型信息 <see cref="T:System.Xaml.XamlType" />, ，如果 <see cref="T:System.Xaml.XamlType" /> 表示字典。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlType" /> 字典用法，否则为键的类型的对象 null, ，如果此 <see cref="T:System.Xaml.XamlType" /> 不表示字典。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.MarkupExtensionReturnType">
      <summary>获取一个值，提供对返回的类型信息 ProvideValue 此 <see cref="T:System.Xaml.XamlType" />, ，如果它表示标记扩展。</summary>
      <returns>一个 <see cref="T:System.Xaml.XamlType" /> 对象的返回类型为标记扩展用法; 否则为 null, ，如果此 <see cref="T:System.Xaml.XamlType" /> 不表示标记扩展。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.Name">
      <summary>获取该类型的字符串名称这 <see cref="T:System.Xaml.XamlType" /> 表示。</summary>
      <returns>此 XAML 类型的字符串名称。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.PreferredXamlNamespace">
      <summary>获取是此主 XAML 命名空间的单个 XAML 命名空间 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>为此 XAML 类型的主 XAML 命名空间的字符串标识符。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.SchemaContext">
      <summary>获取活动 <see cref="T:System.Xaml.XamlSchemaContext" /> 用于处理此 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>活动 <see cref="T:System.Xaml.XamlSchemaContext" /> 用于处理此 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.TrimSurroundingWhitespace">
      <summary>获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" /> 具有空白处理修整周围的空白，其内容中的序列化的行为。</summary>
      <returns>true 如果此 <see cref="T:System.Xaml.XamlType" /> 表示一种使用空白在修剪; 否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.TypeArguments">
      <summary>获取类型参数的情况下的列表，这 <see cref="T:System.Xaml.XamlType" /> 表示泛型。</summary>
      <returns>将出现的类型参数类型;否则为 null, ，如果此 <see cref="T:System.Xaml.XamlType" /> 不表示泛型。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.TypeConverter">
      <summary>获取 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 与 <see cref="T:System.ComponentModel.TypeConverter" /> 约束表示类型的值的转换行为 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 与 <see cref="T:System.ComponentModel.TypeConverter" /> 约束表示类型的值的转换行为 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.UnderlyingType">
      <summary>获取 CLR <see cref="T:System.Type" /> 的基础这 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>CLR <see cref="T:System.Type" /> 的基础这 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ValueSerializer">
      <summary>获取 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 与 <see cref="T:System.Windows.Markup.ValueSerializer" /> 表示的值的值序列化行为的约束 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 与 <see cref="T:System.Windows.Markup.ValueSerializer" /> 表示的值的值序列化行为的约束 <see cref="T:System.Xaml.XamlType" />; 否则为 null。</returns>
    </member>
    <member name="P:System.Xaml.XamlWriter.IsDisposed">
      <summary>获取是否 <see cref="M:System.Xaml.XamlWriter.Dispose(System.Boolean)" /> 已调用。</summary>
      <returns>如果已调用 <see cref="M:System.Xaml.XamlWriter.Dispose(System.Boolean)" />，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlWriter.SchemaContext">
      <summary>派生类中实现时，获取活动的 XAML 架构上下文。</summary>
      <returns>活动的 XAML 架构上下文。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.HasLineInfo">
      <summary>获取一个值，指定是否使用行信息。</summary>
      <returns>true 如果行信息可用，则否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.IsEof">
      <summary>获取一个值，报告 XAML 节点流中的读取器位置是否位于文件结尾。</summary>
      <returns>true 如果在节点流; 概念-的文件末尾的位置否则为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.LineNumber">
      <summary>获取指向报表的行号。</summary>
      <returns>报告的行号。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.LinePosition">
      <summary>获取报表的行位置。</summary>
      <returns>报告的行位置。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.Member">
      <summary>如果当前的读取器位置位于在读取器位置获取的当前成员 <see cref="F:System.Xaml.XamlNodeType.StartMember" />。</summary>
      <returns>当前成员;或 null, ，如果当前的读取器位置不在成员上。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.Namespace">
      <summary>从当前节点中获取的 XAML 命名空间。</summary>
      <returns>从当前节点是否可用，则 XAML 命名空间否则为 null。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.NodeType">
      <summary>获取当前节点的类型。</summary>
      <returns>值为 <see cref="T:System.Xaml.XamlNodeType" /> 枚举。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.SchemaContext">
      <summary>获取一个对象，提供的信息集的架构信息。</summary>
      <returns>一个对象，提供的信息集的架构信息。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.Type">
      <summary>获取 <see cref="T:System.Xaml.XamlType" /> 当前节点。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlType" /> 的当前节点; 或 null, ，如果位置不在对象上。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.Value">
      <summary>获取当前节点的值。</summary>
      <returns>当前节点; 的值或 null, ，如果位置不在 <see cref="F:System.Xaml.XamlNodeType.Value" /> 节点类型。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReaderSettings.CloseInput">
      <summary>获取或设置一个值，该值指示是否基础流或文本读取器应关闭时 <see cref="T:System.Xaml.XamlXmlReader" /> 已关闭。</summary>
      <returns>true 如果基础流或读取器应关闭时 <see cref="T:System.Xaml.XamlXmlReader" /> 关闭; 否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReaderSettings.SkipXmlCompatibilityProcessing">
      <summary>获取或设置一个值，确定是否将读取器应不同于默认 <see cref="T:System.Xaml.XamlXmlReader" /> 如何处理标记兼容性的内容的行为。</summary>
      <returns>true 如果直接使用启动读取器，这意味着，作为主要流的一部分处理 XML 兼容性标记并不考虑兼容性问题。false 如果使用的默认行为，其中分别处理 XML 兼容性。 默认值为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReaderSettings.XmlLang">
      <summary>获取或设置读取器可能会提升的值设置为写入的编写器的语言 xml:lang 中节点的属性。</summary>
      <returns>要使用的可能字符串 xml:lang 取决于读取器的输出。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReaderSettings.XmlSpacePreserve">
      <summary>获取或设置一个值，确定 XAML 读取器是否指示任何 XAML 编写器编写 xml:space 中节点的属性。 如果需要该行为时，此信息将传递通过共享 XAML 架构上下文。</summary>
      <returns>true 如果正在处理 XAML 节点流的编写器可以写 xml:space="preserve" 中输出; false 如果 xml:space 属性不能编写在节点中。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlWriter.SchemaContext">
      <summary>获取 XAML 架构上下文这 <see cref="T:System.Xaml.XamlXmlWriter" /> 使用进行处理。</summary>
      <returns>XAML 架构上下文此 <see cref="T:System.Xaml.XamlXmlWriter" /> 用于 XAML 处理。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlWriter.Settings">
      <summary>获取编写器设置这 <see cref="T:System.Xaml.XamlXmlWriter" /> 用于 XAML 处理。</summary>
      <returns>编写器设置此 <see cref="T:System.Xaml.XamlXmlWriter" /> 用于 XAML 处理。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlWriterSettings.AssumeValidInput">
      <summary>获取或设置一个值，指定是否 <see cref="T:System.Xaml.XamlXmlWriter" /> 应始终认为以用于重复解析或其他错误检查有效的 XAML 输入。</summary>
      <returns>true 如果 <see cref="T:System.Xaml.XamlXmlWriter" /> 跳过某些验证或错误的检查，如在出现重复成员引发异常。false 如果 <see cref="T:System.Xaml.XamlXmlWriter" /> 时遇到无效 XAML 将引发异常。 默认值为 false。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlWriterSettings.CloseOutput">
      <summary>获取或设置一个值，指定是否 <see cref="T:System.Xaml.XamlXmlWriter" /> 上应立即关闭 Dispose 或其他操作，或是否 XAML 编写器应改为在关闭前的缓冲区输出。 请慎用此设置。立即关闭，可能会导致无效不能再次加载的 XAML。</summary>
      <returns>true 如果 <see cref="T:System.Xaml.XamlXmlWriter" /> 立即关闭 Dispose 或类似操作。false 如果剩余的缓冲输出写入之前 <see cref="T:System.Xaml.XamlXmlWriter" /> 被释放。 默认值为 false。</returns>
    </member>
    <member name="T:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute">
      <summary>以符号类型表示的旧报告的 XAML 标记扩展特征。</summary>
    </member>
    <member name="T:System.Windows.Markup.AmbientAttribute">
      <summary>指定应将某个属性或类型视为环境。 环境概念涉及 XAML 处理器如何确定成员的类型所有者。</summary>
    </member>
    <member name="T:System.Windows.Markup.ArrayExtension">
      <summary>实现对 .NET Framework XAML 服务的 x:Array 支持</summary>
    </member>
    <member name="T:System.Windows.Markup.ConstructorArgumentAttribute">
      <summary>指定可以使用非默认构造函数语法来初始化对象，而且由指定名称的属性提供构造信息。  此信息主要用于 XAML 序列化。</summary>
    </member>
    <member name="T:System.Windows.Markup.ContentPropertyAttribute">
      <summary>指示某种类型的哪个属性是 XAML 内容属性。 处理特性化类型的 XAML 表示形式的 XAML 子元素时，XAML 处理器会使用此信息。</summary>
    </member>
    <member name="T:System.Windows.Markup.ContentWrapperAttribute">
      <summary>指定将用于包装外部内容的关联集合类型的一个或多个类型。</summary>
    </member>
    <member name="T:System.Windows.Markup.DateTimeValueSerializer">
      <summary>将 <see cref="T:System.String" /> 的实例与 <see cref="T:System.DateTime" /> 的实例进行来回转换。</summary>
    </member>
    <member name="T:System.Windows.Markup.DependsOnAttribute">
      <summary>指示特性化属性依赖于另一个属性的值。</summary>
    </member>
    <member name="T:System.Windows.Markup.DictionaryKeyPropertyAttribute">
      <summary>指定提供隐式键值的关联类的属性。 对于 <see cref="T:System.Collections.IDictionary" /> 集合中的项，隐式键用于除 XAML 中定义的显式 x:Key 属性以外的键。</summary>
    </member>
    <member name="T:System.Windows.Markup.IComponentConnector">
      <summary>为命名 XAML 元素提供标记编译和工具支持，以及将事件处理程序附加到这些元素。</summary>
    </member>
    <member name="T:System.Windows.Markup.INameScope">
      <summary>针对如何在特定的 XAML 名称范围内访问元素的名称，以及如何强制该 XAML 名称范围内名称的唯一性，定义一个协定。</summary>
    </member>
    <member name="T:System.Windows.Markup.INameScopeDictionary">
      <summary>将统一在一起可枚举的集合和字典支持进行了适用于公开在 XAML 名称范围中的名称的字典。</summary>
    </member>
    <member name="T:System.Windows.Markup.IProvideValueTarget">
      <summary>表示一个服务，该服务报告标记扩展评估的情景对象和属性的关系。</summary>
    </member>
    <member name="T:System.Windows.Markup.IQueryAmbient">
      <summary>是否有指定的属性应被视为为环境当前作用域中的查询。</summary>
    </member>
    <member name="T:System.Windows.Markup.IUriContext">
      <summary>表示一个服务，该服务可使用应用程序上下文将提供的相对 URI 解析成绝对 URI。</summary>
    </member>
    <member name="T:System.Windows.Markup.IValueSerializerContext">
      <summary>定义提供给 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的上下文。 该上下文可用于允许序列化的特殊情况或不同的序列化模式。</summary>
    </member>
    <member name="T:System.Windows.Markup.IXamlTypeResolver">
      <summary>表示一种服务，该服务将 XAML 标记中的已命名元素解析为适当的 CLR 类型。</summary>
    </member>
    <member name="T:System.Windows.Markup.MarkupExtension">
      <summary>为可以由 .NET Framework XAML 服务及其他 XAML 读取器和 XAML 编写器支持的 XAML 标记扩展实现提供基类。</summary>
    </member>
    <member name="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute">
      <summary>报告标记扩展可以返回的类型。</summary>
    </member>
    <member name="T:System.Windows.Markup.MemberDefinition">
      <summary>提供用于标记技术在声明性 XAML 中定义的类成员的基类。</summary>
    </member>
    <member name="T:System.Windows.Markup.NameReferenceConverter">
      <summary>提供类型转换以将字符串名称转换为对具有该名称的对象的对象引用或对象图中返回对象的名称。</summary>
    </member>
    <member name="T:System.Windows.Markup.NameScopePropertyAttribute">
      <summary>指定提供 XAML 名称范围值的关联类的属性。</summary>
    </member>
    <member name="T:System.Windows.Markup.NullExtension">
      <summary>实现 XAML 标记扩展以返回 null 对象，你可使用此对象在 XAML 中将值显式设置为 null。</summary>
    </member>
    <member name="T:System.Windows.Markup.PropertyDefinition">
      <summary>支持在声明性 XAML 中定义类的属性标记技术。</summary>
    </member>
    <member name="T:System.Windows.Markup.Reference">
      <summary>实现 {x:Reference} 标记扩展。</summary>
    </member>
    <member name="T:System.Windows.Markup.RootNamespaceAttribute">
      <summary>表示一个程序集级别特性，它用于标识 Visual Studio 项目文件中 RootNamespace 属性的值。</summary>
    </member>
    <member name="T:System.Windows.Markup.RuntimeNamePropertyAttribute">
      <summary>表示将进行相应报告哪些类型的属性的类型级别属性映射到 XAML X:name 属性。</summary>
    </member>
    <member name="T:System.Windows.Markup.StaticExtension">
      <summary>实现返回静态字段和属性引用的标记扩展。</summary>
    </member>
    <member name="T:System.Windows.Markup.TrimSurroundingWhitespaceAttribute">
      <summary>向 XAML 处理器指示在序列化时应修剪标记中该类型元素四周的空白。</summary>
    </member>
    <member name="T:System.Windows.Markup.TypeExtension">
      <summary>实现根据字符串输入返回 <see cref="T:System.Type" /> 的标记扩展。</summary>
    </member>
    <member name="T:System.Windows.Markup.UidPropertyAttribute">
      <summary>指示提供的类的 CLR 属性 x:Uid Directive 值。</summary>
    </member>
    <member name="T:System.Windows.Markup.UsableDuringInitializationAttribute">
      <summary>指示在 XAML 对象图创建期间是否自上而下生成此类型。</summary>
    </member>
    <member name="T:System.Windows.Markup.ValueSerializer">
      <summary>为从对象表示形式进行序列化定义转换行为的抽象类。</summary>
    </member>
    <member name="T:System.Windows.Markup.WhitespaceSignificantCollectionAttribute">
      <summary>指示 XAML 处理器应以严格区分空格的方式处理某一集合类型。</summary>
    </member>
    <member name="T:System.Windows.Markup.XamlDeferLoadAttribute">
      <summary>指示类或属性的延迟的加载用途对 XAML （例如模板行为），并报告启用延迟的行为和其目标/内容类型的类。</summary>
    </member>
    <member name="T:System.Windows.Markup.XamlSetMarkupExtensionAttribute">
      <summary>表示可用于标记扩展提供一个值，且引用的处理程序，用于标记扩展设置操作的类。</summary>
    </member>
    <member name="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs">
      <summary>XAML 对象编写器设置使用的标记扩展的值时调用的回调提供数据。</summary>
    </member>
    <member name="T:System.Windows.Markup.XamlSetTypeConverterAttribute">
      <summary>指示一个类可以使用类型转换器提供一个值，并引用一个处理程序以使用类型转换器设置情况。</summary>
    </member>
    <member name="T:System.Windows.Markup.XamlSetTypeConverterEventArgs">
      <summary>XAML 编写器设置一个值，使用类型转换器调用时调用的回调提供数据。</summary>
    </member>
    <member name="T:System.Windows.Markup.XamlSetValueEventArgs">
      <summary>提供的回调的数据时调用 <see cref="T:System.Xaml.XamlObjectWriter" /> 设置某些值。</summary>
    </member>
    <member name="T:System.Windows.Markup.XData">
      <summary>表示可以显示为的值的文本数据 Value 节点。</summary>
    </member>
    <member name="T:System.Windows.Markup.XmlLangPropertyAttribute">
      <summary>标识要将与相关联的属性 xml: lang 属性。</summary>
    </member>
    <member name="T:System.Windows.Markup.XmlnsCompatibleWithAttribute">
      <summary>指定 XAML 命令空间可归入其他 XAML 命令空间。 通常，先前定义的 <see cref="T:System.Windows.Markup.XmlnsDefinitionAttribute" /> 中指示了包含 XAML 命令空间。</summary>
    </member>
    <member name="T:System.Windows.Markup.XmlnsDefinitionAttribute">
      <summary>指定 XAML 命名空间与 CLR 命名空间之间按程序集进行的映射，然后 XAML 对象编写器或 XAML 架构上下文使用后一种命名空间进行类型解析。</summary>
    </member>
    <member name="T:System.Windows.Markup.XmlnsPrefixAttribute">
      <summary>当在 XAML 文件（序列化）中编写元素和特性时，或与具有 XAML 编辑功能的设计环境进行交互时，标识要与 XAML 命名空间关联用于 XAML 的推荐前缀。</summary>
    </member>
    <member name="T:System.Xaml.AmbientPropertyValue">
      <summary>报告有关环境的属性，作为的一部分的信息 <see cref="T:System.Xaml.IAmbientProvider" /> 实现。</summary>
    </member>
    <member name="T:System.Xaml.AttachableMemberIdentifier">
      <summary>对于附加的成员提供 XAML 类型系统标识符表示形式。 标识符结构 parallels <paramref name="declaringType" />.<paramref name="memberName" /> 字符串使用可附加成员窗体。</summary>
    </member>
    <member name="T:System.Xaml.AttachablePropertyServices">
      <summary>提供静态帮助器方法，从可附加的属性获取值和访问器方法信息并使用的附加的属性存储。</summary>
    </member>
    <member name="T:System.Xaml.IAmbientProvider">
      <summary>表示一种服务，可以返回有关环境属性或类型转换器和标记扩展的环境类型的信息项。</summary>
    </member>
    <member name="T:System.Xaml.IAttachedPropertyStore">
      <summary>表示一个附加成员用于存储对象在其中设置附加的成员。 然后可以使用引用此可附加成员存储 <see cref="T:System.Xaml.AttachablePropertyServices" />。</summary>
    </member>
    <member name="T:System.Xaml.IDestinationTypeProvider">
      <summary>表示一种服务，可以返回目标类型的 CLR 类型系统标识符。 当反射或其他机制间接报告属性设置操作的目标类型时，目标类型是相关。</summary>
    </member>
    <member name="T:System.Xaml.INamespacePrefixLookup">
      <summary>表示一个可以返回给使用者的 XAML 命名空间映射的建议的前缀的服务。 使用者可能包括设计环境或序列化程序。</summary>
    </member>
    <member name="T:System.Xaml.IRootObjectProvider">
      <summary>描述可返回正在分析的标记的根对象的服务。</summary>
    </member>
    <member name="T:System.Xaml.IXamlIndexingReader">
      <summary>提供了一种服务，表示索引节点控件基于节点的 XAML 读取器的简单实现。</summary>
    </member>
    <member name="T:System.Xaml.IXamlLineInfo">
      <summary>描述用于报告的 XAML 读取器实现中的文本行信息的服务。</summary>
    </member>
    <member name="T:System.Xaml.IXamlLineInfoConsumer">
      <summary>描述 XAML 编写器可以使用报告的行信息，然后在输出中包含的信息的服务。</summary>
    </member>
    <member name="T:System.Xaml.IXamlNameProvider">
      <summary>提供过程中使用的服务保存并写入操作输入对象，并返回 XAML 名称。</summary>
    </member>
    <member name="T:System.Xaml.IXamlNameResolver">
      <summary>描述可以返回由 XAML 名称指定的对象，则或者，返回一个标记，用于将延迟名称解析的服务。 该服务还可以返回 XAML 名称范围中的所有命名对象的可枚举集合。</summary>
    </member>
    <member name="T:System.Xaml.IXamlNamespaceResolver">
      <summary>描述可以返回在 XAML 标记中进行映射，它根据其前缀的 XAML 命名空间的服务。</summary>
    </member>
    <member name="T:System.Xaml.IXamlObjectWriterFactory">
      <summary>表示生成的服务 <see cref="T:System.Xaml.XamlObjectWriter" /> 基于当前的内部分析器上下文。</summary>
    </member>
    <member name="T:System.Xaml.IXamlSchemaContextProvider">
      <summary>表示提供 XAML 架构上下文信息供类型转换器和标记扩展的服务。</summary>
    </member>
    <member name="T:System.Xaml.NamespaceDeclaration">
      <summary>通过将这些字符串值存储为单独的属性声明的标识符和 XAML 命名空间的前缀。</summary>
    </member>
    <member name="T:System.Xaml.Permissions.XamlAccessLevel">
      <summary>对程序集和类型为目的的加载的 XAML 定义访问控制。</summary>
    </member>
    <member name="T:System.Xaml.Permissions.XamlLoadPermission">
      <summary>声明从 XAML 读取器或编写器所使用的程序集加载类型的权限。</summary>
    </member>
    <member name="T:System.Xaml.Schema.AllowedMemberLocations">
      <summary>指定时，强制执行的属性上设置在 XAML 中，所报告的语法限制 <see cref="T:System.Xaml.XamlDirective" />。</summary>
    </member>
    <member name="F:System.Xaml.Schema.AllowedMemberLocations.None">
      <summary>不能完全在 XAML 中设置属性。 这是默认设置。</summary>
    </member>
    <member name="F:System.Xaml.Schema.AllowedMemberLocations.Attribute">
      <summary>XAML 特性语法中，可以设置属性。</summary>
    </member>
    <member name="F:System.Xaml.Schema.AllowedMemberLocations.MemberElement">
      <summary>XAML 属性元素语法中，可以设置属性。</summary>
    </member>
    <member name="F:System.Xaml.Schema.AllowedMemberLocations.Any">
      <summary>可以在任何一个属性设置 <see cref="F:System.Xaml.Schema.AllowedMemberLocations.Attribute" /> 或 <see cref="F:System.Xaml.Schema.AllowedMemberLocations.MemberElement" /> 位置。 （此枚举成员定义为这些值的组合中）。</summary>
    </member>
    <member name="T:System.Xaml.Schema.ShouldSerializeResult">
      <summary>定义序列化行为，如报告的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />。</summary>
    </member>
    <member name="F:System.Xaml.Schema.ShouldSerializeResult.Default">
      <summary>未知，推迟到该成员的类型。</summary>
    </member>
    <member name="F:System.Xaml.Schema.ShouldSerializeResult.True">
      <summary>序列化结果。</summary>
    </member>
    <member name="F:System.Xaml.Schema.ShouldSerializeResult.False">
      <summary>根本不序列化结果。</summary>
    </member>
    <member name="T:System.Xaml.Schema.XamlCollectionKind">
      <summary>描述使用的 XAML 成员的集合形式 （如果有）。</summary>
    </member>
    <member name="F:System.Xaml.Schema.XamlCollectionKind.None">
      <summary>XAML 成员不支持集合。</summary>
    </member>
    <member name="F:System.Xaml.Schema.XamlCollectionKind.Collection">
      <summary>支持 XAML 成员的列表或集合。</summary>
    </member>
    <member name="F:System.Xaml.Schema.XamlCollectionKind.Dictionary">
      <summary>XAML 成员支持字典 （键 / 值对）。</summary>
    </member>
    <member name="F:System.Xaml.Schema.XamlCollectionKind.Array">
      <summary>XAML 成员支持数组式的集合。</summary>
    </member>
    <member name="T:System.Xaml.Schema.XamlMemberInvoker">
      <summary>提供了可以通过技术以外反射访问成员特征 XAML 成员的一个扩展点。</summary>
    </member>
    <member name="T:System.Xaml.Schema.XamlTypeInvoker">
      <summary>提供了一个扩展点，可以构造通过反射和构造函数以外的技术 XAML 类型的实例。</summary>
    </member>
    <member name="T:System.Xaml.Schema.XamlTypeName">
      <summary>提供一种指定的 XAML 类型名称和命名空间方面。</summary>
    </member>
    <member name="T:System.Xaml.Schema.XamlTypeTypeConverter">
      <summary>将转换 <see cref="T:System.Xaml.XamlType" /> 对象与表示类型名称的字符串。 此功能用于 XAML 可扩展性由标记定义通过 <see cref="T:System.Windows.Markup.PropertyDefinition" />。</summary>
    </member>
    <member name="T:System.Xaml.Schema.XamlValueConverter`1">
      <summary>提供有关为基于非最终目标类型的输入的 XAML 生成初始化或序列化值的方法的公共 API 图面。 这包括标记扩展和类型转换器。</summary>
      <typeparam name="TConverterBase">CLR 基类的特定转换器此 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 表示。 通常这是以下项之一 ︰ <see cref="T:System.ComponentModel.TypeConverter" />; <see cref="T:System.Windows.Markup.MarkupExtension" />; <see cref="T:System.Windows.Markup.ValueSerializer" />;</typeparam>
    </member>
    <member name="T:System.Xaml.XamlBackgroundReader">
      <summary>实现双缓冲 <see cref="T:System.Xaml.XamlReader" /> 读取和写入不同的线程，可以将拆分。</summary>
    </member>
    <member name="T:System.Xaml.XamlDeferringLoader">
      <summary>表示一个 XAML 读取器行为的加载，并返回已推迟的内容。</summary>
    </member>
    <member name="T:System.Xaml.XamlDirective">
      <summary>如果成员还为 XAML 指令成员提供的 XAML 类型系统标识符。 XAML 读取器和 XAML 编写器使用 <see cref="T:System.Xaml.XamlDirective" /> 成员节点的处理过程中的标识符。 XAML 读取器位于上时，则使用此标识符 <see cref="F:System.Xaml.XamlNodeType.StartMember" /> 和 <see cref="P:System.Xaml.XamlMember.IsDirective" /> 是 true。</summary>
    </member>
    <member name="T:System.Xaml.XamlDuplicateMemberException">
      <summary>当 XAML 编写器尝试将某个值重复成员写入到同一个对象节点时引发的异常。</summary>
    </member>
    <member name="T:System.Xaml.XamlException">
      <summary>常规 XAML 读取器或 XAML 编写器异常引发的异常。 请参阅“备注”。</summary>
    </member>
    <member name="T:System.Xaml.XamlInternalException">
      <summary>在 XAML 读取和 XAML 编写过程中发生的内部不一致时引发异常。</summary>
    </member>
    <member name="T:System.Xaml.XamlLanguage">
      <summary>定义常量，以提供字符串对于 XAML 标记或使用 XAML 类型进行编程非常有用的对象。 这些字符串或对象是 XAML 语言概念，在.NET Framework XAML 服务中，XAML 语言概念的实现，或者对二者同时相关的。</summary>
    </member>
    <member name="T:System.Xaml.XamlMember">
      <summary>有关 XAML 类型的成员提供的 XAML 类型系统标识符。 标识符由 XAML 读取器和 XAML 编写器使用的成员节点的处理期间 (当 XAML 读取器定位在 <see cref="F:System.Xaml.XamlNodeType.StartMember" />) 也将说明 XAML 类型系统的常规逻辑。</summary>
    </member>
    <member name="T:System.Xaml.XamlNodeList">
      <summary>提供 XAML 节点，可用于方案如采用延迟方式编写 XAML 节点的列表。</summary>
    </member>
    <member name="T:System.Xaml.XamlNodeQueue">
      <summary>用于编写节点和再次读取提供的缓冲区。</summary>
    </member>
    <member name="T:System.Xaml.XamlNodeType">
      <summary>描述当前正在 XAML 读取器处理的节点的类型。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.None">
      <summary>读取器未定位在真正的节点 （例如，读取器可能会在文件结尾）。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.StartObject">
      <summary>读取器位于对象节点的开头。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.GetObject">
      <summary>读取器在对象节点和编写默认值或隐式值，而不是指定的对象值。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.EndObject">
      <summary>读取器末尾的对象节点。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.StartMember">
      <summary>读取器位于成员节点的开头。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.EndMember">
      <summary>读取器位于成员节点的末尾。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.Value">
      <summary>读取器都在一个节点，并且正在处理值内。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.NamespaceDeclaration">
      <summary>读取器位于 XML 命名空间声明内。</summary>
    </member>
    <member name="T:System.Xaml.XamlObjectEventArgs">
      <summary>为可插入序列以实现对象初始化和属性设置的回调提供数据。 这会影响 <see cref="T:System.Xaml.XamlObjectWriter" /> 生成的对象图。</summary>
    </member>
    <member name="T:System.Xaml.XamlObjectReader">
      <summary>提供了 <see cref="T:System.Xaml.XamlReader" /> 读取对象关系图，然后生成 XAML 节点流的实现。</summary>
    </member>
    <member name="T:System.Xaml.XamlObjectReaderException">
      <summary>由若干引发的异常 <see cref="T:System.Xaml.XamlObjectReader" /> 内部帮助器 Api。</summary>
    </member>
    <member name="T:System.Xaml.XamlObjectReaderSettings">
      <summary>指定处理规则或选项设置 <see cref="T:System.Xaml.XamlObjectReader" />。</summary>
    </member>
    <member name="T:System.Xaml.XamlObjectWriter">
      <summary>从源 XAML 节点流中创建的对象图。</summary>
    </member>
    <member name="T:System.Xaml.XamlObjectWriterException">
      <summary>当 XAML 编写器时引发的异常 (如 <see cref="T:System.Xaml.XamlObjectWriter" /> 类) 在尝试生成 XAML 节点流中的对象图时遇到错误。</summary>
    </member>
    <member name="T:System.Xaml.XamlObjectWriterSettings">
      <summary>提供有关的特定 XAML 编写器设置 <see cref="T:System.Xaml.XamlObjectWriter" />。</summary>
    </member>
    <member name="T:System.Xaml.XamlParseException">
      <summary>XAML 读取器无法处理到 XAML 节点流的 XAML 读取器源元素时，将引发异常。</summary>
    </member>
    <member name="T:System.Xaml.XamlReader">
      <summary>提供类，用于使用 XAML 输入以及生成 XAML 节点流的基本的定义。</summary>
    </member>
    <member name="T:System.Xaml.XamlReaderSettings">
      <summary>指定处理规则或选项设置 <see cref="T:System.Xaml.XamlReader" /> 实现。</summary>
    </member>
    <member name="T:System.Xaml.XamlSchemaContext">
      <summary>定义可重用的上下文，用于解释或映射 XAML 类型和支持这些程序集中的类型。</summary>
    </member>
    <member name="T:System.Xaml.XamlSchemaContextSettings">
      <summary>提供的可选设置 <see cref="T:System.Xaml.XamlSchemaContext" />。</summary>
    </member>
    <member name="T:System.Xaml.XamlSchemaException">
      <summary>一个绑定系统或 XAML 的另一个架构表示形式系统报告架构上下文的一个例外时，将引发异常。</summary>
    </member>
    <member name="T:System.Xaml.XamlServices">
      <summary>有关常见 XAML 任务读取 XAML 和写入对象图; 提供更高级别的服务 （静态方法）或读取对象图和写入用于序列化的 XAML 文件输出。</summary>
    </member>
    <member name="T:System.Xaml.XamlType">
      <summary>报告有关 XAML 类型作为整体的 XAML 系统在.NET Framework XAML 服务中实现的一部分的信息。</summary>
    </member>
    <member name="T:System.Xaml.XamlWriter">
      <summary>提供了默认的 XAML 编写器的实现和基类定义。 这不是使用默认 XAML 编写器;你也必须从中派生 <see cref="T:System.Xaml.XamlWriter" /> 并实现其抽象成员，或使用现有 <see cref="T:System.Xaml.XamlWriter" /> 派生的类。</summary>
    </member>
    <member name="T:System.Xaml.XamlWriterSettings">
      <summary>提供有关初始化设置 <see cref="T:System.Xaml.XamlWriter" /> 实现。</summary>
    </member>
    <member name="T:System.Xaml.XamlXmlReader">
      <summary>使用进程 XAML 标记从 XML 文件 <see cref="T:System.Xml.XmlReader" /> 中间，并生成 XAML 节点流。</summary>
    </member>
    <member name="T:System.Xaml.XamlXmlReaderSettings">
      <summary>指定处理规则或选项设置 <see cref="T:System.Xaml.XamlXmlReader" /> XAML 读取器实现。</summary>
    </member>
    <member name="T:System.Xaml.XamlXmlWriter">
      <summary>使用 <see cref="T:System.IO.TextWriter" /> 或 <see cref="T:System.Xml.XmlWriter" /> 支持类 XAML 节点流中写入的文本或标记序列化形式。</summary>
    </member>
    <member name="T:System.Xaml.XamlXmlWriterException">
      <summary>由某些引发的异常 <see cref="T:System.Xaml.XamlXmlWriter" /> Api。</summary>
    </member>
    <member name="T:System.Xaml.XamlXmlWriterSettings">
      <summary>提供有关初始化设置 <see cref="T:System.Xaml.XamlXmlWriter" /> XAML 编写器实现。</summary>
    </member>
  </members>
</doc>