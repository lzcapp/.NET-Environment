<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Core</name>
  </assembly>
  <members>
    <member name="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten">
      <summary>允许设置调用的委托 （事件处理程序方法） 获取每次发布的事件条件匹配的事件中指定此对象的查询。</summary>
    </member>
    <member name="E:System.Dynamic.ExpandoObject.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>在属性值更改时发生。</summary>
    </member>
    <member name="F:System.Dynamic.BindingRestrictions.Empty">
      <summary>表示一组空的绑定限制。 此字段为只读。</summary>
    </member>
    <member name="F:System.Dynamic.DynamicMetaObject.EmptyMetaObjects">
      <summary>表示 <see cref="T:System.Dynamic.DynamicMetaObject" /> 类型的空数组。 此字段为只读。</summary>
    </member>
    <member name="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances">
      <summary>表示系统资源允许的服务器实例的最大数量。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.CallSite`1.Target">
      <summary>级别 0 缓存中的专用的委托基于站点历史记录。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.Closure.Constants">
      <summary>表示非常用常量以及可在本地执行动态生成的方法引用的表达式。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.Closure.Locals">
      <summary>表示从父上下文提升的局部变量。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Globals">
      <summary>表示非常用常量以及可在本地执行动态生成的方法引用的表达式。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Locals">
      <summary>表示从父上下文提升的局部变量。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Parent">
      <summary>表示调用委托的执行范围。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.StrongBox`1.Value">
      <summary>表示值的 <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 引用。</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptHandle.#ctor">
      <summary>初始化 <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptHandle" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseHandle">
      <summary>释放由 Cryptography Next Generation (CNG) 对象的句柄。</summary>
      <returns>true 如果句柄释放成功，则否则为 false。</returns>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseNativeHandle">
      <summary>释放由 Cryptography Next Generation (CNG) 对象使用的本机句柄。</summary>
      <returns>true 如果句柄释放成功，则否则为 false。</returns>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle.#ctor">
      <summary>初始化 <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle.#ctor">
      <summary>初始化 <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle.#ctor">
      <summary>初始化 <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafePipeHandle.#ctor(System.IntPtr,System.Boolean)">
      <summary>初始化 <see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" /> 类的新实例。</summary>
      <param name="preexistingHandle">
        <see cref="T:System.IntPtr" /> 对象，表示要使用的预先存在的句柄。</param>
      <param name="ownsHandle">若要在终止阶段可靠地释放此句柄，则为 true；若要阻止可靠释放（不建议使用），则为 false。</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Generic.HashSet`1" /> 类的一个新实例，该实例为空并使用集类型的默认相等比较器。</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.HashSet`1" /> 类的一个新实例，该实例使用集类型的默认相等比较器，包含从指定的集合复制的元素，并且有足够的容量容纳所复制的这些元素。</summary>
      <param name="collection">其元素被复制到新集中的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.HashSet`1" /> 类的一个新实例，该实例使用集类型的指定相等比较器，包含从指定的集合复制的元素，并且有足够的容量容纳所复制的这些元素。</summary>
      <param name="collection">其元素被复制到新集中的集合。</param>
      <param name="comparer">在比较集中的值时使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 实现，或为 null 以使用集类型的默认 <see cref="T:System.Collections.Generic.EqualityComparer`1" /> 实现。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.HashSet`1" /> 类的一个新实例，该实例为空并使用集类型的指定相等比较器。</summary>
      <param name="comparer">在比较集中的值时使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 实现，或为 null 以使用集类型的默认 <see cref="T:System.Collections.Generic.EqualityComparer`1" /> 实现。</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Collections.Generic.HashSet`1" /> 类的新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，其中包含序列化 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象所需的信息。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 结构，其中包含与 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象关联的序列化流的源和目标。</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Add(`0)">
      <summary>将指定的元素添加到集中。</summary>
      <param name="item">要添加到集中的元素。</param>
      <returns>如果该元素添加到 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象中则为 true；如果该元素已存在则为 false。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Clear">
      <summary>从 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象中移除所有元素。</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Contains(`0)">
      <summary>确定 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象是否包含指定的元素。</summary>
      <param name="item">要在 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象中查找的元素。</param>
      <returns>如果 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象包含指定的元素，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[])">
      <summary>将 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象的元素复制到数组中。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象复制的元素的目标的一维数组。 该数组的索引必须从零开始。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32)">
      <summary>从指定数组索引处开始，将 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象的元素复制到数组中。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象复制的元素的目标的一维数组。 该数组的索引必须从零开始。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayIndex" /> 大于目标的长度 <paramref name="array" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32,System.Int32)">
      <summary>从指定数组索引处开始，将 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象的指定数目的元素复制到数组中。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象复制的元素的目标的一维数组。 该数组的索引必须从零开始。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <param name="count">要复制到 <paramref name="array" /> 的元素的数目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于 0。- 或 -<paramref name="count" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayIndex" /> 大于目标的长度 <paramref name="array" />。- 或 -<paramref name="count" /> 从可用空间大于 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CreateSetComparer">
      <summary>返回 <see cref="T:System.Collections.IEqualityComparer" /> 对象，该对象可用于对 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行相等测试。</summary>
      <returns>
        <see cref="T:System.Collections.IEqualityComparer" /> 对象，可用于对 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行深入的相等测试。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.Dispose">
      <summary>释放使用的所有资源 <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" /> 对象。</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.MoveNext">
      <summary>将枚举数推进到下一个元素 <see cref="T:System.Collections.Generic.HashSet`1" /> 集合。</summary>
      <returns>如果枚举数已成功地推进到下一个元素，则为 true；如果枚举数传递到集合的末尾，则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">创建枚举器后，已修改该集合。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
      <exception cref="T:System.InvalidOperationException">创建枚举器后，已修改该集合。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>从当前 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象中移除指定集合中的所有元素。</summary>
      <param name="other">要从 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象中移除的项的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象的枚举器。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 对象的 <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" /> 对象。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口并返回序列化 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象所需的数据。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，其中包含序列化 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象所需的信息。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 结构，其中包含与 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象关联的序列化流的源和目标。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象，以仅包含该对象和指定集合中存在的元素。</summary>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象是否为指定集合的真子集。</summary>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行比较的集合。</param>
      <returns>如果 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象是 <paramref name="other" /> 的真子集，则为 true；否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象是否为指定集合的真超集。</summary>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行比较的集合。</param>
      <returns>如果 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象是 <paramref name="other" /> 的真超集，则为 true；否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象是否为指定集合的子集。</summary>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行比较的集合。</param>
      <returns>如果 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象是 <paramref name="other" /> 的子集，则为 true；否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象是否为指定集合的超集。</summary>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行比较的集合。</param>
      <returns>如果 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象是 <paramref name="other" /> 的超集，则为 true；否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.OnDeserialization(System.Object)">
      <summary>实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并在完成反序列化之后引发反序列化事件。</summary>
      <param name="sender">反序列化事件源。</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 关联与当前对象 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象无效。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定是否当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象和指定的集合共享通用元素。</summary>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行比较的集合。</param>
      <returns>如果 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象和 <paramref name="other" /> 共享至少一个公共元素，则为 true；否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Remove(`0)">
      <summary>从 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象移除指定元素。</summary>
      <param name="item">要移除的元素。</param>
      <returns>如果成功找到并移除该元素，则为 true；否则为 false。  如果未在 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象中找到 <paramref name="item" />，则此方法返回 false。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})">
      <summary>从 <see cref="T:System.Collections.Generic.HashSet`1" /> 集合中移除与指定的谓词所定义的条件相匹配的所有元素。</summary>
      <param name="match">
        <see cref="T:System.Predicate`1" /> 委托，用于定义要移除的元素应满足的条件。</param>
      <returns>从 <see cref="T:System.Collections.Generic.HashSet`1" /> 集合中移除的元素数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定是否 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象和指定集合包含相同的元素。</summary>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行比较的集合。</param>
      <returns>如果 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象与 <paramref name="other" /> 相等，则为 true；否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改当前 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象以仅包含存在于该对象中或存在于指定集合中的元素（但并非两者）。</summary>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>向 <see cref="T:System.Collections.Generic.ICollection`1" /> 对象添加一个项。</summary>
      <param name="item">要添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 对象中的对象。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>返回循环访问集合的枚举数。</summary>
      <returns>一个可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 对象。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问集合的枚举数。</summary>
      <returns>一个可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.TrimExcess">
      <summary>将 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象的容量设置为它包含的实际元素数，向上舍入为接近的特定于实现的值。</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改当前 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象以包含存在于该对象中、指定集合中或两者中的所有元素。</summary>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventDescriptor.#ctor(System.Int32,System.Byte,System.Byte,System.Byte,System.Byte,System.Int32,System.Int64)">
      <summary>初始化 <see cref="T:System.Diagnostics.Eventing.EventDescriptor" /> 类的新实例。</summary>
      <param name="id">事件标识符。</param>
      <param name="version">该事件的版本。 版本指示事件定义修订。 可以使用此成员和 Id 成员来标识唯一的事件。</param>
      <param name="channel">定义事件的潜在目标。</param>
      <param name="level">指定在事件中包括的详细程度。</param>
      <param name="opcode">在写入事件时正在执行的操作。</param>
      <param name="task">标识正在写入事件的应用程序的逻辑组件。</param>
      <param name="keywords">指定事件类别的位掩码。 关键字可以包含一个或多个提供程序定义的关键字和 / 或标准关键字。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.#ctor(System.Guid)">
      <summary>初始化 <see cref="T:System.Diagnostics.Eventing.EventProvider" /> 类的新实例。</summary>
      <param name="providerGuid">唯一标识提供程序的 Guid。</param>
      <exception cref="T:System.InsufficientMemoryException">没有足够的内存来完成此操作。</exception>
      <exception cref="T:System.PlatformNotSupportedException">中的类 <see cref="N:System.Diagnostics.Eventing" /> 仅在 Windows Vista 上的命名空间工作。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="providerGuid" /> 参数不能为 null。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">ETW 子系统返回的错误。</exception>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.Close">
      <summary>从 ETW 子系统中移除的提供程序注册并释放所有非托管的资源。</summary>
      <exception cref="T:System.ComponentModel.Win32Exception">ETW 子系统返回的错误。</exception>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.CreateActivityId">
      <summary>提供程序创建一个唯一的活动标识符。</summary>
      <returns>在调用时使用的唯一 Guid <see cref="M:System.Diagnostics.Eventing.EventProvider.SetActivityId(System.Guid@)" /> 方法设置为提供程序的活动标识符。</returns>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.Dispose">
      <summary>释放由该使用的资源 <see cref="T:System.Diagnostics.Eventing.EventProvider" /> 对象。</summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.Dispose(System.Boolean)">
      <summary>释放由该使用的资源 <see cref="T:System.Diagnostics.Eventing.EventProvider" /> 对象。</summary>
      <param name="disposing">由于没有任何非托管的资源，此方法则忽略此参数。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.Finalize">
      <summary>释放资源并执行内部清理之前通过垃圾回收回收实例。</summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError">
      <summary>获取与事件写入失败相关联的最后一个错误。</summary>
      <returns>使用值以确定事件写入失败的原因。</returns>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.IsEnabled">
      <summary>确定是否任何会话启用提供程序，而不考虑用于启用的提供程序的级别和关键字值。</summary>
      <returns>是 true 如果该提供程序是启用对任何会话; 否则为 false。</returns>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.IsEnabled(System.Byte,System.Int64)">
      <summary>确定任何会话是否正在从提供程序请求指定的事件。</summary>
      <param name="level">在事件中包括的详细程度。</param>
      <param name="keywords">指定事件类别的位掩码。 此掩码应为事件清单中定义的关键字掩码相同。</param>
      <returns>是 true 如果任何会话正在请求指定的事件; 否则为 false。</returns>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.SetActivityId(System.Guid@)">
      <summary>设置使用的当前活动标识符 <see cref="Overload:System.Diagnostics.Eventing.EventProvider.WriteEvent" /> 方法。</summary>
      <param name="id">唯一活动标识符， <see cref="M:System.Diagnostics.Eventing.EventProvider.CreateActivityId" /> 方法返回。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Int32,System.IntPtr)">
      <summary>写入某个事件。 事件数据被指定为的内存块。</summary>
      <param name="eventDescriptor">一个实例 <see cref="T:System.Diagnostics.Eventing.EventDescriptor" /> ，它标识要写入的事件。</param>
      <param name="dataCount">将事件数据的大小 <paramref name="data" /> 参数磅为单位。 最大事件数据的大小是减去事件标头的大小限制为 64 KB。 事件的大小小于如果会话的缓冲区大小小于且会话中包括与该事件的扩展的数据项目。</param>
      <param name="data">指向要写入的事件数据的指针。</param>
      <returns>是 true 事件是否写入; 否则为 false。 如果为 false，则调用 <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> 方法，以确定失败的原因。</returns>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Object[])">
      <summary>写入某个事件。 事件数据指定为对象的数组。</summary>
      <param name="eventDescriptor">一个实例 <see cref="T:System.Diagnostics.Eventing.EventDescriptor" /> ，它标识要写入的事件。</param>
      <param name="eventPayload">包含要写入的事件数据的对象的数组。 对象必须在清单中指定的顺序。 数组仅限于 32 对象，其中只有八个可以是字符串。 该事件的最大数据大小是减去事件标头的大小限制为 64 KB。 事件的大小小于如果会话的缓冲区大小小于且会话中包括与该事件的扩展的数据项目。此参数可以为 null。</param>
      <returns>是 true 事件是否写入; 否则为 false。 如果为 false，则调用 <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> 方法，以确定失败的原因。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="eventPayload" /> 参数将包含太多对象或字符串。</exception>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.String)">
      <summary>写入某个事件。 事件数据指定为字符串。</summary>
      <param name="eventDescriptor">一个实例 <see cref="T:System.Diagnostics.Eventing.EventDescriptor" /> ，它标识要写入的事件。</param>
      <param name="data">要将作为事件数据写入的字符串。</param>
      <returns>是 true 事件是否写入; 否则为 false。 如果为 false，则调用 <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> 方法，以确定失败的原因。</returns>
      <exception cref="T:System.ArgumentException">如果 <paramref name="data" /> 是 null。</exception>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(System.String)">
      <summary>写入事件，其中包含一个字符串作为其数据。</summary>
      <param name="eventMessage">要作为事件数据写入字符串。</param>
      <returns>是 true 事件是否写入; 否则为 false。 如果为 false，则调用 <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> 方法，以确定失败的原因。</returns>
      <exception cref="T:System.ArgumentException">如果 <paramref name="eventMessage" /> 是 null。</exception>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(System.String,System.Byte,System.Int64)">
      <summary>写入事件，作为其数据包含一个字符串，如果级别和关键字值匹配的会话请求的事件。</summary>
      <param name="eventMessage">要作为事件数据写入字符串。</param>
      <param name="eventLevel">在事件中包括的详细程度。 如果提供程序使用某个清单来定义该事件，将此值设置为同一级别的清单中定义。</param>
      <param name="eventKeywords">指定事件类别的位掩码。 如果提供程序使用某个清单来定义该事件，则将该值设置为清单中定义的关键字掩码相同。</param>
      <returns>是 true 事件是否写入; 否则为 false。 如果为 false，则调用 <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> 方法，以确定失败的原因。</returns>
      <exception cref="T:System.ArgumentException">如果 <paramref name="eventMessage" /> 是 null。</exception>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Guid,System.Int32,System.IntPtr)">
      <summary>事件链接在一起在跟踪过程中端到端方案中的事件。 事件数据被指定为的内存块。</summary>
      <param name="eventDescriptor">一个实例 <see cref="T:System.Diagnostics.Eventing.EventDescriptor" /> ，它标识要写入的事件。</param>
      <param name="relatedActivityId">从上一个组件的活动标识符。 此参数用于将您的组件的事件链接到上一个组件的事件。</param>
      <param name="dataCount">将事件数据的大小 <paramref name="data" /> 参数磅为单位。 最大事件数据的大小是减去事件标头的大小限制为 64 KB。 事件的大小小于如果会话的缓冲区大小小于且会话中包括与该事件的扩展的数据项目。</param>
      <param name="data">指向要写入的事件数据的指针。</param>
      <returns>是 true 事件是否写入; 否则为 false。 如果为 false，则调用 <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> 方法，以确定失败的原因。</returns>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Guid,System.Object[])">
      <summary>事件链接在一起在跟踪过程中端到端方案中的事件。 事件数据指定为对象的数组。</summary>
      <param name="eventDescriptor">一个实例 <see cref="T:System.Diagnostics.Eventing.EventDescriptor" /> ，它标识要写入的事件。</param>
      <param name="relatedActivityId">从上一个组件的活动标识符。 此参数用于将您的组件的事件链接到上一个组件的事件。</param>
      <param name="eventPayload">包含要写入的事件数据的对象的数组。 数据必须是在清单中指定的顺序。 数组仅限于 32 对象，其中只有八个可以是字符串。 该事件的最大数据大小是减去事件标头的大小限制为 64 KB。 事件的大小小于如果会话的缓冲区大小小于且会话中包括与该事件的扩展的数据项目。</param>
      <returns>是 true 事件是否写入; 否则为 false。 如果为 false，则调用 <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> 方法，以确定失败的原因。</returns>
      <exception cref="T:System.ArgumentException">如果 <paramref name="eventPayload" /> 包含太多的对象或字符串。</exception>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.Eventing.EventProviderTraceListener" /> 类使用指定的提供程序的标识符。</summary>
      <param name="providerId">一个唯一的字符串 <see cref="T:System.Guid" /> 标识提供程序。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.Eventing.EventProviderTraceListener" /> 类使用指定的提供程序标识符和该侦听器的名称。</summary>
      <param name="providerId">一个唯一的字符串 <see cref="T:System.Guid" /> 标识提供程序。</param>
      <param name="name">该侦听器的名称。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.#ctor(System.String,System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.Eventing.EventProviderTraceListener" /> 类使用指定的提供程序标识符，分隔符的侦听器，侦听器的名称。</summary>
      <param name="providerId">一个唯一的字符串 <see cref="T:System.Guid" /> 标识提供程序。</param>
      <param name="name">该侦听器的名称。</param>
      <param name="delimiter">分隔符用于分隔事件数据。 (有关详细信息，请参阅 <see cref="P:System.Diagnostics.Eventing.EventProviderTraceListener.Delimiter" /> 属性。)</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.Close">
      <summary>关闭输出流以使其不再接收跟踪或调试输出。</summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.Fail(System.String,System.String)">
      <summary>实现 <see cref="T:System.Diagnostics.TraceListener" /> 类时，向所创建的侦听器发出错误信息和详细错误信息。</summary>
      <param name="message">要发出的消息。</param>
      <param name="detailMessage">要发出的详细消息。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.Flush">
      <summary>刷新输出缓冲区。</summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.GetSupportedAttributes">
      <summary>获取跟踪侦听器支持的自定义特性。</summary>
      <returns>为跟踪侦听器支持的自定义特性命名的字符串数组；或者如果没有自定义特性，则为 null。</returns>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
      <summary>向特定于侦听器的输出中写入跟踪信息、数据对象和事件信息。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" /> 对象。</param>
      <param name="source">标识输出时使用的名称，通常为生成跟踪事件的应用程序的名称。</param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一，指定引发跟踪的事件类型。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="data">要发出的跟踪数据。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
      <summary>向特定于侦听器的输出中写入跟踪信息、数据对象和事件信息。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" /> 对象。</param>
      <param name="source">标识输出时使用的名称，通常为生成跟踪事件的应用程序的名称。</param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一，指定引发跟踪的事件类型。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="data">要作为数据发出的对象数组。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)">
      <summary>向特定于侦听器的输出写入跟踪和事件信息。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" /> 对象。</param>
      <param name="source">标识输出时使用的名称，通常为生成跟踪事件的应用程序的名称。</param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一，指定引发跟踪的事件类型。</param>
      <param name="id">事件的数值标识符。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
      <summary>向特定于侦听器的输出中写入跟踪信息、消息和事件信息。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" /> 对象。</param>
      <param name="source">标识输出时使用的名称，通常为生成跟踪事件的应用程序的名称。</param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一，指定引发跟踪的事件类型。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="message">要写入的消息。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
      <summary>向特定于侦听器的输出中写入跟踪信息、格式化对象数组和事件信息。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" /> 对象。</param>
      <param name="source">标识输出时使用的名称，通常为生成跟踪事件的应用程序的名称。</param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一，指定引发跟踪的事件类型。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="format">一个格式字符串，其中包含零个或多个格式项，它们对应于 <paramref name="args" /> 数组中的对象。</param>
      <param name="args">包含零个或多个要格式化的对象的 object 数组。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)">
      <summary>向侦听器特定的输出中写入跟踪信息、消息、相关活动标识和事件信息。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" /> 对象。</param>
      <param name="source">标识输出时使用的名称，通常为生成跟踪事件的应用程序的名称。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="message">要写入的消息。</param>
      <param name="relatedActivityId">标识相关活动的 <see cref="T:System.Guid" /> 对象。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.Write(System.String)">
      <summary>在派生类中被重写时，向在该派生类中所创建的侦听器写入指定消息。</summary>
      <param name="message">要写入的消息。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.WriteLine(System.String)">
      <summary>在派生类中被重写时，向在该派生类中所创建的侦听器写入消息，后跟行结束符。</summary>
      <param name="message">要写入的消息。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventBookmark.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>根据指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventBookmark" /> 类的新实例。</summary>
      <param name="info">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，它包含序列化新所必需的信息 <see cref="T:System.Diagnostics.Eventing.Reader.EventBookmark" /> 对象。</param>
      <param name="context">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，其中包含与新关联的序列化流的源 <see cref="T:System.Diagnostics.Eventing.Reader.EventBookmark" />。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventBookmark.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象序列化目标对象所需的数据。</summary>
      <param name="info">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">此序列化的目标。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventBookmark.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化目标对象所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</summary>
      <param name="info">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">此序列化的目标。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.#ctor(System.String)">
      <summary>初始化新 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogConfiguration" /> 对象指定要为其获取信息和配置设置的本地事件日志。</summary>
      <param name="logName">要获取其信息和配置设置的本地事件日志名称。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.#ctor(System.String,System.Diagnostics.Eventing.Reader.EventLogSession)">
      <summary>初始化新 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogConfiguration" /> 对象通过指定要为其获取信息和配置设置日志的名称。 日志可能是本地计算机或基于指定的事件日志会话的远程计算机上。</summary>
      <param name="logName">要为其获取信息和配置设置的事件日志名称。</param>
      <param name="session">用于确定指定的日志所属的事件日志服务事件日志会话。 会话可以连接到本地计算机或远程计算机上的事件日志服务。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.Dispose">
      <summary>释放此对象使用的所有资源。</summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.Dispose(System.Boolean)">
      <summary>释放此对象使用的非托管的资源，还可以释放托管的资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges">
      <summary>将配置设置保存 </summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogException.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogException.#ctor(System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogException" /> 类异常的错误代码。</summary>
      <param name="errorCode">在读取或配置事件日志时出现的错误的错误代码相关的信息。 有关详细信息和事件日志的一组相关的错误代码，请参阅 http://go.microsoft.com/fwlink/?LinkId=82629。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogException" /> 类的新实例。</summary>
      <param name="serializationInfo">存放有关所引发异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，它包含有关源或目标的上下文信息。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogException.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogException" /> 类通过指定用于描述当前异常的错误消息。</summary>
      <param name="message">描述当前异常的错误消息。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogException.#ctor(System.String,System.Exception)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogException" /> 类使用的错误消息和内部异常。</summary>
      <param name="message">描述当前异常的错误消息。</param>
      <param name="innerException">导致当前异常的异常实例。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>设置有关异常的信息的 SerializationInfo 对象。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 包含有关所引发的异常的序列化的对象数据的对象。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，它包含有关源或目标的上下文信息。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException" /> 类的新实例。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 包含有关所引发的异常的序列化的对象数据的对象。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，它包含有关源或目标的上下文信息。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException" /> 类通过指定用于描述当前异常的错误消息。</summary>
      <param name="message">描述当前异常的错误消息。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException.#ctor(System.String,System.Exception)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException" /> 类使用的错误消息和内部异常。</summary>
      <param name="message">描述当前异常的错误消息。</param>
      <param name="innerException">导致当前异常的异常实例。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogNotFoundException.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogNotFoundException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogNotFoundException" /> 类的新实例。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 包含有关所引发的异常的序列化的对象数据的对象。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，它包含有关源或目标的上下文信息。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogNotFoundException.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogNotFoundException" /> 类通过指定用于描述当前异常的错误消息。</summary>
      <param name="message">描述当前异常的错误消息。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogNotFoundException.#ctor(System.String,System.Exception)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogNotFoundException" /> 类使用的错误消息和内部异常。</summary>
      <param name="message">描述当前异常的错误消息。</param>
      <param name="innerException">导致当前异常的异常实例。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogPropertySelector.#ctor(System.Collections.Generic.IEnumerable{System.String})">
      <summary>初始化新 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogPropertySelector" /> 类实例。</summary>
      <param name="propertyQueries">用来从该事件的 XML 表示中提取值的 XPath 查询。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogPropertySelector.Dispose">
      <summary>释放此对象使用的所有资源。</summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogPropertySelector.Dispose(System.Boolean)">
      <summary>释放此对象使用的非托管的资源，还可以释放托管的资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException" /> 类的新实例。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 包含有关所引发的异常的序列化的对象数据的对象。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，它包含有关源或目标的上下文信息。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException" /> 类通过指定用于描述当前异常的错误消息。</summary>
      <param name="message">描述当前异常的错误消息。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException.#ctor(System.String,System.Exception)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException" /> 类使用的错误消息和内部异常。</summary>
      <param name="message">描述当前异常的错误消息。</param>
      <param name="innerException">导致当前异常的异常实例。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogQuery.#ctor(System.String,System.Diagnostics.Eventing.Reader.PathType)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogQuery" /> 类通过指定查询的目标。 目标可以是活动的事件日志或日志文件。</summary>
      <param name="path">要查询或查询的事件日志文件的路径的名称。</param>
      <param name="pathType">指定是否在 path 参数中使用的字符串指定的事件日志或事件日志文件的路径名称。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogQuery.#ctor(System.String,System.Diagnostics.Eventing.Reader.PathType,System.String)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogQuery" /> 类通过指定查询和事件查询的目标。 目标可以是活动的事件日志或日志文件。</summary>
      <param name="path">要查询或查询的事件日志文件的路径的名称。</param>
      <param name="pathType">指定是否在 path 参数中使用的字符串指定的事件日志或事件日志文件的路径名称。</param>
      <param name="query">用于检索与查询条件匹配的事件的事件查询。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> 通过指定一个事件查询类。</summary>
      <param name="eventQuery">用于检索事件的事件查询。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> 类通过指定一个事件查询和用作开始查询数据的位置的书签。</summary>
      <param name="eventQuery">用于检索事件的事件查询。</param>
      <param name="bookmark">使用事件日志或事件的流中的起始位置为书签 （占位符）。 仅在将由查询返回在书签事件后，记录的事件。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> 类通过指定要从中检索事件的活动事件日志。</summary>
      <param name="path">要从中检索事件的事件日志的名称。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.String,System.Diagnostics.Eventing.Reader.PathType)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> 类通过指定要从中检索事件的事件日志或要从中检索事件的日志文件的路径的名称。</summary>
      <param name="path">事件日志，从其检索事件或要从中检索事件的事件日志文件的路径的名称。</param>
      <param name="pathType">指定是否在 path 参数中使用的字符串指定的事件日志或事件日志文件的路径名称。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.CancelReading">
      <summary>取消当前的查询操作。</summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.Dispose">
      <summary>释放此对象使用的所有资源。</summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.Dispose(System.Boolean)">
      <summary>释放此对象使用的非托管的资源，还可以释放托管的资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent">
      <summary>读取此对象中的事件查询返回的下一个事件。</summary>
      <returns>返回 <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" /> 对象。</returns>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent(System.TimeSpan)">
      <summary>读取此对象中的事件查询返回的下一个事件。</summary>
      <param name="timeout">允许读取的操作以取消该操作之前运行的最大时间。</param>
      <returns>返回 <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" /> 对象。</returns>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.Seek(System.Diagnostics.Eventing.Reader.EventBookmark)">
      <summary>更改要读取的下一个事件将是从哪里来通过指定书签事件的事件流中的位置。 记录将检索书签事件之前的任何事件。</summary>
      <param name="bookmark">使用事件日志或事件的流中的起始位置为书签 （占位符）。 只有发生后将由查询返回在书签事件记录的事件。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.Seek(System.Diagnostics.Eventing.Reader.EventBookmark,System.Int64)">
      <summary>更改位置在事件流中读取的下一个事件将是从哪里来通过指定书签事件和事件与书签的偏移的量。 在书签加上偏移量将会检索前记录任何事件。</summary>
      <param name="bookmark">使用事件日志或事件的流中的起始位置为书签 （占位符）。 只有发生后将由查询返回在书签事件记录的事件。</param>
      <param name="offset">事件，以更改该书签的位置偏移的量。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.Seek(System.IO.SeekOrigin,System.Int64)">
      <summary>更改事件流中读取的下一个事件将是从哪里来通过指定的起始位置和距离的起始位置的偏移量中的位置。 未记录之前将检索的起始位置加上偏移量的事件。</summary>
      <param name="origin">取值范围为 <see cref="T:System.IO.SeekOrigin" /> 枚举定义中的什么位置事件就可以开始查询事件的流。</param>
      <param name="offset">要添加到原点的事件的偏移的量。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReadingException.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReadingException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReadingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReadingException" /> 类的新实例。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 包含有关所引发的异常的序列化的对象数据的对象。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，它包含有关源或目标的上下文信息。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReadingException.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReadingException" /> 类通过指定用于描述当前异常的错误消息。</summary>
      <param name="message">描述当前异常的错误消息。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReadingException.#ctor(System.String,System.Exception)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReadingException" /> 类使用的错误消息和内部异常。</summary>
      <param name="message">描述当前异常的错误消息。</param>
      <param name="innerException">导致当前异常的异常实例。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogRecord.Dispose(System.Boolean)">
      <summary>释放此对象使用的非托管的资源，还可以释放托管的资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogRecord.FormatDescription">
      <summary>获取当前区域设置中的事件消息。</summary>
      <returns>返回一个字符串，包含当前区域设置中的事件消息。</returns>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogRecord.FormatDescription(System.Collections.Generic.IEnumerable{System.Object})">
      <summary>获取事件消息，消息中的变量替换为指定值。</summary>
      <param name="values">用于替换事件消息中的变量的值。 变量表示通过 %n，其中 n 是一个数字。</param>
      <returns>返回一个字符串，包含当前区域设置中的事件消息。</returns>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogRecord.GetPropertyValues(System.Diagnostics.Eventing.Reader.EventLogPropertySelector)">
      <summary>如果事件有 XML 表示形式，获取的用户提供的事件属性中，或基于 XPath 的数据的结果值的枚举。</summary>
      <param name="propertySelector">选择要返回的属性值。</param>
      <returns>返回的对象的列表。</returns>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogRecord.ToXml">
      <summary>获取事件的 XML 表示形式。 所有事件属性均以该事件的 XML 表示。 XML 符合 event schema。</summary>
      <returns>返回一个字符串，包含该事件的 XML 表示。</returns>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.#ctor">
      <summary>初始化新 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" /> 对象，请与本地事件日志服务建立连接。</summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.#ctor(System.String)">
      <summary>初始化新 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" /> 对象，并建立与指定的计算机上的事件日志服务的连接。 调用该方法的用户的凭据 （用户名和密码） 的凭据用于访问远程计算机。</summary>
      <param name="server">若要连接到事件日志服务的计算机的名称。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.#ctor(System.String,System.String,System.String,System.Security.SecureString,System.Diagnostics.Eventing.Reader.SessionAuthentication)">
      <summary>初始化新 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" /> 对象，并建立与指定的计算机上的事件日志服务的连接。 指定的凭据 （用户名和密码） 的凭据用于访问远程计算机。</summary>
      <param name="server">若要连接到事件日志服务的计算机的名称。</param>
      <param name="domain">指定用户的域。</param>
      <param name="user">用来连接到远程计算机的用户名称。</param>
      <param name="password">用于连接到远程计算机的密码。</param>
      <param name="logOnType">要用来连接到远程计算机的连接类型。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.CancelCurrentOperations">
      <summary>取消此会话对象连接到的事件日志服务当前处于活动状态的任何操作 （如读取事件日志或订阅到事件日志）。</summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.ClearLog(System.String)">
      <summary>清除指定的事件日志中的事件。</summary>
      <param name="logName">要清除的所有事件的事件日志的名称。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.ClearLog(System.String,System.String)">
      <summary>从指定的事件日志中清除事件并将清除的事件保存到指定的文件。</summary>
      <param name="logName">要清除的所有事件的事件日志的名称。</param>
      <param name="backupPath">指向要在其中保存已清除的事件的文件的路径。 该文件应以.evtx 结尾。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.Dispose">
      <summary>释放此对象使用的所有资源。</summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.Dispose(System.Boolean)">
      <summary>释放此对象使用的非托管的资源，还可以释放托管的资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.ExportLog(System.String,System.Diagnostics.Eventing.Reader.PathType,System.String,System.String)">
      <summary>将事件导出到外部的日志文件。 事件存储事件消息中。</summary>
      <param name="path">要从中导出事件，事件日志或要从中导出事件的事件日志文件的路径的名称。</param>
      <param name="pathType">指定是否在 path 参数中使用的字符串指定的事件日志或事件日志文件的路径名称。</param>
      <param name="query">用于选择要导出的事件的查询。  仅限于从查询返回的事件将被导出。</param>
      <param name="targetFilePath">在其中执行此方法后将存储导出的事件日志文件 （以扩展名为.evtx） 的路径。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.ExportLog(System.String,System.Diagnostics.Eventing.Reader.PathType,System.String,System.String,System.Boolean)">
      <summary>将事件导出到外部的日志文件。 可以设置一个标志以指示该方法将继续导出事件，即使指定的查询失败时对某些日志。 事件存储事件消息中。</summary>
      <param name="path">要从中导出事件，事件日志或要从中导出事件的事件日志文件的路径的名称。</param>
      <param name="pathType">指定是否在 path 参数中使用的字符串指定的事件日志或事件日志文件的路径名称。</param>
      <param name="query">用于选择要导出的事件的查询。 仅限于从查询返回的事件将被导出。</param>
      <param name="targetFilePath">在其中执行此方法后将存储导出的事件日志文件 （以扩展名为.evtx） 的路径。</param>
      <param name="tolerateQueryErrors">true 指示该方法将继续导出事件，即使指定的查询失败时对某些日志和 false 指示此方法将不继续导出时指定的查询失败的事件。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.ExportLogAndMessages(System.String,System.Diagnostics.Eventing.Reader.PathType,System.String,System.String)">
      <summary>将事件和其消息导出到外部的日志文件。</summary>
      <param name="path">要从中导出事件，事件日志或要从中导出事件的事件日志文件的路径的名称。</param>
      <param name="pathType">指定是否在 path 参数中使用的字符串指定的事件日志或事件日志文件的路径名称。</param>
      <param name="query">用于选择要导出的事件的查询。  仅限于从查询返回的事件将被导出。</param>
      <param name="targetFilePath">在其中执行此方法后将存储导出的事件日志文件 （以扩展名为.evtx） 的路径。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.ExportLogAndMessages(System.String,System.Diagnostics.Eventing.Reader.PathType,System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
      <summary>将事件和其消息导出到外部的日志文件。 可以设置一个标志以指示该方法将继续导出事件，即使指定的查询失败时对某些日志。 事件消息将导出到指定的语言。</summary>
      <param name="path">要从中导出事件，事件日志或要从中导出事件的事件日志文件的路径的名称。</param>
      <param name="pathType">指定是否在 path 参数中使用的字符串指定的事件日志或事件日志文件的路径名称。</param>
      <param name="query">用于选择要导出的事件的查询。  仅限于从查询返回的事件将被导出。</param>
      <param name="targetFilePath">在其中执行此方法后将存储导出的事件日志文件 （以扩展名为.evtx） 的路径。</param>
      <param name="tolerateQueryErrors">true 指示该方法将继续导出事件，即使指定的查询失败时对某些日志和 false 指示此方法将不继续导出时指定的查询失败的事件。</param>
      <param name="targetCultureInfo">指定的导出的事件消息将保留在哪种语言的区域性。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.GetLogInformation(System.String,System.Diagnostics.Eventing.Reader.PathType)">
      <summary>获取一个对象，包含指定的事件日志的运行时信息。</summary>
      <param name="logName">事件日志以获取其信息或要获取其相关信息的事件日志文件的路径的名称。</param>
      <param name="pathType">指定是否在 path 参数中使用的字符串指定的事件日志或事件日志文件的路径名称。</param>
      <returns>返回 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogInformation" /> 对象，其中包含有关指定的日志信息。</returns>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.GetLogNames">
      <summary>获取与事件日志服务注册的所有事件日志名称的可枚举集合。</summary>
      <returns>返回包含事件日志名称的字符串的可枚举集合。</returns>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.GetProviderNames">
      <summary>获取与事件日志服务注册的所有事件提供程序名称的可枚举集合。 事件提供程序的应用程序将事件发布到事件日志。</summary>
      <returns>返回包含事件提供程序名称的字符串的可枚举集合。</returns>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> 通过指定一个事件查询类。</summary>
      <param name="eventQuery">指定事件订阅的查询。 当在查询中，以表示标准相匹配，将记录一个事件则 <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> 引发事件。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> 类通过指定一个事件查询和用作开始查询数据的位置的书签。</summary>
      <param name="eventQuery">指定事件订阅的查询。 当在查询中，以表示标准相匹配，将记录一个事件则 <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> 引发事件。</param>
      <param name="bookmark">使用事件日志或事件的流中的起始位置为书签 （占位符）。 只有发生后将由查询返回在书签事件记录的事件。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark,System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> 通过指定一个事件查询、 书签用作开始位置的查询中和一个布尔值，确定是否读取事件的事件日志中已存在的类。</summary>
      <param name="eventQuery">指定事件订阅的查询。 当在查询中，以表示标准相匹配，将记录一个事件则 <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> 引发事件。</param>
      <param name="bookmark">使用事件日志或事件的流中的起始位置为书签 （占位符）。 只有发生后将由查询返回在书签事件记录的事件。</param>
      <param name="readExistingEvents">一个布尔值，确定是否读取事件日志中已存在的事件。 如果此值为 true, ，然后读取现有事件，如果此值为 false, ，则不会读取现有事件。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> 类通过指定的名称或到事件日志的路径。</summary>
      <param name="path">路径或事件的事件日志监视器的名称。 如果在此事件日志中记录任何事件则 <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> 引发事件。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose">
      <summary>释放此对象使用的所有资源。</summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose(System.Boolean)">
      <summary>释放此对象使用的非托管的资源，还可以释放托管的资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventRecord.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventRecord.Dispose">
      <summary>释放此对象使用的所有资源。</summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventRecord.Dispose(System.Boolean)">
      <summary>释放此对象使用的非托管的资源，还可以释放托管的资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventRecord.FormatDescription">
      <summary>获取当前区域设置中的事件消息。</summary>
      <returns>返回一个字符串，包含当前区域设置中的事件消息。</returns>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventRecord.FormatDescription(System.Collections.Generic.IEnumerable{System.Object})">
      <summary>获取事件消息，消息中的变量替换为指定值。</summary>
      <param name="values">用于替换事件消息中的变量的值。 变量表示通过 %n，其中 n 是一个数字。</param>
      <returns>返回一个字符串，包含当前区域设置中的事件消息。</returns>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventRecord.ToXml">
      <summary>获取事件的 XML 表示形式。 所有的事件属性均在事件表示 XML。 XML 符合 event schema。</summary>
      <returns>返回一个字符串，包含该事件的 XML 表示。</returns>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.ProviderMetadata.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.ProviderMetadata" /> 类通过指定要检索其信息的提供程序的名称。</summary>
      <param name="providerName">你想要检索其信息的事件提供程序的名称。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.ProviderMetadata.#ctor(System.String,System.Diagnostics.Eventing.Reader.EventLogSession,System.Globalization.CultureInfo)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.ProviderMetadata" /> 类通过指定要检索有关的信息、 提供程序注册的事件日志服务以及你想要返回中的信息的语言提供程序的名称。</summary>
      <param name="providerName">你想要检索其信息的事件提供程序的名称。</param>
      <param name="session">
        <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" /> 对象，指定是否要从本地计算机上的提供程序或远程计算机上的提供程序获取提供程序信息。</param>
      <param name="targetCultureInfo">指定应在返回的信息的语言的区域性。</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.ProviderMetadata.Dispose">
      <summary>释放此对象使用的所有资源。</summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.ProviderMetadata.Dispose(System.Boolean)">
      <summary>释放此对象使用的非托管的资源，还可以释放托管的资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String)">
      <summary>通过将指定文件用作调试和跟踪输出的接收方来初始化 <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> 类的新实例。</summary>
      <param name="fileName">日志文件的路径。</param>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String)">
      <summary>通过将指定文件用作调试和跟踪输出的接收方，来初始化具有指定名称的 <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> 类的新实例。</summary>
      <param name="fileName">日志文件的路径。</param>
      <param name="name">侦听器名称。</param>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32)">
      <summary>通过将指定文件用作调试和跟踪输出的接收方，来初始化具有指定名称和指定缓冲区大小的 <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> 类的新实例。</summary>
      <param name="fileName">日志文件的路径。</param>
      <param name="name">侦听器名称。</param>
      <param name="bufferSize">输出缓冲区的大小（以字节为单位）。</param>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption)">
      <summary>通过将具有指定日志保留策略的指定文件用作调试和跟踪输出的接收方，来初始化具有指定名称和指定缓冲区大小的 <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> 类的新实例。</summary>
      <param name="fileName">日志文件的路径。</param>
      <param name="name">侦听器名称。</param>
      <param name="bufferSize">输出缓冲区的大小（以字节为单位）。</param>
      <param name="logRetentionOption">
        <see cref="T:System.Diagnostics.TraceLogRetentionOption" /> 值之一。</param>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption,System.Int64)">
      <summary>通过将具有指定日志保留策略和最大大小的指定文件用作调试和跟踪输出的接收方，来初始化具有指定名称和缓冲区大小的 <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> 类的新实例。</summary>
      <param name="fileName">日志文件的路径。</param>
      <param name="name">侦听器名称。</param>
      <param name="bufferSize">输出缓冲区的大小（以字节为单位）。</param>
      <param name="logRetentionOption">
        <see cref="T:System.Diagnostics.TraceLogRetentionOption" /> 值之一。</param>
      <param name="maximumFileSize">最大文件大小（以字节为单位）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumFileSize" /> 小于 <paramref name="bufferSize" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumFileSize" /> 为负数。</exception>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption,System.Int64,System.Int32)">
      <summary>通过将具有指定日志保留策略、最大大小和文件计数的指定文件用作调试和跟踪输出的接收方，来初始化具有指定名称和指定缓冲区大小的 <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> 类的新实例。</summary>
      <param name="fileName">日志文件的路径。</param>
      <param name="name">侦听器名称。</param>
      <param name="bufferSize">输出缓冲区的大小（以字节为单位）。</param>
      <param name="logRetentionOption">
        <see cref="T:System.Diagnostics.TraceLogRetentionOption" /> 值之一。</param>
      <param name="maximumFileSize">最大文件大小（以字节为单位）。</param>
      <param name="maximumNumberOfFiles">输出日志文件的最大数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumFileSize" /> 小于 <paramref name="bufferSize" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumFileSize" /> 为负数。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumNumberOfFiles" /> 小于 1，和 <paramref name="logRetentionOption" /> 是 <see cref="F:System.Diagnostics.TraceLogRetentionOption.LimitedSequentialFiles" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumNumberOfFiles" /> 小于 2，和 <paramref name="logRetentionOption" /> 是 <see cref="F:System.Diagnostics.TraceLogRetentionOption.LimitedCircularFiles" />。</exception>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.Close">
      <summary>关闭该侦听器的日志文件，以使其不再接收跟踪或调试输出。</summary>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.Fail(System.String,System.String)">
      <summary>将包含基本错误消息和详细错误消息的错误信息写入日志文件。</summary>
      <param name="message">要写入的基本错误消息。</param>
      <param name="detailMessage">要追加到基本错误消息中的详细错误消息。</param>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.Flush">
      <summary>导致缓冲数据写入该侦听器的日志。</summary>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.GetSupportedAttributes">
      <summary>获取跟踪侦听器支持的自定义 XML 配置特性。</summary>
      <returns>一个 <see cref="T:System.String" /> 数组，其中包含此侦听器可识别的 XML 配置特性。</returns>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
      <summary>将跟踪信息、单个数据对象和事件信息写入日志文件。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
      <param name="source">源名称。</param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="data">要发出的数据对象。</param>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
      <summary>将跟踪信息、多个数据对象和事件信息写入日志文件。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
      <param name="source">源名称。</param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="data">要发出的数据对象的数组。</param>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
      <summary>将跟踪信息、消息和事件信息写入日志文件。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
      <param name="source">源名称。</param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="message">要写入的消息。</param>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
      <summary>将跟踪信息、格式化消息和事件信息写入日志文件。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
      <param name="source">源名称。</param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="format">包含零个或多个格式项的格式字符串，这些项与 <paramref name="args" /> 数组中的对象相对应。</param>
      <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象。</param>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)">
      <summary>将跟踪信息（包括相关活动的标识）、消息和事件信息写入日志文件。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
      <param name="source">源名称。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="message">要写入的跟踪消息。</param>
      <param name="relatedActivityId">标识相关活动的 <see cref="T:System.Guid" /> 结构。</param>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.Write(System.String)">
      <summary>将消息写入日志文件，且不提供任何其他上下文信息。</summary>
      <param name="message">要写入的消息。</param>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.WriteLine(System.String)">
      <summary>将后跟当前行终止符的消息写入日志文件，且不提供任何其他上下文信息。</summary>
      <param name="message">要写入的消息。</param>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterData.Decrement">
      <summary>将计数器值减 1。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterData.Increment">
      <summary>该计数器值将加 1。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterData.IncrementBy(System.Int64)">
      <summary>指定的量递增该计数器值。</summary>
      <param name="value">若要为计数器值增加的量。 增量值可以是正数或负数。</param>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.#ctor(System.Guid,System.Guid,System.Diagnostics.PerformanceData.CounterSetInstanceType)">
      <summary>初始化 <see cref="T:System.Diagnostics.PerformanceData.CounterSet" /> 类的新实例。</summary>
      <param name="providerGuid">唯一标识的计数器数据提供程序的 Guid。 使用清单中指定的 Guid。</param>
      <param name="counterSetGuid">唯一标识的计数器集的提供程序的 Guid。 使用清单中指定的 Guid。</param>
      <param name="instanceType">例如，标识计数器集的类型是否计数器集是单个或多个实例的计数器集。</param>
      <exception cref="T:System.InsufficientMemoryException">没有足够的内存空间来完成此操作。</exception>
      <exception cref="T:System.PlatformNotSupportedException">不支持在 Windows Vista 之前。</exception>
      <exception cref="T:System.ArgumentException">其中一个参数为 NULL 或无效。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">基础 Win32 函数调用失败。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.AddCounter(System.Int32,System.Diagnostics.PerformanceData.CounterType)">
      <summary>将计数器添加到计数器集通过使用指定的计数器标识符和类型。</summary>
      <param name="counterId">标识的计数器。 使用相同的值，用于在清单中定义的计数器。</param>
      <param name="counterType">计数器类型标识。 计数器类型确定计算、 求平均值和显示的计数器数据的方式。</param>
      <exception cref="T:System.ArgumentException">计数器标识符已经存在集中为负，或者计数器类型为 NULL 或无效。</exception>
      <exception cref="T:System.InvalidOperationException">向计数器集中创建实例的计数器集之后，无法添加计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.AddCounter(System.Int32,System.Diagnostics.PerformanceData.CounterType,System.String)">
      <summary>将计数器添加到计数器集通过使用指定的计数器标识符和类型以及该计数器的显示名称。</summary>
      <param name="counterId">标识的计数器。 使用相同的值，用于在清单中定义的计数器。</param>
      <param name="counterType">计数器类型标识。 计数器类型确定计算、 求平均值和显示的计数器数据的方式。</param>
      <param name="counterName">计数器的名称。 此名称可用于索引中的计数器集实例的计数器。 （请参阅<see cref="P:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item(System.String)" />。）</param>
      <exception cref="T:System.ArgumentException">计数器标识符已经存在集中为负，或者计数器类型为 NULL 或无效。</exception>
      <exception cref="T:System.InvalidOperationException">向计数器集中创建实例的计数器集之后，无法添加计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.CreateCounterSetInstance(System.String)">
      <summary>创建计数器集的实例。</summary>
      <param name="instanceName">实例的名称。 名称必须是唯一的。</param>
      <returns>计数器集，它将包含的计数器数据的实例。</returns>
      <exception cref="T:System.ArgumentException">实例名称为 NULL。</exception>
      <exception cref="T:System.InvalidOperationException">向计数器集中创建计数器集的实例之前，必须添加计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.Dispose">
      <summary>释放此对象使用的所有非托管资源。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.Dispose(System.Boolean)">
      <summary>释放所有非托管的资源使用此对象也可以选择释放托管的资源。</summary>
      <param name="disposing">True 如果这调用 Dispose 方法中，从 False 如果从终结器调用。</param>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.Finalize">
      <summary>在对象被垃圾回收回收之前释放资源。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSetInstance.Dispose">
      <summary>释放此对象使用的所有非托管资源。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSetInstance.Finalize">
      <summary>释放非托管的资源并执行其他清理操作。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Dispose">
      <summary>释放此对象使用的所有非托管资源。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Finalize">
      <summary>在垃圾回收将某一对象回收前允许该对象尝试释放资源并执行其他清理操作。</summary>
    </member>
    <member name="M:System.Diagnostics.UnescapedXmlDiagnosticData.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.UnescapedXmlDiagnosticData" /> 类通过使用指定的 XML 数据字符串。</summary>
      <param name="xmlPayload">要在中记录的 XML 数据 UserData 事件架构节点。</param>
    </member>
    <member name="M:System.Diagnostics.UnescapedXmlDiagnosticData.ToString">
      <summary>返回的字符串表示形式 <see cref="T:System.Diagnostics.UnescapedXmlDiagnosticData" /> 对象。</summary>
      <returns>字符串表示形式 <see cref="T:System.Diagnostics.UnescapedXmlDiagnosticData" /> 对象。 如果对象是 null, ，此方法返回一个空字符串。</returns>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary>初始化 <see cref="T:System.Dynamic.BinaryOperationBinder" /> 类的新实例。</summary>
      <param name="operation">二元运算类型。</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态的二元运算的绑定。</summary>
      <param name="target">动态操作的目标。</param>
      <param name="args">动态操作的参数数组。</param>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>如果将绑定目标动态对象不能，执行的二进制动态操作的绑定。</summary>
      <param name="target">动态的二元运算的目标。</param>
      <param name="arg">右操作数的动态二元运算。</param>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>在派生类中重写时，如果将绑定目标动态对象不能执行的二进制动态操作的绑定。</summary>
      <param name="target">动态的二元运算的目标。</param>
      <param name="arg">右操作数的动态二元运算。</param>
      <param name="errorSuggestion">绑定结果，如果绑定失败，则为 null。</param>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Combine(System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject})">
      <summary>将从列表中的绑定限制 <see cref="T:System.Dynamic.DynamicMetaObject" /> 实例保存到一个组限制。</summary>
      <param name="contributingObjects">列表 <see cref="T:System.Dynamic.DynamicMetaObject" /> 实例从相组合的限制。</param>
      <returns>新的绑定限制集。</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetExpressionRestriction(System.Linq.Expressions.Expression)">
      <summary>创建检查表达式中的不可变的任意属性的绑定限制。</summary>
      <param name="expression">表示这些限制的表达式。</param>
      <returns>新的绑定限制。</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetInstanceRestriction(System.Linq.Expressions.Expression,System.Object)">
      <summary>创建检查表达式中的对象实例标识的绑定限制。</summary>
      <param name="expression">要测试的表达式。</param>
      <param name="instance">要测试的确切对象实例。</param>
      <returns>新的绑定限制。</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetTypeRestriction(System.Linq.Expressions.Expression,System.Type)">
      <summary>创建用来检查表达式中的运行时类型标识绑定限制。</summary>
      <param name="expression">要测试的表达式。</param>
      <param name="type">要测试的确切类型。</param>
      <returns>新的绑定限制。</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Merge(System.Dynamic.BindingRestrictions)">
      <summary>合并绑定当前绑定限制的限制条件的集。</summary>
      <param name="restrictions">要合并的当前绑定限制的限制的组。</param>
      <returns>新的绑定限制集。</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.ToExpression">
      <summary>创建 <see cref="T:System.Linq.Expressions.Expression" /> 表示绑定限制。</summary>
      <returns>表达式树表示限制。</returns>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
      <summary>创建新的 CallInfo，表示在动态绑定过程中的参数。</summary>
      <param name="argCount">参数的数量。</param>
      <param name="argNames">参数名称。</param>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.String[])">
      <summary>创建一个新的 PositionalArgumentInfo。</summary>
      <param name="argCount">参数的数量。</param>
      <param name="argNames">参数名称。</param>
    </member>
    <member name="M:System.Dynamic.CallInfo.Equals(System.Object)">
      <summary>确定是否已指定的 CallInfo 实例被视为等同于当前。</summary>
      <param name="obj">实例 <see cref="T:System.Dynamic.CallInfo" /> 要与当前实例进行比较。</param>
      <returns>如果指定的实例等于当前的一个否则为 false 则 true。</returns>
    </member>
    <member name="M:System.Dynamic.CallInfo.GetHashCode">
      <summary>用作当前哈希函数 <see cref="T:System.Dynamic.CallInfo" />。</summary>
      <returns>当前 <see cref="T:System.Dynamic.CallInfo" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.#ctor(System.Type,System.Boolean)">
      <summary>初始化 <see cref="T:System.Dynamic.ConvertBinder" /> 的新实例。</summary>
      <param name="type">要转换为的类型。</param>
      <param name="explicit">如果应将转换视为显式转换; 也是如此否则为 false。</param>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态转换操作的绑定。</summary>
      <param name="target">动态转换操作的目标。</param>
      <param name="args">动态转换操作的参数的数组。</param>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject)">
      <summary>如果无法绑定目标动态对象，请执行动态转换操作的绑定。</summary>
      <param name="target">动态转换操作的目标。</param>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>在派生类中重写时，如果目标动态对象不能将绑定执行动态转换操作的绑定。</summary>
      <param name="target">动态转换操作的目标。</param>
      <param name="errorSuggestion">如果绑定失败，则为要使用的绑定结果；否则为 null。</param>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>初始化的新实例 <see cref="T:System.Dynamic.CreateInstanceBinder" />。</summary>
      <param name="callInfo">调用站点上的参数签名。</param>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>执行的动态绑定创建操作。</summary>
      <param name="target">目标的动态创建操作。</param>
      <param name="args">动态参数的数组创建操作。</param>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>执行的动态绑定创建操作，如果目标动态对象不能绑定。</summary>
      <param name="target">目标的动态创建操作。</param>
      <param name="args">动态的参数创建操作。</param>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>当在派生类中重写，则执行的动态创建操作，如果目标动态对象不能绑定。</summary>
      <param name="target">目标的动态创建操作。</param>
      <param name="args">动态的参数创建操作。</param>
      <param name="errorSuggestion">如果绑定失败，则为要使用的绑定结果；否则为 null。</param>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>初始化 <see cref="T:System.Dynamic.DeleteIndexBinder" /> 的新实例。</summary>
      <param name="callInfo">调用站点上的参数签名。</param>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态删除索引操作的绑定。</summary>
      <param name="target">动态删除索引操作的目标。</param>
      <param name="args">动态删除索引操作的参数的数组。</param>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>如果目标动态对象不能绑定，请执行动态删除索引操作的绑定。</summary>
      <param name="target">动态删除索引操作的目标。</param>
      <param name="indexes">参数的动态删除索引操作。</param>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>在派生类中重写时，如果目标动态对象不能将绑定执行动态删除索引操作的绑定。</summary>
      <param name="target">动态删除索引操作的目标。</param>
      <param name="indexes">参数的动态删除索引操作。</param>
      <param name="errorSuggestion">如果绑定失败，则为要使用的绑定结果；否则为 null。</param>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>初始化 <see cref="T:System.Dynamic.DeleteIndexBinder" /> 的新实例。</summary>
      <param name="name">要删除的成员的名称。</param>
      <param name="ignoreCase">如果应该忽略大小写; 匹配名称也是如此false 否则为。</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态删除成员操作的绑定。</summary>
      <param name="target">动态删除成员操作的目标。</param>
      <param name="args">动态删除成员操作的参数的数组。</param>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject)">
      <summary>如果目标动态对象不能绑定，请执行动态删除成员操作的绑定。</summary>
      <param name="target">动态删除成员操作的目标。</param>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>在派生类中重写时，如果目标动态对象不能将绑定执行动态删除成员操作的绑定。</summary>
      <param name="target">动态删除成员操作的目标。</param>
      <param name="errorSuggestion">如果绑定失败，则为要使用的绑定结果；否则为 null。</param>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions)">
      <summary>初始化 <see cref="T:System.Dynamic.DynamicMetaObject" /> 类的新实例。</summary>
      <param name="expression">表示此表达式 <see cref="T:System.Dynamic.DynamicMetaObject" /> 动态绑定过程。</param>
      <param name="restrictions">绑定的限制在其下的绑定是有效的集。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions,System.Object)">
      <summary>初始化 <see cref="T:System.Dynamic.DynamicMetaObject" /> 类的新实例。</summary>
      <param name="expression">表示此表达式 <see cref="T:System.Dynamic.DynamicMetaObject" /> 动态绑定过程。</param>
      <param name="restrictions">绑定的限制在其下的绑定是有效的集。</param>
      <param name="value">运行时的值由 <see cref="T:System.Dynamic.DynamicMetaObject" />。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Dynamic.DynamicMetaObject)">
      <summary>执行动态的二元运算的绑定。</summary>
      <param name="binder">一个实例 <see cref="T:System.Dynamic.BinaryOperationBinder" /> 表示动态操作的详细信息。</param>
      <param name="arg">一个实例 <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示二元运算的右侧。</param>
      <returns>新 <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示结果的绑定。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)">
      <summary>执行动态转换操作的绑定。</summary>
      <param name="binder">一个实例 <see cref="T:System.Dynamic.ConvertBinder" /> 表示动态操作的详细信息。</param>
      <returns>新 <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示结果的绑定。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindCreateInstance(System.Dynamic.CreateInstanceBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态创建实例操作的绑定。</summary>
      <param name="binder">一个实例 <see cref="T:System.Dynamic.CreateInstanceBinder" /> 表示动态操作的详细信息。</param>
      <param name="args">一个数组 <see cref="T:System.Dynamic.DynamicMetaObject" /> 实例的参数创建实例操作。</param>
      <returns>新 <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示结果的绑定。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态删除索引操作的绑定。</summary>
      <param name="binder">一个实例 <see cref="T:System.Dynamic.DeleteIndexBinder" /> 表示动态操作的详细信息。</param>
      <param name="indexes">一个数组 <see cref="T:System.Dynamic.DynamicMetaObject" /> 实例删除索引操作的索引。</param>
      <returns>新 <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示结果的绑定。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>执行动态删除成员操作的绑定。</summary>
      <param name="binder">一个实例 <see cref="T:System.Dynamic.DeleteMemberBinder" /> 表示动态操作的详细信息。</param>
      <returns>新 <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示结果的绑定。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetIndex(System.Dynamic.GetIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态获取索引操作的绑定。</summary>
      <param name="binder">一个实例 <see cref="T:System.Dynamic.GetIndexBinder" /> 表示动态操作的详细信息。</param>
      <param name="indexes">一个数组 <see cref="T:System.Dynamic.DynamicMetaObject" /> 实例获取索引操作的索引。</param>
      <returns>新 <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示结果的绑定。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetMember(System.Dynamic.GetMemberBinder)">
      <summary>执行动态获取成员操作的绑定。</summary>
      <param name="binder">一个实例 <see cref="T:System.Dynamic.GetMemberBinder" /> 表示动态操作的详细信息。</param>
      <returns>新 <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示结果的绑定。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvoke(System.Dynamic.InvokeBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态调用绑定操作。</summary>
      <param name="binder">一个实例 <see cref="T:System.Dynamic.InvokeBinder" /> 表示动态操作的详细信息。</param>
      <param name="args">一个数组 <see cref="T:System.Dynamic.DynamicMetaObject" /> 实例的调用操作的参数。</param>
      <returns>新 <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示结果的绑定。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvokeMember(System.Dynamic.InvokeMemberBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>执行的动态绑定调用成员操作。</summary>
      <param name="binder">一个实例 <see cref="T:System.Dynamic.InvokeMemberBinder" /> 表示动态操作的详细信息。</param>
      <param name="args">一个数组 <see cref="T:System.Dynamic.DynamicMetaObject" /> 实例的参数调用成员操作。</param>
      <returns>新 <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示结果的绑定。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetIndex(System.Dynamic.SetIndexBinder,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>执行动态设置索引操作的绑定。</summary>
      <param name="binder">一个实例 <see cref="T:System.Dynamic.SetIndexBinder" /> 表示动态操作的详细信息。</param>
      <param name="indexes">一个数组 <see cref="T:System.Dynamic.DynamicMetaObject" /> 实例设置索引操作的索引。</param>
      <param name="value">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示用于设置索引操作的值。</param>
      <returns>新 <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示结果的绑定。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetMember(System.Dynamic.SetMemberBinder,System.Dynamic.DynamicMetaObject)">
      <summary>执行动态设置成员操作的绑定。</summary>
      <param name="binder">一个实例 <see cref="T:System.Dynamic.SetMemberBinder" /> 表示动态操作的详细信息。</param>
      <param name="value">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示用于设置成员操作的值。</param>
      <returns>新 <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示结果的绑定。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindUnaryOperation(System.Dynamic.UnaryOperationBinder)">
      <summary>执行动态一元运算的绑定。</summary>
      <param name="binder">一个实例 <see cref="T:System.Dynamic.UnaryOperationBinder" /> 表示动态操作的详细信息。</param>
      <returns>新 <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示结果的绑定。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.Create(System.Object,System.Linq.Expressions.Expression)">
      <summary>创建指定对象的元对象。</summary>
      <param name="value">要获取的元对象的对象。</param>
      <param name="expression">表示此表达式 <see cref="T:System.Dynamic.DynamicMetaObject" /> 动态绑定过程。</param>
      <returns>如果给定的对象实现 <see cref="T:System.Dynamic.IDynamicMetaObjectProvider" /> 并不是从当前的 AppDomain 外部的远程对象，则返回该对象的特定元对象返回的 <see cref="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)" />。 否则为创建并返回一个普通新元对象不带任何限制。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.GetDynamicMemberNames">
      <summary>返回的所有动态成员名称的枚举。</summary>
      <returns>动态成员名称的列表。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.#ctor">
      <summary>初始化 <see cref="T:System.Dynamic.DynamicMetaObjectBinder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>当在派生类中重写，执行动态操作的绑定。</summary>
      <param name="target">动态操作的目标。</param>
      <param name="args">动态操作的参数数组。</param>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary>执行上一组参数的动态操作的运行时绑定。</summary>
      <param name="args">动态操作的参数的数组。</param>
      <param name="parameters">数组 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 实例，表示调用站点绑定进程中的参数。</param>
      <param name="returnLabel">LabelTarget 用来返回动态绑定的结果。</param>
      <returns>动态操作的参数，执行测试和执行动态操作，如果测试是有效的表达式。 如果测试失败的动态操作的后续匹配项上，将会再次调用 Bind 生成新 <see cref="T:System.Linq.Expressions.Expression" /> 了解新的参数类型。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>将推迟到更高版本时计算的动态操作的所有参数的运行时值之后的时间操作的绑定。</summary>
      <param name="target">动态操作的目标。</param>
      <param name="args">动态操作的参数数组。</param>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject[])">
      <summary>将推迟到更高版本时计算的动态操作的所有参数的运行时值之后的时间操作的绑定。</summary>
      <param name="args">动态操作的参数数组。</param>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.GetUpdateExpression(System.Type)">
      <summary>获取一个表达式，将导致要更新的绑定。 它指示表达式的绑定将不再有效。 它通常用于动态对象的"版本"已更改。</summary>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性所得到的表达式; 可以是任何类型。</param>
      <returns>更新表达式。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.#ctor">
      <summary>允许派生的类型来初始化的新实例 <see cref="T:System.Dynamic.DynamicObject" /> 类型。</summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetDynamicMemberNames">
      <summary>返回的所有动态成员名称的枚举。</summary>
      <returns>一个包含动态成员名称的序列。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>提供了 <see cref="T:System.Dynamic.DynamicMetaObject" /> 调度到动态虚拟方法。 该对象可封装到另一个 <see cref="T:System.Dynamic.DynamicMetaObject" /> 以提供各项操作的自定义行为。 此方法为语言实现者支持的动态语言运行时基础结构，不宜在代码中直接使用。</summary>
      <param name="parameter">表达式，它表示 <see cref="T:System.Dynamic.DynamicMetaObject" /> 要调度到动态虚拟方法。</param>
      <returns>对象 <see cref="T:System.Dynamic.DynamicMetaObject" /> 类型。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
      <summary>提供对于二元运算的实现。 类派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类可以重写此方法以指定动态行为，例如加法和乘法操作。</summary>
      <param name="binder">提供有关二进制文件操作的信息。binder.Operation 属性将返回 <see cref="T:System.Linq.Expressions.ExpressionType" /> 对象。 例如，对于 sum = first + second 语句，其中 first 和 second 派生自 DynamicObject 类， binder.Operation 返回 ExpressionType.Add。</param>
      <param name="arg">对于二元运算右操作数。 例如，对于 sum = first + second 语句，其中 first 和 second 派生自 DynamicObject 类， <paramref name="arg" /> 是否等同于 second。</param>
      <param name="result">二元运算的结果。</param>
      <returns>如果操作成功，则为 true；否则为 false。 如果此方法返回 false, ，语言运行时联编程序确定的行为。 （在大多数情况下，特定于语言的运行时异常引发。）</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
      <summary>提供实现类型的转换运算。 类派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类可以重写此方法以指定动态行为的操作，从一种类型的对象转换为另一个。</summary>
      <param name="binder">提供了有关转换操作的信息。binder.Type 属性提供该对象必须转换为的类型。 例如，对于该语句 (String)sampleObject C# 中 (CType(sampleObject, Type) 在 Visual Basic 中)，其中 sampleObject 是派生自的类的实例 <see cref="T:System.Dynamic.DynamicObject" /> 类， binder.Type 返回 <see cref="T:System.String" /> 类型。binder.Explicit 属性提供关于发生转换的类型信息。 它将返回 true 用于显式转换和 false 隐式转换。</param>
      <param name="result">类型转换运算的结果。</param>
      <returns>如果操作成功，则为 true；否则为 false。 如果此方法返回 false, ，语言运行时联编程序确定的行为。 （在大多数情况下，特定于语言的运行时异常引发。）</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
      <summary>提供用于初始化动态对象的新实例的操作的实现。 此方法不是在 C# 或 Visual Basic 中使用。</summary>
      <param name="binder">提供有关初始化操作的信息。</param>
      <param name="args">在初始化期间传递给对象的参数。 例如，对于 new SampleType(100) 操作，其中 SampleType 类型派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类， <paramref name="args[0]" /> 等于 100。</param>
      <param name="result">初始化的结果。</param>
      <returns>如果操作成功，则为 true；否则为 false。 如果此方法返回 false, ，语言运行时联编程序确定的行为。 （在大多数情况下，特定于语言的运行时异常引发。）</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
      <summary>提供按索引删除某一对象的操作的实现。 此方法不是在 C# 或 Visual Basic 中使用。</summary>
      <param name="binder">提供有关删除的信息。</param>
      <param name="indexes">要删除的索引。</param>
      <returns>如果操作成功，则为 true；否则为 false。 如果此方法返回 false, ，语言运行时联编程序确定的行为。 （在大多数情况下，特定于语言的运行时异常引发。）</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>提供删除对象成员的操作的实现。 此方法不是在 C# 或 Visual Basic 中使用。</summary>
      <param name="binder">提供有关删除的信息。</param>
      <returns>如果操作成功，则为 true；否则为 false。 如果此方法返回 false, ，语言运行时联编程序确定的行为。 （在大多数情况下，特定于语言的运行时异常引发。）</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
      <summary>提供按索引获取一个值的操作的实现。 类派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类可以重写此方法以指定为索引操作的动态行为。</summary>
      <param name="binder">提供有关操作的信息。</param>
      <param name="indexes">此操作中使用的索引。 例如，对于 sampleObject[3] C# 中的操作 (sampleObject(3) 在 Visual Basic 中)，其中 sampleObject 派生自 DynamicObject 类， <paramref name="indexes[0]" /> 等于 3。</param>
      <param name="result">索引操作的结果。</param>
      <returns>如果操作成功，则为 true；否则为 false。 如果此方法返回 false, ，语言运行时联编程序确定的行为。 （在大多数情况下，运行时异常引发。）</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>提供用于获取成员值的操作的实现。 类派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类可以重写此方法以指定动态行为的操作，如获取的属性的值。</summary>
      <param name="binder">提供有关调用动态操作的对象信息。binder.Name 属性提供对其执行动态操作的成员的名称。 例如，对于 Console.WriteLine(sampleObject.SampleProperty) 语句，其中 sampleObject 是派生自的类的实例 <see cref="T:System.Dynamic.DynamicObject" /> 类， binder.Name 返回"SampleProperty"。binder.IgnoreCase 属性指定的成员名称是否区分大小写。</param>
      <param name="result">获取操作的结果。 例如，如果为属性调用方法，您可以将属性值赋给 <paramref name="result" />。</param>
      <returns>如果操作成功，则为 true；否则为 false。 如果此方法返回 false, ，语言运行时联编程序确定的行为。 （在大多数情况下，运行时异常引发。）</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
      <summary>提供调用对象的操作的实现。 类派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类可以重写此方法以指定动态行为的操作，如调用一个或多个委托。</summary>
      <param name="binder">提供有关调用操作的信息。</param>
      <param name="args">调用操作期间传递给对象的参数。 例如，对于 sampleObject(100) 操作，其中 sampleObject 派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类， <paramref name="args[0]" /> 等于 100。</param>
      <param name="result">对象调用的结果。</param>
      <returns>如果操作成功，则为 true；否则为 false。 如果此方法返回 false, ，语言运行时联编程序确定的行为。 （在大多数情况下，特定于语言的运行时异常引发。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
      <summary>提供用于调用成员的操作的实现。 类派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类可以重写此方法以指定动态行为的操作，如调用方法。</summary>
      <param name="binder">提供有关动态操作的信息。binder.Name 属性提供对其执行动态操作的成员的名称。 例如，对于该语句 sampleObject.SampleMethod(100), ，其中 sampleObject 是派生自的类的实例 <see cref="T:System.Dynamic.DynamicObject" /> 类， binder.Name 返回"SampleMethod"。binder.IgnoreCase 属性指定的成员名称是否区分大小写。</param>
      <param name="args">调用操作期间传递给对象成员的参数。 例如，对于该语句 sampleObject.SampleMethod(100), ，其中 sampleObject 派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类， <paramref name="args[0]" /> 等于 100。</param>
      <param name="result">该成员的调用的结果。</param>
      <returns>如果操作成功，则为 true；否则为 false。 如果此方法返回 false, ，语言运行时联编程序确定的行为。 （在大多数情况下，特定于语言的运行时异常引发。）</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
      <summary>提供按索引设置一个值的操作的实现。 类派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类可以重写此方法以指定动态行为的操作，按指定的索引访问的对象。</summary>
      <param name="binder">提供有关操作的信息。</param>
      <param name="indexes">此操作中使用的索引。 例如，对于 sampleObject[3] = 10 C# 中的操作 (sampleObject(3) = 10 在 Visual Basic 中)，其中 sampleObject 派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类， <paramref name="indexes[0]" /> 等于 3。</param>
      <param name="value">要设置为具有指定的索引的对象的值。 例如，对于 sampleObject[3] = 10 C# 中的操作 (sampleObject(3) = 10 在 Visual Basic 中)，其中 sampleObject 派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类， <paramref name="value" /> 等于 10。</param>
      <returns>如果操作成功，则为 true；否则为 false。 如果此方法返回 false, ，语言运行时联编程序确定的行为。 （在大多数情况下，特定于语言的运行时异常引发。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
      <summary>提供设置成员值的操作的实现。 类派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类可以重写此方法以指定动态行为的操作，如设置属性的值。</summary>
      <param name="binder">提供有关调用动态操作的对象信息。binder.Name 属性提供向其分配值的成员的名称。 例如，对于该语句 sampleObject.SampleProperty = "Test", ，其中 sampleObject 是派生自的类的实例 <see cref="T:System.Dynamic.DynamicObject" /> 类， binder.Name 返回"SampleProperty"。binder.IgnoreCase 属性指定的成员名称是否区分大小写。</param>
      <param name="value">要设置为成员的值。 例如，对于 sampleObject.SampleProperty = "Test", ，其中 sampleObject 是派生自的类的实例 <see cref="T:System.Dynamic.DynamicObject" /> 类， <paramref name="value" /> 是"测试"。</param>
      <returns>如果操作成功，则为 true；否则为 false。 如果此方法返回 false, ，语言运行时联编程序确定的行为。 （在大多数情况下，特定于语言的运行时异常引发。）</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
      <summary>提供一元运算的实现。 类派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类可以重写此方法，以指定动态行为的操作，例如求反、 递增，则为递减。</summary>
      <param name="binder">提供有关一元运算的信息。binder.Operation 属性将返回 <see cref="T:System.Linq.Expressions.ExpressionType" /> 对象。 例如，对于 negativeNumber = -number 语句，其中 number 派生自 DynamicObject 类， binder.Operation 返回"Negate"。</param>
      <param name="result">一元运算的结果。</param>
      <returns>如果操作成功，则为 true；否则为 false。 如果此方法返回 false, ，语言运行时联编程序确定的行为。 （在大多数情况下，特定于语言的运行时异常引发。）</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.#ctor">
      <summary>初始化新 ExpandoObject 没有成员。</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>将指定值添加到具有指定键的 <see cref="T:System.Collections.Generic.ICollection`1" />。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 结构，表示要添加到集合中的键和值。</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#Clear">
      <summary>从集合中移除所有项。</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>确定是否 <see cref="T:System.Collections.Generic.ICollection`1" /> 包含一个指定键和值。</summary>
      <param name="item">要在 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 中定位的 <see cref="T:System.Collections.Generic.ICollection`1" /> 结构。</param>
      <returns>如果集合包含一个特定键和值，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>从特定的数组索引处开始，将 <see cref="T:System.Collections.Generic.ICollection`1" /> 的元素复制到类型 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的一个数组。</summary>
      <param name="array">类型 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的一维数组，它是从 <see cref="T:System.Collections.Generic.ICollection`1" /> 复制的 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 元素的目标。 该数组的索引必须从零开始。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，将从此索引处开始进行复制。</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>从集合中移除键和值。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 结构，表示要从集合中移除的键和值。</param>
      <returns>如果成功找到并移除键和值，则为 true；否则为 false。 如果在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中找不到键和值，则此方法返回 false。</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String@System#Object}#Add(System.String,System.Object)">
      <summary>将指定的键和值添加到字典中。</summary>
      <param name="key">要用作键的对象。</param>
      <param name="value">要用作值的对象。</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String@System#Object}#ContainsKey(System.String)">
      <summary>确定字典是否包含指定键。</summary>
      <param name="key">要在字典中查找的键。</param>
      <returns>如果字典包含具有指定键的元素，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String@System#Object}#Remove(System.String)">
      <summary>从 <see cref="T:System.Collections.IDictionary" /> 中删除带有指定键的元素。</summary>
      <param name="key">要移除的元素的键。</param>
      <returns>如果该元素已成功移除，则为 true；否则为 false。 如果在原始 false 中没有找到 <paramref name="key" />，此方法也会返回 <see cref="T:System.Collections.Generic.IDictionary`2" />。</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String@System#Object}#TryGetValue(System.String,System.Object@)">
      <summary>获取与指定键关联的值。</summary>
      <param name="key">要获取的值的键。</param>
      <param name="value">当此方法返回时，如果找到该键，则包含与指定的键相关联的值；否则将包含 <paramref name="value" /> 参数的类型默认值。 此参数未经初始化即被传递。</param>
      <returns>如果实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象包含具有指定键的元素，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>一个可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 对象。</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>提供元对象会调度到动态虚拟方法。 该对象可封装在另一个元对象以提供各项操作的自定义行为。</summary>
      <param name="parameter">表示动态虚方法调度元对象的表达式。</param>
      <returns>对象的 <see cref="T:System.Dynamic.DynamicMetaObject" /> 类型。</returns>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>初始化 <see cref="T:System.Dynamic.GetIndexBinder" /> 的新实例。</summary>
      <param name="callInfo">调用站点上的参数签名。</param>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态获取索引操作的绑定。</summary>
      <param name="target">动态获取索引操作的目标。</param>
      <param name="args">动态获取索引操作的参数的数组。</param>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>如果目标动态对象不能绑定，请执行动态获取索引操作的绑定。</summary>
      <param name="target">动态获取索引操作的目标。</param>
      <param name="indexes">动态的参数获取索引操作。</param>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>在派生类中重写时，如果目标动态对象不能将绑定执行动态获取索引操作的绑定。</summary>
      <param name="target">动态获取索引操作的目标。</param>
      <param name="indexes">动态的参数获取索引操作。</param>
      <param name="errorSuggestion">如果绑定失败，则为要使用的绑定结果；否则为 null。</param>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>初始化 <see cref="T:System.Dynamic.GetMemberBinder" /> 的新实例。</summary>
      <param name="name">要获取的成员的名称。</param>
      <param name="ignoreCase">如果应该忽略大小写; 匹配名称也是如此false 否则为。</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态获取成员操作的绑定。</summary>
      <param name="target">动态获取成员操作的目标。</param>
      <param name="args">动态获取成员操作的参数的数组。</param>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject)">
      <summary>如果目标动态对象不能绑定，请执行动态获取成员操作的绑定。</summary>
      <param name="target">动态获取成员操作的目标。</param>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>在派生类中重写时，如果目标动态对象不能将绑定执行动态获取成员操作的绑定。</summary>
      <param name="target">动态获取成员操作的目标。</param>
      <param name="errorSuggestion">如果绑定失败，则为要使用的绑定结果；否则为 null。</param>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>返回 <see cref="T:System.Dynamic.DynamicMetaObject" /> 负责对此对象绑定操作执行。</summary>
      <param name="parameter">表达式树值的表示形式运行时。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 要绑定此对象。</returns>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>初始化 <see cref="T:System.Dynamic.InvokeBinder" /> 的新实例。</summary>
      <param name="callInfo">调用站点上的参数签名。</param>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态调用绑定操作。</summary>
      <param name="target">动态调用操作的目标。</param>
      <param name="args">动态调用操作的参数数组。</param>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>如果无法绑定目标动态对象，则指定动态调用操作的绑定。</summary>
      <param name="target">动态调用操作的目标。</param>
      <param name="args">动态调用操作的参数。</param>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>如果无法绑定目标动态对象，则指定动态调用操作的绑定。</summary>
      <param name="target">动态调用操作的目标。</param>
      <param name="args">动态调用操作的参数。</param>
      <param name="errorSuggestion">如果绑定失败，则为要使用的绑定结果；否则为 null。</param>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.#ctor(System.String,System.Boolean,System.Dynamic.CallInfo)">
      <summary>初始化 <see cref="T:System.Dynamic.InvokeMemberBinder" /> 的新实例。</summary>
      <param name="name">要调用的成员的名称。</param>
      <param name="ignoreCase">如果应该忽略大小写; 匹配名称则为 truefalse 否则为。</param>
      <param name="callInfo">调用站点上的参数签名。</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>执行的动态绑定调用成员操作。</summary>
      <param name="target">目标动态调用成员操作。</param>
      <param name="args">动态参数的数组调用成员操作。</param>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>当在派生类中重写时执行的动态绑定调用操作，如果目标动态对象不能绑定。</summary>
      <param name="target">动态调用操作的目标。</param>
      <param name="args">动态调用操作的参数。</param>
      <param name="errorSuggestion">如果绑定失败，则为要使用的绑定结果；否则为 null。</param>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>执行的动态绑定调用成员操作，如果目标动态对象不能绑定。</summary>
      <param name="target">目标动态调用成员操作。</param>
      <param name="args">成员操作调用的动态参数。</param>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>当在派生类中重写时执行的动态绑定调用成员操作，如果目标动态对象不能绑定。</summary>
      <param name="target">目标动态调用成员操作。</param>
      <param name="args">成员操作调用的动态参数。</param>
      <param name="errorSuggestion">如果绑定失败，则为要使用的绑定结果；否则为 null。</param>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>初始化 <see cref="T:System.Dynamic.SetIndexBinder" /> 的新实例。</summary>
      <param name="callInfo">调用站点上的参数签名。</param>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态设置索引操作的绑定。</summary>
      <param name="target">动态设置索引操作的目标。</param>
      <param name="args">动态设置索引操作的参数的数组。</param>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>如果目标动态对象不能绑定，请执行动态设置索引操作的绑定。</summary>
      <param name="target">动态设置索引操作的目标。</param>
      <param name="indexes">动态设置索引操作的参数。</param>
      <param name="value">要设置为集合的值。</param>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>在派生类中重写时，如果目标动态对象不能将绑定执行动态设置索引操作的绑定。</summary>
      <param name="target">动态设置索引操作的目标。</param>
      <param name="indexes">动态设置索引操作的参数。</param>
      <param name="value">要设置为集合的值。</param>
      <param name="errorSuggestion">如果绑定失败，则为要使用的绑定结果；否则为 null。</param>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>初始化 <see cref="T:System.Dynamic.SetMemberBinder" /> 的新实例。</summary>
      <param name="name">要获取的成员的名称。</param>
      <param name="ignoreCase">如果应该忽略大小写; 匹配名称也是如此false 否则为。</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态设置成员操作的绑定。</summary>
      <param name="target">动态设置成员操作的目标。</param>
      <param name="args">动态设置成员操作的参数的数组。</param>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>如果目标动态对象不能绑定，请执行动态设置成员操作的绑定。</summary>
      <param name="target">动态设置成员操作的目标。</param>
      <param name="value">要设置为成员的值。</param>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>如果目标动态对象不能绑定，请执行动态设置成员操作的绑定。</summary>
      <param name="target">动态设置成员操作的目标。</param>
      <param name="value">要设置为成员的值。</param>
      <param name="errorSuggestion">如果绑定失败，则为要使用的绑定结果；否则为 null。</param>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary>初始化 <see cref="T:System.Dynamic.BinaryOperationBinder" /> 类的新实例。</summary>
      <param name="operation">一元运算类型。</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态一元运算的绑定。</summary>
      <param name="target">动态操作的目标。</param>
      <param name="args">动态操作的参数数组。</param>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject)">
      <summary>如果将绑定目标动态对象不能，执行的一元动态操作的绑定。</summary>
      <param name="target">动态一元运算的目标。</param>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>如果将绑定目标动态对象不能，执行的一元动态操作的绑定。</summary>
      <param name="target">动态一元运算的目标。</param>
      <param name="errorSuggestion">绑定导致绑定失败的情况下，或为 null。</param>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.IO.FileStream,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.HandleInheritability,System.Boolean)">
      <summary>从现有文件创建一个具有指定的访问模式、名称、继承性和容量的内存映射文件。</summary>
      <param name="fileStream">现有文件的文件流。</param>
      <param name="mapName">要分配给内存映射文件的名称。</param>
      <param name="capacity">要分配给内存映射文件的最大大小（以字节为单位）。 指定 0，以将容量设置为的大小 <paramref name="filestream" />。</param>
      <param name="access">指定内存映射文件允许的访问类型的枚举值之一。此参数不能设置为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" />。</param>
      <param name="inheritability">指定内存映射文件的句柄能否由子进程继承的枚举值之一。 默认值为 <see cref="F:System.IO.HandleInheritability.None" />。</param>
      <param name="leaveOpen">一个值，该值指示是否要关闭源文件流 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFile" /> 被释放。</param>
      <returns>具有指定特征的内存映射文件。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> 为 null 或空字符串。- 或 -<paramref name="capacity" /> 和文件的长度均为零。- 或 -<paramref name="access" /> 设置为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> 或 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> 枚举值时，这不允许。- 或 -<paramref name="access" /> 设置为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Read" /> 和 <paramref name="capacity" /> 大小的长度大于 filestream。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileStream" />  是 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。- 或 -<paramref name="capacity" /> 小于文件大小。- 或 -<paramref name="access" /> 不是有效的 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> 枚举值。- 或 -<paramref name="inheritability" /> 不是有效 <see cref="T:System.IO.HandleInheritability" /> 枚举值。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.IO.FileStream,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileSecurity,System.IO.HandleInheritability,System.Boolean)">
      <summary>创建一个磁盘上的文件从具有指定的名称、 容量、 访问类型、 安全权限、 继承性和释放要求的内存映射文件。</summary>
      <param name="fileStream">
        <paramref name="fileStream" /> 到要映射的文件。</param>
      <param name="mapName">要分配给内存映射文件的名称。</param>
      <param name="capacity">要分配给内存映射文件的最大大小（以字节为单位）。 指定 0，以将容量设置为磁盘上文件的大小。</param>
      <param name="access">指定内存映射文件允许的访问类型的枚举值之一。此参数不能设置为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" />。</param>
      <param name="memoryMappedFileSecurity">可以针对内存映射文件授予的文件访问和操作权限。此参数可以为 null。</param>
      <param name="inheritability">指定内存映射文件的句柄能否由子进程继承的枚举值之一。 默认值为 <see cref="F:System.IO.HandleInheritability.None" />。</param>
      <param name="leaveOpen">true 若要不释放 <paramref name="fileStream" /> 后 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFile" /> 关闭; false 若要释放 <paramref name="fileStream" />。</param>
      <returns>具有指定特征的内存映射文件。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> 是一个空字符串。- 或 -<paramref name="capacity" /> 和文件的长度均为零。- 或 -<paramref name="access" /> 设置为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Read" /> 或 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> 枚举值时，这不允许。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileStream" /> 或 <paramref name="mapname" />  是 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。- 或 -<paramref name="capacity" /> 小于文件大小。- 或 -<paramref name="access" /> 不是有效的 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> 枚举值。- 或 -<paramref name="inheritability" /> 不是有效 <see cref="T:System.IO.HandleInheritability" /> 枚举值。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="fileStream" /> 已关闭。</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="access" /> 设置为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" /> 时 <paramref name="fileStream" />的访问权限设置为 <see cref="F:System.IO.FileAccess.Read" /> 或 <see cref="F:System.IO.FileAccess.Write" />。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="mapName" /> 已存在。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String)">
      <summary>基于磁盘上的文件创建一个内存映射文件。</summary>
      <param name="path">要映射的文件的路径。</param>
      <returns>内存映射文件。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 为空字符串，包含唯一的空白区域，或按照定义包含一个或多个无效字符， <see cref="M:System.IO.Path.GetInvalidFileNameChars" /> 方法。- 或 -<paramref name="path" /> 引用无效的设备。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 为 null。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> 超过了由操作系统定义的最大长度。 在 Windows 中，路径必须包含少于 248 个字符，并且文件的名称必须包含少于 260 个字符。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所需的权限的文件。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode)">
      <summary>基于磁盘上的文件创建一个具有指定访问模式的内存映射文件。</summary>
      <param name="path">要映射的文件的路径。</param>
      <param name="mode">访问模式;必须是 <see cref="F:System.IO.FileMode.Open" />。</param>
      <returns>具有指定访问模式的内存映射文件。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 为空字符串，包含唯一的空白区域，或按照定义包含一个或多个无效字符， <see cref="M:System.IO.Path.GetInvalidFileNameChars" /> 方法。- 或 -<paramref name="path" /> 引用无效的设备。- 或 -<paramref name="mode" /> 为 <see cref="F:System.IO.FileMode.Append" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 为 null。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="mode" /> is <see cref="F:System.IO.FileMode.Create" />, <see cref="F:System.IO.FileMode.CreateNew" />, or <see cref="F:System.IO.FileMode.Truncate" />.- 或 -<paramref name="mode" /> 是 <see cref="F:System.IO.FileMode.OpenOrCreate" /> ，并且磁盘上的文件不存在。- 或 -出现 I/O 错误。</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> 超过了由操作系统定义的最大长度。 在 Windows 中，路径必须包含少于 248 个字符，并且文件的名称必须包含少于 260 个字符。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所需的权限的文件。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String)">
      <summary>基于磁盘上的文件创建一个具有指定访问模式和名称的内存映射文件。</summary>
      <param name="path">要映射的文件的路径。</param>
      <param name="mode">访问模式;必须是 <see cref="F:System.IO.FileMode.Open" />。</param>
      <param name="mapName">要分配给内存映射文件的名称。</param>
      <returns>具有指定名称和访问模式的内存映射文件。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 为空字符串，包含唯一的空白区域，或按照定义包含一个或多个无效字符， <see cref="M:System.IO.Path.GetInvalidFileNameChars" /> 方法。- 或 -<paramref name="path" /> 引用无效的设备。- 或 -<paramref name="mapName" /> 是一个空字符串。- 或 -<paramref name="mode" /> 为 <see cref="F:System.IO.FileMode.Append" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 或 <paramref name="mapName" /> 为 null。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="mode" /> is <see cref="F:System.IO.FileMode.Create" />, <see cref="F:System.IO.FileMode.CreateNew" />, or <see cref="F:System.IO.FileMode.Truncate" />.- 或 -<paramref name="mode" /> 是 <see cref="F:System.IO.FileMode.OpenOrCreate" /> ，并且磁盘上的文件不存在。- 或 -出现 I/O 错误。</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> 超过了由操作系统定义的最大长度。 在 Windows 中，路径必须包含少于 248 个字符，并且文件的名称必须包含少于 260 个字符。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所需的权限的文件。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String,System.Int64)">
      <summary>基于磁盘上的文件创建一个具有指定访问模式、名称和容量的内存映射文件。</summary>
      <param name="path">要映射的文件的路径。</param>
      <param name="mode">访问模式;可以是任一 <see cref="T:System.IO.FileMode" /> 枚举值除 <see cref="F:System.IO.FileMode.Append" />。</param>
      <param name="mapName">要分配给内存映射文件的名称。</param>
      <param name="capacity">要分配给内存映射文件的最大大小（以字节为单位）。 指定 0，以将容量设置为磁盘上文件的大小。</param>
      <returns>具有指定特征的内存映射文件。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 为空字符串，包含唯一的空白区域，或按照定义包含一个或多个无效字符， <see cref="M:System.IO.Path.GetInvalidFileNameChars" /> 方法。- 或 -<paramref name="path" /> 引用无效的设备。- 或 -<paramref name="mapName" /> 是一个空字符串。- 或 -<paramref name="mode" /> 为 <see cref="F:System.IO.FileMode.Append" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 或 <paramref name="mapName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 大于逻辑地址空间的大小。- 或 -<paramref name="capacity" /> 小于零。- 或 -<paramref name="capacity" /> 小于文件大小 （但不是为零）。- 或 -<paramref name="capacity" /> 为零，且在磁盘上文件的大小也为零。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> 超过了由操作系统定义的最大长度。 在 Windows 中，路径必须包含少于 248 个字符，并且文件的名称必须包含少于 260 个字符。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所需的权限的文件。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
      <summary>基于磁盘上的文件创建一个具有指定访问模式、名称、容量和访问类型的内存映射文件。</summary>
      <param name="path">要映射的文件的路径。</param>
      <param name="mode">访问模式;可以是任一 <see cref="T:System.IO.FileMode" /> 枚举值除 <see cref="F:System.IO.FileMode.Append" />。</param>
      <param name="mapName">要分配给内存映射文件的名称。</param>
      <param name="capacity">要分配给内存映射文件的最大大小（以字节为单位）。 指定 0，以将容量设置为磁盘上文件的大小。</param>
      <param name="access">指定内存映射文件允许的访问类型的枚举值之一。</param>
      <returns>具有指定特征的内存映射文件。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> 是一个空字符串。- 或 -<paramref name="access" /> 不允许的值。- 或 -<paramref name="path" /> 指定一个空文件。- 或 -<paramref name="access" /> 指定为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Read" /> 容量大于指示的文件的大小和 <paramref name="path" />。- 或 -<paramref name="mode" /> 为 <see cref="F:System.IO.FileMode.Append" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 或 <paramref name="mapName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 大于逻辑地址空间的大小。- 或 -<paramref name="capacity" /> 小于零。- 或 -<paramref name="capacity" /> 小于文件大小 （但不是为零）。- 或 -<paramref name="capacity" /> 为零，且在磁盘上文件的大小也为零。- 或 -<paramref name="access" /> 不是定义 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> 值。- 或 -文件的大小由 <paramref name="path" /> 大于 <paramref name="capacity" />。</exception>
      <exception cref="T:System.IO.IOException">- 或 -出现 I/O 错误。</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> 超过了由操作系统定义的最大长度。 在 Windows 中，路径必须包含少于 248 个字符，并且文件的名称必须包含少于 260 个字符。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所需的权限的文件。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64)">
      <summary>在系统内存中创建一个具有指定容量的内存映射文件。</summary>
      <param name="mapName">要分配给内存映射文件的名称。</param>
      <param name="capacity">要分配给内存映射文件的最大大小（以字节为单位）。</param>
      <returns>具有指定名称和容量的内存映射文件。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> 是一个空字符串。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mapName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于或等于零。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
      <summary>在系统内存中创建一个具有指定容量和访问类型的内存映射文件。</summary>
      <param name="mapName">要分配给内存映射文件的名称。</param>
      <param name="capacity">要分配给内存映射文件的最大大小（以字节为单位）。</param>
      <param name="access">指定内存映射文件允许的访问类型的枚举值之一。 默认值为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />。</param>
      <returns>具有指定特征的内存映射文件。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> 是一个空字符串。- 或 -通过 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> 枚举值将 <paramref name="access" /> 设置为只写。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mapName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于或等于零。- 或 -<paramref name="access" /> 不是有效的 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> 枚举值。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.HandleInheritability)">
      <summary>创建一个具有指定名称、容量、访问类型、内存分配选项和继承性的内存映射文件。</summary>
      <param name="mapName">要分配给内存映射文件的名称。</param>
      <param name="capacity">要分配给内存映射文件的最大大小（以字节为单位）。</param>
      <param name="access">指定内存映射文件允许的访问类型的枚举值之一。 默认值为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />。</param>
      <param name="options">枚举值的按位组合，用于为内存映射文件指定内存分配选项。</param>
      <param name="inheritability">一个值，该值指定内存映射文件的句柄能否由子进程继承。 默认值为 <see cref="F:System.IO.HandleInheritability.None" />。</param>
      <returns>具有指定特征的内存映射文件。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> 是一个空字符串。- 或 -通过 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> 枚举值将 <paramref name="access" /> 设置为只写。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mapName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于或等于零。- 或 -<paramref name="access" /> 不是有效的 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> 枚举值。- 或 -<paramref name="inheritability" /> 不是有效的 <see cref="T:System.IO.HandleInheritability" /> 值。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.MemoryMappedFiles.MemoryMappedFileSecurity,System.IO.HandleInheritability)">
      <summary>在系统内存中创建一个具有指定容量、访问类型、内存分配、安全权限和继承性的内存映射文件。</summary>
      <param name="mapName">要分配给内存映射文件的名称。</param>
      <param name="capacity">要分配给内存映射文件的最大大小（以字节为单位）。</param>
      <param name="access">指定内存映射文件允许的访问类型的枚举值之一。 默认值为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />。</param>
      <param name="options">枚举值的按位组合，用于为内存映射文件指定内存分配选项。</param>
      <param name="memoryMappedFileSecurity">可以针对内存映射文件授予的文件访问和操作权限。此参数可以为 null。</param>
      <param name="inheritability">指定内存映射文件的句柄能否由子进程继承的枚举值之一。 默认值为 <see cref="F:System.IO.HandleInheritability.None" />。</param>
      <returns>具有指定特征的内存映射文件。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> 是一个空字符串。- 或 -通过 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> 枚举值将 <paramref name="access" /> 设置为只写。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mapName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于或等于零。- 或 -<paramref name="access" /> 不是有效的 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> 枚举值。- 或 -<paramref name="inheritability" /> 不是有效 <see cref="T:System.IO.HandleInheritability" /> 枚举值。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64)">
      <summary>在系统内存中创建或打开一个具有指定容量的内存映射文件。</summary>
      <param name="mapName">要分配给内存映射文件的名称。</param>
      <param name="capacity">要分配给内存映射文件的最大大小（以字节为单位）。</param>
      <returns>具有指定名称和大小的内存映射文件。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> 是一个空字符串。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mapName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 大于逻辑地址空间的大小。- 或 -<paramref name="capacity" /> 小于或等于零。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
      <summary>在系统内存中创建或打开一个具有指定容量和访问类型的内存映射文件。</summary>
      <param name="mapName">要分配给内存映射文件的名称。</param>
      <param name="capacity">要分配给内存映射文件的最大大小（以字节为单位）。</param>
      <param name="access">指定内存映射文件允许的访问类型的枚举值之一。 默认值为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />。</param>
      <returns>具有指定特征的内存映射文件。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> 是一个空字符串。- 或 -通过 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> 枚举值将 <paramref name="access" /> 设置为只写。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mapName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 大于逻辑地址空间的大小。- 或 -<paramref name="capacity" /> 小于或等于零。- 或 -<paramref name="access" /> 不是有效的 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> 枚举值。</exception>
      <exception cref="T:System.UnauthorizedAccessException">操作系统拒绝对该文件; 指定访问权限例如，访问权限设置为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> 或 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />, ，但该文件或目录是只读的。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.HandleInheritability)">
      <summary>创建一个新的空内存映射文件或打开一个现有的内存映射文件（如果存在具有相同名称的内存映射文件）。 如果打开现有的文件，则将忽略容量、选项、内存参数。</summary>
      <param name="mapName">要分配给内存映射文件的名称。</param>
      <param name="capacity">要分配给内存映射文件的最大大小（以字节为单位）。</param>
      <param name="access">指定内存映射文件允许的访问类型的枚举值之一。 默认值为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />。</param>
      <param name="options">值的按位组合，它指示要应用到文件的内存分配选项。</param>
      <param name="inheritability">一个值，该值指定内存映射文件的句柄能否由子进程继承。 默认值为 <see cref="F:System.IO.HandleInheritability.None" />。</param>
      <returns>具有指定特征的内存映射文件。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> 是一个空字符串。- 或 -通过 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> 枚举值将 <paramref name="access" /> 设置为只写。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mapName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 大于逻辑地址空间的大小。- 或 -<paramref name="capacity" /> 小于或等于零。- 或 -<paramref name="access" /> 不是有效的 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> 枚举值。- 或 -<paramref name="inheritability" /> 不是有效 <see cref="T:System.IO.HandleInheritability" /> 枚举值。</exception>
      <exception cref="T:System.UnauthorizedAccessException">操作系统拒绝对该文件; 指定访问权限例如，访问权限设置为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> 或 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />, ，但该文件或目录是只读的。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.MemoryMappedFiles.MemoryMappedFileSecurity,System.IO.HandleInheritability)">
      <summary>在系统内存中创建或打开一个具有指定容量、访问类型、内存分配、安全权限和继承性的内存映射文件。</summary>
      <param name="mapName">要分配给内存映射文件的名称。</param>
      <param name="capacity">要分配给内存映射文件的最大大小（以字节为单位）。</param>
      <param name="access">指定内存映射文件允许的访问类型的枚举值之一。 默认值为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />。</param>
      <param name="options">枚举值的按位组合，用于为内存映射文件指定内存分配选项。</param>
      <param name="memoryMappedFileSecurity">可以针对内存映射文件授予的文件访问和操作权限。此参数可以为 null。</param>
      <param name="inheritability">指定内存映射文件的句柄能否由子进程继承的枚举值之一。 默认值为 <see cref="F:System.IO.HandleInheritability.None" />。</param>
      <returns>具有指定特征的内存映射文件。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> 是一个空字符串。- 或 -通过 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> 枚举值将 <paramref name="access" /> 设置为只写。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mapName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 大于逻辑地址空间的大小。- 或 -<paramref name="capacity" /> 小于或等于零。- 或 -<paramref name="access" /> 不是有效的 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> 枚举值。- 或 -<paramref name="inheritability" /> 不是有效 <see cref="T:System.IO.HandleInheritability" /> 枚举值。</exception>
      <exception cref="T:System.UnauthorizedAccessException">操作系统不允许指定 <paramref name="access" /> 到该文件; 例如， <paramref name="access" /> 设置为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> 或 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />, ，但该文件或目录是只读的。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor">
      <summary>创建 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor" /> ，它映射到内存映射文件的视图。</summary>
      <returns>可随机访问的内存块。</returns>
      <exception cref="T:System.UnauthorizedAccessException">对内存映射文件的访问是未经授权。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(System.Int64,System.Int64)">
      <summary>创建 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor" /> ，它映射到视图的内存映射文件中，并具有指定的偏移量和大小。</summary>
      <param name="offset">启动此视图的字节位置。</param>
      <param name="size">视图的大小。 指定 0 （零），以创建一个视图，其中起点是 <paramref name="offset" /> 和大约在内存映射文件的结尾结束。</param>
      <returns>可随机访问的内存块。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="size" /> 是负值。- 或 -<paramref name="size" /> 大于逻辑地址空间。</exception>
      <exception cref="T:System.UnauthorizedAccessException">对内存映射文件的访问是未经授权。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
      <summary>创建 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor" /> ，它映射到视图的内存映射文件中，并具有指定的偏移、 大小和访问限制。</summary>
      <param name="offset">启动此视图的字节位置。</param>
      <param name="size">视图的大小。 指定 0 （零），以创建一个视图，其中起点是 <paramref name="offset" /> 和大约在内存映射文件的结尾结束。</param>
      <param name="access">指定内存映射文件允许的访问类型的枚举值之一。 默认值为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />。</param>
      <returns>可随机访问的内存块。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="size" /> 是负值。- 或 -<paramref name="size" /> 大于逻辑地址空间。</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="access" /> 是无效的内存映射文件。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream">
      <summary>创建映射到内存映射文件视图的流。</summary>
      <returns>内存流。</returns>
      <exception cref="T:System.UnauthorizedAccessException">对内存映射文件的访问是未经授权。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(System.Int64,System.Int64)">
      <summary>创建一个流，它映射到内存映射文件的视图并具有指定的偏移和大小。</summary>
      <param name="offset">启动此视图的字节位置。</param>
      <param name="size">视图的大小。 指定 0 （零），以创建一个视图，其中起点是 <paramref name="offset" /> 和大约在内存映射文件的结尾结束。</param>
      <returns>具有指定偏移和大小的内存流。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="size" /> 是负值。- 或 -<paramref name="size" /> 大于逻辑地址空间。</exception>
      <exception cref="T:System.UnauthorizedAccessException">对内存映射文件的访问是未经授权。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="size" /> 大于总虚拟内存。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
      <summary>创建一个流，它映射到内存映射文件的视图，并具有指定的偏移、大小和访问类型。</summary>
      <param name="offset">启动此视图的字节位置。</param>
      <param name="size">视图的大小。 指定 0 （零），以创建一个视图，其中起点是 <paramref name="offset" /> 和大约在内存映射文件的结尾结束。</param>
      <param name="access">指定内存映射文件允许的访问类型的枚举值之一。 默认值为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />。</param>
      <returns>具有指定特征的内存流。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="size" /> 是负值。- 或 -<paramref name="size" /> 大于逻辑地址空间。- 或 -<paramref name="access " />不是有效 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> 枚举值。</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="access" /> 是无效的内存映射文件。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="size" /> 大于总虚拟内存。- 或 -<paramref name="access" /> 是无效的内存映射文件。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose">
      <summary>释放由 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFile" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFile" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.GetAccessControl">
      <summary>获取对内存映射文件资源的访问控制。</summary>
      <returns>可以针对内存映射文件授予的文件访问和操作权限。</returns>
      <exception cref="T:System.InvalidOperationException">要设置安全信息的基础调用失败。</exception>
      <exception cref="T:System.NotSupportedException">要设置安全信息的基础调用失败。</exception>
      <exception cref="T:System.ObjectDisposedException">关闭内存映射文件。</exception>
      <exception cref="T:System.PlatformNotSupportedException">当前平台是 Windows 98 或更早版本。</exception>
      <exception cref="T:System.UnauthorizedAccessException">要设置安全信息的基础调用失败。- 或 -内存映射文件以打开 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> 仅。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String)">
      <summary>在系统内存中打开一个具有指定名称的现有内存映射文件。</summary>
      <param name="mapName">要打开的内存映射文件的名称。</param>
      <returns>具有指定名称的内存映射文件。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> 是一个空字符串。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mapName" /> 为 null。</exception>
      <exception cref="T:System.IO.FileNotFoundException">为指定的文件 <paramref name="mapName" /> 不存在。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String,System.IO.MemoryMappedFiles.MemoryMappedFileRights)">
      <summary>在系统内存中打开一个具有指定名称和访问权限的现有内存映射文件。</summary>
      <param name="mapName">要打开的内存映射文件的名称。</param>
      <param name="desiredAccessRights">指定要应用于内存映射文件的访问权限的枚举值之一。</param>
      <returns>具有指定特征的内存映射文件。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> 是一个空字符串。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mapName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="desiredAccessRights" /> 不是有效 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileRights" /> 枚举值。</exception>
      <exception cref="T:System.IO.FileNotFoundException">为指定的文件 <paramref name="mapName" /> 不存在。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String,System.IO.MemoryMappedFiles.MemoryMappedFileRights,System.IO.HandleInheritability)">
      <summary>在系统内存中打开一个具有指定名称、访问权限和继承性的现有内存映射文件。</summary>
      <param name="mapName">要打开的内存映射文件的名称。</param>
      <param name="desiredAccessRights">指定要应用于内存映射文件的访问权限的枚举值之一。</param>
      <param name="inheritability">指定内存映射文件的句柄能否由子进程继承的枚举值之一。 默认值为 <see cref="F:System.IO.HandleInheritability.None" />。</param>
      <returns>具有指定特征的内存映射文件。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> 是一个空字符串。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mapName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="desiredAccessRights" /> 不是有效 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileRights" /> 枚举值。- 或 -<paramref name="inheritability" /> 不是有效 <see cref="T:System.IO.HandleInheritability" /> 枚举值。</exception>
      <exception cref="T:System.UnauthorizedAccessException">所请求的访问是无效的内存映射文件。</exception>
      <exception cref="T:System.IO.FileNotFoundException">为指定的文件 <paramref name="mapName" /> 不存在。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.SetAccessControl(System.IO.MemoryMappedFiles.MemoryMappedFileSecurity)">
      <summary>设置对内存映射文件资源的访问控制。</summary>
      <param name="memoryMappedFileSecurity">可以针对内存映射文件授予的文件访问和操作权限。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="memoryMappedFileSecurity" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">要设置安全信息的基础调用失败。</exception>
      <exception cref="T:System.NotSupportedException">要设置安全信息的基础调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">要设置安全信息的基础调用失败。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFileSecurity.#ctor">
      <summary>初始化 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileSecurity" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.Flush">
      <summary>清除此视图的所有缓冲区并导致所有缓冲的数据写入到基础文件。</summary>
      <exception cref="T:System.ObjectDisposedException">访问器已关闭后调用的方法。</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedViewStream.Flush">
      <summary>清除此流的所有缓冲区，使得所有缓冲的数据写入到基础文件。</summary>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedViewStream.SetLength(System.Int64)">
      <summary>设置当前流的长度。</summary>
      <param name="value">所需的当前流的长度（以字节表示）。</param>
      <exception cref="T:System.NotSupportedException">不支持此方法。</exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle)">
      <summary>新实例初始化 <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> 类从指定句柄。</summary>
      <param name="direction">确定管道方向的枚举值之一。匿名管道只能在一个方向，因此 <paramref name="direction" /> 不能设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />。</param>
      <param name="safePipeHandle">安全句柄的管道此 <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> 对象将封装。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="safePipeHandle " />不是有效的句柄。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="safePipeHandle" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">将 <paramref name="direction" /> 设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误，如磁盘错误。- 或 -已关闭流。</exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,System.String)">
      <summary>新实例初始化 <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> 带有指定的管道方向和管道句柄的字符串表示的类。</summary>
      <param name="direction">确定管道方向的枚举值之一。匿名管道只能在一个方向，因此 <paramref name="direction" /> 不能设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />。</param>
      <param name="pipeHandleAsString">表示管道句柄的字符串。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeHandleAsString" /> 是无效的句柄。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeHandleAsString" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">将 <paramref name="direction" /> 设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />。</exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> 类的指定的字符串表示形式的管道句柄。</summary>
      <param name="pipeHandleAsString">表示管道句柄的字符串。</param>
      <exception cref="T:System.IO.IOException">
        <paramref name="pipeHandleAsString" /> 不是有效的管道句柄。</exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeClientStream.Finalize">
      <summary>释放非托管的资源并执行其他清理操作之前 <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> 通过垃圾回收回收实例。</summary>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor">
      <summary>初始化 <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection)">
      <summary>新实例初始化 <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> 具有所指定的管道方向的类。</summary>
      <param name="direction">确定管道方向的枚举值之一。匿名管道只能在一个方向，因此 <paramref name="direction" /> 不能设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />。</param>
      <exception cref="T:System.NotSupportedException">将 <paramref name="direction" /> 设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />。</exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle,Microsoft.Win32.SafeHandles.SafePipeHandle)">
      <summary>新实例初始化 <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> 类从指定的管道句柄。</summary>
      <param name="direction">确定管道方向的枚举值之一。匿名管道只能在一个方向，因此 <paramref name="direction" /> 不能设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />。</param>
      <param name="serverSafePipeHandle">安全句柄的管道此 <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> 对象将封装。</param>
      <param name="clientSafePipeHandle">安全句柄 <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> 对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="serverSafePipeHandle" /> 或 <paramref name="clientSafePipeHandle" /> 是无效的句柄。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serverSafePipeHandle" /> 或 <paramref name="clientSafePipeHandle" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">将 <paramref name="direction" /> 设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误，如磁盘错误。- 或 -已关闭流。</exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability)">
      <summary>新实例初始化 <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> 类，具有指定的管道方向和继承模式。</summary>
      <param name="direction">确定管道方向的枚举值之一。匿名管道只能在一个方向，因此 <paramref name="direction" /> 不能设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />。</param>
      <param name="inheritability">确定基础句柄能否由子进程继承的枚举值之一。 必须将其设置为 <see cref="F:System.IO.HandleInheritability.None" /> 或 <see cref="F:System.IO.HandleInheritability.Inheritable" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="inheritability" /> 未设置为 <see cref="F:System.IO.HandleInheritability.None" /> 或 <see cref="F:System.IO.HandleInheritability.Inheritable" />。</exception>
      <exception cref="T:System.NotSupportedException">将 <paramref name="direction" /> 设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />。</exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> 类具有指定的管道方向、 继承模式和缓冲区大小。</summary>
      <param name="direction">确定管道方向的枚举值之一。匿名管道只能在一个方向，因此 <paramref name="direction" /> 不能设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />。</param>
      <param name="inheritability">确定基础句柄能否由子进程继承的枚举值之一。 必须将其设置为 <see cref="F:System.IO.HandleInheritability.None" /> 或 <see cref="F:System.IO.HandleInheritability.Inheritable" />。</param>
      <param name="bufferSize">缓冲区的大小。 此值必须大于或等于 0。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="inheritability" /> 未设置为 <see cref="F:System.IO.HandleInheritability.None" /> 或 <see cref="F:System.IO.HandleInheritability.Inheritable" />。- 或 -<paramref name="bufferSize" /> 小于 0。</exception>
      <exception cref="T:System.NotSupportedException">将 <paramref name="direction" /> 设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />。</exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32,System.IO.Pipes.PipeSecurity)">
      <summary>新实例初始化 <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> 类，具有指定的管道方向、 继承模式、 缓冲区大小和管道安全性。</summary>
      <param name="direction">确定管道方向的枚举值之一。匿名管道只能在一个方向，因此 <paramref name="direction" /> 不能设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />。</param>
      <param name="inheritability">确定基础句柄能否由子进程继承的枚举值之一。</param>
      <param name="bufferSize">缓冲区的大小。 此值必须大于或等于 0。</param>
      <param name="pipeSecurity">一个对象，确定管道的访问控制和审核安全性。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="inheritability" /> 未设置为 <see cref="F:System.IO.HandleInheritability.None" /> 或 <see cref="F:System.IO.HandleInheritability.Inheritable" />。- 或 -<paramref name="bufferSize" /> 小于 0。</exception>
      <exception cref="T:System.NotSupportedException">将 <paramref name="direction" /> 设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />。</exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle">
      <summary>关闭的本地副本 <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> 对象的句柄。</summary>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.Finalize">
      <summary>释放非托管的资源并执行其他清理操作之前 <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> 通过垃圾回收回收实例。</summary>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString">
      <summary>获取已连接 <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> 作为字符串的对象的句柄。</summary>
      <returns>一个字符串，表示已连接 <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> 对象的句柄。</returns>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,System.Boolean,System.Boolean,Microsoft.Win32.SafeHandles.SafePipeHandle)">
      <summary>新实例初始化 <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> 为指定的管道方向与指定的管道句柄。</summary>
      <param name="direction">确定管道方向的枚举值之一。</param>
      <param name="isAsync">true 指示句柄已异步打开；否则为 false。</param>
      <param name="isConnected">true 若要指示管道已连接;否则为 false。</param>
      <param name="safePipeHandle">安全句柄的管道此 <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> 对象将封装。</param>
      <exception cref="T:System.IO.IOException">
        <paramref name="safePipeHandle" /> 不是有效的句柄。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="safePipeHandle" /> 不是有效的句柄。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="safePipeHandle" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="direction" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" /> 值。</exception>
      <exception cref="T:System.IO.IOException">已关闭流。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> 初始化具有指定的管道名称。</summary>
      <param name="pipeName">管道的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> 是一个长度为零的字符串。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> 设置为"anonymous"。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> 类具有指定的管道和服务器名称。</summary>
      <param name="serverName">要连接的远程计算机的名称，或者为“.”，以指定本地计算机。</param>
      <param name="pipeName">管道的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> 或 <paramref name="serverName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> 或 <paramref name="serverName" /> 是零长度字符串。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> 设置为"anonymous"。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String,System.IO.Pipes.PipeAccessRights,System.IO.Pipes.PipeOptions,System.Security.Principal.TokenImpersonationLevel,System.IO.HandleInheritability)">
      <summary>新实例初始化 <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> 使用指定的管道和服务器名称，指定的管道选项、 安全模拟级别以及继承模式。</summary>
      <param name="serverName">要连接的远程计算机的名称，或者为“.”，以指定本地计算机。</param>
      <param name="pipeName">管道的名称。</param>
      <param name="desiredAccessRights">指定所需管道访问权限的枚举值之一。</param>
      <param name="options">确定如何打开或创建管道的枚举值之一。</param>
      <param name="impersonationLevel">确定安全模拟级别的枚举值之一。</param>
      <param name="inheritability">确定基础句柄是否将由子进程继承的枚举值之一。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> 或 <paramref name="serverName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> 或 <paramref name="serverName" /> 是零长度字符串。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> 设置为"anonymous"。- 或 -<paramref name="options" /> 不是有效 <see cref="T:System.IO.Pipes.PipeOptions" /> 值。- 或 -<paramref name="impersonationLevel" /> 不是有效 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值。- 或 -<paramref name="inheritability" /> 不是有效的 <see cref="T:System.IO.HandleInheritability" /> 值。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String,System.IO.Pipes.PipeDirection)">
      <summary>新实例初始化 <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> 带有指定的管道和服务器名称和指定的管道方向的类。</summary>
      <param name="serverName">要连接的远程计算机的名称，或者为“.”，以指定本地计算机。</param>
      <param name="pipeName">管道的名称。</param>
      <param name="direction">确定管道方向的枚举值之一。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> 或 <paramref name="serverName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> 或 <paramref name="serverName" /> 是零长度字符串。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> 设置为"anonymous"。- 或 -<paramref name="direction" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" /> 值。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String,System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeOptions)">
      <summary>新实例初始化 <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> 使用指定的管道和服务器名称，以及指定的管道方向和管道选项的类。</summary>
      <param name="serverName">要连接的远程计算机的名称，或者为“.”，以指定本地计算机。</param>
      <param name="pipeName">管道的名称。</param>
      <param name="direction">确定管道方向的枚举值之一。</param>
      <param name="options">确定如何打开或创建管道的枚举值之一。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> 或 <paramref name="serverName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> 或 <paramref name="serverName" /> 是零长度字符串。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> 设置为"anonymous"。- 或 -<paramref name="direction" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" /> 值。- 或 -<paramref name="options" /> 不是有效 <see cref="T:System.IO.Pipes.PipeOptions" /> 值。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String,System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeOptions,System.Security.Principal.TokenImpersonationLevel)">
      <summary>新实例初始化 <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> 使用指定的管道和服务器名称，以及指定的管道方向、 管道选项、 和安全模拟级别的类。</summary>
      <param name="serverName">要连接的远程计算机的名称，或者为“.”，以指定本地计算机。</param>
      <param name="pipeName">管道的名称。</param>
      <param name="direction">确定管道方向的枚举值之一。</param>
      <param name="options">确定如何打开或创建管道的枚举值之一。</param>
      <param name="impersonationLevel">确定安全模拟级别的枚举值之一。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> 或 <paramref name="serverName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> 或 <paramref name="serverName" /> 是零长度字符串。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> 设置为"anonymous"。- 或 -<paramref name="direction" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" /> 值。- 或 -<paramref name="options" /> 不是有效 <see cref="T:System.IO.Pipes.PipeOptions" /> 值。- 或 -<paramref name="impersonationLevel" /> 不是有效 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String,System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeOptions,System.Security.Principal.TokenImpersonationLevel,System.IO.HandleInheritability)">
      <summary>新实例初始化 <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> 类具有指定的管道和服务器名称、 所指定的管道方向、 管道选项、 安全模拟级别和继承模式。</summary>
      <param name="serverName">要连接的远程计算机的名称，或者为“.”，以指定本地计算机。</param>
      <param name="pipeName">管道的名称。</param>
      <param name="direction">确定管道方向的枚举值之一。</param>
      <param name="options">确定如何打开或创建管道的枚举值之一。</param>
      <param name="impersonationLevel">确定安全模拟级别的枚举值之一。</param>
      <param name="inheritability">确定基础句柄是否将由子进程继承的枚举值之一。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> 或 <paramref name="serverName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> 或 <paramref name="serverName" /> 是零长度字符串。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> 设置为"anonymous"。- 或 -<paramref name="direction" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" /> 值。- 或 -<paramref name="options" /> 不是有效 <see cref="T:System.IO.Pipes.PipeOptions" /> 值。- 或 -<paramref name="impersonationLevel" /> 不是有效 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值。- 或 -<paramref name="inheritability" /> 不是有效的 <see cref="T:System.IO.HandleInheritability" /> 值。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.Connect">
      <summary>连接到具有无限超时值的等待的服务器。</summary>
      <exception cref="T:System.InvalidOperationException">已连接客户端。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.Connect(System.Int32)">
      <summary>在指定的超时期间内连接到等待的服务器。</summary>
      <param name="timeout">在连接超时之前等待服务器响应的毫秒数。</param>
      <exception cref="T:System.TimeoutException">无法连接到在指定服务器 <paramref name="timeout" /> 段。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 小于 0，且未设置为 <see cref="F:System.Threading.Timeout.Infinite" />。</exception>
      <exception cref="T:System.InvalidOperationException">已连接客户端。</exception>
      <exception cref="T:System.IO.IOException">服务器连接到另一个客户端和超时期限已过。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.ConnectAsync">
      <summary>在无限超时期间内异步连接到等待的服务器。</summary>
      <returns>表示异步连接操作的任务。</returns>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.ConnectAsync(System.Int32)">
      <summary>在指定的超时期间内异步连接到等待的服务器。</summary>
      <param name="timeout">在连接超时之前等待服务器响应的毫秒数。</param>
      <returns>表示异步连接操作的任务。</returns>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.ConnectAsync(System.Int32,System.Threading.CancellationToken)">
      <summary>在指定的超时期间内异步连接到等待的服务器并监视取消请求。</summary>
      <param name="timeout">在连接超时之前等待服务器响应的毫秒数。</param>
      <param name="cancellationToken">要监视取消请求的标记。 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示异步连接操作的任务。</returns>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.ConnectAsync(System.Threading.CancellationToken)">
      <summary>异步连接到等待的服务器并监视取消请求。</summary>
      <param name="cancellationToken">要监视取消请求的标记。 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示异步连接操作的任务。</returns>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.Finalize">
      <summary>释放非托管的资源并执行其他清理操作之前 <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> 通过垃圾回收回收实例。</summary>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.Boolean,System.Boolean,Microsoft.Win32.SafeHandles.SafePipeHandle)">
      <summary>新实例初始化 <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> 类从指定的管道句柄。</summary>
      <param name="direction">确定管道方向的枚举值之一。</param>
      <param name="isAsync">true 指示句柄已异步打开；否则为 false。</param>
      <param name="isConnected">true 若要指示管道已连接;否则为 false。</param>
      <param name="safePipeHandle">安全句柄的管道此 <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> 对象将封装。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="direction" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" /> 值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="safePipeHandle" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="safePipeHandle" /> 是无效的句柄。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="safePipeHandle" /> 不是有效的管道句柄。- 或 -已超出服务器实例的最大数量。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> 初始化具有指定的管道名称。</summary>
      <param name="pipeName">管道的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> 是一个长度为零的字符串。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> 设置为"anonymous"。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pipeName" /> 包含一个冒号 (":")。</exception>
      <exception cref="T:System.PlatformNotSupportedException">操作系统是 Windows Millennium Edition、 Windows 98 或 Windows 95 中，这不受支持。</exception>
      <exception cref="T:System.IO.IOException">已超出服务器实例的最大数量。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection)">
      <summary>新实例初始化 <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> 使用指定的管道名称和管道方向的类。</summary>
      <param name="pipeName">管道的名称。</param>
      <param name="direction">确定管道方向的枚举值之一。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> 是一个长度为零的字符串。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> 设置为"anonymous"。- 或 -<paramref name="direction" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" /> 值。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pipeName" /> 包含一个冒号 (":")。</exception>
      <exception cref="T:System.PlatformNotSupportedException">操作系统是 Windows Millennium Edition、 Windows 98 或 Windows 95 中，这不受支持。</exception>
      <exception cref="T:System.IO.IOException">已超出服务器实例的最大数量。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32)">
      <summary>初始化的新实例 <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> 用指定的管道名称、 管道方向和最大数量的服务器实例。</summary>
      <param name="pipeName">管道的名称。</param>
      <param name="direction">确定管道方向的枚举值之一。</param>
      <param name="maxNumberOfServerInstances">共享同一名称的服务器实例的最大数量。 您可以将传递 <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" /> 为此值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> 是一个长度为零的字符串。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> 设置为"anonymous"。- 或 -<paramref name="direction" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" /> 值。- 或 -非负数字是必需的。- 或 -<paramref name="maxNumberofServerInstances" /> 小于-1 或更高版本超过 254 个字符 (-1 指示 <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" />)- 或 -<see cref="F:System.IO.HandleInheritability.None" /> 或 <see cref="F:System.IO.HandleInheritability.Inheritable" /> 是必需的。- 或 -访问权限仅限于 <see cref="F:System.IO.Pipes.PipeAccessRights.ChangePermissions" /> , ，<see cref="F:System.IO.Pipes.PipeAccessRights.TakeOwnership" /> , ，和 <see cref="F:System.IO.Pipes.PipeAccessRights.AccessSystemSecurity" /> 标志。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pipeName" /> 包含一个冒号 (":")。</exception>
      <exception cref="T:System.PlatformNotSupportedException">操作系统是 Windows Millennium Edition、 Windows 98 或 Windows 95 中，这不受支持。</exception>
      <exception cref="T:System.IO.IOException">已超出服务器实例的最大数量。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode)">
      <summary>新实例初始化 <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> 使用指定的管道名称、 管道方向、 最大数量的服务器实例和传输模式的类。</summary>
      <param name="pipeName">管道的名称。</param>
      <param name="direction">确定管道方向的枚举值之一。</param>
      <param name="maxNumberOfServerInstances">共享同一名称的服务器实例的最大数量。 您可以将传递 <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" /> 为此值。</param>
      <param name="transmissionMode">确定管道传输模式的枚举值之一。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> 是一个长度为零的字符串。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> 设置为"anonymous"。- 或 -<paramref name="direction" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" /> 值。- 或 -<paramref name="maxNumberofServerInstances" /> 小于-1 或更高版本超过 254 个字符 (-1 指示 <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" />)</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pipeName" /> 包含一个冒号 (":")。</exception>
      <exception cref="T:System.PlatformNotSupportedException">操作系统是 Windows Millennium Edition、 Windows 98 或 Windows 95 中，这不受支持。</exception>
      <exception cref="T:System.IO.IOException">已超出服务器实例的最大数量。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode,System.IO.Pipes.PipeOptions)">
      <summary>新实例初始化 <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> 类，具有指定的管道名称、 管道方向、 最大数量的服务器实例、 传输模式和管道选项。</summary>
      <param name="pipeName">管道的名称。</param>
      <param name="direction">确定管道方向的枚举值之一。</param>
      <param name="maxNumberOfServerInstances">共享同一名称的服务器实例的最大数量。 您可以将传递 <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" /> 为此值。</param>
      <param name="transmissionMode">确定管道传输模式的枚举值之一。</param>
      <param name="options">确定如何打开或创建管道的枚举值之一。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> 是一个长度为零的字符串。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> 设置为"anonymous"。- 或 -<paramref name="direction" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" /> 值。- 或 -<paramref name="maxNumberofServerInstances" /> 小于-1 或更高版本超过 254 个字符 (-1 指示 <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" />)- 或 -<paramref name="options" /> 不是有效 <see cref="T:System.IO.Pipes.PipeOptions" /> 值。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pipeName" /> 包含一个冒号 (":")。</exception>
      <exception cref="T:System.PlatformNotSupportedException">操作系统是 Windows Millennium Edition、 Windows 98 或 Windows 95 中，这不受支持。</exception>
      <exception cref="T:System.IO.IOException">已超出服务器实例的最大数量。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode,System.IO.Pipes.PipeOptions,System.Int32,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> 使用指定的管道名称、 管道方向、 最大数目的服务器实例、 传输模式、 管道选项、 和建议的输入输出缓冲区大小。</summary>
      <param name="pipeName">管道的名称。</param>
      <param name="direction">确定管道方向的枚举值之一。</param>
      <param name="maxNumberOfServerInstances">共享同一名称的服务器实例的最大数量。 您可以将传递 <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" /> 为此值。</param>
      <param name="transmissionMode">确定管道传输模式的枚举值之一。</param>
      <param name="options">确定如何打开或创建管道的枚举值之一。</param>
      <param name="inBufferSize">一个大于 0 的正值，指示输入缓冲区大小。</param>
      <param name="outBufferSize">一个大于 0 的正值，指示输出缓冲区大小。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> 是一个长度为零的字符串。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> 设置为"anonymous"。- 或 -<paramref name="direction" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" /> 值。- 或 -<paramref name="maxNumberofServerInstances" /> 小于-1 或更高版本超过 254 个字符 (-1 指示 <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" />)- 或 -<paramref name="options" /> 不是有效 <see cref="T:System.IO.Pipes.PipeOptions" /> 值。- 或 -<paramref name="inBufferSize" /> 为负。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pipeName" /> 包含一个冒号 (":")。</exception>
      <exception cref="T:System.PlatformNotSupportedException">操作系统是 Windows Millennium Edition、 Windows 98 或 Windows 95 中，这不受支持。</exception>
      <exception cref="T:System.IO.IOException">已超出服务器实例的最大数量。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode,System.IO.Pipes.PipeOptions,System.Int32,System.Int32,System.IO.Pipes.PipeSecurity)">
      <summary>新实例初始化 <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> 类使用指定的管道名称、 管道方向、 最大数量的服务器实例、 传输模式、 管道选项、 建议的输入输出缓冲区大小和管道安全性。</summary>
      <param name="pipeName">管道的名称。</param>
      <param name="direction">确定管道方向的枚举值之一。</param>
      <param name="maxNumberOfServerInstances">共享同一名称的服务器实例的最大数量。 您可以将传递 <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" /> 为此值。</param>
      <param name="transmissionMode">确定管道传输模式的枚举值之一。</param>
      <param name="options">确定如何打开或创建管道的枚举值之一。</param>
      <param name="inBufferSize">一个大于 0 的正值，指示输入缓冲区大小。</param>
      <param name="outBufferSize">一个大于 0 的正值，指示输出缓冲区大小。</param>
      <param name="pipeSecurity">一个对象，确定管道的访问控制和审核安全性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> 是一个长度为零的字符串。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> 设置为"anonymous"。- 或 -<paramref name="direction" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" /> 值。- 或 -<paramref name="maxNumberofServerInstances" />  小于-1 或更高版本超过 254 个字符 (-1 指示 <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" />)- 或 -<paramref name="options" /> 不是有效 <see cref="T:System.IO.Pipes.PipeOptions" /> 值。- 或 -<paramref name="inBufferSize" /> 为负。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pipeName" /> 包含一个冒号 (":")。</exception>
      <exception cref="T:System.PlatformNotSupportedException">操作系统是 Windows Millennium Edition、 Windows 98 或 Windows 95 中，这不受支持。</exception>
      <exception cref="T:System.IO.IOException">已超出服务器实例的最大数量。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode,System.IO.Pipes.PipeOptions,System.Int32,System.Int32,System.IO.Pipes.PipeSecurity,System.IO.HandleInheritability)">
      <summary>新实例初始化 <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> 类，具有指定的管道名称、 管道方向、 最大数量的服务器实例、 传输模式、 管道选项、 建议传入和传出的缓冲区大小、 管道安全性和继承模式。</summary>
      <param name="pipeName">管道的名称。</param>
      <param name="direction">确定管道方向的枚举值之一。</param>
      <param name="maxNumberOfServerInstances">共享同一名称的服务器实例的最大数量。 您可以将传递 <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" /> 为此值。</param>
      <param name="transmissionMode">确定管道传输模式的枚举值之一。</param>
      <param name="options">确定如何打开或创建管道的枚举值之一。</param>
      <param name="inBufferSize">一个大于 0 的正值，指示输入缓冲区大小。</param>
      <param name="outBufferSize">一个大于 0 的正值，指示输出缓冲区大小。</param>
      <param name="pipeSecurity">一个对象，确定管道的访问控制和审核安全性。</param>
      <param name="inheritability">确定基础句柄能否由子进程继承的枚举值之一。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> 是一个长度为零的字符串。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> 设置为"anonymous"。- 或 -<paramref name="direction" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" /> 值。- 或 -<paramref name="maxNumberofServerInstances" /> 小于-1 或更高版本超过 254 个字符 (-1 指示 <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" />)- 或 -<paramref name="options" /> 不是有效 <see cref="T:System.IO.Pipes.PipeOptions" /> 值。- 或 -<paramref name="inBufferSize" /> 为负。- 或 -<paramref name="inheritability" /> 不是有效的 <see cref="T:System.IO.HandleInheritability" /> 值。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pipeName" /> 包含一个冒号 (":")。</exception>
      <exception cref="T:System.PlatformNotSupportedException">操作系统是 Windows Millennium Edition、 Windows 98 或 Windows 95 中，这不受支持。</exception>
      <exception cref="T:System.IO.IOException">已超出服务器实例的最大数量。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode,System.IO.Pipes.PipeOptions,System.Int32,System.Int32,System.IO.Pipes.PipeSecurity,System.IO.HandleInheritability,System.IO.Pipes.PipeAccessRights)">
      <summary>新实例初始化 <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> 类使用指定的管道名称、 管道方向、 最大数量的服务器实例、 传输模式、 管道选项、 建议的输入输出缓冲区大小、 管道安全性、 继承模式和管道访问权限。</summary>
      <param name="pipeName">管道的名称。</param>
      <param name="direction">确定管道方向的枚举值之一。</param>
      <param name="maxNumberOfServerInstances">共享同一名称的服务器实例的最大数量。 您可以将传递 <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" /> 为此值。</param>
      <param name="transmissionMode">确定管道传输模式的枚举值之一。</param>
      <param name="options">确定如何打开或创建管道的枚举值之一。</param>
      <param name="inBufferSize">输入缓冲区大小。</param>
      <param name="outBufferSize">输出缓冲区大小。</param>
      <param name="pipeSecurity">一个对象，确定管道的访问控制和审核安全性。</param>
      <param name="inheritability">确定基础句柄能否由子进程继承的枚举值之一。</param>
      <param name="additionalAccessRights">枚举值之一，指定管道的访问权限。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> 是一个长度为零的字符串。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> 设置为"anonymous"。- 或 -<paramref name="direction" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" /> 值。- 或 -<paramref name="maxNumberofServerInstances" /> 小于-1 或更高版本超过 254 个字符 (-1 指示 <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" />)- 或 -<paramref name="options" /> 不是有效 <see cref="T:System.IO.Pipes.PipeOptions" /> 值。- 或 -<paramref name="inBufferSize" /> 为负。- 或 -<paramref name="inheritability" /> 不是有效的 <see cref="T:System.IO.HandleInheritability" /> 值。- 或 -<paramref name="additionalAccessRights" /> 不是有效 <see cref="T:System.IO.Pipes.PipeAccessRights" /> 值。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pipeName" /> 包含一个冒号 (":")。</exception>
      <exception cref="T:System.PlatformNotSupportedException">操作系统是 Windows Millennium Edition、 Windows 98 或 Windows 95 中，这不受支持。</exception>
      <exception cref="T:System.IO.IOException">已超出服务器实例的最大数量。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.BeginWaitForConnection(System.AsyncCallback,System.Object)">
      <summary>开始异步操作以等待客户端建立连接。</summary>
      <param name="callback">当客户端连接时要调用的方法 <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> 对象。</param>
      <param name="state">一个用户提供的对象，它将该特定的异步请求与其他请求区别开来。</param>
      <returns>一个引用该异步请求的对象。</returns>
      <exception cref="T:System.InvalidOperationException">不以异步方式打开管道。- 或 -已建立管道连接。- 或 -尚未设置管道句柄。</exception>
      <exception cref="T:System.IO.IOException">管道连接已中断。</exception>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.Disconnect">
      <summary>断开当前连接。</summary>
      <exception cref="T:System.InvalidOperationException">尚未建立任何管道连接。- 或 -已断开连接的管道。- 或 -尚未设置管道句柄。</exception>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.EndWaitForConnection(System.IAsyncResult)">
      <summary>结束异步操作以等待客户端建立连接。</summary>
      <param name="asyncResult">挂起的异步请求。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">不以异步方式打开管道。- 或 -尚未设置管道句柄。</exception>
      <exception cref="T:System.IO.IOException">管道连接已中断。</exception>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.Finalize">
      <summary>释放非托管的资源并执行其他清理操作之前 <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> 通过垃圾回收回收实例。</summary>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.GetImpersonationUserName">
      <summary>获取管道另一端的客户端用户名。</summary>
      <returns>管道另一端的客户端用户名。</returns>
      <exception cref="T:System.InvalidOperationException">尚未建立任何管道连接。- 或 -已断开连接的管道。- 或 -尚未设置管道句柄。</exception>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
      <exception cref="T:System.IO.IOException">管道连接已中断。- 或 -客户端的用户名的长度超过 19 个字符。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.RunAsClient(System.IO.Pipes.PipeStreamImpersonationWorker)">
      <summary>模拟客户端时调用委托。</summary>
      <param name="impersonationWorker">指定要调用的方法的委托。</param>
      <exception cref="T:System.InvalidOperationException">尚未建立任何管道连接。- 或 -已断开连接的管道。- 或 -尚未设置管道句柄。</exception>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
      <exception cref="T:System.IO.IOException">管道连接已中断。- 或 -出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.WaitForConnection">
      <summary>等待客户端连接到该 <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> 对象。</summary>
      <exception cref="T:System.InvalidOperationException">已建立管道连接。- 或 -尚未设置管道句柄。</exception>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
      <exception cref="T:System.IO.IOException">管道连接已中断。</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.WaitForConnectionAsync">
      <summary>以异步方式等待客户端连接到该 <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> 对象。</summary>
      <returns>表示异步等待操作的任务。</returns>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.WaitForConnectionAsync(System.Threading.CancellationToken)">
      <summary>异步等待客户端连接到该 <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> 对象并监视取消请求。</summary>
      <param name="cancellationToken">要监视取消请求的标记。</param>
      <returns>表示异步等待操作的任务。</returns>
    </member>
    <member name="M:System.IO.Pipes.PipeAccessRule.#ctor(System.Security.Principal.IdentityReference,System.IO.Pipes.PipeAccessRights,System.Security.AccessControl.AccessControlType)">
      <summary>新实例初始化 <see cref="T:System.IO.Pipes.PipeAccessRule" /> 用指定的标识、 管道访问权限和访问控制类型。</summary>
      <param name="identity">
        <see cref="T:System.Security.Principal.IdentityReference" /> 封装对用户帐户的引用的对象。</param>
      <param name="rights">其中一个 <see cref="T:System.IO.Pipes.PipeAccessRights" /> 值，该值指定与访问规则关联的操作类型。</param>
      <param name="type">其中一个 <see cref="T:System.Security.AccessControl.AccessControlType" /> 值，该值指定是否要允许或拒绝该操作。</param>
    </member>
    <member name="M:System.IO.Pipes.PipeAccessRule.#ctor(System.String,System.IO.Pipes.PipeAccessRights,System.Security.AccessControl.AccessControlType)">
      <summary>新实例初始化 <see cref="T:System.IO.Pipes.PipeAccessRule" /> 用指定的标识、 管道访问权限和访问控制类型。</summary>
      <param name="identity">用户帐户的名称。</param>
      <param name="rights">其中一个 <see cref="T:System.IO.Pipes.PipeAccessRights" /> 值，该值指定与访问规则关联的操作类型。</param>
      <param name="type">其中一个 <see cref="T:System.Security.AccessControl.AccessControlType" /> 值，该值指定是否要允许或拒绝该操作。</param>
    </member>
    <member name="M:System.IO.Pipes.PipeAuditRule.#ctor(System.Security.Principal.IdentityReference,System.IO.Pipes.PipeAccessRights,System.Security.AccessControl.AuditFlags)">
      <summary>新实例初始化 <see cref="T:System.IO.Pipes.PipeAuditRule" /> 类中指定用户帐户 <see cref="T:System.Security.Principal.IdentityReference" /> 对象。</summary>
      <param name="identity">
        <see cref="T:System.Security.Principal.IdentityReference" /> 封装对用户帐户的引用的对象。</param>
      <param name="rights">其中一个 <see cref="T:System.IO.Pipes.PipeAccessRights" /> 值，该值指定与访问规则关联的操作类型。</param>
      <param name="flags">其中一个 <see cref="T:System.Security.AccessControl.AuditFlags" /> 值，该值指定何时执行审核。</param>
    </member>
    <member name="M:System.IO.Pipes.PipeAuditRule.#ctor(System.String,System.IO.Pipes.PipeAccessRights,System.Security.AccessControl.AuditFlags)">
      <summary>新实例初始化 <see cref="T:System.IO.Pipes.PipeAuditRule" /> 命名的用户帐户的类。</summary>
      <param name="identity">用户帐户的名称。</param>
      <param name="rights">其中一个 <see cref="T:System.IO.Pipes.PipeAccessRights" /> 值，该值指定与访问规则关联的操作类型。</param>
      <param name="flags">其中一个 <see cref="T:System.Security.AccessControl.AuditFlags" /> 值，该值指定何时执行审核。</param>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.#ctor">
      <summary>初始化 <see cref="T:System.IO.Pipes.PipeSecurity" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
      <summary>用指定的值初始化 <see cref="T:System.Security.AccessControl.AccessRule" /> 类的新实例。</summary>
      <param name="identityReference">访问规则应用于标识。 它必须是一个对象，可以强制转换为 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 对象。</param>
      <param name="accessMask">此规则的访问掩码。 访问掩码是由单个集成定义其含义的匿名位，32 位集合</param>
      <param name="isInherited">true 如果此规则继承自父容器;否则为 false。</param>
      <param name="inheritanceFlags">其中一个 <see cref="T:System.Security.AccessControl.InheritanceFlags" /> 指定访问规则的继承属性的值。</param>
      <param name="propagationFlags">其中一个 <see cref="T:System.Security.AccessControl.PropagationFlags" /> 值，该值指定是否自动传播继承的访问规则。 如果将 <paramref name="inheritanceFlags" /> 设置为 <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />，则忽略传播标志。</param>
      <param name="type">指定有效的访问控制类型。</param>
      <returns>此方法创建的 <see cref="T:System.Security.AccessControl.AccessRule" /> 对象。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="accessMask" />, <paramref name="inheritanceFlags" />, ，<paramref name="propagationFlags" />, ，或 <paramref name="type" /> 指定了无效值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identityReference" /> 为 null。- 或 -<paramref name="accessMask" /> 为零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="identityReference" /> 既不属于类型 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 也不的一种类型，如 <see cref="T:System.Security.Principal.NTAccount" />, ，可转换为类型 <see cref="T:System.Security.Principal.SecurityIdentifier" />。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.AddAccessRule(System.IO.Pipes.PipeAccessRule)">
      <summary>将访问规则添加到自由访问控制列表 (DACL) 与当前 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象。</summary>
      <param name="rule">要添加的访问规则。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rule" /> 参数为 null。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.AddAuditRule(System.IO.Pipes.PipeAuditRule)">
      <summary>添加到系统访问控制列表 (SACL) 与当前相关联的审核规则 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象。</summary>
      <param name="rule">要添加的审核规则。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rule" /> 参数为 null。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
      <summary>用指定的值初始化 <see cref="T:System.Security.AccessControl.AuditRule" /> 类的新实例。</summary>
      <param name="identityReference">访问规则应用于标识。 它必须是一个对象，可以强制转换为 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 对象。</param>
      <param name="accessMask">此规则的访问掩码。 访问掩码是由单个集成定义其含义的匿名位，32 位集合</param>
      <param name="isInherited">true 如果此规则继承自父容器;否则为 false...</param>
      <param name="inheritanceFlags">其中一个 <see cref="T:System.Security.AccessControl.InheritanceFlags" /> 指定访问规则的继承属性的值。</param>
      <param name="propagationFlags">其中一个 <see cref="T:System.Security.AccessControl.PropagationFlags" /> 值，该值指定是否自动传播继承的访问规则。 如果将 <paramref name="inheritanceFlags" /> 设置为 <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />，则忽略传播标志。</param>
      <param name="flags">其中一个 <see cref="T:System.Security.AccessControl.AuditFlags" /> 值，该值指定有效的访问控制类型。</param>
      <returns>此方法创建的 <see cref="T:System.Security.AccessControl.AuditRule" /> 对象。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="accessMask" />, ，<paramref name="inheritanceFlags" />, ，<paramref name="propagationFlags" />, ，或 <paramref name="flags" /> 属性指定了无效值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identityReference" /> 属性为 null。- 或 -<paramref name="accessMask" /> 属性为零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="identityReference" /> 属性的类型既不是 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 也不的一种类型，如 <see cref="T:System.Security.Principal.NTAccount" />, ，可转换为类型 <see cref="T:System.Security.Principal.SecurityIdentifier" />。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.Persist(System.Runtime.InteropServices.SafeHandle)">
      <summary>将保存与当前相关联的安全描述符的指定的部分 <see cref="T:System.IO.Pipes.PipeSecurity" /> 到永久存储的对象。</summary>
      <param name="handle">安全对象的句柄对象的当前 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象与之关联。</param>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.Persist(System.String)">
      <summary>将保存与当前相关联的安全描述符的指定的部分 <see cref="T:System.IO.Pipes.PipeSecurity" /> 到永久存储的对象。</summary>
      <param name="name">对象的安全对象的名称当前 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象与之关联。</param>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.RemoveAccessRule(System.IO.Pipes.PipeAccessRule)">
      <summary>删除从自由访问控制列表 (DACL) 与当前相关联的访问规则 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象。</summary>
      <param name="rule">要删除的访问规则。</param>
      <returns>如果操作成功，则为 true；否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rule" /> 参数为 null。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.RemoveAccessRuleSpecific(System.IO.Pipes.PipeAccessRule)">
      <summary>删除指定的访问规则从自由访问控制列表 (DACL) 与当前 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象。</summary>
      <param name="rule">要删除的访问规则。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rule" /> 参数为 null。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.RemoveAuditRule(System.IO.Pipes.PipeAuditRule)">
      <summary>删除从系统访问控制列表 (SACL) 与当前相关联的审核规则 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象。</summary>
      <param name="rule">要删除的审核规则。</param>
      <returns>true 如果删除了审核规则;否则为 false</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rule" /> 参数为 null。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.RemoveAuditRuleAll(System.IO.Pipes.PipeAuditRule)">
      <summary>移除具有指定的审核规则从程序与当前系统访问控制列表 (SACL) 相同的安全标识符的所有审核规则 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象。</summary>
      <param name="rule">要删除的审核规则。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rule" /> 参数为 null。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.RemoveAuditRuleSpecific(System.IO.Pipes.PipeAuditRule)">
      <summary>从程序与当前系统访问控制列表 (SACL) 中删除指定的审核规则 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象。</summary>
      <param name="rule">要删除的审核规则。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rule" /> 参数为 null。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.ResetAccessRule(System.IO.Pipes.PipeAccessRule)">
      <summary>移除在随机访问控制列表 (DACL) 与当前相关联的所有访问规则 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象，然后添加指定的访问规则。</summary>
      <param name="rule">要添加的访问规则。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rule" /> 参数为 null。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.SetAccessRule(System.IO.Pipes.PipeAccessRule)">
      <summary>设置访问规则中自由访问控制列表 (DACL) 与当前 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象。</summary>
      <param name="rule">要设置的规则。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rule" /> 参数为 null。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.SetAuditRule(System.IO.Pipes.PipeAuditRule)">
      <summary>设置在与当前关联系统访问控制列表 (SACL) 的审核规则 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象。</summary>
      <param name="rule">要设置的规则。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rule" /> 参数为 null。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.Int32)">
      <summary>使用指定的 <see cref="T:System.IO.Pipes.PipeDirection" /> 值和缓冲区大小初始化 <see cref="T:System.IO.Pipes.PipeStream" /> 类的一个新实例。</summary>
      <param name="direction">
        <see cref="T:System.IO.Pipes.PipeDirection" /> 值之一，指示管道对象的方向。</param>
      <param name="bufferSize">一个大于或等于 0 的正 <see cref="T:System.Int32" /> 值，指示缓冲区大小。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="direction" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" /> 值。- 或 -<paramref name="bufferSize" /> 小于 0。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeTransmissionMode,System.Int32)">
      <summary>使用指定的 <see cref="T:System.IO.Pipes.PipeDirection" />、<see cref="T:System.IO.Pipes.PipeTransmissionMode" /> 和缓冲区大小初始化 <see cref="T:System.IO.Pipes.PipeStream" /> 类的一个新实例。</summary>
      <param name="direction">
        <see cref="T:System.IO.Pipes.PipeDirection" /> 值之一，指示管道对象的方向。</param>
      <param name="transmissionMode">
        <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> 值之一，指示管道对象的传输模式。</param>
      <param name="outBufferSize">一个大于或等于 0 的正 <see cref="T:System.Int32" /> 值，指示缓冲区大小。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="direction" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" /> 值。- 或 -<paramref name="transmissionMode" /> 不是有效的 <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> 值。- 或 -<paramref name="bufferSize" /> 小于 0。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始异步读操作。</summary>
      <param name="buffer">将数据读入的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的字节偏移量，从此处开始读取。</param>
      <param name="count">最多读取的字节数。</param>
      <param name="callback">异步读操作完成后调用的方法。</param>
      <param name="state">一个用户提供的对象，它将该特定的异步读取请求与其他请求区别开来。</param>
      <returns>引用异步读取的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 0。- 或 -<paramref name="count" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" /> 大于 <paramref name="buffer" /> 中可用的字节数。</exception>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
      <exception cref="T:System.NotSupportedException">管道不支持读取操作。</exception>
      <exception cref="T:System.InvalidOperationException">管道已断开连接，正在等待连接，或未设置句柄。</exception>
      <exception cref="T:System.IO.IOException">管道已损坏或出现其他 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始异步写操作。</summary>
      <param name="buffer">包含要写入当前流的数据的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的从零开始的字节偏移量，从此处开始将字节复制到当前流。</param>
      <param name="count">最多写入的字节数。</param>
      <param name="callback">异步写操作完成后调用的方法。</param>
      <param name="state">一个用户提供的对象，它将该特定的异步写入请求与其他请求区别开来。</param>
      <returns>一个引用异步写操作的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 0。- 或 -<paramref name="count" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" /> 大于 <paramref name="buffer" /> 中可用的字节数。</exception>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
      <exception cref="T:System.NotSupportedException">管道不支持写入操作。</exception>
      <exception cref="T:System.InvalidOperationException">管道已断开连接，正在等待连接，或未设置句柄。</exception>
      <exception cref="T:System.IO.IOException">管道已损坏或出现其他 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.CheckPipePropertyOperations">
      <summary>验证管道是否处于可供获取或设置属性的正确状态。</summary>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.CheckReadOperations">
      <summary>验证管道是否处于可供进行读操作的连接状态。</summary>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.CheckWriteOperations">
      <summary>验证管道是否处于可供进行写操作的连接状态。</summary>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)">
      <summary>释放 <see cref="T:System.IO.Pipes.PipeStream" /> 类使用的非托管资源，并可以选择释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)">
      <summary>结束挂起的异步读取请求。</summary>
      <param name="asyncResult">对挂起的异步请求的引用。</param>
      <returns>已读取的字节数。 返回值 0 指示已到达流的末尾（管道已关闭）。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 不源于当前流的 <see cref="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 方法。</exception>
      <exception cref="T:System.IO.IOException">流已关闭或出现了内部错误。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.EndWrite(System.IAsyncResult)">
      <summary>结束挂起的异步写入请求。</summary>
      <param name="asyncResult">对挂起的异步请求的引用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 不是源自当前流的 <see cref="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 方法。</exception>
      <exception cref="T:System.IO.IOException">流已关闭或出现了内部错误。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.Flush">
      <summary>清除当前流的缓冲区，并使所有缓冲的数据都写入到基础设备。</summary>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
      <exception cref="T:System.NotSupportedException">管道不支持写入操作。</exception>
      <exception cref="T:System.IO.IOException">管道已损坏或出现其他 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.GetAccessControl">
      <summary>获取一个 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象，该对象封装当前 <see cref="T:System.IO.Pipes.PipeStream" /> 对象所描述管道的访问控制列表 (ACL) 项。</summary>
      <returns>一个 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象，该对象封装当前 <see cref="T:System.IO.Pipes.PipeStream" /> 对象所描述管道的访问控制列表 (ACL) 项。</returns>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
      <exception cref="T:System.UnauthorizedAccessException">用于设置安全信息的基础调用失败。</exception>
      <exception cref="T:System.InvalidOperationException">用于设置安全信息的基础调用失败。</exception>
      <exception cref="T:System.NotSupportedException">用于设置安全信息的基础调用失败。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.InitializeHandle(Microsoft.Win32.SafeHandles.SafePipeHandle,System.Boolean,System.Boolean)">
      <summary>从指定的 <see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" /> 对象中初始化 <see cref="T:System.IO.Pipes.PipeStream" /> 对象。</summary>
      <param name="handle">要初始化的管道的 <see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" /> 对象。</param>
      <param name="isExposed">要公开句柄，则为 true；否则为 false。</param>
      <param name="isAsync">true 指示句柄已异步打开；否则为 false。</param>
      <exception cref="T:System.IO.IOException">句柄无法绑定到管道中。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>从流中读取字节块，并将数据写入指定的缓冲区。</summary>
      <param name="buffer">此方法返回时包含指定的字节数组，数组中 <paramref name="offset" /> 和 (<paramref name="offset" /> + <paramref name="count" /> - 1) 之间的值被从当前源中读取的字节替换。</param>
      <param name="offset">
        <paramref name="buffer" /> 数组中的字节偏移量，其中读取的字节将被替换。</param>
      <param name="count">最多读取的字节数。</param>
      <returns>读取到 <paramref name="buffer" /> 的总字节数。 如果当前可用的字节数没有请求的那么多，则此数小于请求的字节数；或如果已到达流的末尾，则为零。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 0。- 或 -<paramref name="count" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" /> 大于 <paramref name="buffer" /> 中可用的字节数。</exception>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
      <exception cref="T:System.NotSupportedException">管道不支持读取操作。</exception>
      <exception cref="T:System.InvalidOperationException">管道已断开连接，正在等待连接，或尚未设置句柄。</exception>
      <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.ReadByte">
      <summary>从管道读取字节。</summary>
      <returns>强制转换为 <see cref="T:System.Int32" /> 的字节或 -1 指示到达流的末尾（管道已关闭）。</returns>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
      <exception cref="T:System.NotSupportedException">管道不支持读取操作。</exception>
      <exception cref="T:System.InvalidOperationException">管道已断开连接，正在等待连接，或尚未设置句柄。</exception>
      <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>将当前流的当前位置设置为指定值。</summary>
      <param name="offset">相对于 <paramref name="origin" /> 的点，从此处开始查找。</param>
      <param name="origin">使用 <see cref="T:System.IO.SeekOrigin" /> 类型的值，将开始位置、结束位置或当前位置指定为 <paramref name="offset" /> 的参考点。</param>
      <returns>流中的新位置。</returns>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.SetAccessControl(System.IO.Pipes.PipeSecurity)">
      <summary>将 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象所指定的访问控制列表 (ACL) 项应用于由当前 <see cref="T:System.IO.Pipes.PipeStream" /> 对象指定的管道。</summary>
      <param name="pipeSecurity">一个 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象，该对象指定要应用于当前管道的访问控制列表 (ACL) 项。</param>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeSecurity" /> 为 null。</exception>
      <exception cref="T:System.UnauthorizedAccessException">用于设置安全信息的基础调用失败。</exception>
      <exception cref="T:System.InvalidOperationException">用于设置安全信息的基础调用失败。</exception>
      <exception cref="T:System.NotSupportedException">用于设置安全信息的基础调用失败。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.SetLength(System.Int64)">
      <summary>将当前流的长度设为指定值。</summary>
      <param name="value">流的新长度。</param>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.WaitForPipeDrain">
      <summary>等待管道另一端读取所有发送的字节。</summary>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
      <exception cref="T:System.NotSupportedException">管道不支持写入操作。</exception>
      <exception cref="T:System.IO.IOException">管道已损坏或出现其他 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>使用缓冲区中的数据将字节块写入当前流。</summary>
      <param name="buffer">包含要写入管道的数据的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的从零开始的字节偏移量，从此处开始将字节复制到当前流。</param>
      <param name="count">要写入当前流的最大字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 0。- 或 -<paramref name="count" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" /> 大于 <paramref name="buffer" /> 中可用的字节数。</exception>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
      <exception cref="T:System.NotSupportedException">管道不支持写入操作。</exception>
      <exception cref="T:System.IO.IOException">管道已损坏或出现其他 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.WriteByte(System.Byte)">
      <summary>将字节写入当前流。</summary>
      <param name="value">要写入流中的字节。</param>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
      <exception cref="T:System.NotSupportedException">管道不支持写入操作。</exception>
      <exception cref="T:System.InvalidOperationException">管道已断开连接，正在等待连接，或未设置句柄。</exception>
      <exception cref="T:System.IO.IOException">管道已损坏或出现其他 I/O 错误。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
      <summary>对一个序列应用累加器函数。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对其进行聚合。</param>
      <param name="func">要对每个元素调用的累加器函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>累加器的最终值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="func" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
      <summary>对一个序列应用累加器函数。 将指定的种子值用作累加器初始值。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对其进行聚合。</param>
      <param name="seed">累加器的初始值。</param>
      <param name="func">要对每个元素调用的累加器函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TAccumulate">累加器值的类型。</typeparam>
      <returns>累加器的最终值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="func" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
      <summary>对一个序列应用累加器函数。 将指定的种子值用作累加器的初始值，并使用指定的函数选择结果值。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对其进行聚合。</param>
      <param name="seed">累加器的初始值。</param>
      <param name="func">要对每个元素调用的累加器函数。</param>
      <param name="resultSelector">将累加器的最终值转换为结果值的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TAccumulate">累加器值的类型。</typeparam>
      <typeparam name="TResult">结果值的类型。</typeparam>
      <returns>已转换的累加器最终值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="func" /> 或 <paramref name="resultSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>确定是否对序列中的所有元素都满足条件。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含要应用谓词的元素。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>true 如果源序列中的每个元素通过与指定谓词中的测试，或者如果序列为空，则为否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>确定序列是否包含任何元素。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 以检查是否为空。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>true 如果源序列中不包含任何元素，则否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>确定是否序列中的任何元素都满足条件。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 其应用谓词的元素。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>true 如果源序列中的任何元素中指定的谓词; 通过的测试否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>返回输入类型化为 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</summary>
      <param name="source">序列以键入 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>在输入的序列类型化为 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>计算序列的平均值 <see cref="T:System.Decimal" /> 值。</summary>
      <param name="source">一系列 <see cref="T:System.Decimal" /> 要计算平均值的值。</param>
      <returns>值序列的平均值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>计算序列的平均值 <see cref="T:System.Double" /> 值。</summary>
      <param name="source">一系列 <see cref="T:System.Double" /> 要计算平均值的值。</param>
      <returns>值序列的平均值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>计算序列的平均值 <see cref="T:System.Int32" /> 值。</summary>
      <param name="source">一系列 <see cref="T:System.Int32" /> 要计算平均值的值。</param>
      <returns>值序列的平均值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>计算序列的平均值 <see cref="T:System.Int64" /> 值。</summary>
      <param name="source">一系列 <see cref="T:System.Int64" /> 要计算平均值的值。</param>
      <returns>值序列的平均值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>可以为 null 的序列的平均值，计算 <see cref="T:System.Decimal" /> 值。</summary>
      <param name="source">可以为 null 的序列 <see cref="T:System.Decimal" /> 要计算平均值的值。</param>
      <returns>值序列的平均值或 null 如果源序列为空或仅包含值的 null。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">在序列中元素的总和大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>可以为 null 的序列的平均值，计算 <see cref="T:System.Double" /> 值。</summary>
      <param name="source">可以为 null 的序列 <see cref="T:System.Double" /> 要计算平均值的值。</param>
      <returns>值序列的平均值或 null 如果源序列为空或仅包含值的 null。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>可以为 null 的序列的平均值，计算 <see cref="T:System.Int32" /> 值。</summary>
      <param name="source">可以为 null 的序列 <see cref="T:System.Int32" /> 要计算平均值的值。</param>
      <returns>值序列的平均值或 null 如果源序列为空或仅包含值的 null。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">在序列中元素的总和大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>可以为 null 的序列的平均值，计算 <see cref="T:System.Int64" /> 值。</summary>
      <param name="source">可以为 null 的序列 <see cref="T:System.Int64" /> 要计算平均值的值。</param>
      <returns>值序列的平均值或 null 如果源序列为空或仅包含值的 null。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">在序列中元素的总和大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>可以为 null 的序列的平均值，计算 <see cref="T:System.Single" /> 值。</summary>
      <param name="source">可以为 null 的序列 <see cref="T:System.Single" /> 要计算平均值的值。</param>
      <returns>值序列的平均值或 null 如果源序列为空或仅包含值的 null。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>计算序列的平均值 <see cref="T:System.Single" /> 值。</summary>
      <param name="source">一系列 <see cref="T:System.Single" /> 要计算平均值的值。</param>
      <returns>值序列的平均值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>计算序列的平均值 <see cref="T:System.Decimal" /> 通过调用对输入序列中的每个元素的转换函数获得的值。</summary>
      <param name="source">用于计算平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>值序列的平均值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
      <exception cref="T:System.OverflowException">在序列中元素的总和大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>计算序列的平均值 <see cref="T:System.Double" /> 通过调用对输入序列中的每个元素的转换函数获得的值。</summary>
      <param name="source">要计算的平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>值序列的平均值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>计算序列的平均值 <see cref="T:System.Int32" /> 通过调用对输入序列中的每个元素的转换函数获得的值。</summary>
      <param name="source">要计算的平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>值序列的平均值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
      <exception cref="T:System.OverflowException">在序列中元素的总和大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>计算序列的平均值 <see cref="T:System.Int64" /> 通过调用对输入序列中的每个元素的转换函数获得的值。</summary>
      <param name="source">要计算的平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">源的元素的类型。</typeparam>
      <returns>值序列的平均值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
      <exception cref="T:System.OverflowException">在序列中元素的总和大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>可以为 null 的序列的平均值，计算 <see cref="T:System.Decimal" /> 通过调用对输入序列中的每个元素的转换函数获得的值。</summary>
      <param name="source">要计算的平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>值序列的平均值或 null 如果源序列为空或仅包含值的 null。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">在序列中元素的总和大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>可以为 null 的序列的平均值，计算 <see cref="T:System.Double" /> 通过调用对输入序列中的每个元素的转换函数获得的值。</summary>
      <param name="source">要计算的平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>值序列的平均值或 null 如果源序列为空或仅包含值的 null。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>可以为 null 的序列的平均值，计算 <see cref="T:System.Int32" /> 通过调用对输入序列中的每个元素的转换函数获得的值。</summary>
      <param name="source">要计算的平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>值序列的平均值或 null 如果源序列为空或仅包含值的 null。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">在序列中元素的总和大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>可以为 null 的序列的平均值，计算 <see cref="T:System.Int64" /> 通过调用对输入序列中的每个元素的转换函数获得的值。</summary>
      <param name="source">要计算的平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>值序列的平均值或 null 如果源序列为空或仅包含值的 null。</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>可以为 null 的序列的平均值，计算 <see cref="T:System.Single" /> 通过调用对输入序列中的每个元素的转换函数获得的值。</summary>
      <param name="source">要计算的平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>值序列的平均值或 null 如果源序列为空或仅包含值的 null。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>计算序列的平均值 <see cref="T:System.Single" /> 通过调用对输入序列中的每个元素的转换函数获得的值。</summary>
      <param name="source">要计算的平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>值序列的平均值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
      <summary>将强制转换的元素 <see cref="T:System.Collections.IEnumerable" /> 为指定的类型。</summary>
      <param name="source">
        <see cref="T:System.Collections.IEnumerable" /> ，其中包含要强制转换为键入的元素 <paramref name="TResult" />。</param>
      <typeparam name="TResult">要转换的元素的类型 <paramref name="source" /> 到。</typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含强制转换为指定类型的源序列的每个元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidCastException">序列中的元素不能转换为类型 <paramref name="TResult" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>连接两个序列。</summary>
      <param name="first">要连接的第一个序列。</param>
      <param name="second">要与第一个序列连接的序列。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含两个输入序列的串联的元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>确定序列是否包含指定的元素使用的默认相等比较器。</summary>
      <param name="source">要在其中定位某个值的序列。</param>
      <param name="value">要在序列中定位的值。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>true 如果源序列包含具有指定的值; 的元素否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>确定序列是否使用指定的包含指定的元素 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</summary>
      <param name="source">要在其中定位某个值的序列。</param>
      <param name="value">要在序列中定位的值。</param>
      <param name="comparer">一个对值进行比较的相等比较器。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>true 如果源序列包含具有指定的值; 的元素否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>返回序列中的元素数。</summary>
      <param name="source">包含要计数的元素的序列。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>输入序列中的元素数量。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">中的元素数 <paramref name="source" /> 大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>返回一个数字来表示多少个元素指定序列中的满足条件。</summary>
      <param name="source">包含要测试和计数的元素序列。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>一个数字，表示序列中满足谓词函数条件的元素数量。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">中的元素数 <paramref name="source" /> 大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>返回单一实例集合中指定的序列或类型参数的默认值的元素，如果序列为空。</summary>
      <param name="source">序列为空时返回默认值的序列。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象，其中包含的默认值为 <paramref name="TSource" /> 如果键入 <paramref name="source" /> 空; 否则为 <paramref name="source" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>返回单一实例集合中指定的序列或指定的值的元素，如果序列为空。</summary>
      <param name="source">序列为空时返回指定值的序列。</param>
      <param name="defaultValue">序列为空时要返回的值。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含 <paramref name="defaultValue" /> 如果 <paramref name="source" /> 空; 否则为 <paramref name="source" />。</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>通过使用的默认相等比较器对值进行比较从序列返回非重复元素。</summary>
      <param name="source">要从中移除重复元素的序列。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含源序列中的非重复元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>返回序列中通过使用指定的非重复元素 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较。</summary>
      <param name="source">要从中移除重复元素的序列。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含源序列中的非重复元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>返回序列中的指定索引处的元素。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 以返回元素。</param>
      <param name="index">要检索的从零开始的元素索引。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>源序列中指定位置处的元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0 或大于或等于的中的元素数 <paramref name="source" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>返回序列中指定索引处的元素；如果索引超出范围，则返回默认值。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 以返回元素。</param>
      <param name="index">要检索的从零开始的元素索引。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>default(<paramref name="TSource" />) 如果索引超出界限的源序列中; 否则为源序列中的指定位置处的元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Empty``1">
      <summary>返回一个空 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 具有指定的类型参数。</summary>
      <typeparam name="TResult">要分配给返回的泛型类型参数的类型 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</typeparam>
      <returns>一个空 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 其类型参数是 <paramref name="TResult" />。</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>通过使用默认的相等比较器对值进行比较，生成两个序列的差集。</summary>
      <param name="first">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 也不是在其元素 <paramref name="second" /> 将返回。</param>
      <param name="second">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 同时出现在第一个序列的元素将导致从返回的序列中移除这些元素。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <returns>包含这两个序列的元素的差集的序列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>使用指定的生成两个序列的差集 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较。</summary>
      <param name="first">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 也不是在其元素 <paramref name="second" /> 将返回。</param>
      <param name="second">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 同时出现在第一个序列的元素将导致从返回的序列中移除这些元素。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <returns>包含这两个序列的元素的差集的序列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>返回一个序列的第一个元素。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 要返回的第一个元素。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>返回指定序列中的第一个元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">源序列为空。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>返回序列中满足指定条件的第一个元素。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 以返回元素。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中通过指定谓词函数中的测试的第一个元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有元素满足该条件在 <paramref name="predicate" />。- 或 -源序列为空。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>返回序列中的第一个元素；如果序列中不包含任何元素，则返回默认值。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 要返回的第一个元素。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>default(<paramref name="TSource" />) 如果 <paramref name="source" /> 空; 否则为中的第一个元素 <paramref name="source" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>返回序列中满足条件的第一个元素；如果未找到这样的元素，则返回默认值。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 以返回元素。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>default(<paramref name="TSource" />) 如果 <paramref name="source" /> 为空，或者如果没有元素通过由指定的测试 <paramref name="predicate" />; 否则为中的第一个元素 <paramref name="source" /> 通过由指定的测试 <paramref name="predicate" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>根据指定的键选择器函数对序列的元素进行分组。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 其元素进行分组。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <returns>IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt; 在 C# 或 IEnumerable(Of IGrouping(Of TKey, TSource)) 中 Visual Basic 其中每个 <see cref="T:System.Linq.IGrouping`2" /> 对象包含一系列对象和一个密钥。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据指定的键选择器函数并将进行比较的键使用指定的比较器对序列的元素进行分组。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 其元素进行分组。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对键进行比较。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <returns>IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt; 在 C# 或 IEnumerable(Of IGrouping(Of TKey, TSource)) 中 Visual Basic 其中每个 <see cref="T:System.Linq.IGrouping`2" /> 对象包含的对象和键的集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>根据指定的键选择器函数和项目的元素的每个组通过使用指定的函数对序列的元素进行分组。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 其元素进行分组。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="elementSelector">用于将每个源元素映射到中的元素 <see cref="T:System.Linq.IGrouping`2" />。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <typeparam name="TElement">
        <see cref="T:System.Linq.IGrouping`2" /> 中元素的类型。</typeparam>
      <returns>IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt; 在 C# 或 IEnumerable(Of IGrouping(Of TKey, TElement)) 中 Visual Basic 其中每个 <see cref="T:System.Linq.IGrouping`2" /> 对象包含类型的对象的集合 <paramref name="TElement" /> 和密钥。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据键选择器函数对序列的元素进行分组。 通过使用比较器对键进行比较，并且通过使用指定的函数对每个组的元素进行投影。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 其元素进行分组。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="elementSelector">用于将每个源元素映射到中的元素 <see cref="T:System.Linq.IGrouping`2" />。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对键进行比较。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <typeparam name="TElement">
        <see cref="T:System.Linq.IGrouping`2" /> 中元素的类型。</typeparam>
      <returns>IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt; 在 C# 或 IEnumerable(Of IGrouping(Of TKey, TElement)) 中 Visual Basic 其中每个 <see cref="T:System.Linq.IGrouping`2" /> 对象包含类型的对象的集合 <paramref name="TElement" /> 和密钥。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
      <summary>根据指定的键选择器函数对序列中的元素进行分组，并且从每个组及其键中创建结果值。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 其元素进行分组。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="resultSelector">用于从每个组中创建结果值的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <typeparam name="TResult">返回的结果值的类型 <paramref name="resultSelector" />。</typeparam>
      <returns>类型的元素的集合 <paramref name="TResult" /> 其中的每个元素都表示对一组及其键的投影。</returns>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据指定的键选择器函数对序列中的元素进行分组，并且从每个组及其键中创建结果值。 通过使用指定的比较器对键进行比较。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 其元素进行分组。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="resultSelector">用于从每个组中创建结果值的函数。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 来对键进行比较。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <typeparam name="TResult">返回的结果值的类型 <paramref name="resultSelector" />。</typeparam>
      <returns>类型的元素的集合 <paramref name="TResult" /> 其中的每个元素都表示对一组及其键的投影。</returns>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
      <summary>根据指定的键选择器函数对序列中的元素进行分组，并且从每个组及其键中创建结果值。 通过使用指定的函数对每个组的元素进行投影。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 其元素进行分组。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="elementSelector">用于将每个源元素映射到中的元素 <see cref="T:System.Linq.IGrouping`2" />。</param>
      <param name="resultSelector">用于从每个组中创建结果值的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <typeparam name="TElement">在每个元素的类型 <see cref="T:System.Linq.IGrouping`2" />。</typeparam>
      <typeparam name="TResult">返回的结果值的类型 <paramref name="resultSelector" />。</typeparam>
      <returns>类型的元素的集合 <paramref name="TResult" /> 其中的每个元素都表示对一组及其键的投影。</returns>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据指定的键选择器函数对序列中的元素进行分组，并且从每个组及其键中创建结果值。 通过使用指定的比较器对键值进行比较，并且通过使用指定的函数对每个组的元素进行投影。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 其元素进行分组。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="elementSelector">用于将每个源元素映射到中的元素 <see cref="T:System.Linq.IGrouping`2" />。</param>
      <param name="resultSelector">用于从每个组中创建结果值的函数。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 来对键进行比较。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <typeparam name="TElement">在每个元素的类型 <see cref="T:System.Linq.IGrouping`2" />。</typeparam>
      <typeparam name="TResult">返回的结果值的类型 <paramref name="resultSelector" />。</typeparam>
      <returns>类型的元素的集合 <paramref name="TResult" /> 其中的每个元素都表示对一组及其键的投影。</returns>
    </member>
    <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>基于键相等对两个序列的元素进行关联，并对结果进行分组。 使用默认的相等比较器对键进行比较。</summary>
      <param name="outer">要联接的第一个序列。</param>
      <param name="inner">要与第一个序列联接的序列。</param>
      <param name="outerKeySelector">用于从第一个序列的每个元素提取联接键的函数。</param>
      <param name="innerKeySelector">用于从第二个序列的每个元素提取联接键的函数。</param>
      <param name="resultSelector">用于从第一个序列的元素和第二个序列的匹配元素集合中创建结果元素的函数。</param>
      <typeparam name="TOuter">第一个序列中的元素的类型。</typeparam>
      <typeparam name="TInner">第二个序列中的元素的类型。</typeparam>
      <typeparam name="TKey">键选择器函数返回的键的类型。</typeparam>
      <typeparam name="TResult">结果元素的类型。</typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含类型的元素 <paramref name="TResult" /> 通过对两个序列执行分组的联接获得的。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 或 <paramref name="outerKeySelector" /> 或 <paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 是 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>基于键相等对两个序列的元素进行关联，并对结果进行分组。 指定 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 用来对键进行比较。</summary>
      <param name="outer">要联接的第一个序列。</param>
      <param name="inner">要与第一个序列联接的序列。</param>
      <param name="outerKeySelector">用于从第一个序列的每个元素提取联接键的函数。</param>
      <param name="innerKeySelector">用于从第二个序列的每个元素提取联接键的函数。</param>
      <param name="resultSelector">用于从第一个序列的元素和第二个序列的匹配元素集合中创建结果元素的函数。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 键进行哈希和比较。</param>
      <typeparam name="TOuter">第一个序列中的元素的类型。</typeparam>
      <typeparam name="TInner">第二个序列中的元素的类型。</typeparam>
      <typeparam name="TKey">键选择器函数返回的键的类型。</typeparam>
      <typeparam name="TResult">结果元素的类型。</typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含类型的元素 <paramref name="TResult" /> 通过对两个序列执行分组的联接获得的。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 或 <paramref name="outerKeySelector" /> 或 <paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 是 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>通过使用默认的相等比较器对值进行比较，生成两个序列的交集。</summary>
      <param name="first">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 也会显示在其非重复元素 <paramref name="second" /> 将返回。</param>
      <param name="second">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 也出现在第一个序列中的非重复元素将返回。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <returns>包含组成两个序列交集的元素的序列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>使用指定的生成两个序列的交集 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较。</summary>
      <param name="first">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 也会显示在其非重复元素 <paramref name="second" /> 将返回。</param>
      <param name="second">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 也出现在第一个序列中的非重复元素将返回。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <returns>包含组成两个序列交集的元素的序列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>基于匹配键对两个序列的元素关联。 使用默认的相等比较器对键进行比较。</summary>
      <param name="outer">要联接的第一个序列。</param>
      <param name="inner">要与第一个序列联接的序列。</param>
      <param name="outerKeySelector">用于从第一个序列的每个元素提取联接键的函数。</param>
      <param name="innerKeySelector">用于从第二个序列的每个元素提取联接键的函数。</param>
      <param name="resultSelector">用于从两个匹配元素创建结果元素的函数。</param>
      <typeparam name="TOuter">第一个序列中的元素的类型。</typeparam>
      <typeparam name="TInner">第二个序列中的元素的类型。</typeparam>
      <typeparam name="TKey">键选择器函数返回的键的类型。</typeparam>
      <typeparam name="TResult">结果元素的类型。</typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其类型的元素 <paramref name="TResult" /> 通过对两个序列执行内部联接获得的。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 或 <paramref name="outerKeySelector" /> 或 <paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 是 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>基于匹配键对两个序列的元素关联。 指定 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 用来对键进行比较。</summary>
      <param name="outer">要联接的第一个序列。</param>
      <param name="inner">要与第一个序列联接的序列。</param>
      <param name="outerKeySelector">用于从第一个序列的每个元素提取联接键的函数。</param>
      <param name="innerKeySelector">用于从第二个序列的每个元素提取联接键的函数。</param>
      <param name="resultSelector">用于从两个匹配元素创建结果元素的函数。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 键进行哈希和比较。</param>
      <typeparam name="TOuter">第一个序列中的元素的类型。</typeparam>
      <typeparam name="TInner">第二个序列中的元素的类型。</typeparam>
      <typeparam name="TKey">键选择器函数返回的键的类型。</typeparam>
      <typeparam name="TResult">结果元素的类型。</typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其类型的元素 <paramref name="TResult" /> 通过对两个序列执行内部联接获得的。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 或 <paramref name="outerKeySelector" /> 或 <paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 是 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>返回一个序列的最后一个元素。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 要返回的最后一个元素。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>源序列中最后位置处的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">源序列为空。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>返回序列中满足指定条件的最后一个元素。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 以返回元素。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中通过指定谓词函数中的测试的最后一个元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有元素满足该条件在 <paramref name="predicate" />。- 或 -源序列为空。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>返回序列中的最后一个元素；如果序列中不包含任何元素，则返回默认值。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 要返回的最后一个元素。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>default(<paramref name="TSource" />) 如果源序列为空; 否则为最后一个元素 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>返回序列中满足条件的最后一个元素；如果未找到这样的元素，则返回默认值。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 以返回元素。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>default(<paramref name="TSource" />) 如果序列为空，或者如果没有元素通过的测试在谓词函数中; 否则，最后一个元素通过的测试将在谓词函数中。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>返回 <see cref="T:System.Int64" /> ，它表示序列中的元素的总数。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含要计数的元素。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>源序列中的元素数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">元素数目超出 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>返回 <see cref="T:System.Int64" /> 表示序列中的多少个元素满足条件。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含要计数的元素。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>一个数字，表示序列中满足谓词函数条件的元素数量。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">匹配的元素数超过 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>返回序列中的最大值 <see cref="T:System.Decimal" /> 值。</summary>
      <param name="source">一系列 <see cref="T:System.Decimal" /> 值来确定的最大值。</param>
      <returns>序列中的最大值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>返回序列中的最大值 <see cref="T:System.Double" /> 值。</summary>
      <param name="source">一系列 <see cref="T:System.Double" /> 值来确定的最大值。</param>
      <returns>序列中的最大值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>返回序列中的最大值 <see cref="T:System.Int32" /> 值。</summary>
      <param name="source">一系列 <see cref="T:System.Int32" /> 值来确定的最大值。</param>
      <returns>序列中的最大值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>返回序列中的最大值 <see cref="T:System.Int64" /> 值。</summary>
      <param name="source">一系列 <see cref="T:System.Int64" /> 值来确定的最大值。</param>
      <returns>序列中的最大值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>可以为 null 的序列中返回的最大值 <see cref="T:System.Decimal" /> 值。</summary>
      <param name="source">可以为 null 的序列 <see cref="T:System.Decimal" /> 值来确定的最大值。</param>
      <returns>类型的值 Nullable&lt;Decimal&gt; 在 C# 或 Nullable(Of Decimal) 中 Visual Basic 对应于序列中的最大值。 </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>可以为 null 的序列中返回的最大值 <see cref="T:System.Double" /> 值。</summary>
      <param name="source">可以为 null 的序列 <see cref="T:System.Double" /> 值来确定的最大值。</param>
      <returns>类型的值 Nullable&lt;Double&gt; 在 C# 或 Nullable(Of Double) 中 Visual Basic 对应于序列中的最大值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>可以为 null 的序列中返回的最大值 <see cref="T:System.Int32" /> 值。</summary>
      <param name="source">可以为 null 的序列 <see cref="T:System.Int32" /> 值来确定的最大值。</param>
      <returns>类型的值 Nullable&lt;Int32&gt; 在 C# 或 Nullable(Of Int32) 中 Visual Basic 对应于序列中的最大值。 </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>可以为 null 的序列中返回的最大值 <see cref="T:System.Int64" /> 值。</summary>
      <param name="source">可以为 null 的序列 <see cref="T:System.Int64" /> 值来确定的最大值。</param>
      <returns>类型的值 Nullable&lt;Int64&gt; 在 C# 或 Nullable(Of Int64) 中 Visual Basic 对应于序列中的最大值。 </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>可以为 null 的序列中返回的最大值 <see cref="T:System.Single" /> 值。</summary>
      <param name="source">可以为 null 的序列 <see cref="T:System.Single" /> 值来确定的最大值。</param>
      <returns>类型的值 Nullable&lt;Single&gt; 在 C# 或 Nullable(Of Single) 中 Visual Basic 对应于序列中的最大值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>返回序列中的最大值 <see cref="T:System.Single" /> 值。</summary>
      <param name="source">一系列 <see cref="T:System.Single" /> 值来确定的最大值。</param>
      <returns>序列中的最大值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>泛型序列中返回的最大值。</summary>
      <param name="source">要确定其最大值的值序列。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中的最大值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>调用转换函数对序列的每个元素并返回最大 <see cref="T:System.Decimal" /> 值。</summary>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中的最大值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>调用转换函数对序列的每个元素并返回最大 <see cref="T:System.Double" /> 值。</summary>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中的最大值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>调用转换函数对序列的每个元素并返回最大 <see cref="T:System.Int32" /> 值。</summary>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中的最大值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>调用转换函数对序列的每个元素并返回最大 <see cref="T:System.Int64" /> 值。</summary>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中的最大值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>调用转换函数对序列的每个元素并返回最大可以为 null <see cref="T:System.Decimal" /> 值。</summary>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>类型的值 Nullable&lt;Decimal&gt; 在 C# 或 Nullable(Of Decimal) 中 Visual Basic 对应于序列中的最大值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>调用转换函数对序列的每个元素并返回最大可以为 null <see cref="T:System.Double" /> 值。</summary>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>类型的值 Nullable&lt;Double&gt; 在 C# 或 Nullable(Of Double) 中 Visual Basic 对应于序列中的最大值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>调用转换函数对序列的每个元素并返回最大可以为 null <see cref="T:System.Int32" /> 值。</summary>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>类型的值 Nullable&lt;Int32&gt; 在 C# 或 Nullable(Of Int32) 中 Visual Basic 对应于序列中的最大值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>调用转换函数对序列的每个元素并返回最大可以为 null <see cref="T:System.Int64" /> 值。</summary>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>类型的值 Nullable&lt;Int64&gt; 在 C# 或 Nullable(Of Int64) 中 Visual Basic 对应于序列中的最大值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>调用转换函数对序列的每个元素并返回最大可以为 null <see cref="T:System.Single" /> 值。</summary>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>类型的值 Nullable&lt;Single&gt; 在 C# 或 Nullable(Of Single) 中 Visual Basic 对应于序列中的最大值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>调用转换函数对序列的每个元素并返回最大 <see cref="T:System.Single" /> 值。</summary>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中的最大值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>调用泛型序列的每个元素的转换函数并返回最大结果值。</summary>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TResult">返回的值的类型 <paramref name="selector" />。</typeparam>
      <returns>序列中的最大值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>返回序列中的最小值 <see cref="T:System.Decimal" /> 值。</summary>
      <param name="source">一系列 <see cref="T:System.Decimal" /> 值来确定的最小值。</param>
      <returns>序列中的最小值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>返回序列中的最小值 <see cref="T:System.Double" /> 值。</summary>
      <param name="source">一系列 <see cref="T:System.Double" /> 值来确定的最小值。</param>
      <returns>序列中的最小值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>返回序列中的最小值 <see cref="T:System.Int32" /> 值。</summary>
      <param name="source">一系列 <see cref="T:System.Int32" /> 值来确定的最小值。</param>
      <returns>序列中的最小值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>返回序列中的最小值 <see cref="T:System.Int64" /> 值。</summary>
      <param name="source">一系列 <see cref="T:System.Int64" /> 值来确定的最小值。</param>
      <returns>序列中的最小值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>返回的最小值可以为 null 的序列中 <see cref="T:System.Decimal" /> 值。</summary>
      <param name="source">可以为 null 的序列 <see cref="T:System.Decimal" /> 值来确定的最小值。</param>
      <returns>类型的值 Nullable&lt;Decimal&gt; 在 C# 或 Nullable(Of Decimal) 中 Visual Basic 对应于序列中的最小值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>返回的最小值可以为 null 的序列中 <see cref="T:System.Double" /> 值。</summary>
      <param name="source">可以为 null 的序列 <see cref="T:System.Double" /> 值来确定的最小值。</param>
      <returns>类型的值 Nullable&lt;Double&gt; 在 C# 或 Nullable(Of Double) 中 Visual Basic 对应于序列中的最小值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>返回的最小值可以为 null 的序列中 <see cref="T:System.Int32" /> 值。</summary>
      <param name="source">可以为 null 的序列 <see cref="T:System.Int32" /> 值来确定的最小值。</param>
      <returns>类型的值 Nullable&lt;Int32&gt; 在 C# 或 Nullable(Of Int32) 中 Visual Basic 对应于序列中的最小值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>返回的最小值可以为 null 的序列中 <see cref="T:System.Int64" /> 值。</summary>
      <param name="source">可以为 null 的序列 <see cref="T:System.Int64" /> 值来确定的最小值。</param>
      <returns>类型的值 Nullable&lt;Int64&gt; 在 C# 或 Nullable(Of Int64) 中 Visual Basic 对应于序列中的最小值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>返回的最小值可以为 null 的序列中 <see cref="T:System.Single" /> 值。</summary>
      <param name="source">可以为 null 的序列 <see cref="T:System.Single" /> 值来确定的最小值。</param>
      <returns>类型的值 Nullable&lt;Single&gt; 在 C# 或 Nullable(Of Single) 中 Visual Basic 对应于序列中的最小值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>返回序列中的最小值 <see cref="T:System.Single" /> 值。</summary>
      <param name="source">一系列 <see cref="T:System.Single" /> 值来确定的最小值。</param>
      <returns>序列中的最小值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>泛型序列中返回的最小值。</summary>
      <param name="source">要确定其最小值的值序列。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中的最小值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>调用转换函数对序列的每个元素，并返回所需的最低 <see cref="T:System.Decimal" /> 值。</summary>
      <param name="source">要确定其最小值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中的最小值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>调用转换函数对序列的每个元素，并返回所需的最低 <see cref="T:System.Double" /> 值。</summary>
      <param name="source">要确定其最小值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中的最小值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>调用转换函数对序列的每个元素，并返回所需的最低 <see cref="T:System.Int32" /> 值。</summary>
      <param name="source">要确定其最小值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中的最小值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>调用转换函数对序列的每个元素，并返回所需的最低 <see cref="T:System.Int64" /> 值。</summary>
      <param name="source">要确定其最小值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中的最小值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>调用转换函数对序列的每个元素，并返回最小值可以为 null <see cref="T:System.Decimal" /> 值。</summary>
      <param name="source">要确定其最小值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>类型的值 Nullable&lt;Decimal&gt; 在 C# 或 Nullable(Of Decimal) 中 Visual Basic 对应于序列中的最小值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>调用转换函数对序列的每个元素，并返回最小值可以为 null <see cref="T:System.Double" /> 值。</summary>
      <param name="source">要确定其最小值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>类型的值 Nullable&lt;Double&gt; 在 C# 或 Nullable(Of Double) 中 Visual Basic 对应于序列中的最小值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>调用转换函数对序列的每个元素，并返回最小值可以为 null <see cref="T:System.Int32" /> 值。</summary>
      <param name="source">要确定其最小值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>类型的值 Nullable&lt;Int32&gt; 在 C# 或 Nullable(Of Int32) 中 Visual Basic 对应于序列中的最小值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>调用转换函数对序列的每个元素，并返回最小值可以为 null <see cref="T:System.Int64" /> 值。</summary>
      <param name="source">要确定其最小值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>类型的值 Nullable&lt;Int64&gt; 在 C# 或 Nullable(Of Int64) 中 Visual Basic 对应于序列中的最小值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>调用转换函数对序列的每个元素，并返回最小值可以为 null <see cref="T:System.Single" /> 值。</summary>
      <param name="source">要确定其最小值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>类型的值 Nullable&lt;Single&gt; 在 C# 或 Nullable(Of Single) 中 Visual Basic 对应于序列中的最小值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>调用转换函数对序列的每个元素，并返回所需的最低 <see cref="T:System.Single" /> 值。</summary>
      <param name="source">要确定其最小值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中的最小值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>调用泛型序列的每个元素的转换函数，并返回最小的结果值。</summary>
      <param name="source">要确定其最小值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TResult">返回的值的类型 <paramref name="selector" />。</typeparam>
      <returns>序列中的最小值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
      <summary>筛选的元素 <see cref="T:System.Collections.IEnumerable" /> 根据指定的类型。</summary>
      <param name="source">
        <see cref="T:System.Collections.IEnumerable" /> 要筛选其元素。</param>
      <typeparam name="TResult">筛选序列元素所根据的类型。</typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含输入序列中的元素类型 <paramref name="TResult" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>按根据某个键按升序对序列的元素进行排序。</summary>
      <param name="source">一个要排序的值序列。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <returns>
        <see cref="T:System.Linq.IOrderedEnumerable`1" /> 的元素根据某个键进行排序。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>按使用指定的比较器按升序对序列的元素进行排序。</summary>
      <param name="source">一个要排序的值序列。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IComparer`1" /> 对键进行比较。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <returns>
        <see cref="T:System.Linq.IOrderedEnumerable`1" /> 的元素根据某个键进行排序。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>按根据某个键按降序对序列的元素进行排序。</summary>
      <param name="source">一个要排序的值序列。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <returns>
        <see cref="T:System.Linq.IOrderedEnumerable`1" /> 的元素按降序顺序根据某个键进行排序。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>使用指定的比较器按降序对序列的元素排序。</summary>
      <param name="source">一个要排序的值序列。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IComparer`1" /> 对键进行比较。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <returns>
        <see cref="T:System.Linq.IOrderedEnumerable`1" /> 的元素按降序顺序根据某个键进行排序。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
      <summary>生成指定范围内的整数序列。</summary>
      <param name="start">序列中第一个整数的值。</param>
      <param name="count">要生成的顺序整数的数目。</param>
      <returns>IEnumerable&lt;Int32&gt; 在 C# 或 IEnumerable(Of Int32) 中 Visual Basic ，其中包含范围的顺序的整数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 小于 0。- 或 -<paramref name="start" /> + <paramref name="count" /> -1 是大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
      <summary>将生成一个序列，其中包含一个重复的值。</summary>
      <param name="element">要重复的值。</param>
      <param name="count">在生成序列中重复该值的次数。</param>
      <typeparam name="TResult">要在结果序列中重复的值的类型。</typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 包含重复的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 小于 0。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>反转序列中元素的顺序。</summary>
      <param name="source">要反转的值序列。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>一个序列，其元素以相反顺序对应于输入序列的元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>将序列中的每个元素投影到新表单。</summary>
      <param name="source">一个值序列，要对该序列调用转换函数。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TResult">返回的值的类型 <paramref name="selector" />。</typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 其元素是调用转换函数的每个元素的结果 <paramref name="source" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
      <summary>通过合并元素的索引投影到一个新窗体的序列的每个元素。</summary>
      <param name="source">一个值序列，要对该序列调用转换函数。</param>
      <param name="selector">一个应用于每个源元素的转换函数；函数的第二个参数表示源元素的索引。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TResult">返回的值的类型 <paramref name="selector" />。</typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 其元素是调用转换函数的每个元素的结果 <paramref name="source" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>一个序列的每个元素投影 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 并将合并为一个序列将结果序列。</summary>
      <param name="source">一个要投影的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TResult">返回的序列的元素的类型 <paramref name="selector" />。</typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 其元素是一种一对多转换函数对输入序列中的每个元素调用的结果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
      <summary>一个序列的每个元素投影 <see cref="T:System.Collections.Generic.IEnumerable`1" />, ，并将合并为一个序列将结果序列。 每个源元素的索引用于该元素的投影表。</summary>
      <param name="source">一个要投影的值序列。</param>
      <param name="selector">一个应用于每个源元素的转换函数；函数的第二个参数表示源元素的索引。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TResult">返回的序列的元素的类型 <paramref name="selector" />。</typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 其元素是一种一对多转换函数对输入序列中的每个元素调用的结果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>一个序列的每个元素投影 <see cref="T:System.Collections.Generic.IEnumerable`1" />, 将平展为一个序列，将结果序列，其中调用结果选择器函数对每个元素。</summary>
      <param name="source">一个要投影的值序列。</param>
      <param name="collectionSelector">要应用于输入序列中的每个元素转换函数。</param>
      <param name="resultSelector">要应用于中间序列的每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TCollection">中间元素的类型由收集 <paramref name="collectionSelector" />。</typeparam>
      <typeparam name="TResult">结果序列的元素的类型。</typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 其元素是调用一种一对多转换函数的结果 <paramref name="collectionSelector" /> 的每个元素 <paramref name="source" /> 然后将每个这些序列元素和其相应的源元素映射到一个结果元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="collectionSelector" /> 或 <paramref name="resultSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>一个序列的每个元素投影 <see cref="T:System.Collections.Generic.IEnumerable`1" />, 将平展为一个序列，将结果序列，其中调用结果选择器函数对每个元素。 每个源元素的索引用于该元素的中间投影表。</summary>
      <param name="source">一个要投影的值序列。</param>
      <param name="collectionSelector">一个应用于每个源元素的转换函数；函数的第二个参数表示源元素的索引。</param>
      <param name="resultSelector">要应用于中间序列的每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TCollection">中间元素的类型由收集 <paramref name="collectionSelector" />。</typeparam>
      <typeparam name="TResult">结果序列的元素的类型。</typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 其元素是调用一种一对多转换函数的结果 <paramref name="collectionSelector" /> 的每个元素 <paramref name="source" /> 然后将每个这些序列元素和其相应的源元素映射到一个结果元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="collectionSelector" /> 或 <paramref name="resultSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>确定两个序列是否相等的元素进行比较通过使用相应类型的默认相等比较器。</summary>
      <param name="first">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 要与 <paramref name="second" />。</param>
      <param name="second">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 要与第一个序列进行比较。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <returns>true 如果两个源序列的长度相等，且其相应元素相等根据它们的类型; 的默认相等比较器否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>确定两个序列是否通过使用指定的比较它们的元素相等 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</summary>
      <param name="first">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 要与 <paramref name="second" />。</param>
      <param name="second">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 要与第一个序列进行比较。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 要用来比较元素。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <returns>true 如果两个源序列的长度相等，并且其相应元素的比较结果相等根据 <paramref name="comparer" />; 否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>返回序列的唯一元素；如果该序列并非恰好包含一个元素，则会引发异常。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 要返回的单个元素。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>输入序列的单个元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">输入的序列包含多个元素。- 或 -输入的序列为空。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>返回序列中满足指定条件的唯一元素；如果有多个这样的元素存在，则会引发异常。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 以返回从的单个元素。</param>
      <param name="predicate">用于测试元素是否满足条件的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>输入序列中满足条件的单个元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有元素满足该条件在 <paramref name="predicate" />。- 或 -多个元素满足该条件在 <paramref name="predicate" />。- 或 -源序列为空。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>返回一个序列，或默认值的唯一元素，如果序列为空，则为如果序列中存在多个元素，则此方法将引发异常。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 要返回的单个元素。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>在输入序列的单个元素或 default(<paramref name="TSource" />) 如果序列不包含任何元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">输入的序列包含多个元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>返回序列中满足指定条件的唯一元素；如果这类元素不存在，则返回默认值；如果有多个元素满足该条件，此方法将引发异常。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 以返回从的单个元素。</param>
      <param name="predicate">用于测试元素是否满足条件的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>输入序列中满足该条件的单个元素或 default(<paramref name="TSource" />) 如果找到这样的元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>跳过指定的数量的序列中的元素，然后返回剩余元素。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 返回中的元素。</param>
      <param name="count">返回剩余元素前要跳过的元素数量。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含输入序列中的指定索引后出现的元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>只要指定的条件为 true，然后返回剩余元素，跳过序列中的元素。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 返回中的元素。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含从输入序列不将传递通过指定的测试的线性系列中的第一个元素开始的元素 <paramref name="predicate" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>只要指定的条件为 true，然后返回剩余元素，跳过序列中的元素。 将在谓词函数的逻辑中使用元素的索引。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 返回中的元素。</param>
      <param name="predicate">用于测试每个源元素是否满足条件的函数；该函数的第二个参数表示源元素的索引。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含从输入序列不将传递通过指定的测试的线性系列中的第一个元素开始的元素 <paramref name="predicate" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>计算的一系列总和 <see cref="T:System.Decimal" /> 值。</summary>
      <param name="source">一系列 <see cref="T:System.Decimal" /> 要对其求和的值。</param>
      <returns>在序列中值的总和。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">之和大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>计算的一系列总和 <see cref="T:System.Double" /> 值。</summary>
      <param name="source">一系列 <see cref="T:System.Double" /> 要对其求和的值。</param>
      <returns>在序列中值的总和。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>计算的一系列总和 <see cref="T:System.Int32" /> 值。</summary>
      <param name="source">一系列 <see cref="T:System.Int32" /> 要对其求和的值。</param>
      <returns>在序列中值的总和。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">之和大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>计算的一系列总和 <see cref="T:System.Int64" /> 值。</summary>
      <param name="source">一系列 <see cref="T:System.Int64" /> 要对其求和的值。</param>
      <returns>在序列中值的总和。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">之和大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>计算可以为 null 的序列的和 <see cref="T:System.Decimal" /> 值。</summary>
      <param name="source">可以为 null 的序列 <see cref="T:System.Decimal" /> 要对其求和的值。</param>
      <returns>在序列中值的总和。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">之和大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>计算可以为 null 的序列的和 <see cref="T:System.Double" /> 值。</summary>
      <param name="source">可以为 null 的序列 <see cref="T:System.Double" /> 要对其求和的值。</param>
      <returns>在序列中值的总和。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>计算可以为 null 的序列的和 <see cref="T:System.Int32" /> 值。</summary>
      <param name="source">可以为 null 的序列 <see cref="T:System.Int32" /> 要对其求和的值。</param>
      <returns>在序列中值的总和。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">之和大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>计算可以为 null 的序列的和 <see cref="T:System.Int64" /> 值。</summary>
      <param name="source">可以为 null 的序列 <see cref="T:System.Int64" /> 要对其求和的值。</param>
      <returns>在序列中值的总和。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">之和大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>计算可以为 null 的序列的和 <see cref="T:System.Single" /> 值。</summary>
      <param name="source">可以为 null 的序列 <see cref="T:System.Single" /> 要对其求和的值。</param>
      <returns>在序列中值的总和。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>计算的一系列总和 <see cref="T:System.Single" /> 值。</summary>
      <param name="source">一系列 <see cref="T:System.Single" /> 要对其求和的值。</param>
      <returns>在序列中值的总和。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>计算的序列的和 <see cref="T:System.Decimal" /> 通过调用对输入序列中的每个元素的转换函数获得的值。</summary>
      <param name="source">使用要计算的总和的值的序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>投影值的总和。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">之和大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>计算的序列的和 <see cref="T:System.Double" /> 通过调用对输入序列中的每个元素的转换函数获得的值。</summary>
      <param name="source">使用要计算的总和的值的序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>投影值的总和。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>计算的序列的和 <see cref="T:System.Int32" /> 通过调用对输入序列中的每个元素的转换函数获得的值。</summary>
      <param name="source">使用要计算的总和的值的序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>投影值的总和。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">之和大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>计算的序列的和 <see cref="T:System.Int64" /> 通过调用对输入序列中的每个元素的转换函数获得的值。</summary>
      <param name="source">使用要计算的总和的值的序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>投影值的总和。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">之和大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>计算可以为 null 的序列的和 <see cref="T:System.Decimal" /> 通过调用对输入序列中的每个元素的转换函数获得的值。</summary>
      <param name="source">使用要计算的总和的值的序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>投影值的总和。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">之和大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>计算可以为 null 的序列的和 <see cref="T:System.Double" /> 通过调用对输入序列中的每个元素的转换函数获得的值。</summary>
      <param name="source">使用要计算的总和的值的序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>投影值的总和。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>计算可以为 null 的序列的和 <see cref="T:System.Int32" /> 通过调用对输入序列中的每个元素的转换函数获得的值。</summary>
      <param name="source">使用要计算的总和的值的序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>投影值的总和。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">之和大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>计算可以为 null 的序列的和 <see cref="T:System.Int64" /> 通过调用对输入序列中的每个元素的转换函数获得的值。</summary>
      <param name="source">使用要计算的总和的值的序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>投影值的总和。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">之和大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>计算可以为 null 的序列的和 <see cref="T:System.Single" /> 通过调用对输入序列中的每个元素的转换函数获得的值。</summary>
      <param name="source">使用要计算的总和的值的序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>投影值的总和。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>计算的序列的和 <see cref="T:System.Single" /> 通过调用对输入序列中的每个元素的转换函数获得的值。</summary>
      <param name="source">使用要计算的总和的值的序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>投影值的总和。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>从序列的开头返回指定的数量的连续元素。</summary>
      <param name="source">要从其返回元素的序列。</param>
      <param name="count">要返回的元素数量。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含指定从输入序列的起始位置的元素数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>返回序列中的元素，只要指定的条件为真。</summary>
      <param name="source">要返回元素的序列。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含输入序列中出现测试不再能够通过在元素之前的元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>返回序列中的元素，只要指定的条件为真。 将在谓词函数的逻辑中使用元素的索引。</summary>
      <param name="source">要从其返回元素的序列。</param>
      <param name="predicate">用于测试每个源元素是否满足条件的函数；该函数的第二个参数表示源元素的索引。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含输入序列中出现测试不再能够通过在元素之前的元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
      <summary>执行后续排序以根据某个键按升序对序列的元素。</summary>
      <param name="source">
        <see cref="T:System.Linq.IOrderedEnumerable`1" /> ，其中包含要排序的元素。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <returns>
        <see cref="T:System.Linq.IOrderedEnumerable`1" /> 的元素根据某个键进行排序。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>执行后续排序中使用指定的比较器按升序对序列的元素。</summary>
      <param name="source">
        <see cref="T:System.Linq.IOrderedEnumerable`1" /> ，其中包含要排序的元素。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IComparer`1" /> 对键进行比较。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <returns>
        <see cref="T:System.Linq.IOrderedEnumerable`1" /> 的元素根据某个键进行排序。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
      <summary>根据某个键将执行后续排序顺序，按降序对序列的元素。</summary>
      <param name="source">
        <see cref="T:System.Linq.IOrderedEnumerable`1" /> ，其中包含要排序的元素。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <returns>
        <see cref="T:System.Linq.IOrderedEnumerable`1" /> 的元素按降序顺序根据某个键进行排序。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>执行后续排序中使用指定的比较器按降序对序列的元素。</summary>
      <param name="source">
        <see cref="T:System.Linq.IOrderedEnumerable`1" /> ，其中包含要排序的元素。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IComparer`1" /> 对键进行比较。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <returns>
        <see cref="T:System.Linq.IOrderedEnumerable`1" /> 的元素按降序顺序根据某个键进行排序。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>创建一个数组，从 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 若要创建数组。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>一个包含输入序列中的元素的数组。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 根据指定的键选择器函数。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 从。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <returns>一个 <see cref="T:System.Collections.Generic.Dictionary`2" /> ，其中包含键和值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。- 或 -<paramref name="keySelector" /> 生成的密钥 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> 生成两个元素的键重复。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 根据指定的键选择器函数和键比较器。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 从。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对键进行比较。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <returns>一个 <see cref="T:System.Collections.Generic.Dictionary`2" /> ，其中包含键和值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。- 或 -<paramref name="keySelector" /> 生成的密钥 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> 生成两个元素的键重复。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 根据指定的键选择器和元素选择器函数。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 从。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="elementSelector">用于从每个元素产生结果元素值的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <typeparam name="TElement">返回的值的类型 <paramref name="elementSelector" />。</typeparam>
      <returns>一个 <see cref="T:System.Collections.Generic.Dictionary`2" /> ，其中包含类型的值 <paramref name="TElement" /> 从输入序列中选择。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 为 null。- 或 -<paramref name="keySelector" /> 生成的密钥 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> 生成两个元素的键重复。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 根据指定的键选择器函数、 比较器和元素选择器函数。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 从。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="elementSelector">用于从每个元素产生结果元素值的转换函数。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对键进行比较。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <typeparam name="TElement">返回的值的类型 <paramref name="elementSelector" />。</typeparam>
      <returns>一个 <see cref="T:System.Collections.Generic.Dictionary`2" /> ，其中包含类型的值 <paramref name="TElement" /> 从输入序列中选择。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 为 null。- 或 -<paramref name="keySelector" /> 生成的密钥 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> 生成两个元素的键重复。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>创建 <see cref="T:System.Collections.Generic.List`1" /> 从 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建 <see cref="T:System.Collections.Generic.List`1" /> 从。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>一个 <see cref="T:System.Collections.Generic.List`1" /> ，其中包含输入序列中的元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>创建 <see cref="T:System.Linq.Lookup`2" /> 从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 根据指定的键选择器函数。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建 <see cref="T:System.Linq.Lookup`2" /> 从。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <returns>一个 <see cref="T:System.Linq.Lookup`2" /> ，其中包含键和值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>创建 <see cref="T:System.Linq.Lookup`2" /> 从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 根据指定的键选择器函数和键比较器。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建 <see cref="T:System.Linq.Lookup`2" /> 从。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对键进行比较。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <returns>一个 <see cref="T:System.Linq.Lookup`2" /> ，其中包含键和值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>创建 <see cref="T:System.Linq.Lookup`2" /> 从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 根据指定的键选择器和元素选择器函数。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建 <see cref="T:System.Linq.Lookup`2" /> 从。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="elementSelector">用于从每个元素产生结果元素值的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <typeparam name="TElement">返回的值的类型 <paramref name="elementSelector" />。</typeparam>
      <returns>一个 <see cref="T:System.Linq.Lookup`2" /> ，其中包含类型的值 <paramref name="TElement" /> 从输入序列中选择。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>创建 <see cref="T:System.Linq.Lookup`2" /> 从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 根据指定的键选择器函数、 比较和元素选择器函数。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建 <see cref="T:System.Linq.Lookup`2" /> 从。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="elementSelector">用于从每个元素产生结果元素值的转换函数。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对键进行比较。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <typeparam name="TElement">返回的值的类型 <paramref name="elementSelector" />。</typeparam>
      <returns>一个 <see cref="T:System.Linq.Lookup`2" /> ，其中包含类型的值 <paramref name="TElement" /> 从输入序列中选择。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>通过使用默认的相等比较器生成的两个序列的并集。</summary>
      <param name="first">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的非重复元素构成并集的第一个集。</param>
      <param name="second">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的非重复元素构成并集的第二个。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含非重复这两个输入序列中的元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>使用指定的生成两个序列的并集 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</summary>
      <param name="first">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的非重复元素构成并集的第一个集。</param>
      <param name="second">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的非重复元素构成并集的第二个。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含非重复这两个输入序列中的元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>基于谓词筛选值序列。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 进行筛选。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含输入序列中满足条件的元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>基于谓词筛选值序列。 将在谓词函数的逻辑中使用每个元素的索引。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 进行筛选。</param>
      <param name="predicate">用于测试每个源元素是否满足条件的函数；该函数的第二个参数表示源元素的索引。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，其中包含输入序列中满足条件的元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary>适用于两个序列，生成结果的序列的相应元素指定的函数。</summary>
      <param name="first">要合并的第一个序列。</param>
      <param name="second">要合并的第二个序列。</param>
      <param name="resultSelector">一个指定如何合并来自两个序列的元素的函数。</param>
      <typeparam name="TFirst">第一个输入序列中的元素的类型。</typeparam>
      <typeparam name="TSecond">第二个输入序列中的元素的类型。</typeparam>
      <typeparam name="TResult">结果序列的元素的类型。</typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 包含合并的两个输入序列的元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.EnumerableExecutor.#ctor">
      <summary>初始化 <see cref="T:System.Linq.EnumerableExecutor" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Linq.EnumerableExecutor`1.#ctor(System.Linq.Expressions.Expression)">
      <summary>初始化 <see cref="T:System.Linq.EnumerableExecutor`1" /> 类的新实例。</summary>
      <param name="expression">要将与新的实例相关联的表达式树。</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery.#ctor">
      <summary>初始化 <see cref="T:System.Linq.EnumerableQuery" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>新实例初始化 <see cref="T:System.Linq.EnumerableQuery`1" /> 类并将其与关联 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 集合。</summary>
      <param name="enumerable">要将与新的实例相关联的集合。</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Linq.Expressions.Expression)">
      <summary>新实例初始化 <see cref="T:System.Linq.EnumerableQuery`1" /> 类，并将该实例关联的表达式树。</summary>
      <param name="expression">要将与新的实例相关联的表达式树。</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>返回一个枚举器可遍历关联 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 集合，或者，如果该值为 null，访问集合重新关联的表达式树以查询形式编写上得出 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 数据源，然后执行它。</summary>
      <returns>一个枚举器可用于循环访问相关联的数据源。</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个枚举器可遍历关联 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 集合，或者，如果该值为 null，访问集合重新关联的表达式树以查询形式编写上得出 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 数据源，然后执行它。</summary>
      <returns>一个枚举器可用于循环访问相关联的数据源。</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
      <summary>构造一个新 <see cref="T:System.Linq.EnumerableQuery`1" /> 对象，并将其与指定的表达式树，它表示关联 <see cref="T:System.Linq.IQueryable" /> 的数据的集合。</summary>
      <param name="expression">一个表示的表达式树 <see cref="T:System.Linq.IQueryable" /> 的数据的集合。</param>
      <returns>
        <see cref="T:System.Linq.EnumerableQuery`1" /> 与关联的对象 <paramref name="expression" />。</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>构造一个新 <see cref="T:System.Linq.EnumerableQuery`1" /> 对象，并将其与指定的表达式树，它表示关联 <see cref="T:System.Linq.IQueryable`1" /> 的数据的集合。</summary>
      <param name="expression">要执行的表达式树。</param>
      <typeparam name="S">集合中的数据的类型， <paramref name="expression" /> 表示。</typeparam>
      <returns>与之关联的 EnumerableQuery 对象 <paramref name="expression" />。</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
      <summary>执行后重写代码可以调用表达式 <see cref="T:System.Linq.Enumerable" /> 方法而不是 <see cref="T:System.Linq.Queryable" /> 上不能通过查询任何可枚举数据源的方法 <see cref="T:System.Linq.Queryable" /> 方法。</summary>
      <param name="expression">要执行的表达式树。</param>
      <returns>执行所得到的值 <paramref name="expression" />。</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
      <summary>执行后重写代码可以调用表达式 <see cref="T:System.Linq.Enumerable" /> 方法而不是 <see cref="T:System.Linq.Queryable" /> 上不能通过查询任何可枚举数据源的方法 <see cref="T:System.Linq.Queryable" /> 方法。</summary>
      <param name="expression">要执行的表达式树。</param>
      <typeparam name="S">集合中的数据的类型， <paramref name="expression" /> 表示。</typeparam>
      <returns>执行所得到的值 <paramref name="expression" />。</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.ToString">
      <summary>返回的文本表示形式的可枚举集合，或者，如果它为 null，则该表达式树将与此实例相关联。</summary>
      <returns>文本表示形式的可枚举集合或，如果该值为 null，是此实例相关联的表达式目录树。</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <param name="visitor">对此节点进行访问的访问者。</param>
      <returns>对此节点访问的结果。</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Reduce">
      <summary>将二进制表达式节点简化为更简单的表达式。</summary>
      <returns>已简化的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)">
      <summary>创建一个新的表达式，它类似于此表达式，但使用所提供的子级。 如果所有子级均相同，它将返回此表达式。</summary>
      <param name="left">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 结果属性。</param>
      <param name="conversion">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 结果属性。</param>
      <param name="right">
        <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 结果属性。</param>
      <returns>如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <param name="visitor">对此节点进行访问的访问者。</param>
      <returns>对此节点访问的结果。</returns>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个新的表达式，它类似于此表达式，但使用所提供的子级。 如果所有子级均相同，它将返回此表达式。</summary>
      <param name="variables">
        <see cref="P:System.Linq.Expressions.BlockExpression.Variables" /> 结果属性。</param>
      <param name="expressions">
        <see cref="P:System.Linq.Expressions.BlockExpression.Expressions" /> 结果属性。</param>
      <returns>如果没有子级发生更改，此表达式或带有更新的子级的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.ToString">
      <summary>返回一个 <see cref="T:System.String" />，表示当前的 <see cref="T:System.Object" />。</summary>
      <returns>一个 <see cref="T:System.String" />，表示当前的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.Update(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个新的表达式，它类似于此表达式，但使用所提供的子级。 如果所有子级均相同，它将返回此表达式。</summary>
      <param name="variable">
        <see cref="P:System.Linq.Expressions.CatchBlock.Variable" /> 结果属性。</param>
      <param name="filter">
        <see cref="P:System.Linq.Expressions.CatchBlock.Filter" /> 结果属性。</param>
      <param name="body">
        <see cref="P:System.Linq.Expressions.CatchBlock.Body" /> 结果属性。</param>
      <returns>如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <param name="visitor">对此节点进行访问的访问者。</param>
      <returns>对此节点访问的结果。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个新的表达式，它类似于此表达式，但使用所提供的子级。 如果所有子级都相同，则会返回此表达式</summary>
      <param name="test">
        <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 结果属性。</param>
      <param name="ifTrue">
        <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 结果属性。</param>
      <param name="ifFalse">
        <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 结果属性。</param>
      <returns>如果没有子级发生更改，此表达式或带有更新的子级的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ConstantExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <param name="visitor">对此节点进行访问的访问者。</param>
      <returns>对此节点访问的结果。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DebugInfoExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <param name="visitor">对此节点进行访问的访问者。</param>
      <returns>对此节点访问的结果。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <param name="visitor">对此节点进行访问的访问者。</param>
      <returns>对此节点访问的结果。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。</summary>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="returnType">动态表达式的结果类型。</param>
      <param name="arguments">动态操作的参数。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。</summary>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="returnType">动态表达式的结果类型。</param>
      <param name="arg0">动态操作的第一个参数。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。</summary>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="returnType">动态表达式的结果类型。</param>
      <param name="arg0">动态操作的第一个参数。</param>
      <param name="arg1">动态操作的第二个参数。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。</summary>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="returnType">动态表达式的结果类型。</param>
      <param name="arg0">动态操作的第一个参数。</param>
      <param name="arg1">动态操作的第二个参数。</param>
      <param name="arg2">动态操作的第三个参数。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。</summary>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="returnType">动态表达式的结果类型。</param>
      <param name="arg0">动态操作的第一个参数。</param>
      <param name="arg1">动态操作的第二个参数。</param>
      <param name="arg2">动态操作的第三个参数。</param>
      <param name="arg3">动态操作的第四个参数。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。</summary>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="returnType">动态表达式的结果类型。</param>
      <param name="arguments">动态操作的参数。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。</summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。</param>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="arguments">动态操作的参数。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和一个参数绑定的动态操作。</summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。</param>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="arg0">动态操作的参数。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和两个参数绑定的动态操作。</summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。</param>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="arg0">动态操作的第一个参数。</param>
      <param name="arg1">动态操作的第二个参数。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和三个参数绑定的动态操作。</summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。</param>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="arg0">动态操作的第一个参数。</param>
      <param name="arg1">动态操作的第二个参数。</param>
      <param name="arg2">动态操作的第三个参数。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和四个参数绑定的动态操作。</summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。</param>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="arg0">动态操作的第一个参数。</param>
      <param name="arg1">动态操作的第二个参数。</param>
      <param name="arg2">动态操作的第三个参数。</param>
      <param name="arg3">动态操作的第四个参数。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。</summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。</param>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="arguments">动态操作的参数。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>索引时返回参数，当索引超出界限时引发。  不应使用此成员。  由于程序集重构，只能为公共的；并且在内部用于性能优化。</summary>
      <param name="index">参数的索引。</param>
      <returns>返回 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#CreateCallSite">
      <summary>根据需要创建 CallSite 并返回 DynamicExpression 的多态内联缓存的 CallSite。  不应使用此成员。  由于程序集重构，只能为公共的；并且在内部用于性能优化。</summary>
      <returns>返回 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#Rewrite(System.Linq.Expressions.Expression[])">
      <summary>重写此节点，该节点可将动态表达式的参数替换为提供的值。args 的数目需要与当前表达式的数目匹配。  不应使用此类型。  仅在程序集重构时公开，并且仅用于内部性能优化。  此辅助方法允许重新编写要独立于特定实现类的节点，该实现类是从调用站点正在使用的 DynamicExpression 派生的。</summary>
      <param name="args">参数。</param>
      <returns>返回 <see cref="T:System.Linq.Expressions.Expression" />，重新编写表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>将发送到参数 arguments 的值和发送到 DynamicExpression 当前实例的 Arguments 属性的值进行比较。 如果参数和属性的值相等，则返回当前实例。 如果它们不相等，则返回新的 DynamicExpression 实例，该实例与当前实例相同，只是 Arguments 属性设置为参数 arguments 的值。</summary>
      <param name="arguments">结果的 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 属性。</param>
      <returns>如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpressionVisitor.#ctor">
      <summary>初始化 <see cref="T:System.Linq.Expressions.DynamicExpressionVisitor" /> 的新实例。</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
      <summary>访问的子级 <see cref="T:System.Linq.Expressions.DynamicExpression" />。</summary>
      <param name="node">要访问的表达式。</param>
      <returns>返回 <see cref="T:System.Linq.Expressions.Expression" />, ，修改后的表达式中，如果修改它或任何子表达式; 否则，返回原始的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>索引时返回参数，当索引超出界限时引发。  不应使用此成员。  由于程序集重构，只能为公共的；并且在内部用于性能优化。</summary>
      <param name="index">参数的索引。</param>
      <returns>返回 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.ToString">
      <summary>返回 <see cref="T:System.Linq.Expressions.ElementInit" /> 对象的文本表示形式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ElementInit" /> 对象的文本表示形式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个新的表达式，它类似于此表达式，但使用所提供的子级。 如果所有子级均相同，它将返回此表达式。</summary>
      <param name="arguments">结果的 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 属性。</param>
      <returns>如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor">
      <summary>构造 <see cref="T:System.Linq.Expressions.Expression" /> 的新实例。</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)">
      <summary>初始化 <see cref="T:System.Linq.Expressions.Expression" /> 类的新实例。</summary>
      <param name="nodeType">
        <see cref="T:System.Linq.Expressions.ExpressionType" /> 设置为节点类型。</param>
      <param name="type">此 <see cref="P:System.Linq.Expressions.Expression.Type" /> 的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <param name="visitor">对此节点进行访问的访问者。</param>
      <returns>对此节点访问的结果。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示不进行溢出检查的算术加法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Add" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">加法运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示不进行溢出检查的算术加法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。 可指定实现方法。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Add" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null 和它表示返回的方法 void, ，不是 static (Shared 在 Visual Basic 中)，否则不会正好两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 null 和加法运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示不进行溢出检查的加法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示不进行溢出检查的加法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个表示不进行溢出检查的加法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">要将 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示进行溢出检查的加法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示进行溢出检查的加法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个表示进行溢出检查的加法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">要将 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示进行溢出检查的算术加法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">加法运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示进行溢出检查的算术加法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。 可指定实现方法。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null 和它表示返回的方法 void, ，不是 static (Shared 在 Visual Basic 中)，否则不会正好两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 null 和加法运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示按位 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 运算的 AND。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.And" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">按位 AND 没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示按位 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 运算的 AND。 可指定实现方法。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.And" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null 和它表示返回的方法 void, ，不是 static (Shared 在 Visual Basic 中)，否则不会正好两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 null 和按位 AND 没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，它表示仅在第一个操作数的计算结果为 AND 时才计算第二个操作数的条件 true 运算。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">按位 AND 没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。- 或 -<paramref name="left" />.类型和 <paramref name="right" />。类型不是同一个布尔值类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，它表示仅在第一个操作数解析为 true 时，才计算第二个操作数的条件 AND 运算。 可指定实现方法。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null 和它表示返回的方法 void, ，不是 static (Shared 在 Visual Basic 中)，否则不会正好两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 null 和按位 AND 没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。- 或 -<paramref name="method" /> 是 null 和 <paramref name="left" />。类型和 <paramref name="right" />。类型不是同一个布尔值类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示按位 AND 赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示按位 AND 赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个表示按位 AND 赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">要将 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个用于访问多维数组的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</summary>
      <param name="array">一个表示多维数组的表达式。</param>
      <param name="indexes">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用于为数组编制索引的表达式。</param>
      <returns>创建的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>创建一个用于访问数组的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</summary>
      <param name="array">一个表示要编制索引的数组的表达式。</param>
      <param name="indexes">一个数组，其中包含用于为数组编制索引的表达式。</param>
      <returns>创建的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示将数组索引运算符应用到多个级别的数组中。</summary>
      <param name="array">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />。</param>
      <param name="indexes">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 对象。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 或 <paramref name="indexes" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.类型不表示数组类型。- 或 -秩 <paramref name="array" />。类型不匹配中的元素数 <paramref name="indexes" />。- 或 -<see cref="P:System.Linq.Expressions.Expression.Type" /> 的一个或多个元素的属性 <paramref name="indexes" /> 不表示 <see cref="T:System.Int32" /> 类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，它表示将数组索引运算符应用到级别一的数组中。</summary>
      <param name="array">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="index">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 或 <paramref name="index" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.类型不表示数组类型。- 或 -<paramref name="array" />.类型表示其排名不为 1 的数组类型。- 或 -<paramref name="index" />.类型不表示 <see cref="T:System.Int32" /> 类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示将数组索引运算符应用到多维数组中。</summary>
      <param name="array">
        <see cref="T:System.Linq.Expressions.Expression" /> 实例的数组 - 数组索引操作的索引。</param>
      <param name="indexes">用于填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 对象的数组。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 或 <paramref name="indexes" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.类型不表示数组类型。- 或 -秩 <paramref name="array" />。类型不匹配中的元素数 <paramref name="indexes" />。- 或 -<see cref="P:System.Linq.Expressions.Expression.Type" /> 的一个或多个元素的属性 <paramref name="indexes" /> 不表示 <see cref="T:System.Int32" /> 类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示获取一维数组的长度的表达式。</summary>
      <param name="array">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" />，<see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性等于 <paramref name="array" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.类型不表示数组类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Assign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.MemberAssignment" />，它表示字段或属性的初始化。</summary>
      <param name="member">要将 <see cref="T:System.Reflection.MemberInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />。</param>
      <param name="expression">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberAssignment" /> 的 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 等于 <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> 且 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 和 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 或 <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不表示字段或属性。- 或 -表示的属性 <paramref name="member" /> 没有 set 取值函数。- 或 -<paramref name="expression" />.类型不能分配给字段或属性的类型， <paramref name="member" /> 表示。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>使用属性访问器方法，创建一个表示成员初始化的 <see cref="T:System.Linq.Expressions.MemberAssignment" />。</summary>
      <param name="propertyAccessor">一个表示属性访问器方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="expression">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberAssignment" /> 的 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" />，<see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性设置为 <see cref="T:System.Reflection.PropertyInfo" />（表示 <paramref name="propertyAccessor" /> 中访问的属性），<see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> 属性设置为 <paramref name="expression" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 或 <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> 不表示属性访问器方法。- 或 -所访问的属性 <paramref name="propertyAccessor" /> 没有 set 取值函数。- 或 -<paramref name="expression" />.类型不能分配给字段或属性的类型， <paramref name="member" /> 表示。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含给定表达式，但不包含任何变量。</summary>
      <param name="expressions">块中的表达式。</param>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含给定的变量和表达式。</summary>
      <param name="variables">块中的变量。</param>
      <param name="expressions">块中的表达式。</param>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含给定的变量和表达式。</summary>
      <param name="variables">块中的变量。</param>
      <param name="expressions">块中的表达式。</param>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含两个表达式，但不包含任何变量。</summary>
      <param name="arg0">块中的第一个表达式。</param>
      <param name="arg1">块中的第二个表达式。</param>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含三个表达式，但不包含任何变量。</summary>
      <param name="arg0">块中的第一个表达式。</param>
      <param name="arg1">块中的第二个表达式。</param>
      <param name="arg2">块中的第三个表达式。</param>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含四个表达式，但不包含任何变量。</summary>
      <param name="arg0">块中的第一个表达式。</param>
      <param name="arg1">块中的第二个表达式。</param>
      <param name="arg2">块中的第三个表达式。</param>
      <param name="arg3">块中的第四个表达式。</param>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含五个表达式，但不包含任何变量。</summary>
      <param name="arg0">块中的第一个表达式。</param>
      <param name="arg1">块中的第二个表达式。</param>
      <param name="arg2">块中的第三个表达式。</param>
      <param name="arg3">块中的第四个表达式。</param>
      <param name="arg4">块中的第五个表达式。</param>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含给定表达式，但不包含任何变量。</summary>
      <param name="expressions">块中的表达式。</param>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含给定表达式和特定结果类型，但不包含任何变量。</summary>
      <param name="type">块的结果类型。</param>
      <param name="expressions">块中的表达式。</param>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含给定的变量和表达式。</summary>
      <param name="type">块的结果类型。</param>
      <param name="variables">块中的变量。</param>
      <param name="expressions">块中的表达式。</param>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含给定的变量和表达式。</summary>
      <param name="type">块的结果类型。</param>
      <param name="variables">块中的变量。</param>
      <param name="expressions">块中的表达式。</param>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含给定表达式和特定结果类型，但不包含任何变量。</summary>
      <param name="type">块的结果类型。</param>
      <param name="expressions">块中的表达式。</param>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)">
      <summary>创建一个表示 break 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Break，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，此外还有一个在跳转时将传递给目标标签的 null 值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>创建一个表示 break 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。 可以指定在跳转时传递给标签的值。</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="value">将在跳转时传递给关联标签的值。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Break，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，此外还有将在跳转时传递给目标标签的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>创建一个表示具有指定类型的 break 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。 可以指定在跳转时传递给标签的值。</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="value">将在跳转时传递给关联标签的值。</param>
      <param name="type">要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Break，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <paramref name="type" />，此外还有一个在跳转时将传递给目标标签的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>创建一个表示具有指定类型的 break 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="type">要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Break，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <paramref name="type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示调用不带参数的方法。</summary>
      <param name="instance">一个 <see cref="T:System.Linq.Expressions.Expression" />，它指定一个实例方法调用，对于 null 方法（在 Visual Basic 中为 static 方法）应传递 Shared。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。- 或 -<paramref name="instance" /> 是 null 和 <paramref name="method" /> 表示的实例方法。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.类型不能分配给所表示的方法的声明类型 <paramref name="method" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个表示调用带参数的方法的 <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</summary>
      <param name="instance">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />，它为 null（在 Visual Basic 中则为static）方法传递 Shared。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arguments">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 对象。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />、<see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。- 或 -<paramref name="instance" /> 是 null 和 <paramref name="method" /> 表示的实例方法。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.类型不能分配给所表示的方法的声明类型 <paramref name="method" />。- 或 -中的元素数 <paramref name="arguments" /> 不等于所表示的方法的参数的数目 <paramref name="method" />。- 或 -一个或多个元素的 <paramref name="arguments" /> 不能分配给所表示的方法的相应参数 <paramref name="method" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示对采用两个参数的方法的调用。</summary>
      <param name="instance">指定一个实例调用的实例的 <see cref="T:System.Linq.Expressions.Expression" />。 （对于 static 方法（在 Visual Basic 中为 Shared 方法）应传递 null）。</param>
      <param name="method">表示目标方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arg0">用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">用于表示第二个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示对使用三个参数的方法的调用。</summary>
      <param name="instance">指定一个实例调用的实例的 <see cref="T:System.Linq.Expressions.Expression" />。 （对于 static 方法（在 Visual Basic 中为 Shared 方法）应传递 null）。</param>
      <param name="method">表示目标方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arg0">用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">用于表示第二个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg2">用于表示第三个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>创建一个表示调用带参数的方法的 <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</summary>
      <param name="instance">一个 <see cref="T:System.Linq.Expressions.Expression" />，它指定一个实例方法调用，对于 null 方法（在 Visual Basic 中为 static 方法）应传递 Shared。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arguments">用于填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 对象的数组。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />、<see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。- 或 -<paramref name="instance" /> 是 null 和 <paramref name="method" /> 表示的实例方法。- 或 -<paramref name="arguments" /> 不是 null 和一个或多个元素是 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.类型不能分配给所表示的方法的声明类型 <paramref name="method" />。- 或 -中的元素数 <paramref name="arguments" /> 不等于所表示的方法的参数的数目 <paramref name="method" />。- 或 -一个或多个元素的 <paramref name="arguments" /> 不能分配给所表示的方法的相应参数 <paramref name="method" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>通过调用合适的工厂方法，创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示方法调用。</summary>
      <param name="instance">将搜索 <see cref="T:System.Linq.Expressions.Expression" /> 的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性值，查看其是否有特定方法。</param>
      <param name="methodName">方法的名称。</param>
      <param name="typeArguments">指定泛型方法的类型参数的 <see cref="T:System.Type" /> 对象的数组。 当 methodName 指定非泛型方法时，此参数应为 null。</param>
      <param name="arguments">
        <see cref="T:System.Linq.Expressions.Expression" /> 对象的数组，表示方法的参数。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 的 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，<see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 属性等于 <paramref name="instance" />，<see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 设置为表示指定实例方法的 <see cref="T:System.Reflection.MethodInfo" /> 且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 设置为指定参数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 或 <paramref name="methodName" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">任何方法 ︰ 名称为 <paramref name="methodName" />, ，其类型参数与匹配 <paramref name="typeArguments" />, ，且参数类型匹配 <paramref name="arguments" /> 中找到 <paramref name="instance" />。类型或其基类型。- 或 -多个方法 ︰ 名称为 <paramref name="methodName" />, ，其类型参数与匹配 <paramref name="typeArguments" />, ，且参数类型匹配 <paramref name="arguments" /> 中找到 <paramref name="instance" />。类型或其基类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示对 static 方法（在 Visual Basic 中为 Shared 方法）的调用。</summary>
      <param name="method">表示目标方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arguments">表示调用参数的 <see cref="T:System.Linq.Expressions.Expression" /> 的集合。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示对使用一个参数的 static 方法（在 Visual Basic 中为 Shared 方法）的调用。</summary>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arg0">用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示对使用两个参数的静态方法的调用。</summary>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arg0">用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">用于表示第二个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示对使用三个参数的静态方法的调用。</summary>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arg0">用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">用于表示第二个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg2">用于表示第三个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示对使用四个参数的静态方法的调用。</summary>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arg0">用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">用于表示第二个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg2">用于表示第三个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg3">用于表示第四个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示对使用五个参数的静态方法的调用。</summary>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arg0">用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">用于表示第二个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg2">用于表示第三个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg3">用于表示第四个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg4">用于表示第五个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示调用有参数的 static（在 Visual Basic 中为 Shared）方法。</summary>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 表示 static（在 Visual Basic 中为 Shared）方法，以将 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为与其相等。</param>
      <param name="arguments">用于填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 对象的数组。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">中的元素数 <paramref name="arguments" /> 不等于所表示的方法的参数的数目 <paramref name="method" />。- 或 -一个或多个元素的 <paramref name="arguments" /> 不能分配给所表示的方法的相应参数 <paramref name="method" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>通过调用合适的工厂方法，创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示对 static（在 Visual Basic 中为 Shared）方法的调用。</summary>
      <param name="type">
        <see cref="T:System.Type" /> 指定包含指定的 static（在 Visual Basic 中为 Shared）方法的类型。</param>
      <param name="methodName">方法的名称。</param>
      <param name="typeArguments">指定泛型方法的类型参数的 <see cref="T:System.Type" /> 对象的数组。 当 methodName 指定非泛型方法时，此参数应为 null。</param>
      <param name="arguments">
        <see cref="T:System.Linq.Expressions.Expression" /> 对象的数组，表示方法的参数。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 的 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，<see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为表示指定的 <see cref="T:System.Reflection.MethodInfo" />（在 Visual Basic 中为 static）方法的 Shared，并且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 属性设置为指定参数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或 <paramref name="methodName" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">任何方法 ︰ 名称为 <paramref name="methodName" />, ，其类型参数与匹配 <paramref name="typeArguments" />, ，且参数类型匹配 <paramref name="arguments" /> 中找到 <paramref name="type" /> 或其基类型。- 或 -多个方法 ︰ 名称为 <paramref name="methodName" />, ，其类型参数与匹配 <paramref name="typeArguments" />, ，且参数类型匹配 <paramref name="arguments" /> 中找到 <paramref name="type" /> 或其基类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示 catch 语句的 <see cref="T:System.Linq.Expressions.CatchBlock" />，其中具有对已捕获的 <see cref="T:System.Exception" /> 对象的引用以便在处理程序主体中使用。</summary>
      <param name="variable">一个 <see cref="T:System.Linq.Expressions.ParameterExpression" />，它表示对此处理程序捕获的 <see cref="T:System.Exception" /> 对象的引用。</param>
      <param name="body">catch 语句的主体。</param>
      <returns>创建的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示 catch 语句的 <see cref="T:System.Linq.Expressions.CatchBlock" />，其中具有 <see cref="T:System.Exception" /> 筛选器和对已捕获的 <see cref="T:System.Exception" /> 对象的引用。</summary>
      <param name="variable">一个 <see cref="T:System.Linq.Expressions.ParameterExpression" />，它表示对此处理程序捕获的 <see cref="T:System.Exception" /> 对象的引用。</param>
      <param name="body">catch 语句的主体。</param>
      <param name="filter">
        <see cref="T:System.Exception" /> 筛选器的主体。</param>
      <returns>创建的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)">
      <summary>创建一个表示 catch 语句的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</summary>
      <param name="type">此 <see cref="P:System.Linq.Expressions.Expression.Type" /> 将处理的 <see cref="T:System.Exception" /> 的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</param>
      <param name="body">catch 语句的主体。</param>
      <returns>创建的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示 catch 语句的 <see cref="T:System.Linq.Expressions.CatchBlock" />，其中具有 <see cref="T:System.Exception" /> 筛选器，但没有对已捕获的 <see cref="T:System.Exception" /> 对象的引用。</summary>
      <param name="type">此 <see cref="P:System.Linq.Expressions.Expression.Type" /> 将处理的 <see cref="T:System.Exception" /> 的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</param>
      <param name="body">catch 语句的主体。</param>
      <param name="filter">
        <see cref="T:System.Exception" /> 筛选器的主体。</param>
      <returns>创建的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)">
      <summary>创建一个用于清除序列点的 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />。</summary>
      <param name="document">表示源文件的 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</param>
      <returns>用于清除序列点的 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的实例。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示合并运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性 <paramref name="left" /> 不表示引用类型或为空值类型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" />.类型和 <paramref name="right" />。类型是不能相互转换。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
      <summary>在给定转换函数的情况下，创建一个表示合并运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="conversion">要将 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" />.类型和 <paramref name="right" />。类型是不能相互转换。- 或 -<paramref name="conversion" /> 不是 null 和 <paramref name="conversion" />。类型为不带一个参数的委托类型。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性 <paramref name="left" /> 不表示引用类型或为空值类型。- 或 -<see cref="P:System.Linq.Expressions.Expression.Type" /> 属性 <paramref name="left" /> 表示不能分配给委托类型的参数类型的类型 <paramref name="conversion" />。类型。- 或 -<see cref="P:System.Linq.Expressions.Expression.Type" /> 属性 <paramref name="right" /> 是否不等于委托类型的返回类型 <paramref name="conversion" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示条件语句的 <see cref="T:System.Linq.Expressions.ConditionalExpression" />。</summary>
      <param name="test">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />。</param>
      <param name="ifTrue">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。</param>
      <param name="ifFalse">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.ConditionalExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />，并且其 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 和 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="test" />、<paramref name="ifTrue" /> 或 <paramref name="ifFalse" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="test" />.类型不是 <see cref="T:System.Boolean" />。- 或 -<paramref name="ifTrue" />.类型不等同于 <paramref name="ifFalse" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)">
      <summary>创建一个表示条件语句的 <see cref="T:System.Linq.Expressions.ConditionalExpression" />。</summary>
      <param name="test">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />。</param>
      <param name="ifTrue">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。</param>
      <param name="ifFalse">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。</param>
      <param name="type">要将 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.ConditionalExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />，并且其 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 和 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.ConstantExpression" />，它把 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 属性设置为指定值。</summary>
      <param name="value">要将 <see cref="T:System.Object" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.ConstantExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Constant" />，并且其 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.ConstantExpression" />，它把 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为指定值。</summary>
      <param name="value">要将 <see cref="T:System.Object" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />。</param>
      <param name="type">要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.ConstantExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Constant" />，并且其 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 null 和 <paramref name="type" /> 不能分配的动态类型从 <paramref name="value" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)">
      <summary>创建一个表示 continue 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Continue，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，此外还有一个在跳转时将传递给目标标签的 null 值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>创建一个表示具有指定类型的 continue 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="type">要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Continue，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <paramref name="type" />，此外还有一个在跳转时将传递给目标标签的 null 值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
      <summary>创建一个表示类型转换运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <param name="expression">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="type">要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有转换运算符定义之间 <paramref name="expression" />。类型和 <paramref name="type" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示为其指定实现方法的转换运算。</summary>
      <param name="expression">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="type">要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />、<see cref="P:System.Linq.Expressions.Expression.Type" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null 和它表示返回的方法 void, ，不是 static (Shared 在 Visual Basic 中)，或者不带且只有一个参数。</exception>
      <exception cref="T:System.InvalidOperationException">没有转换运算符定义之间 <paramref name="expression" />。类型和 <paramref name="type" />。- 或 -<paramref name="expression" />.类型不能分配给所表示的方法的参数类型 <paramref name="method" />。- 或 -所表示的方法的返回类型 <paramref name="method" /> 不能赋给 <paramref name="type" />。- 或 -<paramref name="expression" />.类型或 <paramref name="type" /> 是可以为 null 的值类型和相应的不可为 null 的值类型不等于参数类型或返回类型，分别表示的方法的 <paramref name="method" />。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">匹配的多个方法 <paramref name="method" /> 找到说明。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示在目标类型发生溢出时引发异常的转换运算。</summary>
      <param name="expression">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="type">要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有转换运算符定义之间 <paramref name="expression" />。类型和 <paramref name="type" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示在目标类型发生溢出时引发异常且为其指定实现方法的转换运算。</summary>
      <param name="expression">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="type">要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />、<see cref="P:System.Linq.Expressions.Expression.Type" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null 和它表示返回的方法 void, ，不是 static (Shared 在 Visual Basic 中)，或者不带且只有一个参数。</exception>
      <exception cref="T:System.InvalidOperationException">没有转换运算符定义之间 <paramref name="expression" />。类型和 <paramref name="type" />。- 或 -<paramref name="expression" />.类型不能分配给所表示的方法的参数类型 <paramref name="method" />。- 或 -所表示的方法的返回类型 <paramref name="method" /> 不能赋给 <paramref name="type" />。- 或 -<paramref name="expression" />.类型或 <paramref name="type" /> 是可以为 null 的值类型和相应的不可为 null 的值类型不等于参数类型或返回类型，分别表示的方法的 <paramref name="method" />。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">匹配的多个方法 <paramref name="method" /> 找到说明。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>创建一个具有指定跨度的 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />。</summary>
      <param name="document">表示源文件的 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</param>
      <param name="startLine">此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的起始行。 必须大于 0。</param>
      <param name="startColumn">此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的起始列。 必须大于 0。</param>
      <param name="endLine">此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的结束行。 必须大于或等于起始行。</param>
      <param name="endColumn">此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的结束列。 如果结束行与起始行相同，则它必须大于或等于起始列。 任何情况下都必须大于 0。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示按 1 递减表达式值。</summary>
      <param name="expression">要递减的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns>一个表示已递减的表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示按 1 递减表达式值。</summary>
      <param name="expression">要递减的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns>一个表示已递减的表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Default(System.Type)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DefaultExpression" />，<see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为指定类型。</summary>
      <param name="type">要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.DefaultExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Default" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为指定类型。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示算术除法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">作为 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置目标的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">作为 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置目标的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Divide" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">除法运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示算术除法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。 可指定实现方法。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Divide" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null 和它表示返回的方法 void, ，不是 static (Shared 在 Visual Basic 中)，否则不会正好两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 null 和除法运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示不进行溢出检查的除法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示不进行溢出检查的除法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个表示不进行溢出检查的除法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">要将 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。</summary>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="returnType">动态表达式的结果类型。</param>
      <param name="arguments">动态操作的参数。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。</summary>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="returnType">动态表达式的结果类型。</param>
      <param name="arg0">动态操作的第一个参数。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。</summary>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="returnType">动态表达式的结果类型。</param>
      <param name="arg0">动态操作的第一个参数。</param>
      <param name="arg1">动态操作的第二个参数。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。</summary>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="returnType">动态表达式的结果类型。</param>
      <param name="arg0">动态操作的第一个参数。</param>
      <param name="arg1">动态操作的第二个参数。</param>
      <param name="arg2">动态操作的第三个参数。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。</summary>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="returnType">动态表达式的结果类型。</param>
      <param name="arg0">动态操作的第一个参数。</param>
      <param name="arg1">动态操作的第二个参数。</param>
      <param name="arg2">动态操作的第三个参数。</param>
      <param name="arg3">动态操作的第四个参数。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。</summary>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="returnType">动态表达式的结果类型。</param>
      <param name="arguments">动态操作的参数。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>在给定 <see cref="T:System.Linq.Expressions.ElementInit" /> 作为第二个参数的情况下，创建一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</summary>
      <param name="addMethod">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />。</param>
      <param name="arguments">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />（包含 <see cref="T:System.Linq.Expressions.Expression" /> 对象）要将 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 属性设置为与其相等。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.ElementInit" />，其 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> 和 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addMethod" /> 或 <paramref name="arguments" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">该方法的 <paramref name="addMethod" /> 表示名为"Add"（不区分大小写）。- 或 -该方法的 <paramref name="addMethod" /> 表示不是实例方法。- 或 -<paramref name="arguments" /> 不包含的元素数目的方法的参数数量相同， <paramref name="addMethod" /> 表示。- 或 -<see cref="P:System.Linq.Expressions.Expression.Type" /> 的一个或多个元素的属性 <paramref name="arguments" /> 不能赋给该方法的相应参数的类型， <paramref name="addMethod" /> 表示。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>在给定值数组作为第二个参数的情况下，创建一个 <see cref="T:System.Linq.Expressions.ElementInit" />。</summary>
      <param name="addMethod">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />。</param>
      <param name="arguments">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 对象的数组。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.ElementInit" />，其 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> 和 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addMethod" /> 或 <paramref name="arguments" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">AddMethod 表示不是方法名为"Add"（不区分大小写）。- 或 -该方法 addMethod 表示不是实例方法。- 或 -参数不包含相同数量的方法参数的数量相同的元素表示该 addMethod。- 或 -<see cref="P:System.Linq.Expressions.Expression.Type" /> 的一个或多个元素的属性 <paramref name="arguments" /> 不能赋给该方法的相应参数的类型， <paramref name="addMethod" /> 表示。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Empty">
      <summary>创建具有 <see cref="T:System.Void" /> 类型的空表达式。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.DefaultExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Default" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <see cref="T:System.Void" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示相等比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为定义的相等运算符 <paramref name="left" />。类型和 <paramref name="right" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>创建一个表示相等比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。 可指定实现方法。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="liftToNull">若要将 true 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 true；若要将 false 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 false。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null 和它表示返回的方法 void, ，不是 static (Shared 在 Visual Basic 中)，否则不会正好两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 null 和相等运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>通过对用户定义的类型使用 <see cref="T:System.Linq.Expressions.BinaryExpression" />，创建一个表示按位 XOR 运算的 op_ExclusiveOr。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">XOR 没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>通过对用户定义的类型使用 <see cref="T:System.Linq.Expressions.BinaryExpression" />，创建一个表示按位 XOR 运算的 op_ExclusiveOr。 可指定实现方法。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null 和它表示返回的方法 void, ，不是 static (Shared 在 Visual Basic 中)，否则不会正好两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 null 和 XOR 没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>通过对用户定义的类型使用 <see cref="T:System.Linq.Expressions.BinaryExpression" />，创建一个表示按位 XOR 赋值运算的 op_ExclusiveOr。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>通过对用户定义的类型使用 <see cref="T:System.Linq.Expressions.BinaryExpression" />，创建一个表示按位 XOR 赋值运算的 op_ExclusiveOr。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>通过对用户定义的类型使用 <see cref="T:System.Linq.Expressions.BinaryExpression" />，创建一个表示按位 XOR 赋值运算的 op_ExclusiveOr。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">要将 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)">
      <summary>创建一个表示访问字段的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <param name="expression">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />。 对于 static（在 Visual Basic 中为 Shared），<paramref name="expression" /> 必须是 null。</param>
      <param name="field">要将 <see cref="T:System.Reflection.FieldInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />，并且其 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 和 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="field" /> 为 null。- 或 -所表示的字段 <paramref name="field" /> 不是 static (Shared 在 Visual Basic 中) 和 <paramref name="expression" /> 是 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.类型不能分配给所表示的字段的声明类型 <paramref name="field" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
      <summary>在给定字段名称的情况下，创建一个表示访问此字段的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <param name="expression">一个 <see cref="T:System.Linq.Expressions.Expression" />，其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 中包含一个名为 <paramref name="fieldName" /> 的字段。 对于静态字段，这可以为 null。</param>
      <param name="fieldName">要访问的字段的名称。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberExpression" /> 的 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />，<see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 属性设置为 <paramref name="expression" />，<see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 属性设置为 <see cref="T:System.Reflection.FieldInfo" />（表示由 <paramref name="fieldName" /> 表示的字段）。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="fieldName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有名为字段 <paramref name="fieldName" /> 中定义 <paramref name="expression" />。类型或其基类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>创建一个表示访问字段的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <param name="expression">字段的包含对象。 对于静态字段，这可以为 null。</param>
      <param name="type">包含字段的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="fieldName">要访问的字段。</param>
      <returns>创建的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])">
      <summary>创建一个 <see cref="T:System.Type" /> 对象，它表示具有特定类型参数的泛型 System.Action 委托类型。</summary>
      <param name="typeArgs">包含多达十六个 <see cref="T:System.Type" /> 对象的数组，它指定 System.Action 委托类型的类型参数。</param>
      <returns>具有指定类型参数的 System.Action 委托的类型。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" /> 包含超过 16 个元素。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArgs" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])">
      <summary>获取一个 <see cref="P:System.Linq.Expressions.Expression.Type" /> 对象，它表示具有特定类型参数的泛型 System.Func 或 System.Action 委托类型。</summary>
      <param name="typeArgs">该委托的类型参数。</param>
      <returns>委托类型。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])">
      <summary>创建一个 <see cref="P:System.Linq.Expressions.Expression.Type" /> 对象，它表示具有特定类型参数的泛型 System.Func 委托类型。 最后一个类型参数指定已创建委托的返回类型。</summary>
      <param name="typeArgs">包含一到十七个 <see cref="T:System.Type" /> 对象的数组，它指定 System.Func 委托类型的类型参数。</param>
      <returns>具有指定类型参数的 System.Func 委托的类型。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" /> 包含少于一个或多个十七元素。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArgs" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)">
      <summary>创建一个表示“go to”语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Goto，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为指定值，此外还有一个在跳转时将传递给目标标签的 null 值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>创建一个表示“go to”语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。 可以指定在跳转时传递给标签的值。</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="value">将在跳转时传递给关联标签的值。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Goto，并且其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，此外还有一个在跳转时将传递给目标标签的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>创建一个表示具有指定类型的“go to”语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。 可以指定在跳转时传递给标签的值。</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="value">将在跳转时传递给关联标签的值。</param>
      <param name="type">要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Goto，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <paramref name="type" />，此外还有一个在跳转时将传递给目标标签的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>创建一个表示具有指定类型的“go to”语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="type">要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Goto，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为指定值，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <paramref name="type" />，此外还有一个在跳转时将传递给目标标签的 null 值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示“大于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">"大于"运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>创建一个表示“大于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。 可指定实现方法。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="liftToNull">若要将 true 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 true；若要将 false 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 false。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null 和它表示返回的方法 void, ，不是 static (Shared 在 Visual Basic 中)，否则不会正好两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 null 和"大于"运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示“大于或等于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">"大于或等于"运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>创建一个表示“大于或等于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="liftToNull">若要将 true 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 true；若要将 false 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 false。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null 和它表示返回的方法 void, ，不是 static (Shared 在 Visual Basic 中)，否则不会正好两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 null 和"大于或等于"运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.ConditionalExpression" />，它表示带 if 语句的条件块。</summary>
      <param name="test">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />。</param>
      <param name="ifTrue">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.ConditionalExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />，并且 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 属性设置为指定值。<see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 属性设置为默认表达式，并且此方法返回的结果 <see cref="T:System.Linq.Expressions.ConditionalExpression" /> 的类型为 <see cref="T:System.Void" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.ConditionalExpression" />，它表示带 if 和 else 语句的条件块。</summary>
      <param name="test">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />。</param>
      <param name="ifTrue">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。</param>
      <param name="ifFalse">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.ConditionalExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />，并且其 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 和 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 属性设置为指定值。 此方法返回的结果 <see cref="T:System.Linq.Expressions.ConditionalExpression" /> 的类型为 <see cref="T:System.Void" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示按 1 递增表达式值。</summary>
      <param name="expression">要递增的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns>一个表示已递增的表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示按 1 递增表达式值。</summary>
      <param name="expression">要递增的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns>一个表示已递增的表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.InvocationExpression" />，它将委托或 lambda 表达式应用于一个参数表达式列表。</summary>
      <param name="expression">一个 <see cref="T:System.Linq.Expressions.Expression" />，它表示要应用的委托或 lambda 表达式。</param>
      <param name="arguments">一个包含 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象的 <see cref="T:System.Linq.Expressions.Expression" />，这些对象表示要对其应用委托或 lambda 表达式的参数。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.InvocationExpression" />，它对提供的参数应用指定的委托或 lambda 表达式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.类型不表示一个委托类型或 <see cref="T:System.Linq.Expressions.Expression`1" />。- 或 -<see cref="P:System.Linq.Expressions.Expression.Type" /> 属性的元素的 <paramref name="arguments" /> 不能分配给委托所表示的相应参数的类型 <paramref name="expression" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" /> 不通过所表示的委托中包含的元素数目的参数列表作为 <paramref name="expression" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.InvocationExpression" />，它将委托或 lambda 表达式应用于一个参数表达式列表。</summary>
      <param name="expression">一个 <see cref="T:System.Linq.Expressions.Expression" />，它表示要应用的委托或 lambda 表达式。</param>
      <param name="arguments">
        <see cref="T:System.Linq.Expressions.Expression" /> 对象的数组，这些对象表示要对其应用委托或 lambda 表达式的参数。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.InvocationExpression" />，它对提供的参数应用指定的委托或 lambda 表达式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.类型不表示一个委托类型或 <see cref="T:System.Linq.Expressions.Expression`1" />。- 或 -<see cref="P:System.Linq.Expressions.Expression.Type" /> 属性的元素的 <paramref name="arguments" /> 不能分配给委托所表示的相应参数的类型 <paramref name="expression" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" /> 不通过所表示的委托中包含的元素数目的参数列表作为 <paramref name="expression" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)">
      <summary>返回表达式的计算结果是否为 false。</summary>
      <param name="expression">要计算的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>返回表达式的计算结果是否为 false。</summary>
      <param name="expression">要计算的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)">
      <summary>返回表达式的计算结果是否为 true。</summary>
      <param name="expression">要计算的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>返回表达式的计算结果是否为 true。</summary>
      <param name="expression">要计算的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.LabelTarget" />，它表示具有 void 类型但没有名称的标签。</summary>
      <returns>新的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)">
      <summary>创建一个<see cref="T:System.Linq.Expressions.LabelExpression" />，它表示不带默认值的标签。</summary>
      <param name="target">此 <see cref="T:System.Linq.Expressions.LabelTarget" /> 将关联的 <see cref="T:System.Linq.Expressions.LabelExpression" />。</param>
      <returns>不带默认值的 <see cref="T:System.Linq.Expressions.LabelExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.LabelExpression" />，它表示具有给定默认值的标签。</summary>
      <param name="target">此 <see cref="T:System.Linq.Expressions.LabelTarget" /> 将关联的 <see cref="T:System.Linq.Expressions.LabelExpression" />。</param>
      <param name="defaultValue">当通过常规控制流到达标签时，此 <see cref="T:System.Linq.Expressions.LabelExpression" /> 的值。</param>
      <returns>具有给定默认值的 <see cref="T:System.Linq.Expressions.LabelExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.String)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.LabelTarget" />，它表示具有 void 类型和给定名称的标签。</summary>
      <param name="name">标签的名称。</param>
      <returns>新的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.LabelTarget" />，它表示具有给定类型的标签。</summary>
      <param name="type">跳转到标签时传递的值的类型。</param>
      <returns>新的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.LabelTarget" />，它表示具有给定类型和名称的标签。</summary>
      <param name="type">跳转到标签时传递的值的类型。</param>
      <param name="name">标签的名称。</param>
      <returns>新的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>通过先构造一个委托类型来创建一个 LambdaExpression。</summary>
      <param name="body">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="tailCall">一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。</param>
      <param name="parameters">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>通过先构造一个委托类型来创建一个 LambdaExpression。</summary>
      <param name="body">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="tailCall">一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。</param>
      <param name="parameters">其中包含用于填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象的数组。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>通过先构造一个委托类型来创建一个 LambdaExpression。</summary>
      <param name="body">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="parameters">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>通过先构造一个委托类型来创建一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</summary>
      <param name="body">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="parameters">用于填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象的数组。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> 为 null。- 或 -一个或多个元素 <paramref name="parameters" /> 是 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> 包含超过 16 个元素。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>通过先构造一个委托类型来创建一个 LambdaExpression。</summary>
      <param name="body">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="name">lambda 的名称。 用于发出调试信息。</param>
      <param name="tailCall">一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。</param>
      <param name="parameters">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>通过先构造一个委托类型来创建一个 LambdaExpression。</summary>
      <param name="body">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="name">lambda 的名称。 用于发出调试信息。</param>
      <param name="parameters">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>通过先构造一个委托类型来创建一个 LambdaExpression。</summary>
      <param name="delegateType">一个 <see cref="P:System.Linq.Expressions.Expression.Type" />，它表示 lambda 的委托签名。</param>
      <param name="body">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="tailCall">一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。</param>
      <param name="parameters">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>通过先构造一个委托类型来创建一个 LambdaExpression。</summary>
      <param name="delegateType">一个 <see cref="P:System.Linq.Expressions.Expression.Type" />，它表示 lambda 的委托签名。</param>
      <param name="body">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="tailCall">一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。</param>
      <param name="parameters">其中包含用于填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象的数组。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>通过先构造一个委托类型来创建一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />。 如果委托类型在编译时未知，则可以使用它。</summary>
      <param name="delegateType">一个 <see cref="T:System.Type" />，它表示 lambda 的委托签名。</param>
      <param name="body">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="parameters">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象。</param>
      <returns>一个表示 lambda 表达式的对象，该表达式的 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，并且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegateType" /> 或 <paramref name="body" /> 为 null。- 或 -中的一个或多个元素 <paramref name="parameters" /> 是 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> 不表示一个委托类型。- 或 -<paramref name="body" />.类型表示不能分配给所表示的委托类型的返回类型的类型 <paramref name="delegateType" />。- 或 -<paramref name="parameters" /> 不包含的元素数目的参数所表示的委托类型列表作为 <paramref name="delegateType" />。- 或 -<see cref="P:System.Linq.Expressions.Expression.Type" /> 属性的元素的 <paramref name="parameters" /> 不是从表示的委托类型的相应参数类型的类型赋值 <paramref name="delegateType" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>通过先构造一个委托类型来创建一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />。 如果委托类型在编译时未知，则可以使用它。</summary>
      <param name="delegateType">一个 <see cref="T:System.Type" />，它表示 lambda 的委托签名。</param>
      <param name="body">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="parameters">用于填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象的数组。</param>
      <returns>一个表示 lambda 表达式的对象，该表达式的 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，并且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegateType" /> 或 <paramref name="body" /> 为 null。- 或 -中的一个或多个元素 <paramref name="parameters" /> 是 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> 不表示一个委托类型。- 或 -<paramref name="body" />.类型表示不能分配给所表示的委托类型的返回类型的类型 <paramref name="delegateType" />。- 或 -<paramref name="parameters" /> 不包含的元素数目的参数所表示的委托类型列表作为 <paramref name="delegateType" />。- 或 -<see cref="P:System.Linq.Expressions.Expression.Type" /> 属性的元素的 <paramref name="parameters" /> 不是从表示的委托类型的相应参数类型的类型赋值 <paramref name="delegateType" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>通过先构造一个委托类型来创建一个 LambdaExpression。</summary>
      <param name="delegateType">一个 <see cref="P:System.Linq.Expressions.Expression.Type" />，它表示 lambda 的委托签名。</param>
      <param name="body">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="name">lambda 的名称。 用于发出调试信息。</param>
      <param name="tailCall">一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。</param>
      <param name="parameters">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>通过先构造一个委托类型来创建一个 LambdaExpression。</summary>
      <param name="delegateType">一个 <see cref="P:System.Linq.Expressions.Expression.Type" />，它表示 lambda 的委托签名。</param>
      <param name="body">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="name">lambda 的名称。 用于发出调试信息。</param>
      <param name="parameters">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>创建一个在编译时委托类型已知的 <see cref="T:System.Linq.Expressions.Expression`1" />。</summary>
      <param name="body">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="tailCall">一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。</param>
      <param name="parameters">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象。</param>
      <typeparam name="TDelegate">委托类型。</typeparam>
      <returns>一个 <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>创建一个在编译时委托类型已知的 <see cref="T:System.Linq.Expressions.Expression`1" />。</summary>
      <param name="body">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="tailCall">一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。</param>
      <param name="parameters">其中包含用于填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象的数组。</param>
      <typeparam name="TDelegate">委托类型。</typeparam>
      <returns>一个 <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>创建一个在编译时委托类型已知的 <see cref="T:System.Linq.Expressions.Expression`1" />。</summary>
      <param name="body">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="parameters">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象。</param>
      <typeparam name="TDelegate">一种委托类型。</typeparam>
      <returns>一个 <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> 为 null。- 或 -中的一个或多个元素 <paramref name="parameters" /> 是 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" /> 不是委托类型。- 或 -<paramref name="body" />.类型表示不能分配给的返回类型的一种 <paramref name="TDelegate" />。- 或 -<paramref name="parameters" /> 不包含的元素数目的参数列表作为 <paramref name="TDelegate" />。- 或 -<see cref="P:System.Linq.Expressions.Expression.Type" /> 属性的元素的 <paramref name="parameters" /> 不能从相应的参数类型的类型分配 <paramref name="TDelegate" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>创建一个在编译时委托类型已知的 <see cref="T:System.Linq.Expressions.Expression`1" />。</summary>
      <param name="body">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="parameters">用于填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象的数组。</param>
      <typeparam name="TDelegate">一种委托类型。</typeparam>
      <returns>一个 <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> 为 null。- 或 -中的一个或多个元素 <paramref name="parameters" /> 是 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" /> 不是委托类型。- 或 -<paramref name="body" />.类型表示不能分配给的返回类型的一种 <paramref name="TDelegate" />。- 或 -<paramref name="parameters" /> 不包含的元素数目的参数列表作为 <paramref name="TDelegate" />。- 或 -<see cref="P:System.Linq.Expressions.Expression.Type" /> 属性的元素的 <paramref name="parameters" /> 不能从相应的参数类型的类型分配 <paramref name="TDelegate" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>创建一个在编译时委托类型已知的 <see cref="T:System.Linq.Expressions.Expression`1" />。</summary>
      <param name="body">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="name">lambda 的名称。 用于生成调试信息。</param>
      <param name="tailCall">一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。</param>
      <param name="parameters">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象。</param>
      <typeparam name="TDelegate">委托类型。</typeparam>
      <returns>一个 <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>创建一个在编译时委托类型已知的 <see cref="T:System.Linq.Expressions.Expression`1" />。</summary>
      <param name="body">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="name">lambda 的名称。 用于生成调试信息。</param>
      <param name="parameters">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象。</param>
      <typeparam name="TDelegate">委托类型。</typeparam>
      <returns>一个 <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示按位左移运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">左移位运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示按位左移运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null 和它表示返回的方法 void, ，不是 static (Shared 在 Visual Basic 中)，否则不会正好两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 null 和 left shift 运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示按位左移赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示按位左移赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个表示按位左移赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">要将 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示“小于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">"小于"运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>创建一个表示“小于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="liftToNull">若要将 true 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 true；若要将 false 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 false。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null 和它表示返回的方法 void, ，不是 static (Shared 在 Visual Basic 中)，否则不会正好两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 null 和"小于"运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示“小于或等于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">"小于或等于"运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>创建一个表示“小于或等于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="liftToNull">若要将 true 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 true；若要将 false 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 false。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null 和它表示返回的方法 void, ，不是 static (Shared 在 Visual Basic 中)，否则不会正好两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 null 和"小于或等于"运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>创建一个其成员为字段或属性的 <see cref="T:System.Linq.Expressions.MemberListBinding" />。</summary>
      <param name="member">一个 <see cref="T:System.Reflection.MemberInfo" />，表示要将 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性设置为与其相等的字段或属性。</param>
      <param name="initializers">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ElementInit" /> 集合的 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 对象。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberListBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />，并且其 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 和 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 为 null。- 或 -一个或多个元素 <paramref name="initializers" /> 是 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不表示字段或属性。- 或 -<see cref="P:System.Reflection.FieldInfo.FieldType" /> 或 <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> 的字段或属性， <paramref name="member" /> 表示不实现 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])">
      <summary>创建一个其成员为字段或属性的 <see cref="T:System.Linq.Expressions.MemberListBinding" />。</summary>
      <param name="member">一个 <see cref="T:System.Reflection.MemberInfo" />，表示要将 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性设置为与其相等的字段或属性。</param>
      <param name="initializers">用于填充 <see cref="T:System.Linq.Expressions.ElementInit" /> 集合的 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 对象的数组。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberListBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />，并且其 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 和 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 为 null。- 或 -一个或多个元素 <paramref name="initializers" /> 是 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不表示字段或属性。- 或 -<see cref="P:System.Reflection.FieldInfo.FieldType" /> 或 <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> 的字段或属性， <paramref name="member" /> 表示不实现 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>基于指定的属性访问器方法创建一个 <see cref="T:System.Linq.Expressions.MemberListBinding" />。</summary>
      <param name="propertyAccessor">一个表示属性访问器方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="initializers">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ElementInit" /> 集合的 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 对象。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberListBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />，<see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性设置为表示在 <see cref="T:System.Reflection.MemberInfo" /> 中访问的属性的 <paramref name="propertyAccessor" />，并且 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 填充了 <paramref name="initializers" /> 的元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 为 null。- 或 -一个或多个元素 <paramref name="initializers" /> 是 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> 不表示属性访问器方法。- 或 -<see cref="P:System.Reflection.PropertyInfo.PropertyType" /> 表示的方法的属性 <paramref name="propertyAccessor" /> 访问不实现 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])">
      <summary>基于指定的属性访问器方法创建一个 <see cref="T:System.Linq.Expressions.MemberListBinding" /> 对象。</summary>
      <param name="propertyAccessor">一个表示属性访问器方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="initializers">用于填充 <see cref="T:System.Linq.Expressions.ElementInit" /> 集合的 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 对象的数组。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberListBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />，<see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性设置为表示在 <see cref="T:System.Reflection.MemberInfo" /> 中访问的属性的 <paramref name="propertyAccessor" />，并且 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 填充了 <paramref name="initializers" /> 的元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 为 null。- 或 -一个或多个元素 <paramref name="initializers" /> 是 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> 不表示属性访问器方法。- 或 -<see cref="P:System.Reflection.PropertyInfo.PropertyType" /> 表示的方法的属性 <paramref name="propertyAccessor" /> 访问不实现 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>创建一个使用指定 <see cref="T:System.Linq.Expressions.ListInitExpression" /> 对象来初始化集合的 <see cref="T:System.Linq.Expressions.ElementInit" />。</summary>
      <param name="newExpression">要将 <see cref="T:System.Linq.Expressions.NewExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
      <param name="initializers">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ElementInit" /> 集合的 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 对象。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，并且其 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 和 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 为 null。- 或 -一个或多个元素 <paramref name="initializers" /> 是 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.类型未实现 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个使用名为“Add”的方法将元素添加到集合中的 <see cref="T:System.Linq.Expressions.ListInitExpression" />。</summary>
      <param name="newExpression">要将 <see cref="T:System.Linq.Expressions.NewExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
      <param name="initializers">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 对象。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，并且其 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 为 null。- 或 -一个或多个元素 <paramref name="initializers" /> 是 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.类型未实现 <see cref="T:System.Collections.IEnumerable" />。</exception>
      <exception cref="T:System.InvalidOperationException">没有名为"Add"（不区分大小写） 中声明的实例方法 <paramref name="newExpression" />。类型或其基类型。- 或 -上的 add 方法 <paramref name="newExpression" />。类型或其基类型不带一个参数。- 或 -表示的类型 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性的第一个元素 <paramref name="initializers" /> 不能赋给上的 add 方法的参数类型 <paramref name="newExpression" />。类型或其基类型。- 或 -上是否存在名为"Add"（不区分大小写） 的多个参数兼容方法 <paramref name="newExpression" />。类型和/或其基类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])">
      <summary>创建一个使用指定 <see cref="T:System.Linq.Expressions.ListInitExpression" /> 对象来初始化集合的 <see cref="T:System.Linq.Expressions.ElementInit" />。</summary>
      <param name="newExpression">要将 <see cref="T:System.Linq.Expressions.NewExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
      <param name="initializers">用于填充 <see cref="T:System.Linq.Expressions.ElementInit" /> 集合的 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 对象的数组。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，并且其 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 和 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 为 null。- 或 -一个或多个元素 <paramref name="initializers" /> 是 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.类型未实现 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
      <summary>创建一个使用名为“Add”的方法将元素添加到集合中的 <see cref="T:System.Linq.Expressions.ListInitExpression" />。</summary>
      <param name="newExpression">要将 <see cref="T:System.Linq.Expressions.NewExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
      <param name="initializers">用于填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 对象的数组。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，并且其 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 为 null。- 或 -一个或多个元素 <paramref name="initializers" /> 是 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.类型未实现 <see cref="T:System.Collections.IEnumerable" />。</exception>
      <exception cref="T:System.InvalidOperationException">没有名为"Add"（不区分大小写） 中声明的实例方法 <paramref name="newExpression" />。类型或其基类型。- 或 -上的 add 方法 <paramref name="newExpression" />。类型或其基类型不带一个参数。- 或 -表示的类型 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性的第一个元素 <paramref name="initializers" /> 不能赋给上的 add 方法的参数类型 <paramref name="newExpression" />。类型或其基类型。- 或 -上是否存在名为"Add"（不区分大小写） 的多个参数兼容方法 <paramref name="newExpression" />。类型和/或其基类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个使用指定方法将元素添加到集合中的 <see cref="T:System.Linq.Expressions.ListInitExpression" />。</summary>
      <param name="newExpression">要将 <see cref="T:System.Linq.Expressions.NewExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
      <param name="addMethod">一个 <see cref="T:System.Reflection.MethodInfo" />，表示名为“Add”（不区分大小写），用于将元素添加到集合的实例方法。</param>
      <param name="initializers">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 对象。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，并且其 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 为 null。- 或 -一个或多个元素 <paramref name="initializers" /> 是 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.类型未实现 <see cref="T:System.Collections.IEnumerable" />。- 或 -<paramref name="addMethod" /> 不是 null 并不表示实例方法正好带一个参数的名为"Add"（不区分大小写）。- 或 -<paramref name="addMethod" /> 不是 null 所表示的类型和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 的一个或多个元素的属性 <paramref name="initializers" /> 不能赋给该方法的参数类型， <paramref name="addMethod" /> 表示。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" /> 是 null 上是否存在名为"Add"使用一个兼容的类型参数没有实例方法和 <paramref name="newExpression" />。类型或其基类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>创建一个使用指定方法将元素添加到集合中的 <see cref="T:System.Linq.Expressions.ListInitExpression" />。</summary>
      <param name="newExpression">要将 <see cref="T:System.Linq.Expressions.NewExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
      <param name="addMethod">一个 <see cref="T:System.Reflection.MethodInfo" />，表示带一个参数，用于将元素添加到集合中的实例方法。</param>
      <param name="initializers">用于填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 对象的数组。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，并且其 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 为 null。- 或 -一个或多个元素 <paramref name="initializers" /> 是 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.类型未实现 <see cref="T:System.Collections.IEnumerable" />。- 或 -<paramref name="addMethod" /> 不是 null 并不表示实例方法正好带一个参数的名为"Add"（不区分大小写）。- 或 -<paramref name="addMethod" /> 不是 null 所表示的类型和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 的一个或多个元素的属性 <paramref name="initializers" /> 不能赋给该方法的参数类型， <paramref name="addMethod" /> 表示。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" /> 是 null 上是否存在名为"Add"使用一个兼容的类型参数没有实例方法和 <paramref name="newExpression" />。类型或其基类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)">
      <summary>创建具有给定主体的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</summary>
      <param name="body">循环体。</param>
      <returns>创建的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)">
      <summary>创建具有给定主体和中断目标的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</summary>
      <param name="body">循环体。</param>
      <param name="break">循环体使用的中断目标。</param>
      <returns>创建的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)">
      <summary>创建具有给定主体的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</summary>
      <param name="body">循环体。</param>
      <param name="break">循环体使用的中断目标。</param>
      <param name="continue">循环体使用的继续目标。</param>
      <returns>创建的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>在给定左操作数和右操作数的情况下，通过调用适当的工厂方法来创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="binaryType">指定二元运算类型的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
      <param name="left">一个表示左操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">一个表示右操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns>通过调用适当的工厂方法生成的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> 与二进制表达式节点不对应。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>在给定左操作数、右操作数和实现方法的情况下，通过调用适当的工厂方法来创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="binaryType">指定二元运算类型的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
      <param name="left">一个表示左操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">一个表示右操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull">若要将 true 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 true；若要将 false 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 false。</param>
      <param name="method">一个指定实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns>通过调用适当的工厂方法生成的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> 与二进制表达式节点不对应。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>在给定左操作数、右操作数、实现方法和类型转换函数的情况下，通过调用适当的工厂方法来创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="binaryType">指定二元运算类型的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
      <param name="left">一个表示左操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">一个表示右操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull">若要将 true 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 true；若要将 false 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 false。</param>
      <param name="method">一个指定实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">一个表示类型转换函数的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。 只有在 <paramref name="binaryType" /> 为 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> 或复合赋值时，才使用此参数。</param>
      <returns>通过调用适当的工厂方法生成的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> 与二进制表达式节点不对应。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示具有指定元素的 catch 语句的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</summary>
      <param name="type">此 <see cref="P:System.Linq.Expressions.Expression.Type" /> 将处理的 <see cref="T:System.Exception" /> 的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</param>
      <param name="variable">一个 <see cref="T:System.Linq.Expressions.ParameterExpression" />，它表示对此处理程序捕获的 <see cref="T:System.Exception" /> 对象的引用。</param>
      <param name="body">catch 语句的主体。</param>
      <param name="filter">
        <see cref="T:System.Exception" /> 筛选器的主体。</param>
      <returns>创建的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。</summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。</param>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="arguments">动态操作的参数。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和一个参数绑定的动态操作。</summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。</param>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="arg0">动态操作的参数。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和两个参数绑定的动态操作。</summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。</param>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="arg0">动态操作的第一个参数。</param>
      <param name="arg1">动态操作的第二个参数。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和三个参数绑定的动态操作。</summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。</param>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="arg0">动态操作的第一个参数。</param>
      <param name="arg1">动态操作的第二个参数。</param>
      <param name="arg2">动态操作的第三个参数。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和四个参数绑定的动态操作。</summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。</param>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="arg0">动态操作的第一个参数。</param>
      <param name="arg1">动态操作的第二个参数。</param>
      <param name="arg2">动态操作的第三个参数。</param>
      <param name="arg3">动态操作的第四个参数。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。</summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。</param>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="arguments">动态操作的参数。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，它表示指定的 <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> 的跳转。 也可以指定在跳转时传递给标签的值。</summary>
      <param name="kind">
        <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> 的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="value">将在跳转时传递给关联标签的值。</param>
      <param name="type">要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 <paramref name="kind" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <paramref name="type" />，此外还有一个在跳转时将传递给目标标签的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.IndexExpression" />，它表示访问对象中的索引属性。</summary>
      <param name="instance">属性所属的对象。 如果属性为 static（在 Visual Basic 中为 shared），则它应为 null。</param>
      <param name="indexer">一个 <see cref="T:System.Linq.Expressions.Expression" />，它表示要编制索引的属性。</param>
      <param name="arguments">一个 IEnumerable&lt;Expression&gt;（在 Visual Basic 中为 IEnumerable (Of Expression)），其中包含将用于为属性编制索引的参数。</param>
      <returns>创建的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
      <summary>创建一个表示访问字段或属性的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <param name="expression">一个表示成员所属对象的 <see cref="T:System.Linq.Expressions.Expression" />。 对于静态成员，这可以为 null。</param>
      <param name="member">描述要访问的字段或属性的 <see cref="T:System.Reflection.MemberInfo" />。</param>
      <returns>通过调用适当的工厂方法生成的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不表示字段或属性。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})">
      <summary>创建一个表示具有指定元素的 try 块的 <see cref="T:System.Linq.Expressions.TryExpression" />。</summary>
      <param name="type">try 表达式的结果类型。 如果为 null，则 bodh 和所有处理程序必须具有相同的类型。</param>
      <param name="body">try 块的主体。</param>
      <param name="finally">finally 块的主体。 如果 try 块不具有关联的 finally 块，则传递 null。</param>
      <param name="fault">fault 块的主体。 如果 try 块不具有关联的 fault 块，则传递 null。</param>
      <param name="handlers">表示要与 try 块关联的 catch 语句的 <see cref="T:System.Linq.Expressions.CatchBlock" /> 的集合。</param>
      <returns>创建的 <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)">
      <summary>在给定操作数的情况下，通过调用适当的工厂方法来创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <param name="unaryType">指定一元运算类型的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
      <param name="operand">一个表示操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">指定转换的目标类型的 <see cref="T:System.Type" />（如果不适用，则传递 null）。</param>
      <returns>通过调用适当的工厂方法生成的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operand" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unaryType" /> 不对应于一元表达式节点。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>在给定操作数和实现方法的情况下，通过调用适当的工厂方法来创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <param name="unaryType">指定一元运算类型的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
      <param name="operand">一个表示操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">指定转换的目标类型的 <see cref="T:System.Type" />（如果不适用，则传递 null）。</param>
      <param name="method">表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns>通过调用适当的工厂方法生成的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operand" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unaryType" /> 不对应于一元表达式节点。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>创建一个表示递归初始化某个字段或属性的成员的 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />。</summary>
      <param name="member">要将 <see cref="T:System.Reflection.MemberInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />。</param>
      <param name="bindings">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.MemberBinding" /> 集合的 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 对象。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />，并且其 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 和 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 或 <paramref name="bindings" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不表示字段或属性。- 或 -<see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性的元素的 <paramref name="bindings" /> 不表示字段或属性的类型的成员， <paramref name="member" /> 表示。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>创建一个表示递归初始化某个字段或属性的成员的 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />。</summary>
      <param name="member">要将 <see cref="T:System.Reflection.MemberInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />。</param>
      <param name="bindings">用于填充 <see cref="T:System.Linq.Expressions.MemberBinding" /> 集合的 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 对象的数组。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />，并且其 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 和 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 或 <paramref name="bindings" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不表示字段或属性。- 或 -<see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性的元素的 <paramref name="bindings" /> 不表示字段或属性的类型的成员， <paramref name="member" /> 表示。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>使用属性访问器方法创建一个表示对所访问的成员的成员进行递归初始化的 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />。</summary>
      <param name="propertyAccessor">表示属性访问器方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="bindings">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.MemberBinding" /> 集合的 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 对象。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />，<see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性设置为表示在 <see cref="T:System.Reflection.PropertyInfo" /> 中访问的属性的 <paramref name="propertyAccessor" />，并且 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 或 <paramref name="bindings" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> 不表示属性访问器方法。- 或 -<see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性的元素的 <paramref name="bindings" /> 不表示的方法访问的属性类型的成员， <paramref name="propertyAccessor" /> 表示。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>使用属性访问器方法创建一个表示对所访问的成员的成员进行递归初始化的 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />。</summary>
      <param name="propertyAccessor">表示属性访问器方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="bindings">用于填充 <see cref="T:System.Linq.Expressions.MemberBinding" /> 集合的 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 对象的数组。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />，<see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性设置为表示在 <see cref="T:System.Reflection.PropertyInfo" /> 中访问的属性的 <paramref name="propertyAccessor" />，并且 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 或 <paramref name="bindings" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> 不表示属性访问器方法。- 或 -<see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性的元素的 <paramref name="bindings" /> 不表示的方法访问的属性类型的成员， <paramref name="propertyAccessor" /> 表示。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>表示一个表达式，该表达式创建新对象并初始化该对象的一个属性。</summary>
      <param name="newExpression">要将 <see cref="T:System.Linq.Expressions.NewExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />。</param>
      <param name="bindings">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.MemberBinding" /> 集合的 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 对象。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" />，并且其 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 和 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="bindings" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性的元素的 <paramref name="bindings" /> 不表示类型的成员， <paramref name="newExpression" />。表示类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.MemberInitExpression" />。</summary>
      <param name="newExpression">要将 <see cref="T:System.Linq.Expressions.NewExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />。</param>
      <param name="bindings">用于填充 <see cref="T:System.Linq.Expressions.MemberBinding" /> 集合的 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 对象的数组。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" />，并且其 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 和 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="bindings" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性的元素的 <paramref name="bindings" /> 不表示类型的成员， <paramref name="newExpression" />。表示类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示算术余数运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">取模运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示算术余数运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null 和它表示返回的方法 void, ，不是 static (Shared 在 Visual Basic 中)，否则不会正好两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 null 和取模运算符没有为定义 <paramref name="left" />。类型和 <paramref name="right" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示余数赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示余数赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个表示余数赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">要将 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示不进行溢出检查的算术乘法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">乘法运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示不进行溢出检查的算术乘法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null 和它表示返回的方法 void, ，不是 static (Shared 在 Visual Basic 中)，否则不会正好两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 null 和乘法运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示不进行溢出检查的乘法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示不进行溢出检查的乘法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个表示不进行溢出检查的乘法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">要将 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示进行溢出检查的乘法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示进行溢出检查的乘法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个表示进行溢出检查的乘法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">要将 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示进行溢出检查的算术乘法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">乘法运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示进行溢出检查的算术乘法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null 和它表示返回的方法 void, ，不是 static (Shared 在 Visual Basic 中)，否则不会正好两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 null 和乘法运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
      <summary>创建一个表示算术求反运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <param name="expression">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Negate" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为定义一元减运算符 <paramref name="expression" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示算术求反运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <param name="expression">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Negate" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null 和它表示返回的方法 void, ，不是 static (Shared 在 Visual Basic 中)，或者不带且只有一个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 null 并没有为定义一元减运算符 <paramref name="expression" />。类型。- 或 -<paramref name="expression" />.类型 （或其对应的非可空类型的为 null 的值类型时） 不能分配给所表示的方法的参数类型 <paramref name="method" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
      <summary>创建一个表示进行溢出检查的算术求反运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <param name="expression">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为定义一元减运算符 <paramref name="expression" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示进行溢出检查的算术求反运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。 可指定实现方法。</summary>
      <param name="expression">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null 和它表示返回的方法 void, ，不是 static (Shared 在 Visual Basic 中)，或者不带且只有一个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 null 并没有为定义一元减运算符 <paramref name="expression" />。类型。- 或 -<paramref name="expression" />.类型 （或其对应的非可空类型的为 null 的值类型时） 不能分配给所表示的方法的参数类型 <paramref name="method" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)">
      <summary>创建一个表示调用不带参数的指定构造函数的 <see cref="T:System.Linq.Expressions.NewExpression" />。</summary>
      <param name="constructor">要将 <see cref="T:System.Reflection.ConstructorInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.NewExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.New" />，并且其 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">构造函数， <paramref name="constructor" /> 表示具有至少一个参数。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个表示调用带指定参数的指定构造函数的 <see cref="T:System.Linq.Expressions.NewExpression" />。</summary>
      <param name="constructor">要将 <see cref="T:System.Reflection.ConstructorInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</param>
      <param name="arguments">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 对象。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.NewExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.New" />，并且其 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 和 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> 为 null。- 或 -一个元素 <paramref name="arguments" /> 是 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 参数不包含的元素数目的构造函数参数的数量相同， <paramref name="constructor" /> 表示。- 或 -<see cref="P:System.Linq.Expressions.Expression.Type" /> 属性的元素的 <paramref name="arguments" /> 不能分配给对应参数的构造函数的类型， <paramref name="constructor" /> 表示。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
      <summary>创建一个表示调用带指定参数的指定构造函数的 <see cref="T:System.Linq.Expressions.NewExpression" />。 其中指定了访问构造函数初始化的字段的成员。</summary>
      <param name="constructor">要将 <see cref="T:System.Reflection.ConstructorInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</param>
      <param name="arguments">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 对象。</param>
      <param name="members">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Reflection.MemberInfo" /> 集合的 <see cref="P:System.Linq.Expressions.NewExpression.Members" /> 对象。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.NewExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.New" />，并且其 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />、<see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 和 <see cref="P:System.Linq.Expressions.NewExpression.Members" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> 为 null。- 或 -一个元素 <paramref name="arguments" /> 是 null。- 或 -一个元素 <paramref name="members" /> 是 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 参数不包含的元素数目的构造函数参数的数量相同， <paramref name="constructor" /> 表示。- 或 -<see cref="P:System.Linq.Expressions.Expression.Type" /> 属性的元素的 <paramref name="arguments" /> 不能分配给对应参数的构造函数的类型， <paramref name="constructor" /> 表示。- 或 -<paramref name="members" /> 参数不具有相同数量的元素作为 <paramref name="arguments" />。- 或 -一个元素 <paramref name="arguments" /> 具有 <see cref="P:System.Linq.Expressions.Expression.Type" /> 表示不能分配给成员的对应元素表示的类型的类型的属性 <paramref name="members" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
      <summary>创建一个表示调用带指定参数的指定构造函数的 <see cref="T:System.Linq.Expressions.NewExpression" />。 将访问构造函数初始化字段的成员指定为数组。</summary>
      <param name="constructor">要将 <see cref="T:System.Reflection.ConstructorInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</param>
      <param name="arguments">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 对象。</param>
      <param name="members">用于填充 <see cref="T:System.Reflection.MemberInfo" /> 集合的 <see cref="P:System.Linq.Expressions.NewExpression.Members" /> 对象的数组。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.NewExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.New" />，并且其 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />、<see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 和 <see cref="P:System.Linq.Expressions.NewExpression.Members" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> 为 null。- 或 -一个元素 <paramref name="arguments" /> 是 null。- 或 -一个元素 <paramref name="members" /> 是 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 参数不包含的元素数目的构造函数参数的数量相同， <paramref name="constructor" /> 表示。- 或 -<see cref="P:System.Linq.Expressions.Expression.Type" /> 属性的元素的 <paramref name="arguments" /> 不能分配给对应参数的构造函数的类型， <paramref name="constructor" /> 表示。- 或 -<paramref name="members" /> 参数不具有相同数量的元素作为 <paramref name="arguments" />。- 或 -一个元素 <paramref name="arguments" /> 具有 <see cref="P:System.Linq.Expressions.Expression.Type" /> 表示不能分配给成员的对应元素表示的类型的类型的属性 <paramref name="members" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
      <summary>创建一个表示调用带指定参数的指定构造函数的 <see cref="T:System.Linq.Expressions.NewExpression" />。</summary>
      <param name="constructor">要将 <see cref="T:System.Reflection.ConstructorInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</param>
      <param name="arguments">用于填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 对象的数组。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.NewExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.New" />，并且其 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 和 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> 为 null。- 或 -一个元素 <paramref name="arguments" /> 是 null。</exception>
      <exception cref="T:System.ArgumentException">长度 <paramref name="arguments" /> 不匹配的构造函数的参数的数目， <paramref name="constructor" /> 表示。- 或 -<see cref="P:System.Linq.Expressions.Expression.Type" /> 属性的元素的 <paramref name="arguments" /> 不能分配给对应参数的构造函数的类型， <paramref name="constructor" /> 表示。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Type)">
      <summary>创建一个表示调用指定类型的无参数构造函数的 <see cref="T:System.Linq.Expressions.NewExpression" />。</summary>
      <param name="type">一个具有不带参数的构造函数的 <see cref="T:System.Type" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.NewExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.New" />，并且其 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 属性设置为 <see cref="T:System.Reflection.ConstructorInfo" />，这表示不带指定类型的参数的构造函数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">该类型的 <paramref name="type" /> 表示没有无参数构造函数。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个表示创建具有指定秩的数组的 <see cref="T:System.Linq.Expressions.NewArrayExpression" />。</summary>
      <param name="type">一个表示数组的元素类型的 <see cref="T:System.Type" />。</param>
      <param name="bounds">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 对象。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.NewArrayExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />，并且其 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或 <paramref name="bounds" /> 为 null。- 或 -一个元素 <paramref name="bounds" /> 是 null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性的元素的 <paramref name="bounds" /> 不表示整数类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])">
      <summary>创建一个表示创建具有指定秩的数组的 <see cref="T:System.Linq.Expressions.NewArrayExpression" />。</summary>
      <param name="type">一个表示数组的元素类型的 <see cref="T:System.Type" />。</param>
      <param name="bounds">用于填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 对象的数组。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.NewArrayExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />，并且其 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或 <paramref name="bounds" /> 为 null。- 或 -一个元素 <paramref name="bounds" /> 是 null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性的元素的 <paramref name="bounds" /> 不表示整数类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个表示创建一维数组并使用元素列表初始化该数组的 <see cref="T:System.Linq.Expressions.NewArrayExpression" />。</summary>
      <param name="type">一个表示数组的元素类型的 <see cref="T:System.Type" />。</param>
      <param name="initializers">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 对象。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.NewArrayExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />，并且其 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或 <paramref name="initializers" /> 为 null。- 或 -一个元素 <paramref name="initializers" /> 是 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性的元素的 <paramref name="initializers" /> 表示不能赋给该类型的类型， <paramref name="type" /> 表示。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
      <summary>创建一个表示创建一维数组并使用元素列表初始化该数组的 <see cref="T:System.Linq.Expressions.NewArrayExpression" />。</summary>
      <param name="type">一个表示数组的元素类型的 <see cref="T:System.Type" />。</param>
      <param name="initializers">用于填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 对象的数组。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.NewArrayExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />，并且其 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或 <paramref name="initializers" /> 为 null。- 或 -一个元素 <paramref name="initializers" /> 是 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性的元素的 <paramref name="initializers" /> 表示不能赋给该类型的类型 <paramref name="type" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
      <summary>创建一个表示按位求补运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <param name="expression">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Not" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为定义一元 not 运算符 <paramref name="expression" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示按位求补运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。 可指定实现方法。</summary>
      <param name="expression">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Not" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null 和它表示返回的方法 void, ，不是 static (Shared 在 Visual Basic 中)，或者不带且只有一个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 null 并没有为定义一元 not 运算符 <paramref name="expression" />。类型。- 或 -<paramref name="expression" />.类型 （或其对应的非可空类型的为 null 的值类型时） 不能分配给所表示的方法的参数类型 <paramref name="method" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示不相等比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">不等运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>创建一个表示不相等比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="liftToNull">若要将 true 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 true；若要将 false 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 false。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null 和它表示返回的方法 void, ，不是 static (Shared 在 Visual Basic 中)，否则不会正好两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 null 和不相等运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)">
      <summary>返回表示一的补数的表达式。</summary>
      <param name="expression">一个 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>返回表示一的补数的表达式。</summary>
      <param name="expression">一个 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示按位 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 运算的 OR。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Or" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">按位 OR 没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示按位 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 运算的 OR。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Or" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null 和它表示返回的方法 void, ，不是 static (Shared 在 Visual Basic 中)，否则不会正好两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 null 和按位 OR 没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示按位 OR 赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示按位 OR 赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个表示按位 OR 赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">要将 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，它表示仅在第一个操作数的计算结果为 OR 时才计算第二个操作数的条件 false 运算。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">按位 OR 没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。- 或 -<paramref name="left" />.类型和 <paramref name="right" />。类型不是同一个布尔值类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，它表示仅在第一个操作数的计算结果为 OR 时才计算第二个操作数的条件 false 运算。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null 和它表示返回的方法 void, ，不是 static (Shared 在 Visual Basic 中)，否则不会正好两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 null 和按位 OR 没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。- 或 -<paramref name="method" /> 是 null 和 <paramref name="left" />。类型和 <paramref name="right" />。类型不是同一个布尔值类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 节点，该节点可用于标识表达式树中的参数或变量。</summary>
      <param name="type">参数或变量的类型。</param>
      <returns>具有指定的名称和类型的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 节点。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 节点，该节点可用于标识表达式树中的参数或变量。</summary>
      <param name="type">参数或变量的类型。</param>
      <param name="name">仅用于调试或打印目的的参数或变量的名称。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.ParameterExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Parameter" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 和 <see cref="P:System.Linq.Expressions.ParameterExpression.Name" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示将原始表达式递减 1 之后再进行表达式赋值。</summary>
      <param name="expression">要进行运算的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns>一个表示结果表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示将原始表达式递减 1 之后再进行表达式赋值。</summary>
      <param name="expression">要进行运算的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns>一个表示结果表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示将原始表达式递增 1 之后再进行表达式赋值。</summary>
      <param name="expression">要进行运算的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns>一个表示结果表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示将原始表达式递增 1 之后再进行表达式赋值。</summary>
      <param name="expression">要进行运算的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns>一个表示结果表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示对数进行幂运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Power" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为定义求幂运算符 <paramref name="left" />。类型和 <paramref name="right" />。类型。- 或 -<paramref name="left" />.类型和/或 <paramref name="right" />。类型不是 <see cref="T:System.Double" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示对数进行幂运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Power" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null 和它表示返回的方法 void, ，不是 static (Shared 在 Visual Basic 中)，否则不会正好两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 null 和求幂运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。- 或 -<paramref name="method" /> 是 null 和 <paramref name="left" />。类型和/或 <paramref name="right" />。类型不是 <see cref="T:System.Double" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，它表示对表达式求幂并将结果赋回给表达式。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，它表示对表达式求幂并将结果赋回给表达式。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，它表示对表达式求幂并将结果赋回给表达式。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">要将 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它将表达式递减 1 并将结果赋回给表达式。</summary>
      <param name="expression">要进行运算的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns>一个表示结果表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它将表达式递减 1 并将结果赋回给表达式。</summary>
      <param name="expression">要进行运算的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns>一个表示结果表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它将表达式递增 1 并将结果赋回给表达式。</summary>
      <param name="expression">要进行运算的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns>一个表示结果表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它将表达式递增 1 并将结果赋回给表达式。</summary>
      <param name="expression">要进行运算的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns>一个表示结果表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>使用属性访问器方法创建一个表示访问属性的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <param name="expression">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />。 对于静态属性，这可以为 null。</param>
      <param name="propertyAccessor">表示属性访问器方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />，<see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 属性设置为 <paramref name="expression" />，并且 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 属性设置为表示在 <see cref="T:System.Reflection.PropertyInfo" /> 中访问的属性的 <paramref name="propertyAccessor" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 为 null。- 或 -该方法的 <paramref name="propertyAccessor" /> 表示不 static (Shared 在 Visual Basic 中) 和 <paramref name="expression" /> 是 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.类型不能分配给所表示的方法的声明类型 <paramref name="propertyAccessor" />。- 或 -该方法的 <paramref name="propertyAccessor" /> 表示不是属性访问器方法。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)">
      <summary>创建一个表示访问属性的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <param name="expression">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />。 对于静态属性，这可以为 null。</param>
      <param name="property">要将 <see cref="T:System.Reflection.PropertyInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />，并且其 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 和 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> 为 null。- 或 -该属性， <paramref name="property" /> 表示不 static (Shared 在 Visual Basic 中) 和 <paramref name="expression" /> 是 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.类型不能赋给该属性的声明类型， <paramref name="property" /> 表示。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.IndexExpression" />，它表示对索引属性的访问。</summary>
      <param name="instance">属性所属的对象。 如果该属性为 static/shared，则此对象必须为 null。</param>
      <param name="indexer">表示要编制索引的属性的 <see cref="T:System.Reflection.PropertyInfo" />。</param>
      <param name="arguments">用于为属性编制索引的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns>创建的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.IndexExpression" />，它表示对索引属性的访问。</summary>
      <param name="instance">属性所属的对象。 如果该属性为 static/shared，则此对象必须为 null。</param>
      <param name="indexer">表示要编制索引的属性的 <see cref="T:System.Reflection.PropertyInfo" />。</param>
      <param name="arguments">用于为属性编制索引的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的数组。</param>
      <returns>创建的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)">
      <summary>创建一个表示访问属性的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <param name="expression">一个 <see cref="T:System.Linq.Expressions.Expression" />，其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 包含一个名为 <paramref name="propertyName" /> 的属性。 对于静态属性，这可以为 null。</param>
      <param name="propertyName">要访问的属性的名称。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />，<see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 属性设置为 <paramref name="expression" />，并且 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 属性设置为由 <see cref="T:System.Reflection.PropertyInfo" /> 表示的属性的 <paramref name="propertyName" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="propertyName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有名为属性 <paramref name="propertyName" /> 中定义 <paramref name="expression" />。类型或其基类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.IndexExpression" />，它表示对索引属性的访问。</summary>
      <param name="instance">属性所属的对象。 如果该属性为 static/shared，则此对象必须为 null。</param>
      <param name="propertyName">索引器的名称。</param>
      <param name="arguments">用于为属性编制索引的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的数组。</param>
      <returns>创建的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>创建一个访问属性的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <param name="expression">属性的包含对象。 对于静态属性，这可以为 null。</param>
      <param name="type">包含属性的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="propertyName">要访问的属性。</param>
      <returns>创建的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
      <summary>创建一个表示访问属性或字段的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <param name="expression">一个 <see cref="T:System.Linq.Expressions.Expression" />，其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 包含一个名为 <paramref name="propertyOrFieldName" /> 的属性或字段。 对于静态成员，这可以为 null。</param>
      <param name="propertyOrFieldName">要访问的属性或字段的名称。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />，<see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 属性设置为 <paramref name="expression" />，并且 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 属性设置为表示 <see cref="T:System.Reflection.PropertyInfo" /> 所表示的属性或字段的 <see cref="T:System.Reflection.FieldInfo" /> 或 <paramref name="propertyOrFieldName" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="propertyOrFieldName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有属性或字段命名为 <paramref name="propertyOrFieldName" /> 中定义 <paramref name="expression" />。类型或其基类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)">
      <summary>创建一个表示具有类型 <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的常量值的表达式的 <see cref="T:System.Linq.Expressions.Expression" />。</summary>
      <param name="expression">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Quote" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Reduce">
      <summary>将此节点简化为更简单的表达式。 如果 CanReduce 返回 true，则它应返回有效的表达式。 此方法可以返回本身必须简化的另一个节点。</summary>
      <returns>已简化的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceAndCheck">
      <summary>将此节点简化为更简单的表达式。 如果 CanReduce 返回 true，则它应返回有效的表达式。 此方法可以返回本身必须简化的另一个节点。</summary>
      <returns>已简化的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceExtensions">
      <summary>将表达式简化为已知节点类型（即非 Extension 节点）或仅在此类型为已知类型时返回表达式。</summary>
      <returns>已简化的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示引用相等比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示引用不相等比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示重新引发异常。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示重新引发异常。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow(System.Type)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示重新引发具有给定类型的异常。</summary>
      <param name="type">表达式的新 <see cref="T:System.Type" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示重新引发异常。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)">
      <summary>创建一个表示 return 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Return，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，此外还有一个在跳转时将传递给目标标签的 null 值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>创建一个表示 return 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。 可以指定在跳转时传递给标签的值。</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="value">将在跳转时传递给关联标签的值。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Continue，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，此外还有一个在跳转时将传递给目标标签的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>创建一个表示具有指定类型的 return 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。 可以指定在跳转时传递给标签的值。</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="value">将在跳转时传递给关联标签的值。</param>
      <param name="type">要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Continue，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <paramref name="type" />，此外还有一个在跳转时将传递给目标标签的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>创建一个表示具有指定类型的 return 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="type">要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Return，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <paramref name="type" />，此外还有一个在跳转时将传递给目标标签的 null 值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示按位右移运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">右移位运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示按位右移运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null 和它表示返回的方法 void, ，不是 static (Shared 在 Visual Basic 中)，否则不会正好两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 null 和右移位运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示按位右移赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示按位右移赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个表示按位右移赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">要将 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>创建 <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 的实例。</summary>
      <param name="variables">用于填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 对象的集合。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 的实例，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" />，并且其 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 属性设置为指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])">
      <summary>创建 <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 的实例。</summary>
      <param name="variables">用于填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 对象的数组。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 的实例，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" />，并且其 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 属性设置为指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示不进行溢出检查的算术减法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">减法运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示不进行溢出检查的算术减法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null 和它表示返回的方法 void, ，不是 static (Shared 在 Visual Basic 中)，否则不会正好两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 null 和减法运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示不进行溢出检查的减法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示不进行溢出检查的减法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个表示不进行溢出检查的减法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">要将 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示进行溢出检查的减法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示进行溢出检查的减法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个表示进行溢出检查的减法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">要将 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示进行溢出检查的算术减法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">减法运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示进行溢出检查的算术减法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null 和它表示返回的方法 void, ，不是 static (Shared 在 Visual Basic 中)，否则不会正好两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 null 和减法运算符没有为 <paramref name="left" />。类型和 <paramref name="right" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>创建一个表示具有默认分支的 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 语句的 switch。</summary>
      <param name="switchValue">要针对每个分支测试的值。</param>
      <param name="defaultBody">
        <paramref name="switchValue" /> 不匹配任何分支时，该 switch 的结果。</param>
      <param name="cases">此 switch 表达式的分支集。</param>
      <returns>创建的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>创建一个表示具有默认分支的 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 语句的 switch。</summary>
      <param name="switchValue">要针对每个分支测试的值。</param>
      <param name="defaultBody">
        <paramref name="switchValue" /> 不匹配任何分支时，该 switch 的结果。</param>
      <param name="comparison">要使用的相等比较方法。</param>
      <param name="cases">此 switch 表达式的分支集。</param>
      <returns>创建的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>创建一个表示具有默认分支的 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 语句的 switch。</summary>
      <param name="switchValue">要针对每个分支测试的值。</param>
      <param name="defaultBody">
        <paramref name="switchValue" /> 不匹配任何分支时，该 switch 的结果。</param>
      <param name="comparison">要使用的相等比较方法。</param>
      <param name="cases">此 switch 表达式的分支集。</param>
      <returns>创建的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>创建一个表示不带默认分支的 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 语句的 switch。</summary>
      <param name="switchValue">要针对每个分支测试的值。</param>
      <param name="cases">此 switch 表达式的分支集。</param>
      <returns>创建的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>创建一个表示具有默认分支的 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 语句的 switch。</summary>
      <param name="type">switch 的结果类型。</param>
      <param name="switchValue">要针对每个分支测试的值。</param>
      <param name="defaultBody">
        <paramref name="switchValue" /> 不匹配任何分支时，该 switch 的结果。</param>
      <param name="comparison">要使用的相等比较方法。</param>
      <param name="cases">此 switch 表达式的分支集。</param>
      <returns>创建的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.SwitchExpression" />，它表示具有默认分支的 switch 语句。</summary>
      <param name="type">switch 的结果类型。</param>
      <param name="switchValue">要针对每个分支测试的值。</param>
      <param name="defaultBody">
        <paramref name="switchValue" /> 不匹配任何分支时，该 switch 的结果。</param>
      <param name="comparison">要使用的相等比较方法。</param>
      <param name="cases">此 switch 表达式的分支集。</param>
      <returns>创建的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建要在 <see cref="T:System.Linq.Expressions.SwitchCase" /> 对象中使用的 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 对象。</summary>
      <param name="body">分支的主体。</param>
      <param name="testValues">分支的测试值。</param>
      <returns>创建的 <see cref="T:System.Linq.Expressions.SwitchCase" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>创建在 <see cref="T:System.Linq.Expressions.SwitchCase" /> 中使用的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</summary>
      <param name="body">分支的主体。</param>
      <param name="testValues">分支的测试值。</param>
      <returns>创建的 <see cref="T:System.Linq.Expressions.SwitchCase" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String)">
      <summary>创建 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> 的实例。</summary>
      <param name="fileName">要将 <see cref="T:System.String" /> 设置为与其相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />，其 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)">
      <summary>创建 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> 的实例。</summary>
      <param name="fileName">要将 <see cref="T:System.String" /> 设置为与其相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />。</param>
      <param name="language">要将 <see cref="T:System.Guid" /> 设置为与其相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />，其 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> 和 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)">
      <summary>创建 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> 的实例。</summary>
      <param name="fileName">要将 <see cref="T:System.String" /> 设置为与其相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />。</param>
      <param name="language">要将 <see cref="T:System.Guid" /> 设置为与其相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />。</param>
      <param name="languageVendor">要将 <see cref="T:System.Guid" /> 设置为与其相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />，其 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />、<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> 和 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary>创建 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> 的实例。</summary>
      <param name="fileName">要将 <see cref="T:System.String" /> 设置为与其相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />。</param>
      <param name="language">要将 <see cref="T:System.Guid" /> 设置为与其相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />。</param>
      <param name="languageVendor">要将 <see cref="T:System.Guid" /> 设置为与其相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />。</param>
      <param name="documentType">要将 <see cref="T:System.Guid" /> 设置为与其相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />，其 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />、<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />、<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> 和 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示引发异常。</summary>
      <param name="value">一个 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns>一个表示异常的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示引发具有给定类型的异常。</summary>
      <param name="value">一个 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">表达式的新 <see cref="T:System.Type" />。</param>
      <returns>一个表示异常的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ToString">
      <summary>返回 <see cref="T:System.Linq.Expressions.Expression" /> 的的文本化表示形式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 的文本化表示形式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>创建一个表示 try 块的 <see cref="T:System.Linq.Expressions.TryExpression" />，该 try 块包含任意数量的 catch 语句，但不包含 fault 和 finally 块。</summary>
      <param name="body">try 块的主体。</param>
      <param name="handlers">包含零个或多个 <see cref="T:System.Linq.Expressions.CatchBlock" /> 表达式的数组，这些表达式表示要与 try 块关联的 catch 语句。</param>
      <returns>创建的 <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>创建一个表示 try 块的 <see cref="T:System.Linq.Expressions.TryExpression" />，该 try 块包含任意数量的 catch 语句和一个 finally 块。</summary>
      <param name="body">try 块的主体。</param>
      <param name="finally">finally 块的主体。</param>
      <param name="handlers">包含零个或多个 <see cref="T:System.Linq.Expressions.CatchBlock" /> 表达式的数组，这些表达式表示要与 try 块关联的 catch 语句。</param>
      <returns>创建的 <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示 try 块的 <see cref="T:System.Linq.Expressions.TryExpression" />，该 try 块包含一个 fault 块，但不包含 catch 语句。</summary>
      <param name="body">try 块的主体。</param>
      <param name="fault">fault 块的主体。</param>
      <returns>创建的 <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示 try 块的 <see cref="T:System.Linq.Expressions.TryExpression" />，该 try 块包含一个 finally 块，但不包含 catch 语句。</summary>
      <param name="body">try 块的主体。</param>
      <param name="finally">finally 块的主体。</param>
      <returns>创建的 <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)">
      <summary>创建一个 <see cref="P:System.Linq.Expressions.Expression.Type" /> 对象，它表示具有特定类型参数的泛型 System.Action 委托类型。</summary>
      <param name="typeArgs">Type 对象的数组，这些对象指定 System.Action 委托类型的类型参数。</param>
      <param name="actionType">在此方法返回时，包含具有特定类型参数的泛型 System.Action 委托类型。 如果没有与 <paramref name="typeArgs" /> 匹配的泛型 System.Action 委托，则包含 null。此参数以未初始化状态传递。</param>
      <returns>如果已为特定的 <paramref name="typeArgs" /> 创建泛型 System.Action 委托类型，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)">
      <summary>创建一个 <see cref="P:System.Linq.Expressions.Expression.Type" /> 对象，它表示具有特定类型参数的泛型 System.Func 委托类型。 最后一个类型参数指定已创建委托的返回类型。</summary>
      <param name="typeArgs">Type 对象的数组，这些对象指定 System.Func 委托类型的类型参数。</param>
      <param name="funcType">在此方法返回时，包含具有特定类型参数的泛型 System.Func 委托类型。 如果没有与 <paramref name="typeArgs" /> 匹配的泛型 System.Func 委托，则包含 null。此参数以未初始化状态传递。</param>
      <returns>如果已为特定的 <paramref name="typeArgs" /> 创建泛型 System.Func 委托类型，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)">
      <summary>创建一个表示显式引用或装箱转换的 <see cref="T:System.Linq.Expressions.UnaryExpression" />（如果转换失败，则提供 null）。</summary>
      <param name="expression">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="type">要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="type" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)">
      <summary>创建一个比较运行时类型标识的 <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />。</summary>
      <param name="expression">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">要将 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" /> 并且 <see cref="T:System.Linq.Expressions.Expression" /> 和 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> 属性设置为指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />。</summary>
      <param name="expression">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" />。</param>
      <param name="type">要将 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" /> 并且 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> 和 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="type" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
      <summary>创建一个表示一元正运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <param name="expression">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">一元加运算符没有为 <paramref name="expression" />。类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示一元正运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <param name="expression">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</param>
      <returns>一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 属性设置为指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 null 和它表示返回的方法 void, ，不是 static (Shared 在 Visual Basic 中)，或者不带且只有一个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 null 为未定义的一元加运算符，则 <paramref name="expression" />。类型。- 或 -<paramref name="expression" />.类型 （或其对应的非可空类型的为 null 的值类型时） 不能分配给所表示的方法的参数类型 <paramref name="method" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)">
      <summary>创建一个表示显式取消装箱的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <param name="expression">要取消装箱的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">表达式的新 <see cref="T:System.Type" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 节点，该节点可用于标识表达式树中的参数或变量。</summary>
      <param name="type">参数或变量的类型。</param>
      <returns>具有指定的名称和类型的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 节点</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 节点，该节点可用于标识表达式树中的参数或变量。</summary>
      <param name="type">参数或变量的类型。</param>
      <param name="name">参数或变量的名称。 此名称仅用于调试或打印目的。</param>
      <returns>具有指定的名称和类型的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 节点。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
      <summary>简化节点，然后对简化的表达式调用访问者委托。 该方法在节点不可简化时引发异常。</summary>
      <param name="visitor">
        <see cref="T:System.Func`2" /> 的一个实例。</param>
      <returns>要访问的表达式，或应在树中替换此表达式的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile">
      <summary>编译表达式树由描述为可执行代码的 lambda 表达式，并生成一个委托，表示 lambda 表达式。</summary>
      <returns>类型的委托 <paramref name="TDelegate" /> 表示所描述的已编译的 lambda 表达式 <see cref="T:System.Linq.Expressions.Expression`1" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
      <summary>将生成一个委托，表示 lambda 表达式。</summary>
      <param name="debugInfoGenerator">由编译器用于将标记序列点并添加批注的本地变量的调试信息生成器。</param>
      <returns>一个包含已编译的版本的 lambda 的委托。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>创建一个新的表达式，它类似于此表达式，但使用所提供的子级。 如果所有子级均相同，它将返回此表达式。</summary>
      <param name="body">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 结果属性。</param>
      <param name="parameters">
        <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 结果属性。</param>
      <returns>如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.#ctor">
      <summary>初始化 <see cref="T:System.Linq.Expressions.ExpressionVisitor" /> 的新实例。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
      <summary>将调度到此类中更专用的访问方法之一的表达式的列表。</summary>
      <param name="nodes">要访问的表达式。</param>
      <returns>修改后的表达式列表中，如果任何一个元素已修改，则否则，返回原始的表达式列表。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
      <summary>将调度到此类中更专用的访问方法之一的表达式。</summary>
      <param name="node">要访问的表达式。</param>
      <returns>修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})">
      <summary>使用指定的元素访问者的集合中的所有节点的都访问。</summary>
      <param name="nodes">要访问的节点。</param>
      <param name="elementVisitor">一个委托，访问单个元素，根据需要将其替换为新元素。</param>
      <typeparam name="T">节点的类型。</typeparam>
      <returns>修改后的节点列表中，已被修改的任何元素;否则，返回原始的节点列表。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)">
      <summary>访问表达式，将结果返回到原始的表达式类型转换。</summary>
      <param name="node">要访问的表达式。</param>
      <param name="callerName">调用的方法; 的名称使用报表来更好的错误消息报告。</param>
      <typeparam name="T">表达式的类型。</typeparam>
      <returns>修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。</returns>
      <exception cref="T:System.InvalidOperationException">此节点则 visit 方法返回不同的类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)">
      <summary>访问表达式，将结果返回到原始的表达式类型转换。</summary>
      <param name="nodes">要访问的表达式。</param>
      <param name="callerName">调用的方法; 的名称使用报表来更好的错误消息报告。</param>
      <typeparam name="T">表达式的类型。</typeparam>
      <returns>修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。</returns>
      <exception cref="T:System.InvalidOperationException">此节点则 visit 方法返回不同的类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
      <summary>访问的子级 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="node">要访问的表达式。</param>
      <returns>修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)">
      <summary>访问的子级 <see cref="T:System.Linq.Expressions.BlockExpression" />。</summary>
      <param name="node">要访问的表达式。</param>
      <returns>修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
      <summary>访问的子级 <see cref="T:System.Linq.Expressions.CatchBlock" />。</summary>
      <param name="node">要访问的表达式。</param>
      <returns>修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
      <summary>访问的子级 <see cref="T:System.Linq.Expressions.ConditionalExpression" />。</summary>
      <param name="node">要访问的表达式。</param>
      <returns>修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.ConstantExpression" />。</summary>
      <param name="node">要访问的表达式。</param>
      <returns>修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />。</summary>
      <param name="node">要访问的表达式。</param>
      <returns>修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.DefaultExpression" />。</summary>
      <param name="node">要访问的表达式。</param>
      <returns>修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
      <summary>访问的子级 <see cref="T:System.Linq.Expressions.DynamicExpression" />。</summary>
      <param name="node">要访问的表达式。</param>
      <returns>修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
      <summary>访问的子级 <see cref="T:System.Linq.Expressions.ElementInit" />。</summary>
      <param name="node">要访问的表达式。</param>
      <returns>修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
      <summary>访问扩展的表达式的子级。</summary>
      <param name="node">要访问的表达式。</param>
      <returns>修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)">
      <summary>访问的子级 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
      <param name="node">要访问的表达式。</param>
      <returns>修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)">
      <summary>访问的子级 <see cref="T:System.Linq.Expressions.IndexExpression" />。</summary>
      <param name="node">要访问的表达式。</param>
      <returns>修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
      <summary>访问的子级 <see cref="T:System.Linq.Expressions.InvocationExpression" />。</summary>
      <param name="node">要访问的表达式。</param>
      <returns>修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)">
      <summary>访问的子级 <see cref="T:System.Linq.Expressions.LabelExpression" />。</summary>
      <param name="node">要访问的表达式。</param>
      <returns>修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)">
      <summary>访问 <see cref="T:System.Linq.Expressions.LabelTarget" />。</summary>
      <param name="node">要访问的表达式。</param>
      <returns>修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
      <summary>访问的子级 <see cref="T:System.Linq.Expressions.Expression`1" />。</summary>
      <param name="node">要访问的表达式。</param>
      <typeparam name="T">该委托的类型。</typeparam>
      <returns>修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
      <summary>访问的子级 <see cref="T:System.Linq.Expressions.ListInitExpression" />。</summary>
      <param name="node">要访问的表达式。</param>
      <returns>修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)">
      <summary>访问的子级 <see cref="T:System.Linq.Expressions.LoopExpression" />。</summary>
      <param name="node">要访问的表达式。</param>
      <returns>修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
      <summary>访问的子级 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <param name="node">要访问的表达式。</param>
      <returns>修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
      <summary>访问的子级 <see cref="T:System.Linq.Expressions.MemberAssignment" />。</summary>
      <param name="node">要访问的表达式。</param>
      <returns>修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)">
      <summary>访问的子级 <see cref="T:System.Linq.Expressions.MemberBinding" />。</summary>
      <param name="node">要访问的表达式。</param>
      <returns>修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
      <summary>访问的子级 <see cref="T:System.Linq.Expressions.MemberInitExpression" />。</summary>
      <param name="node">要访问的表达式。</param>
      <returns>修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
      <summary>访问的子级 <see cref="T:System.Linq.Expressions.MemberListBinding" />。</summary>
      <param name="node">要访问的表达式。</param>
      <returns>修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
      <summary>访问的子级 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />。</summary>
      <param name="node">要访问的表达式。</param>
      <returns>修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
      <summary>访问的子级 <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</summary>
      <param name="node">要访问的表达式。</param>
      <returns>修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
      <summary>访问的子级 <see cref="T:System.Linq.Expressions.NewExpression" />。</summary>
      <param name="node">要访问的表达式。</param>
      <returns>修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
      <summary>访问的子级 <see cref="T:System.Linq.Expressions.NewArrayExpression" />。</summary>
      <param name="node">要访问的表达式。</param>
      <returns>修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.ParameterExpression" />。</summary>
      <param name="node">要访问的表达式。</param>
      <returns>修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
      <summary>访问的子级 <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />。</summary>
      <param name="node">要访问的表达式。</param>
      <returns>修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
      <summary>访问的子级 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</summary>
      <param name="node">要访问的表达式。</param>
      <returns>修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
      <summary>访问的子级 <see cref="T:System.Linq.Expressions.SwitchCase" />。</summary>
      <param name="node">要访问的表达式。</param>
      <returns>修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)">
      <summary>访问的子级 <see cref="T:System.Linq.Expressions.TryExpression" />。</summary>
      <param name="node">要访问的表达式。</param>
      <returns>修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
      <summary>访问的子级 <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />。</summary>
      <param name="node">要访问的表达式。</param>
      <returns>修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
      <summary>访问的子级 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <param name="node">要访问的表达式。</param>
      <returns>修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.GotoExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>创建一个新的表达式，它类似于此表达式，但使用所提供的子级。 如果所有子级均相同，它将返回此表达式。</summary>
      <param name="target">
        <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 结果属性。</param>
      <param name="value">
        <see cref="P:System.Linq.Expressions.GotoExpression.Value" /> 结果属性。</param>
      <returns>如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)">
      <summary>索引时返回参数，当索引超出界限时引发。  不应使用此类型。  仅在程序集重构时公开，并且仅用于内部性能优化。</summary>
      <param name="index">参数的索引。</param>
      <returns>索引时返回参数，当索引超出界限 <see cref="T:System.Linq.Expressions.Expression" /> 时引发。</returns>
    </member>
    <member name="M:System.Linq.Expressions.IDynamicExpression.CreateCallSite">
      <summary>根据需要创建 CallSite 并返回 DynamicExpression 的多态内联缓存的 CallSite。  不应使用此类型。  仅在程序集重构时公开，并且仅用于内部性能优化。</summary>
      <returns>DynamicExpression 的多态内联缓存的 CallSite。</returns>
    </member>
    <member name="M:System.Linq.Expressions.IDynamicExpression.Rewrite(System.Linq.Expressions.Expression[])">
      <summary>重写此节点，该节点可将动态表达式的参数替换为提供的值。args 的数目需要与当前表达式的数目匹配。  不应使用此类型。  仅在程序集重构时公开，并且仅用于内部性能优化。  此辅助方法允许重新编写要独立于特定实现类的节点，该实现类是从调用站点正在使用的 DynamicExpression 派生的。</summary>
      <param name="args">用于替换此节点的参数。</param>
      <returns>重写的节点，但如果未进行任何更改，则返回相同的节点。</returns>
    </member>
    <member name="M:System.Linq.Expressions.IndexExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>索引时返回参数，当索引超出界限时引发。  不应使用此成员。  由于程序集重构，只能为公共的；并且在内部用于性能优化。</summary>
      <param name="index">参数的索引。</param>
      <returns>返回 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.IndexExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个新的表达式，它类似于此表达式，但使用所提供的子级。 如果所有子级均相同，它将返回此表达式。</summary>
      <param name="object">结果的 <see cref="P:System.Linq.Expressions.IndexExpression.Object" /> 属性。</param>
      <param name="arguments">结果的 <see cref="P:System.Linq.Expressions.IndexExpression.Arguments" /> 属性。</param>
      <returns>如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>索引时返回参数，当索引超出界限时引发。  不应使用此成员。  由于程序集重构，只能为公共的；并且在内部用于性能优化。</summary>
      <param name="index">参数的索引。</param>
      <returns>索引处作为 <see cref="T:System.Linq.Expressions.Expression" /> 的参数，如果索引超出界限则引发。</returns>
    </member>
    <member name="M:System.Linq.Expressions.InvocationExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个新的表达式，它类似于此表达式，但使用所提供的子级。 如果所有子级均相同，它将返回此表达式。</summary>
      <param name="expression">结果的 <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> 属性。</param>
      <param name="arguments">结果的 <see cref="P:System.Linq.Expressions.InvocationExpression.Arguments" /> 属性。</param>
      <returns>如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>创建一个新的表达式，它类似于此表达式，但使用所提供的子级。 如果所有子级均相同，它将返回此表达式。</summary>
      <param name="target">
        <see cref="P:System.Linq.Expressions.LabelExpression.Target" /> 结果属性。</param>
      <param name="defaultValue">
        <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" /> 结果属性</param>
      <returns>如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelTarget.ToString">
      <summary>返回一个 <see cref="T:System.String" />，表示当前的 <see cref="T:System.Object" />。</summary>
      <returns>一个 <see cref="T:System.String" />，表示当前的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile">
      <summary>将生成一个委托，表示 lambda 表达式。</summary>
      <returns>一个 <see cref="T:System.Delegate" /> ，其中包含 lambda 表达式的已编译的版本。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
      <summary>将生成一个委托，表示 lambda 表达式。</summary>
      <param name="debugInfoGenerator">由编译器用于将标记序列点并添加批注的本地变量的调试信息生成器。</param>
      <returns>一个包含已编译的版本的 lambda 的委托。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.CompileToMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>Lambda 将编译的方法定义。</summary>
      <param name="method">一个 <see cref="T:System.Reflection.Emit.MethodBuilder" /> 这将用于保存 lambda 的 IL。</param>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.CompileToMethod(System.Reflection.Emit.MethodBuilder,System.Runtime.CompilerServices.DebugInfoGenerator)">
      <summary>将方法定义和自定义调试信息编译 lambda。</summary>
      <param name="method">一个 <see cref="T:System.Reflection.Emit.MethodBuilder" /> 这将用于保存 lambda 的 IL。</param>
      <param name="debugInfoGenerator">由编译器用于将标记序列点并添加批注的本地变量的调试信息生成器。</param>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Reduce">
      <summary>将二进制表达式节点简化为更简单的表达式。</summary>
      <returns>已简化的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>创建一个新的表达式，它类似于此表达式，但使用所提供的子级。 如果所有子级均相同，它将返回此表达式。</summary>
      <param name="newExpression">
        <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 结果属性。</param>
      <param name="initializers">
        <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 结果属性。</param>
      <returns>如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LoopExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>创建一个新的表达式，它类似于此表达式，但使用所提供的子级。 如果所有子级均相同，它将返回此表达式。</summary>
      <param name="breakLabel">
        <see cref="P:System.Linq.Expressions.LoopExpression.BreakLabel" /> 结果属性。</param>
      <param name="continueLabel">
        <see cref="P:System.Linq.Expressions.LoopExpression.ContinueLabel" /> 结果属性。</param>
      <param name="body">
        <see cref="P:System.Linq.Expressions.LoopExpression.Body" /> 结果属性。</param>
      <returns>如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberAssignment.Update(System.Linq.Expressions.Expression)">
      <summary>创建一个新的表达式，它类似于此表达式，但使用所提供的子级。 如果所有子级均相同，它将返回此表达式。</summary>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> 结果属性。</param>
      <returns>如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.#ctor(System.Linq.Expressions.MemberBindingType,System.Reflection.MemberInfo)">
      <summary>初始化 <see cref="T:System.Linq.Expressions.MemberBinding" /> 类的新实例。</summary>
      <param name="type">
        <see cref="T:System.Linq.Expressions.MemberBindingType" /> 的区分类的绑定所表示的类型。</param>
      <param name="member">
        <see cref="T:System.Reflection.MemberInfo" /> 表示字段或属性进行初始化。</param>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.ToString">
      <summary>返回 <see cref="T:System.Linq.Expressions.MemberBinding" /> 的的文本化表示形式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberBinding" /> 的文本化表示形式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <param name="visitor">对此节点进行访问的访问者。</param>
      <returns>对此节点访问的结果。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Update(System.Linq.Expressions.Expression)">
      <summary>创建一个新的表达式，它类似于此表达式，但使用所提供的子级。 如果所有子级均相同，它将返回此表达式。</summary>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 结果属性。</param>
      <returns>如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Reduce">
      <summary>减少了 <see cref="T:System.Linq.Expressions.MemberInitExpression" /> 为简单的表达式。</summary>
      <returns>已简化的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>创建一个新的表达式，它类似于此表达式，但使用所提供的子级。 如果所有子级均相同，它将返回此表达式。</summary>
      <param name="newExpression">
        <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 结果属性。</param>
      <param name="bindings">
        <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 结果属性。</param>
      <returns>如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberListBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>创建一个新的表达式，它类似于此表达式，但使用所提供的子级。 如果所有子级均相同，它将返回此表达式。</summary>
      <param name="initializers">
        <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 结果属性。</param>
      <returns>如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberMemberBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>创建一个新的表达式，它类似于此表达式，但使用所提供的子级。 如果所有子级均相同，它将返回此表达式。</summary>
      <param name="bindings">
        <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 结果属性。</param>
      <returns>如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <param name="visitor">对此节点进行访问的访问者。</param>
      <returns>对此节点访问的结果。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>索引时返回参数，当索引超出界限时引发。  不应使用此成员。  由于程序集重构，只能为公共的；并且在内部用于性能优化。</summary>
      <param name="index">参数的索引。</param>
      <returns>返回 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个新的表达式，它类似于此表达式，但使用所提供的子级。 如果所有子级均相同，它将返回此表达式。</summary>
      <param name="object">结果的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 属性。</param>
      <param name="arguments">结果的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 属性。</param>
      <returns>如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <param name="visitor">对此节点进行访问的访问者。</param>
      <returns>对此节点访问的结果。</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个新的表达式，它类似于此表达式，但使用所提供的子级。 如果所有子级均相同，它将返回此表达式。</summary>
      <param name="expressions">
        <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 结果属性。</param>
      <returns>如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <param name="visitor">对此节点进行访问的访问者。</param>
      <returns>对此节点访问的结果。</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>索引时返回参数，当索引超出界限时引发。</summary>
      <param name="index">参数的索引。</param>
      <returns>索引，如果索引超出界限引发的参数。</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个新的表达式，它类似于此表达式，但使用所提供的子级。 如果所有子级均相同，它将返回此表达式。</summary>
      <param name="arguments">结果的 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 属性。</param>
      <returns>如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ParameterExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <param name="visitor">对此节点进行访问的访问者。</param>
      <returns>对此节点访问的结果。</returns>
    </member>
    <member name="M:System.Linq.Expressions.RuntimeVariablesExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>创建一个新的表达式，它类似于此表达式，但使用所提供的子级。 如果所有子级均相同，它将返回此表达式。</summary>
      <param name="variables">
        <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 结果属性。</param>
      <returns>如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.ToString">
      <summary>返回一个 <see cref="T:System.String" />，表示当前的 <see cref="T:System.Object" />。</summary>
      <returns>一个 <see cref="T:System.String" />，表示当前的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)">
      <summary>创建一个新的表达式，它类似于此表达式，但使用所提供的子级。 如果所有子级均相同，它将返回此表达式。</summary>
      <param name="testValues">
        <see cref="P:System.Linq.Expressions.SwitchCase.TestValues" /> 结果属性。</param>
      <param name="body">
        <see cref="P:System.Linq.Expressions.SwitchCase.Body" /> 结果属性。</param>
      <returns>如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase},System.Linq.Expressions.Expression)">
      <summary>创建一个新的表达式，它类似于此表达式，但使用所提供的子级。 如果所有子级均相同，它将返回此表达式。</summary>
      <param name="switchValue">
        <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> 结果属性。</param>
      <param name="cases">
        <see cref="P:System.Linq.Expressions.SwitchExpression.Cases" /> 结果属性。</param>
      <param name="defaultBody">
        <see cref="P:System.Linq.Expressions.SwitchExpression.DefaultBody" /> 结果属性。</param>
      <returns>如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.TryExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个新的表达式，它类似于此表达式，但使用所提供的子级。 如果所有子级均相同，它将返回此表达式。</summary>
      <param name="body">
        <see cref="P:System.Linq.Expressions.TryExpression.Body" /> 结果属性。</param>
      <param name="handlers">
        <see cref="P:System.Linq.Expressions.TryExpression.Handlers" /> 结果属性。</param>
      <param name="finally">
        <see cref="P:System.Linq.Expressions.TryExpression.Finally" /> 结果属性。</param>
      <param name="fault">
        <see cref="P:System.Linq.Expressions.TryExpression.Fault" /> 结果属性。</param>
      <returns>如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.TypeBinaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>创建一个新的表达式，它类似于此表达式，但使用所提供的子级。 如果所有子级均相同，它将返回此表达式。</summary>
      <param name="expression">
        <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> 结果属性。</param>
      <returns>如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Reduce">
      <summary>将表达式节点简化为更简单的表达式。</summary>
      <returns>已简化的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>创建一个新的表达式，它类似于此表达式，但使用所提供的子级。 如果所有子级均相同，它将返回此表达式。</summary>
      <param name="operand">
        <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 结果属性。</param>
      <returns>如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。</returns>
    </member>
    <member name="M:System.Linq.ILookup`2.Contains(`0)">
      <summary>确定指定的键是否存在于 <see cref="T:System.Linq.ILookup`2" />。</summary>
      <param name="key">要在中搜索的键 <see cref="T:System.Linq.ILookup`2" />。</param>
      <returns>true 如果 <paramref name="key" /> 处于 <see cref="T:System.Linq.ILookup`2" />; 否则为 false。</returns>
    </member>
    <member name="M:System.Linq.IOrderedEnumerable`1.CreateOrderedEnumerable``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0},System.Boolean)">
      <summary>执行后续排序的元素上 <see cref="T:System.Linq.IOrderedEnumerable`1" /> 根据某个键。</summary>
      <param name="keySelector">
        <see cref="T:System.Func`2" /> 用于提取每个元素的键。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IComparer`1" /> 用于放置虚拟机返回序列中的键进行比较。</param>
      <param name="descending">true 按降序顺序; 元素进行排序 false 按升序排序的元素进行排序。</param>
      <typeparam name="TKey">键的类型由 <paramref name="keySelector" />。</typeparam>
      <returns>
        <see cref="T:System.Linq.IOrderedEnumerable`1" /> 的元素根据某个键进行排序。</returns>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
      <summary>构造 <see cref="T:System.Linq.IQueryable" /> 可以评估所表示的指定的表达式目录树查询的对象。</summary>
      <param name="expression">一个表示的表达式树 LINQ 查询。</param>
      <returns>
        <see cref="T:System.Linq.IQueryable" /> ，它可计算指定的表达式目录树所表示的查询。</returns>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>构造 <see cref="T:System.Linq.IQueryable`1" /> 可以评估所表示的指定的表达式目录树查询的对象。</summary>
      <param name="expression">一个表示的表达式树 LINQ 查询。</param>
      <typeparam name="TElement">中的元素的类型 <see cref="T:System.Linq.IQueryable`1" /> 返回。</typeparam>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" /> ，它可计算指定的表达式目录树所表示的查询。</returns>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)">
      <summary>执行指定的表达式树所表示的查询。</summary>
      <param name="expression">一个表示的表达式树 LINQ 查询。</param>
      <returns>执行指定的查询所得到的值。</returns>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
      <summary>执行指定的表达式树所表示的强类型查询。</summary>
      <param name="expression">一个表示的表达式树 LINQ 查询。</param>
      <typeparam name="TResult">执行查询所得到的值的类型。</typeparam>
      <returns>执行指定的查询所得到的值。</returns>
    </member>
    <member name="M:System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})">
      <summary>适用于每个键和其相关的值的转换函数，并返回结果。</summary>
      <param name="resultSelector">用于项目的结果值从每个键和其相关的值的函数。</param>
      <typeparam name="TResult">生成的结果值的类型 <paramref name="resultSelector" />。</typeparam>
      <returns>一个集合，包含一个值并在每个键/值集合对 <see cref="T:System.Linq.Lookup`2" />。</returns>
    </member>
    <member name="M:System.Linq.Lookup`2.Contains(`0)">
      <summary>确定指定的键是否在 <see cref="T:System.Linq.Lookup`2" />。</summary>
      <param name="key">要查找中的键 <see cref="T:System.Linq.Lookup`2" />。</param>
      <returns>true 如果 <paramref name="key" /> 处于 <see cref="T:System.Linq.Lookup`2" />; 否则为 false。</returns>
    </member>
    <member name="M:System.Linq.Lookup`2.GetEnumerator">
      <summary>返回循环访问的泛型枚举器 <see cref="T:System.Linq.Lookup`2" />。</summary>
      <returns>用于 <see cref="T:System.Linq.Lookup`2" /> 的枚举数。</returns>
    </member>
    <member name="M:System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Linq.Lookup`2" /> 的枚举数。 此类不能被继承。</summary>
      <returns>用于 <see cref="T:System.Linq.Lookup`2" /> 的枚举数。</returns>
    </member>
    <member name="M:System.Linq.OrderedParallelQuery`1.GetEnumerator">
      <summary>返回循环访问序列的枚举。</summary>
      <returns>一个枚举器循环访问序列。</returns>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``1(System.Linq.ParallelQuery{``0},System.Func{``0,``0,``0})">
      <summary>对一个序列并行应用累加器函数。</summary>
      <param name="source">要对其进行聚合的序列。</param>
      <param name="func">要对每个元素调用的累加器函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>累加器的最终值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="func" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``2(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1})">
      <summary>对一个序列并行应用累加器函数。 将指定的种子值用作累加器初始值。</summary>
      <param name="source">要对其进行聚合的序列。</param>
      <param name="seed">累加器的初始值。</param>
      <param name="func">要对每个元素调用的累加器函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TAccumulate">累加器值的类型。</typeparam>
      <returns>累加器的最终值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="func" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})">
      <summary>对一个序列并行应用累加器函数。 此重载在顺序实现中不可用。</summary>
      <param name="source">要对其进行聚合的序列。</param>
      <param name="seed">累加器的初始值。</param>
      <param name="updateAccumulatorFunc">要对分区中的每个元素调用的累加器函数。</param>
      <param name="combineAccumulatorsFunc">要对每个分区中已生成的累加器结果调用的累加器函数。</param>
      <param name="resultSelector">将累加器的最终值转换为结果值的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TAccumulate">累加器值的类型。</typeparam>
      <typeparam name="TResult">结果值的类型。</typeparam>
      <returns>已转换的累加器最终值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="updateAccumulatorFunc" /> 或 <paramref name="combineAccumulatorsFunc" /> 或 <paramref name="resultSelector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
      <summary>对一个序列并行应用累加器函数。 将指定的种子值用作累加器的初始值，并使用指定的函数选择结果值。</summary>
      <param name="source">要对其进行聚合的序列。</param>
      <param name="seed">累加器的初始值。</param>
      <param name="func">要对每个元素调用的累加器函数。</param>
      <param name="resultSelector">将累加器的最终值转换为结果值的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TAccumulate">累加器值的类型。</typeparam>
      <typeparam name="TResult">结果值的类型。</typeparam>
      <returns>已转换的累加器最终值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="func" /> 或 <paramref name="resultSelector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},System.Func{``1},System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})">
      <summary>对一个序列并行应用累加器函数。 此重载在顺序实现中不可用。</summary>
      <param name="source">要对其进行聚合的序列。</param>
      <param name="seedFactory">返回累加器的初始值的函数。</param>
      <param name="updateAccumulatorFunc">要对分区中的每个元素调用的累加器函数。</param>
      <param name="combineAccumulatorsFunc">要对每个分区中已生成的累加器结果调用的累加器函数。</param>
      <param name="resultSelector">将累加器的最终值转换为结果值的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TAccumulate">累加器值的类型。</typeparam>
      <typeparam name="TResult">结果值的类型。</typeparam>
      <returns>已转换的累加器最终值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="seedFactory" /> 或 <paramref name="updateAccumulatorFunc" /> 或 <paramref name="combineAccumulatorsFunc" /> 或 <paramref name="resultSelector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.All``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>并行确定序列中的所有元素是否都满足条件。</summary>
      <param name="source">要对其应用谓词的元素所在的序列。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>如果源序列中的每个元素都通过指定谓词中的测试，或者序列为空，则为 true；否则为 false。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0})">
      <summary>确定并行序列是否包含任何元素。</summary>
      <param name="source">要检查是否为空的序列。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>如果源序列包含任何元素，则为 true；否则为 false。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>并行确定序列中的任何元素是否都满足条件。</summary>
      <param name="source">将对其元素应用谓词的序列。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>如果源序列中的任何元素都通过指定谓词中的测试，则为 true；否则为 false。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsEnumerable``1(System.Linq.ParallelQuery{``0})">
      <summary>将转换 <see cref="T:System.Linq.ParallelQuery`1" /> 到 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 以强制查询的顺序计算。</summary>
      <param name="source">要强制转换为的序列 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>在输入的序列类型化为 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsOrdered(System.Linq.ParallelQuery)">
      <summary>启用将数据源视为“已经排序”的处理方法，重写默认的将数据源视为“未经排序”的处理方法。 只可以对由 AsParallel、ParallelEnumerable.Range 和 ParallelEnumerable.Repeat 返回的非泛型序列调用 AsOrdered。</summary>
      <param name="source">输入序列。</param>
      <returns>将要维护后续查询运算符中的原始排序的源序列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.InvalidOperationException">时引发 <paramref name="source" /> 不包含任何元素- 或 - 如果查询的中间调用 AsOrdered。 允许它之后立即调用 <see cref="M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)" />, ，<see cref="M:System.Linq.ParallelEnumerable.Range(System.Int32,System.Int32)" /> 或 <see cref="M:System.Linq.ParallelEnumerable.Repeat``1(``0,System.Int32)" />。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsOrdered``1(System.Linq.ParallelQuery{``0})">
      <summary>启用将数据源视为“已经排序”的处理方法，重写默认的将数据源视为“未经排序”的处理方法。 只可以对由 AsParallel、ParallelEnumerable.Range 和 ParallelEnumerable.Repeat 返回的泛型序列调用 AsOrdered。</summary>
      <param name="source">输入序列。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>将要维护后续查询运算符中的原始排序的源序列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.InvalidOperationException">时引发 <paramref name="source" /> 不包含任何元素- 或 -如果 <paramref name="source" /> 不是 AsParallel、 ParallelEnumerable.Range 和 ParallelEnumerable.Repeat 之一。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)">
      <summary>启用查询的并行化。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 将转换为 <see cref="T:System.Linq.ParallelQuery" />。</param>
      <returns>作为要绑定到 ParallelEnumerable 扩展方法的 ParallelQuery 的源。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Concurrent.Partitioner{``0})">
      <summary>启用查询的并行化，并由负责将输入序列拆分成各个分区的自定义分区程序指明其出处。</summary>
      <param name="source">基于输入序列的分区程序。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>
        <paramref name="source" /> 作为要绑定到 ParallelEnumerable 扩展方法的 ParallelQuery。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>启用查询的并行化。</summary>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 将转换为 <see cref="T:System.Linq.ParallelQuery`1" />。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>作为源 <see cref="T:System.Linq.ParallelQuery`1" /> 要绑定到 ParallelEnumerable 扩展方法。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsSequential``1(System.Linq.ParallelQuery{``0})">
      <summary>将转换 <see cref="T:System.Linq.ParallelQuery`1" /> 到 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 以强制查询的顺序计算。</summary>
      <param name="source">一个 <see cref="T:System.Linq.ParallelQuery`1" /> 将转换为 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>作为源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 要绑定到顺序扩展方法。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsUnordered``1(System.Linq.ParallelQuery{``0})">
      <summary>允许将中间查询视为元素之间未应用任何排序。</summary>
      <param name="source">输入序列。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>具有任意顺序的源序列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Decimal})">
      <summary>并行计算一个值序列的平均值。</summary>
      <param name="source">用于计算平均值的值序列。</param>
      <returns>值序列的平均值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Double})">
      <summary>并行计算一个值序列的平均值。</summary>
      <param name="source">用于计算平均值的值序列。</param>
      <returns>值序列的平均值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int32})">
      <summary>并行计算一个值序列的平均值。</summary>
      <param name="source">用于计算平均值的值序列。</param>
      <returns>值序列的平均值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">Sum 或序列中元素的计数大于 <see cref="F:System.Int32.MaxValue" />。 -或者-查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int64})">
      <summary>并行计算一个值序列的平均值。</summary>
      <param name="source">用于计算平均值的值序列。</param>
      <returns>值序列的平均值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">Sum 或序列中元素的计数大于 <see cref="F:System.Int32.MaxValue" />。 -或者-查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>并行计算一个值序列的平均值。</summary>
      <param name="source">用于计算平均值的值序列。</param>
      <returns>值序列的平均值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>并行计算一个值序列的平均值。</summary>
      <param name="source">源序列。</param>
      <returns>返回值序列的平均值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">用于计算平均值的值序列。值序列的平均值。<paramref name="source" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>并行计算一个值序列的平均值。</summary>
      <param name="source">用于计算平均值的值序列。</param>
      <returns>值序列的平均值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">Sum 或序列中元素的计数大于 <see cref="F:System.Int32.MaxValue" />。 -或者-查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>并行计算一个值序列的平均值。</summary>
      <param name="source">用于计算平均值的值序列。</param>
      <returns>值序列的平均值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">Sum 或序列中元素的计数大于 <see cref="F:System.Int32.MaxValue" />。 -或者-查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>并行计算一个值序列的平均值。</summary>
      <param name="source">用于计算平均值的值序列。</param>
      <returns>值序列的平均值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Single})">
      <summary>并行计算一个值序列的平均值。</summary>
      <param name="source">用于计算平均值的值序列。</param>
      <returns>值序列的平均值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>并行计算一个值序列的平均值，这些值可通过对输入序列的每个元素调用转换函数获得。</summary>
      <param name="source">用于计算平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>值序列的平均值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
      <exception cref="T:System.OverflowException">(作为内部异常在抛出 <see cref="T:System.AggregateException" />)。<paramref name="selector" /> 函数将返回一个值大于 MaxValue 元素类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>并行计算一个值序列的平均值，这些值可通过对输入序列的每个元素调用转换函数获得。</summary>
      <param name="source">用于计算平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>值序列的平均值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
      <exception cref="T:System.OverflowException"> (作为内部异常在抛出 <see cref="T:System.AggregateException" />)。<paramref name="selector" /> 函数将返回一个值大于 MaxValue 元素类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>并行计算一个值序列的平均值，这些值可通过对输入序列的每个元素调用转换函数获得。</summary>
      <param name="source">用于计算平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>值序列的平均值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">Sum 或序列中元素的计数大于 <see cref="F:System.Int32.MaxValue" />。 -或者-查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
      <exception cref="T:System.OverflowException"> (作为内部异常在抛出 <see cref="T:System.AggregateException" />)。<paramref name="selector" /> 函数将返回一个值大于 MaxValue 元素类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>并行计算一个值序列的平均值，这些值可通过对输入序列的每个元素调用转换函数获得。</summary>
      <param name="source">用于计算平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>值序列的平均值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">Sum 或序列中元素的计数大于 <see cref="F:System.Int32.MaxValue" />。 -或者-查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
      <exception cref="T:System.OverflowException"> (作为内部异常在抛出 <see cref="T:System.AggregateException" />)。<paramref name="selector" /> 函数将返回一个值大于 MaxValue 元素类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>并行计算一个值序列的平均值，这些值可通过对输入序列的每个元素调用转换函数获得。</summary>
      <param name="source">用于计算平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>值序列的平均值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
      <exception cref="T:System.OverflowException"> (作为内部异常在抛出 <see cref="T:System.AggregateException" />)。<paramref name="selector" /> 函数将返回一个值大于 MaxValue 元素类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>并行计算一个值序列的平均值，这些值可通过对输入序列的每个元素调用转换函数获得。</summary>
      <param name="source">用于计算平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>值序列的平均值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
      <exception cref="T:System.OverflowException"> (作为内部异常在抛出 <see cref="T:System.AggregateException" />)。<paramref name="selector" /> 函数将返回一个值大于 MaxValue 元素类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>并行计算一个值序列的平均值，这些值可通过对输入序列的每个元素调用转换函数获得。</summary>
      <param name="source">用于计算平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>值序列的平均值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">Sum 或序列中元素的计数大于 <see cref="F:System.Int32.MaxValue" />。 -或者-查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
      <exception cref="T:System.OverflowException"> (作为内部异常在抛出 <see cref="T:System.AggregateException" />)。<paramref name="selector" /> 函数将返回一个值大于 MaxValue 元素类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>并行计算一个值序列的平均值，这些值可通过对输入序列的每个元素调用转换函数获得。</summary>
      <param name="source">用于计算平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>值序列的平均值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">Sum 或序列中元素的计数大于 <see cref="F:System.Int64.MaxValue" />。 -或者-查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
      <exception cref="T:System.OverflowException"> (作为内部异常在抛出 <see cref="T:System.AggregateException" />)。<paramref name="selector" /> 函数将返回一个值大于 MaxValue 元素类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>并行计算一个值序列的平均值，这些值可通过对输入序列的每个元素调用转换函数获得。</summary>
      <param name="source">用于计算平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>值序列的平均值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
      <exception cref="T:System.OverflowException"> (作为内部异常在抛出 <see cref="T:System.AggregateException" />)。<paramref name="selector" /> 函数将返回一个值大于 MaxValue 元素类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>并行计算一个值序列的平均值，这些值可通过对输入序列的每个元素调用转换函数获得。</summary>
      <param name="source">用于计算平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>值序列的平均值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
      <exception cref="T:System.OverflowException"> (作为内部异常在抛出 <see cref="T:System.AggregateException" />)。<paramref name="selector" /> 函数将返回一个值大于 MaxValue 元素类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Cast``1(System.Linq.ParallelQuery)">
      <summary>将 ParallelQuery 的元素转换为指定的类型。</summary>
      <param name="source">包含要转换的元素的序列。</param>
      <typeparam name="TResult">要转换的元素的类型 <paramref name="source" /> 到。</typeparam>
      <returns>一个序列，其中包含已转换为指定类型的源序列的每个元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.InvalidCastException">源序列中的类型无法转换成 <paramref name="TResult" />。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>切勿调用此 Concat 重载。 此方法已标记为过时，并且总是引发 <see cref="T:System.NotSupportedException" /> 时调用。</summary>
      <param name="first">未使用此参数。</param>
      <param name="second">未使用此参数。</param>
      <typeparam name="TSource">未使用此类型参数。</typeparam>
      <returns>此重载总是会引发 <see cref="T:System.NotSupportedException" />。</returns>
      <exception cref="T:System.NotSupportedException">当调用此方法时出现异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>连接两个并行序列。</summary>
      <param name="first">要连接的第一个序列。</param>
      <param name="second">要与第一个序列连接的序列。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <returns>一个序列，其中包含两个输入序列的已连接元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0)">
      <summary>通过使用默认的相等比较器，并行确定某个序列是否包含指定的元素。</summary>
      <param name="source">要在其中定位某个值的序列。</param>
      <param name="value">要在序列中定位的值。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>如果源序列包含具有指定值的元素，则为 true；否则为 false。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>并行确定序列是否使用指定的包含指定的元素 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</summary>
      <param name="source">要在其中定位某个值的序列。</param>
      <param name="value">要在序列中定位的值。</param>
      <param name="comparer">一个对值进行比较的相等比较器。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>如果源序列包含具有指定值的元素，则为 true；否则为 false。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0})">
      <summary>返回并行序列中的元素数量。</summary>
      <param name="source">包含要计数的元素的序列。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>输入序列中的元素数量。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">源中的元素数大于 <see cref="F:System.Int32.MaxValue" />。 (在这种情况下是 InnerException <see cref="T:System.OverflowException" />)-或者-查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>返回一个数字，表示在指定的并行序列中满足条件的元素数量。</summary>
      <param name="source">包含要计数的元素的序列。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>一个数字，表示序列中满足谓词函数条件的元素数量。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">源中的元素数大于 <see cref="F:System.Int32.MaxValue" />。 (在这种情况下是 InnerException <see cref="T:System.OverflowException" />)-或者-查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0})">
      <summary>返回指定的并行序列的元素；如果序列为空，则返回单一实例集合中的类型参数的默认值。</summary>
      <param name="source">序列为空时返回默认值的序列。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>一个序列，其中包含 default （tsource）; 如果包含 <paramref name="source" /> 空; 否则为 <paramref name="source" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0},``0)">
      <summary>返回指定的并行序列中的元素；如果序列为空，则返回单一实例集合中的指定值。</summary>
      <param name="source">序列为空时返回指定值的序列。</param>
      <param name="defaultValue">序列为空时要返回的值。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>如果包含 defaultValue 的序列 <paramref name="source" /> 空; 否则为 <paramref name="source" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0})">
      <summary>通过使用默认的相等比较器对值进行比较，返回并行序列中的非重复元素。</summary>
      <param name="source">要从中移除重复元素的序列。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>一个序列，其中包含源序列中的非重复元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>返回并行序列中通过使用指定的非重复元素 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较。</summary>
      <param name="source">要从中移除重复元素的序列。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" />  对值进行比较。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>一个序列，其中包含源序列中的非重复元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ElementAt``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>返回并行序列中指定索引处的元素。</summary>
      <param name="source">要从中返回元素的序列。</param>
      <param name="index">要检索的从零开始的元素索引。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>源序列中指定位置处的元素。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0 或大于或等于的中的元素数 <paramref name="source" />。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ElementAtOrDefault``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>返回并行序列中指定索引处的元素；如果索引超出范围，则返回默认值。</summary>
      <param name="source">要从中返回元素的序列。</param>
      <param name="index">要检索的从零开始的元素索引。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>如果索引超出源序列的范围，则为 default(TSource)；否则为源序列中指定位置处的元素。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Empty``1">
      <summary>返回一个具有指定的类型参数的空 ParallelQuery{TResult}。</summary>
      <typeparam name="TResult">要分配给返回的泛型序列的类型参数的类型。</typeparam>
      <returns>其类型参数是一个空序列 <paramref name="TResult" />。</returns>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>切勿调用此 Except 重载。 此方法已标记为过时，并且总是引发 <see cref="T:System.NotSupportedException" /> 时调用。</summary>
      <param name="first">未使用此参数。</param>
      <param name="second">未使用此参数。</param>
      <typeparam name="TSource">未使用此类型参数。</typeparam>
      <returns>此重载总是会引发 <see cref="T:System.NotSupportedException" />。</returns>
      <exception cref="T:System.NotSupportedException">当调用此方法时出现异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>切勿调用此 Except 重载。 此方法已标记为过时，并且总是引发 <see cref="T:System.NotSupportedException" /> 时调用。</summary>
      <param name="first">未使用此参数。</param>
      <param name="second">未使用此参数。</param>
      <param name="comparer">未使用此参数。</param>
      <typeparam name="TSource">未使用此类型参数。</typeparam>
      <returns>此重载总是会引发 <see cref="T:System.NotSupportedException" />。</returns>
      <exception cref="T:System.NotSupportedException">当调用此方法时出现异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>通过使用默认的相等比较器对值进行比较，生成两个并行序列的差集。</summary>
      <param name="first">也不是在其元素的序列 <paramref name="second" /> 将返回。</param>
      <param name="second">一个序列，其中的元素如果同时出现在第一个序列中，则将导致从返回的序列中移除这些元素。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <returns>包含这两个序列的元素的差集的序列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>使用指定的生成的两个并行序列的差集 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较。</summary>
      <param name="first">也不是在其元素的序列 <paramref name="second" /> 将返回。</param>
      <param name="second">一个序列，其中的元素如果同时出现在第一个序列中，则将导致从返回的序列中移除这些元素。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <returns>包含这两个序列的元素的差集的序列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0})">
      <summary>返回并行序列中的第一个元素。</summary>
      <param name="source">要返回其第一个元素的序列。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>返回指定序列中的第一个元素。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>返回并行序列中满足指定条件的第一个元素。</summary>
      <param name="source">要从中返回元素的序列。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中通过指定谓词函数中的测试的第一个元素。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">中的没有任何元素 <paramref name="source" /> 满足该条件在 <paramref name="predicate" />。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0})">
      <summary>返回并行序列中的第一个元素；如果该序列中不包含任何元素，则返回默认值。</summary>
      <param name="source">要返回其第一个元素的序列。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>default （tsource) 如果 <paramref name="source" /> 空; 否则为中的第一个元素 <paramref name="source" />。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>返回并行序列中满足条件的第一个元素；如果未找到这样的元素，则返回默认值。</summary>
      <param name="source">要从中返回元素的序列。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>default （tsource) 如果 <paramref name="source" /> 为空，或者如果没有元素通过谓词; 指定的测试否则为中的第一个元素 <paramref name="source" /> 通过谓词指定的测试。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ForAll``1(System.Linq.ParallelQuery{``0},System.Action{``0})">
      <summary>指定的操作中每个元素并行调用 <paramref name="source" />。</summary>
      <param name="source">
        <see cref="T:System.Linq.ParallelQuery`1" /> 将处理其元素 <paramref name="action" />。</param>
      <param name="action">要对每个元素调用的操作。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="action" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>根据指定的键选择器函数对序列中的元素进行并行分组。</summary>
      <param name="source">一个 OrderedParallelQuery{TSource}，包含要排序的元素。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <returns>一个按按照降序进行排序的组序列 <paramref name="TKey" />。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="action" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>并行根据指定的键选择器函数对序列的元素进行分组并使用指定的比较的键 <see cref="T:System.Collections.Generic.IComparer`1" />。</summary>
      <param name="source">
        <see cref="T:System.Linq.OrderedParallelQuery`1" /> ，其中包含要排序的元素。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IComparer`1" /> 对键进行比较。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />&gt;。</typeparam>
      <returns>一个按按照降序进行排序的组序列 <paramref name="TKey" />。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="action" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>根据指定的键选择器函数对序列中的元素进行并行分组，并且通过使用指定的函数对每个组中的元素进行投影。</summary>
      <param name="source">
        <see cref="T:System.Linq.OrderedParallelQuery`1" /> ，其中包含要排序的元素。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <param name="elementSelector">用于将每个源元素映射到中的元素 <see cref="T:System.Linq.IGrouping`2" />。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <typeparam name="TElement">
        <see cref="T:System.Linq.IGrouping`2" /> 中元素的类型。</typeparam>
      <returns>一个按按照降序进行排序的组序列 <paramref name="TKey" />。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="action" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据键选择器函数对序列中的元素进行并行分组。 通过使用比较器对键进行比较，并且通过使用指定的函数对每个组的元素进行投影。</summary>
      <param name="source">一个 OrderedParallelQuery{TSource}，包含要排序的元素。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <param name="elementSelector">用于将每个源元素映射到 IGrouping 中的元素的函数。</param>
      <param name="comparer">一个用于比较键的 IComparer{TSource}。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <typeparam name="TElement">IGrouping 中的元素的类型</typeparam>
      <returns>一个按按照降序进行排序的组序列 <paramref name="TKey" />。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="action" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
      <summary>根据指定的键选择器函数对序列中的元素进行并行分组，并且从每个组及其键中创建结果值。</summary>
      <param name="source">要对其元素进行分组的序列。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="resultSelector">用于从每个组中创建结果值的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <typeparam name="TResult">返回的结果值的类型 <paramref name="resultSelector" />。</typeparam>
      <returns>一种类型的元素序列 <paramref name="TResult" /> 其中的每个元素都表示对一组及其键的投影。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="action" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据指定的键选择器函数对序列中的元素进行并行分组，并且从每个组及其键中创建结果值。 通过使用指定的比较器对键进行比较。</summary>
      <param name="source">要对其元素进行分组的序列。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="resultSelector">用于从每个组中创建结果值的函数。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对键进行比较。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <typeparam name="TResult">返回的结果值的类型 <paramref name="resultSelector" />。</typeparam>
      <returns>一个组序列。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="action" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
      <summary>根据指定的键选择器函数对序列中的元素进行并行分组，并且从每个组及其键中创建结果值。 通过使用指定的函数对每个组的元素进行投影。</summary>
      <param name="source">要对其元素进行分组的序列。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="elementSelector">用于将每个源元素映射到 IGrouping&lt;TKey, TElement&gt; 中的元素的函数。</param>
      <param name="resultSelector">用于从每个组中创建结果值的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <typeparam name="TElement">每个 IGrouping{TKey, TElement} 中的元素的类型。</typeparam>
      <typeparam name="TResult">返回的结果值的类型 <paramref name="resultSelector" />。</typeparam>
      <returns>一种类型的元素序列 <paramref name="TResult" /> 其中的每个元素都表示对一组及其键的投影。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="action" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据指定的键选择器函数对序列中的元素进行分组，并且从每个组及其键中创建结果值。 通过使用指定的比较器对键值进行比较，并且通过使用指定的函数对每个组的元素进行投影。</summary>
      <param name="source">要对其元素进行分组的序列。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="elementSelector">用于将每个源元素映射到 IGrouping{Key, TElement} 中的元素的函数。</param>
      <param name="resultSelector">用于从每个组中创建结果值的函数。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对键进行比较。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <typeparam name="TElement">每个 IGrouping{TKey, TElement} 中的元素的类型。</typeparam>
      <typeparam name="TResult">返回的结果值的类型 <paramref name="resultSelector" />。</typeparam>
      <returns>一种类型的元素序列 <paramref name="TResult" /> 其中的每个元素都表示对一组及其键的投影。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="action" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>切勿调用此 GroupJoin 重载。 此方法已标记为过时，并且总是引发 <see cref="T:System.NotSupportedException" /> 时调用。</summary>
      <param name="outer">未使用此参数。</param>
      <param name="inner">未使用此参数。</param>
      <param name="outerKeySelector">未使用此参数。</param>
      <param name="innerKeySelector">未使用此参数。</param>
      <param name="resultSelector">未使用此参数。</param>
      <typeparam name="TOuter">未使用此类型参数。</typeparam>
      <typeparam name="TInner">未使用此类型参数。</typeparam>
      <typeparam name="TKey">未使用此类型参数。</typeparam>
      <typeparam name="TResult">未使用此类型参数。</typeparam>
      <returns>此重载总是会引发 <see cref="T:System.NotSupportedException" />。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="action" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>切勿调用此 GroupJoin 重载。 此方法已标记为过时，并且总是引发 <see cref="T:System.NotSupportedException" /> 时调用。</summary>
      <param name="outer">未使用此参数。</param>
      <param name="inner">未使用此参数。</param>
      <param name="outerKeySelector">未使用此参数。</param>
      <param name="innerKeySelector">未使用此参数。</param>
      <param name="resultSelector">未使用此参数。</param>
      <param name="comparer">未使用此参数。</param>
      <typeparam name="TOuter">未使用此类型参数。</typeparam>
      <typeparam name="TInner">未使用此类型参数。</typeparam>
      <typeparam name="TKey">未使用此类型参数。</typeparam>
      <typeparam name="TResult">未使用此类型参数。</typeparam>
      <returns>此重载总是会引发 <see cref="T:System.NotSupportedException" />。</returns>
      <exception cref="T:System.NotSupportedException">当调用此方法时出现异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>基于键相等对两个序列的元素进行并行关联并对结果进行分组。 使用默认的相等比较器对键进行比较。</summary>
      <param name="outer">要联接的第一个序列。</param>
      <param name="inner">要与第一个序列联接的序列。</param>
      <param name="outerKeySelector">用于从第一个序列的每个元素提取联接键的函数。</param>
      <param name="innerKeySelector">用于从第二个序列的每个元素提取联接键的函数。</param>
      <param name="resultSelector">用于从第一个序列的元素和第二个序列的匹配元素集合中创建结果元素的函数。</param>
      <typeparam name="TOuter">第二个序列中的元素的类型。</typeparam>
      <typeparam name="TInner">第一个序列中的元素的类型。</typeparam>
      <typeparam name="TKey">键选择器函数返回的键的类型。</typeparam>
      <typeparam name="TResult">结果元素的类型。</typeparam>
      <returns>具有类型元素的一系列 <paramref name="TResult" /> 通过对两个序列执行分组的联接获得的。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="action" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>基于键相等对两个序列的元素进行并行关联并对结果进行分组。 指定 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 用来对键进行比较。</summary>
      <param name="outer">要联接的第一个序列。</param>
      <param name="inner">要与第一个序列联接的序列。</param>
      <param name="outerKeySelector">用于从第一个序列的每个元素提取联接键的函数。</param>
      <param name="innerKeySelector">用于从第二个序列的每个元素提取联接键的函数。</param>
      <param name="resultSelector">用于从第一个序列的元素和第二个序列的匹配元素集合中创建结果元素的函数。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 键进行哈希和比较。</param>
      <typeparam name="TOuter">第二个序列中的元素的类型。</typeparam>
      <typeparam name="TInner">第一个序列中的元素的类型。</typeparam>
      <typeparam name="TKey">键选择器函数返回的键的类型。</typeparam>
      <typeparam name="TResult">结果元素的类型。</typeparam>
      <returns>具有类型元素的一系列 <paramref name="TResult" /> 通过对两个序列执行分组的联接获得的。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="action" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>切勿调用此 Intersect 重载。 此方法已标记为过时，并且总是引发 <see cref="T:System.NotSupportedException" /> 时调用。</summary>
      <param name="first">未使用此参数。</param>
      <param name="second">未使用此参数。</param>
      <typeparam name="TSource">未使用此类型参数。</typeparam>
      <returns>此重载总是会引发 <see cref="T:System.NotSupportedException" />。</returns>
      <exception cref="T:System.NotSupportedException">当调用此方法时出现异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>切勿调用此 Intersect 重载。 此方法已标记为过时，并且总是引发 <see cref="T:System.NotSupportedException" /> 时调用。</summary>
      <param name="first">未使用此参数。</param>
      <param name="second">未使用此参数。</param>
      <param name="comparer">未使用此参数。</param>
      <typeparam name="TSource">未使用此类型参数。</typeparam>
      <returns>此重载总是会引发 <see cref="T:System.NotSupportedException" />。</returns>
      <exception cref="T:System.NotSupportedException">当调用此方法时出现异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>通过使用默认的相等比较器对值进行比较，生成两个并行序列的交集。</summary>
      <param name="first">也会显示在其非重复元素的序列 <paramref name="second" /> 将返回。</param>
      <param name="second">一个序列，其中的同时出现在第一个序列中的非重复元素将被返回。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <returns>包含组成两个序列交集的元素的序列。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="action" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>通过使用指定的 IEqualityComparer{T} 对值进行比较，生成两个并行序列的交集。</summary>
      <param name="first">也会显示在其非重复元素的序列 <paramref name="second" /> 将返回。</param>
      <param name="second">一个序列，其中的同时出现在第一个序列中的非重复元素将被返回。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <returns>包含组成两个序列交集的元素的序列。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="action" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>切勿调用此 Join 重载。 此方法已标记为过时，并且总是引发 <see cref="T:System.NotSupportedException" /> 时调用。</summary>
      <param name="outer">未使用此参数。</param>
      <param name="inner">未使用此参数。</param>
      <param name="outerKeySelector">未使用此参数。</param>
      <param name="innerKeySelector">未使用此参数。</param>
      <param name="resultSelector">未使用此参数。</param>
      <typeparam name="TOuter">未使用此类型参数。</typeparam>
      <typeparam name="TInner">未使用此类型参数。</typeparam>
      <typeparam name="TKey">未使用此类型参数。</typeparam>
      <typeparam name="TResult">未使用此类型参数。</typeparam>
      <returns>此重载总是会引发 <see cref="T:System.NotSupportedException" />。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="action" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>切勿调用此 Join 重载。 此方法已标记为过时，并且总是引发 <see cref="T:System.NotSupportedException" /> 时调用。</summary>
      <param name="outer">未使用此参数。</param>
      <param name="inner">未使用此参数。</param>
      <param name="outerKeySelector">未使用此参数。</param>
      <param name="innerKeySelector">未使用此参数。</param>
      <param name="resultSelector">未使用此参数。</param>
      <param name="comparer">未使用此参数。</param>
      <typeparam name="TOuter">未使用此类型参数。</typeparam>
      <typeparam name="TInner">未使用此类型参数。</typeparam>
      <typeparam name="TKey">未使用此类型参数。</typeparam>
      <typeparam name="TResult">未使用此类型参数。</typeparam>
      <returns>此重载总是会引发 <see cref="T:System.NotSupportedException" />。</returns>
      <exception cref="T:System.NotSupportedException">当调用此方法时出现异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>基于匹配键对两个序列的元素进行并行关联。 使用默认的相等比较器对键进行比较。</summary>
      <param name="outer">要联接的第一个序列。</param>
      <param name="inner">要与第一个序列联接的序列。</param>
      <param name="outerKeySelector">用于从第一个序列的每个元素提取联接键的函数。</param>
      <param name="innerKeySelector">用于从第二个序列的每个元素提取联接键的函数。</param>
      <param name="resultSelector">用于从两个匹配元素创建结果元素的函数。</param>
      <typeparam name="TOuter">第二个序列中的元素的类型。</typeparam>
      <typeparam name="TInner">第一个序列中的元素的类型。</typeparam>
      <typeparam name="TKey">键选择器函数返回的键的类型。</typeparam>
      <typeparam name="TResult">结果元素的类型。</typeparam>
      <returns>具有类型元素的一系列 <paramref name="TResult" /> 通过对两个序列执行内部联接获得的。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="action" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>基于匹配键对两个序列的元素进行并行关联。 指定 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 用来对键进行比较。</summary>
      <param name="outer">要联接的第一个序列。</param>
      <param name="inner">要与第一个序列联接的序列。</param>
      <param name="outerKeySelector">用于从第一个序列的每个元素提取联接键的函数。</param>
      <param name="innerKeySelector">用于从第二个序列的每个元素提取联接键的函数。</param>
      <param name="resultSelector">用于从两个匹配元素创建结果元素的函数。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 键进行哈希和比较。</param>
      <typeparam name="TOuter">第二个序列中的元素的类型。</typeparam>
      <typeparam name="TInner">第一个序列中的元素的类型。</typeparam>
      <typeparam name="TKey">键选择器函数返回的键的类型。</typeparam>
      <typeparam name="TResult">结果元素的类型。</typeparam>
      <returns>具有类型元素的一系列 <paramref name="TResult" /> 通过对两个序列执行内部联接获得的。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="action" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0})">
      <summary>返回并行序列中的最后一个元素。</summary>
      <param name="source">要从中返回最后一个元素的序列。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>源序列中最后位置处的值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>返回并行序列中满足指定条件的最后一个元素。</summary>
      <param name="source">要从中返回元素的序列。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中通过指定谓词函数中的测试的最后一个元素。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">中的没有任何元素 <paramref name="source" /> 满足该条件在 <paramref name="predicate" />。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0})">
      <summary>返回并行序列中的最后一个元素；如果该序列中不包含任何元素，则返回默认值。</summary>
      <param name="source">要从中返回元素的序列。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>如果源序列为空，则返回 default()；否则返回该序列中的最后一个元素。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>返回并行序列中满足条件的最后一个元素；如果未找到这样的元素，则返回默认值。</summary>
      <param name="source">要从中返回元素的序列。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>如果序列为空或没有元素通过谓词函数中的测试，则返回 default()；否则，返回通过谓词函数中的测试的最后一个元素。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0})">
      <summary>返回一个 Int64，表示并行序列中的元素的总数。</summary>
      <param name="source">包含要计数的元素的序列。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>输入序列中的元素数量。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">源中的元素数大于 <see cref="F:System.Int64.MaxValue" />。 -或者-查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.OverflowException">计算所得的结果是否大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>返回一个 Int64，表示并行序列中满足条件的元素的数量。</summary>
      <param name="source">包含要计数的元素的序列。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>一个数字，表示序列中满足谓词函数条件的元素数量。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">源中的元素数大于 <see cref="F:System.Int64.MaxValue" />。 -或者-查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.OverflowException">计算所得的结果是否大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Decimal})">
      <summary>返回值的并行序列中的最大值。</summary>
      <param name="source">要确定其最大值的值序列。</param>
      <returns>序列中的最大值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Double})">
      <summary>返回值的并行序列中的最大值。</summary>
      <param name="source">要确定其最大值的值序列。</param>
      <returns>序列中的最大值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int32})">
      <summary>返回值的并行序列中的最大值。</summary>
      <param name="source">要确定其最大值的值序列。</param>
      <returns>序列中的最大值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int64})">
      <summary>返回值的并行序列中的最大值。</summary>
      <param name="source">要确定其最大值的值序列。</param>
      <returns>序列中的最大值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>返回值的并行序列中的最大值。</summary>
      <param name="source">要确定其最大值的值序列。</param>
      <returns>序列中的最大值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>返回值的并行序列中的最大值。</summary>
      <param name="source">要确定其最大值的值序列。</param>
      <returns>序列中的最大值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>返回值的并行序列中的最大值。</summary>
      <param name="source">要确定其最大值的值序列。</param>
      <returns>序列中的最大值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>返回值的并行序列中的最大值。</summary>
      <param name="source">要确定其最大值的值序列。</param>
      <returns>序列中的最大值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>返回值的并行序列中的最大值。</summary>
      <param name="source">要确定其最大值的值序列。</param>
      <returns>序列中的最大值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Single})">
      <summary>返回值的并行序列中的最大值。</summary>
      <param name="source">要确定其最大值的值序列。</param>
      <returns>序列中的最大值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0})">
      <summary>返回值的并行序列中的最大值。</summary>
      <param name="source">要确定其最大值的值序列。</param>
      <typeparam name="TSource">源序列中的元素的类型。</typeparam>
      <returns>序列中的最大值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素和 <paramref name="TSource" /> 是不可为 null 的值类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最大值。</summary>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中的最大值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素和 <paramref name="TSource" /> 是不可为 null 的值类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最大值。</summary>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中的最大值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素和 <paramref name="TSource" /> 是不可为 null 的值类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最大值。</summary>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中的最大值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素和 <paramref name="TSource" /> 是不可为 null 的值类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最大值。</summary>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中的最大值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素和 <paramref name="TSource" /> 是不可为 null 的值类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最大值。</summary>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中的最大值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最大值。</summary>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中的最大值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最大值。</summary>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中的最大值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最大值。</summary>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中的最大值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最大值。</summary>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中的最大值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最大值。</summary>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中的最大值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素和 <paramref name="TSource" /> 是不可为 null 的值类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最大值。</summary>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TResult">返回的值的类型 <paramref name="selector" />。</typeparam>
      <returns>序列中的最大值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素和 <paramref name="TSource" /> 是不可为 null 的值类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Decimal})">
      <summary>返回值的并行序列中的最小值。</summary>
      <param name="source">要确定其最小值的值序列。</param>
      <returns>序列中的最小值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素和 <paramref name="TSource" /> 是不可为 null 的值类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Double})">
      <summary>返回值的并行序列中的最小值。</summary>
      <param name="source">要确定其最小值的值序列。</param>
      <returns>序列中的最小值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素和 <paramref name="TSource" /> 是不可为 null 的值类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int32})">
      <summary>返回值的并行序列中的最小值。</summary>
      <param name="source">要确定其最小值的值序列。</param>
      <returns>序列中的最小值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素和 <paramref name="TSource" /> 是不可为 null 的值类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int64})">
      <summary>返回值的并行序列中的最小值。</summary>
      <param name="source">要确定其最小值的值序列。</param>
      <returns>序列中的最小值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素和 <paramref name="TSource" /> 是不可为 null 的值类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>返回值的并行序列中的最小值。</summary>
      <param name="source">要确定其最小值的值序列。</param>
      <returns>序列中的最小值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>返回值的并行序列中的最小值。</summary>
      <param name="source">要确定其最小值的值序列。</param>
      <returns>序列中的最小值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>返回值的并行序列中的最小值。</summary>
      <param name="source">要确定其最小值的值序列。</param>
      <returns>序列中的最小值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>返回值的并行序列中的最小值。</summary>
      <param name="source">要确定其最小值的值序列。</param>
      <returns>序列中的最小值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>返回值的并行序列中的最小值。</summary>
      <param name="source">要确定其最小值的值序列。</param>
      <returns>序列中的最小值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Single})">
      <summary>返回值的并行序列中的最小值。</summary>
      <param name="source">要确定其最小值的值序列。</param>
      <returns>序列中的最小值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素和 <paramref name="TSource" /> 是不可为 null 的值类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0})">
      <summary>返回值的并行序列中的最小值。</summary>
      <param name="source">要确定其最小值的值序列。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中的最小值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素和 <paramref name="TSource" /> 是不可为 null 的值类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最小值。</summary>
      <param name="source">要确定其最小值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中的最小值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素和 <paramref name="TSource" /> 是不可为 null 的值类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最小值。</summary>
      <param name="source">要确定其最小值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中的最小值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素和 <paramref name="TSource" /> 是不可为 null 的值类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最小值。</summary>
      <param name="source">要确定其最小值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中的最小值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素和 <paramref name="TSource" /> 是不可为 null 的值类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最小值。</summary>
      <param name="source">要确定其最小值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中的最小值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素和 <paramref name="TSource" /> 是不可为 null 的值类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最小值。</summary>
      <param name="source">要确定其最小值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中的最小值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最小值。</summary>
      <param name="source">要确定其最小值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中的最小值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最小值。</summary>
      <param name="source">要确定其最小值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中的最小值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最小值。</summary>
      <param name="source">要确定其最小值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中的最小值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最小值。</summary>
      <param name="source">要确定其最小值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中的最小值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最小值。</summary>
      <param name="source">要确定其最小值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中的最小值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素和 <paramref name="TSource" /> 是不可为 null 的值类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>对一个序列中的每个元素并行调用转换函数，并返回最小值。</summary>
      <param name="source">要确定其最小值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TResult">返回的值的类型 <paramref name="selector" />。</typeparam>
      <returns>序列中的最小值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素和 <paramref name="TSource" /> 是不可为 null 的值类型。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OfType``1(System.Linq.ParallelQuery)">
      <summary>根据指定类型筛选 ParallelQuery 的元素。</summary>
      <param name="source">要筛选其元素的序列。</param>
      <typeparam name="TResult">筛选序列元素所根据的类型。</typeparam>
      <returns>一个序列，其中包含类型的输入序列中的元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>根据键按升序对序列中的元素进行并行排序。</summary>
      <param name="source">一个要排序的值序列。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <returns>其中的元素将根据某个键进行排序的 OrderedParallelQuery{TSource}。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>使用指定的比较器按升序对序列中的元素进行并行排序。</summary>
      <param name="source">一个要排序的值序列。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <param name="comparer">一个用于比较键的 IComparer{TKey}。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <returns>其中的元素将根据某个键进行排序的 OrderedParallelQuery{TSource}。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>根据键按降序对序列中的元素进行并行排序。</summary>
      <param name="source">一个要排序的值序列。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <returns>一个 OrderedParallelQuery{TSource}，其元素将根据某个键按降序进行排序。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>使用指定的比较器按降序对序列的元素排序。</summary>
      <param name="source">一个要排序的值序列。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <param name="comparer">一个用于比较键的 IComparer{TKey}。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <returns>一个 OrderedParallelQuery{TSource}，其元素将根据某个键按降序进行排序。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="KeySelector" /> 为空引用 (在 Visual Basic 中为 Nothing)...</exception>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Range(System.Int32,System.Int32)">
      <summary>生成指定范围内的整数的并行序列。</summary>
      <param name="start">序列中第一个整数的值。</param>
      <param name="count">要生成的顺序整数的数目。</param>
      <returns>C# 中的 IEnumerable&lt;Int32&gt; 或 Visual Basic 中的 IEnumerable(Of Int32)，其中包含某个范围的顺序整数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 小于 0- <paramref name="start" /> + <paramref name="count" /> -1 大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Repeat``1(``0,System.Int32)">
      <summary>生成包含一个重复值的并行序列。</summary>
      <param name="element">要重复的值。</param>
      <param name="count">在生成序列中重复该值的次数。</param>
      <typeparam name="TResult">要在结果序列中重复的值的类型。</typeparam>
      <returns>一个包含重复值的序列。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 小于 0。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Reverse``1(System.Linq.ParallelQuery{``0})">
      <summary>反转并行序列中元素的顺序。</summary>
      <param name="source">要反转的值序列。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>一个序列，其元素以相反顺序对应于输入序列的元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>将序列中的每个元素并行投影到新窗体中。</summary>
      <param name="source">一个值序列，要对该序列调用转换函数。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TResult">选择器返回的元素的类型。</typeparam>
      <returns>一个序列，其元素是结果的调用转换函数的每个元素 <paramref name="source" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,``1})">
      <summary>通过合并元素的索引，将序列的每个元素并行投影到新窗体中。</summary>
      <param name="source">一个值序列，要对该序列调用转换函数。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TResult">选择器返回的元素的类型。</typeparam>
      <returns>一个序列，其元素是结果的调用转换函数的每个元素 <paramref name="source" />, ，其提供给对索引基于 <paramref name="selector" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.OverflowException">多个 <see cref="F:System.Int32.MaxValue" /> 元素都枚举的查询。 在流处理方案中可能出现此情况。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>以并行方式投影到序列的每个元素 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 并将合并为一个序列将结果序列。</summary>
      <param name="source">一个要投影的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TResult">选择器返回的序列元素的类型。</typeparam>
      <returns>一个序列，其元素是对输入序列的每个元素调用一对多转换函数的结果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
      <summary>以并行方式投影到序列的每个元素 <see cref="T:System.Collections.Generic.IEnumerable`1" />, ，并将合并为一个序列将结果序列。 每个源元素的索引用于该元素的投影表。</summary>
      <param name="source">一个要投影的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TResult">选择器返回的序列元素的类型。</typeparam>
      <returns>一个序列，其元素是对输入序列的每个元素调用一对多转换函数的结果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.OverflowException">多个 <see cref="F:System.Int32.MaxValue" /> 元素都枚举的查询。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>一个序列的每个元素投影 <see cref="T:System.Collections.Generic.IEnumerable`1" />, 将平展为一个序列，将结果序列，其中调用结果选择器函数对每个元素。</summary>
      <param name="source">一个要投影的值序列。</param>
      <param name="collectionSelector">一个应用于每个源元素的转换函数；函数的第二个参数表示源元素的索引。</param>
      <param name="resultSelector">用于从第一个序列的元素和第二个序列的匹配元素集合中创建结果元素的函数。</param>
      <typeparam name="TSource">中间元素的类型由收集 <paramref name="collectionSelector" />。</typeparam>
      <typeparam name="TCollection">元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TResult">结果序列中的元素的类型。</typeparam>
      <returns>一个序列，其元素是调用一种一对多转换函数的结果 <paramref name="collectionSelector" /> 的每个元素 <paramref name="source" /> 根据索引，提供给 <paramref name="collectionSelector" />, ，然后将每个这些序列元素和其相应的源元素映射到一个结果元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.OverflowException">多个 <see cref="F:System.Int32.MaxValue" /> 元素都枚举的查询。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>一个序列的每个元素投影 <see cref="T:System.Collections.Generic.IEnumerable`1" />, 将平展为一个序列，将结果序列，其中调用结果选择器函数对每个元素。 每个源元素的索引用于该元素的中间投影表。</summary>
      <param name="source">一个要投影的值序列。</param>
      <param name="collectionSelector">一个应用于每个源元素的转换函数；函数的第二个参数表示源元素的索引。</param>
      <param name="resultSelector">用于从第一个序列的元素和第二个序列的匹配元素集合中创建结果元素的函数。</param>
      <typeparam name="TSource">中间元素的类型由收集 <paramref name="collectionSelector" />。</typeparam>
      <typeparam name="TCollection">元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TResult">要返回的元素的类型。</typeparam>
      <returns>一个序列，其元素是调用一种一对多转换函数的结果 <paramref name="collectionSelector" /> 的每个元素 <paramref name="source" /> 根据索引，提供给 <paramref name="collectionSelector" />, ，然后将每个这些序列元素和其相应的源元素映射到一个结果元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.OverflowException">多个 <see cref="F:System.Int32.MaxValue" /> 元素都枚举的查询。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>切勿调用此 SequenceEqual 重载。 此方法已标记为过时，并且总是引发 <see cref="T:System.NotSupportedException" /> 时调用。</summary>
      <param name="first">未使用此参数。</param>
      <param name="second">未使用此参数。</param>
      <typeparam name="TSource">未使用此类型参数。</typeparam>
      <returns>此重载总是会引发 <see cref="T:System.NotSupportedException" />。</returns>
      <exception cref="T:System.NotSupportedException">每次调用此方法时引发。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>切勿调用此 SequenceEqual 重载。 此方法已标记为过时，并且总是引发 <see cref="T:System.NotSupportedException" /> 时调用。</summary>
      <param name="first">未使用此参数。</param>
      <param name="second">未使用此参数。</param>
      <param name="comparer">未使用此参数。</param>
      <typeparam name="TSource">未使用此类型参数。</typeparam>
      <returns>此重载总是会引发 <see cref="T:System.NotSupportedException" />。</returns>
      <exception cref="T:System.NotSupportedException">每次调用此方法时引发。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>通过使用相应类型的默认相等比较器对序列的元素进行比较，以确定两个并行序列是否相等。</summary>
      <param name="first">要与第二个序列进行比较的序列。</param>
      <param name="second">要与第一个输入序列进行比较的序列。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <returns>如果根据相应类型的默认相等比较器，两个源序列的长度相等，且其相应元素相等，则为 true；否则为 false。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>使用指定的 IEqualityComparer{T} 对两个并行序列的元素进行比较，以确定这两个序列是否相等。</summary>
      <param name="first">用于与进行比较的序列 <paramref name="second" />。</param>
      <param name="second">要与第一个输入序列进行比较的序列。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 要用来比较元素。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <returns>如果根据相应类型的默认相等比较器，两个源序列的长度相等，且其相应元素相等，则为 true；否则为 false。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0})">
      <summary>返回并行序列的唯一元素；如果该序列并非恰好包含一个元素，则会引发异常。</summary>
      <param name="source">要返回其单个元素的序列。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>输入序列的单个元素。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">输入的序列包含多个元素。 -或者-输入的序列为空。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>返回并行序列中满足指定条件的唯一元素；如果有多个这样的元素存在，则会引发异常。</summary>
      <param name="source">要返回其单个元素的序列。</param>
      <param name="predicate">用于测试元素是否满足条件的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>输入序列中满足条件的单个元素。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">没有元素满足该条件在 <paramref name="predicate" />。 -或-多个元素满足该条件在 <paramref name="predicate" />。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0})">
      <summary>返回并行序列中的唯一元素；如果该序列为空，则返回默认值；如果该序列包含多个元素，此方法将引发异常。</summary>
      <param name="source">要返回其单个元素的序列。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>返回输入序列的单个元素；如果序列不包含任何元素，则返回 default()。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>返回并行序列中满足指定条件的唯一元素；如果这类元素不存在，则返回默认值；如果有多个元素满足该条件，此方法将引发异常。</summary>
      <param name="source">要返回其单个元素的序列。</param>
      <param name="predicate">用于测试元素是否满足条件的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>输入序列中满足条件的单个元素，如果未找到这样的元素，则为 default()。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 为空或返回值是多个元素。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Skip``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>跳过并行序列中指定数量的元素，然后返回剩余的元素。</summary>
      <param name="source">要从其返回元素的序列。</param>
      <param name="count">返回剩余元素前要跳过的元素数量。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>一个序列，其中包含输入序列中的指定索引后出现的元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.OverflowException">Count 值大于 <see cref="F:System.Int32.MaxValue" /></exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>跳过并行序列中满足指定条件的任何元素，然后返回剩余元素。</summary>
      <param name="source">要从其返回元素的序列。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>一个序列，它包含输入序列中从没有通过谓词指定的测试的线性系列中第一个元素开始的元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>跳过并行序列中满足指定条件的任何元素，然后返回剩余元素。 将在谓词函数的逻辑中使用元素的索引。</summary>
      <param name="source">要从其返回元素的序列。</param>
      <param name="predicate">用于测试每个源元素是否满足条件的函数；该函数的第二个参数表示源元素的索引。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>一个序列，它包含输入序列中从没有通过谓词指定的测试的线性系列中第一个元素开始的元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.OverflowException">多个 <see cref="F:System.Int32.MaxValue" /> 元素都枚举的查询。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Decimal})">
      <summary>并行计算一个值序列的和。</summary>
      <param name="source">一个要对其求和的值序列。</param>
      <returns>序列中投影值的总和。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">之和大于 <see cref="F:System.Decimal.MaxValue" />。 -或者-查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Double})">
      <summary>并行计算一个值序列的和。</summary>
      <param name="source">一个要对其求和的值序列。</param>
      <returns>序列中投影值的总和。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">之和大于 <see cref="F:System.Double.MaxValue" />。 -或者-查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int32})">
      <summary>并行计算一个值序列的和。</summary>
      <param name="source">一个要对其求和的值序列。</param>
      <returns>序列中投影值的总和。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">之和大于 <see cref="F:System.Int32.MaxValue" />。 -或者-查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int64})">
      <summary>并行计算一个值序列的和。</summary>
      <param name="source">一个要对其求和的值序列。</param>
      <returns>序列中投影值的总和。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">之和大于 <see cref="F:System.Int64.MaxValue" />。 -或者-查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>并行计算一个值序列的和。</summary>
      <param name="source">一个要对其求和的值序列。</param>
      <returns>序列中投影值的总和。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">之和大于 <see cref="F:System.Decimal.MaxValue" />。 -或者-查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>并行计算一个值序列的和。</summary>
      <param name="source">一个要对其求和的值序列。</param>
      <returns>序列中投影值的总和。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">之和大于 <see cref="F:System.Double.MaxValue" />。 -或者-查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>并行计算一个值序列的和。</summary>
      <param name="source">一个要对其求和的值序列。</param>
      <returns>序列中投影值的总和。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">之和大于 <see cref="F:System.Int32.MaxValue" />。 -或者-查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>并行计算一个值序列的和。</summary>
      <param name="source">一个要对其求和的值序列。</param>
      <returns>序列中投影值的总和。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">之和大于 <see cref="F:System.Int64.MaxValue" />。 -或者-查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>并行计算一个值序列的和。</summary>
      <param name="source">一个要对其求和的值序列。</param>
      <returns>序列中投影值的总和。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">之和大于 <see cref="F:System.Single.MaxValue" />。 -或者-查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Single})">
      <summary>并行计算一个值序列的和。</summary>
      <param name="source">一个要对其求和的值序列。</param>
      <returns>序列中投影值的总和。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">之和大于 <see cref="F:System.Single.MaxValue" />。 -或者-查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>并行计算一个值序列的和，这些值可通过对输入序列的每个元素调用转换函数获得。</summary>
      <param name="source">一个要对其求和的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中投影值的总和。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">之和大于 <see cref="F:System.Decimal.MaxValue" />。 -或者-查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>并行计算一个值序列的和，这些值可通过对输入序列的每个元素调用转换函数获得。</summary>
      <param name="source">一个要对其求和的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中投影值的总和。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">之和大于 <see cref="F:System.Double.MaxValue" />。 -或者-查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>并行计算一个值序列的和，这些值可通过对输入序列的每个元素调用转换函数获得。</summary>
      <param name="source">一个要对其求和的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">源序列中的元素的类型。</typeparam>
      <returns>序列中投影值的总和。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">之和大于 <see cref="F:System.Int32.MaxValue" />。 -或者-查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>并行计算一个值序列的和，这些值可通过对输入序列的每个元素调用转换函数获得。</summary>
      <param name="source">一个要对其求和的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中投影值的总和。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">之和大于 <see cref="F:System.Int64.MaxValue" />。 -或者-查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>并行计算一个值序列的和，这些值可通过对输入序列的每个元素调用转换函数获得。</summary>
      <param name="source">一个要对其求和的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中投影值的总和。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">之和大于 <see cref="F:System.Decimal.MaxValue" />。 -或者-查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>并行计算一个值序列的和，这些值可通过对输入序列的每个元素调用转换函数获得。</summary>
      <param name="source">一个要对其求和的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中投影值的总和。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">之和大于 <see cref="F:System.Double.MaxValue" />。 -或者-查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>并行计算一个值序列的和，这些值可通过对输入序列的每个元素调用转换函数获得。</summary>
      <param name="source">一个要对其求和的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中投影值的总和。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">之和大于 <see cref="F:System.Int32.MaxValue" />。 -或者-查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>并行计算一个值序列的和，这些值可通过对输入序列的每个元素调用转换函数获得。</summary>
      <param name="source">一个要对其求和的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中投影值的总和。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">之和大于 <see cref="F:System.Int64.MaxValue" />。 -或者-查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>并行计算一个值序列的和，这些值可通过对输入序列的每个元素调用转换函数获得。</summary>
      <param name="source">一个要对其求和的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中投影值的总和。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">之和大于 <see cref="F:System.Single.MaxValue" />。 -或者-查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>并行计算一个值序列的和，这些值可通过对输入序列的每个元素调用转换函数获得。</summary>
      <param name="source">一个要对其求和的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中投影值的总和。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">之和大于 <see cref="F:System.Single.MaxValue" />。 -或者-查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Take``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>从并行序列的开头返回指定数量的连续元素。</summary>
      <param name="source">要从其返回元素的序列。</param>
      <param name="count">要返回的元素数量。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>一个序列，其中包含从输入序列开始处起的指定数量的元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>只要指定的条件为 true，就会返回并行序列的元素。</summary>
      <param name="source">要从其返回元素的序列。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>一个序列，它包含输入序列中出现在无法再通过测试的元素之前的元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>只要指定的条件为 true，就会返回并行序列的元素。 将在谓词函数的逻辑中使用元素的索引。</summary>
      <param name="source">要从其返回元素的序列。</param>
      <param name="predicate">用于测试每个源元素是否满足条件的函数；该函数的第二个参数表示源元素的索引。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>一个序列，它包含输入序列中出现在无法再通过测试的元素之前的元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.OverflowException">多个 <see cref="F:System.Int32.MaxValue" /> 元素都用此查询枚举。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})">
      <summary>根据某个键按升序对序列中的元素并行执行后续排序。</summary>
      <param name="source">一个 OrderedParallelQuery{TSource}，包含要排序的元素。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <returns>其中的元素将根据某个键进行排序的 OrderedParallelQuery{TSource}。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>使用指定的比较器按升序对序列中的元素并行执行后续排序。</summary>
      <param name="source">一个 OrderedParallelQuery{TSource}，包含要排序的元素。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <param name="comparer">一个用于比较键的 IComparer{TKey}。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <returns>其中的元素将根据某个键进行排序的 OrderedParallelQuery{TSource}。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})">
      <summary>根据某个键按降序对序列中的元素并行执行后续排序。</summary>
      <param name="source">一个 OrderedParallelQuery{TSource}，包含要排序的元素。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <returns>一个序列，将根据键按降序对其元素进行排序。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>使用指定的比较器按降序对序列中的元素并行执行后续排序。</summary>
      <param name="source">一个 OrderedParallelQuery{TSource}，包含要排序的元素。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <param name="comparer">一个用于比较键的 IComparer{TKey}。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <returns>一个序列，将根据键按降序对其元素进行排序。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToArray``1(System.Linq.ParallelQuery{``0})">
      <summary>创建一个数组，从 <see cref="T:System.Linq.ParallelQuery`1" />。</summary>
      <param name="source">要从其中创建数组的序列。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>一个包含输入序列中的元素的数组。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 从 <see cref="T:System.Linq.ParallelQuery`1" /> 根据指定的键选择器函数。</summary>
      <param name="source">序列以创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 从。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <returns>一个 <see cref="T:System.Collections.Generic.Dictionary`2" /> ，其中包含键和值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> 产生为空引用 (在 Visual Basic 中为 Nothing) 的密钥。 - <paramref name="keySelector" /> 产生了重复的两个元素的键。 -或者-查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>创建 <see cref="T:System.Collections.Generic.Dictionary`2" />  从 <see cref="T:System.Linq.ParallelQuery`1" /> 根据指定的键选择器函数和键比较器。</summary>
      <param name="source">序列以创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 从。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对键进行比较。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <returns>一个 <see cref="T:System.Collections.Generic.Dictionary`2" /> ，其中包含键和值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> 产生为空引用 (在 Visual Basic 中为 Nothing) 的密钥。 - <paramref name="keySelector" /> 产生了重复的两个元素的键。 -或者-查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 从 <see cref="T:System.Linq.ParallelQuery`1" /> 根据指定的键选择器和元素选择器函数。</summary>
      <param name="source">序列以创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 从。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="elementSelector">用于从每个元素产生结果元素值的转换函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <typeparam name="TElement">返回的值的类型 <paramref name="elementSelector" />。</typeparam>
      <returns>一个 <see cref="T:System.Collections.Generic.Dictionary`2" /> ，其中包含类型的值 <paramref name="TElement" /> 从输入序列中选择</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> 产生为空引用 (在 Visual Basic 中为 Nothing) 的密钥。 - <paramref name="keySelector" /> 产生了重复的两个元素的键。 -或者-查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 从 <see cref="T:System.Linq.ParallelQuery`1" /> 根据指定的键选择器函数、 比较器和元素选择器函数。</summary>
      <param name="source">序列以创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 从。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="elementSelector">用于从每个元素产生结果元素值的转换函数。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对键进行比较。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <typeparam name="TElement">返回的值的类型 <paramref name="elementSelector" />。</typeparam>
      <returns>一个 <see cref="T:System.Collections.Generic.Dictionary`2" /> ，其中包含类型的值 <paramref name="TElement" /> 从输入序列中选择</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> 产生为空引用 (在 Visual Basic 中为 Nothing) 的密钥。 - <paramref name="keySelector" /> 产生了重复的两个元素的键。 -或者-查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToList``1(System.Linq.ParallelQuery{``0})">
      <summary>创建 <see cref="T:System.Collections.Generic.List`1" /> 从 <see cref="T:System.Linq.ParallelQuery`1" />。</summary>
      <param name="source">序列以创建 <see cref="T:System.Collections.Generic.List`1" /> 从。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>一个 <see cref="T:System.Collections.Generic.List`1" />  ，其中包含输入序列中的元素。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>创建 <see cref="T:System.Linq.ILookup`2" /> 从 <see cref="T:System.Linq.ParallelQuery`1" /> 根据指定的键选择器函数。</summary>
      <param name="source">序列以创建 <see cref="T:System.Linq.ILookup`2" /> 从。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <returns>一个 <see cref="T:System.Linq.ILookup`2" /> ，其中包含键和值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>创建 <see cref="T:System.Linq.ILookup`2" /> 从 <see cref="T:System.Linq.ParallelQuery`1" /> 根据指定的键选择器函数和键比较器。</summary>
      <param name="source">序列以创建 <see cref="T:System.Linq.ILookup`2" /> 从。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对键进行比较。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <returns>一个 <see cref="T:System.Linq.ILookup`2" /> ，其中包含键和值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>创建 <see cref="T:System.Linq.ILookup`2" /> 从 <see cref="T:System.Linq.ParallelQuery`1" /> 根据指定的键选择器和元素选择器函数。</summary>
      <param name="source">序列以创建 <see cref="T:System.Linq.ILookup`2" /> 从。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="elementSelector">用于从每个元素产生结果元素值的转换函数。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <typeparam name="TElement">返回的值的类型 <paramref name="elementSelector" />。</typeparam>
      <returns>一个 <see cref="T:System.Linq.ILookup`2" /> ，其中包含类型的值 <paramref name="TElement" /> 从输入序列中选择。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>创建 <see cref="T:System.Linq.ILookup`2" /> 从 <see cref="T:System.Linq.ParallelQuery`1" /> 根据指定的键选择器函数、 比较和元素选择器函数。</summary>
      <param name="source">序列以创建 <see cref="T:System.Linq.ILookup`2" /> 从。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="elementSelector">用于从每个元素产生结果元素值的转换函数。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对键进行比较。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <typeparam name="TElement">返回的值的类型 <paramref name="elementSelector" />。</typeparam>
      <returns>一个 Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;)，其中包含从输入序列中选择的 TElement 类型的值。</returns>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>切勿调用此 Union 重载。 此方法已标记为过时，并且总是引发 <see cref="T:System.NotSupportedException" /> 时调用。</summary>
      <param name="first">未使用此参数。</param>
      <param name="second">未使用此参数。</param>
      <typeparam name="TSource">未使用此类型参数。</typeparam>
      <returns>此重载总是会引发 <see cref="T:System.NotSupportedException" />。</returns>
      <exception cref="T:System.NotSupportedException">当调用此方法时出现异常。</exception>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>切勿调用此 Union 重载。 此方法已标记为过时，并且总是引发 <see cref="T:System.NotSupportedException" /> 时调用。</summary>
      <param name="first">未使用此参数。</param>
      <param name="second">未使用此参数。</param>
      <param name="comparer">未使用此参数。</param>
      <typeparam name="TSource">未使用此类型参数。</typeparam>
      <returns>此重载总是会引发 <see cref="T:System.NotSupportedException" />。</returns>
      <exception cref="T:System.NotSupportedException">当调用此方法时出现异常。</exception>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>通过使用默认的相等比较器，生成两个并行序列的并集。</summary>
      <param name="first">一个序列，其中的非重复元素构成并集的第一部分。</param>
      <param name="second">一个序列，其中的非重复元素构成并集的第二部分。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <returns>一个序列，其中包含两个输入序列中的非重复元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>通过使用指定的 IEqualityComparer{T} 生成两个并行序列的并集。</summary>
      <param name="first">一个序列，其中的非重复元素构成并集的第一部分。</param>
      <param name="second">一个序列，其中的非重复元素构成并集的第二部分。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <returns>一个序列，其中包含两个输入序列中的非重复元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>基于谓词并行筛选值序列。</summary>
      <param name="source">要筛选的序列。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">源的元素的类型。</typeparam>
      <returns>一个序列，其中包含输入序列中满足条件的元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>基于谓词并行筛选值序列。 将在谓词函数的逻辑中使用每个元素的索引。</summary>
      <param name="source">要筛选的序列。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">源的元素的类型。</typeparam>
      <returns>一个序列，其中包含输入序列中满足条件的元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.OverflowException">多个 <see cref="F:System.Int32.MaxValue" /> 元素都枚举的查询。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithCancellation``1(System.Linq.ParallelQuery{``0},System.Threading.CancellationToken)">
      <summary>集 <see cref="T:System.Threading.CancellationToken" /> 要查询相关联。</summary>
      <param name="source">要对其设置选项的 ParallelQuery。</param>
      <param name="cancellationToken">取消标记。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>表示与源相同的查询的 ParallelQuery，但带有已注册的取消标记。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.CancellationTokenSource" /> 与关联 <paramref name="cancellationToken" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="WithCancellation" /> 在查询中使用多次。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithDegreeOfParallelism``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>设置要在查询中使用的并行度。 并行度是将用于处理查询的同时执行的任务的最大数目。</summary>
      <param name="source">要对其设置并行度限制的 ParallelQuery。</param>
      <param name="degreeOfParallelism">查询的并行度。 默认值是 Math.Min (<see cref="P:System.Environment.ProcessorCount" />, ，MAX_SUPPORTED_DOP) 其中 MAX_SUPPORTED_DOP 为 512。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>表示与源相同的查询的 ParallelQuery，其中设置了对并行度的限制。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="degreeOfParallelism" /> 是小于 1 或大于 511。</exception>
      <exception cref="T:System.InvalidOperationException">在查询中多次使用 WithDegreeOfParallelism。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithExecutionMode``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelExecutionMode)">
      <summary>设置查询的执行模式。</summary>
      <param name="source">要对其设置选项的 ParallelQuery。</param>
      <param name="executionMode">执行查询使用的模式。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>表示与源相同的查询的 ParallelQuery，但带有已注册的执行模式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="executionMode" /> 不是有效 <see cref="T:System.Linq.ParallelExecutionMode" /> 值。</exception>
      <exception cref="T:System.InvalidOperationException">在查询中多次使用 WithExecutionMode。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithMergeOptions``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelMergeOptions)">
      <summary>设置此查询的合并选项，它指定查询对输出进行缓冲处理的方式。</summary>
      <param name="source">要对其设置选项的 ParallelQuery。</param>
      <param name="mergeOptions">要为此查询设置的合并选项。</param>
      <typeparam name="TSource">元素的类型 <paramref name="source" />。</typeparam>
      <returns>表示与源相同的查询的 ParallelQuery，但带有已注册的合并选项。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mergeOptions" /> 不是有效 <see cref="T:System.Linq.ParallelMergeOptions" /> 值。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="WithMergeOptions" /> 在查询中使用多次。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary>切勿调用此 Zip 重载。 此方法已标记为过时，并且总是引发 <see cref="T:System.NotSupportedException" /> 时调用。</summary>
      <param name="first">未使用此参数。</param>
      <param name="second">未使用此参数。</param>
      <param name="resultSelector">未使用此参数。</param>
      <typeparam name="TFirst">未使用此类型参数。</typeparam>
      <typeparam name="TSecond">未使用此类型参数。</typeparam>
      <typeparam name="TResult">未使用此类型参数。</typeparam>
      <returns>此重载总是会引发 <see cref="T:System.NotSupportedException" />。</returns>
      <exception cref="T:System.NotSupportedException">当调用此方法时出现异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``1,``2})">
      <summary>通过使用指定的谓词函数并行合并两个序列。</summary>
      <param name="first">要压缩的第一个序列。</param>
      <param name="second">要压缩的第二个序列。</param>
      <param name="resultSelector">用于从两个匹配元素创建结果元素的函数。</param>
      <typeparam name="TFirst">第一个序列中的元素的类型。</typeparam>
      <typeparam name="TSecond">第二个序列中的元素的类型。</typeparam>
      <typeparam name="TResult">返回元素的类型。</typeparam>
      <returns>具有类型元素的一系列 <paramref name="TResult" /> 通过执行获得 <paramref name="resultSelector" /> 成对对两个序列。 如果序列长度不相等，这将截断为较短序列的长度。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 或 <paramref name="resultSelector" /> 为空引用 (在 Visual Basic 中为 Nothing)。</exception>
      <exception cref="T:System.OperationCanceledException">查询已取消与通过传入令牌 <paramref name="WithCancellation" />。</exception>
      <exception cref="T:System.AggregateException">查询的计算过程中出现一个或多个异常。</exception>
    </member>
    <member name="M:System.Linq.ParallelQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问序列的枚举。</summary>
      <returns>一个枚举器循环访问序列。</returns>
    </member>
    <member name="M:System.Linq.ParallelQuery`1.GetEnumerator">
      <summary>返回循环访问序列的枚举。</summary>
      <returns>一个枚举器循环访问序列。</returns>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
      <summary>对一个序列应用累加器函数。</summary>
      <param name="source">要对其进行聚合的序列。</param>
      <param name="func">要应用于每个元素的累加器函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>累加器的最终值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="func" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
      <summary>对一个序列应用累加器函数。 将指定的种子值用作累加器初始值。</summary>
      <param name="source">要对其进行聚合的序列。</param>
      <param name="seed">累加器的初始值。</param>
      <param name="func">要对每个元素调用的累加器函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TAccumulate">累加器值的类型。</typeparam>
      <returns>累加器的最终值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="func" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
      <summary>对一个序列应用累加器函数。 将指定的种子值用作累加器的初始值，并使用指定的函数选择结果值。</summary>
      <param name="source">要对其进行聚合的序列。</param>
      <param name="seed">累加器的初始值。</param>
      <param name="func">要对每个元素调用的累加器函数。</param>
      <param name="selector">将累加器的最终值转换为结果值的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TAccumulate">累加器值的类型。</typeparam>
      <typeparam name="TResult">结果值的类型。</typeparam>
      <returns>已转换的累加器最终值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="func" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>确定是否对序列的所有元素都满足条件。</summary>
      <param name="source">其元素进行测试的条件的序列。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>true 如果源序列中的每个元素通过与指定谓词中的测试，或者如果序列为空，则为否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
      <summary>确定序列是否包含任何元素。</summary>
      <param name="source">要检查为空的序列。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>true 如果源序列中不包含任何元素，则否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>确定是否序列中的任何元素都满足条件。</summary>
      <param name="source">其元素进行测试的条件的序列。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>true 如果源序列中的任何元素中指定的谓词; 通过的测试否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
      <summary>将转换 <see cref="T:System.Collections.IEnumerable" /> 到 <see cref="T:System.Linq.IQueryable" />。</summary>
      <param name="source">要转换的序列。</param>
      <returns>
        <see cref="T:System.Linq.IQueryable" /> ，它表示在输入的序列。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 未实现 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对于某些 <paramref name="T" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>将转换泛型 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 于泛型 <see cref="T:System.Linq.IQueryable`1" />。</summary>
      <param name="source">要转换的序列。</param>
      <typeparam name="TElement">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" /> ，它表示在输入的序列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
      <summary>计算序列的平均值 <see cref="T:System.Decimal" /> 值。</summary>
      <param name="source">一系列 <see cref="T:System.Decimal" /> 要计算平均值的值。</param>
      <returns>值序列的平均值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
      <summary>计算序列的平均值 <see cref="T:System.Double" /> 值。</summary>
      <param name="source">一系列 <see cref="T:System.Double" /> 要计算平均值的值。</param>
      <returns>值序列的平均值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
      <summary>计算序列的平均值 <see cref="T:System.Int32" /> 值。</summary>
      <param name="source">一系列 <see cref="T:System.Int32" /> 要计算平均值的值。</param>
      <returns>值序列的平均值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
      <summary>计算序列的平均值 <see cref="T:System.Int64" /> 值。</summary>
      <param name="source">一系列 <see cref="T:System.Int64" /> 要计算平均值的值。</param>
      <returns>值序列的平均值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>可以为 null 的序列的平均值，计算 <see cref="T:System.Decimal" /> 值。</summary>
      <param name="source">可以为 null 的序列 <see cref="T:System.Decimal" /> 要计算平均值的值。</param>
      <returns>值序列的平均值或 null 如果源序列为空或只包含 null 值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>可以为 null 的序列的平均值，计算 <see cref="T:System.Double" /> 值。</summary>
      <param name="source">可以为 null 的序列 <see cref="T:System.Double" /> 要计算平均值的值。</param>
      <returns>值序列的平均值或 null 如果源序列为空或只包含 null 值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>可以为 null 的序列的平均值，计算 <see cref="T:System.Int32" /> 值。</summary>
      <param name="source">可以为 null 的序列 <see cref="T:System.Int32" /> 要计算平均值的值。</param>
      <returns>值序列的平均值或 null 如果源序列为空或只包含 null 值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>可以为 null 的序列的平均值，计算 <see cref="T:System.Int64" /> 值。</summary>
      <param name="source">可以为 null 的序列 <see cref="T:System.Int64" /> 要计算平均值的值。</param>
      <returns>值序列的平均值或 null 如果源序列为空或只包含 null 值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>可以为 null 的序列的平均值，计算 <see cref="T:System.Single" /> 值。</summary>
      <param name="source">可以为 null 的序列 <see cref="T:System.Single" /> 要计算平均值的值。</param>
      <returns>值序列的平均值或 null 如果源序列为空或只包含 null 值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
      <summary>计算序列的平均值 <see cref="T:System.Single" /> 值。</summary>
      <param name="source">一系列 <see cref="T:System.Single" /> 要计算平均值的值。</param>
      <returns>值序列的平均值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>计算序列的平均值 <see cref="T:System.Decimal" /> 通过调用对输入序列中的每个元素的投影函数获得的值。</summary>
      <param name="source">用于计算平均值的值序列。</param>
      <param name="selector">要应用于每个元素投影函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>值序列的平均值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>计算序列的平均值 <see cref="T:System.Double" /> 通过调用对输入序列中的每个元素的投影函数获得的值。</summary>
      <param name="source">要计算的平均值的值序列。</param>
      <param name="selector">要应用于每个元素投影函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>值序列的平均值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>计算序列的平均值 <see cref="T:System.Int32" /> 通过调用对输入序列中的每个元素的投影函数获得的值。</summary>
      <param name="source">要计算的平均值的值序列。</param>
      <param name="selector">要应用于每个元素投影函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>值序列的平均值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>计算序列的平均值 <see cref="T:System.Int64" /> 通过调用对输入序列中的每个元素的投影函数获得的值。</summary>
      <param name="source">要计算的平均值的值序列。</param>
      <param name="selector">要应用于每个元素投影函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>值序列的平均值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>可以为 null 的序列的平均值，计算 <see cref="T:System.Decimal" /> 通过调用对输入序列中的每个元素的投影函数获得的值。</summary>
      <param name="source">要计算的平均值的值序列。</param>
      <param name="selector">要应用于每个元素投影函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>值序列的平均值或 null 如果 <paramref name="source" /> 序列为空或只包含 null 值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>可以为 null 的序列的平均值，计算 <see cref="T:System.Double" /> 通过调用对输入序列中的每个元素的投影函数获得的值。</summary>
      <param name="source">要计算的平均值的值序列。</param>
      <param name="selector">要应用于每个元素投影函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>值序列的平均值或 null 如果 <paramref name="source" /> 序列为空或只包含 null 值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>可以为 null 的序列的平均值，计算 <see cref="T:System.Int32" /> 通过调用对输入序列中的每个元素的投影函数获得的值。</summary>
      <param name="source">要计算的平均值的值序列。</param>
      <param name="selector">要应用于每个元素投影函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>值序列的平均值或 null 如果 <paramref name="source" /> 序列为空或只包含 null 值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>可以为 null 的序列的平均值，计算 <see cref="T:System.Int64" /> 通过调用对输入序列中的每个元素的投影函数获得的值。</summary>
      <param name="source">要计算的平均值的值序列。</param>
      <param name="selector">要应用于每个元素投影函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>值序列的平均值或 null 如果 <paramref name="source" /> 序列为空或只包含 null 值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>可以为 null 的序列的平均值，计算 <see cref="T:System.Single" /> 通过调用对输入序列中的每个元素的投影函数获得的值。</summary>
      <param name="source">要计算的平均值的值序列。</param>
      <param name="selector">要应用于每个元素投影函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>值序列的平均值或 null 如果 <paramref name="source" /> 序列为空或只包含 null 值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>计算序列的平均值 <see cref="T:System.Single" /> 通过调用对输入序列中的每个元素的投影函数获得的值。</summary>
      <param name="source">要计算的平均值的值序列。</param>
      <param name="selector">要应用于每个元素投影函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>值序列的平均值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
      <summary>将元素转换 <see cref="T:System.Linq.IQueryable" /> 为指定的类型。</summary>
      <param name="source">
        <see cref="T:System.Linq.IQueryable" /> ，其中包含要转换的元素。</param>
      <typeparam name="TResult">要转换的元素的类型 <paramref name="source" /> 到。</typeparam>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" /> ，其中包含每个元素均转换为指定类型的源序列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidCastException">序列中的元素不能转换为类型 <paramref name="TResult" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>连接两个序列。</summary>
      <param name="source1">要连接的第一个序列。</param>
      <param name="source2">要与第一个序列连接的序列。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" /> ，其中包含两个输入序列的串联的元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 或 <paramref name="source2" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
      <summary>确定序列是否包含指定的元素使用的默认相等比较器。</summary>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> 要在其中查找 <paramref name="item" />。</param>
      <param name="item">要在序列中定位的对象。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>true 如果输入的序列中不包含具有指定的值; 的元素否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>确定序列是否使用指定的包含指定的元素 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</summary>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> 要在其中查找 <paramref name="item" />。</param>
      <param name="item">要在序列中定位的对象。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>true 如果输入的序列中不包含具有指定的值; 的元素否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
      <summary>返回序列中的元素数。</summary>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> ，其中包含要计数的元素。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>输入序列中的元素数量。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">中的元素数 <paramref name="source" /> 大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>返回在指定的序列中满足条件的元素数。</summary>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> ，其中包含要计数的元素。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中满足谓词函数中的条件中的元素数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">中的元素数 <paramref name="source" /> 大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
      <summary>返回单一实例集合中指定的序列或类型参数的默认值的元素，如果序列为空。</summary>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> 要返回的默认值，如果为空。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" /> ，其中包含 default(<paramref name="TSource" />) 如果 <paramref name="source" /> 空; 否则为 <paramref name="source" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
      <summary>返回单一实例集合中指定的序列或指定的值的元素，如果序列为空。</summary>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> 返回为指定的值，如果为空。</param>
      <param name="defaultValue">序列为空时要返回的值。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" /> ，其中包含 <paramref name="defaultValue" /> 如果 <paramref name="source" /> 空; 否则为 <paramref name="source" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
      <summary>通过使用的默认相等比较器对值进行比较从序列返回非重复元素。</summary>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> 要从中删除重复项。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" /> ，其中包含非重复元素从 <paramref name="source" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>返回序列中通过使用指定的非重复元素 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较。</summary>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> 要从中删除重复项。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" /> ，其中包含非重复元素从 <paramref name="source" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="comparer" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>返回序列中的指定索引处的元素。</summary>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> 以返回元素。</param>
      <param name="index">要检索的从零开始的元素索引。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>中的指定位置处的元素 <paramref name="source" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
    </member>
    <member name="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>返回序列中指定索引处的元素；如果索引超出范围，则返回默认值。</summary>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> 以返回元素。</param>
      <param name="index">要检索的从零开始的元素索引。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>default(<paramref name="TSource" />) 如果 <paramref name="index" /> 超出界限 <paramref name="source" />; 否则为中的指定位置处的元素 <paramref name="source" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>通过使用默认的相等比较器对值进行比较，生成两个序列的差集。</summary>
      <param name="source1">
        <see cref="T:System.Linq.IQueryable`1" /> 也不是在其元素 <paramref name="source2" /> 将返回。</param>
      <param name="source2">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 同时出现在第一个序列的元素不会出现在返回的序列。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" /> ，其中包含两个序列的差集。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 或 <paramref name="source2" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>使用指定的生成两个序列的差集 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较。</summary>
      <param name="source1">
        <see cref="T:System.Linq.IQueryable`1" /> 也不是在其元素 <paramref name="source2" /> 将返回。</param>
      <param name="source2">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 同时出现在第一个序列的元素不会出现在返回的序列。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" /> ，其中包含两个序列的差集。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 或 <paramref name="source2" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
      <summary>返回一个序列的第一个元素。</summary>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> 要返回的第一个元素。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>中的第一个元素 <paramref name="source" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">源序列为空。</exception>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>返回序列中满足指定的条件的第一个元素。</summary>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> 以返回元素。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>中的第一个元素 <paramref name="source" /> 通过的测试中 <paramref name="predicate" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有元素满足该条件在 <paramref name="predicate" />。- 或 -源序列为空。</exception>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>返回序列中的第一个元素；如果序列中不包含任何元素，则返回默认值。</summary>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> 要返回的第一个元素。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>default(<paramref name="TSource" />) 如果 <paramref name="source" /> 空; 否则为中的第一个元素 <paramref name="source" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>返回序列中满足指定的条件或默认值，如果找到这样的元素的第一个元素。</summary>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> 以返回元素。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>default(<paramref name="TSource" />) 如果 <paramref name="source" /> 为空，或者如果没有元素通过由指定的测试 <paramref name="predicate" />; 否则为中的第一个元素 <paramref name="source" /> 通过由指定的测试 <paramref name="predicate" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>根据指定的键选择器函数对序列的元素进行分组。</summary>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> 其元素进行分组。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">表示的函数返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <returns>IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt; 在 C# 或 IQueryable(Of IGrouping(Of TKey, TSource)) 中 Visual Basic 其中每个 <see cref="T:System.Linq.IGrouping`2" /> 对象包含一系列对象和一个密钥。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据指定的键选择器函数并将进行比较的键使用指定的比较器对序列的元素进行分组。</summary>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> 其元素进行分组。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对键进行比较。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">表示的函数返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <returns>IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt; 在 C# 或 IQueryable(Of IGrouping(Of TKey, TSource)) 中 Visual Basic 其中每个 <see cref="T:System.Linq.IGrouping`2" /> 包含一系列对象和一个密钥。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="keySelector" /> 或 <paramref name="comparer" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
      <summary>根据指定的键选择器函数和项目的元素的每个组通过使用指定的函数对序列的元素进行分组。</summary>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> 其元素进行分组。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="elementSelector">用于将每个源元素映射到中的元素 <see cref="T:System.Linq.IGrouping`2" />。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">表示的函数返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <typeparam name="TElement">在每个元素的类型 <see cref="T:System.Linq.IGrouping`2" />。</typeparam>
      <returns>IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt; 在 C# 或 IQueryable(Of IGrouping(Of TKey, TElement)) 中 Visual Basic 其中每个 <see cref="T:System.Linq.IGrouping`2" /> 包含类型的对象的一系列 <paramref name="TElement" /> 和密钥。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>一个序列的元素进行分组，并通过使用指定的函数为每个组的元素进行投影。 通过使用指定的比较器，键值进行比较。</summary>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> 其元素进行分组。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="elementSelector">用于将每个源元素映射到中的元素 <see cref="T:System.Linq.IGrouping`2" />。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对键进行比较。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">表示的函数返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <typeparam name="TElement">在每个元素的类型 <see cref="T:System.Linq.IGrouping`2" />。</typeparam>
      <returns>IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt; 在 C# 或 IQueryable(Of IGrouping(Of TKey, TElement)) 中 Visual Basic 其中每个 <see cref="T:System.Linq.IGrouping`2" /> 包含类型的对象的一系列 <paramref name="TElement" /> 和密钥。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 或 <paramref name="comparer" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
      <summary>根据指定的键选择器函数对序列中的元素进行分组，并且从每个组及其键中创建结果值。</summary>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> 其元素进行分组。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="resultSelector">用于从每个组中创建结果值的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">表示的函数返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <typeparam name="TResult">返回的结果值的类型 <paramref name="resultSelector" />。</typeparam>
      <returns>T:System.Linq.IQueryable`1 ，其参数的类型 <paramref name="TResult" /> 和其中的每个元素都表示对一组及其键的投影。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="keySelector" /> 或 <paramref name="resultSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据指定的键选择器函数对序列中的元素进行分组，并且从每个组及其键中创建结果值。 通过使用指定的比较器，键进行比较。</summary>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> 其元素进行分组。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="resultSelector">用于从每个组中创建结果值的函数。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对键进行比较。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">表示的函数返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <typeparam name="TResult">返回的结果值的类型 <paramref name="resultSelector" />。</typeparam>
      <returns>T:System.Linq.IQueryable`1 ，其参数的类型 <paramref name="TResult" /> 和其中的每个元素都表示对一组及其键的投影。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="resultSelector" /> 或 <paramref name="comparer" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
      <summary>根据指定的键选择器函数对序列中的元素进行分组，并且从每个组及其键中创建结果值。 通过使用指定的函数对每个组的元素进行投影。</summary>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> 其元素进行分组。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="elementSelector">用于将每个源元素映射到中的元素 <see cref="T:System.Linq.IGrouping`2" />。</param>
      <param name="resultSelector">用于从每个组中创建结果值的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">表示的函数返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <typeparam name="TElement">在每个元素的类型 <see cref="T:System.Linq.IGrouping`2" />。</typeparam>
      <typeparam name="TResult">返回的结果值的类型 <paramref name="resultSelector" />。</typeparam>
      <returns>T:System.Linq.IQueryable`1 ，其参数的类型 <paramref name="TResult" /> 和其中的每个元素都表示对一组及其键的投影。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 或 <paramref name="resultSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据指定的键选择器函数对序列中的元素进行分组，并且从每个组及其键中创建结果值。 通过使用指定比较器对键进行比较，并通过使用指定的函数的每个组元素进行投影。</summary>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> 其元素进行分组。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="elementSelector">用于将每个源元素映射到中的元素 <see cref="T:System.Linq.IGrouping`2" />。</param>
      <param name="resultSelector">用于从每个组中创建结果值的函数。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对键进行比较。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">表示的函数返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <typeparam name="TElement">在每个元素的类型 <see cref="T:System.Linq.IGrouping`2" />。</typeparam>
      <typeparam name="TResult">返回的结果值的类型 <paramref name="resultSelector" />。</typeparam>
      <returns>T:System.Linq.IQueryable`1 ，其参数的类型 <paramref name="TResult" /> 和其中的每个元素都表示对一组及其键的投影。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 或 <paramref name="resultSelector" /> 或 <paramref name="comparer" /> 是 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
      <summary>基于键相等对两个序列的元素进行关联，并对结果进行分组。 使用默认的相等比较器对键进行比较。</summary>
      <param name="outer">要联接的第一个序列。</param>
      <param name="inner">要与第一个序列联接的序列。</param>
      <param name="outerKeySelector">用于从第一个序列的每个元素提取联接键的函数。</param>
      <param name="innerKeySelector">用于从第二个序列的每个元素提取联接键的函数。</param>
      <param name="resultSelector">用于从第一个序列的元素和第二个序列的匹配元素集合中创建结果元素的函数。</param>
      <typeparam name="TOuter">第一个序列中的元素的类型。</typeparam>
      <typeparam name="TInner">第二个序列中的元素的类型。</typeparam>
      <typeparam name="TKey">键选择器函数返回的键的类型。</typeparam>
      <typeparam name="TResult">结果元素的类型。</typeparam>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" /> ，其中包含类型的元素 <paramref name="TResult" /> 通过对两个序列执行分组的联接获得的。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 或 <paramref name="outerKeySelector" /> 或 <paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 是 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>基于键相等对两个序列的元素进行关联，并对结果进行分组。 指定 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 用来对键进行比较。</summary>
      <param name="outer">要联接的第一个序列。</param>
      <param name="inner">要与第一个序列联接的序列。</param>
      <param name="outerKeySelector">用于从第一个序列的每个元素提取联接键的函数。</param>
      <param name="innerKeySelector">用于从第二个序列的每个元素提取联接键的函数。</param>
      <param name="resultSelector">用于从第一个序列的元素和第二个序列的匹配元素集合中创建结果元素的函数。</param>
      <param name="comparer">哈希和比较键比较器。</param>
      <typeparam name="TOuter">第一个序列中的元素的类型。</typeparam>
      <typeparam name="TInner">第二个序列中的元素的类型。</typeparam>
      <typeparam name="TKey">键选择器函数返回的键的类型。</typeparam>
      <typeparam name="TResult">结果元素的类型。</typeparam>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" /> ，其中包含类型的元素 <paramref name="TResult" /> 通过对两个序列执行分组的联接获得的。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 或 <paramref name="outerKeySelector" /> 或 <paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 是 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>通过使用默认的相等比较器对值进行比较，生成两个序列的交集。</summary>
      <param name="source1">也会显示在其非重复元素的序列 <paramref name="source2" /> 返回。</param>
      <param name="source2">一个序列，其中的同时出现在第一个序列中的非重复元素将返回。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <returns>一个包含两个序列的交集的序列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 或 <paramref name="source2" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>使用指定的生成两个序列的交集 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较。</summary>
      <param name="source1">
        <see cref="T:System.Linq.IQueryable`1" /> 也会显示在其非重复元素 <paramref name="source2" /> 返回。</param>
      <param name="source2">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 返回也出现在第一个序列中的非重复元素。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" /> ，其中包含两个序列的交集。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 或 <paramref name="source2" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
      <summary>基于匹配键对两个序列的元素关联。 使用默认的相等比较器对键进行比较。</summary>
      <param name="outer">要联接的第一个序列。</param>
      <param name="inner">要与第一个序列联接的序列。</param>
      <param name="outerKeySelector">用于从第一个序列的每个元素提取联接键的函数。</param>
      <param name="innerKeySelector">用于从第二个序列的每个元素提取联接键的函数。</param>
      <param name="resultSelector">用于从两个匹配元素创建结果元素的函数。</param>
      <typeparam name="TOuter">第一个序列中的元素的类型。</typeparam>
      <typeparam name="TInner">第二个序列中的元素的类型。</typeparam>
      <typeparam name="TKey">键选择器函数返回的键的类型。</typeparam>
      <typeparam name="TResult">结果元素的类型。</typeparam>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" /> ，其类型的元素 <paramref name="TResult" /> 通过对两个序列执行内部联接获得的。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 或 <paramref name="outerKeySelector" /> 或 <paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 是 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>基于匹配键对两个序列的元素关联。 指定 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 用来对键进行比较。</summary>
      <param name="outer">要联接的第一个序列。</param>
      <param name="inner">要与第一个序列联接的序列。</param>
      <param name="outerKeySelector">用于从第一个序列的每个元素提取联接键的函数。</param>
      <param name="innerKeySelector">用于从第二个序列的每个元素提取联接键的函数。</param>
      <param name="resultSelector">用于从两个匹配元素创建结果元素的函数。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 键进行哈希和比较。</param>
      <typeparam name="TOuter">第一个序列中的元素的类型。</typeparam>
      <typeparam name="TInner">第二个序列中的元素的类型。</typeparam>
      <typeparam name="TKey">键选择器函数返回的键的类型。</typeparam>
      <typeparam name="TResult">结果元素的类型。</typeparam>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" /> ，其类型的元素 <paramref name="TResult" /> 通过对两个序列执行内部联接获得的。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 或 <paramref name="outerKeySelector" /> 或 <paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 是 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
      <summary>返回序列中的最后一个元素。</summary>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> 要返回的最后一个元素。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>中的最后一个位置处的值 <paramref name="source" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">源序列为空。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>返回序列中满足指定条件的最后一个元素。</summary>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> 以返回元素。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>中的最后一个元素 <paramref name="source" /> 通过由指定的测试 <paramref name="predicate" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有元素满足该条件在 <paramref name="predicate" />。- 或 -源序列为空。</exception>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>如果序列不包含任何元素，则返回的最后一个元素中的序列或默认值。</summary>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> 要返回的最后一个元素。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>default(<paramref name="TSource" />) 如果 <paramref name="source" /> 空; 否则为最后一个元素 <paramref name="source" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>返回序列中满足条件的最后一个元素；如果未找到这样的元素，则返回默认值。</summary>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> 以返回元素。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>default(<paramref name="TSource" />) 如果 <paramref name="source" /> 为空，或者如果没有元素通过测试在谓词函数中; 否则为最后一个元素的 <paramref name="source" /> 谓词函数中通过的测试。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
      <summary>返回 <see cref="T:System.Int64" /> ，它表示序列中的元素的总数。</summary>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> ，其中包含要计数的元素。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>
        <paramref name="source" /> 中的元素数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">元素数目超出 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>返回 <see cref="T:System.Int64" /> ，表示序列中满足条件的元素的数量。</summary>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> ，其中包含要计数的元素。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>中的元素数 <paramref name="source" /> 满足谓词函数中的条件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">匹配的元素数超过 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
      <summary>返回泛型中的最大值 <see cref="T:System.Linq.IQueryable`1" />。</summary>
      <param name="source">要确定的最大值的值序列。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中的最大值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>调用泛型的每个元素的投影函数 <see cref="T:System.Linq.IQueryable`1" /> 并返回最大结果值。</summary>
      <param name="source">要确定的最大值的值序列。</param>
      <param name="selector">要应用于每个元素投影函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TResult">由该函数返回的值的类型 <paramref name="selector" />。</typeparam>
      <returns>序列中的最大值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
      <summary>返回一个一般的最小值 <see cref="T:System.Linq.IQueryable`1" />。</summary>
      <param name="source">要确定的最小值的值序列。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>序列中的最小值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>调用泛型的每个元素的投影函数 <see cref="T:System.Linq.IQueryable`1" /> 并返回最小的结果值。</summary>
      <param name="source">要确定的最小值的值序列。</param>
      <param name="selector">要应用于每个元素投影函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TResult">由该函数返回的值的类型 <paramref name="selector" />。</typeparam>
      <returns>序列中的最小值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
      <summary>筛选的元素 <see cref="T:System.Linq.IQueryable" /> 根据指定的类型。</summary>
      <param name="source">
        <see cref="T:System.Linq.IQueryable" /> 要筛选其元素。</param>
      <typeparam name="TResult">筛选序列元素所根据的类型。</typeparam>
      <returns>包含中的元素的集合 <paramref name="source" /> 具有类型 <paramref name="TResult" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>按根据某个键按升序对序列的元素进行排序。</summary>
      <param name="source">一个要排序的值序列。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">由该函数返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <returns>
        <see cref="T:System.Linq.IOrderedQueryable`1" /> 的元素根据某个键进行排序。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>按使用指定的比较器按升序对序列的元素进行排序。</summary>
      <param name="source">一个要排序的值序列。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IComparer`1" /> 对键进行比较。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">由该函数返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <returns>
        <see cref="T:System.Linq.IOrderedQueryable`1" /> 的元素根据某个键进行排序。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="keySelector" /> 或 <paramref name="comparer" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>按根据某个键按降序对序列的元素进行排序。</summary>
      <param name="source">一个要排序的值序列。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">由该函数返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <returns>
        <see cref="T:System.Linq.IOrderedQueryable`1" /> 的元素按降序顺序根据某个键进行排序。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>使用指定的比较器按降序对序列的元素排序。</summary>
      <param name="source">一个要排序的值序列。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IComparer`1" /> 对键进行比较。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">由该函数返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <returns>
        <see cref="T:System.Linq.IOrderedQueryable`1" /> 的元素按降序顺序根据某个键进行排序。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="keySelector" /> 或 <paramref name="comparer" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
      <summary>反转序列中元素的顺序。</summary>
      <param name="source">要反转的值序列。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" /> 其元素以相反顺序对应于输入序列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>将序列中的每个元素投影到新表单。</summary>
      <param name="source">一个要投影的值序列。</param>
      <param name="selector">要应用于每个元素投影函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TResult">由该函数返回的值的类型 <paramref name="selector" />。</typeparam>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" /> 其元素是调用上的每个元素的投影函数的结果 <paramref name="source" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
      <summary>通过合并元素的索引投影到一个新窗体的序列的每个元素。</summary>
      <param name="source">一个要投影的值序列。</param>
      <param name="selector">要应用于每个元素投影函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TResult">由该函数返回的值的类型 <paramref name="selector" />。</typeparam>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" /> 其元素是调用上的每个元素的投影函数的结果 <paramref name="source" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
      <summary>一个序列的每个元素投影 <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，并将组合为一个序列将结果序列。</summary>
      <param name="source">一个要投影的值序列。</param>
      <param name="selector">要应用于每个元素投影函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TResult">由该函数返回的序列的元素的类型 <paramref name="selector" />。</typeparam>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" /> 其元素是调用输入序列中的每个元素上的一到多投影函数的结果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
      <summary>一个序列的每个元素投影 <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，并将组合为一个序列将结果序列。 每个源元素的索引用于该元素的投影表。</summary>
      <param name="source">一个要投影的值序列。</param>
      <param name="selector">要应用于每个元素，则投影函数此函数的第二个参数表示源元素的索引。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TResult">由该函数返回的序列的元素的类型 <paramref name="selector" />。</typeparam>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" /> 其元素是调用输入序列中的每个元素上的一到多投影函数的结果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>一个序列的每个元素投影 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 和其中调用结果选择器函数对每个元素。 从每个中间序列生成的值将合并到一维的序列，并返回。</summary>
      <param name="source">一个要投影的值序列。</param>
      <param name="collectionSelector">要应用于输入序列中的每个元素投影函数。</param>
      <param name="resultSelector">若要将应用于每个中间序列的每个元素投影函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TCollection">中间元素的类型所表示的函数收集 <paramref name="collectionSelector" />。</typeparam>
      <typeparam name="TResult">结果序列的元素的类型。</typeparam>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" /> 其元素是调用一种一对多投影函数结果 <paramref name="collectionSelector" /> 的每个元素 <paramref name="source" /> 然后将这些序列元素以及其对应的每个映射 <paramref name="source" /> 到一个结果元素的元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="collectionSelector" /> 或 <paramref name="resultSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>一个序列的每个元素投影 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 包含生成它的源元素的索引。 每个中间序列的每个元素调用结果选择器函数并生成值合并到一维的序列，并返回。</summary>
      <param name="source">一个要投影的值序列。</param>
      <param name="collectionSelector">要应用于输入序列; 中的每个元素的投影函数此函数的第二个参数表示源元素的索引。</param>
      <param name="resultSelector">若要将应用于每个中间序列的每个元素投影函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TCollection">中间元素的类型所表示的函数收集 <paramref name="collectionSelector" />。</typeparam>
      <typeparam name="TResult">结果序列的元素的类型。</typeparam>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" /> 其元素是调用一种一对多投影函数结果 <paramref name="collectionSelector" /> 的每个元素 <paramref name="source" /> 然后将这些序列元素以及其对应的每个映射 <paramref name="source" /> 到一个结果元素的元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="collectionSelector" /> 或 <paramref name="resultSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>确定两个序列是否使用默认的相等比较用于比较元素相等。</summary>
      <param name="source1">
        <see cref="T:System.Linq.IQueryable`1" /> 其元素进行比较与 <paramref name="source2" />。</param>
      <param name="source2">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 其元素进行比较的第一个序列。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <returns>true 如果两个源序列的长度相等，且其相应元素相等，则为否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 或 <paramref name="source2" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>确定两个序列是否使用指定的相等 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 用于比较元素。</summary>
      <param name="source1">
        <see cref="T:System.Linq.IQueryable`1" /> 其元素进行比较与 <paramref name="source2" />。</param>
      <param name="source2">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 其元素进行比较的第一个序列。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 要用来比较元素。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <returns>true 如果两个源序列的长度相等，且其相应元素相等，则为否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 或 <paramref name="source2" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
      <summary>返回序列的唯一元素；如果该序列并非恰好包含一个元素，则会引发异常。</summary>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> 要返回的单个元素。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>输入序列的单个元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 具有多个元素。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>返回序列中满足指定条件的唯一元素；如果有多个这样的元素存在，则会引发异常。</summary>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> 以返回从的单个元素。</param>
      <param name="predicate">用于测试元素是否满足条件的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>输入序列中满足条件中的单个元素 <paramref name="predicate" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有元素满足该条件在 <paramref name="predicate" />。- 或 -多个元素满足该条件在 <paramref name="predicate" />。- 或 -源序列为空。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>返回一个序列，或默认值的唯一元素，如果序列为空，则为如果序列中存在多个元素，则此方法将引发异常。</summary>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> 要返回的单个元素。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>在输入序列的单个元素或 default(<paramref name="TSource" />) 如果序列不包含任何元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 具有多个元素。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>返回序列中满足指定条件的唯一元素；如果这类元素不存在，则返回默认值；如果有多个元素满足该条件，此方法将引发异常。</summary>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> 以返回从的单个元素。</param>
      <param name="predicate">用于测试元素是否满足条件的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>输入序列中满足条件中的单个元素 <paramref name="predicate" />, ，或 default(<paramref name="TSource" />) 如果找到这样的元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">多个元素满足该条件在 <paramref name="predicate" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>跳过指定的数量的序列中的元素，然后返回剩余元素。</summary>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> 返回中的元素。</param>
      <param name="count">返回剩余元素前要跳过的元素数量。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" /> ，其中包含输入序列中的指定索引后出现的元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>只要指定的条件为 true，然后返回剩余元素，跳过序列中的元素。</summary>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> 返回中的元素。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" /> ，其中包含从元素 <paramref name="source" /> 未通过测试由指定的线性系列中的第一个元素开始 <paramref name="predicate" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>只要指定的条件为 true，然后返回剩余元素，跳过序列中的元素。 将在谓词函数的逻辑中使用元素的索引。</summary>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> 返回中的元素。</param>
      <param name="predicate">用于测试条件; 每个元素的函数此函数的第二个参数表示源元素的索引。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" /> ，其中包含从元素 <paramref name="source" /> 未通过测试由指定的线性系列中的第一个元素开始 <paramref name="predicate" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
      <summary>计算的一系列总和 <see cref="T:System.Decimal" /> 值。</summary>
      <param name="source">一系列 <see cref="T:System.Decimal" /> 要对其求和的值。</param>
      <returns>在序列中值的总和。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">之和大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})">
      <summary>计算的一系列总和 <see cref="T:System.Double" /> 值。</summary>
      <param name="source">一系列 <see cref="T:System.Double" /> 要对其求和的值。</param>
      <returns>在序列中值的总和。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
      <summary>计算的一系列总和 <see cref="T:System.Int32" /> 值。</summary>
      <param name="source">一系列 <see cref="T:System.Int32" /> 要对其求和的值。</param>
      <returns>在序列中值的总和。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">之和大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
      <summary>计算的一系列总和 <see cref="T:System.Int64" /> 值。</summary>
      <param name="source">一系列 <see cref="T:System.Int64" /> 要对其求和的值。</param>
      <returns>在序列中值的总和。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">之和大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>计算可以为 null 的序列的和 <see cref="T:System.Decimal" /> 值。</summary>
      <param name="source">可以为 null 的序列 <see cref="T:System.Decimal" /> 要对其求和的值。</param>
      <returns>在序列中值的总和。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">之和大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>计算可以为 null 的序列的和 <see cref="T:System.Double" /> 值。</summary>
      <param name="source">可以为 null 的序列 <see cref="T:System.Double" /> 要对其求和的值。</param>
      <returns>在序列中值的总和。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>计算可以为 null 的序列的和 <see cref="T:System.Int32" /> 值。</summary>
      <param name="source">可以为 null 的序列 <see cref="T:System.Int32" /> 要对其求和的值。</param>
      <returns>在序列中值的总和。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">之和大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>计算可以为 null 的序列的和 <see cref="T:System.Int64" /> 值。</summary>
      <param name="source">可以为 null 的序列 <see cref="T:System.Int64" /> 要对其求和的值。</param>
      <returns>在序列中值的总和。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">之和大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>计算可以为 null 的序列的和 <see cref="T:System.Single" /> 值。</summary>
      <param name="source">可以为 null 的序列 <see cref="T:System.Single" /> 要对其求和的值。</param>
      <returns>在序列中值的总和。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})">
      <summary>计算的一系列总和 <see cref="T:System.Single" /> 值。</summary>
      <param name="source">一系列 <see cref="T:System.Single" /> 要对其求和的值。</param>
      <returns>在序列中值的总和。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>计算的序列的和 <see cref="T:System.Decimal" /> 通过调用对输入序列中的每个元素的投影函数获得的值。</summary>
      <param name="source">类型的值的序列 <paramref name="TSource" />。</param>
      <param name="selector">要应用于每个元素投影函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>投影值的总和。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">之和大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>计算的序列的和 <see cref="T:System.Double" /> 通过调用对输入序列中的每个元素的投影函数获得的值。</summary>
      <param name="source">类型的值的序列 <paramref name="TSource" />。</param>
      <param name="selector">要应用于每个元素投影函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>投影值的总和。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>计算的序列的和 <see cref="T:System.Int32" /> 通过调用对输入序列中的每个元素的投影函数获得的值。</summary>
      <param name="source">类型的值的序列 <paramref name="TSource" />。</param>
      <param name="selector">要应用于每个元素投影函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>投影值的总和。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">之和大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>计算的序列的和 <see cref="T:System.Int64" /> 通过调用对输入序列中的每个元素的投影函数获得的值。</summary>
      <param name="source">类型的值的序列 <paramref name="TSource" />。</param>
      <param name="selector">要应用于每个元素投影函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>投影值的总和。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">之和大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>计算可以为 null 的序列的和 <see cref="T:System.Decimal" /> 通过调用对输入序列中的每个元素的投影函数获得的值。</summary>
      <param name="source">类型的值的序列 <paramref name="TSource" />。</param>
      <param name="selector">要应用于每个元素投影函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>投影值的总和。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">之和大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>计算可以为 null 的序列的和 <see cref="T:System.Double" /> 通过调用对输入序列中的每个元素的投影函数获得的值。</summary>
      <param name="source">类型的值的序列 <paramref name="TSource" />。</param>
      <param name="selector">要应用于每个元素投影函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>投影值的总和。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>计算可以为 null 的序列的和 <see cref="T:System.Int32" /> 通过调用对输入序列中的每个元素的投影函数获得的值。</summary>
      <param name="source">类型的值的序列 <paramref name="TSource" />。</param>
      <param name="selector">要应用于每个元素投影函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>投影值的总和。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">之和大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>计算可以为 null 的序列的和 <see cref="T:System.Int64" /> 通过调用对输入序列中的每个元素的投影函数获得的值。</summary>
      <param name="source">类型的值的序列 <paramref name="TSource" />。</param>
      <param name="selector">要应用于每个元素投影函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>投影值的总和。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">之和大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>计算可以为 null 的序列的和 <see cref="T:System.Single" /> 通过调用对输入序列中的每个元素的投影函数获得的值。</summary>
      <param name="source">类型的值的序列 <paramref name="TSource" />。</param>
      <param name="selector">要应用于每个元素投影函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>投影值的总和。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>计算的序列的和 <see cref="T:System.Single" /> 通过调用对输入序列中的每个元素的投影函数获得的值。</summary>
      <param name="source">类型的值的序列 <paramref name="TSource" />。</param>
      <param name="selector">要应用于每个元素投影函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>投影值的总和。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>从序列的开头返回指定的数量的连续元素。</summary>
      <param name="source">要从其返回元素的序列。</param>
      <param name="count">要返回的元素数量。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" /> ，其中包含指定的数量的开始处的元素 <paramref name="source" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>返回序列中的元素，只要指定的条件为真。</summary>
      <param name="source">要从其返回元素的序列。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" /> ，其中包含测试由指定的元素之前出现的输入序列中的元素 <paramref name="predicate" /> 不再能够通过。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>返回序列中的元素，只要指定的条件为真。 将在谓词函数的逻辑中使用元素的索引。</summary>
      <param name="source">要从其返回元素的序列。</param>
      <param name="predicate">用于测试条件; 每个元素的函数该函数的第二个参数表示源序列中的元素的索引。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" /> ，其中包含测试由指定的元素之前出现的输入序列中的元素 <paramref name="predicate" /> 不再能够通过。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>执行后续排序以根据某个键按升序对序列的元素。</summary>
      <param name="source">
        <see cref="T:System.Linq.IOrderedQueryable`1" /> ，其中包含要排序的元素。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">由该函数返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <returns>
        <see cref="T:System.Linq.IOrderedQueryable`1" /> 的元素根据某个键进行排序。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>执行后续排序中使用指定的比较器按升序对序列的元素。</summary>
      <param name="source">
        <see cref="T:System.Linq.IOrderedQueryable`1" /> ，其中包含要排序的元素。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IComparer`1" /> 对键进行比较。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">由该函数返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <returns>
        <see cref="T:System.Linq.IOrderedQueryable`1" /> 的元素根据某个键进行排序。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="keySelector" /> 或 <paramref name="comparer" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>根据某个键将执行后续排序顺序，按降序对序列的元素。</summary>
      <param name="source">
        <see cref="T:System.Linq.IOrderedQueryable`1" /> ，其中包含要排序的元素。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">由该函数返回的键的类型 <paramref name="keySelector" />。</typeparam>
      <returns>
        <see cref="T:System.Linq.IOrderedQueryable`1" /> 的元素按降序顺序根据某个键进行排序。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>执行后续排序中使用指定的比较器按降序对序列的元素。</summary>
      <param name="source">
        <see cref="T:System.Linq.IOrderedQueryable`1" /> ，其中包含要排序的元素。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IComparer`1" /> 对键进行比较。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <typeparam name="TKey">返回的键的类型 <paramref name="keySelector" /> 函数。</typeparam>
      <returns>集合的元素按降序顺序根据某个键进行排序。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="keySelector" /> 或 <paramref name="comparer" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>通过使用默认的相等比较器生成的两个序列的并集。</summary>
      <param name="source1">一个序列的非重复元素构成 union 运算的第一个集。</param>
      <param name="source2">一个序列的非重复元素构成 union 运算的第二个集。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" /> ，其中包含非重复这两个输入序列中的元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 或 <paramref name="source2" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>使用指定的生成两个序列的并集 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</summary>
      <param name="source1">一个序列的非重复元素构成 union 运算的第一个集。</param>
      <param name="source2">一个序列的非重复元素构成 union 运算的第二个集。</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" /> ，其中包含非重复这两个输入序列中的元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 或 <paramref name="source2" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>基于谓词筛选值序列。</summary>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> 进行筛选。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" /> ，其中包含输入序列中满足指定条件的元素 <paramref name="predicate" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>基于谓词筛选值序列。 将在谓词函数的逻辑中使用每个元素的索引。</summary>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> 进行筛选。</param>
      <param name="predicate">用于测试条件; 每个元素的函数该函数的第二个参数表示源序列中的元素的索引。</param>
      <typeparam name="TSource">中的元素的类型 <paramref name="source" />。</typeparam>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" /> ，其中包含输入序列中满足指定条件的元素 <paramref name="predicate" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>通过使用指定的谓词函数合并两个序列。</summary>
      <param name="source1">要合并的第一个序列。</param>
      <param name="source2">要合并的第二个序列。</param>
      <param name="resultSelector">一个指定如何合并来自两个序列的元素的函数。</param>
      <typeparam name="TFirst">第一个输入序列中的元素的类型。</typeparam>
      <typeparam name="TSecond">第二个输入序列中的元素的类型。</typeparam>
      <typeparam name="TResult">结果序列的元素的类型。</typeparam>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" /> 包含合并的两个输入序列的元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" />或 <paramref name="source2 " />是 null。</exception>
    </member>
    <member name="M:System.Management.Instrumentation.InstanceNotFoundException.#ctor">
      <summary>初始化 InstanceNotFoundException 类的新实例。</summary>
    </member>
    <member name="M:System.Management.Instrumentation.InstanceNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化具有指定的序列化信息和流上下文的 InstanceNotFoundException 类的新实例。</summary>
      <param name="info">包含序列化异常所需的所有数据的 SerializationInfo。</param>
      <param name="context">指定的源和目标流的 StreamingContext。</param>
    </member>
    <member name="M:System.Management.Instrumentation.InstanceNotFoundException.#ctor(System.String)">
      <summary>初始化 InstanceNotFoundException 类的新实例，将其设置为消息的消息字符串。</summary>
      <param name="message">一个字符串，它包含对异常原因进行解释的错误消息。</param>
    </member>
    <member name="M:System.Management.Instrumentation.InstanceNotFoundException.#ctor(System.String,System.Exception)">
      <summary>初始化具有指定的错误消息和内部异常的 InstanceNotFoundException 类的新实例。</summary>
      <param name="message">一个字符串，它包含对异常原因进行解释的错误消息。</param>
      <param name="innerException">导致引发当前异常的异常。</param>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationBaseException.#ctor">
      <summary>初始化 <see cref="T:System.Management.Instrumentation.InstrumentationBaseException" /> 的新实例。 类的新实例。 这是默认构造函数。</summary>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationBaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>新实例初始化 <see cref="T:System.Management.Instrumentation.InstrumentationBaseException" /> 用序列化信息的类。</summary>
      <param name="info">要序列化或反序列化对象所需的数据。</param>
      <param name="context">源和目标的指定的序列化流的说明。</param>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationBaseException.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Management.Instrumentation.InstrumentationBaseException" /> 类使用的描述异常的消息。</summary>
      <param name="message">描述异常的消息。</param>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationBaseException.#ctor(System.String,System.Exception)">
      <summary>初始化新 <see cref="T:System.Management.Instrumentation.InstrumentationBaseException" /> 使用指定的字符串和异常类。</summary>
      <param name="message">描述异常的消息。</param>
      <param name="innerException">导致当前异常的异常实例。</param>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationException.#ctor">
      <summary>初始化 <see cref="T:System.Management.Instrumentation.InstrumentationException" /> 类的新实例。 这是默认构造函数。</summary>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationException.#ctor(System.Exception)">
      <summary>初始化新 <see cref="T:System.Management.Instrumentation.InstrumentationException" /> System.Exception 引发当前异常的异常类。</summary>
      <param name="innerException">导致当前异常的异常实例。</param>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>新实例初始化 <see cref="T:System.Management.Instrumentation.InstrumentationException" /> 用序列化信息的类。</summary>
      <param name="info">要序列化或反序列化对象所需的数据。</param>
      <param name="context">源和目标的指定的序列化流的说明。</param>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationException.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Management.Instrumentation.InstrumentationException" /> 类使用的描述异常的消息。</summary>
      <param name="message">描述异常的消息。</param>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationException.#ctor(System.String,System.Exception)">
      <summary>初始化新 <see cref="T:System.Management.Instrumentation.InstrumentationException" /> 使用指定的字符串和异常类。</summary>
      <param name="message">描述异常的消息。</param>
      <param name="innerException">导致当前异常的异常实例。</param>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementBindAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Management.ManagementBindAttribute" /> 类的新实例。 这是默认构造函数。</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementCommitAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Management.ManagementCommitAttribute" /> 类的新实例。 这是默认构造函数。</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementConfigurationAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Management.ManagementConfigurationAttribute" /> 类的新实例。 这是默认构造函数。</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementCreateAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Management.ManagementCreateAttribute" /> 类的新实例。 这是默认构造函数。</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementEntityAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Management.ManagementEntityAttribute" /> 类的新实例。 这是默认构造函数。</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementEnumeratorAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Management.ManagementEnumeratorAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementKeyAttribute.#ctor">
      <summary>新实例初始化 <see cref="T:System.Management.ManagementKeyAttribute" />  类。 这是默认构造函数。</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementMemberAttribute.#ctor">
      <summary>新实例初始化 <see cref="T:System.Management.ManagementMemberAttribute" /> 类。 这是默认构造函数。</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementNameAttribute.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Management.ManagementNameAttribute" /> 类，该类指定的值 <see cref="P:System.Management.ManagementNameAttribute.Name" /> 类的属性。</summary>
      <param name="name">对象的用户友好名称。</param>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementNewInstanceAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Management.ManagementNewInstanceAttribute" /> 类的新实例。 这是默认构造函数。</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementProbeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Management.ManagementProbeAttribute" /> 类的新实例。 这是默认构造函数的类。</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementReferenceAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Management.ManagementReferenceAttribute" /> 类的新实例。 这是默认构造函数。</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementRemoveAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Management.ManagementRemoveAttribute" /> 类的新实例。 这是默认构造函数。</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementTaskAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Management.ManagementTaskAttribute" /> 类的新实例。 这是默认构造函数。</summary>
    </member>
    <member name="M:System.Management.Instrumentation.WmiConfigurationAttribute.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Management.WmiConfigurationAttribute" /> 指定 WMI 提供程序将用于公开类的 WMI 命名空间的类。</summary>
      <param name="scope">提供程序将用于公开类的 WMI 命名空间。 例如，"root\MyProviderNamespace"。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite.Create(System.Type,System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>创建一个调用站点使用给定的委托类型和联编程序。</summary>
      <param name="delegateType">调用站点的委托类型。</param>
      <param name="binder">调用站点绑定程序。</param>
      <returns>新的调用站点。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite`1.Create(System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>创建动态调用站点，使用负责此调用站点上的动态操作的运行时绑定联编程序进行初始化的实例。</summary>
      <param name="binder">负责此调用站点上的动态操作的运行时绑定联编程序。</param>
      <returns>动态调用站点的新实例。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary>执行上一组参数的动态操作的运行时绑定。</summary>
      <param name="args">动态操作的参数的数组。</param>
      <param name="parameters">数组 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 实例，表示调用站点绑定进程中的参数。</param>
      <param name="returnLabel">LabelTarget 用来返回动态绑定的结果。</param>
      <returns>动态操作的参数，执行测试和执行动态操作，如果测试是有效的表达式。 如果测试失败的动态操作的后续匹配项上，将会再次调用 Bind 生成新 <see cref="T:System.Linq.Expressions.Expression" /> 了解新的参数类型。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.BindDelegate``1(System.Runtime.CompilerServices.CallSite{``0},System.Object[])">
      <summary>提供低级别的运行时绑定支持。 类可以重写此和为规则的实现提供直接的委托。 这使规则保存到磁盘、 使专用规则可在运行时，或者提供不同的缓存策略。</summary>
      <param name="site">对于正在进行的调用站点绑定。</param>
      <param name="args">对于联编程序参数。</param>
      <typeparam name="T">调用站点的目标类型。</typeparam>
      <returns>一个新委托，它将替换调用站点目标。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.CacheTarget``1(``0)">
      <summary>将目标添加到已知目标的缓存。 在调用 BindDelegate 以生成新规则之前，将扫描缓存的目标。</summary>
      <param name="target">要添加到缓存的目标委托。</param>
      <typeparam name="T">要添加的目标类型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteHelpers.IsInternalFrame(System.Reflection.MethodBase)">
      <summary>检查是否 <see cref="T:System.Reflection.MethodBase" /> DLR 在内部使用，不应显示的语言代码的堆栈上。</summary>
      <param name="mb">输入 <see cref="T:System.Reflection.MethodBase" /></param>
      <returns>True 输入 <see cref="T:System.Reflection.MethodBase" /> DLR 在内部使用，不应显示的语言代码的堆栈上。 否则为 false。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.AddRule``1(System.Runtime.CompilerServices.CallSite{``0},``0)">
      <summary>将规则添加到动态调用站点上维护的缓存。</summary>
      <param name="site">动态调用站点的实例。</param>
      <param name="rule">调用站点规则的实例。</param>
      <typeparam name="T">类型的委托 <see cref="T:System.Runtime.CompilerServices.CallSite" />。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.Bind``1(System.Runtime.CompilerServices.CallSiteBinder,System.Runtime.CompilerServices.CallSite{``0},System.Object[])">
      <summary>使用新的规则的参数更新调用站点的目标。</summary>
      <param name="binder">调用站点绑定程序。</param>
      <param name="site">动态调用站点的实例。</param>
      <param name="args">调用站点的参数。</param>
      <typeparam name="T">类型的委托 <see cref="T:System.Runtime.CompilerServices.CallSite" />。</typeparam>
      <returns>新的调用站点目标。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.ClearMatch(System.Runtime.CompilerServices.CallSite)">
      <summary>清除上作出匹配调用站点的匹配标志。</summary>
      <param name="site">动态调用站点的实例。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.CreateMatchmaker``1(System.Runtime.CompilerServices.CallSite{``0})">
      <summary>创建用于缓存查询动态调用站点的实例。</summary>
      <param name="site">动态调用站点的实例。</param>
      <typeparam name="T">类型的委托 <see cref="T:System.Runtime.CompilerServices.CallSite" />。</typeparam>
      <returns>新的调用站点。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.GetCachedRules``1(System.Runtime.CompilerServices.RuleCache{``0})">
      <summary>搜索规则适用于动态操作的动态规则缓存。</summary>
      <param name="cache">缓存。</param>
      <typeparam name="T">类型的委托 <see cref="T:System.Runtime.CompilerServices.CallSite" />。</typeparam>
      <returns>适用的规则的集合。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.GetMatch(System.Runtime.CompilerServices.CallSite)">
      <summary>检查是否已执行的规则匹配</summary>
      <param name="site">动态调用站点的实例。</param>
      <returns>规则匹配，则返回 false 否则如果为 true。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.GetRuleCache``1(System.Runtime.CompilerServices.CallSite{``0})">
      <summary>检索绑定规则缓存。</summary>
      <param name="site">动态调用站点的实例。</param>
      <typeparam name="T">类型的委托 <see cref="T:System.Runtime.CompilerServices.CallSite" />。</typeparam>
      <returns>缓存。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.GetRules``1(System.Runtime.CompilerServices.CallSite{``0})">
      <summary>从该调用站点获取动态绑定规则。</summary>
      <param name="site">动态调用站点的实例。</param>
      <typeparam name="T">类型的委托 <see cref="T:System.Runtime.CompilerServices.CallSite" />。</typeparam>
      <returns>动态绑定规则的数组。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.MoveRule``1(System.Runtime.CompilerServices.RuleCache{``0},``0,System.Int32)">
      <summary>在缓存内移动绑定规则。</summary>
      <param name="cache">调用站点的规则缓存中。</param>
      <param name="rule">调用站点规则的实例。</param>
      <param name="i">调用站点规则的一种索引。</param>
      <typeparam name="T">类型的委托 <see cref="T:System.Runtime.CompilerServices.CallSite" />。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.SetNotMatched(System.Runtime.CompilerServices.CallSite)">
      <summary>检查动态站点是否需要更新。</summary>
      <param name="site">动态调用站点的实例。</param>
      <returns>如果规则不需要更新，false 否则为 true。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.UpdateRules``1(System.Runtime.CompilerServices.CallSite{``0},System.Int32)">
      <summary>更新缓存中的规则。</summary>
      <param name="this">动态调用站点的实例。</param>
      <param name="matched">匹配的规则的索引。</param>
      <typeparam name="T">类型的委托 <see cref="T:System.Runtime.CompilerServices.CallSite" />。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Closure.#ctor(System.Object[],System.Object[])">
      <summary>创建一个对象以保存状态的动态生成的方法。</summary>
      <param name="constants">由该方法使用的常量值。</param>
      <param name="locals">从父级上下文提升的局部变量。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.DebugInfoGenerator" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.CreatePdbGenerator">
      <summary>创建程序数据库 (PDB) 符号生成器。</summary>
      <returns>PDB 符号生成器。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.MarkSequencePoint(System.Linq.Expressions.LambdaExpression,System.Int32,System.Linq.Expressions.DebugInfoExpression)">
      <summary>将 Microsoft 中间语言 (MSIL) 代码中的序列点的标记。</summary>
      <param name="method">生成 lambda 表达式。</param>
      <param name="ilOffset">在标记的序列点从该处的 MSIL 代码的偏移量。</param>
      <param name="sequencePoint">调试序列点相对应的信息。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor(System.Boolean[])">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" /> 类的新实例。</summary>
      <param name="transformFlags">指定类型的构造的前缀的遍历中其 <see cref="T:System.Object" /> 出现旨在被视为动态调度类型。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.CreateDelegate(System.Int32,System.Object[])">
      <summary>创建可用于执行动态生成的方法的委托。</summary>
      <param name="indexLambda">有关存储信息的对象的索引关联动态方法的 lambda 的表达式。</param>
      <param name="locals">一个数组，包含从父上下文提升的局部变量。</param>
      <returns>一个 <see cref="T:System.Delegate" /> ，可以执行动态生成的方法。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.CreateHoistedLocals">
      <summary>创建用于存储提升的局部变量的数组。</summary>
      <returns>用于存储提升的局部变量的数组。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.IsolateExpression(System.Linq.Expressions.Expression,System.Object[])">
      <summary>通过将参数替换为其当前值释放外部参数引用指定的表达式的树。</summary>
      <param name="expression">要释放的外部参数引用的表达式树。</param>
      <param name="locals">一个数组，包含提升的局部变量。</param>
      <returns>不包含外部参数引用表达式目录树。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor">
      <summary>构造一个 ReadOnlyCollectionBuilder。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>构造 ReadOnlyCollectionBuilder, ，复制给定集合的内容。</summary>
      <param name="collection">从中复制元素的集合。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Int32)">
      <summary>构造 ReadOnlyCollectionBuilder 使用给定的初始容量。 内容为空但生成器将保留空间给定数量的元素之前是必需的任何重新分配。</summary>
      <param name="capacity">初始容量。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Add(`0)">
      <summary>将某项添加到 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 中。</summary>
      <param name="item">要添加到 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 的对象。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Clear">
      <summary>从 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 中移除所有项。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Contains(`0)">
      <summary>确定是否 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 包含特定值</summary>
      <param name="item">要在中找到的对象 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />。</param>
      <returns>如果在中找到该项，则 true <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />; 否则为 false。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.CopyTo(`0[],System.Int32)">
      <summary>中的元素复制 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 到 <see cref="T:System.Array" />, ，起价特定 <see cref="T:System.Array" /> 索引。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 复制的元素的目标。</param>
      <param name="arrayIndex">数组中从零开始的索引，在此处开始复制。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>一个可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.IndexOf(`0)">
      <summary>在生成器中返回给定值的第一个匹配项的索引。</summary>
      <param name="item">要搜索的项。</param>
      <returns>第一个匹配项的索引。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Insert(System.Int32,`0)">
      <summary>在 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 中的指定索引处插入一个项。</summary>
      <param name="index">从零开始的索引，应在该位置插入项。</param>
      <param name="item">要插入到 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 中的对象。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Remove(`0)">
      <summary>从 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 中移除特定对象的第一个匹配项。</summary>
      <param name="item">要从 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 中删除的对象。</param>
      <returns>如果从成功移除了该项，则为 true <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />; 否则为 false。 此方法也返回 false，如果在原始找不到项 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.RemoveAt(System.Int32)">
      <summary>移除位于指定索引处的 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 项。</summary>
      <param name="index">要移除的项的从零开始的索引。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse">
      <summary>将整个 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 中元素的顺序反转。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse(System.Int32,System.Int32)">
      <summary>将指定范围中元素的顺序反转。</summary>
      <param name="index">要反转的范围的从零开始的起始索引。</param>
      <param name="count">要反转的范围内的元素数。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从特定的数组索引处开始，将 <see cref="T:System.Collections.Generic.ICollection`1" /> 的元素复制到一个数组中。</summary>
      <param name="array">一维数组，用作从 <see cref="T:System.Collections.Generic.ICollection`1" /> 复制的元素的目标位置。 该数组的索引必须从零开始。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Add(System.Object)">
      <summary>将某项添加到 <see cref="T:System.Collections.IList" /> 中。</summary>
      <param name="value">要添加到 <see cref="T:System.Object" /> 的 <see cref="T:System.Collections.IList" />。</param>
      <returns>新元素的插入位置。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Contains(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IList" /> 是否包含特定值。</summary>
      <param name="value">要在 <see cref="T:System.Object" /> 中定位的 <see cref="T:System.Collections.IList" />。</param>
      <returns>如果在 true 中找到 <paramref name="item" />，则为 <see cref="T:System.Collections.IList" />；否则为 false。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IList" /> 中特定项的索引。</summary>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中定位的对象。</param>
      <returns>如果在列表中找到，则为 <paramref name="item" /> 的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>在 <see cref="T:System.Collections.IList" /> 中的指定索引处插入一个项。</summary>
      <param name="index">应插入 <paramref name="item" /> 的从零开始的索引。</param>
      <param name="value">要插入到 <see cref="T:System.Collections.IList" /> 中的对象。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.IList" /> 中移除特定对象的第一个匹配项。</summary>
      <param name="value">要从 <see cref="T:System.Collections.IList" /> 中删除的对象。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToArray">
      <summary>将 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 的元素复制到新数组中。</summary>
      <returns>一个包含 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 的元素副本的数组。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToReadOnlyCollection">
      <summary>创建 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 其中包含的元素的所有 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />, ，避免如有可能将元素复制到新数组。 重置 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 后 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 已创建。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的新实例。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.CreateRuntimeVariables">
      <summary>创建一个可以用于修改封闭式变量在运行时的接口。</summary>
      <returns>若要访问的变量一个接口。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.CreateRuntimeVariables(System.Object[],System.Int64[])">
      <summary>创建一个可以用于修改封闭式变量在运行时的接口。</summary>
      <param name="data">闭包数组中。</param>
      <param name="indexes">一个数组中找到的变量的闭包数组的索引数组。</param>
      <returns>若要访问的变量一个接口。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.ExpandoCheckVersion(System.Dynamic.ExpandoObject,System.Object)">
      <summary>检查该版本的 Expando 对象。</summary>
      <param name="expando">Expando 对象中。</param>
      <param name="version">要检查的版本。</param>
      <returns>如果版本为相等; 则返回 true否则为 false。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.ExpandoPromoteClass(System.Dynamic.ExpandoObject,System.Object,System.Object)">
      <summary>将 Expando 对象从一个类提升到一个新类。</summary>
      <param name="expando">Expando 对象中。</param>
      <param name="oldClass">Expando 对象的旧类。</param>
      <param name="newClass">Expando 对象的新类。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.ExpandoTryDeleteValue(System.Dynamic.ExpandoObject,System.Object,System.Int32,System.String,System.Boolean)">
      <summary>删除 expando 对象中的项的值。</summary>
      <param name="expando">Expando 对象中。</param>
      <param name="indexClass">Expando 对象的类。</param>
      <param name="index">成员的索引。</param>
      <param name="name">成员名。</param>
      <param name="ignoreCase">如果应该忽略大小写; 匹配名称则为 truefalse 否则为。</param>
      <returns>如果成功移除了该项，则为 true否则为 false。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.ExpandoTryGetValue(System.Dynamic.ExpandoObject,System.Object,System.Int32,System.String,System.Boolean,System.Object@)">
      <summary>Expando 对象中获取项的值。</summary>
      <param name="expando">Expando 对象中。</param>
      <param name="indexClass">Expando 对象的类。</param>
      <param name="index">成员的索引。</param>
      <param name="name">成员名。</param>
      <param name="ignoreCase">如果应该忽略大小写; 匹配名称则为 truefalse 否则为。</param>
      <param name="value">包含该成员的值为 out 参数。</param>
      <returns>该成员是否存在于 expando 对象中，否则为 false，则为 true。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.ExpandoTrySetValue(System.Dynamic.ExpandoObject,System.Object,System.Int32,System.Object,System.String,System.Boolean)">
      <summary>Expando 对象中设置项的值。</summary>
      <param name="expando">Expando 对象中。</param>
      <param name="indexClass">Expando 对象的类。</param>
      <param name="index">成员的索引。</param>
      <param name="value">成员的值。</param>
      <param name="name">成员名。</param>
      <param name="ignoreCase">如果应该忽略大小写; 匹配名称则为 truefalse 否则为。</param>
      <returns>返回组成员的索引。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.MergeRuntimeVariables(System.Runtime.CompilerServices.IRuntimeVariables,System.Runtime.CompilerServices.IRuntimeVariables,System.Int32[])">
      <summary>组合两个运行时变量列表，并返回一个新列表。</summary>
      <param name="first">第一个列表。</param>
      <param name="second">第二个列表。</param>
      <param name="indexes">索引数组，该值指示哪个列表中获取的变量。</param>
      <returns>合并的运行时变量中。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.Quote(System.Linq.Expressions.Expression,System.Object,System.Object[])">
      <summary>引号提供的表达式树。</summary>
      <param name="expression">要用引号引起来的表达式。</param>
      <param name="hoistedLocals">编译器提供的已提升本地状态。</param>
      <param name="locals">实际的已提升本地值。</param>
      <returns>带引号的表达式。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor">
      <summary>初始化新 StrongBox 可以引用调用中接收时使用的值。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor(`0)">
      <summary>新实例初始化 <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 类通过使用所提供的值。</summary>
      <param name="value">一个值， <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 将引用。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.#ctor(System.Type,System.String)">
      <summary>新实例初始化 <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> 类类型上使用指定的类型和事件的名称。</summary>
      <param name="type">对象的类型。</param>
      <param name="eventName">上的事件的名称 <paramref name="type" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)">
      <summary>将事件处理程序附加到 COM 对象。</summary>
      <param name="target">应将事件委托绑定到目标对象。</param>
      <param name="handler">事件委托。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetAddMethod(System.Boolean)">
      <summary>获取用于将事件处理程序委托添加到事件源的方法。</summary>
      <param name="nonPublic">true 若要返回非公共方法; 这些方法否则为 false。</param>
      <returns>用于添加事件处理程序的方法委托添加到事件源。</returns>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> 是 true 和用来添加事件处理程序委托的方法是非公共的但调用方没有权限，以反映对非公共方法。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Boolean)">
      <summary>当在派生类中重写，获取一个数组，包含应用于此成员的所有自定义属性。</summary>
      <param name="inherit">true 搜索此成员继承链，以查找这些属性;否则为 false。</param>
      <returns>一个数组，包含所有自定义属性或如果未不定义任何特性不包含任何元素的数组。</returns>
      <exception cref="T:System.InvalidOperationException">此成员所属加载到只反射上下文的类型。 请参阅 如何：将程序集加载到仅反射上下文中。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义特性类型。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>当在派生类中重写时获取包含指定类型的应用于此成员的所有自定义特性的数组。</summary>
      <param name="attributeType">要搜索的属性类型。 可分配给此类型的属性可能会返回。</param>
      <param name="inherit">true 搜索此成员继承链，以查找这些属性;否则为 false。</param>
      <returns>一个数组，包含指定类型的所有自定义属性或如果未不定义任何特性不包含任何元素的数组。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">此成员所属加载到只反射上下文的类型。 请参见如何：将程序集加载到仅反射上下文中</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义特性类型。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRaiseMethod(System.Boolean)">
      <summary>当在派生类中重写返回时引发该事件时，将调用的方法。</summary>
      <param name="nonPublic">true 若要返回非公共方法; 这些方法否则为 false。</param>
      <returns>引发事件时，将调用该对象。</returns>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> 是 true 和用来添加事件处理程序委托的方法是非公共的但调用方没有权限，以反映对非公共方法。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRemoveMethod(System.Boolean)">
      <summary>当在派生类中重写，将检索 <see cref="T:System.Reflection.MethodInfo" /> 用于移除事件的方法的对象。</summary>
      <param name="nonPublic">true 若要返回非公共方法; 这些方法否则为 false。</param>
      <returns>从事件源委托用于移除事件处理程序的方法。</returns>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> 是 true 和用来添加事件处理程序委托的方法是非公共的但调用方没有权限，以反映对非公共方法。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.IsDefined(System.Type,System.Boolean)">
      <summary>指示指定的属性的一个或多个实例是否已应用于此成员。</summary>
      <param name="attributeType">要搜索的属性类型。</param>
      <param name="inherit">true 搜索此成员继承链，以查找这些属性;否则为 false。</param>
      <returns>true 如果已将指定的特性应用于此成员;否则为 false。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
      <summary>分离事件处理程序从 COM 对象。</summary>
      <param name="target">事件委托绑定到目标对象。</param>
      <param name="handler">事件委托。</param>
      <exception cref="T:System.InvalidOperationException">该事件不具有公共 remove 取值函数。</exception>
      <exception cref="T:System.ArgumentException">不能使用传入的处理程序。</exception>
      <exception cref="T:System.Reflection.TargetException">在 .NET for Windows Store apps 或 可移植类库, ，捕获 <see cref="T:System.Exception" /> 相反。<paramref name="target" /> 参数是 null 和事件不是静态的。- 或 - <see cref="T:System.Reflection.EventInfo" /> 未声明为目标系统上。</exception>
      <exception cref="T:System.MethodAccessException">在 .NET for Windows Store apps 或 可移植类库, ，捕获该基类异常， <see cref="T:System.MemberAccessException" />, ，而不是。调用方没有访问该成员的权限。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCng.#ctor">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.AesCng" /> 类，具有一个临时密钥。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesCng.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.AesCng" /> 初始化具有指定表示现有的密钥名称保留的 AES 密钥。</summary>
      <param name="keyName">密钥的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> 为 null。</exception>
      <exception cref="T:System.PlatformNotSupportedException">
              下一代加密技术 (CNG) 不支持此系统上。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCng.#ctor(System.String,System.Security.Cryptography.CngProvider)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.AesCng" /> 类，具有指定键的名称，它表示的现有持久存储 AES 密钥，以及指定的密钥存储提供程序 (KSP)。</summary>
      <param name="keyName">密钥的名称。</param>
      <param name="provider">包含密钥 KSP。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> 为 null。- 或 -<paramref name="provider" /> 为 null。</exception>
      <exception cref="T:System.PlatformNotSupportedException">
              下一代加密技术 (CNG) 不支持此系统上。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCng.#ctor(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.AesCng" /> 初始化具有指定表示现有的密钥名称保留的 AES 密钥、 指定的密钥存储提供程序 (KSP) 和密钥打开选项。</summary>
      <param name="keyName">密钥的名称。</param>
      <param name="provider">包含密钥 KSP。</param>
      <param name="openOptions">指定用于打开的密钥，如从 （计算机或用户存储） 打开该项是以及是否禁止显示用户界面提示的选项的枚举值的按位组合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> 为 null。- 或 -<paramref name="provider" /> 为 null。</exception>
      <exception cref="T:System.PlatformNotSupportedException">
              下一代加密技术 (CNG) 不支持此系统上。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCng.CreateDecryptor">
      <summary>创建 AES 对称解密器对象具有当前密钥和初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />)。</summary>
      <returns>对称 AES 解密器对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesCng.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>使用指定的密钥和初始化向量 (IV) 创建对称的 AES 解密器对象。</summary>
      <param name="rgbKey">要使用 AES 算法的机密密钥。 密钥大小必须是 128、 192 或 256 位。</param>
      <param name="rgbIV">要使用 AES 算法的初始化向量。</param>
      <returns>对称 AES 解密器对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbKey" />  是 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="rgbKey" />  不是此算法的有效大小。- 或 -<paramref name="rgbIV" /> 大小与此算法的块大小不匹配。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="rgbKey" /> 是此算法的已知弱密钥，不能使用。- 或 -<paramref name="rgbIV" />  是 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCng.CreateEncryptor">
      <summary>创建对称 AES 加密器对象使用当前的密钥和初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />)。</summary>
      <returns>对称的 AES 加密器对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesCng.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>使用指定的键和初始化向量 (IV) 创建对称的 AES 加密器对象。</summary>
      <param name="rgbKey">要使用 AES 算法的机密密钥。 密钥大小必须是 128、 192 或 256 位。</param>
      <param name="rgbIV">要使用 AES 算法的初始化向量。</param>
      <returns>对称的 AES 加密器对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbKey" />  是 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="rgbKey" />  不是此算法的有效大小。- 或 -<paramref name="rgbIV" /> 大小与此算法的块大小不匹配。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="rgbKey" /> 是此算法的已知弱密钥，不能使用。- 或 -<paramref name="rgbIV" />  是 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCng.GenerateIV">
      <summary>生成的随机初始化向量 (IV) 用于 AES 算法。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesCng.GenerateKey">
      <summary>生成用于 AES 算法的随机密钥。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.AesCryptoServiceProvider" /> 类的新实例。</summary>
      <exception cref="T:System.PlatformNotSupportedException">没有当前平台支持的密钥大小。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.CreateDecryptor">
      <summary>创建对称 AES 解密器对象使用当前的密钥和初始化向量 (IV)。</summary>
      <returns>对称 AES 解密器对象。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">当前的关键是无效或缺失。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>创建对称 AES 解密器对象使用指定的密钥和初始化向量 (IV)。</summary>
      <param name="key">用于对称算法的密钥。</param>
      <param name="iv">用于对称算法的初始化向量。</param>
      <returns>对称 AES 解密器对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 或 <paramref name="iv" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 无效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.CreateEncryptor">
      <summary>创建对称 AES 加密器对象使用当前的密钥和初始化向量 (IV)。</summary>
      <returns>对称的 AES 加密器对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>创建对称加密器对象使用指定的密钥和初始化向量 (IV)。</summary>
      <param name="key">用于对称算法的密钥。</param>
      <param name="iv">用于对称算法的初始化向量。</param>
      <returns>对称的 AES 加密器对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 或 <paramref name="iv" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 无效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.GenerateIV">
      <summary>生成的随机初始化向量 (IV) 要用于该算法。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">无法生成的初始化向量 (IV)。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.GenerateKey">
      <summary>生成用于该算法的随机密钥。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">无法生成该密钥。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.AesManaged" /> 类的新实例。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">启用 FIPS Windows 安全策略设置。</exception>
      <exception cref="T:System.InvalidOperationException">此实现不是 Windows 平台 FIPS 验证的加密算法的一部分。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor">
      <summary>创建对称解密器对象使用当前的密钥和初始化向量 (IV)。</summary>
      <returns>对称解密器对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>创建对称解密器对象使用指定的密钥和初始化向量 (IV)。</summary>
      <param name="key">用于对称算法的密钥。</param>
      <param name="iv">用于对称算法的初始化向量。</param>
      <returns>对称解密器对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 或 <paramref name="iv" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 无效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor">
      <summary>创建对称加密器对象使用当前的密钥和初始化向量 (IV)。</summary>
      <returns>对称加密器对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>创建对称加密器对象使用指定的密钥和初始化向量 (IV)。</summary>
      <param name="key">用于对称算法的密钥。</param>
      <param name="iv">用于对称算法的初始化向量。</param>
      <returns>对称加密器对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 或 <paramref name="iv" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 无效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateIV">
      <summary>生成的随机初始化向量 (IV) 用于对称算法。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateKey">
      <summary>生成用于对称算法的随机密钥。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 类的新实例。</summary>
      <param name="algorithm">要初始化的算法的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="algorithm" /> 参数长度为 0 （零）。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.Equals(System.Object)">
      <summary>将指定的对象与当前的 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象进行比较。</summary>
      <param name="obj">要与当前的 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象进行比较的对象。</param>
      <returns>如果 <paramref name="obj" /> 参数是一个指定与当前对象相同算法的 <see cref="T:System.Security.Cryptography.CngAlgorithm" />，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.Equals(System.Security.Cryptography.CngAlgorithm)">
      <summary>将指定的 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象与当前的 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象进行比较。</summary>
      <param name="other">要与当前的 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象进行比较的对象。</param>
      <returns>如果 <paramref name="other" /> 参数指定的算法与当前对象的算法相同，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.GetHashCode">
      <summary>为当前 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象中嵌入的算法名称生成一个哈希值。</summary>
      <returns>嵌入的算法名称的哈希值。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.op_Equality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)">
      <summary>确定两个 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象是否指定了相同的算法名称。</summary>
      <param name="left">一个指定算法名称的对象。</param>
      <param name="right">要与 <paramref name="left" /> 参数标识的对象进行比较的另一个对象。</param>
      <returns>如果两个对象指定了相同的算法名称，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.op_Inequality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)">
      <summary>确定两个 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象是否未指定相同的算法。</summary>
      <param name="left">一个指定算法名称的对象。</param>
      <param name="right">要与 <paramref name="left" /> 参数标识的对象进行比较的另一个对象。</param>
      <returns>如果两个对象未指定相同的算法，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.ToString">
      <summary>获取当前 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象指定的算法的名称。</summary>
      <returns>嵌入的算法名称。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 类的新实例。</summary>
      <param name="algorithmGroup">要初始化的算法组的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithmGroup" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="algorithmGroup" /> 参数长度为 0 （零）。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.Equals(System.Object)">
      <summary>将指定的对象与当前的 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 对象进行比较。</summary>
      <param name="obj">要与当前的 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 对象进行比较的对象。</param>
      <returns>true 如果 <paramref name="obj" /> 参数是 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> ，它指定了相同的算法组作为当前对象; 否则为 false。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.Equals(System.Security.Cryptography.CngAlgorithmGroup)">
      <summary>将指定的 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 对象与当前的 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 对象进行比较。</summary>
      <param name="other">要与当前的 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 对象进行比较的对象。</param>
      <returns>true 如果 <paramref name="other" /> 参数指定相同的算法组作为当前对象; 否则为 false。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.GetHashCode">
      <summary>生成当前中嵌入的算法组名称的哈希值 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 对象。</summary>
      <returns>嵌入的算法组名称的哈希值。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.op_Equality(System.Security.Cryptography.CngAlgorithmGroup,System.Security.Cryptography.CngAlgorithmGroup)">
      <summary>确定两个 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 对象指定相同的算法组。</summary>
      <param name="left">一个对象，指定的算法组。</param>
      <param name="right">要与 <paramref name="left" /> 参数标识的对象进行比较的另一个对象。</param>
      <returns>true 如果两个对象指定相同的算法组;否则为 false。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.op_Inequality(System.Security.Cryptography.CngAlgorithmGroup,System.Security.Cryptography.CngAlgorithmGroup)">
      <summary>确定两个 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 对象未指定相同的算法组。</summary>
      <param name="left">一个对象，指定的算法组。</param>
      <param name="right">要与 <paramref name="left" /> 参数标识的对象进行比较的另一个对象。</param>
      <returns>true 如果两个对象未指定相同的算法组;否则为 false。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.ToString">
      <summary>获取算法组的名称当前 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象指定。</summary>
      <returns>嵌入的算法组名称。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm)">
      <summary>创建 <see cref="T:System.Security.Cryptography.CngKey" /> 可用于指定的算法的对象。</summary>
      <param name="algorithm">该密钥将与用于该算法。</param>
      <returns>临时密钥。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> 为 null。</exception>
      <exception cref="T:System.PlatformNotSupportedException">下一代加密技术 (CNG) 不支持此系统上。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String)">
      <summary>创建一个已命名 <see cref="T:System.Security.Cryptography.CngKey" /> 对象，它提供指定的算法。</summary>
      <param name="algorithm">该密钥将与用于该算法。</param>
      <param name="keyName">密钥名称。 如果未提供一个名称，该密钥将不会持久化。</param>
      <returns>一个用于提供指定的算法持久化或临时键。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> 为 null。</exception>
      <exception cref="T:System.PlatformNotSupportedException">下一代加密技术 (CNG) 不支持此系统上。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String,System.Security.Cryptography.CngKeyCreationParameters)">
      <summary>创建一个已命名 <see cref="T:System.Security.Cryptography.CngKey" /> 对象，它提供指定的算法，使用所提供的密钥创建的参数。</summary>
      <param name="algorithm">该密钥将与用于该算法。</param>
      <param name="keyName">密钥名称。 如果未提供一个名称，该密钥将不会持久化。</param>
      <param name="creationParameters">指定的方法，高级的参数的对象包括 <see cref="T:System.Security.Cryptography.CngProvider" />。</param>
      <returns>一个用于提供指定的算法持久化或临时键。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> 为 null。</exception>
      <exception cref="T:System.PlatformNotSupportedException">下一代加密技术 (CNG) 不支持此系统上。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Delete">
      <summary>删除与对象相关联的密钥。</summary>
      <exception cref="T:System.ObjectDisposedException">尝试访问已删除的密钥。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Dispose">
      <summary>释放 <see cref="T:System.Security.Cryptography.CngKey" /> 类的当前实例所使用的所有资源。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Exists(System.String)">
      <summary>检查默认的密钥存储提供程序 (KSP) 中是否存在已命名的密钥。</summary>
      <param name="keyName">密钥名称。</param>
      <returns>true 如果默认的 KSP; 中存在已命名的密钥否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> 为 null。</exception>
      <exception cref="T:System.PlatformNotSupportedException">下一代加密技术 (CNG) 不支持此系统上。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider)">
      <summary>检查指定的密钥存储提供程序 (KSP) 中是否存在已命名的密钥。</summary>
      <param name="keyName">密钥名称。</param>
      <param name="provider">若要检查键 KSP。</param>
      <returns>true 如果指定的提供程序; 中存在已命名的密钥否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> 或 <paramref name="provider" /> 为 null。</exception>
      <exception cref="T:System.PlatformNotSupportedException">下一代加密技术 (CNG) 不支持此系统上。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)">
      <summary>检查已命名的密钥是否存在指定的密钥存储提供程序 (KSP) 中根据指定的选项。</summary>
      <param name="keyName">密钥名称。</param>
      <param name="provider">若要搜索项 KSP。</param>
      <param name="options">指定用于打开密钥的选项的枚举值的按位组合。</param>
      <returns>true 如果指定的提供程序; 中存在已命名的密钥否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> 或 <paramref name="provider" /> 为 null。</exception>
      <exception cref="T:System.PlatformNotSupportedException">下一代加密技术 (CNG) 不支持此系统上。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Export(System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>将密钥材料导出到 BLOB 中指定的格式。</summary>
      <param name="format">一个指定的密钥 BLOB 格式的对象。</param>
      <returns>一个包含指定的格式中的密钥材料的 BLOB。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 null。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。 通常情况下， <see cref="P:System.Security.Cryptography.CngKey.ExportPolicy" /> 不允许要导出的密钥。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.GetProperty(System.String,System.Security.Cryptography.CngPropertyOptions)">
      <summary>获取一个属性，有一个名称，一组的属性选项。</summary>
      <param name="name">所需的属性的名称。</param>
      <param name="options">指定的命名属性的选项的枚举值的按位组合。</param>
      <returns>一个包含指定属性的原始值的对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.HasProperty(System.String,System.Security.Cryptography.CngPropertyOptions)">
      <summary>检查此项上是否存在指定的属性。</summary>
      <param name="name">要检查的属性名称。</param>
      <param name="options">指定的命名属性的选项的枚举值的按位组合。</param>
      <returns>true 如果找到指定的属性;否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>通过将指定的密钥材料导入到默认的密钥存储提供程序 (KSP) 并使用指定的格式创建一个新密钥。</summary>
      <param name="keyBlob">一个数组，包含关键信息。</param>
      <param name="format">一个指定的格式对象 <paramref name="keyBlob" /> 数组。</param>
      <returns>新的密钥。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyBlob" /> 或 <paramref name="format" /> 为 null。</exception>
      <exception cref="T:System.PlatformNotSupportedException">下一代加密技术 (CNG) 不支持此系统上。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngProvider)">
      <summary>通过导入指定的密钥材料到指定的密钥存储提供程序 (KSP) 中，使用指定的格式创建一个新的密钥。</summary>
      <param name="keyBlob">一个包含密钥信息的数组。</param>
      <param name="format">一个对象，该对象指定 <paramref name="keyBlob" /> 数组的格式。</param>
      <param name="provider">KSP。</param>
      <returns>一个新的密钥。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyBlob" />、<paramref name="format" /> 或 <paramref name="provider" /> 为 null。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此系统上不支持下一代加密技术 (CNG)。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Open(Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle,System.Security.Cryptography.CngKeyHandleOpenOptions)">
      <summary>创建的一个实例 <see cref="T:System.Security.Cryptography.CngKey" /> 通过使用现有密钥的句柄的对象。</summary>
      <param name="keyHandle">为现有密钥句柄。</param>
      <param name="keyHandleOpenOptions">一个枚举值，该值指示是否 <paramref name="keyHandle" /> 表示一个临时密钥或已命名的密钥。</param>
      <returns>现有密钥。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyHandle" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keyHandle" /> 无效或格式不正确，或连接已经关闭。 如果键是由公共语言运行时 (CLR) 创建一个临时密钥，也会引发此异常，但 <see cref="F:System.Security.Cryptography.CngKeyHandleOpenOptions.EphemeralKey" /> 未指定值。</exception>
      <exception cref="T:System.PlatformNotSupportedException">下一代加密技术 (CNG) 不支持此系统上。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Open(System.String)">
      <summary>创建的一个实例 <see cref="T:System.Security.Cryptography.CngKey" /> 对象，表示现有的已命名的密钥。</summary>
      <param name="keyName">密钥的名称。</param>
      <returns>现有密钥。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> 为 null。</exception>
      <exception cref="T:System.PlatformNotSupportedException">下一代加密技术 (CNG) 不支持此系统上。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider)">
      <summary>创建的一个实例 <see cref="T:System.Security.Cryptography.CngKey" /> 对象，表示现有的已命名的密钥，使用指定的密钥存储提供程序 (KSP)。</summary>
      <param name="keyName">密钥的名称。</param>
      <param name="provider">包含密钥 KSP。</param>
      <returns>现有密钥。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> 或 <paramref name="provider" /> 为 null。</exception>
      <exception cref="T:System.PlatformNotSupportedException">下一代加密技术 (CNG) 不支持此系统上。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)">
      <summary>创建的一个实例 <see cref="T:System.Security.Cryptography.CngKey" /> 对象，表示现有的已命名的密钥，使用指定的密钥存储提供程序 (KSP) 和密钥打开选项。</summary>
      <param name="keyName">密钥的名称。</param>
      <param name="provider">包含密钥 KSP。</param>
      <param name="openOptions">指定用于打开的密钥，如从 （计算机或用户存储） 打开该项是以及是否禁止显示用户界面提示的选项的枚举值的按位组合。</param>
      <returns>现有密钥。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> 或 <paramref name="provider" /> 为 null。</exception>
      <exception cref="T:System.PlatformNotSupportedException">下一代加密技术 (CNG) 不支持此系统上。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.SetProperty(System.Security.Cryptography.CngProperty)">
      <summary>在项上设置的已命名的属性。</summary>
      <param name="property">要设置的键属性。</param>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 类通过使用指定的格式。</summary>
      <param name="format">要初始化的密钥 BLOB 格式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="format" /> 参数长度为 0 （零）。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.Equals(System.Object)">
      <summary>将指定的对象与当前的 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 对象进行比较。</summary>
      <param name="obj">要与当前的 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 对象进行比较的对象。</param>
      <returns>true 如果 <paramref name="obj" /> 参数是 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 对象，它指定相同的密钥 BLOB 格式与当前对象; 否则为 false。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.Equals(System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>将指定的 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 对象与当前的 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 对象进行比较。</summary>
      <param name="other">要与当前的 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 对象进行比较的对象。</param>
      <returns>true 如果 <paramref name="other" /> 参数指定相同的密钥 BLOB 格式与当前对象; 否则为 false。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.GetHashCode">
      <summary>在当前生成嵌入密钥 BLOB 格式的哈希值 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 对象。</summary>
      <returns>嵌入的密钥 BLOB 格式哈希值。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.op_Equality(System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>确定两个 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 对象指定相同的密钥 BLOB 格式。</summary>
      <param name="left">一个指定密钥 BLOB 格式的对象。</param>
      <param name="right">第二个对象，与标识的对象进行比较 <paramref name="left" /> 参数。</param>
      <returns>true 如果两个对象指定相同的密钥 BLOB 格式;否则为 false。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.op_Inequality(System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>确定两个 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 对象未指定相同的密钥 BLOB 格式。</summary>
      <param name="left">一个指定密钥 BLOB 格式的对象。</param>
      <param name="right">第二个对象，与标识的对象进行比较 <paramref name="left" /> 参数。</param>
      <returns>true 如果两个对象未指定相同的密钥 BLOB 格式;否则为 false。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.ToString">
      <summary>获取密钥 BLOB 格式的名称，当前 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 对象指定。</summary>
      <returns>嵌入密钥 BLOB 格式名称。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyCreationParameters.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.CngKeyCreationParameters" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.#ctor(System.String,System.Byte[],System.Security.Cryptography.CngPropertyOptions)">
      <summary>初始化 <see cref="T:System.Security.Cryptography.CngProperty" /> 类的新实例。</summary>
      <param name="name">要初始化的属性名称。</param>
      <param name="value">要初始化的属性值。</param>
      <param name="options">指定如何存储该属性的枚举值的按位组合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.Equals(System.Object)">
      <summary>将指定的对象与当前的 <see cref="T:System.Security.Cryptography.CngProperty" /> 对象进行比较。</summary>
      <param name="obj">要与当前的 <see cref="T:System.Security.Cryptography.CngProperty" /> 对象进行比较的对象。</param>
      <returns>true 如果 <paramref name="obj" /> 参数是 <see cref="T:System.Security.Cryptography.CngProperty" /> 对象，它指定相同的属性与当前对象; 否则为 false。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.Equals(System.Security.Cryptography.CngProperty)">
      <summary>将指定的 <see cref="T:System.Security.Cryptography.CngProperty" /> 对象与当前的 <see cref="T:System.Security.Cryptography.CngProperty" /> 对象进行比较。</summary>
      <param name="other">要与当前的 <see cref="T:System.Security.Cryptography.CngProperty" /> 对象进行比较的对象。</param>
      <returns>true 如果 <paramref name="other" /> 参数表示相同的属性与当前对象; 否则为 false。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.GetHashCode">
      <summary>生成当前哈希值 <see cref="T:System.Security.Cryptography.CngProperty" /> 对象。</summary>
      <returns>当前的哈希值 <see cref="T:System.Security.Cryptography.CngProperty" /> 对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.GetValue">
      <summary>获取属性值当前 <see cref="T:System.Security.Cryptography.CngProperty" /> 对象指定。</summary>
      <returns>一个数组，表示存储在属性中的值。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.op_Equality(System.Security.Cryptography.CngProperty,System.Security.Cryptography.CngProperty)">
      <summary>确定两个 <see cref="T:System.Security.Cryptography.CngProperty" /> 对象指定相同的属性名称、 值和选项。</summary>
      <param name="left">一个指定的下一代加密技术 (CNG) 密钥或提供程序属性的对象。</param>
      <param name="right">要与 <paramref name="left" /> 参数标识的对象进行比较的另一个对象。</param>
      <returns>true 如果两个对象指定相同的属性;否则为 false。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.op_Inequality(System.Security.Cryptography.CngProperty,System.Security.Cryptography.CngProperty)">
      <summary>确定两个 <see cref="T:System.Security.Cryptography.CngProperty" /> 对象未指定相同的属性名称、 值和选项。</summary>
      <param name="left">一个指定的下一代加密技术 (CNG) 密钥或提供程序属性的对象。</param>
      <param name="right">要与 <paramref name="left" /> 参数标识的对象进行比较的另一个对象。</param>
      <returns>true 如果两个对象未指定相同的属性;否则为 false。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngPropertyCollection.#ctor">
      <summary>初始化新的 <see cref="T:System.Security.Cryptography.CngPropertyCollection" /> 对象。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Security.Cryptography.CngProvider" /> 类的新实例。</summary>
      <param name="provider">若要初始化的密钥存储提供程序 (KSP) 的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="provider" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="provider" /> 参数长度为 0 （零）。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.Equals(System.Object)">
      <summary>将指定的对象与当前的 <see cref="T:System.Security.Cryptography.CngProvider" /> 对象进行比较。</summary>
      <param name="obj">要与当前的 <see cref="T:System.Security.Cryptography.CngProvider" /> 对象进行比较的对象。</param>
      <returns>true 如果 <paramref name="obj" /> 参数是 <see cref="T:System.Security.Cryptography.CngProvider" /> ，它指定相同的密钥存储 provider(KSP) 与当前对象; 否则为 false。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.Equals(System.Security.Cryptography.CngProvider)">
      <summary>将指定的 <see cref="T:System.Security.Cryptography.CngProvider" /> 对象与当前的 <see cref="T:System.Security.Cryptography.CngProvider" /> 对象进行比较。</summary>
      <param name="other">要与当前的 <see cref="T:System.Security.Cryptography.CngProvider" /> 对象进行比较的对象。</param>
      <returns>true 如果 <paramref name="other" /> 参数指定相同的密钥存储提供程序 (KSP) 与当前对象; 否则为 false。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.GetHashCode">
      <summary>生成的名称嵌入在当前的密钥存储提供程序 (KSP) 的哈希值 <see cref="T:System.Security.Cryptography.CngProvider" /> 对象。</summary>
      <returns>嵌入的 KSP 名称哈希值。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.op_Equality(System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngProvider)">
      <summary>确定两个 <see cref="T:System.Security.Cryptography.CngProvider" /> 对象指定相同的密钥存储提供程序 (KSP)。</summary>
      <param name="left">一个指定 KSP 的对象。</param>
      <param name="right">要与 <paramref name="left" /> 参数标识的对象进行比较的另一个对象。</param>
      <returns>true 如果两个对象表示相同的 KSP;否则为 false。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.op_Inequality(System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngProvider)">
      <summary>确定两个 <see cref="T:System.Security.Cryptography.CngProvider" /> 对象不表示同一个密钥存储提供程序 (KSP)。</summary>
      <param name="left">一个指定 KSP 的对象。</param>
      <param name="right">要与 <paramref name="left" /> 参数标识的对象进行比较的另一个对象。</param>
      <returns>true 如果两个对象是否表示相同的 KSP;否则为 false。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.ToString">
      <summary>获取密钥存储提供程序 (KSP) 的名称当前 <see cref="T:System.Security.Cryptography.CngProvider" /> 对象指定。</summary>
      <returns>嵌入的 KSP 名称。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngUIPolicy.#ctor(System.Security.Cryptography.CngUIProtectionLevels)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.CngUIPolicy" /> 类通过使用指定的保护级别。</summary>
      <param name="protectionLevel">指定保护级别的枚举值的按位组合。</param>
    </member>
    <member name="M:System.Security.Cryptography.CngUIPolicy.#ctor(System.Security.Cryptography.CngUIProtectionLevels,System.String)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.CngUIPolicy" /> 类通过使用指定的保护级别和友好名称。</summary>
      <param name="protectionLevel">指定保护级别的枚举值的按位组合。</param>
      <param name="friendlyName">要在用户界面提示中使用的密钥友好名称。 指定要使用的默认名称的空字符串。</param>
    </member>
    <member name="M:System.Security.Cryptography.CngUIPolicy.#ctor(System.Security.Cryptography.CngUIProtectionLevels,System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.CngUIPolicy" /> 类通过使用指定的保护级别、 友好名称和说明。</summary>
      <param name="protectionLevel">指定保护级别的枚举值的按位组合。</param>
      <param name="friendlyName">要在用户界面提示中使用的密钥友好名称。 指定要使用的默认名称的空字符串。</param>
      <param name="description">密钥的全文索引说明。 指定要使用的默认说明的空字符串。</param>
    </member>
    <member name="M:System.Security.Cryptography.CngUIPolicy.#ctor(System.Security.Cryptography.CngUIProtectionLevels,System.String,System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.CngUIPolicy" /> 类通过使用指定的保护级别、 好记的名称、 描述字符串，并使用上下文。</summary>
      <param name="protectionLevel">指定保护级别的枚举值的按位组合。</param>
      <param name="friendlyName">要在用户界面提示中使用的密钥友好名称。 指定要使用的默认名称的空字符串。</param>
      <param name="description">密钥的全文索引说明。 指定要使用的默认说明的空字符串。</param>
      <param name="useContext">说明如何使用密钥。 指定要使用的默认说明的空字符串。</param>
    </member>
    <member name="M:System.Security.Cryptography.CngUIPolicy.#ctor(System.Security.Cryptography.CngUIProtectionLevels,System.String,System.String,System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.CngUIPolicy" /> 类通过使用指定的保护级别、 好记的名称、 描述字符串，使用上下文和标题。</summary>
      <param name="protectionLevel">指定保护级别的枚举值的按位组合。</param>
      <param name="friendlyName">要在用户界面提示中使用的密钥友好名称。 指定要使用的默认名称的空字符串。</param>
      <param name="description">密钥的全文索引说明。 指定要使用的默认说明的空字符串。</param>
      <param name="useContext">说明如何使用密钥。 指定要使用的默认说明的空字符串。</param>
      <param name="creationTitle">提供用户界面提示的对话框标题。 指定要使用的默认标题的空字符串。</param>
    </member>
    <member name="M:System.Security.Cryptography.DSACng.#ctor">
      <summary>使用随机的 2,048 位密钥对初始化 <see cref="T:System.Security.Cryptography.DSACng" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSACng.#ctor(System.Int32)">
      <summary>使用具有指定大小的随机生成密钥初始化 <see cref="T:System.Security.Cryptography.DSACng" /> 类的新实例。</summary>
      <param name="keySize">要生成的密钥的大小(以位为单位)。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="keySize" /> 无效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSACng.#ctor(System.Security.Cryptography.CngKey)">
      <summary>使用指定的密钥初始化 <see cref="T:System.Security.Cryptography.DSACng" /> 类的新实例。</summary>
      <param name="key">要用于 DSA 操作的键。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 不是有效的 DSA 密钥。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSACng.CreateSignature(System.Byte[])">
      <summary>创建指定的数据的数字签名。</summary>
      <param name="rgbHash">要签名的数据。</param>
      <returns>指定数据的数字签名。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> 为 null。</exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <paramref name="rgbHash" /> 是 DSA 密钥的 Q 值长度小于。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSACng.ExportParameters(System.Boolean)">
      <summary>将导出的 DSA 算法参数。</summary>
      <param name="includePrivateParameters">若要包含专用参数，则为 true；否则为 false。</param>
      <returns>DSA 算法参数。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">DSA 密钥不是有效的公共或私有密钥。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSACng.ImportParameters(System.Security.Cryptography.DSAParameters)">
      <summary>通过创建为参数结构创建新的 <see cref="T:System.Security.Cryptography.CngKey" />，来替换当前实例使用的现有密钥。</summary>
      <param name="parameters">DSA 参数中。</param>
      <exception cref="T:System.ArgumentException">指定的 DSA 参数不是有效的。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSACng.VerifySignature(System.Byte[],System.Byte[])">
      <summary>验证是否指定的数字签名是否匹配指定的数据。</summary>
      <param name="rgbHash">已签名的数据。</param>
      <param name="rgbSignature">要验证的数字签名。</param>
      <returns>true 如果 <paramref name="rgbSignature" /> 与使用指定的数据; 计算的签名匹配，否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> 参数为 null。- 或 - <paramref name="rgbSignature" /> 参数为 null。</exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <paramref name="rgbHash" /> 是 DSA 密钥的 Q 值长度小于。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create">
      <summary>创建椭圆曲线 Diffie-hellman (ECDH) 算法的默认实现的新实例。</summary>
      <returns>默认实现此类的新实例。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create(System.String)">
      <summary>创建椭圆曲线 Diffie-hellman (ECDH) 算法的指定实现的新实例。</summary>
      <param name="algorithm">实现 ECDH 算法的名称。 以下字符串全都引用同一个实现，目前是唯一的实现中支持 .NET Framework:-"ECDH"-"ECDiffieHellman"-"ECDiffieHellmanCng"-"System.Security.Cryptography.ECDiffieHellmanCng"此外可以提供自定义 ECDH 实现的名称。</param>
      <returns>指定实现此类的新实例。 如果指定的算法名称没有映射到 ECDH 实现，此方法返回 null。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)">
      <summary>派生可作为 / / 使用哈希函数，给定另一方公用密钥和哈希算法的名称的密钥的字节数。</summary>
      <param name="otherPartyPublicKey">另一方的公钥。</param>
      <param name="hashAlgorithm">要用来派生密钥材料的哈希算法。</param>
      <returns>从与另一方的公钥的密钥交换密钥材料。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])">
      <summary>当在派生类中实现，派生可以用作 / / 使用哈希函数，另一个参与方的公钥、 哈希算法名称、 前置值和追加值给定键的字节数。</summary>
      <param name="otherPartyPublicKey">另一方的公钥。</param>
      <param name="hashAlgorithm">要用来派生密钥材料的哈希算法。</param>
      <param name="secretPrepend">要派生的密钥哈希之前预先计算的值。</param>
      <param name="secretAppend">要进行哈希处理之前将追加到的派生密钥的值。</param>
      <returns>从与另一方的公钥的密钥交换密钥材料。</returns>
      <exception cref="T:System.NotImplementedException">派生方法必须重写此方法。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])">
      <summary>派生可用作使用基于哈希的消息身份验证代码 (HMAC) 的密钥的字节数。</summary>
      <param name="otherPartyPublicKey">另一方的公钥。</param>
      <param name="hashAlgorithm">要用来派生密钥材料的哈希算法。</param>
      <param name="hmacKey">HMAC 密钥。</param>
      <returns>从与另一方的公钥的密钥交换密钥材料。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])">
      <summary>当在派生类中实现，派生可以用作使用基于哈希的消息身份验证代码 (HMAC) 的密钥的字节数。</summary>
      <param name="otherPartyPublicKey">另一方的公钥。</param>
      <param name="hashAlgorithm">要用来派生密钥材料的哈希算法。</param>
      <param name="hmacKey">HMAC 密钥。</param>
      <param name="secretPrepend">要派生的密钥哈希之前预先计算的值。</param>
      <param name="secretAppend">要进行哈希处理之前将追加到的派生密钥的值。</param>
      <returns>从与另一方的公钥的密钥交换密钥材料。</returns>
      <exception cref="T:System.NotImplementedException">派生方法必须重写此方法。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)">
      <summary>派生可用作密钥的字节提供另一方的公钥。</summary>
      <param name="otherPartyPublicKey">另一方的公钥。</param>
      <returns>从与另一方的公钥的密钥交换密钥材料。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])">
      <summary>当在派生类中实现，派生可以用作使用传输层安全性 (TLS) Pseudo-Random 函数 (PRF) 派生算法的密钥的字节数。</summary>
      <param name="otherPartyPublicKey">另一方的公钥。</param>
      <param name="prfLabel">ASCII 编码 PRF 标签中。</param>
      <param name="prfSeed">64 个字节 PRF 种子。</param>
      <returns>从与另一方的公钥的密钥交换密钥材料。</returns>
      <exception cref="T:System.NotImplementedException">派生方法必须重写此方法。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 类随机密钥对。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 类，具有使用指定的密钥大小随机密钥对。</summary>
      <param name="keySize">密钥大小。 有效密钥大小是 256、384 和 521 位。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySize" /> 指定了无效的长度。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此系统不支持下一代加密技术 (CNG) 类。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Security.Cryptography.CngKey)">
      <summary>使用指定的 <see cref="T:System.Security.Cryptography.CngKey" /> 对象初始化 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 类的新实例。</summary>
      <param name="key">一个密钥，它将用作当前对象所执行的加密操作的输入。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 未指定的椭圆曲线 Diffie-hellman (ECDH) 算法组。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此系统不支持下一代加密技术 (CNG) 类。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])">
      <summary>派生可用作 / / 使用哈希函数，另一个参与方的公钥、 哈希算法名称、 前置值和追加值给定键的字节数。</summary>
      <param name="otherPartyPublicKey">另一方的公钥。</param>
      <param name="hashAlgorithm">要用来派生密钥材料的哈希算法。</param>
      <param name="secretPrepend">要派生的密钥哈希之前预先计算的值。</param>
      <param name="secretAppend">要进行哈希处理之前将追加到的派生密钥的值。</param>
      <returns>从与另一方的公钥的密钥交换密钥材料。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> 不是 ECDH 密钥，或者不是正确的大小。- 或 -<paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 null 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])">
      <summary>派生可用作使用基于哈希的消息身份验证代码 (HMAC) 的密钥的字节数。</summary>
      <param name="otherPartyPublicKey">另一方的公钥。</param>
      <param name="hashAlgorithm">要用来派生密钥材料的哈希算法。</param>
      <param name="hmacKey">HMAC 密钥。</param>
      <param name="secretPrepend">要派生的密钥哈希之前预先计算的值。</param>
      <param name="secretAppend">要进行哈希处理之前将追加到的派生密钥的值。</param>
      <returns>从与另一方的公钥的密钥交换密钥材料。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> 不是 ECDH 密钥，或者不是正确的大小。- 或 -<paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 null 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.CngKey)">
      <summary>派生之间两个参与方，给出的机密协议从生成的密钥材料 <see cref="T:System.Security.Cryptography.CngKey" /> 对象，其中包含第二个参与方的公钥。</summary>
      <param name="otherPartyPublicKey">一个包含从另一方密钥交换中的椭圆曲线 Diffie-hellman (ECDH) 密钥的公共部分的对象。</param>
      <returns>一个包含密钥材料的字节数组。 从计算从当前对象的私钥和指定的公钥的机密协议生成此信息。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> 无效。 任一其 <see cref="P:System.Security.Cryptography.CngKey.AlgorithmGroup" /> 属性并不指定 <see cref="P:System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman" /> 或其密钥的长度与此实例的密钥大小不匹配。</exception>
      <exception cref="T:System.InvalidOperationException">此对象的 <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction" /> 属性指定 <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" /> 密钥派生函数，但 <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Label" /> 或 <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed" /> 是 null。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)">
      <summary>派生之间两个参与方，给出的机密协议从生成的密钥材料 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 对象，其中包含第二个参与方的公钥。</summary>
      <param name="otherPartyPublicKey">从另一方密钥交换公钥。</param>
      <returns>一个包含密钥材料的字节数组。 从计算从当前对象的私钥和指定的公钥的机密协议生成此信息。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> 不是 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> 键。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])">
      <summary>派生可用作使用传输层安全性 (TLS) Pseudo-Random 函数 (PRF) 派生算法的密钥的字节数。</summary>
      <param name="otherPartyPublicKey">另一方的公钥。</param>
      <param name="prfLabel">ASCII 编码 PRF 标签中。</param>
      <param name="prfSeed">64 个字节 PRF 种子。</param>
      <returns>从与另一方的公钥的密钥交换密钥材料。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> 为 null。- 或 -<paramref name="prfLabel" /> 为 null。- 或 -<paramref name="prfSeed" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> 不是 ECDH 密钥，或者不是正确的大小。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="prfSeed" /> 并不是 64 字节的长度。- 或 -所有其他加密错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.CngKey)">
      <summary>获取生成之间两个参与方，给出的机密协议的句柄 <see cref="T:System.Security.Cryptography.CngKey" /> 对象，其中包含第二个参与方的公钥。</summary>
      <param name="otherPartyPublicKey">一个包含从另一方密钥交换中的椭圆曲线 Diffie-hellman (ECDH) 密钥的公共部分的对象。</param>
      <returns>机密协议的句柄。 从当前对象的私钥和指定的公钥计算此信息。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> 不是 ECDH 密钥，或者不是正确的大小。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.ECDiffieHellmanPublicKey)">
      <summary>获取生成之间两个参与方，给出的机密协议的句柄 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 对象，其中包含第二个参与方的公钥。</summary>
      <param name="otherPartyPublicKey">从另一方密钥交换公钥。</param>
      <returns>机密协议的句柄。 从当前对象的私钥和指定的公钥计算此信息。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> 不是 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 键。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String)">
      <summary>未实现此方法。</summary>
      <param name="xmlString">基于 XML 的关键信息进行反序列化。</param>
      <exception cref="T:System.NotImplementedException">此实例不重写此方法。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)">
      <summary>使用指定的格式反序列中的 XML 字符串的密钥信息。</summary>
      <param name="xml">基于 XML 的关键信息进行反序列化。</param>
      <param name="format">指定的 XML 字符串的格式的枚举值之一。 当前接受的唯一格式是 <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xml" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="xml" /> 格式不正确。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="format" /> 指定的格式无效。 唯一接受的值是 <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Boolean)">
      <summary>未实现此方法。</summary>
      <param name="includePrivateParameters">若要包含专用参数，则为 true；否则为 false。</param>
      <returns>不适用。</returns>
      <exception cref="T:System.NotImplementedException">此实例不重写此方法。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)">
      <summary>通过使用指定的格式序列化 XML 字符串的密钥信息。</summary>
      <param name="format">指定的 XML 字符串的格式的枚举值之一。 当前接受的唯一格式是 <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />。</param>
      <returns>一个包含键信息、 序列化为的 XML 字符串，根据请求的格式的字符串对象。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="format" /> 指定的格式无效。 唯一接受的值是 <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.FromByteArray(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>将字节数组，其中包含公钥和 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> 根据指定格式的对象。</summary>
      <param name="publicKeyBlob">包含的椭圆曲线 Diffie-hellman (ECDH) 公钥的字节数组。</param>
      <param name="format">一个指定的密钥 BLOB 格式的对象。</param>
      <returns>一个包含在字节数组中序列化的 ECDH 公钥的对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="publicKeyBlob" /> 或 <paramref name="format" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="publicKeyBlob" /> 参数不包含 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 键。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.FromXmlString(System.String)">
      <summary>XML 将字符串转换为 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> 对象。</summary>
      <param name="xml">一个 XML 字符串，包含一个椭圆曲线 Diffie-hellman (ECDH) 密钥。</param>
      <returns>一个包含由给定的 XML 指定 ECDH 公钥的对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xml" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="xml" /> 参数未指定 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 键。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.Import">
      <summary>将转换 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> 对象传递给 <see cref="T:System.Security.Cryptography.CngKey" /> 对象。</summary>
      <returns>一个对象，包含表示密钥 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> 对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.ToXmlString">
      <summary>将序列化为 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> 公钥与 RFC 4050 格式的 XML 字符串。</summary>
      <returns>一个包含已序列化的 XML 字符串 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> 公共密钥。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.#ctor(System.Byte[])">
      <summary>初始化 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 类的新实例。</summary>
      <param name="keyBlob">表示 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 对象的字节数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyBlob" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.Dispose">
      <summary>释放 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 类的当前实例所使用的所有资源。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.Dispose(System.Boolean)">
      <summary>释放 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 类使用的非托管资源，并可以选择释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ToByteArray">
      <summary>将 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 密钥 BLOB 序列化为字节数组。</summary>
      <returns>一个字节数组，包含已序列化的椭圆曲线 Diffie-Hellman (ECDH) 公钥。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ToXmlString">
      <summary>将 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 公钥序列化为 XML 字符串。</summary>
      <returns>一个 XML 字符串，该字符串包含已序列化的椭圆曲线 Diffie-Hellman (ECDH) 公钥。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.ECDsa" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create">
      <summary>创建默认实现的椭圆曲线数字签名算法 (ECDSA) 的新实例。</summary>
      <returns>默认实现的新实例 (<see cref="T:System.Security.Cryptography.ECDsaCng" />) 的此类。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create(System.String)">
      <summary>创建指定的椭圆曲线数字签名算法 (ECDSA) 实现的新实例。</summary>
      <param name="algorithm">ECDSA 实现的名称。 以下字符串全都引用同一个实现，目前是唯一的实现中支持 .NET Framework:-"ECDsa"-"ECDsaCng"-"System.Security.Cryptography.ECDsaCng"此外可以提供自定义 ECDSA 实现的名称。</param>
      <returns>指定实现此类的新实例。 如果指定的算法名称没有映射到 ECDSA 实现，此方法返回 null。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>在派生类中进行重写后，通过使用指定的哈希算法计算字节数组指定部分的哈希值。</summary>
      <param name="data">要进行哈希处理的数据。</param>
      <param name="offset">
        <paramref name="data" /> 中要进行哈希处理的第一个字节的索引。</param>
      <param name="count">要进行哈希处理的字节数。</param>
      <param name="hashAlgorithm">要用于对数据进行哈希处理的算法。</param>
      <returns>经过哈希处理的数据。</returns>
      <exception cref="T:System.NotImplementedException">派生方法必须重写此方法。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>在派生类中进行重写后，通过使用指定的哈希算法计算指定二进制流的哈希值。</summary>
      <param name="data">要进行哈希处理的二进制流。</param>
      <param name="hashAlgorithm">要用于对数据进行哈希处理的算法。</param>
      <returns>经过哈希处理的数据。</returns>
      <exception cref="T:System.NotImplementedException">派生方法必须重写此方法。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>使用指定的哈希算法计算指定字节数组的一个部分的哈希值，并对生成的哈希值进行签名。</summary>
      <param name="data">要为其计算哈希的输入数据。</param>
      <param name="offset">数组中自其开始使用数据的偏移量。</param>
      <param name="count">数组中用作数据的字节数。</param>
      <param name="hashAlgorithm">要用于创建哈希值的哈希算法。</param>
      <returns>指定数据的 ECDSA 签名。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 null 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于零。- 或 -<paramref name="count" /> 小于零。- 或 -<paramref name="offset" /> + <paramref name="count" /> – 1 会导致超出 <paramref name="data" /> 上限的索引。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>使用指定的哈希算法计算指定字节数组的哈希值，并对生成的哈希值进行签名。</summary>
      <param name="data">要为其计算哈希的输入数据。</param>
      <param name="hashAlgorithm">要用于创建哈希值的哈希算法。</param>
      <returns>指定数据的 ECDSA 签名。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 null 或 <see cref="F:System.String.Empty" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>使用指定的哈希算法计算指定流的哈希值，并对生成的哈希值进行签名。</summary>
      <param name="data">要为其计算哈希的输入流。</param>
      <param name="hashAlgorithm">要用于创建哈希值的哈希算法。</param>
      <returns>指定数据的 ECDSA 签名。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 null 或 <see cref="F:System.String.Empty" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignHash(System.Byte[])">
      <summary>为指定的哈希值生成数字签名。</summary>
      <param name="hash">待签名数据的哈希值。</param>
      <returns>一个数字签名，其中包含用私钥加密的给定哈希值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>通过使用指定的哈希算法计算指定数据的哈希值，并将其与提供的签名进行比较，验证数字签名是否有效。</summary>
      <param name="data">已签名的数据。</param>
      <param name="signature">要验证的签名数据。</param>
      <param name="hashAlgorithm">要用于创建数据哈希值的哈希算法。</param>
      <returns>如果签名有效，则为 true；否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。- 或 -<paramref name="signature" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 null 或 <see cref="F:System.String.Empty" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>通过使用指定的哈希算法计算字节数组一个部分中数据的哈希值，并将其与提供的签名进行比较，验证数字签名是否有效。</summary>
      <param name="data">已签名的数据。</param>
      <param name="offset">开始计算哈希的起始索引。</param>
      <param name="count">要进行哈希处理的字节数。</param>
      <param name="signature">要验证的签名数据。</param>
      <param name="hashAlgorithm">要用于创建数据哈希值的哈希算法。</param>
      <returns>如果签名有效，则为 true；否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。- 或 -<paramref name="signature" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 null 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于零。- 或 -<paramref name="count" /> 小于零。- 或 -<paramref name="offset" /> + <paramref name="count" /> – 1 会导致超出 <paramref name="data" /> 上限的索引。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>通过使用指定的哈希算法计算指定流的哈希值，并将其与提供的签名进行比较，验证数字签名是否有效。</summary>
      <param name="data">已签名的数据。</param>
      <param name="signature">要验证的签名数据。</param>
      <param name="hashAlgorithm">要用于创建数据哈希值的哈希算法。</param>
      <returns>如果签名有效，则为 true；否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。- 或 -<paramref name="signature" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 为 null 或 <see cref="F:System.String.Empty" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])">
      <summary>针对指定的哈希值验证数字签名。</summary>
      <param name="hash">数据块的哈希值。</param>
      <param name="signature">要验证的数字签名。</param>
      <returns>如果哈希值等于已解密的签名，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.#ctor">
      <summary>使用随机的密钥对初始化 <see cref="T:System.Security.Cryptography.ECDsaCng" /> 类的新实例。</summary>
      <exception cref="T:System.PlatformNotSupportedException">此系统不支持下一代加密技术 (CNG) 类。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.#ctor(System.Int32)">
      <summary>使用指定密钥大小，通过随机密钥对来初始化 <see cref="T:System.Security.Cryptography.ECDsaCng" /> 类的新实例。</summary>
      <param name="keySize">密钥大小。 有效密钥大小是 256、384 和 521 位。</param>
      <exception cref="T:System.PlatformNotSupportedException">此系统不支持下一代加密技术 (CNG) 类。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="keySize" /> 指定了无效的长度。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.#ctor(System.Security.Cryptography.CngKey)">
      <summary>使用指定的 <see cref="T:System.Security.Cryptography.CngKey" /> 对象初始化 <see cref="T:System.Security.Cryptography.ECDsaCng" /> 类的新实例。</summary>
      <param name="key">一个密钥，它将用作当前对象所执行的加密操作的输入。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 不指定椭圆曲线数字签名算法 (ECDSA) 组。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此系统不支持下一代加密技术 (CNG) 类。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.FromXmlString(System.String)">
      <summary>未实现此方法。</summary>
      <param name="xmlString">基于 XML 的关键信息进行反序列化。</param>
      <exception cref="T:System.NotImplementedException">此实例不重写此方法。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)">
      <summary>使用指定的格式反序列中的 XML 字符串的密钥信息。</summary>
      <param name="xml">基于 XML 的关键信息进行反序列化。</param>
      <param name="format">指定的 XML 字符串的格式的枚举值之一。 当前接受的唯一格式是 <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xml" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="format" /> 指定的格式无效。 唯一接受的值是 <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.SignData(System.Byte[])">
      <summary>生成指定的数据的签名。</summary>
      <param name="data">要进行签名的消息数据。</param>
      <returns>指定的数据的进行数字签名。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">与该实例关联的密钥信息没有私钥。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.SignData(System.Byte[],System.Int32,System.Int32)">
      <summary>生成指定长度的数据，从指定偏移量开始的数字签名。</summary>
      <param name="data">要进行签名的消息数据。</param>
      <param name="offset">从其开始签名字符串中的位置。</param>
      <param name="count">中后面的字符的字符串的长度 <paramref name="offset" /> 中将签名。</param>
      <returns>指定的数据长度的数字签名。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 或 <paramref name="offset" /> 导致边界之外的数据字符串读取。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">与该实例关联的密钥信息没有私钥。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.SignData(System.IO.Stream)">
      <summary>生成指定的数据流，正在读取到流的末尾的签名。</summary>
      <param name="data">要进行签名的数据流。</param>
      <returns>用于指定的数据流的数字签名。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">与该实例关联的密钥信息没有私钥。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.SignHash(System.Byte[])">
      <summary>为指定哈希值生成签名。</summary>
      <param name="hash">待签名数据的哈希值。</param>
      <returns>指定哈希值的数字签名。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> 为 null。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">与该实例关联的密钥信息没有私钥。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.ToXmlString(System.Boolean)">
      <summary>未实现此方法。</summary>
      <param name="includePrivateParameters">若要包含专用参数，则为 true；否则为 false。</param>
      <returns>不适用。</returns>
      <exception cref="T:System.NotImplementedException">未实现此方法。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)">
      <summary>通过使用指定的格式序列化 XML 字符串的密钥信息。</summary>
      <param name="format">指定的 XML 字符串的格式的枚举值之一。 当前接受的唯一格式是 <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />。</param>
      <returns>一个包含键信息、 序列化到根据请求的格式的 XML 字符串的字符串对象。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="format" /> 指定的格式无效。 唯一接受的值是 <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Byte[])">
      <summary>验证指定的数据的数字签名。</summary>
      <param name="data">已签名的数据。</param>
      <param name="signature">要验证的签名。</param>
      <returns>如果签名有效，则为 true；否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 或 <paramref name="signature" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[])">
      <summary>验证指定长度的数据，从指定偏移量开始的签名。</summary>
      <param name="data">已签名的数据。</param>
      <param name="offset">在已签名的数据开始处的数据的位置。</param>
      <param name="count">中后面的字符数据的长度 <paramref name="offset" /> 中将签名。</param>
      <param name="signature">要验证的签名。</param>
      <returns>如果签名有效，则为 true；否则为 false。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 小于零。- 或 -<paramref name="offset" /> 或 <paramref name="count" /> 大于传入的字节数组的长度 <paramref name="data" /> 参数。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 或 <paramref name="signature" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.VerifyData(System.IO.Stream,System.Byte[])">
      <summary>验证指定的数据流，正在读取到流的末尾的数字签名。</summary>
      <param name="data">已签名的数据流。</param>
      <param name="signature">要验证的签名。</param>
      <returns>如果签名有效，则为 true；否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 或 <paramref name="signature" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.VerifyHash(System.Byte[],System.Byte[])">
      <summary>针对指定的哈希值验证指定的数字签名。</summary>
      <param name="hash">待验证的数据的哈希值。</param>
      <param name="signature">要结合哈希值验证的数据的数字签名。</param>
      <returns>如果签名有效，则为 true；否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> 或 <paramref name="signature" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(System.ActivationContext)">
      <summary>收集并验证有关签名的属于指定的激活上下文的清单信息。</summary>
      <param name="application">清单的激活上下文。 激活上下文属于某个应用程序，并包含多个清单。</param>
      <returns>一个包含集合 <see cref="T:System.Security.Cryptography.ManifestSignatureInformation" /> 验证每个清单的对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="application" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(System.ActivationContext,System.Security.ManifestKinds)">
      <summary>收集并验证有关的签名信息的清单属于指定的激活上下文和清单类型。</summary>
      <param name="application">清单的激活上下文。 激活上下文属于某个应用程序，并包含多个清单。</param>
      <param name="manifests">清单的类型。 此参数指定您想要验证的激活上下文中的清单。</param>
      <returns>一个包含集合 <see cref="T:System.Security.Cryptography.ManifestSignatureInformation" /> 验证每个清单的对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="application" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(System.ActivationContext,System.Security.ManifestKinds,System.Security.Cryptography.X509Certificates.X509RevocationFlag,System.Security.Cryptography.X509Certificates.X509RevocationMode)">
      <summary>收集并验证有关签名的清单属于指定的激活上下文和清单类型的信息并允许选择要吊销的证书。</summary>
      <param name="application">清单的应用程序上下文。 激活上下文属于某个应用程序，并包含多个清单。</param>
      <param name="manifests">清单的类型。 此参数指定您想要验证的激活上下文中的清单。</param>
      <param name="revocationFlag">用于指定哪些证书链中的检查已吊销的枚举值之一。 默认值为 <see cref="F:System.Security.Cryptography.X509Certificates.X509RevocationFlag.ExcludeRoot" />。</param>
      <param name="revocationMode">确定是否 X.509 验证应联机查找吊销列表。</param>
      <returns>一个包含集合 <see cref="T:System.Security.Cryptography.ManifestSignatureInformation" /> 验证每个清单的对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="application" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">为指定了值 <paramref name="revocationFlag" /> 或 <paramref name="revocationMode" /> 参数无效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.MD5Cng.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.MD5Cng" /> 类的新实例。</summary>
      <exception cref="T:System.InvalidOperationException">此实现不是 Windows 平台 FIPS 验证的加密算法的一部分。</exception>
    </member>
    <member name="M:System.Security.Cryptography.MD5Cng.Initialize">
      <summary>初始化或重新初始化的实例的哈希算法。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSACng.#ctor">
      <summary>使用随机的 2,048 位密钥对初始化 <see cref="T:System.Security.Cryptography.RSACng" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSACng.#ctor(System.Int32)">
      <summary>使用具有指定大小的随机生成密钥初始化 <see cref="T:System.Security.Cryptography.RSACng" /> 类的新实例。</summary>
      <param name="keySize">要生成的密钥的大小(以位为单位)。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="keySize" /> 无效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACng.#ctor(System.Security.Cryptography.CngKey)">
      <summary>使用指定的密钥初始化 <see cref="T:System.Security.Cryptography.RSACng" /> 类的新实例。</summary>
      <param name="key">要用于 RSA 操作的密钥。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 不是有效的 RSA 密钥。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACng.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>使用指定填充模式对输入数据解密。</summary>
      <param name="data">要解密的数据。</param>
      <param name="padding">填充模式。</param>
      <returns>已解密的数据。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。- 或 -<paramref name="padding" /> 为 null。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> 不等于 <see cref="P:System.Security.Cryptography.RSAEncryptionPadding.Pkcs1" />否则 <paramref name="padding" /> 的 <see cref="P:System.Security.Cryptography.RSAEncryptionPadding.Mode" /> 不等于 <see cref="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACng.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>使用指定的填充方式对输入数据进行加密。</summary>
      <param name="data">要加密的数据。</param>
      <param name="padding">填充模式。</param>
      <returns>返回 <see cref="T:System.Byte" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。- 或 -<paramref name="padding" /> 为 null。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> 不等于 <see cref="P:System.Security.Cryptography.RSASignaturePadding.Pkcs1" /> 或 <see cref="P:System.Security.Cryptography.RSASignaturePadding.Pss" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACng.ExportParameters(System.Boolean)">
      <summary>将 RSA 对象使用的密钥导出到 <see cref="T:System.Security.Cryptography.RSAParameters" /> 对象中。</summary>
      <param name="includePrivateParameters">若要包含专用参数，则为 true；否则为 false。</param>
      <returns>RSA 对象使用的密钥。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSACng.ImportParameters(System.Security.Cryptography.RSAParameters)">
      <summary>通过创建为参数结构创建新的 <see cref="T:System.Security.Cryptography.CngKey" />，来替换当前实例使用的现有密钥。</summary>
      <param name="parameters">RSA 参数。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> 既不包含指数，也不包含模数。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="parameters" /> 不是有效的 RSA 密钥。- 或 -<paramref name="parameters" /> 是一个完整的密钥对并使用默认的 KSP。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACng.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>对使用指定哈希算法和填充模式进行了哈希处理的数据进行签名。</summary>
      <param name="hash">要签名的哈希值。</param>
      <param name="hashAlgorithm">哈希算法名称。</param>
      <param name="padding">填充模式。</param>
      <returns>已签名的数据。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> 为 null。- 或 -<paramref name="padding" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 属性的值为 null 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> 与 <see cref="P:System.Security.Cryptography.RSASignaturePadding.Pkcs1" /> 或 <see cref="P:System.Security.Cryptography.RSASignaturePadding.Pss" /> 不相等。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACng.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>验证已签名且已使用指定算法和填充模式进行哈希处理的数据。</summary>
      <param name="hash">要验证的哈希值。</param>
      <param name="signature">数据的签名。</param>
      <param name="hashAlgorithm">哈希算法名称。</param>
      <param name="padding">填充模式。</param>
      <returns>如果签名对哈希值有效，则为 true；否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> 为 null。- 或 -<paramref name="signature" /> 为 null。- 或 -<paramref name="padding" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 属性的值为 null 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> 与 <see cref="P:System.Security.Cryptography.RSASignaturePadding.Pkcs1" /> 或 <see cref="P:System.Security.Cryptography.RSASignaturePadding.Pss" /> 不相等。</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Cng.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.SHA1Cng" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Cng.Initialize">
      <summary>初始化或重新初始化的实例的哈希算法。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Cng.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.SHA256Cng" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Cng.Initialize">
      <summary>初始化或重新初始化的实例的哈希算法。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256CryptoServiceProvider.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.SHA256CryptoServiceProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256CryptoServiceProvider.Initialize">
      <summary>初始化或重新初始化，哈希算法的实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Cng.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.SHA384Cng" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Cng.Initialize">
      <summary>初始化或重新初始化的实例的哈希算法。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384CryptoServiceProvider.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.SHA384CryptoServiceProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384CryptoServiceProvider.Initialize">
      <summary>初始化或重新初始化，哈希算法的实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Cng.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.SHA512Cng" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Cng.Initialize">
      <summary>初始化或重新初始化的实例的哈希算法。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512CryptoServiceProvider.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.SHA512CryptoServiceProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512CryptoServiceProvider.Initialize">
      <summary>初始化或重新初始化，哈希算法的实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCng.#ctor">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.TripleDESCng" /> 类，具有一个临时密钥。</summary>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCng.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.TripleDESCng" /> 类，具有指定键的名称，它表示的现有持久化 3DES 密钥。</summary>
      <param name="keyName">密钥的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> 为 null。</exception>
      <exception cref="T:System.PlatformNotSupportedException">
              下一代加密技术 (CNG) 不支持此系统上。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCng.#ctor(System.String,System.Security.Cryptography.CngProvider)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.TripleDESCng" /> 类，具有指定键的名称，它表示的现有持久存储 3DES 密钥，以及指定的密钥存储提供程序 (KSP)。</summary>
      <param name="keyName">密钥的名称。</param>
      <param name="provider">包含密钥 KSP。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> 为 null。- 或 -<paramref name="provider" /> 为 null。</exception>
      <exception cref="T:System.PlatformNotSupportedException">
              下一代加密技术 (CNG) 不支持此系统上。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCng.#ctor(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.TripleDESCng" /> 类，具有指定键的名称，它表示的现有持久化 3DES 密钥、 指定的密钥存储提供程序 (KSP) 和密钥打开选项。</summary>
      <param name="keyName">密钥的名称。</param>
      <param name="provider">包含密钥 KSP。</param>
      <param name="openOptions">指定用于打开的密钥，如从 （计算机或用户存储） 打开该项是以及是否禁止显示用户界面提示的选项的枚举值的按位组合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> 为 null。- 或 -<paramref name="provider" /> 为 null。</exception>
      <exception cref="T:System.PlatformNotSupportedException">
              下一代加密技术 (CNG) 不支持此系统上。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他错误。</exception>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCng.CreateDecryptor">
      <summary>创建具有当前密钥和初始化向量的 3DES 对称解密器对象 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />)。</summary>
      <returns>3DES 对称解密器对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCng.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>使用指定的密钥和初始化向量 (IV) 创建 3DES 对称解密器对象。</summary>
      <param name="rgbKey">要使用 3DES 算法的机密密钥。 密钥大小必须为 192 位。</param>
      <param name="rgbIV">要使用 3DES 算法的初始化向量。</param>
      <returns>3DES 对称解密器对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbKey" />  是 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="rgbKey" />  不是此算法的有效大小。- 或 -<paramref name="rgbIV" /> 大小与此算法的块大小不匹配。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="rgbKey" /> 是此算法的已知弱密钥，不能使用。- 或 -<paramref name="rgbIV" />  是 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCng.CreateEncryptor">
      <summary>创建使用当前的密钥和初始化向量 3DES 对称加密器对象 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />)。</summary>
      <returns>3DES 对称加密器对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCng.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>使用指定的键和初始化向量 (IV) 创建对称 3DES 加密器对象。</summary>
      <param name="rgbKey">要使用 3DES 算法的机密密钥。 密钥大小必须为 192 位。</param>
      <param name="rgbIV">要使用 3DES 算法的初始化向量。</param>
      <returns>3DES 对称加密器对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbKey" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="rgbKey" /> 不是此算法的有效大小。- 或 -<paramref name="rgbIV" /> 大小与此算法的块大小不匹配。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="rgbKey" /> 是此算法的已知弱密钥，不能使用。- 或 -<paramref name="rgbIV" />  是 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCng.GenerateIV">
      <summary>生成的随机初始化向量 (IV) 使用 3DES 算法。</summary>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCng.GenerateKey">
      <summary>生成用于 3DES 算法的随机密钥。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.DSACertificateExtensions.GetDSAPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>获取 <see cref="T:System.Security.Cryptography.DSA" /> 私钥从 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。</summary>
      <param name="certificate">证书。</param>
      <returns>专用密钥，或 null 如果证书不具有 DSA ╬ 盞  芲。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.DSACertificateExtensions.GetDSAPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>获取 <see cref="T:System.Security.Cryptography.DSA" /> 来自公用密钥 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。</summary>
      <param name="certificate">证书。</param>
      <returns>公钥，或 null 如果证书不具有 DSA 公共密钥。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 为 null。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Windows 将报告错误。 有关更多信息，请参见 <see cref="P:System.Exception.Message" /> 属性。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>从 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 证书获取 <see cref="T:System.Security.Cryptography.ECDsa" /> 私钥。</summary>
      <param name="certificate">证书。</param>
      <returns>私钥，或如果证书不具有 ECDsa 私钥，则为 null。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>从 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 证书获取 <see cref="T:System.Security.Cryptography.ECDsa" /> 公钥。</summary>
      <param name="certificate">证书。</param>
      <returns>公钥，或如果证书不具有 ECDsa 公钥，则为 null。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 为 null。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">该句柄无效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>从 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 获取 <see cref="T:System.Security.Cryptography.RSA" /> 私钥。</summary>
      <param name="certificate">证书。</param>
      <returns>如果证书不具有 RSA 私钥，则为该私钥或 null。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>从 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 获取 <see cref="T:System.Security.Cryptography.RSA" /> 公钥。</summary>
      <param name="certificate">证书。</param>
      <returns>公钥；如果证书不具有 RSA 公钥，则为 null。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 为 null。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Windows 将报告错误。 有关更多信息，请参见 <see cref="P:System.Exception.Message" /> 属性。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.#ctor">
      <summary>使用默认属性值初始化 <see cref="T:System.Threading.ReaderWriterLockSlim" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.#ctor(System.Threading.LockRecursionPolicy)">
      <summary>在指定锁定递归策略的情况下初始化 <see cref="T:System.Threading.ReaderWriterLockSlim" /> 类的新实例。</summary>
      <param name="recursionPolicy">枚举值之一，用于指定锁定递归策略。</param>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.Dispose">
      <summary>释放 <see cref="T:System.Threading.ReaderWriterLockSlim" /> 类的当前实例所使用的所有资源。</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.WaitingReadCount" /> 大于零。- 或 -<see cref="P:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount" /> 大于零。- 或 -<see cref="P:System.Threading.ReaderWriterLockSlim.WaitingWriteCount" /> 大于零。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterReadLock">
      <summary>尝试进入读取模式锁定状态。</summary>
      <exception cref="T:System.Threading.LockRecursionException">当前线程持有读取锁时将无法获取写入锁。- 或 -<see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 属性为 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />，并且当前线程在已持有读取锁时已尝试获取读取锁。- 或 -<see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 属性为 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />，并且当前线程在已持有写入锁时已尝试获取读取锁。- 或 -递归数将超出该计数器的容量。 此限值很大，因此应用程序永远不会遇到此异常。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.ReaderWriterLockSlim" /> 对象已释放。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock">
      <summary>尝试进入可升级模式锁定状态。</summary>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 属性是 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> 并且当前线程已在任何模式下进入了该锁。- 或 -当前线程已进入读取的模式，因此尝试进入可升级模式将有死锁的可能性。- 或 -递归数将超出该计数器的容量。 限制为应用程序应永远不会遇到它太大。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.ReaderWriterLockSlim" /> 对象已释放。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterWriteLock">
      <summary>尝试进入写入模式锁定状态。</summary>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 属性是 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> 并且当前线程已在任何模式下进入了该锁。- 或 -当前线程已进入读取的模式，因此尝试进入写入模式锁定将有死锁的可能性。- 或 -递归数将超出该计数器的容量。 限制为应用程序应永远不会遇到它太大。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.ReaderWriterLockSlim" /> 对象已释放。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitReadLock">
      <summary>减少读取模式的递归计数，并在生成的计数为 0（零）时退出读取模式。</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">当前线程没有已进入读取模式的锁定。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock">
      <summary>减少可升级模式的递归计数，并在生成的计数为 0（零）时退出可升级模式。</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">当前线程没有已进入可升级模式的锁定。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitWriteLock">
      <summary>减少写入模式的递归计数，并在生成的计数为 0（零）时退出写入模式。</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">当前线程没有已进入写入模式的锁定。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.Int32)">
      <summary>尝试进入读取模式锁定状态，可以选择整数超时时间。</summary>
      <param name="millisecondsTimeout">等待的毫秒数，或为 -1 (<see cref="F:System.Threading.Timeout.Infinite" />)，表示无限期等待。</param>
      <returns>如果调用线程已进入读取模式，则为 true；否则为 false。</returns>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 属性是 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> 和当前线程已进入该锁。- 或 -递归数将超出该计数器的容量。 限制为应用程序应永远不会遇到它太大。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">值 <paramref name="millisecondsTimeout" /> 为负，但不等于 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，这是唯一允许的值为负。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.ReaderWriterLockSlim" /> 对象已释放。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.TimeSpan)">
      <summary>尝试进入读取模式锁定状态，可以选择超时时间。</summary>
      <param name="timeout">等待的间隔；或为 -1 毫秒，表示无限期等待。</param>
      <returns>如果调用线程已进入读取模式，则为 true；否则为 false。</returns>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 属性是 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> 和当前线程已进入该锁。- 或 -递归数将超出该计数器的容量。 限制为应用程序应永远不会遇到它太大。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">值 <paramref name="timeout" /> 为负，但不等于-1 毫秒，这是唯一允许的值为负。- 或 -值 <paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" /> 毫秒为单位。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.ReaderWriterLockSlim" /> 对象已释放。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.Int32)">
      <summary>尝试进入可升级模式锁定状态，可以选择超时时间。</summary>
      <param name="millisecondsTimeout">等待的毫秒数，或为 -1 (<see cref="F:System.Threading.Timeout.Infinite" />)，表示无限期等待。</param>
      <returns>如果调用线程已进入可升级模式，则为 true；否则为 false。</returns>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 属性是 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> 和当前线程已进入该锁。- 或 -当前线程的锁最初进入读取模式，并因此尝试进入可升级模式会创建导致死锁的可能性。- 或 -递归数将超出该计数器的容量。 限制为应用程序应永远不会遇到它太大。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">值 <paramref name="millisecondsTimeout" /> 为负，但不等于 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，这是唯一允许的值为负。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.ReaderWriterLockSlim" /> 对象已释放。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.TimeSpan)">
      <summary>尝试进入可升级模式锁定状态，可以选择超时时间。</summary>
      <param name="timeout">等待的间隔；或为 -1 毫秒，表示无限期等待。</param>
      <returns>如果调用线程已进入可升级模式，则为 true；否则为 false。</returns>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 属性是 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> 和当前线程已进入该锁。- 或 -当前线程的锁最初进入读取模式，并因此尝试进入可升级模式会创建导致死锁的可能性。- 或 -递归数将超出该计数器的容量。 限制为应用程序应永远不会遇到它太大。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">值 <paramref name="timeout" /> 为负，但不等于-1 毫秒，这是唯一允许的值为负。- 或 -值 <paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" /> 毫秒为单位。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.ReaderWriterLockSlim" /> 对象已释放。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.Int32)">
      <summary>尝试进入写入模式锁定状态，可以选择超时时间。</summary>
      <param name="millisecondsTimeout">等待的毫秒数，或为 -1 (<see cref="F:System.Threading.Timeout.Infinite" />)，表示无限期等待。</param>
      <returns>如果调用线程已进入写入模式，则为 true；否则为 false。</returns>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 属性是 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> 和当前线程已进入该锁。- 或 -当前线程的锁最初进入读取模式，并因此尝试进入写入模式会创建导致死锁的可能性。- 或 -递归数将超出该计数器的容量。 限制为应用程序应永远不会遇到它太大。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">值 <paramref name="millisecondsTimeout" /> 为负，但不等于 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，这是唯一允许的值为负。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.ReaderWriterLockSlim" /> 对象已释放。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.TimeSpan)">
      <summary>尝试进入写入模式锁定状态，可以选择超时时间。</summary>
      <param name="timeout">等待的间隔；或为 -1 毫秒，表示无限期等待。</param>
      <returns>如果调用线程已进入写入模式，则为 true；否则为 false。</returns>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 属性是 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> 和当前线程已进入该锁。- 或 -当前线程的锁最初进入读取模式，并因此尝试进入写入模式会创建导致死锁的可能性。- 或 -递归数将超出该计数器的容量。 限制为应用程序应永远不会遇到它太大。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">值 <paramref name="timeout" /> 为负，但不等于-1 毫秒，这是唯一允许的值为负。- 或 -值 <paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" /> 毫秒为单位。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.ReaderWriterLockSlim" /> 对象已释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
      <summary>创建一个代理 <see cref="T:System.Threading.Tasks.Task" /> 表示异步操作的 <see cref="M:System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)" />。</summary>
      <param name="task">Task&lt;Task&gt; (C#) 或 Task (Of Task) (Visual Basic 中) 进行解包。</param>
      <returns>表示所提供的异步操作的任务 System.Threading.Tasks.Task(Of Task)。</returns>
      <exception cref="T:System.ArgumentNullException">如果引发的异常 <paramref name="task" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
      <summary>创建一个代理 <see cref="T:System.Threading.Tasks.Task" /> 表示异步操作的 Task&lt;Task&lt;T&gt;&gt; (C#) 或 Task (Of Task(Of T)) (Visual Basic 中)。</summary>
      <param name="task">Task&lt;Task&lt;T&gt;&gt; (C#) 或 Task (Of Task(Of T)) (Visual Basic 中) 进行解包。</param>
      <typeparam name="TResult">该任务的结果的类型。</typeparam>
      <returns>一个 <see cref="T:System.Threading.Tasks.Task" /> 表示所提供的异步操作 Task&lt;Task&lt;T&gt;&gt; (C#) 或 Task (Of Task(Of T)) (Visual Basic 中)。</returns>
      <exception cref="T:System.ArgumentNullException">如果引发的异常 <paramref name="task" /> 参数为 null。</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Comparer">
      <summary>获取用于确定集中的值是否相等的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对象。</summary>
      <returns>用于确定集中的值是否相等的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对象。</returns>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Count">
      <summary>获取集中包含的元素数。</summary>
      <returns>集中包含的元素数。</returns>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.Current">
      <summary>获取枚举数当前位置的元素。</summary>
      <returns>中的元素 <see cref="T:System.Collections.Generic.HashSet`1" /> 位于该枚举数当前位置的集合。</returns>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>获取枚举数当前位置的元素。</summary>
      <returns>集合中位于该枚举数当前位置的元素作为 <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在集合或最后一个元素之后的第一个元素之前。</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>获取一个值，该值指示集合是否为只读。</summary>
      <returns>如果该集合为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.Channel">
      <summary>从事件描述符检索通道值。</summary>
      <returns>定义事件的潜在目标通道。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.EventId">
      <summary>从事件描述符检索事件标识符值。</summary>
      <returns>事件标识符。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.Keywords">
      <summary>从事件描述符检索关键字值。</summary>
      <returns>关键字，这是一个位掩码，它指定事件类别。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.Level">
      <summary>从事件描述符检索级别的值。</summary>
      <returns>在事件中包括的详细程度。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.Opcode">
      <summary>从事件描述符检索操作代码值。</summary>
      <returns>在事件被写入时正在执行的操作。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.Task">
      <summary>从事件描述符检索任务值。</summary>
      <returns>标识正在写入事件的应用程序的逻辑组件的任务。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.Version">
      <summary>从事件描述符检索版本值。</summary>
      <returns>事件的版本。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventProviderTraceListener.Delimiter">
      <summary>获取和设置用来写入到 ETW 子系统的事件数据分隔的分隔符。</summary>
      <returns>用来分隔事件数据的分隔符。 默认分隔符是逗号。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventProviderTraceListener.IsThreadSafe">
      <summary>获取一个值，该值指示跟踪侦听器是否是线程安全的。</summary>
      <returns>如果跟踪侦听器是线程安全的，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventKeyword.DisplayName">
      <summary>获取该关键字的本地化的名称。</summary>
      <returns>返回一个字符串，包含此关键字具有本地化的名称。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventKeyword.Name">
      <summary>获取的非本地化名称的关键字。</summary>
      <returns>返回一个字符串，包含此关键字的非本地化名称。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventKeyword.Value">
      <summary>获取与关键字关联的数字值。</summary>
      <returns>返回一个 long 值。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLevel.DisplayName">
      <summary>获取事件的事件级别的本地化的名称。 该名称描述此级别用于何种严重性级别的事件。</summary>
      <returns>返回一个字符串，包含事件的事件级别的本地化的名称。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLevel.Name">
      <summary>获取事件的事件级别的非本地化名称。</summary>
      <returns>返回一个字符串，包含的非本地化名称的事件级别。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLevel.Value">
      <summary>获取事件的事件级别的数值。</summary>
      <returns>返回一个整数值。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.IsClassicLog">
      <summary>获取用于指示事件日志是否传统事件日志的标志。 传统事件日志是指有.mc 文件而不是由事件提供程序清单 （.xml 文件） 中定义其事件。</summary>
      <returns>返回 true 如果事件日志是经典的日志，并返回 false 如果事件日志不是传统的日志。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.IsEnabled">
      <summary>获取或设置一个布尔值，确定是否启用或禁用事件日志。 已启用的日志可以在其中可以记录事件，并禁用的日志是一个不能在其中记录事件。</summary>
      <returns>返回 true 如果日志已启用，且返回 false 如果日志处于禁用状态。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogFilePath">
      <summary>获取或设置到存储这些事件的日志文件的位置的文件目录路径。</summary>
      <returns>返回一个字符串，包含事件日志文件的路径。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogIsolation">
      <summary>获取 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogIsolation" /> 值，该值指定事件日志是应用程序、 系统或自定义事件日志。</summary>
      <returns>返回 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogIsolation" /> 值。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogMode">
      <summary>获取或设置 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogMode" /> 值，该值确定在事件日志变满时如何处理的事件。</summary>
      <returns>返回 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogMode" /> 值。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogName">
      <summary>获取事件日志的名称。</summary>
      <returns>返回一个字符串，包含事件日志的名称。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogType">
      <summary>获取 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogType" /> 值，该值确定事件日志的类型。</summary>
      <returns>返回 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogType" /> 值。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.MaximumSizeInBytes">
      <summary>获取或设置以字节为单位，事件日志文件是允许的最大大小。 当文件达到此最大大小时，则视为已满。</summary>
      <returns>事件日志文件可以是将返回表示最大大小，以字节为单位，一个长值。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.OwningProviderName">
      <summary>获取创建此事件日志的事件提供程序的名称。</summary>
      <returns>返回一个字符串，包含的事件提供程序创建此事件日志的名称。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderBufferSize">
      <summary>获取事件提供程序用于将事件发布到日志的缓冲区的大小。</summary>
      <returns>返回一个整数值，可以为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderControlGuid">
      <summary>如果该日志是调试日志，获取事件日志的控制全局唯一标识符 (GUID)。 如果此日志不是调试日志，此值将为 null。</summary>
      <returns>返回 GUID 值或 null。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderKeywords">
      <summary>获取或设置事件提供程序所使用的关键字掩码。</summary>
      <returns>返回一个长值，如果事件提供程序未定义任何关键字可以为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderLatency">
      <summary>获取事件发布到日志时，事件提供程序所使用的最大延迟时间。</summary>
      <returns>返回一个整数值，如果任何滞后时间由事件提供程序不指定的可以为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderLevel">
      <summary>获取或设置最大事件级别 （它定义的事件严重性），允许将记录在事件日志中。 事件提供程序定义此值。</summary>
      <returns>返回一个整数值，可以为 null，如果最大事件级别不在事件提供程序中定义。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderMaximumNumberOfBuffers">
      <summary>获取事件提供程序用于将事件发布到事件日志的缓冲区的最大数目。</summary>
      <returns>返回一个整数值，为事件提供程序用于将事件发布到事件日志的缓冲区的最大数目。 此值可以为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderMinimumNumberOfBuffers">
      <summary>获取事件提供程序用于将事件发布到事件日志的缓冲区的最小数目。</summary>
      <returns>返回一个整数值，为事件提供程序用于将事件发布到事件日志的缓冲区的最小数目。 此值可以为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderNames">
      <summary>获取可以将事件发布到此事件日志的所有事件提供程序的名称的可枚举集合。</summary>
      <returns>返回包含事件提供程序名称的字符串的可枚举集合。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SecurityDescriptor">
      <summary>获取或设置事件日志的安全描述符。 安全描述符定义的用户和组的用户可以读取和写入事件日志。</summary>
      <returns>返回一个字符串，包含事件日志的安全描述符。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogException.Message">
      <summary>获取描述当前异常的错误消息。</summary>
      <returns>返回一个字符串，包含用于描述当前异常的错误消息。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.Attributes">
      <summary>获取与该日志关联的日志文件的文件属性。</summary>
      <returns>返回一个整数值。 此值可以为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.CreationTime">
      <summary>获取关联的事件日志的日志文件已创建的时间。</summary>
      <returns>返回一个 <see cref="T:System.DateTime" /> 对象。 此值可以为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.FileSize">
      <summary>获取该文件，以字节为单位，关联的事件日志的大小。</summary>
      <returns>返回一个长值。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.IsLogFull">
      <summary>获取一个布尔值，确定日志文件是否已达到其最大大小 （日志已满时）。</summary>
      <returns>返回 true 如果日志已满，并且返回 false 如果日志未满。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.LastAccessTime">
      <summary>获取上一次关联的事件日志的日志文件被访问过。</summary>
      <returns>返回一个 <see cref="T:System.DateTime" /> 对象。 此值可以为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.LastWriteTime">
      <summary>获取为关联的事件日志的日志文件写入数据的最后一个时间。</summary>
      <returns>返回一个 <see cref="T:System.DateTime" /> 对象。 此值可以为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.OldestRecordNumber">
      <summary>在事件日志中获取最早的事件记录的数。</summary>
      <returns>返回一个表示在事件日志中最早事件记录数的长值。 此值可以为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.RecordCount">
      <summary>在事件日志中获取事件记录的数。</summary>
      <returns>返回一个表示的事件日志中的事件记录数的长值。 此值可以为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogLink.DisplayName">
      <summary>获取事件日志的本地化的名称。</summary>
      <returns>返回一个字符串，包含事件日志的本地化的名称。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogLink.IsImported">
      <summary>获取一个布尔值，确定是否在事件日志导入，而不是在事件提供程序中定义。 导入的事件日志是在不同的提供程序中定义的。</summary>
      <returns>返回 true 如果事件日志事件提供程序，导入，并且返回 false 事件提供程序不导入事件日志。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogLink.LogName">
      <summary>获取与此对象关联的事件日志的非本地化名称。</summary>
      <returns>返回一个字符串，包含与此对象关联的事件日志的非本地化名称。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogQuery.ReverseDirection">
      <summary>获取或设置用于确定是否在事件日志中的最新事件从到最旧的事件日志中读取事件的布尔值。</summary>
      <returns>返回 true 如果最早的事件，并返回到读取事件日志中的最新事件从 false 如果向最新事件从最旧的事件日志中读取事件。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogQuery.Session">
      <summary>获取或设置访问本地计算机或远程计算机上的事件日志服务的会话。 可以设置此对象来访问远程事件日志创建 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> 对象或 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> 对象与此 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogQuery" /> 对象。</summary>
      <returns>返回 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" /> 对象。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogQuery.TolerateQueryErrors">
      <summary>获取或设置一个布尔值，用于确定此查询将继续以检索查询发生错误时的事件。</summary>
      <returns>true 指示查询将继续检索事件，即使查询失败，则对某些日志和 false 指示此查询将不继续检索事件，如果查询失败。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogReader.BatchSize">
      <summary>获取或设置检索从每个读取操作上的事件的流的事件数。</summary>
      <returns>返回一个整数值。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogReader.LogStatus">
      <summary>获取每个事件日志或与此对象中的事件查询相关联的日志文件的状态。</summary>
      <returns>返回的列表 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogStatus" /> 每个包含有关与此对象中的事件查询关联的事件日志的状态信息的对象。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.ActivityId">
      <summary>获取活动涉及到该事件的进程中的全局唯一标识符 (GUID)。 这允许使用者组相关的活动。</summary>
      <returns>返回一个 GUID 值。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Bookmark">
      <summary>获取此事件相对应的占位符 （书签）。 这可以用作事件流中的占位符。</summary>
      <returns>返回一个 <see cref="T:System.Diagnostics.Eventing.Reader.EventBookmark" /> 对象。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.ContainerLog">
      <summary>获取事件日志或在其中存储事件的事件日志文件的名称。</summary>
      <returns>返回一个字符串，包含事件日志或在其中存储事件的事件日志文件的名称。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Id">
      <summary>获取此事件的标识符。 具有此标识符值的所有事件都表示相同类型的事件。</summary>
      <returns>返回一个整数值。 此值可以为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Keywords">
      <summary>获取事件的关键字掩码。 获取的值 <see cref="P:System.Diagnostics.Eventing.Reader.EventLogRecord.KeywordsDisplayNames" /> 属性来获取此掩码中使用的关键字的名称。</summary>
      <returns>返回一个长值。 此值可以为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.KeywordsDisplayNames">
      <summary>获取此事件的关键字掩码中使用的关键字的显示名称。</summary>
      <returns>返回包含关键字掩码中使用此事件的关键字的显示名称的字符串的可枚举集合。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Level">
      <summary>获取事件的级别。 级别表示事件的严重性。 对于级别的名称，获取 <see cref="P:System.Diagnostics.Eventing.Reader.EventLogRecord.LevelDisplayName" /> 属性。</summary>
      <returns>返回一个字节值。 此值可以为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.LevelDisplayName">
      <summary>获取此事件的级别的显示名称。</summary>
      <returns>返回一个字符串，包含此事件的级别的显示名称。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.LogName">
      <summary>获取事件日志的名称将记录此事件。</summary>
      <returns>返回一个字符串，包含包含此事件的事件日志的名称。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.MachineName">
      <summary>获取在其记录此事件的计算机的名称。</summary>
      <returns>返回一个字符串，包含在其记录此事件的计算机的名称。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.MatchedQueryIds">
      <summary>获取此事件与相匹配的查询标识符的列表。 此事件与查询相匹配，如果该查询将返回此事件。</summary>
      <returns>返回整数值的可枚举集合。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Opcode">
      <summary>获取事件的操作码。 操作码定义一个数值，它标识的活动或在引发事件时，应用程序正在执行的活动内的点。 对于操作码的名称，获取 <see cref="P:System.Diagnostics.Eventing.Reader.EventLogRecord.OpcodeDisplayName" /> 属性。</summary>
      <returns>返回较短的值。 此值可以为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.OpcodeDisplayName">
      <summary>获取此事件的操作码的显示名称。</summary>
      <returns>返回一个字符串，包含此事件的操作码的显示名称。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.ProcessId">
      <summary>获取记录此事件的事件提供程序的进程标识符。</summary>
      <returns>返回一个整数值。 此值可以为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Properties">
      <summary>获取事件的用户提供的属性。</summary>
      <returns>返回的列表 <see cref="T:System.Diagnostics.Eventing.Reader.EventProperty" /> 对象。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.ProviderId">
      <summary>获取发布此事件的事件提供程序的全局唯一标识符 (GUID)。</summary>
      <returns>返回一个 GUID 值。 此值可以为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.ProviderName">
      <summary>获取发布此事件的事件提供程序的名称。</summary>
      <returns>返回一个字符串，包含发布此事件的事件提供程序的名称。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Qualifiers">
      <summary>获取用于事件标识的限定符数。</summary>
      <returns>返回一个整数值。 此值可以为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.RecordId">
      <summary>在日志中获取事件的事件记录标识符。</summary>
      <returns>返回一个长值。 此值可以为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.RelatedActivityId">
      <summary>在所涉及事件的进程中的相关活动获取全局唯一标识符 (GUID)。</summary>
      <returns>返回一个 GUID 值。 此值可以为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Task">
      <summary>获取应用程序或发布的事件的组件的一部分的任务标识符。 任务是具有保留的前 16 个值的 16 位值。 该类型允许之间 0x0000 和 0xffef 要使用的任何值。 对于任务的名称，获取 <see cref="P:System.Diagnostics.Eventing.Reader.EventLogRecord.TaskDisplayName" /> 属性。</summary>
      <returns>返回一个整数值。 此值可以为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.TaskDisplayName">
      <summary>获取事件的任务的显示名称。</summary>
      <returns>返回一个字符串，包含该事件的任务的显示名称。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.ThreadId">
      <summary>获取事件提供程序运行中的线程的线程标识符。</summary>
      <returns>返回一个整数值。 此值可以为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.TimeCreated">
      <summary>在获取的时间， <see cref="T:System.DateTime" /> 设置格式，请创建了事件。</summary>
      <returns>返回一个 <see cref="T:System.DateTime" /> 值。 值可以为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.UserId">
      <summary>获取其上下文用于发布事件的用户的安全描述符。</summary>
      <returns>返回一个 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 值。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Version">
      <summary>获取事件的版本号。</summary>
      <returns>返回一个字节值。 此值可以为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogSession.GlobalSession">
      <summary>获取连接到本地计算机上的事件日志服务的静态预定义的会话对象。</summary>
      <returns>返回 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" /> 是连接到本地计算机上的事件日志服务的预定义的会话对象的对象。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogStatus.LogName">
      <summary>获取为其获取状态代码的事件日志的名称。</summary>
      <returns>返回一个字符串，包含为其获取状态代码的事件日志的名称。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogStatus.StatusCode">
      <summary>获取事件日志的状态代码或错误代码。 此状态或错误是由事件日志上读取或订阅操作的结果。</summary>
      <returns>返回一个整数值。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled">
      <summary>确定此对象是否开始将事件传递给事件委托。</summary>
      <returns>返回 true 时此对象可以将事件传递到事件委托，并返回 false 时此对象已停止传递。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Description">
      <summary>获取与当前线程区域设置用于描述语言事件相关联的描述模板。</summary>
      <returns>返回一个字符串，包含与事件关联的描述模板。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Id">
      <summary>获取事件提供程序中定义的事件的标识符。</summary>
      <returns>返回 long 的事件标识符的值。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Keywords">
      <summary>获取与甚至提供程序中定义的事件相关的关键字。</summary>
      <returns>返回的可枚举集合 <see cref="T:System.Diagnostics.Eventing.Reader.EventKeyword" /> 对象。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Level">
      <summary>获取与事件提供程序中定义的事件相关联的级别。 级别定义的事件严重性。</summary>
      <returns>返回 <see cref="T:System.Diagnostics.Eventing.Reader.EventLevel" /> 对象。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.LogLink">
      <summary>获取到收到此事件时提供者发布了此事件的事件日志的链接。</summary>
      <returns>返回一个 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogLink" /> 对象。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Opcode">
      <summary>获取与此事件定义的事件提供程序关联的操作码。 操作码定义一个数值，它标识的活动或在引发事件时，应用程序正在执行的活动内的点。</summary>
      <returns>返回一个 <see cref="T:System.Diagnostics.Eventing.Reader.EventOpcode" /> 对象。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Task">
      <summary>获取与事件关联的任务。 任务标识应用程序或发布的事件的组件的一部分。</summary>
      <returns>返回一个 <see cref="T:System.Diagnostics.Eventing.Reader.EventTask" /> 对象。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Template">
      <summary>获取事件的模板字符串。 模板用于描述由提供程序在发布的事件的数据。 模板 （可选） 指定提供事件的结构的 XML。 XML 允许事件发布程序提供的事件在呈现过程中要插入的值。</summary>
      <returns>返回一个字符串，包含该事件的模板。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Version">
      <summary>获取符合条件的事件标识符的事件的版本。</summary>
      <returns>返回一个字节值。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventOpcode.DisplayName">
      <summary>获取事件操作码的本地化的名称。</summary>
      <returns>返回一个字符串，包含事件操作码的本地化的名称。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventOpcode.Name">
      <summary>获取事件操作码的非本地化名称。</summary>
      <returns>返回一个字符串，包含事件操作码的非本地化名称。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventOpcode.Value">
      <summary>获取事件操作码与关联的数字值。</summary>
      <returns>返回一个整数值。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventProperty.Value">
      <summary>获取发布事件时指定事件提供程序的事件属性的值。</summary>
      <returns>返回一个对象。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.ActivityId">
      <summary>获取活动涉及到该事件的进程中的全局唯一标识符 (GUID)。 这允许使用者组相关的活动。</summary>
      <returns>返回一个 GUID 值。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Bookmark">
      <summary>获取此事件相对应的占位符 （书签）。 这可以用作事件流中的占位符。</summary>
      <returns>返回一个 <see cref="T:System.Diagnostics.Eventing.Reader.EventBookmark" /> 对象。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Id">
      <summary>获取此事件的标识符。 具有此标识符值的所有事件都表示相同类型的事件。</summary>
      <returns>返回一个整数值。 此值可以为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Keywords">
      <summary>获取事件的关键字掩码。 获取的值 <see cref="P:System.Diagnostics.Eventing.Reader.EventRecord.KeywordsDisplayNames" /> 属性来获取此掩码中使用的关键字的名称。</summary>
      <returns>返回一个长值。 此值可以为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.KeywordsDisplayNames">
      <summary>获取此事件的关键字掩码中使用的关键字的显示名称。</summary>
      <returns>返回包含关键字掩码中使用此事件的关键字的显示名称的字符串的可枚举集合。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Level">
      <summary>获取事件的级别。 级别表示事件的严重性。 对于级别的名称，获取 <see cref="P:System.Diagnostics.Eventing.Reader.EventRecord.LevelDisplayName" /> 属性。</summary>
      <returns>返回一个字节值。 此值可以为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.LevelDisplayName">
      <summary>获取此事件的级别的显示名称。</summary>
      <returns>返回一个字符串，包含此事件的级别的显示名称。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.LogName">
      <summary>获取事件日志的名称将记录此事件。</summary>
      <returns>返回一个字符串，包含包含此事件的事件日志的名称。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.MachineName">
      <summary>获取在其记录此事件的计算机的名称。</summary>
      <returns>返回一个字符串，包含在其记录此事件的计算机的名称。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Opcode">
      <summary>获取事件的操作码。 操作码定义一个数值，它标识的活动或在引发事件时，应用程序正在执行的活动内的点。 对于操作码的名称，获取 <see cref="P:System.Diagnostics.Eventing.Reader.EventRecord.OpcodeDisplayName" /> 属性。</summary>
      <returns>返回较短的值。 此值可以为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.OpcodeDisplayName">
      <summary>获取此事件的操作码的显示名称。</summary>
      <returns>返回一个字符串，包含此事件的操作码的显示名称。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.ProcessId">
      <summary>获取记录此事件的事件提供程序的进程标识符。</summary>
      <returns>返回一个整数值。 此值可以为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Properties">
      <summary>获取事件的用户提供的属性。</summary>
      <returns>返回的列表 <see cref="T:System.Diagnostics.Eventing.Reader.EventProperty" /> 对象。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.ProviderId">
      <summary>获取发布此事件的事件提供程序的全局唯一标识符 (GUID)。</summary>
      <returns>返回一个 GUID 值。 此值可以为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.ProviderName">
      <summary>获取发布此事件的事件提供程序的名称。</summary>
      <returns>返回一个字符串，包含发布此事件的事件提供程序的名称。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Qualifiers">
      <summary>获取用于事件标识的限定符数。</summary>
      <returns>返回一个整数值。 此值可以为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.RecordId">
      <summary>在日志中获取事件的事件记录标识符。</summary>
      <returns>返回一个长值。 此值可以为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.RelatedActivityId">
      <summary>在所涉及事件的进程中的相关活动获取全局唯一标识符 (GUID)。</summary>
      <returns>返回一个 GUID 值。 此值可以为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Task">
      <summary>获取应用程序或发布的事件的组件的一部分的任务标识符。 任务是具有保留的前 16 个值的 16 位值。 该类型允许之间 0x0000 和 0xffef 要使用的任何值。 若要获取任务名称，请获取的值 <see cref="P:System.Diagnostics.Eventing.Reader.EventRecord.TaskDisplayName" /> 属性。</summary>
      <returns>返回一个整数值。 此值可以为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.TaskDisplayName">
      <summary>获取事件的任务的显示名称。</summary>
      <returns>返回一个字符串，包含该事件的任务的显示名称。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.ThreadId">
      <summary>获取事件提供程序运行中的线程的线程标识符。</summary>
      <returns>返回一个整数值。 此值可以为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.TimeCreated">
      <summary>在获取的时间， <see cref="T:System.DateTime" /> 设置格式，请创建了事件。</summary>
      <returns>返回一个 <see cref="T:System.DateTime" /> 值。 值可以为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.UserId">
      <summary>获取其上下文用于发布事件的用户的安全描述符。</summary>
      <returns>返回一个 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 值。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Version">
      <summary>获取事件的版本号。</summary>
      <returns>返回一个字节值。 此值可以为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs.EventException">
      <summary>获取事件订阅失败时出现的异常。 此异常包含订阅失败原因的说明。</summary>
      <returns>返回 <see cref="T:System.Exception" /> 对象。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs.EventRecord">
      <summary>获取发布到事件日志的事件记录。 此事件与事件订阅中指定的查询条件相匹配。</summary>
      <returns>返回一个 <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" /> 对象。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventTask.DisplayName">
      <summary>获取事件任务的本地化的名称。</summary>
      <returns>返回一个字符串，包含事件任务的本地化的名称。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventTask.EventGuid">
      <summary>获取与任务关联的事件全局唯一标识符 (GUID)。</summary>
      <returns>返回一个 GUID 值。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventTask.Name">
      <summary>获取事件任务的非本地化名称。</summary>
      <returns>返回一个字符串，包含的非本地化名称的事件任务。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventTask.Value">
      <summary>获取与任务关联的数字值。</summary>
      <returns>返回一个整数值。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.DisplayName">
      <summary>获取事件提供程序的本地化的名称。</summary>
      <returns>返回一个字符串，包含事件提供程序的本地化的名称。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Events">
      <summary>获取的可枚举集合 <see cref="T:System.Diagnostics.Eventing.Reader.EventMetadata" /> 对象，其中每个表示提供程序中定义的事件。</summary>
      <returns>返回的可枚举集合 <see cref="T:System.Diagnostics.Eventing.Reader.EventMetadata" /> 对象。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.HelpLink">
      <summary>获取基窗体的帮助请求用于此事件提供程序中的事件的 URL。</summary>
      <returns>返回一个 <see cref="T:System.Uri" /> 值。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Id">
      <summary>获取事件提供程序的全局唯一标识符 (GUID)。</summary>
      <returns>返回事件提供程序的 GUID 值。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Keywords">
      <summary>获取的可枚举集合 <see cref="T:System.Diagnostics.Eventing.Reader.EventKeyword" /> 对象，其中每个表示一个事件关键字，则在事件提供程序中定义。</summary>
      <returns>返回的可枚举集合 <see cref="T:System.Diagnostics.Eventing.Reader.EventKeyword" /> 对象。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Levels">
      <summary>获取的可枚举集合 <see cref="T:System.Diagnostics.Eventing.Reader.EventLevel" /> 在事件提供程序对象，其中每个代表是某个级别中定义。</summary>
      <returns>返回的可枚举集合 <see cref="T:System.Diagnostics.Eventing.Reader.EventLevel" /> 对象。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.LogLinks">
      <summary>获取的可枚举集合 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogLink" /> 对象，其中每个表示链接到使用事件提供程序事件日志。</summary>
      <returns>返回的可枚举集合 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogLink" /> 对象。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.MessageFilePath">
      <summary>获取包含具有与提供程序元数据相关联的字符串的消息表资源的文件的路径。</summary>
      <returns>返回一个字符串，包含提供程序路径消息文件。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Name">
      <summary>获取事件提供程序的唯一名称。</summary>
      <returns>返回一个字符串，包含事件提供程序的唯一名称。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Opcodes">
      <summary>获取的可枚举集合 <see cref="T:System.Diagnostics.Eventing.Reader.EventOpcode" /> 对象，其中每个表示一个操作码，即在事件提供程序中定义。</summary>
      <returns>返回的可枚举集合 <see cref="T:System.Diagnostics.Eventing.Reader.EventOpcode" /> 对象。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.ParameterFilePath">
      <summary>获取包含具有用于事件描述中的参数替换的字符串的消息表资源的文件的路径。</summary>
      <returns>返回一个字符串，包含文件，其中包含具有用于事件描述中的参数替换的字符串的消息表资源的路径。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.ResourceFilePath">
      <summary>获取包含与提供程序关联的元数据的文件的路径。</summary>
      <returns>返回一个字符串，包含指向包含与提供程序关联的元数据的文件的路径。</returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Tasks">
      <summary>获取的可枚举集合 <see cref="T:System.Diagnostics.Eventing.Reader.EventTask" /> 对象，其中每个表示的任务是在事件提供程序中定义。</summary>
      <returns>返回的可枚举集合 <see cref="T:System.Diagnostics.Eventing.Reader.EventTask" /> 对象。</returns>
    </member>
    <member name="P:System.Diagnostics.EventSchemaTraceListener.BufferSize">
      <summary>获取输出缓冲区的大小。</summary>
      <returns>输出缓冲区的大小（以字节为单位）。</returns>
    </member>
    <member name="P:System.Diagnostics.EventSchemaTraceListener.IsThreadSafe">
      <summary>获取一个值，该值指示跟踪侦听器是否是线程安全的。</summary>
      <returns>始终返回 true。</returns>
    </member>
    <member name="P:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize">
      <summary>获取日志文件的最大大小。</summary>
      <returns>最大文件大小（以字节为单位）。</returns>
    </member>
    <member name="P:System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles">
      <summary>获取日志文件最大数。</summary>
      <returns>日志文件最大数是由文件的 <see cref="P:System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption" /> 属性的值来确定。</returns>
    </member>
    <member name="P:System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption">
      <summary>获取该文件的跟踪日志保留选项。</summary>
      <returns>
        <see cref="T:System.Diagnostics.TraceLogRetentionOption" /> 值之一。 默认值为 <see cref="F:System.Diagnostics.TraceLogRetentionOption.SingleFileUnboundedSize" />。</returns>
    </member>
    <member name="P:System.Diagnostics.EventSchemaTraceListener.Writer">
      <summary>获取或设置写入日志文件的基础文本编写器。</summary>
      <returns>一个 <see cref="T:System.IO.TextWriter" /> 对象。</returns>
      <exception cref="T:System.NotSupportedException">尝试将一个值赋给 <see cref="P:System.Diagnostics.EventSchemaTraceListener.Writer" /> 属性。</exception>
    </member>
    <member name="P:System.Diagnostics.PerformanceData.CounterData.RawValue">
      <summary>设置或获取原始计数器数据。</summary>
      <returns>原始计数器数据。</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceData.CounterData.Value">
      <summary>设置或获取计数器数据。</summary>
      <returns>计数器数据。</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceData.CounterSetInstance.Counters">
      <summary>为计数器集实例检索计数器数据集合。</summary>
      <returns>计数器集实例中包含的计数器数据集合。</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item(System.Int32)">
      <summary>使用指定的计数器标识符访问集合中的计数器值。</summary>
      <param name="counterId">此计数器的标识符。 这是在向计数器集中添加计数器时使用的标识符。</param>
      <returns>计数器数据。</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item(System.String)">
      <summary>使用指定的计数器名称访问该集合中的计数器值。</summary>
      <param name="counterName">计数器的名称。 这是在向计数器集中添加计数器时使用的名称。</param>
      <returns>计数器数据。</returns>
    </member>
    <member name="P:System.Diagnostics.UnescapedXmlDiagnosticData.UnescapedXml">
      <summary>获取或设置非转义的 XML 数据字符串。</summary>
      <returns>非转义的 XML 字符串。</returns>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.Operation">
      <summary>二元运算类型。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ExpressionType" /> 表示二元运算的类型的对象。</returns>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.ReturnType">
      <summary>操作的结果类型。</summary>
      <returns>操作的结果类型。</returns>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentCount">
      <summary>参数的数量。</summary>
      <returns>参数的数量。</returns>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentNames">
      <summary>参数名称。</summary>
      <returns>参数名称的只读集合。</returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Explicit">
      <summary>获取一个值，指示转换应视为显式转换。</summary>
      <returns>True 如果没有显式转换，否则 false。</returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.ReturnType">
      <summary>操作的结果类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。</returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Type">
      <summary>要转换为的类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示要转换的类型。</returns>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.CallInfo">
      <summary>在调用站点处获取参数的签名。</summary>
      <returns>调用站点处参数的签名。</returns>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.ReturnType">
      <summary>操作的结果类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。</returns>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.CallInfo">
      <summary>在调用站点处获取参数的签名。</summary>
      <returns>调用站点处参数的签名。</returns>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.ReturnType">
      <summary>操作的结果类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.IgnoreCase">
      <summary>获取一个值，指示字符串比较应忽略成员名称的大小写。</summary>
      <returns>如果字符串比较应忽略大小写，否则为 false，则为 true。</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.Name">
      <summary>获取要删除的成员的名称。</summary>
      <returns>要删除的成员的名称。</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.ReturnType">
      <summary>操作的结果类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Expression">
      <summary>表示表达式 <see cref="T:System.Dynamic.DynamicMetaObject" /> 动态绑定过程。</summary>
      <returns>表示表达式 <see cref="T:System.Dynamic.DynamicMetaObject" /> 动态绑定过程。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.HasValue">
      <summary>获取一个值，该值指示是否 <see cref="T:System.Dynamic.DynamicMetaObject" /> 具有运行时的值。</summary>
      <returns>True <see cref="T:System.Dynamic.DynamicMetaObject" /> 具有的运行时值，否则为 false。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.LimitType">
      <summary>获取限制类型 <see cref="T:System.Dynamic.DynamicMetaObject" />。</summary>
      <returns>
        <see cref="P:System.Dynamic.DynamicMetaObject.RuntimeType" /> 运行时的值是否可用，一种类型的 <see cref="P:System.Dynamic.DynamicMetaObject.Expression" /> 否则为。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Restrictions">
      <summary>绑定的限制在其下的绑定是有效的集。</summary>
      <returns>一组绑定限制。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.RuntimeType">
      <summary>获取 <see cref="T:System.Type" /> 时为空值的运行时值的 <see cref="T:System.Dynamic.DynamicMetaObject" /> 没有与其相关联的值。</summary>
      <returns>
        <see cref="T:System.Type" /> 运行时的值，则为 null。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Value">
      <summary>表示此的运行时值 <see cref="T:System.Dynamic.DynamicMetaObject" />。</summary>
      <returns>表示此的运行时值 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObjectBinder.ReturnType">
      <summary>操作的结果类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。</returns>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#Count">
      <summary>添加指定的值到 <see cref="T:System.Collections.Generic.ICollection`1" /> 中具有指定的键。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 结构，它表示键和值以便添加到集合。</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns>如果 true 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 false。</returns>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String@System#Object}#Item(System.String)">
      <summary>获取或设置具有指定的键的元素。</summary>
      <param name="key">要获取或设置的元素的键。</param>
      <returns>具有指定键的元素。</returns>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String@System#Object}#Keys">
      <summary>获取 <see cref="T:System.Collections.Generic.ICollection`1" /> ，它包含的关键字 <see cref="T:System.Collections.Generic.IDictionary`2" />。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> ，包含实现的对象的键 <see cref="T:System.Collections.Generic.IDictionary`2" />。</returns>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String@System#Object}#Values">
      <summary>获取包含 <see cref="T:System.Collections.Generic.ICollection`1" /> 中的值的 <see cref="T:System.Collections.Generic.IDictionary`2" />。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> ，其中包含实现的对象中的值 <see cref="T:System.Collections.Generic.IDictionary`2" />。</returns>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.CallInfo">
      <summary>在调用站点处获取参数的签名。</summary>
      <returns>调用站点处参数的签名。</returns>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.ReturnType">
      <summary>操作的结果类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.IgnoreCase">
      <summary>获取一个值，指示字符串比较应忽略成员名称的大小写。</summary>
      <returns>如果这种情况会将其忽略，否则为 false，则为 true。</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.Name">
      <summary>获取要获取的成员的名称。</summary>
      <returns>要获取的成员的名称。</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.ReturnType">
      <summary>操作的结果类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。</returns>
    </member>
    <member name="P:System.Dynamic.IInvokeOnGetBinder.InvokeOnGet">
      <summary>获取一个值，指示是否在执行 get 操作时，该获取成员操作应调用属性。 此接口不存在时的默认值为 true。</summary>
      <returns>如果在执行 get 操作中; 时，该获取成员操作应调用属性则为 true否则为 false。</returns>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.CallInfo">
      <summary>在调用站点处获取参数的签名。</summary>
      <returns>调用站点处参数的签名。</returns>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.ReturnType">
      <summary>操作的结果类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.CallInfo">
      <summary>在调用站点处获取参数的签名。</summary>
      <returns>调用站点处参数的签名。</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.IgnoreCase">
      <summary>获取一个值，指示字符串比较应忽略成员名称的大小写。</summary>
      <returns>如果这种情况会将其忽略，否则为 false，则为 true。</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.Name">
      <summary>获取要调用的成员的名称。</summary>
      <returns>要调用的成员的名称。</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.ReturnType">
      <summary>操作的结果类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。</returns>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.CallInfo">
      <summary>在调用站点处获取参数的签名。</summary>
      <returns>调用站点处参数的签名。</returns>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.ReturnType">
      <summary>操作的结果类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.IgnoreCase">
      <summary>获取一个值，指示字符串比较应忽略成员名称的大小写。</summary>
      <returns>如果这种情况会将其忽略，否则为 false，则为 true。</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.Name">
      <summary>获取要获取的成员的名称。</summary>
      <returns>要获取的成员的名称。</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.ReturnType">
      <summary>操作的结果类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。</returns>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.Operation">
      <summary>一元运算类型。</summary>
      <returns>对象的 <see cref="T:System.Linq.Expressions.ExpressionType" /> 表示一元运算类型。</returns>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.ReturnType">
      <summary>操作的结果类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。</returns>
    </member>
    <member name="P:System.IO.MemoryMappedFiles.MemoryMappedFile.SafeMemoryMappedFileHandle">
      <summary>获取内存映射文件的文件句柄。</summary>
      <returns>内存映射文件的句柄。</returns>
    </member>
    <member name="P:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.PointerOffset">
      <summary>[在 .NET Framework 4.5.1 和更高版本中受支持] 获取内存映射文件的开头的偏移此视图的起始位置的字节数。</summary>
      <returns>此视图的起始位置和内存映射文件的开头之间的字节数。</returns>
      <exception cref="T:System.InvalidOperationException">从中创建此实例的对象是 null。</exception>
    </member>
    <member name="P:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.SafeMemoryMappedViewHandle">
      <summary>获取内存映射文件的视图的句柄。</summary>
      <returns>文件的视图的操作系统的句柄包装器。</returns>
    </member>
    <member name="P:System.IO.MemoryMappedFiles.MemoryMappedViewStream.PointerOffset">
      <summary>[在 .NET Framework 4.5.1 和更高版本中受支持] 获取内存映射文件的开头的偏移此视图的起始位置的字节数。</summary>
      <returns>此视图的起始位置和内存映射文件的开头之间的字节数。</returns>
      <exception cref="T:System.InvalidOperationException">从中创建此实例的对象是 null。</exception>
    </member>
    <member name="P:System.IO.MemoryMappedFiles.MemoryMappedViewStream.SafeMemoryMappedViewHandle">
      <summary>获取内存映射文件的视图的句柄。</summary>
      <returns>文件的视图的操作系统的句柄包装器。</returns>
    </member>
    <member name="P:System.IO.Pipes.AnonymousPipeClientStream.ReadMode">
      <summary>设置的读取模式 <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> 对象。</summary>
      <returns>
        <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> 为 <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> 对象。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">传输模式不是有效的。 对于匿名管道，仅 <see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" /> 支持。</exception>
      <exception cref="T:System.NotSupportedException">传输模式是 <see cref="F:System.IO.Pipes.PipeTransmissionMode.Message" />。</exception>
      <exception cref="T:System.IO.IOException">连接已断开或出现其他 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
    </member>
    <member name="P:System.IO.Pipes.AnonymousPipeClientStream.TransmissionMode">
      <summary>获取当前管道支持的管道传输模式。</summary>
      <returns>
        <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> 当前管道支持。</returns>
    </member>
    <member name="P:System.IO.Pipes.AnonymousPipeServerStream.ClientSafePipeHandle">
      <summary>获取的安全句柄 <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> 对象当前已连接到 <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> 对象。</summary>
      <returns>句柄 <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> 对象当前已连接到 <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> 对象。</returns>
    </member>
    <member name="P:System.IO.Pipes.AnonymousPipeServerStream.ReadMode">
      <summary>设置的读取模式 <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> 对象。 对于匿名管道传输模式必须为 <see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" />。</summary>
      <returns>读取模式 <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> 对象。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">传输模式不是有效的。 对于匿名管道，仅 <see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" /> 支持。</exception>
      <exception cref="T:System.NotSupportedException">该属性设置为 <see cref="F:System.IO.Pipes.PipeTransmissionMode.Message" />, ，它不支持匿名管道。</exception>
      <exception cref="T:System.IO.IOException">连接已断开或出现其他 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
    </member>
    <member name="P:System.IO.Pipes.AnonymousPipeServerStream.TransmissionMode">
      <summary>获取当前管道支持的管道传输模式。</summary>
      <returns>
        <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> 当前管道支持。</returns>
    </member>
    <member name="P:System.IO.Pipes.NamedPipeClientStream.NumberOfServerInstances">
      <summary>获取共享同一管道名称的服务器实例的数量。</summary>
      <returns>共享同一管道名称的服务器实例的数量。</returns>
      <exception cref="T:System.InvalidOperationException">尚未设置管道句柄。- 或 -当前 <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> 对象尚未连接到 <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> 对象。</exception>
      <exception cref="T:System.IO.IOException">管道已损坏或发生了 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">关闭基础管道句柄。</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeAccessRule.PipeAccessRights">
      <summary>获取 <see cref="T:System.IO.Pipes.PipeAccessRights" /> 与当前关联的标志 <see cref="T:System.IO.Pipes.PipeAccessRule" /> 对象。</summary>
      <returns>
        <see cref="T:System.IO.Pipes.PipeAccessRights" /> 值的按位组合。</returns>
    </member>
    <member name="P:System.IO.Pipes.PipeAuditRule.PipeAccessRights">
      <summary>获取 <see cref="T:System.IO.Pipes.PipeAccessRights" /> 与当前关联的标志 <see cref="T:System.IO.Pipes.PipeAuditRule" /> 对象。</summary>
      <returns>
        <see cref="T:System.IO.Pipes.PipeAccessRights" /> 值的按位组合。</returns>
    </member>
    <member name="P:System.IO.Pipes.PipeSecurity.AccessRightType">
      <summary>获取 <see cref="T:System.Type" /> 与当前相关联的可保护对象 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象。</summary>
      <returns>与当前相关联的可保护对象类型 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象。</returns>
    </member>
    <member name="P:System.IO.Pipes.PipeSecurity.AccessRuleType">
      <summary>获取 <see cref="T:System.Type" /> 与当前的访问规则相关联的对象 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象。</summary>
      <returns>与当前的访问规则相关联的对象的类型 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象。</returns>
    </member>
    <member name="P:System.IO.Pipes.PipeSecurity.AuditRuleType">
      <summary>获取 <see cref="T:System.Type" /> 对象与当前的审核规则关联 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象。</summary>
      <returns>与当前的审核规则相关联的对象的类型 <see cref="T:System.IO.Pipes.PipeSecurity" /> 对象。</returns>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.CanRead">
      <summary>获取一个值，该值指示当前流是否支持读操作。</summary>
      <returns>如果流支持读操作，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.CanSeek">
      <summary>获取一个值，该值指示当前流是否支持查找操作。</summary>
      <returns>在所有情况下均为 false。</returns>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.CanWrite">
      <summary>获取一个值，该值指示当前流是否支持写操作。</summary>
      <returns>如果流支持写操作，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.InBufferSize">
      <summary>获取管道的入站缓冲区的大小（以字节为单位）。</summary>
      <returns>一个整数值，表示入站缓冲区的大小（以字节为单位）。</returns>
      <exception cref="T:System.NotSupportedException">流不可读。</exception>
      <exception cref="T:System.InvalidOperationException">管道正在等待连接。</exception>
      <exception cref="T:System.IO.IOException">管道已损坏或出现其他 I/O 错误。</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.IsAsync">
      <summary>获取一个值，该值指示 <see cref="T:System.IO.Pipes.PipeStream" /> 对象是异步打开还是同步打开。</summary>
      <returns>如果 <see cref="T:System.IO.Pipes.PipeStream" /> 对象是异步打开的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.IsConnected">
      <summary>获取或设置一个值，该值指示是否已连接 <see cref="T:System.IO.Pipes.PipeStream" /> 对象。</summary>
      <returns>如果已连接 <see cref="T:System.IO.Pipes.PipeStream" /> 对象，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.IsHandleExposed">
      <summary>获取一个值，该值指示是否公开了 <see cref="T:System.IO.Pipes.PipeStream" /> 对象的句柄。</summary>
      <returns>如果公开了 <see cref="T:System.IO.Pipes.PipeStream" /> 对象的句柄，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.IsMessageComplete">
      <summary>获取一个值，该值指示最近的读操作返回的消息中是否有更多数据。</summary>
      <returns>如果消息中没有更多要读取的字符，则为 true；否则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">管道不可连接。- 或 -尚未设置管道句柄。- 或 -管道的 <see cref="P:System.IO.Pipes.PipeStream.ReadMode" /> 属性值不是 <see cref="F:System.IO.Pipes.PipeTransmissionMode.Message" />。</exception>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.Length">
      <summary>获取流长度（以字节为单位）。</summary>
      <returns>在所有情况下均为 0。</returns>
      <exception cref="T:System.NotSupportedException">始终引发。</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.OutBufferSize">
      <summary>获取管道的出站缓冲区的大小（以字节为单位）。</summary>
      <returns>出站缓冲区的大小（以字节为单位）。</returns>
      <exception cref="T:System.NotSupportedException">该流不可写入。</exception>
      <exception cref="T:System.InvalidOperationException">该管道正在等待连接。</exception>
      <exception cref="T:System.IO.IOException">管道已损坏或出现其他 I/O 错误。</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.Position">
      <summary>获取或设置当前流的当前位置。</summary>
      <returns>在所有情况下均为 0。</returns>
      <exception cref="T:System.NotSupportedException">始终引发。</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.ReadMode">
      <summary>获取或设置 <see cref="T:System.IO.Pipes.PipeStream" /> 对象的读取模式。</summary>
      <returns>
        <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> 值之一，指示如何从管道读取 <see cref="T:System.IO.Pipes.PipeStream" /> 对象。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">所提供的值不是有效的 <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> 值。</exception>
      <exception cref="T:System.NotSupportedException">所提供的值不是此管道流支持的 <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> 值。</exception>
      <exception cref="T:System.InvalidOperationException">尚未设置句柄。- 或 -此管道正在等待与命名的客户端进行连接。</exception>
      <exception cref="T:System.IO.IOException">管道已中断，或命名的客户端发生了 I/O 错误。</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.SafePipeHandle">
      <summary>获取当前 <see cref="T:System.IO.Pipes.PipeStream" /> 对象所封装的本地管道末端的安全句柄。</summary>
      <returns>由当前 <see cref="T:System.IO.Pipes.PipeStream" /> 对象所封装的管道的一个 <see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" /> 对象。</returns>
      <exception cref="T:System.InvalidOperationException">尚未设置管道句柄。</exception>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.TransmissionMode">
      <summary>获取当前管道支持的管道传输模式。</summary>
      <returns>
        <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> 值之一，指示当前管道支持的传输模式。</returns>
      <exception cref="T:System.ObjectDisposedException">管道已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">尚未设置句柄。- 或 -管道正在等待在匿名客户端/服务器操作中进行连接或与命名客户端连接。</exception>
      <exception cref="T:System.IO.IOException">管道已损坏或出现其他 I/O 错误。</exception>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#ElementType">
      <summary>获取此实例表示的集合中的数据类型。</summary>
      <returns>此实例表示的集合中的数据类型。</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Expression">
      <summary>获取表示此实例或相关联的表达式树。</summary>
      <returns>表达式树表示此实例或相关联。</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Provider">
      <summary>获取与此实例关联的查询提供程序。</summary>
      <returns>查询提供程序与此实例相关联。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.CanReduce">
      <summary>获取一个值，该值指示是否可以减少表达式目录树节点。</summary>
      <returns>如果表达式目录树节点可以降低，否则为 false，则为 true。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Conversion">
      <summary>获取由的合并或复合赋值运算的类型转换函数。</summary>
      <returns>一个表示类型转换函数的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLifted">
      <summary>获取一个值，该值指示表达式目录树节点是否表示 提升 号召操作员。</summary>
      <returns>true 如果该节点表示的提升的调用;否则为 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull">
      <summary>获取一个值，该值指示表达式目录树节点是否表示 提升 对其返回类型提升为可以为 null 的类型的运算符的调用。</summary>
      <returns>true 如果该运算符的返回类型提升为可以为 null 的类型;否则为 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Left">
      <summary>获取二元运算的左的操作数。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 表示二元运算的左的操作数。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Method">
      <summary>获取对于二元运算的实现方法。</summary>
      <returns>表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Right">
      <summary>获取二元运算的右操作数。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 表示二元运算的右操作数。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Expressions">
      <summary>获取此块中的表达式。</summary>
      <returns>包含此块中的所有表达式的只读集合。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.NodeType">
      <summary>返回此表达式的节点类型。 重写此方法时，扩展节点应返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Result">
      <summary>获取此块中的最后一个表达式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 对象，表示此块中的最后一个表达式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.BlockExpression.Type" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Variables">
      <summary>获取在此块中定义的变量。</summary>
      <returns>包含在此块中定义的所有变量的只读集合。</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Body">
      <summary>获取在 catch 块的正文。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 表示 catch 正文的对象。</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Filter">
      <summary>获取的正文 <see cref="T:System.Linq.Expressions.CatchBlock" /> 筛选器。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 对象，表示正文 <see cref="T:System.Linq.Expressions.CatchBlock" /> 筛选器。</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Test">
      <summary>获取的类型 <see cref="T:System.Exception" /> 此处理程序捕捉。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示的一种 <see cref="T:System.Exception" /> 此处理程序捕捉。</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Variable">
      <summary>获取对 <see cref="T:System.Exception" /> 此处理程序捕获的对象。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象，表示对引用 <see cref="T:System.Exception" /> 此处理程序捕获的对象。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfFalse">
      <summary>获取要在执行测试的计算结果的表达式 false。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> ，它表示要执行如果测试表达式 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfTrue">
      <summary>获取要在执行测试的计算结果的表达式 true。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> ，它表示要执行如果测试表达式 true。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.NodeType">
      <summary>返回此表达式的节点类型。 重写此方法时，扩展节点应返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Test">
      <summary>获取条件运算的测试。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 表示条件运算的测试。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.ConditionalExpression.Type" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.NodeType">
      <summary>返回表达式的节点类型。 重写此方法时，扩展节点应返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.ConstantExpression.Type" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Value">
      <summary>获取常量表达式的值。</summary>
      <returns>
        <see cref="T:System.Object" /> 表示表达式的值相等。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Document">
      <summary>获取 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> 表示源代码文件。</summary>
      <returns>表示源文件的 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndColumn">
      <summary>获取此的结束列 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />。</summary>
      <returns>用于生成包装的表达式的代码的结束列数。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndLine">
      <summary>获取此的结束行 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />。</summary>
      <returns>用于生成包装的表达式的代码的结束行号。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.IsClear">
      <summary>获取的值以指示如果 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 是否用于清除序列点。</summary>
      <returns>True <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 是否用于清除序列点，否则为 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.NodeType">
      <summary>返回此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。</summary>
      <returns>用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartColumn">
      <summary>获取此的起始列 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />。</summary>
      <returns>用于生成包装的表达式的代码的起始列数。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartLine">
      <summary>获取此的起始行 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />。</summary>
      <returns>用于生成包装的表达式的代码的起始行数。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.DebugInfoExpression.Type" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.NodeType">
      <summary>返回此表达式的节点类型。 重写此方法时，扩展节点应返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.DefaultExpression.Type" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Arguments">
      <summary>获取动态操作的参数。</summary>
      <returns>包含动态操作参数的只读集合。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Binder">
      <summary>获取 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />，它确定动态站点的运行时行为。</summary>
      <returns>
        <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />，它确定动态站点的运行时行为。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.DelegateType">
      <summary>获取 <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，它表示 <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.NodeType">
      <summary>返回此表达式的节点类型。 重写此方法时，扩展节点应返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>返回表达式树节点的参数数目。  不应使用此成员。  由于程序集重构，只能为公共的；并且在内部用于性能优化。</summary>
      <returns>返回 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.DynamicExpression.Type" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.AddMethod">
      <summary>获取用于将元素添加到 <see cref="T:System.Collections.IEnumerable" /> 集合的实例方法。</summary>
      <returns>一个 <see cref="T:System.Reflection.MethodInfo" />，表示将元素添加到集合的实例方法。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.Arguments">
      <summary>获取传递到相应方法的参数的集合，该方法将元素添加到 <see cref="T:System.Collections.IEnumerable" /> 集合。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.Expression" /> 对象的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，这些对象表示将元素添加到集合的方法的参数。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>返回表达式树节点的参数数目。  不应使用此成员。  由于程序集重构，只能为公共的；并且在内部用于性能优化。</summary>
      <returns>返回 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.Expression.CanReduce">
      <summary>指示可将节点简化为更简单的节点。 如果返回 true，则可以调用 Reduce() 以生成简化形式。</summary>
      <returns>如果可以简化节点，则为 True；否则为 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.Expression.NodeType">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ExpressionType" /> 值之一。</returns>
    </member>
    <member name="P:System.Linq.Expressions.Expression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Kind">
      <summary>"Go to"的表达式的种类。 提供信息为目的。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> 对象，表示"go to"的表达式的种类。</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.NodeType">
      <summary>返回此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。</summary>
      <returns>用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Target">
      <summary>在此节点可以跳转至目标标签。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 对象，表示此节点的目标标签。</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.GotoExpression.Type" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Value">
      <summary>如果目标的类型 System.Void，值将传递到目标，则为 null。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 对象表示的值传递给目标或 null。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount">
      <summary>返回表达式树节点的参数数目。  不应使用此类型。  仅在程序集重构时公开，并且仅用于内部性能优化。</summary>
      <returns>作为 <see cref="T:System.Int32" /> 的表达式树节点的参数数目。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IDynamicExpression.DelegateType">
      <summary>获取 CallSite 使用的委托类型，该类型即为在动态表达式的多形态内联缓冲中使用的规则类型。</summary>
      <returns>CallSite 使用的委托类型。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Arguments">
      <summary>获取将用于为属性或数组编制索引的参数。</summary>
      <returns>包含将用于为属性或数组编制索引的参数的只读集合。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Indexer">
      <summary>如果表达式表示索引属性，则获取属性的 <see cref="T:System.Reflection.PropertyInfo" />，否则返回 null。</summary>
      <returns>如果表达式表示索引属性，则为属性的 <see cref="T:System.Reflection.PropertyInfo" />，否则为 null。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.NodeType">
      <summary>返回此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。</summary>
      <returns>用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Object">
      <summary>要编制索引的对象。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.Expression" />，表示要编制索引的对象。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>返回表达式树节点的参数数目。  不应使用此成员。  由于程序集重构，只能为公共的；并且在内部用于性能优化。</summary>
      <returns>返回 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.IndexExpression.Type" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Arguments">
      <summary>获取应用委托或 lambda 表达式的参数。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 对象的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，表示应用委托的参数。</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Expression">
      <summary>获取要应用的委托或 lambda 表达式。</summary>
      <returns>表示要应用的委托的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.NodeType">
      <summary>返回此表达式的节点类型。 重写此方法时，扩展节点应返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>返回表达式树节点的参数数目。  不应使用此成员。  由于程序集重构，只能为公共的；并且在内部用于性能优化。</summary>
      <returns>作为 <see cref="T:System.Int32" /> 的表达式树节点的参数数目。</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Type">
      <summary>获取此 <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> 表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.InvocationExpression.Type" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.DefaultValue">
      <summary>值 <see cref="T:System.Linq.Expressions.LabelExpression" /> 当通过常规控制流到达标签时 （例如，不跳转到）。</summary>
      <returns>表示值的表达式对象 <see cref="T:System.Linq.Expressions.LabelExpression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.NodeType">
      <summary>返回此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。</summary>
      <returns>用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Target">
      <summary>
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 此标签相关联。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 此标签相关联。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.LabelExpression.Type" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Name">
      <summary>获取标签的名称。</summary>
      <returns>标签的名称。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Type">
      <summary>跳转到标签时传递的值的类型 (或 <see cref="T:System.Void" /> 如果应该不传递任何值)。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示跳转到标签时传递的值类型或 <see cref="T:System.Void" /> 如果应该不传递任何值</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Body">
      <summary>获取 lambda 表达式的主体。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 表示 lambda 表达式的主体。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Name">
      <summary>获取 lambda 表达式的名称。</summary>
      <returns>Lambda 表达式的名称。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.NodeType">
      <summary>返回此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。</summary>
      <returns>用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Parameters">
      <summary>获取 lambda 表达式的参数。</summary>
      <returns>一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象，表示 lambda 表达式的参数。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.ReturnType">
      <summary>获取 lambda 表达式的返回类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示 lambda 表达式的类型。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.TailCall">
      <summary>获取一个值，指示是否将使用尾调用优化编译 lambda 表达式。</summary>
      <returns>如果 lambda 表达式将编译用尾调用优化，否则为 false，则为 true。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.LambdaExpression.Type" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.CanReduce">
      <summary>获取一个值，该值指示是否可以减少表达式目录树节点。</summary>
      <returns>如果可以简化节点，则为 True；否则为 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Initializers">
      <summary>获取用于初始化集合的元素初始值设定项。</summary>
      <returns>一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.Linq.Expressions.ElementInit" /> 表示将用来初始化集合的元素的对象。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NewExpression">
      <summary>获取包含对集合类型的构造函数的调用的表达式。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.NewExpression" /> ，它表示集合类型的构造函数调用。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NodeType">
      <summary>返回此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。</summary>
      <returns>用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.ListInitExpression.Type" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Body">
      <summary>获取 <see cref="T:System.Linq.Expressions.Expression" /> ，它是循环的正文。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> ，它是循环的正文。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.BreakLabel">
      <summary>获取 <see cref="T:System.Linq.Expressions.LabelTarget" /> 被用作循环体中断语句目标。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 被用作循环体中断语句目标。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.ContinueLabel">
      <summary>获取 <see cref="T:System.Linq.Expressions.LabelTarget" /> 被用作循环体继续语句目标。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 被用作循环体继续语句目标。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.NodeType">
      <summary>返回此表达式的节点类型。 重写此方法时，扩展节点应返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.LoopExpression.Type" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberAssignment.Expression">
      <summary>获取要分配给字段或属性的表达式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> ，表示要分配给该字段或属性的值。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.BindingType">
      <summary>获取表示绑定的类型。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberBindingType" /> 值之一。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.Member">
      <summary>获取字段或属性进行初始化。</summary>
      <returns>
        <see cref="T:System.Reflection.MemberInfo" /> 表示字段或属性进行初始化。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Expression">
      <summary>获取包含对象的字段或属性。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 表示字段或属性的包含对象。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Member">
      <summary>获取字段或属性进行访问。</summary>
      <returns>
        <see cref="T:System.Reflection.MemberInfo" /> 表示字段或要访问属性。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.NodeType">
      <summary>返回此节点类型 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />。</summary>
      <returns>用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Bindings">
      <summary>获取描述如何初始化新创建的对象的成员的绑定。</summary>
      <returns>一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.Linq.Expressions.MemberBinding" /> 介绍如何将成员初始化的对象。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.CanReduce">
      <summary>获取一个值，该值指示是否可以减少表达式目录树节点。</summary>
      <returns>如果可以简化节点，则为 True；否则为 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NewExpression">
      <summary>获取表示构造函数调用的表达式。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.NewExpression" /> ，它表示构造函数调用。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NodeType">
      <summary>返回表达式的节点类型。 重写此方法时，扩展节点应返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.MemberInitExpression.Type" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberListBinding.Initializers">
      <summary>获取元素初始值设定项初始化新创建的对象的集合成员。</summary>
      <returns>一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.Linq.Expressions.ElementInit" /> 对象来初始化与集合成员。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberMemberBinding.Bindings">
      <summary>获取描述如何初始化某个成员的成员的绑定。</summary>
      <returns>一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.Linq.Expressions.MemberBinding" /> 描述如何初始化成员的成员的对象。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Arguments">
      <summary>获取表示所调用方法的参数的表达式集合。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 对象的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，表示所调用方法的参数。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Method">
      <summary>获取要调用的方法的 <see cref="T:System.Reflection.MethodInfo" />。</summary>
      <returns>表示所调用的方法的 <see cref="T:System.Reflection.MethodInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.NodeType">
      <summary>返回此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。</summary>
      <returns>用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Object">
      <summary>获取表示实例方法调用的实例或静态方法调用的 null 的 <see cref="T:System.Linq.Expressions.Expression" />。</summary>
      <returns>表示接收对象的方法的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>返回表达式树节点的参数数目。  不应使用此成员。  由于程序集重构，只能为公共的；并且在内部用于性能优化。</summary>
      <returns>表达式树节点作为参数的数目  <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Type" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Expressions">
      <summary>如果已获取数组的界限的值 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性是 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />, ，或要初始化新的数组的元素的值的值 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性是 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />。</summary>
      <returns>一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.Linq.Expressions.Expression" /> 表示数组的界限，或者初始化值的对象。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.NewArrayExpression.Type" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Arguments">
      <summary>获取构造函数的参数。</summary>
      <returns>一组 <see cref="T:System.Linq.Expressions.Expression" /> 对象，表示构造函数的参数。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Constructor">
      <summary>获取被调用的构造函数。</summary>
      <returns>
        <see cref="T:System.Reflection.ConstructorInfo" />，表示被调用的构造函数。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Members">
      <summary>获取可检索用构造函数参数初始化的字段值的成员。</summary>
      <returns>
        <see cref="T:System.Reflection.MemberInfo" /> 对象的集合，它表示可检索用构造函数参数初始化的字段值的成员。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.NodeType">
      <summary>返回此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。</summary>
      <returns>用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>表达式树节点中获取参数的数目。</summary>
      <returns>参数的表达式树节点数。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.NewExpression.Type" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.IsByRef">
      <summary>指示此 ParameterExpression 是作为要视作 ByRef 参数。</summary>
      <returns>如果此为 ParameterExpression 是 ByRef 参数，否则为 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Name">
      <summary>获取参数或变量的名称。</summary>
      <returns>包含参数名称的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.NodeType">
      <summary>返回此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。</summary>
      <returns>用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.ParameterExpression.Type" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.NodeType">
      <summary>返回表达式的节点类型。 重写此方法时，扩展节点应返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Type" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables">
      <summary>变量或参数为其提供运行时访问权限。</summary>
      <returns>包含运行时访问权限，将提供的参数的只读集合。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.Body">
      <summary>获取此用例的正文。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 表示区分大小的块的主体对象。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.TestValues">
      <summary>获取这种情况下的值。 为执行选择这种情况下当 <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> 与任何这些值匹配。</summary>
      <returns>此事例块的值的只读集合。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Cases">
      <summary>获取的集合 <see cref="T:System.Linq.Expressions.SwitchCase" /> 为该交换机的对象。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.SwitchCase" /> 对象的集合。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Comparison">
      <summary>获取的相等比较方法，如果有的话。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> 对象，表示相等比较方法。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.DefaultBody">
      <summary>获取为该交换机的测试。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 对象，表示为该交换机测试。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.NodeType">
      <summary>返回表达式的节点类型。 重写此方法时，扩展节点应返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.SwitchValue">
      <summary>获取为该交换机的测试。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 对象，表示为该交换机测试。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.SwitchExpression.Type" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType">
      <summary>如果有的话，则返回文档类型的唯一标识符。 默认值为一个文本文件的 GUID。</summary>
      <returns>文档类型的唯一标识符。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.FileName">
      <summary>源文件名。</summary>
      <returns>表示源文件的名称的字符串。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.Language">
      <summary>如果有的话，则返回该语言的唯一标识符。</summary>
      <returns>语言的唯一标识符</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor">
      <summary>如果有的话，则返回的语言供应商的唯一标识符。</summary>
      <returns>语言供应商的唯一标识符。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Body">
      <summary>获取 <see cref="T:System.Linq.Expressions.Expression" /> 表示 try 块的正文。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 表示 try 块的正文。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Fault">
      <summary>获取 <see cref="T:System.Linq.Expressions.Expression" /> 表示 fault 块。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 表示 fault 块。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Finally">
      <summary>获取 <see cref="T:System.Linq.Expressions.Expression" /> 表示 finally 块。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 表示 finally 块。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Handlers">
      <summary>获取的集合 <see cref="T:System.Linq.Expressions.CatchBlock" /> 与 try 块关联的表达式。</summary>
      <returns>集合 <see cref="T:System.Linq.Expressions.CatchBlock" /> 与 try 块关联的表达式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.NodeType">
      <summary>返回此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。</summary>
      <returns>用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.TryExpression.Type" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Expression">
      <summary>获取类型测试操作的表达式操作数。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 表示表达式操作数的类型测试操作。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.NodeType">
      <summary>返回表达式的节点类型。 重写此方法时，扩展节点应返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Type">
      <summary>获取此 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> 表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Type" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand">
      <summary>获取类型测试操作的类型操作数。</summary>
      <returns>一个 <see cref="T:System.Type" /> ，它表示的类型操作数的类型测试操作。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.CanReduce">
      <summary>获取一个值，该值指示是否可以减少表达式目录树节点。</summary>
      <returns>如果一个节点可以降低，否则为 false，则为 true。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLifted">
      <summary>获取一个值，该值指示表达式目录树节点是否表示向操作员的提升的调用。</summary>
      <returns>true 如果该节点表示的提升的调用;否则为 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLiftedToNull">
      <summary>获取一个值，该值指示表达式目录树节点是否表示对其返回类型提升为可以为 null 的类型的运算符的提升的调用。</summary>
      <returns>true 如果该运算符的返回类型提升为可以为 null 的类型;否则为 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Method">
      <summary>获取一元运算的实现方法。</summary>
      <returns>表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.NodeType">
      <summary>返回此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。</summary>
      <returns>用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Operand">
      <summary>获取一元运算的操作数。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 表示一元运算的操作数。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.UnaryExpression.Type" />。</returns>
    </member>
    <member name="P:System.Linq.IGrouping`2.Key">
      <summary>获取的键 <see cref="T:System.Linq.IGrouping`2" />。</summary>
      <returns>键 <see cref="T:System.Linq.IGrouping`2" />。</returns>
    </member>
    <member name="P:System.Linq.ILookup`2.Count">
      <summary>获取对集合中的键/值数 <see cref="T:System.Linq.ILookup`2" />。</summary>
      <returns>中的键/值集合对的数目 <see cref="T:System.Linq.ILookup`2" />。</returns>
    </member>
    <member name="P:System.Linq.ILookup`2.Item(`0)">
      <summary>获取 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 按指定的键索引值序列。</summary>
      <param name="key">所需的值序列的键。</param>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 由指定键的值序列的索引。</returns>
    </member>
    <member name="P:System.Linq.IQueryable.ElementType">
      <summary>获取与此实例关联的表达式树时返回的元素的类型 <see cref="T:System.Linq.IQueryable" /> 执行。</summary>
      <returns>一个 <see cref="T:System.Type" /> ，表示执行与此对象关联的表达式树时返回的元素的类型。</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Expression">
      <summary>获取与实例相关联的表达式目录树 <see cref="T:System.Linq.IQueryable" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 的此实例与该键相关联 <see cref="T:System.Linq.IQueryable" />。</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Provider">
      <summary>获取与此数据源相关联的查询提供程序。</summary>
      <returns>
        <see cref="T:System.Linq.IQueryProvider" /> 此数据源与该键相关联。</returns>
    </member>
    <member name="P:System.Linq.Lookup`2.Count">
      <summary>获取对集合中的键/值数 <see cref="T:System.Linq.Lookup`2" />。</summary>
      <returns>中的键/值集合对的数目 <see cref="T:System.Linq.Lookup`2" />。</returns>
    </member>
    <member name="P:System.Linq.Lookup`2.Item(`0)">
      <summary>获取由指定键进行索引的值的集合。</summary>
      <param name="key">所需值的集合的键。</param>
      <returns>索引由指定键的值集合。</returns>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementBindAttribute.Schema">
      <summary>获取或设置一个值，定义用 ManagementEnumerator 特性标记的方法将输出的输出的类型。</summary>
      <returns>一个 <see cref="T:System.Type" /> 值，该值指示的与标记的方法的输出类型 <see cref="ManagementBind" /> 将输出属性。</returns>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementConfigurationAttribute.Mode">
      <summary>获取或设置属性，用于指定是否或对它的更改，将尽可能快地应用调用 commit 方法时的模式。</summary>
      <returns>返回 <see cref="T:System.Management.Instrumentation.ManagementConfigurationType" /> ，该值指示是否使用 WMI 属性 <see cref="F:System.Management.Instrumentation.ManagementConfigurationType.Apply" /> 或 <see cref="F:System.Management.Instrumentation.ManagementConfigurationType.OnCommit" /> 模式。</returns>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementConfigurationAttribute.Schema">
      <summary>获取或设置一个值，定义用 ManagementConfiguration 特性标记该属性将返回的输出的类型。</summary>
      <returns>一个 <see cref="T:System.Type" /> 将返回值，该值表示使用 ManagementConfiguration 特性标记该属性的输出的类型。</returns>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementEntityAttribute.External">
      <summary>获取或设置一个值，指定此类是否表示 WMI 类中实现的提供程序在当前程序集外部。</summary>
      <returns>一个布尔值，如果该类表示外部的 WMI 类和 false 否则也是如此。</returns>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementEntityAttribute.Name">
      <summary>获取或设置 WMI 类的名称。</summary>
      <returns>一个字符串，其中包含 WMI 类的名称。</returns>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementEntityAttribute.Singleton">
      <summary>指定关联的类是否表示单个 WMI 类。</summary>
      <returns>一个布尔值，如果该类表示的单独的 WMI 类和 false 否则也是如此。</returns>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementEnumeratorAttribute.Schema">
      <summary>获取或设置一个值，定义用 ManagementEnumerator 特性标记的方法将输出的输出的类型。</summary>
      <returns>一个 <see cref="T:System.Type" /> 值，该值指示的与标记的方法的输出类型 <see cref="ManagementEnumerator" /> 将输出属性。</returns>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementMemberAttribute.Name">
      <summary>获取或设置管理属性的名称。</summary>
      <returns>返回一个字符串，它是管理属性的名称。</returns>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementNameAttribute.Name">
      <summary>获取或设置一个对象的用户友好名称。 该对象可以为方法参数或用 ManagementProbe、 ManagementKey 或 ManagementConfiguration 属性标记的属性。</summary>
      <returns>一个 <see cref="T:System.String" /> 值，该值指示对象的用户友好名称。</returns>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementProbeAttribute.Schema">
      <summary>获取或设置一个值，定义的类型将标有 ManagementProbe 属性的属性将输出的输出。</summary>
      <returns>一个 <see cref="T:System.Type" /> 值，该值指示将输出与 ManagementProbe 属性标记的属性的输出的类型。</returns>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementReferenceAttribute.Type">
      <summary>获取或设置所引用的类型的名称。</summary>
      <returns>包含引用的类型名称的字符串。</returns>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementRemoveAttribute.Schema">
      <summary>获取或设置一个值，定义用 ManagementRemove 特性标记的对象将输出的输出的类型。</summary>
      <returns>一个 <see cref="T:System.Type" /> 将输出值，该值指示该对象标记为删除属性的输出的类型。</returns>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementTaskAttribute.Schema">
      <summary>获取或设置一个值，定义的类型将标有 ManagementTask 属性的方法将输出的输出。</summary>
      <returns>一个 <see cref="T:System.Type" /> 值，该值指示使用 ManagementTask 属性标记的方法将输出的输出的类型。</returns>
    </member>
    <member name="P:System.Management.Instrumentation.WmiConfigurationAttribute.HostingGroup">
      <summary>获取或设置 WMI 提供程序所在的组。</summary>
      <returns>一个 <see cref="T:System.String" /> 指示 WMI 提供程序所在的组的值。</returns>
    </member>
    <member name="P:System.Management.Instrumentation.WmiConfigurationAttribute.HostingModel">
      <summary>获取或设置 WMI 提供程序承载模型。</summary>
      <returns>一个 <see cref="T:System.Management.Instrumentation.ManagementHostingModel" /> 值，该值指示 WMI 提供程序的承载模型。</returns>
    </member>
    <member name="P:System.Management.Instrumentation.WmiConfigurationAttribute.IdentifyLevel">
      <summary>获取或设置一个值，指定的 WMI 提供程序是否可以模拟其调用方。 如果值为 false，则不能模拟该提供程序，并且如果值为 true，可以模拟该提供程序。</summary>
      <returns>一个布尔值，该值指示提供程序是否可以或不能模拟其调用方。 如果值为 false，则不能模拟该提供程序，并且如果值为 true，可以模拟该提供程序。</returns>
    </member>
    <member name="P:System.Management.Instrumentation.WmiConfigurationAttribute.NamespaceSecurity">
      <summary>获取或设置指定提供程序用于公开管理对象的命名空间的安全描述符的安全描述符定义语言 (SDDL) 字符串。</summary>
      <returns>SDDL 字符串，表示提供程序用于公开管理对象的命名空间上的安全描述符。</returns>
    </member>
    <member name="P:System.Management.Instrumentation.WmiConfigurationAttribute.Scope">
      <summary>获取或设置 WMI 提供程序将公开类的 WMI 命名空间。</summary>
      <returns>一个 <see cref="T:System.String" /> 值，该值指示 WMI 提供程序将公开类的命名空间。</returns>
    </member>
    <member name="P:System.Management.Instrumentation.WmiConfigurationAttribute.SecurityRestriction">
      <summary>获取或设置 WMI 提供程序的安全描述符。 有关详细信息，请参阅主题中的"__Win32Provider"上的 MSDN online library 中的安全描述符属性信息 http://www.msdn.com。</summary>
      <returns>一个 <see cref="T:System.String" /> 值，该值包含 WMI 提供程序的安全描述符。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite.Binder">
      <summary>类负责绑定动态站点上的动态操作。</summary>
      <returns>
        <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 负责绑定动态操作的对象。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite`1.Update">
      <summary>更新委托。 当动态站点遇到缓存未命中时调用。</summary>
      <returns>更新委托。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSiteBinder.UpdateLabel">
      <summary>获取可用于导致绑定要更新的标签。 它指示表达式的绑定将不再有效。 它通常用于动态对象的"版本"已更改。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 对象表示可用于触发绑定更新的标签。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.DynamicAttribute.TransformFlags">
      <summary>指定类型的构造的前缀的遍历中其 <see cref="T:System.Object" /> 出现旨在被视为动态调度类型。</summary>
      <returns>列表 <see cref="T:System.Object" /> 应被视为动态调度类型的匹配项。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.IRuntimeVariables.Count">
      <summary>获取运行时变量的计数。</summary>
      <returns>运行时变量的数目。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.IRuntimeVariables.Item(System.Int32)">
      <summary>获取指定索引处的运行时变量的值。</summary>
      <param name="index">其值是要返回的运行时变量的从零开始的索引。</param>
      <returns>运行时变量的值。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.IStrongBox.Value">
      <summary>获取或设置一个对象引用的值。</summary>
      <returns>该对象引用的值。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Capacity">
      <summary>获取和设置此容量 ReadOnlyCollectionBuilder。</summary>
      <returns>此容量 ReadOnlyCollectionBuilder.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Count">
      <summary>返回中的元素数 ReadOnlyCollectionBuilder。</summary>
      <returns>ReadOnlyCollectionBuilder 中的元素的数量。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Item(System.Int32)">
      <summary>获取或设置指定索引处的元素。</summary>
      <param name="index">要获取或设置的元素的从零开始的索引。</param>
      <returns>指定索引处的元素。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.ICollection`1" /> 是只读的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果对 true 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否具有固定大小。</summary>
      <returns>如果 true 具有固定大小，则为 <see cref="T:System.Collections.IList" />；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否为只读。</summary>
      <returns>如果 true 是只读的，则为 <see cref="T:System.Collections.IList" />；否则为 false。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置指定索引处的元素。</summary>
      <param name="index">要获取或设置的元素的从零开始的索引。</param>
      <returns>指定索引处的元素。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.StrongBox`1.System#Runtime#CompilerServices#IStrongBox#Value">
      <summary>获取或设置的值 <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 引用。</summary>
      <returns>值的 <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 引用。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Attributes">
      <summary>获取此事件的属性。</summary>
      <returns>此事件的只读特性。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.DeclaringType">
      <summary>获取声明此成员的类。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象为声明此成员的类。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Name">
      <summary>获取当前成员的名称。</summary>
      <returns>此成员的名称。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.ReflectedType">
      <summary>获取用于初始化此实例的类对象。</summary>
      <returns>
        <see cref="T:System.Type" /> 用于初始化当前对象的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesCng.Key">
      <summary>获取或设置键 <see cref="T:System.Security.Cryptography.AesCng" /> 算法。</summary>
      <returns>密钥 <see cref="T:System.Security.Cryptography.AesCng" /> 算法。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesCng.KeySize">
      <summary>获取或设置大小，以位为单位的所用密钥 <see cref="T:System.Security.Cryptography.AesCng" /> 算法。</summary>
      <returns>大小，以位为单位的所用密钥 <see cref="T:System.Security.Cryptography.AesCng" /> 算法。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesCryptoServiceProvider.Key">
      <summary>获取或设置用于加密和解密的对称密钥。</summary>
      <returns>用于加密和解密对称密钥。</returns>
      <exception cref="T:System.ArgumentNullException">关键字的值是 null。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密钥大小无效。</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesCryptoServiceProvider.KeySize">
      <summary>获取或设置大小，以位为单位的机密密钥。</summary>
      <returns>密钥的大小（以位为单位）。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.FeedbackSize">
      <summary>获取或设置要用作反馈的比特数。</summary>
      <returns>反馈大小，以位为单位。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.IV">
      <summary>获取或设置的初始化向量 (IV) 用于对称算法。</summary>
      <returns>要用于对称算法的初始化向量</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Key">
      <summary>获取或设置对称算法所用的密钥。</summary>
      <returns>对称算法的密钥。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.KeySize">
      <summary>获取或设置大小，以位为单位使用对称算法的机密密钥。</summary>
      <returns>大小 （以位为单位使用的对称算法的密钥）。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Mode">
      <summary>获取或设置对称算法的运算模式。</summary>
      <returns>指定要用于加密的块密码模式的枚举值之一。 默认值为 <see cref="F:System.Security.Cryptography.CipherMode.CBC" />。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <see cref="P:System.Security.Cryptography.AesManaged.Mode" /> 设置为 <see cref="F:System.Security.Cryptography.CipherMode.CFB" /> 或 <see cref="F:System.Security.Cryptography.CipherMode.OFB" />。</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Padding">
      <summary>获取或设置对称算法中使用的填充模式。</summary>
      <returns>指定要应用的填充类型的枚举值之一。 默认值为 <see cref="F:System.Security.Cryptography.PaddingMode.PKCS7" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Algorithm">
      <summary>获取当前 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象指定的算法名称。</summary>
      <returns>嵌入的算法名称。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP256">
      <summary>获取一个 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象，它指定使用 P-256 曲线的椭圆曲线 Diffie-Hellman (ECDH) 密钥交换算法。</summary>
      <returns>一个指定使用 P-256 曲线的 ECDH 算法的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP384">
      <summary>获取一个 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象，它指定使用 P-384 曲线的椭圆曲线 Diffie-Hellman (ECDH) 密钥交换算法。</summary>
      <returns>一个指定使用 P-384 曲线的 ECDH 算法的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP521">
      <summary>获取一个 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象，它指定使用 P-521 曲线的椭圆曲线 Diffie-Hellman (ECDH) 密钥交换算法。</summary>
      <returns>一个指定使用 P-521 曲线的 ECDH 算法的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDsaP256">
      <summary>获取一个 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象，它指定使用 P-256 曲线的椭圆曲线数字签名算法 (ECDSA)。</summary>
      <returns>一个指定使用 P-256 曲线的 ECDSA 算法的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDsaP384">
      <summary>获取一个 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象，它指定使用 P-384 曲线的椭圆曲线数字签名算法 (ECDSA)。</summary>
      <returns>一个指定使用 P-384 曲线的 ECDSA 算法的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDsaP521">
      <summary>获取一个新的 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象，它指定使用 P-521 曲线的椭圆曲线数字签名算法 (ECDSA)。</summary>
      <returns>一个指定使用 P-521 曲线的 ECDSA 算法的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.MD5">
      <summary>获取一个新的 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象，它指定消息摘要 5 (MD5) 哈希算法。</summary>
      <returns>一个指定 MD5 算法的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Rsa">
      <summary>获取一个新的 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象，它指定 RSA 哈希算法。</summary>
      <returns>一个指定 RSA 算法的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Sha1">
      <summary>获取一个新的 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象，它指定安全哈希算法 1 (SHA-1) 算法。</summary>
      <returns>一个指定 SHA-1 算法的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Sha256">
      <summary>获取一个新的 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象，它指定安全哈希算法 256 (SHA-256) 算法。</summary>
      <returns>一个指定 SHA-256 算法的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Sha384">
      <summary>获取一个新的 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象，它指定安全哈希算法 384 (SHA-384) 算法。</summary>
      <returns>一个指定 SHA-384 算法的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Sha512">
      <summary>获取一个新的 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象，它指定安全哈希算法 512 (SHA-512) 算法。</summary>
      <returns>一个指定 SHA-512 算法的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.AlgorithmGroup">
      <summary>获取算法组的名称当前 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 对象指定。</summary>
      <returns>嵌入的算法组名称。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.DiffieHellman">
      <summary>获取 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 指定算法的 Diffie-hellman 系列的对象。</summary>
      <returns>一个对象，指定算法的 Diffie-hellman 系列。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.Dsa">
      <summary>获取 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 指定算法的数字签名算法 (DSA) 系列的对象。</summary>
      <returns>一个对象，指定算法的 DSA 系列。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman">
      <summary>获取 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 指定算法的椭圆曲线 Diffie-hellman (ECDH) 系列的对象。</summary>
      <returns>一个对象，指定算法的 ECDH 系列。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.ECDsa">
      <summary>获取 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 指定算法的椭圆曲线数字签名算法 (ECDSA) 系列的对象。</summary>
      <returns>一个对象，指定算法的 ECDSA 系列。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.Rsa">
      <summary>获取 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 指定 Rivest Shamir Adleman (RSA) 系列的算法的对象。</summary>
      <returns>一个指定 RSA 系列的算法的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.Algorithm">
      <summary>获取密钥使用的算法。</summary>
      <returns>一个指定加密算法的名称的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.AlgorithmGroup">
      <summary>获取密钥使用的算法组。</summary>
      <returns>一个对象，指定加密算法组的名称。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.ExportPolicy">
      <summary>获取密钥使用的导出策略。</summary>
      <returns>一个指定的导出策略的密钥的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.Handle">
      <summary>获取一个表示本机键 (NCRYPT_KEY_HANDLE) 的安全句柄。</summary>
      <returns>安全句柄表示的键。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.IsEphemeral">
      <summary>获取该密钥的持久性状态。</summary>
      <returns>true 如果密钥是暂时的。否则为 false。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.IsMachineKey">
      <summary>获取该密钥的作用域 （计算机或用户）。</summary>
      <returns>true 如果键是可用在计算机范围内; false 如果键是仅为当前用户。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.KeyName">
      <summary>获取密钥的名称。</summary>
      <returns>密钥的名称。 如果密钥是暂时的则值是 null。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.KeySize">
      <summary>获取以位为单位的密钥大小。</summary>
      <returns>密钥的大小（以位为单位）。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.KeyUsage">
      <summary>获取由键指定的加密操作。</summary>
      <returns>指定允许的密钥用法的枚举值的按位组合。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.ParentWindowHandle">
      <summary>获取或设置应使用的用户界面 (UI) 提示引起的访问密钥的窗口句柄 (HWND)。</summary>
      <returns>该密钥父窗口句柄。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.Provider">
      <summary>获取管理密钥的密钥存储提供程序 (KSP)。</summary>
      <returns>管理密钥 KSP。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.ProviderHandle">
      <summary>获取指向密钥存储提供程序 (KSP) 的本机句柄 (NCRYPT_PROV_HANDLE)。</summary>
      <returns>KSP 句柄。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.UIPolicy">
      <summary>获取控制的访问密钥的用户界面 (UI) 的参数。</summary>
      <returns>一个包含用于显示 UI 的配置参数的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.UniqueName">
      <summary>获取该密钥的唯一名称。</summary>
      <returns>该密钥替换名称。 如果密钥是暂时的则值是 null。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.EccPrivateBlob">
      <summary>获取 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 对象，它指定用于椭圆曲线加密 (ECC) 密钥的私钥 BLOB。</summary>
      <returns>一个指定 ECC 专用密钥 BLOB 的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.EccPublicBlob">
      <summary>获取 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 对象，它指定的椭圆曲线加密 (ECC) 密钥的公钥 BLOB。</summary>
      <returns>一个指定的 ECC 公钥 BLOB 的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.Format">
      <summary>获取密钥 BLOB 格式的名称，当前 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 对象指定。</summary>
      <returns>嵌入密钥 BLOB 格式名称。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.GenericPrivateBlob">
      <summary>获取 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 对象，它指定泛型私钥 BLOB。</summary>
      <returns>一个指定泛型私钥 BLOB 的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.GenericPublicBlob">
      <summary>获取 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 对象，它指定泛型公钥 BLOB。</summary>
      <returns>一个指定泛型公钥 BLOB 的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.OpaqueTransportBlob">
      <summary>获取 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 指定一个不透明传输密钥 BLOB 的对象。</summary>
      <returns>一个对象，指定一个不透明传输密钥 BLOB。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.Pkcs8PrivateBlob">
      <summary>获取 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 指定私有密钥信息语法标准 (PKCS #8) 密钥 BLOB 的对象。</summary>
      <returns>一个指定 PKCS #8 ╬ 盞  芲 BLOB 的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.ExportPolicy">
      <summary>获取或设置密钥导出策略。</summary>
      <returns>一个指定密钥导出策略的对象。 默认值是 null, ，该值指示密钥存储提供程序的默认导出策略已设置。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.KeyCreationOptions">
      <summary>获取或设置密钥创建选项。</summary>
      <returns>一个对象，指定用于创建密钥的选项。 默认值是 null, ，指示已设置密钥存储提供程序的默认密钥创建选项。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.KeyUsage">
      <summary>获取或设置应用于当前密钥的加密操作。</summary>
      <returns>指定密钥用法的一个或多个枚举值的按位组合。 默认值是 null, ，该值指示已设置密钥存储提供程序的默认密钥用法。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.Parameters">
      <summary>使 <see cref="T:System.Security.Cryptography.CngKey" /> 要创建具有在最终的密钥设置的附加属性对象。</summary>
      <returns>一个包含必须上设置的任何其他参数的集合对象 <see cref="T:System.Security.Cryptography.CngKey" /> 密钥的创建过程中的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.ParentWindowHandle">
      <summary>获取或设置应用作由 Cryptography Next Generation (CNG) 类创建的对话框的父窗口的窗口句柄。</summary>
      <returns>用于 CNG 对话框的父窗口的 HWND。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.Provider">
      <summary>获取或设置中的密钥存储提供程序 (KSP) 创建一个密钥。</summary>
      <returns>一个指定新的密钥将在其中创建 KSP 的对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Security.Cryptography.CngKeyCreationParameters.Provider" /> 属性设置为 null 值。</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.UIPolicy">
      <summary>获取或设置用户界面，当创建或访问密钥时要显示有关信息。</summary>
      <returns>包含有关创建或访问密钥时下, 一代加密技术 (CNG) 类所示的用户界面的详细信息的对象。 一个 null 值表示已设置了密钥存储提供程序的默认用户界面策略。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngProperty.Name">
      <summary>获取的属性名称当前 <see cref="T:System.Security.Cryptography.CngProperty" /> 对象指定。</summary>
      <returns>在当前设置的属性名称 <see cref="T:System.Security.Cryptography.CngProperty" /> 对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngProperty.Options">
      <summary>获取属性选项当前 <see cref="T:System.Security.Cryptography.CngProperty" /> 对象指定。</summary>
      <returns>一个对象，指定在当前设置的选项 <see cref="T:System.Security.Cryptography.CngProperty" /> 对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngProvider.MicrosoftSmartCardKeyStorageProvider">
      <summary>获取 <see cref="T:System.Security.Cryptography.CngProvider" /> 对象，它指定 Microsoft 智能卡密钥存储提供程序。</summary>
      <returns>一个对象，指定 Microsoft 智能卡密钥存储提供程序。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider">
      <summary>获取 <see cref="T:System.Security.Cryptography.CngProvider" /> 对象，它指定 Microsoft 软件密钥存储提供程序。</summary>
      <returns>一个对象，指定 Microsoft 软件密钥存储提供程序。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngProvider.Provider">
      <summary>获取密钥存储提供程序 (KSP) 的名称当前 <see cref="T:System.Security.Cryptography.CngProvider" /> 对象指定。</summary>
      <returns>嵌入的 KSP 名称。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngUIPolicy.CreationTitle">
      <summary>获取提示通过用户界面显示的标题。</summary>
      <returns>访问密钥时出现的对话框中的标题。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngUIPolicy.Description">
      <summary>获取由 UI 显示的描述字符串的提示。</summary>
      <returns>访问密钥时出现的对话框中说明文本。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngUIPolicy.FriendlyName">
      <summary>获取由 UI 显示的友好名称的提示。</summary>
      <returns>用于描述访问密钥时出现的对话框中的密钥友好名称。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngUIPolicy.ProtectionLevel">
      <summary>获取密钥的用户界面保护级别。</summary>
      <returns>一个对象，描述要应用于密钥的用户界面保护级别。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngUIPolicy.UseContext">
      <summary>获取密钥的使用方式的说明。</summary>
      <returns>密钥的使用方式的说明。</returns>
    </member>
    <member name="P:System.Security.Cryptography.DSACng.Key">
      <summary>获取将由 <see cref="T:System.Security.Cryptography.DSACng" /> 对象用于它执行的任何加密操作的密钥。</summary>
      <returns>使用的密钥 <see cref="T:System.Security.Cryptography.DSACng" /> 对象以执行加密操作。</returns>
    </member>
    <member name="P:System.Security.Cryptography.DSACng.KeyExchangeAlgorithm">
      <summary>获取密钥交换算法的名称。</summary>
      <returns>总是为 null。</returns>
    </member>
    <member name="P:System.Security.Cryptography.DSACng.LegalKeySizes">
      <summary>获取以位为单位的 DSA 算法支持的密钥大小。</summary>
      <returns>一个数组，包含此算法支持的密钥大小。</returns>
    </member>
    <member name="P:System.Security.Cryptography.DSACng.SignatureAlgorithm">
      <summary>获取签名算法的名称。</summary>
      <returns>字符串"DSA"。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm">
      <summary>获取密钥交换算法的名称。</summary>
      <returns>密钥交换算法的名称。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.PublicKey">
      <summary>获取当前的椭圆曲线 Diffie-hellman (ECDH) 实例正在使用的公钥。</summary>
      <returns>正在使用这样的 ECDH 密钥对的公共部分 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 实例。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm">
      <summary>获取签名算法的名称。</summary>
      <returns>总是为 null。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm">
      <summary>获取或设置生成的密钥材料时要使用的哈希算法。</summary>
      <returns>一个指定哈希算法的对象。</returns>
      <exception cref="T:System.ArgumentNullException">值是 null.</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.HmacKey">
      <summary>获取或设置用于派生密钥材料时的基于哈希的消息身份验证代码 (HMAC) 密钥。</summary>
      <returns>用于派生密钥材料的基于哈希的消息身份验证代码 (HMAC) 密钥。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.Key">
      <summary>指定 <see cref="T:System.Security.Cryptography.CngKey" /> ，它由当前对象为加密操作。</summary>
      <returns>此对象用于执行加密操作的密钥对。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction">
      <summary>获取或设置的密钥派生函数 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 类。</summary>
      <returns>其中一个 <see cref="T:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction" /> 枚举值 ︰ <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />, ，<see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac" />, ，或 <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" />。 默认值为 <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">枚举值超出了范围。</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.Label">
      <summary>获取或设置用于密钥派生标签值。</summary>
      <returns>标签值。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.PublicKey">
      <summary>获取可由另一个的公钥 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 对象来生成共享的机密协议。</summary>
      <returns>与此实例相关联的公钥 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend">
      <summary>获取或设置一个值，生成的密钥材料时将追加到机密协议。</summary>
      <returns>追加到机密协议值。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend">
      <summary>获取或设置一个值，派生密钥材料时将添加到机密协议的开头。</summary>
      <returns>追加到的密钥派生期间的机密协议开头的值。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed">
      <summary>获取或设置派生密钥材料时将使用的种子值。</summary>
      <returns>种子值中。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey">
      <summary>获取一个值，该值指示是否使用机密协议作为基于哈希的消息身份验证代码 (HMAC) 密钥来派生密钥材料。</summary>
      <returns>true 如果机密协议用作 HMAC 密钥用来派生密钥材料;否则为 false。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.BlobFormat">
      <summary>获取用于密钥 BLOB 格式 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> 对象。</summary>
      <returns>用表示密钥 BLOB 格式。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm">
      <summary>获取密钥交换算法的名称。</summary>
      <returns>总是为 null。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDsa.SignatureAlgorithm">
      <summary>获取签名算法的名称。</summary>
      <returns>字符串"ECDsa"。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDsaCng.HashAlgorithm">
      <summary>获取或设置要在签名和验证数据时使用的哈希算法。</summary>
      <returns>一个指定哈希算法的对象。</returns>
      <exception cref="T:System.ArgumentNullException">该值为 null。</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDsaCng.Key">
      <summary>获取或设置对数据进行签名或验证时要使用的键。</summary>
      <returns>指定键的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ManifestSignatureInformation.AuthenticodeSignature">
      <summary>获取清单的验证码签名信息。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation" /> 对象，其中包含验证码签名信息清单，或 null 如果没有进行签名。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ManifestSignatureInformation.Manifest">
      <summary>获取清单的类型。</summary>
      <returns>
        <see cref="T:System.Security.ManifestKinds" /> 值之一。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ManifestSignatureInformation.StrongNameSignature">
      <summary>获取清单的强名称签名的详细信息。</summary>
      <returns>一个 <see cref="P:System.Security.Cryptography.ManifestSignatureInformation.StrongNameSignature" /> 对象，其中包含该签名，或 null 如果没有强名称签名。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSACng.Key">
      <summary>获取将由 <see cref="T:System.Security.Cryptography.RSACng" /> 对象用于它执行的任何加密操作的密钥。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.RSACng" /> 对象使用的密钥。</returns>
    </member>
    <member name="P:System.Security.Cryptography.StrongNameSignatureInformation.HashAlgorithm">
      <summary>获取用于计算强名称签名的哈希算法。</summary>
      <returns>用于计算强名称签名的哈希算法的名称。</returns>
    </member>
    <member name="P:System.Security.Cryptography.StrongNameSignatureInformation.HResult">
      <summary>获取结果代码的 HRESULT 值。</summary>
      <returns>结果代码的 HRESULT 值。</returns>
    </member>
    <member name="P:System.Security.Cryptography.StrongNameSignatureInformation.IsValid">
      <summary>获取一个值，该值指示是否有效的强名称签名。</summary>
      <returns>true 强名称签名是否有效，则为否则为 false。</returns>
    </member>
    <member name="P:System.Security.Cryptography.StrongNameSignatureInformation.PublicKey">
      <summary>获取用于验证签名的公钥。</summary>
      <returns>用于验证签名公钥。</returns>
    </member>
    <member name="P:System.Security.Cryptography.StrongNameSignatureInformation.VerificationResult">
      <summary>获取验证强名称签名的结果。</summary>
      <returns>签名验证结果代码。</returns>
    </member>
    <member name="P:System.Security.Cryptography.TripleDESCng.Key">
      <summary>获取或设置键 <see cref="T:System.Security.Cryptography.TripleDESCng" /> 算法。</summary>
      <returns>密钥 <see cref="T:System.Security.Cryptography.TripleDESCng" /> 算法。</returns>
    </member>
    <member name="P:System.Security.Cryptography.TripleDESCng.KeySize">
      <summary>获取或设置大小，以位为单位的所用密钥 <see cref="T:System.Security.Cryptography.TripleDESCng" /> 算法。</summary>
      <returns>大小，以位为单位的所用密钥 <see cref="T:System.Security.Cryptography.TripleDESCng" /> 算法。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.Description">
      <summary>获取签名证书的说明。</summary>
      <returns>签名证书的说明。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.DescriptionUrl">
      <summary>获取签名证书的描述 URL。</summary>
      <returns>签名证书的描述 URL。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.HashAlgorithm">
      <summary>获取用于计算签名的哈希算法。</summary>
      <returns>用于计算签名的哈希算法。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.HResult">
      <summary>从验证签名获取 HRESULT 值。</summary>
      <returns>来自验证签名的 HRESULT 值。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.SignatureChain">
      <summary>获取用于验证验证码签名的证书链。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X509Chain" /> 对象，其中包含的证书链。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.SigningCertificate">
      <summary>获取已为清单签名的证书。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 表示证书的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.Timestamp">
      <summary>获取已应用于验证码签名的时间戳。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.TimestampInformation" /> 对象，其中包含签名的时间戳。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.TrustStatus">
      <summary>获取验证码签名的可信度。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.TrustStatus" /> 值之一。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.VerificationResult">
      <summary>获取验证验证码签名的结果。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.SignatureVerificationResult" /> 值之一。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.HashAlgorithm">
      <summary>获取用于计算时间戳签名的哈希算法。</summary>
      <returns>用于计算时间戳签名哈希算法。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.HResult">
      <summary>获取引起验证签名的 HRESULT 值。</summary>
      <returns>HRESULT 值而得出验证签名。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.IsValid">
      <summary>获取一个值，该值指示是否有效的签名的时间戳。</summary>
      <returns>true 如果时间戳有效，则为否则为 false。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.SignatureChain">
      <summary>获取用于验证签名的时间戳的证书链。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X509Chain" /> 对象，表示证书链。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.SigningCertificate">
      <summary>获取证书签名的时间戳。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 表示证书的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.Timestamp">
      <summary>获取应用于签名的时间戳。</summary>
      <returns>一个 <see cref="T:System.DateTime" /> 对象，表示的时间戳。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.VerificationResult">
      <summary>获取时间戳签名进行验证的结果。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.SignatureVerificationResult" /> 值之一。</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.CurrentReadCount">
      <summary>获取已进入读取模式锁定状态的独有线程的总数。</summary>
      <returns>已进入读取模式锁定状态的独有线程的数量。</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsReadLockHeld">
      <summary>获取一个值，该值指示当前线程是否已进入读取模式的锁定状态。</summary>
      <returns>如果当前线程已进入读取模式，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld">
      <summary>获取一个值，该值指示当前线程是否已进入可升级模式的锁定状态。</summary>
      <returns>如果当前线程已进入可升级模式，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsWriteLockHeld">
      <summary>获取一个值，该值指示当前线程是否已进入写入模式的锁定状态。</summary>
      <returns>如果当前线程已进入写入模式，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy">
      <summary>获取一个值，该值指示当前 <see cref="T:System.Threading.ReaderWriterLockSlim" /> 对象的递归策略。</summary>
      <returns>枚举值之一，用于指定锁定递归策略。</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveReadCount">
      <summary>获取当前线程进入读取模式锁定状态的次数，用于指示递归。</summary>
      <returns>如果当前线程未进入读取模式，则为 0（零）；如果线程已进入读取模式但却不是以递归方式进入的，则为 1；或者如果线程已经以递归方式进入锁定模式 n - 1 次，则为 n。</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveUpgradeCount">
      <summary>获取当前线程进入可升级模式锁定状态的次数，用于指示递归。</summary>
      <returns>如果当前线程没有进入可升级模式，则为 0；如果线程已进入可升级模式却不是以递归方式进入的，则为 1；或者如果线程已经以递归方式进入可升级模式 n - 1 次，则为 n。</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveWriteCount">
      <summary>获取当前线程进入写入模式锁定状态的次数，用于指示递归。</summary>
      <returns>如果当前线程没有进入写入模式，则为 0；如果线程已进入写入模式却不是以递归方式进入的，则为 1；或者如果线程已经以递归方式进入写入模式 n - 1 次，则为 n。</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingReadCount">
      <summary>获取等待进入读取模式锁定状态的线程总数。</summary>
      <returns>等待进入读取模式的线程总数。</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount">
      <summary>获取等待进入可升级模式锁定状态的线程总数。</summary>
      <returns>等待进入可升级模式的线程总数。</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingWriteCount">
      <summary>获取等待进入写入模式锁定状态的线程总数。</summary>
      <returns>等待进入写入模式的线程总数。</returns>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle">
      <summary>提供了一个表示顺序访问的内存映射文件的安全句柄。</summary>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle">
      <summary>提供安全句柄表示的针对随机访问非托管内存块的视图。</summary>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeNCryptHandle">
      <summary>提供了可被下一代加密技术 (CNG) 对象使用的安全句柄。</summary>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle">
      <summary>提供了表示密钥 (NCRYPT_KEY_HANDLE) 的安全句柄。</summary>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle">
      <summary>提供了表示密钥存储提供程序 (NCRYPT_PROV_HANDLE) 的安全句柄。</summary>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle">
      <summary>提供了表示机密协议值 (NCRYPT_SECRET_HANDLE) 的安全句柄。</summary>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafePipeHandle">
      <summary>表示管道句柄的包装类。</summary>
    </member>
    <member name="T:System.Action`10">
      <summary>封装具有 10 个参数且不返回值的方法。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装方法的第六个参数。</param>
      <param name="arg7">此委托封装方法的第七个参数。</param>
      <param name="arg8">此委托封装方法的第八个参数。</param>
      <param name="arg9">此委托封装方法的第九个参数。</param>
      <param name="arg10">此委托封装方法的第十个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
    </member>
    <member name="T:System.Action`11">
      <summary>封装具有 11 个参数且不返回值的方法。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装方法的第六个参数。</param>
      <param name="arg7">此委托封装方法的第七个参数。</param>
      <param name="arg8">此委托封装方法的第八个参数。</param>
      <param name="arg9">此委托封装方法的第九个参数。</param>
      <param name="arg10">此委托封装方法的第十个参数。</param>
      <param name="arg11">此委托封装方法的第十一个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
    </member>
    <member name="T:System.Action`12">
      <summary>封装具有 12 个参数且不返回值的方法。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装方法的第六个参数。</param>
      <param name="arg7">此委托封装方法的第七个参数。</param>
      <param name="arg8">此委托封装方法的第八个参数。</param>
      <param name="arg9">此委托封装方法的第九个参数。</param>
      <param name="arg10">此委托封装方法的第十个参数。</param>
      <param name="arg11">此委托封装方法的第十一个参数。</param>
      <param name="arg12">此委托封装方法的第十二个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
    </member>
    <member name="T:System.Action`13">
      <summary>封装具有 13 个参数且不返回值的方法。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装方法的第六个参数。</param>
      <param name="arg7">此委托封装方法的第七个参数。</param>
      <param name="arg8">此委托封装方法的第八个参数。</param>
      <param name="arg9">此委托封装方法的第九个参数。</param>
      <param name="arg10">此委托封装方法的第十个参数。</param>
      <param name="arg11">此委托封装方法的第十一个参数。</param>
      <param name="arg12">此委托封装方法的第十二个参数。</param>
      <param name="arg13">此委托封装的方法的第十三个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
    </member>
    <member name="T:System.Action`14">
      <summary>封装具有 14 个参数且不返回值的方法。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装方法的第六个参数。</param>
      <param name="arg7">此委托封装方法的第七个参数。</param>
      <param name="arg8">此委托封装方法的第八个参数。</param>
      <param name="arg9">此委托封装方法的第九个参数。</param>
      <param name="arg10">此委托封装方法的第十个参数。</param>
      <param name="arg11">此委托封装方法的第十一个参数。</param>
      <param name="arg12">此委托封装方法的第十二个参数。</param>
      <param name="arg13">此委托封装的方法的第十三个参数。</param>
      <param name="arg14">此委托封装方法的第十四个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
      <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
    </member>
    <member name="T:System.Action`15">
      <summary>封装一个方法，具有 15 个参数并不返回值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装方法的第六个参数。</param>
      <param name="arg7">此委托封装方法的第七个参数。</param>
      <param name="arg8">此委托封装方法的第八个参数。</param>
      <param name="arg9">此委托封装方法的第九个参数。</param>
      <param name="arg10">此委托封装方法的第十个参数。</param>
      <param name="arg11">此委托封装方法的第十一个参数。</param>
      <param name="arg12">此委托封装方法的第十二个参数。</param>
      <param name="arg13">此委托封装的方法的第十三个参数。</param>
      <param name="arg14">此委托封装方法的第十四个参数。</param>
      <param name="arg15">此委托封装方法的第十五个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
      <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
      <typeparam name="T15">此委托封装的方法的第十五个参数的类型。</typeparam>
    </member>
    <member name="T:System.Action`16">
      <summary>封装具有 16 个参数且不返回值的方法。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装方法的第六个参数。</param>
      <param name="arg7">此委托封装方法的第七个参数。</param>
      <param name="arg8">此委托封装方法的第八个参数。</param>
      <param name="arg9">此委托封装方法的第九个参数。</param>
      <param name="arg10">此委托封装方法的第十个参数。</param>
      <param name="arg11">此委托封装方法的第十一个参数。</param>
      <param name="arg12">此委托封装方法的第十二个参数。</param>
      <param name="arg13">此委托封装的方法的第十三个参数。</param>
      <param name="arg14">此委托封装方法的第十四个参数。</param>
      <param name="arg15">此委托封装方法的第十五个参数。</param>
      <param name="arg16">此委托封装方法的第 16 个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
      <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
      <typeparam name="T15">此委托封装的方法的第十五个参数的类型。</typeparam>
      <typeparam name="T16">此委托封装的方法的第 16 个参数的类型。</typeparam>
    </member>
    <member name="T:System.Action`9">
      <summary>封装一个方法，该方法具有九个参数且不返回值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装方法的第六个参数。</param>
      <param name="arg7">此委托封装方法的第七个参数。</param>
      <param name="arg8">此委托封装方法的第八个参数。</param>
      <param name="arg9">此委托封装方法的第九个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1">
      <summary>表示值的集。若要浏览此类型的.NET Framework 源代码，请参阅 Reference Source。</summary>
      <typeparam name="T">哈希集中的元素类型。</typeparam>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1.Enumerator">
      <summary>枚举 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象的元素。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.EventDescriptor">
      <summary>包含定义了一个事件的元数据。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.EventProvider">
      <summary>此类用于写入事件。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.EventProvider.WriteEventErrorCode">
      <summary>定义最后一个写入操作的可能状态。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.EventProvider.WriteEventErrorCode.NoError">
      <summary>已成功写入。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.EventProvider.WriteEventErrorCode.NoFreeBuffers">
      <summary>会话用尽了可用的缓冲区，可供写入。 在事件率期间将会发生这种，因为磁盘子系统会过载或缓冲区的数目太小。 而不是阻止更多的缓冲区可用之前，事件将被丢弃。 请考虑对于会话，请增加的数量和缓冲区的大小或减小写入的事件数或事件的大小。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.EventProvider.WriteEventErrorCode.EventTooBig">
      <summary>该事件大于会话缓冲区大小;事件将不能跨越缓冲区。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.EventProviderTraceListener">
      <summary>侦听程序 <see cref="T:System.Diagnostics.TraceSource" /> ，它将事件写入到 ETW 子系统。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventBookmark">
      <summary>表示事件流中的占位符 （书签）。 可以使用占位符来标记一个位置，并返回到事件流中此位置。 此对象的实例可以获取从 <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" /> 对象，在这种情况下它对应于该事件记录的位置。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventKeyword">
      <summary>表示一个事件的关键字。 关键字定义事件提供程序中使用，用于进行分组 （基于事件的用法） 其他类似事件的事件。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLevel">
      <summary>包含事件提供程序中定义的事件级别。 级别表示事件的严重性。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogConfiguration">
      <summary>包含事件日志的静态信息和配置设置。 通过创建日志的事件提供程序定义了多个配置设置。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogException">
      <summary>表示当读取事件日志相关的信息过程中发生错误时引发的所有异常的基类。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogInformation">
      <summary>允许您访问活动的事件日志和事件日志文件的运行时属性。 这些属性包括在日志中的事件数、 写入或访问日志，一个值，确定是否在日志已满，以及上一次日志的大小。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException">
      <summary>表示事件提供程序在事件中发布数据无效时引发的异常。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogIsolation">
      <summary>定义事件日志的默认访问权限。 这些应用程序和系统的值指示，日志访问控制列表 (ACL) 与共享的相应 Windows 日志 （应用程序或系统事件日志） 和共享相同的隔离其他日志的事件的 Windows 跟踪 (ETW) 会话。 具有自定义隔离的所有通道都使用一个专用 ETW 会话。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogIsolation.Application">
      <summary>该日志与应用程序事件日志中共享的访问控制列表，并且具有应用程序隔离其他日志共享 ETW 会话。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogIsolation.System">
      <summary>该日志与系统事件日志中共享的访问控制列表，并且具有系统隔离其他日志共享 ETW 会话。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogIsolation.Custom">
      <summary>事件日志是一个使用其自己的专用 ETW 会话的自定义事件日志。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogLink">
      <summary>表示事件提供程序和提供程序将事件发布到事件日志之间的链接。 此对象不能实例化。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogMode">
      <summary>确定事件日志服务的行为处理事件日志，当日志达到其允许最大大小 （当事件日志已满时）。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogMode.Circular">
      <summary>新的事件会继续在日志文件已满时被存储。 每个新的传入事件替换日志中的最旧事件。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogMode.AutoBackup">
      <summary>存档日志满时，不改写事件。 在必要时，会自动存档日志。 不改写任何事件。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogMode.Retain">
      <summary>不改写事件。 手动而不是自动清除日志。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogNotFoundException">
      <summary>表示请求的事件日志 （通常由事件日志或事件日志文件的路径的名称指定） 不存在时引发的异常。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogPropertySelector">
      <summary>包含表示 XPath 查询中的 XML 表示形式的事件取决于元素的字符串数组 Event Schema。 此对象中的查询用于从事件中提取值。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException">
      <summary>表示指定的事件提供程序名称引用已禁用的事件提供程序时，将引发的异常。 已禁用的事件提供程序不能发布事件。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogQuery">
      <summary>表示事件在事件日志以及用于定义如何执行该查询的设置和在哪台计算机执行查询的查询。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogReader">
      <summary>使您能够根据事件查询事件日志中读取事件。 此对象读取的事件将作为返回 <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" /> 对象。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogReadingException">
      <summary>表示当读取、 查询或订阅事件日志中的事件时，出现错误时引发的异常。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogRecord">
      <summary>包含从收到的事件的事件实例的属性 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> 对象。 事件属性提供有关如名称事件记录了该事件的计算机以及创建了事件的时间的信息。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogSession">
      <summary>用于访问本地计算机或远程计算机上的事件日志服务，以便您可以管理和在计算机上收集有关事件日志和事件提供程序的信息。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogStatus">
      <summary>包含状态代码或特定的事件日志的错误代码。 此状态可以用于确定是否可供操作事件日志。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogType">
      <summary>定义事件日志中记录的事件的类型。 每个日志只能包含一种类型的事件。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogType.Administrative">
      <summary>这些事件是主要用于最终用户、 管理员和支持。 管理类型的日志中找到的事件指示问题以及管理员可操作的定义完善的解决方案。 管理事件的一个示例是一个应用程序无法连接到打印机时发生的事件。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogType.Operational">
      <summary>操作类型事件日志中的事件用于分析和诊断问题或发生的事件。 它们可以用于触发工具或基于问题或发生的事件的任务。 操作事件的一个示例是一个添加或从系统中删除打印机时发生的事件。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogType.Analytical">
      <summary>分析事件日志中的事件发布在大容量。 它们描述程序操作，并指示不能处理因用户干预的问题。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogType.Debug">
      <summary>仅供开发人员使用的调试类型事件日志中的事件用于诊断问题以进行调试。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogWatcher">
      <summary>允许您对传入事件订阅。 每次所需的事件发布到事件日志， <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> 引发事件时，并将执行用于处理此事件的方法。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventMetadata">
      <summary>在事件提供程序中定义的事件中包含的元数据 （属性和设置）。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventOpcode">
      <summary>包含事件提供程序中定义的事件操作码。 一个操作码，定义一个数值，它标识的活动或在引发事件时，应用程序正在执行的活动内的点。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventProperty">
      <summary>包含发布事件时指定事件提供程序的事件属性的值。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventRecord">
      <summary>定义从收到的事件的事件实例的属性 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> 对象。 事件属性提供有关事件的信息如的名称记录了该事件的计算机和时间的事件的创建。 此类是一个抽象类。<see cref="T:System.Diagnostics.Eventing.Reader.EventLogRecord" /> 类实现此类。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs">
      <summary>当 <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> 引发事件时，此对象的实例传递到处理该事件的委托方法。 此对象包含已发布到事件日志或事件订阅失败时出现的异常的事件。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventTask">
      <summary>包含事件提供程序中定义的事件任务。 该任务标识应用程序或发布的事件的组件的一部分。 任务是具有保留的前 16 个值的 16 位值。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.PathType">
      <summary>指定一个字符串，包含事件日志或事件日志文件的文件系统路径的名称。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.PathType.LogName">
      <summary>Path 参数包含事件日志的名称。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.PathType.FilePath">
      <summary>Path 参数包含事件日志文件的文件系统路径。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.ProviderMetadata">
      <summary>包含有关事件提供程序，如名称和 id 的提供程序和提供程序中定义的事件集合的静态信息。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.SessionAuthentication">
      <summary>定义的远程过程调用 (RPC) 登录到服务器期间使用的身份验证类型的值。 当您创建此登录名时发生 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" /> 对象，它指定到远程计算机的连接。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.SessionAuthentication.Default">
      <summary>在 RPC 登录期间使用的默认身份验证方法。 默认身份验证等同于协商。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.SessionAuthentication.Negotiate">
      <summary>在 RPC 登录期间使用协商身份验证方法。 这样客户端应用程序选择最合适的身份验证方法 （NTLM 或 Kerberos） 这种情况。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.SessionAuthentication.Kerberos">
      <summary>使用 Kerberos 身份验证，在 RPC 登录过程。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.SessionAuthentication.Ntlm">
      <summary>使用 Windows NT LAN Manager (NTLM) 身份验证，在 RPC 登录过程。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.StandardEventKeywords">
      <summary>定义事件提供程序附加到事件的标准关键字。 有关关键字的详细信息，请参阅 <see cref="T:System.Diagnostics.Eventing.Reader.EventKeyword" />。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.None">
      <summary>此值指示发布事件时，执行不 on 关键字进行筛选。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.ResponseTime">
      <summary>附加到所有响应时间事件。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.WdiContext">
      <summary>附加到所有 Windows 诊断基础结构 (WDI) 上下文事件。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.WdiDiagnostic">
      <summary>附加到所有 Windows 诊断基础结构 (WDI) 诊断事件。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.Sqm">
      <summary>已附加到所有服务质量机制 (SQM) 事件。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.AuditFailure">
      <summary>已附加到所有失败的安全审核事件。 此关键字只应在安全日志中的事件。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.AuditSuccess">
      <summary>已附加到所有成功的安全审核事件。 此关键字只应在安全日志中的事件。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.CorrelationHint">
      <summary>附加到传输事件，其中相关的活动 ID (相关 ID) 是一个计算的值，不保证是唯一的 (不是真正的 GUID)。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.CorrelationHint2">
      <summary>附加到传输事件，其中相关的活动 ID (相关 ID) 是一个计算的值，不保证是唯一的 (不是真正的 GUID)。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.EventLogClassic">
      <summary>附加到使用 RaiseEvent 函数引发的事件。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.StandardEventLevel">
      <summary>定义事件日志服务中使用的标准事件级别。 级别定义的事件严重性。 这些标准级别以外，可以定义自定义事件级别。 有关级别的详细信息，请参阅 <see cref="T:System.Diagnostics.Eventing.Reader.EventLevel" />。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.LogAlways">
      <summary>此值指示事件发布过程都会不在级别筛选。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.Critical">
      <summary>此级别对应于严重错误，这是一个严重的错误，导致严重故障。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.Error">
      <summary>此级别相对应的表示某个问题的一般错误。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.Warning">
      <summary>此级别对应于警告事件。 例如，获取发布，因为磁盘已接近满负荷事件是一个警告事件。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.Informational">
      <summary>此级别对应于信息性事件或不是错误的消息。 这些事件可帮助跟踪进度或应用程序状态。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.Verbose">
      <summary>此级别对应于时间较长的事件或消息。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.StandardEventOpcode">
      <summary>定义事件提供程序附加到事件的标准操作码。 操作码的详细信息，请参阅 <see cref="T:System.Diagnostics.Eventing.Reader.EventOpcode" />。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Info">
      <summary>具有此操作码的事件是一个信息性事件。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Start">
      <summary>应用程序启动新事务或活动时，被发布具有此操作码的事件。 这可以嵌入到另一个事务或活动，如果多个事件具有开始操作码将彼此跟随而无需停止操作码的事件。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Stop">
      <summary>当某个活动或应用程序中的事务结束时，被发布具有此操作码的事件。 该事件对应于具有启动操作码的最后一个不成对事件。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.DataCollectionStart">
      <summary>具有此操作码的事件是跟踪集合启动事件。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.DataCollectionStop">
      <summary>具有此操作码的事件是跟踪集合停止事件。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Extension">
      <summary>具有此操作码的事件是一个扩展事件。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Reply">
      <summary>在应用程序中的活动回复事件后发布具有此操作码的事件。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Resume">
      <summary>在应用程序中的活动从暂停状态恢复后发布的事件与此操作码。 该事件应遵循 Suspend opcode 的事件。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Suspend">
      <summary>当在应用程序中的活动被挂起时，被发布具有此操作码的事件。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Send">
      <summary>应用程序中的一个活动到另一个活动传输数据或系统资源时，被发布具有此操作码的事件。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Receive">
      <summary>在应用程序中的一个活动收到数据时，被发布具有此操作码的事件。</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.StandardEventTask">
      <summary>定义事件提供程序附加到事件的标准任务。 有关任务的更多信息，请参见 <see cref="T:System.Diagnostics.Eventing.Reader.EventTask" />。</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventTask.None">
      <summary>没有任何任务用于标识发布的事件的应用程序的一部分。</summary>
    </member>
    <member name="T:System.Diagnostics.EventSchemaTraceListener">
      <summary>将端对端事件的跟踪或调试输出定向到 XML 编码的符合架构的日志文件。</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterData">
      <summary>包含一个计数器的原始数据。</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterSet">
      <summary>定义一组逻辑的计数器。</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterSetInstance">
      <summary>创建在 <see cref="T:System.Diagnostics.PerformanceData.CounterSet" /> 类中定义的逻辑计数器的实例。</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet">
      <summary>包含的计数器值的集合。</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterSetInstanceType">
      <summary>指定计数器集允许多个实例，例如进程和物理磁盘或单个实例如内存。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.Single">
      <summary>计数器集包含单个实例计数器，例如，计数器，用于测量物理内存。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.Multiple">
      <summary>计数器集包含多个实例的计数器，例如，一个计数器测量进程的平均磁盘 I/O。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.GlobalAggregate">
      <summary>计数器集包含的聚合值获取一个或多个源的单个实例计数器。 例如，在这种类型的计数器集中的计数器可以获取的读取数从每个计算机和 sum 上的三个硬盘它们的值。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.GlobalAggregateWithHistory">
      <summary>此类型是类似于 <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.GlobalAggregate" /> 只不过此计数器集类型 （该计数器的生存期过后缓存计数器值） 的使用者应用程序的生存期内存储所有计数器值。 例如，如果其中一个硬盘中全局聚合示例变得不可用，则该磁盘读取的总字节数将仍将可用和已用来计算聚合值。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.MultipleAggregate">
      <summary>计数器集包含多个实例计数器从计数器的所有实例获取的聚合值。 例如，在这种类型的计数器集中的计数器可以获取线程执行总时间之和多线程应用程序中的所有线程及其值。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.InstanceAggregate">
      <summary>此类型是类似于 <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.MultipleAggregate" />, 以外，而不是将聚合到一个聚合 (_Total) 实例的所有实例数据时，它将从具有相同名称的实例聚合计数器数据。 例如，如果多个提供程序负责处理包含的实例名为 IExplore， <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.Multiple" /> 和 <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.MultipleAggregate" /> CounterSet 将显示多个 IExplore 实例 （IExplore，IExplore #1，IExplore #2，依此类推）; 但是， <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.InstanceAggregate" /> 实例类型将发布只能有一个 IExplore 实例与从名为 IExplore 的所有实例聚合的计数器数据。</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterType">
      <summary>定义计数器的可能的类型。 每个计数器都被分配一个计数器类型。 计数器类型确定计算、 求平均值和显示的计数器数据的方式。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.QueueLength">
      <summary>此计数器类型用于随着时间的推移监视队列对资源的平均长度。 它显示最后两个除以时间间隔的采样间隔期间观察到的队列长度之间的差异。 （请参阅部署工具包中的 PERF_COUNTER_QUEUELEN_TYPE 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.LargeQueueLength">
      <summary>此计数器类型随着时间的推移监视队列对资源的平均长度。 此类型的计数器显示最后两个采样间隔，除以时间间隔期间观察到的队列长度之间的差异。 此计数器类型等同于 <see cref="F:System.Diagnostics.PerformanceData.CounterType.QueueLength" /> 计数器类型，只不过它使用更大的字段来容纳较大的值。 （请参阅部署工具包中的 PERF_COUNTER_LARGE_QUEUELEN_TYPE 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.QueueLength100Ns">
      <summary>此计数器类型队列长度使用测量积以 100 纳秒时间基准。 （请参阅部署工具包中的 PERF_COUNTER_100NS_QUEUELEN_TYPE 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.QueueLengthObjectTime">
      <summary>此计数器类型队列长度来测量积使用特定于对象的时间基准 （请参阅部署工具包中的 PERF_COUNTER_OBJ_QUEUELEN_TYPE 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawData32">
      <summary>此类型的计数器显示上次观测的值仅。 它不显示平均值。 （请参阅部署工具包中的 PERF_COUNTER_RAWCOUNT 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawData64">
      <summary>此类型的计数器显示上次观测的值仅，不是平均值。 它等同于 <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawData32" /> 计数器类型，只不过它使用更大的字段来容纳较大的值。 （请参阅部署工具包中的 PERF_COUNTER_LARGE_RAWCOUNT 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawDataHex32">
      <summary>此计数器类型以十六进制格式显示的最近一次观测的值。 它不显示平均值。 （请参阅部署工具包中的 PERF_COUNTER_RAWCOUNT_HEX 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawDataHex64">
      <summary>此计数器类型以十六进制格式显示上次观测的值。 它等同于 <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawDataHex32" /> 计数器类型，只不过它使用更大的字段来容纳较大的值。 （请参阅部署工具包中的 PERF_COUNTER_LARGE_RAWCOUNT_HEX 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RateOfCountPerSecond32">
      <summary>此计数器类型显示在采样间隔的每一秒内完成的操作的平均数目。 此类型的计数器测量在计时周期的系统时钟时间。 （请参阅部署工具包中的 PERF_COUNTER_COUNTER 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RateOfCountPerSecond64">
      <summary>此计数器类型显示在采样间隔的每一秒内完成的操作的平均数目。 此类型的计数器测量在计时周期的系统时钟时间。 此计数器类型等同于 <see cref="F:System.Diagnostics.PerformanceData.CounterType.RateOfCountPerSecond32" /> 类型，但是它使用更大的字段来容纳较大的值。 （请参阅部署工具包中的 PERF_COUNTER_BULK_COUNT 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawFraction32">
      <summary>此计数器类型百分比形式显示给它的一组的子集的比率。 例如，它将比较中使用的磁盘上的字节总数为磁盘上的字节数。 这种类型的计数器显示当前百分比仅，不是一段时间的平均值。 （请参阅部署工具包中的 PERF_RAW_FRACTION 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawFraction64">
      <summary>此计数器类型百分比形式显示给它的一组的子集的比率。 例如，它将比较中使用的磁盘上的字节总数为磁盘上的字节数。 这种类型的计数器显示当前百分比仅，不是一段时间的平均值。 它等同于 <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawFraction32" /> 计数器类型，只不过它使用更大的字段来容纳较大的值。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawBase32">
      <summary>此计数器类型收集上次观测的值仅。 值用作分母表示常规算术分数的计数器。 此类型支持 <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawFraction32" /> 计数器类型。 （请参阅部署工具包中的 PERF_RAW_BASE 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawBase64">
      <summary>此计数器类型收集上次观测的值。 它等同于 <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawBase32" />计数器类型，只不过它使用更大的字段来容纳较大的值。 此类型支持 <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawFraction64" /> 计数器类型。 （请参阅部署工具包中的 PERF_LARGE_RAW_BASE 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.SampleFraction">
      <summary>此计数器类型显示最近两个采样间隔期间命中与所有操作的平均比率。 （请参阅部署工具包中的 PERF_SAMPLE_FRACTION 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.SampleCounter">
      <summary>此计数器类型显示一秒内完成的操作的平均数目。 它测量单位的计时周期的系统性能计时器的时间。 变量 F 表示一秒内出现的计时周期数。 F 的值被考虑到公式中，以便以秒为单位显示的结果。 （请参阅部署工具包中的 PERF_SAMPLE_COUNTER 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.SampleBase">
      <summary>此计数器将存储的执行采样中断的数量和用作样本分数中的分母。 此类型支持 <see cref="F:System.Diagnostics.PerformanceData.CounterType.SampleFraction" /> 计数器类型。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.AverageTimer32">
      <summary>此类型的计数器测量完成进程或操作所花费的平均时间。 此种类型的计数器数量的进程或在此期间完成的操作显示在采样间隔的总已用时间的比率。 此种类型的计数器来测量以刻度为单位的系统时钟的时间。 （请参阅部署工具包中的 PERF_AVERAGE_TIMER 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.AverageBase">
      <summary>此计数器用作基础数据 （分母） 的时间或计数计算平均值的 <see cref="F:System.Diagnostics.PerformanceData.CounterType.AverageCount64" /> 和 <see cref="F:System.Diagnostics.PerformanceData.CounterType.AverageTimer32" /> 计数器类型。 此计数器类型收集上次观测的值仅。 （请参阅部署工具包中的 PERF_AVERAGE_BASE 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.AverageCount64">
      <summary>此计数器类型显示多少项处理，一般情况下，一次操作中。 此种类型的计数器显示完成的操作数目与处理 （例如，发送的字节数） 的项的比率。 通过将最后一个时间间隔内完成的操作的数目为最后一个时间间隔内处理的项的数目进行比较计算该比率。 （请参阅部署工具包中的 PERF_AVERAGE_BULK 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PercentageActive">
      <summary>此计数器类型显示组件处于活动状态，以占总的采样时间的平均时间。 （请参阅部署工具包中的 PERF_COUNTER_TIMER 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PercentageNotActive">
      <summary>这是反向计数器类型。 反向计数器测量组件未处于活动状态的时间，并从该测量值派生的活动时间。 此类型的计数器显示采样间隔期间观察到的活动时间的平均百分比。 通过监视服务处于非活动状态的时间的百分比，然后该值从 100%中减去计算这些计数器的值。 此计数器类型等同于 <see cref="F:System.Diagnostics.PerformanceData.CounterType.PercentageNotActive100Ns" /> 计数器类型，只不过它测量单位的计时周期的系统性能计时器，而不是以 100 纳秒为单位的时间。 （请参阅部署工具包中的 PERF_COUNTER_TIMER_INV 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PercentageActive100Ns">
      <summary>此种类型的计数器的采样间隔期间的总已用时间的百分比形式显示组件的活动时间。 它测量以 100 纳秒为单位的时间。 此种类型的计数器用于一次度量的一个组件的活动。 （请参阅部署工具包中的 PERF_100NSEC_TIMER 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PercentageNotActive100Ns">
      <summary>此计数器类型显示在采样间隔期间观察到的活动时间的平均百分比。 这是反向的计数器。 反向计数器来监视服务处于非活动状态的时间的百分比，然后该值从 100%中减去计算。 （请参阅部署工具包中的 PERF_100NSEC_TIMER_INV 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.ElapsedTime">
      <summary>此计数器类型显示的组件或进程启动时计算此值时的时间之间的总时间。 （请参阅部署工具包中的 PERF_ELAPSED_TIME 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive">
      <summary>此计数器类型是多项计时器。 计时器的组件，如处理器或磁盘的多个实例中收集数据。 此种类型的计数器采样间隔期间的总时间的百分比形式显示一个或多个组件的活动时间。 因为分子记录同时操作的组件的活动时间，因此最终的百分比可以超过 100%。 此计数器类型不同于 <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive100Ns" /> 在于它测量单位的计时周期的系统性能计时器，而不是以 100 纳秒为单位的时间。 （请参阅部署工具包中的 PERF_COUNTER_MULTI_TIMER 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive">
      <summary>此种类型的计数器采样间隔期间的总时间的百分比形式显示一个或多个组件的活动时间。 此计数器类型是反向的多项计时器。 计时器监视组件，如处理器或磁盘的多个的实例。 反向计数器测量组件未处于活动状态的时间，并从该测量值派生的活动时间。 此计数器不同于 <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive100Ns" /> 在于它测量单位的计时周期的系统性能计时器，而不是以 100 纳秒为单位的时间。 （请参阅部署工具包中的 PERF_COUNTER_MULTI_TIMER_INV 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive100Ns">
      <summary>此种类型的计数器采样间隔期间的总时间的百分比形式显示一个或多个组件的活动时间。 它测量以 100 纳秒为单位的时间。 此计数器类型是多项计时器。 计时器用于监视的组件，如处理器或磁盘的多个实例。 （请参阅部署工具包中的 PERF_100NSEC_MULTI_TIMER 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive100Ns">
      <summary>此种类型的计数器采样间隔期间的总时间的百分比形式显示一个或多个组件的活动时间。 此类型测量时间以 100 纳秒为单位的计数器。 此计数器类型是反向的多项计时器。 计时器用于监视的组件，如处理器或磁盘的多个实例。 反向计数器测量组件未处于活动状态的时间，并从非活动时间的度量单位推导其活动的时间。 （请参阅部署工具包中的 PERF_100NSEC_MULTI_TIMER_INV 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerBase">
      <summary>指示项采样的数目。 它用作分母计算中以得出平均值取样各项的多个，但是具有相似性，计时时间时的项目。 此类型支持下列计数器类型 ︰ <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive" />, ，<see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive" />, ，<see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive100Ns" />, ，和 <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive100Ns" />。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.Delta32">
      <summary>此计数器类型显示最近的两个示例时间间隔内已测量属性发生更改。 （请参阅部署工具包中的 PERF_COUNTER_DELTA 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.Delta64">
      <summary>此计数器类型显示最近的两个示例时间间隔内已测量属性发生更改。 它等同于 <see cref="F:System.Diagnostics.PerformanceData.CounterType.Delta32" /> 计数器类型，只不过它使用更大的字段来容纳较大的值。 （请参阅部署工具包中的 PERF_COUNTER_LARGE_DELTA 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.ObjectSpecificTimer">
      <summary>此种类型的 64 位计数器是特定于对象的单元中显示一个计时器。 （请参阅部署工具包中的 PERF_OBJ_TIME_TIMER 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PrecisionSystemTimer">
      <summary>此计数器类型显示两个计数器值组成的值 ︰ 正在监视的事件的运行时间的计数以及从系统性能计时器的频率。 此计数器类型不同于其他计数器计时器中，时钟计时周期值伴随计数器值，消除了由于滞后时间的函数调用任何可能的差异。 标准系统计时器不精确的准确的读数，会使用精确计数器类型。 （请参阅部署工具包中的 PERF_PRECISION_TIMER 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PrecisionTimer100Ns">
      <summary>此计数器类型显示两个计数器值组成的值 ︰ 正在监视的事件的已用时间的计数和"时钟"时间单位相同的专用计时器。 它测量以 100 纳秒为单位的时间。 此计数器类型与其他计数器计时器在于时钟计时周期值伴随计数器值消除由于滞后时间的函数调用任何可能的差异。 标准系统计时器不精确的准确的读数，会使用精确计数器类型。 （请参阅部署工具包中的 PERF_PRECISION_100NS_TIMER 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PrecisionObjectSpecificTimer">
      <summary>此计数器类型显示两个计数器值组成的值 ︰ 正在监视的事件的已用时间的计数以及对象标头的 PerfFreq 字段中指定的频率。 此计数器类型与其他计数器计时器在于时钟计时周期值通常会显示该计数器值，从而消除了由于滞后时间的函数调用任何可能的差异。 标准系统计时器不精确的准确的读数，会使用精确计数器类型。 （请参阅部署工具包中的 PERF_PRECISION_OBJECT_TIMER 计数器类型）。</summary>
    </member>
    <member name="T:System.Diagnostics.TraceLogRetentionOption">
      <summary>指定将用于的文件结构 <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> 日志。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceLogRetentionOption.SingleFileUnboundedSize">
      <summary>无最大文件大小限制的第一个文件。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceLogRetentionOption.SingleFileBoundedSize">
      <summary>最大文件大小为所确定的一个文件 <see cref="P:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize" /> 属性。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceLogRetentionOption.UnlimitedSequentialFiles">
      <summary>无限的数量的连续文件，每个所确定的最大文件大小 <see cref="P:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize" /> 属性。 没有逻辑绑定到的数量或大小的文件，但对其进行限制的计算机的物理限制。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceLogRetentionOption.LimitedSequentialFiles">
      <summary>有限数量的连续文件，每个都有最大文件大小。 当 <see cref="P:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize" /> 达到属性值，在具有递增的整数后缀的新文件中开始进行写入。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceLogRetentionOption.LimitedCircularFiles">
      <summary>有限数量的连续文件，每个都有最大文件大小。 当 <see cref="P:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize" /> 达到属性值，在具有递增的整数后缀的新文件中开始进行写入。 当 <see cref="P:System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles" /> 达到属性值、 清除和覆盖第一个文件。 然后以循环方式以增量方式覆盖文件。</summary>
    </member>
    <member name="T:System.Diagnostics.UnescapedXmlDiagnosticData">
      <summary>为用户提供的跟踪数据的日志记录提供非转义的 XML 数据。</summary>
    </member>
    <member name="T:System.Dynamic.BinaryOperationBinder">
      <summary>表示调用站点的二进制动态操作，提供有关操作的绑定语义和详细信息。</summary>
    </member>
    <member name="T:System.Dynamic.BindingRestrictions">
      <summary>表示一组上的绑定限制 <see cref="T:System.Dynamic.DynamicMetaObject" /> 下动态绑定无效。</summary>
    </member>
    <member name="T:System.Dynamic.CallInfo">
      <summary>描述动态绑定过程中的参数。</summary>
    </member>
    <member name="T:System.Dynamic.ConvertBinder">
      <summary>表示调用站点的转换动态操作，提供有关操作的绑定语义和详细信息。</summary>
    </member>
    <member name="T:System.Dynamic.CreateInstanceBinder">
      <summary>表示调用站点的动态创建操作，提供有关操作的绑定语义和详细信息。</summary>
    </member>
    <member name="T:System.Dynamic.DeleteIndexBinder">
      <summary>表示调用站点的动态删除索引操作，提供有关操作的绑定语义和详细信息。</summary>
    </member>
    <member name="T:System.Dynamic.DeleteMemberBinder">
      <summary>表示调用站点的动态删除成员操作，提供有关操作的绑定语义和详细信息。</summary>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObject">
      <summary>表示动态绑定以及参与动态绑定的对象的绑定逻辑。</summary>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObjectBinder">
      <summary>参与动态调用站点绑定程序 <see cref="T:System.Dynamic.DynamicMetaObject" /> 绑定协议。</summary>
    </member>
    <member name="T:System.Dynamic.DynamicObject">
      <summary>提供用于在运行时指定动态行为的基类。 必须继承此类；不能直接对其进行实例化。</summary>
    </member>
    <member name="T:System.Dynamic.ExpandoObject">
      <summary>表示可在运行时动态添加和删除其成员的对象。</summary>
    </member>
    <member name="T:System.Dynamic.GetIndexBinder">
      <summary>表示调用站点的动态获取索引操作，提供有关操作的绑定语义和详细信息。</summary>
    </member>
    <member name="T:System.Dynamic.GetMemberBinder">
      <summary>表示调用站点的动态获取成员操作，提供有关操作的绑定语义和详细信息。</summary>
    </member>
    <member name="T:System.Dynamic.IDynamicMetaObjectProvider">
      <summary>表示可在运行时绑定其操作的动态对象。</summary>
    </member>
    <member name="T:System.Dynamic.IInvokeOnGetBinder">
      <summary>表示有关动态获取成员操作的信息，该操作指示当属性执行获取操作时，该获取成员是否应调用属性。</summary>
    </member>
    <member name="T:System.Dynamic.InvokeBinder">
      <summary>表示调用站点的调用动态操作，提供有关操作的绑定语义和详细信息。</summary>
    </member>
    <member name="T:System.Dynamic.InvokeMemberBinder">
      <summary>表示调用站点的调用成员动态操作，提供有关操作的绑定语义和详细信息。</summary>
    </member>
    <member name="T:System.Dynamic.SetIndexBinder">
      <summary>表示调用站点的动态设置索引操作，提供有关操作的绑定语义和详细信息。</summary>
    </member>
    <member name="T:System.Dynamic.SetMemberBinder">
      <summary>表示调用站点的动态设置成员操作，提供有关操作的绑定语义和详细信息。</summary>
    </member>
    <member name="T:System.Dynamic.UnaryOperationBinder">
      <summary>表示调用站点的一元动态操作，提供有关操作的绑定语义和详细信息。</summary>
    </member>
    <member name="T:System.Func`10">
      <summary>封装一个方法具有九个参数并返回由指定类型的值的方法 <paramref name="TResult" /> 参数。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装方法的第六个参数。</param>
      <param name="arg7">此委托封装方法的第七个参数。</param>
      <param name="arg8">此委托封装方法的第八个参数。</param>
      <param name="arg9">此委托封装方法的第九个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <returns>此委托封装的方法的返回值。</returns>
    </member>
    <member name="T:System.Func`11">
      <summary>封装具有 10 个参数且返回由指定的类型的值的方法 <paramref name="TResult" /> 参数。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装方法的第六个参数。</param>
      <param name="arg7">此委托封装方法的第七个参数。</param>
      <param name="arg8">此委托封装方法的第八个参数。</param>
      <param name="arg9">此委托封装方法的第九个参数。</param>
      <param name="arg10">此委托封装方法的第十个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <returns>此委托封装的方法的返回值。</returns>
    </member>
    <member name="T:System.Func`12">
      <summary>封装具有 11 个参数且返回由指定的类型的值的方法 <paramref name="TResult" /> 参数。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装方法的第六个参数。</param>
      <param name="arg7">此委托封装方法的第七个参数。</param>
      <param name="arg8">此委托封装方法的第八个参数。</param>
      <param name="arg9">此委托封装方法的第九个参数。</param>
      <param name="arg10">此委托封装方法的第十个参数。</param>
      <param name="arg11">此委托封装方法的第十一个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <returns>此委托封装的方法的返回值。</returns>
    </member>
    <member name="T:System.Func`13">
      <summary>封装具有 12 个参数且返回由指定的类型的值的方法 <paramref name="TResult" /> 参数。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装方法的第六个参数。</param>
      <param name="arg7">此委托封装方法的第七个参数。</param>
      <param name="arg8">此委托封装方法的第八个参数。</param>
      <param name="arg9">此委托封装方法的第九个参数。</param>
      <param name="arg10">此委托封装方法的第十个参数。</param>
      <param name="arg11">此委托封装方法的第十一个参数。</param>
      <param name="arg12">此委托封装方法的第十二个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <returns>此委托封装的方法的返回值。</returns>
    </member>
    <member name="T:System.Func`14">
      <summary>封装具有 13 个参数且返回由指定的类型的值的方法 <paramref name="TResult" /> 参数。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装方法的第六个参数。</param>
      <param name="arg7">此委托封装方法的第七个参数。</param>
      <param name="arg8">此委托封装方法的第八个参数。</param>
      <param name="arg9">此委托封装方法的第九个参数。</param>
      <param name="arg10">此委托封装方法的第十个参数。</param>
      <param name="arg11">此委托封装方法的第十一个参数。</param>
      <param name="arg12">此委托封装方法的第十二个参数。</param>
      <param name="arg13">此委托封装的方法的第十三个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <returns>此委托封装的方法的返回值。</returns>
    </member>
    <member name="T:System.Func`15">
      <summary>封装具有 14 个参数且返回由指定的类型的值的方法 <paramref name="TResult" /> 参数。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装方法的第六个参数。</param>
      <param name="arg7">此委托封装方法的第七个参数。</param>
      <param name="arg8">此委托封装方法的第八个参数。</param>
      <param name="arg9">此委托封装方法的第九个参数。</param>
      <param name="arg10">此委托封装方法的第十个参数。</param>
      <param name="arg11">此委托封装方法的第十一个参数。</param>
      <param name="arg12">此委托封装方法的第十二个参数。</param>
      <param name="arg13">此委托封装的方法的第十三个参数。</param>
      <param name="arg14">此委托封装方法的第十四个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
      <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <returns>此委托封装的方法的返回值。</returns>
    </member>
    <member name="T:System.Func`16">
      <summary>封装一个方法，具有 15 个参数并返回一个值所指定的类型 <paramref name="TResult" /> 参数。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装方法的第六个参数。</param>
      <param name="arg7">此委托封装方法的第七个参数。</param>
      <param name="arg8">此委托封装方法的第八个参数。</param>
      <param name="arg9">此委托封装方法的第九个参数。</param>
      <param name="arg10">此委托封装方法的第十个参数。</param>
      <param name="arg11">此委托封装方法的第十一个参数。</param>
      <param name="arg12">此委托封装方法的第十二个参数。</param>
      <param name="arg13">此委托封装的方法的第十三个参数。</param>
      <param name="arg14">此委托封装方法的第十四个参数。</param>
      <param name="arg15">此委托封装方法的第十五个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
      <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
      <typeparam name="T15">此委托封装的方法的第十五个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <returns>此委托封装的方法的返回值。</returns>
    </member>
    <member name="T:System.Func`17">
      <summary>封装具有 16 个参数且返回由指定的类型的值的方法 <paramref name="TResult" /> 参数。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装方法的第六个参数。</param>
      <param name="arg7">此委托封装方法的第七个参数。</param>
      <param name="arg8">此委托封装方法的第八个参数。</param>
      <param name="arg9">此委托封装方法的第九个参数。</param>
      <param name="arg10">此委托封装方法的第十个参数。</param>
      <param name="arg11">此委托封装方法的第十一个参数。</param>
      <param name="arg12">此委托封装方法的第十二个参数。</param>
      <param name="arg13">此委托封装的方法的第十三个参数。</param>
      <param name="arg14">此委托封装方法的第十四个参数。</param>
      <param name="arg15">此委托封装方法的第十五个参数。</param>
      <param name="arg16">此委托封装方法的第 16 个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
      <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
      <typeparam name="T15">此委托封装的方法的第十五个参数的类型。</typeparam>
      <typeparam name="T16">此委托封装的方法的第 16 个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <returns>此委托封装的方法的返回值。</returns>
    </member>
    <member name="T:System.IO.HandleInheritability">
      <summary>指定基础句柄是否由子进程继承。</summary>
    </member>
    <member name="F:System.IO.HandleInheritability.None">
      <summary>指定句柄不是由子进程继承。</summary>
    </member>
    <member name="F:System.IO.HandleInheritability.Inheritable">
      <summary>指定的句柄将由子进程继承。</summary>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedFile">
      <summary>表示内存映射文件。</summary>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess">
      <summary>指定访问功能和内存映射文件或视图的限制。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite">
      <summary>读取和写入到文件的访问。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Read">
      <summary>该文件的只读访问。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write">
      <summary>文件的只写访问。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.CopyOnWrite">
      <summary>读取和写入访问权限具有任何写入操作的限制的文件将不会看到其他进程。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadExecute">
      <summary>可以存储和运行可执行代码的文件的读取访问权限。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWriteExecute">
      <summary>读取和写入访问权限的文件，可以存储并运行可执行代码。</summary>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedFileOptions">
      <summary>提供了内存分配的内存映射文件的选项。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileOptions.None">
      <summary>应用没有内存分配选项。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileOptions.DelayAllocatePages">
      <summary>内存分配推迟到与创建视图 <see cref="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor" /> 或 <see cref="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream" /> 方法。</summary>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedFileRights">
      <summary>指定对与磁盘上的文件都不关联的内存映射文件的访问权限。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.CopyOnWrite">
      <summary>其他进程不会看到读取和写入到具有写入操作的限制的文件的权限。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Write">
      <summary>用于将数据添加到文件或从文件中删除数据的权限。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Read">
      <summary>若要打开和复制文件作为只读权限。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Execute">
      <summary>运行应用程序文件的权限。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Delete">
      <summary>用于删除文件的权限。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.ReadPermissions">
      <summary>从文件规则打开并复制访问和审核权限。 这不包括权限以读取数据、 文件系统属性，或扩展文件系统属性。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.ChangePermissions">
      <summary>更改安全和审核规则与文件关联的权限。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.TakeOwnership">
      <summary>用于更改文件的所有者的权限。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.ReadWrite">
      <summary>权打开和复制文件，以及将数据添加到文件或从文件中删除数据的权限。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.ReadExecute">
      <summary>若要打开和复制文件夹或文件作为只读的以及运行应用程序文件的权限。 此权限包括 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Read" /> 右侧和 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Execute" /> 右侧。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.ReadWriteExecute">
      <summary>打开和复制文件的权限、 将数据添加到文件或从一个文件中，删除数据的权限和运行应用程序文件的权限。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.FullControl">
      <summary>若要对文件进行完全控制，还可以修改访问控制和审核规则右侧。 此值表示与文件执行任何操作的权限，并且是此枚举中的所有权限的组合。</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.AccessSystemSecurity">
      <summary>获取或设置文件权限的权利。</summary>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedFileSecurity">
      <summary>表示可以为文件访问和操作针对内存映射文件授予的权限。</summary>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor">
      <summary>表示一个内存映射文件的随机访问的视图。</summary>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedViewStream">
      <summary>按顺序访问流形式表示内存映射文件的视图。</summary>
    </member>
    <member name="T:System.IO.Pipes.AnonymousPipeClientStream">
      <summary>公开支持同步和异步读取和写入操作的匿名管道流的客户端。</summary>
    </member>
    <member name="T:System.IO.Pipes.AnonymousPipeServerStream">
      <summary>公开周围匿名管道，支持同步和异步读取和写入操作的流。</summary>
    </member>
    <member name="T:System.IO.Pipes.NamedPipeClientStream">
      <summary>公开 <see cref="T:System.IO.Stream" /> 周围命名管道，支持同步和异步读取和写入操作。</summary>
    </member>
    <member name="T:System.IO.Pipes.NamedPipeServerStream">
      <summary>公开 <see cref="T:System.IO.Stream" /> 命名管道周围程序支持同步和异步读取和写入操作。</summary>
    </member>
    <member name="T:System.IO.Pipes.PipeAccessRights">
      <summary>定义要在创建访问和审核规则时使用的访问权限。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.ReadData">
      <summary>指定从管道读取数据的权限。 这不包括读取文件系统属性，扩展文件系统属性或访问和审核规则的权限。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.WriteData">
      <summary>指定将数据写入管道的权限。 这不包括写入文件系统属性或扩展的文件系统属性的权限。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.ReadAttributes">
      <summary>指定从管道读取文件系统属性的权限。 这不包括读取数据、 扩展的文件系统属性或访问和审核规则的权限。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.WriteAttributes">
      <summary>指定要向管道写入文件系统属性的权限。 这不包括写入数据或扩展的文件系统属性的权限。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.ReadExtendedAttributes">
      <summary>指定从管道读取扩展的文件系统属性的权限。 这不包括读取数据、 文件系统属性或访问和审核规则的权限。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.WriteExtendedAttributes">
      <summary>指定要写入管道的扩展的文件系统属性的权限。 这不包括写入的文件属性或数据的权限。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.CreateNewInstance">
      <summary>指定的权限来创建新的管道。 设置此权限还将设置 <see cref="F:System.IO.Pipes.PipeAccessRights.Synchronize" /> 右侧。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.Delete">
      <summary>指定的权限删除管道。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.ReadPermissions">
      <summary>指定从管道读取访问和审核规则的权限。 这不包括权限以读取数据、 文件系统属性，或扩展文件系统属性。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.ChangePermissions">
      <summary>指定的权限更改安全和审核与管道相关联的规则。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.TakeOwnership">
      <summary>指定要更改管道的所有者的权限。 请注意，管道的所有者拥有对该资源的完全访问权限。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.Synchronize">
      <summary>指定应用程序是否能够等待管道句柄的 I/O 操作的完成同步。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.FullControl">
      <summary>指定对管道，进行完全控制和修改访问控制和审核规则的权限。 此值表示此枚举中的所有权限的组合。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.Read">
      <summary>指定从管道读取的权限。 此权限包括 <see cref="F:System.IO.Pipes.PipeAccessRights.ReadAttributes" />, ，<see cref="F:System.IO.Pipes.PipeAccessRights.ReadData" />, ，<see cref="F:System.IO.Pipes.PipeAccessRights.ReadExtendedAttributes" />, ，和 <see cref="F:System.IO.Pipes.PipeAccessRights.ReadPermissions" /> 权限。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.Write">
      <summary>指定要写入管道的权限。 此权限包括 <see cref="F:System.IO.Pipes.PipeAccessRights.WriteAttributes" />, ，<see cref="F:System.IO.Pipes.PipeAccessRights.WriteData" />, ，和 <see cref="F:System.IO.Pipes.PipeAccessRights.WriteExtendedAttributes" /> 权限。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.ReadWrite">
      <summary>指定从管道读取和写入权限。 此权限包括 <see cref="F:System.IO.Pipes.PipeAccessRights.ReadAttributes" />, ，<see cref="F:System.IO.Pipes.PipeAccessRights.ReadData" />, ，<see cref="F:System.IO.Pipes.PipeAccessRights.ReadExtendedAttributes" />, ，<see cref="F:System.IO.Pipes.PipeAccessRights.ReadPermissions" />, ，<see cref="F:System.IO.Pipes.PipeAccessRights.WriteAttributes" />, ，<see cref="F:System.IO.Pipes.PipeAccessRights.WriteData" />, ，和 <see cref="F:System.IO.Pipes.PipeAccessRights.WriteExtendedAttributes" /> 权限。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.AccessSystemSecurity">
      <summary>指定要更改系统访问控制列表 (SACL) 的权限。</summary>
    </member>
    <member name="T:System.IO.Pipes.PipeAccessRule">
      <summary>表示定义管道的访问规则的访问控制项 (ACE) 的抽象。</summary>
    </member>
    <member name="T:System.IO.Pipes.PipeAuditRule">
      <summary>表示定义管道的审核规则的访问控制项 (ACE) 的抽象。</summary>
    </member>
    <member name="T:System.IO.Pipes.PipeDirection">
      <summary>指定管道的方向。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeDirection.In">
      <summary>指定的管道方向为向内。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeDirection.Out">
      <summary>指定的管道方向为向外。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeDirection.InOut">
      <summary>指定的管道方向是双向的。</summary>
    </member>
    <member name="T:System.IO.Pipes.PipeOptions">
      <summary>提供用于创建选项 <see cref="T:System.IO.Pipes.PipeStream" /> 对象。 此枚举有一个允许其成员值按位组合的 <see cref="T:System.FlagsAttribute" /> 属性。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeOptions.None">
      <summary>指示没有任何其他参数。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeOptions.WriteThrough">
      <summary>指示系统应编写通过任何中间缓存并直接转到管道。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeOptions.Asynchronous">
      <summary>指示管道可用于异步读取和写入。</summary>
    </member>
    <member name="T:System.IO.Pipes.PipeSecurity">
      <summary>表示访问控制和审核安全性管道。</summary>
    </member>
    <member name="T:System.IO.Pipes.PipeStream">
      <summary>公开管道周围的 <see cref="T:System.IO.Stream" /> 对象，该对象同时支持匿名管道和命名管道。</summary>
    </member>
    <member name="T:System.IO.Pipes.PipeStreamImpersonationWorker">
      <summary>表示要与客户端调用的方法。</summary>
    </member>
    <member name="T:System.IO.Pipes.PipeTransmissionMode">
      <summary>指定管道的传输模式。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeTransmissionMode.Byte">
      <summary>指示是发送和读取的字节流的形式在管道中的数据。</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeTransmissionMode.Message">
      <summary>指示是发送和读取的消息流的形式在管道中的数据。</summary>
    </member>
    <member name="T:System.Linq.Enumerable">
      <summary>提供了一套 static (Shared 在 Visual Basic 中) 用于查询实现的对象方法 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</summary>
    </member>
    <member name="T:System.Linq.EnumerableExecutor">
      <summary>表示一个表达式树，并提供在重写之后执行表达式树的功能。</summary>
    </member>
    <member name="T:System.Linq.EnumerableExecutor`1">
      <summary>表示一个表达式树，并提供在重写之后执行表达式树的功能。</summary>
      <typeparam name="T">执行表达式树所得到的值数据类型。</typeparam>
    </member>
    <member name="T:System.Linq.EnumerableQuery">
      <summary>表示 <see cref="T:System.Collections.IEnumerable" /> 作为 <see cref="T:System.Linq.EnumerableQuery" /> 数据源。</summary>
    </member>
    <member name="T:System.Linq.EnumerableQuery`1">
      <summary>表示作为 <see cref="T:System.Linq.IQueryable`1" /> 数据源的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 集合。</summary>
      <typeparam name="T">集合中数据的类型。</typeparam>
    </member>
    <member name="T:System.Linq.Expressions.BinaryExpression">
      <summary>表示具有二进制运算符的表达式。</summary>
    </member>
    <member name="T:System.Linq.Expressions.BlockExpression">
      <summary>表示包含一个表达式序列的块，表达式中可定义变量。</summary>
    </member>
    <member name="T:System.Linq.Expressions.CatchBlock">
      <summary>表示 try 块中的 catch 语句。</summary>
    </member>
    <member name="T:System.Linq.Expressions.ConditionalExpression">
      <summary>表示具有条件运算符的表达式。</summary>
    </member>
    <member name="T:System.Linq.Expressions.ConstantExpression">
      <summary>表示具有常数值的表达式。</summary>
    </member>
    <member name="T:System.Linq.Expressions.DebugInfoExpression">
      <summary>发出或清除调试信息的序列点。 这使调试器能够在调试时突出显示正确的源代码。</summary>
    </member>
    <member name="T:System.Linq.Expressions.DefaultExpression">
      <summary>表示一个类型或空表达式的默认值。</summary>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpression">
      <summary>表示一个动态操作。</summary>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpressionVisitor">
      <summary>表示动态表达式树的访问者或重写者。</summary>
    </member>
    <member name="T:System.Linq.Expressions.ElementInit">
      <summary>表示 <see cref="T:System.Collections.IEnumerable" /> 集合的单个元素的初始值设定项。</summary>
    </member>
    <member name="T:System.Linq.Expressions.Expression">
      <summary>提供一种基类，表示表达式树节点的类派生自该基类。 它还包含用来创建各种节点类型的 static（在 Visual Basic 中为 Shared）工厂方法。 这是一个 abstract 类。</summary>
    </member>
    <member name="T:System.Linq.Expressions.Expression`1">
      <summary>将强类型化的 lambda 表达式表示为表达式树形式的数据结构。 无法继承此类。</summary>
      <typeparam name="TDelegate">该委托的类型， <see cref="T:System.Linq.Expressions.Expression`1" /> 表示。</typeparam>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionType">
      <summary>介绍表达式树节点的节点类型。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Add">
      <summary>加法运算，如 a + b, ，不进行溢出检查，针对数值操作数。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddChecked">
      <summary>加法运算，如 (a + b), ，进行溢出检查，针对数值操作数。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.And">
      <summary>按位或逻辑 AND 操作，如 (a &amp; b) 在 C# 和 (a And b) 在 Visual Basic 中。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAlso">
      <summary>在条件 AND 仅当第一个操作数的计算结果为才计算第二个操作数的操作 true。 它对应于 (a &amp;&amp; b) 在 C# 和 (a AndAlso b) 在 Visual Basic 中。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayLength">
      <summary>获取一维数组的长度，如操作 array.Length。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayIndex">
      <summary>索引操作在一维数组中，如 array[index] 在 C# 或 array(index) 在 Visual Basic 中。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Call">
      <summary>某个方法调用，如在 obj.sampleMethod() 表达式。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Coalesce">
      <summary>一个表示空合并操作，如节点 (a ?? b) 在 C# 或 If(a, b) 在 Visual Basic 中。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Conditional">
      <summary>条件运算，如 a &gt; b ? a : b 在 C# 或 If(a &gt; b, a, b) 在 Visual Basic 中。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Constant">
      <summary>常量的值。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Convert">
      <summary>强制转换或转换操作中，如 (SampleType)obj C# 中或 CType(obj, SampleType) 在 Visual Basic 中。 对于数值的转换，如果转换后的值对于目标类型来说太大不引发异常。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ConvertChecked">
      <summary>强制转换或转换操作中，如 (SampleType)obj C# 中或 CType(obj, SampleType) 在 Visual Basic 中。 对于数值的转换，如果转换后的值不符合目标类型是引发异常。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Divide">
      <summary>除法运算，如 (a / b), ，针对数值操作数。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Equal">
      <summary>一个表示相等比较，如节点 (a == b) 在 C# 或 (a = b) 在 Visual Basic 中。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOr">
      <summary>按位或逻辑 XOR 操作，如 (a ^ b) 在 C# 或 (a Xor b) 在 Visual Basic 中。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThan">
      <summary>"大于"比较，如 (a &gt; b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual">
      <summary>"大于或等于"比较，如 (a &gt;= b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Invoke">
      <summary>操作调用的委托或 lambda 表达式，如 sampleDelegate.Invoke()。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Lambda">
      <summary>Lambda 表达式，如 a =&gt; a + a 在 C# 或 Function(a) a + a 在 Visual Basic 中。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShift">
      <summary>按位左移运算，如 (a &lt;&lt; b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThan">
      <summary>"小于"比较，如 (a &lt; b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual">
      <summary>"小于或等于"比较，如 (a &lt;= b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ListInit">
      <summary>创建一个新的操作的 <see cref="T:System.Collections.IEnumerable" /> 对象，并对其进行初始化从列表中的元素，如 new List&lt;SampleType&gt;(){ a, b, c } 在 C# 或 Dim sampleList = { a, b, c } 在 Visual Basic 中。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberAccess">
      <summary>从一个字段或属性，如读取操作 obj.SampleProperty。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberInit">
      <summary>运算，创建一个新的对象并初始化一个或多个成员，如 new Point { X = 1, Y = 2 } 在 C# 或 New Point With {.X = 1, .Y = 2} 在 Visual Basic 中。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Modulo">
      <summary>算术余数运算，如 (a % b) 在 C# 或 (a Mod b) 在 Visual Basic 中。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Multiply">
      <summary>乘法运算，如 (a * b), ，不进行溢出检查，针对数值操作数。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyChecked">
      <summary>乘法运算，如 (a * b), ，，进行溢出检查，针对数值操作数。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Negate">
      <summary>算术求反运算，如 (-a)。 该对象 a 不应就地修改。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.UnaryPlus">
      <summary>一元正运算，如 (+a)。 预定义的一元正运算的结果是操作数的值，但用户定义的实现可能有不寻常的结果。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NegateChecked">
      <summary>算术求反运算，如 (-a), ，，进行溢出检查。 该对象 a 不应就地修改。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.New">
      <summary>调用构造函数以创建新的对象，如操作 new SampleType()。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayInit">
      <summary>操作，创建一个新的一维数组并对其进行初始化从列表中的元素，如 new SampleType[]{a, b, c} 在 C# 或 New SampleType(){a, b, c} 在 Visual Basic 中。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayBounds">
      <summary>创建一个新数组，其中每个维度的下限指定，如操作 new SampleType[dim1, dim2] 在 C# 或 New SampleType(dim1, dim2) 在 Visual Basic 中。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Not">
      <summary>按位求补或逻辑求反运算。 在 C# 中，则等同于 (~a) 整型和 (!a) 布尔值。 在 Visual Basic 中，则等同于 (Not a)。 该对象 a 不应就地修改。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NotEqual">
      <summary>不相等比较，如 (a != b) 在 C# 或 (a &lt;&gt; b) 在 Visual Basic 中。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Or">
      <summary>按位或逻辑 OR 操作，如 (a | b) 在 C# 或 (a Or b) 在 Visual Basic 中。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrElse">
      <summary>短路条件 OR 操作，如 (a || b) 在 C# 或 (a OrElse b) 在 Visual Basic 中。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Parameter">
      <summary>对参数或变量的表达式的上下文中定义的引用。 有关更多信息，请参见<see cref="T:System.Linq.Expressions.ParameterExpression" />。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Power">
      <summary>如引发数字进行幂运算的数学运算 (a ^ b) 在 Visual Basic 中。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Quote">
      <summary>具有类型的常量值的表达式 <see cref="T:System.Linq.Expressions.Expression" />。 一个 <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> 节点可以包含对它所代表的表达式的上下文中定义的参数的引用。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShift">
      <summary>按位右移运算，如 (a &gt;&gt; b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Subtract">
      <summary>减法运算，如 (a - b), ，不进行溢出检查，针对数值操作数。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractChecked">
      <summary>算术减法运算，如 (a - b), ，，进行溢出检查，针对数值操作数。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeAs">
      <summary>显式引用或装箱转换在其中 null 如果转换失败，如提供 (obj as SampleType) 在 C# 或 TryCast(obj, SampleType) 在 Visual Basic 中。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeIs">
      <summary>一种类型测试，如 obj is SampleType 在 C# 或 TypeOf obj is SampleType 在 Visual Basic 中。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Assign">
      <summary>赋值运算，如 (a = b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Block">
      <summary>表达式的块。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DebugInfo">
      <summary>调试信息。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Decrement">
      <summary>一元递减操作，如 (a - 1) C# 和 Visual Basic 中。 该对象 a 不应就地修改。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Dynamic">
      <summary>动态操作。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Default">
      <summary>默认值。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Extension">
      <summary>扩展表达式。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Goto">
      <summary>一个"转到"表达式，如 goto Label 在 C# 或 GoTo Label 在 Visual Basic 中。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Increment">
      <summary>一元递增操作，如 (a + 1) C# 和 Visual Basic 中。 该对象 a 不应就地修改。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Index">
      <summary>索引操作或访问不采用参数的属性的操作。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Label">
      <summary>标签。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RuntimeVariables">
      <summary>运行时变量的列表。 有关详细信息，请参阅<see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Loop">
      <summary>一个循环，如 for 或 while。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Switch">
      <summary>一个切换操作，如 switch 在 C# 或 Select Case 在 Visual Basic 中。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Throw">
      <summary>引发异常，如操作 throw new Exception()。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Try">
      <summary>一个 try-catch 表达式。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Unbox">
      <summary>取消装箱值类型的操作，如 unbox 和 unbox.any MSIL 中的说明。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssign">
      <summary>加法复合赋值运算，如 (a += b), ，不进行溢出检查，针对数值操作数。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAssign">
      <summary>按位或逻辑 AND 复合赋值运算，如 (a &amp;= b) C# 中。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DivideAssign">
      <summary>除的复合赋值运算，如 (a /= b), ，针对数值操作数。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign">
      <summary>按位或逻辑 XOR 复合赋值运算，如 (a ^= b) C# 中。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign">
      <summary>按位左移复合赋值运算，如 (a &lt;&lt;= b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ModuloAssign">
      <summary>算术余数复合赋值运算，如 (a %= b) C# 中。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssign">
      <summary>乘法复合赋值运算，如 (a *= b), ，不进行溢出检查，针对数值操作数。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrAssign">
      <summary>按位或逻辑 OR 复合赋值运算，如 (a |= b) C# 中。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PowerAssign">
      <summary>如引发数字进行幂运算的复合赋值运算 (a ^= b) 在 Visual Basic 中。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShiftAssign">
      <summary>按位右移复合赋值运算，如 (a &gt;&gt;= b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssign">
      <summary>减法复合赋值运算，如 (a -= b), ，不进行溢出检查，针对数值操作数。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssignChecked">
      <summary>加法复合赋值运算，如 (a += b), ，进行溢出检查，针对数值操作数。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked">
      <summary>乘法复合赋值运算，如 (a *= b), ，，进行溢出检查，针对数值操作数。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked">
      <summary>减法复合赋值运算，如 (a -= b), ，，进行溢出检查，针对数值操作数。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreIncrementAssign">
      <summary>一元前缀递增，如 (++a)。 该对象 a 应就地修改。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreDecrementAssign">
      <summary>一元前缀递减，如 (--a)。 该对象 a 应就地修改。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostIncrementAssign">
      <summary>一元后缀递增，如 (a++)。 该对象 a 应就地修改。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostDecrementAssign">
      <summary>一元后缀递减，如 (a--)。 该对象 a 应就地修改。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeEqual">
      <summary>确切类型测试。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OnesComplement">
      <summary>一个二进制反码运算，如 (~a) C# 中。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsTrue">
      <summary>一个 true 条件值。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsFalse">
      <summary>一个 false 条件值。</summary>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionVisitor">
      <summary>表示表达式树的访问者或重写者。</summary>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpression">
      <summary>表示无条件跳转。 这包括返回语句，break 和 continue 语句以及其他跳转。</summary>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpressionKind">
      <summary>指定内容类型的跳转这 <see cref="T:System.Linq.Expressions.GotoExpression" /> 表示。</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Goto">
      <summary>一个 <see cref="T:System.Linq.Expressions.GotoExpression" /> 表示跳转到某个位置。</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Return">
      <summary>一个 <see cref="T:System.Linq.Expressions.GotoExpression" /> 表示 return 语句。</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Break">
      <summary>一个 <see cref="T:System.Linq.Expressions.GotoExpression" /> 表示 break 语句。</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Continue">
      <summary>一个 <see cref="T:System.Linq.Expressions.GotoExpression" /> 表示 continue 语句。</summary>
    </member>
    <member name="T:System.Linq.Expressions.IArgumentProvider">
      <summary>提供用于访问多个树节点（DynamicExpression、ElementInit、MethodCallExpression、InvocationExpression、NewExpression 和 InexExpression）的参数的内部接口。  不应使用此 API。  它只会由于 DLL 重构而公开并仅用于内部性能优化。这能够实现两次优化，从而减少了表达式树的大小。  第一次优化可以使树节点保留在 IList &lt;T&gt; 上而不是 ReadOnlyCollection 上。  IList&lt;T&gt; 将节约用在为每个节点分配 ReadOnlyCollection 方面的成本。  第二次优化能够创建专用的子类，可保留特定数量的参数（例如，Block2、Block3、Block4）。  因此，这些节点避免了分配用于存储其元素的 ReadOnlyCollection 和数组，从而为每个节点节省了 32 个字节。表达式树节点继续公开 ReadOnlyCollections 的原始 LINQ 属性。  这些节点通过重复使用用于存储数组或元素（通常存储在数组中）的字段来执行此操作。对于数组用例，集合将类型化为 IList&lt;T&gt;，而不是 ReadOnlyCollection&lt;T&gt;。  当节点在最初构造时它是一个数组。  当编译器访问成员时它会使用此接口。  访问数组元素可以将数组升级到 ReadOnlyCollection。对于对象用例，我们会存储类型化为对象的字段中的第一个参数。  当最初构造该节点时，该字段将持有该表达式。  编译器通过此接口访问参数，第一个参数的访问器使用 Expression.ReturnObject 返回用于处理表达式或 ReadOnlyCollection 用例的对象。  当用户访问 ReadOnlyCollection 时，将更新对象字段以直接保留 ReadOnlyCollection。表达式始终返回相同的 ReadOnlyCollection，这一点很重要。  否则，将中断重写树查看器。  从 LINQ v1 返回不同的 ReadOnlyCollections 形成相同的表达式节点，这是一个重大突破。  当前用户可以依赖对象标识来区分该节点是否已更改。  在重载字段中存储 ReadOnlyCollection 既可减少内存使用量，又可保持公共 API 兼容性。</summary>
    </member>
    <member name="T:System.Linq.Expressions.IDynamicExpression">
      <summary>提供用于访问 DynamicExpression 树节点的参数及 CallSite 和重写功能的内部接口。  不应使用此 API。  由于 DLL 重构，它只能是公共的；并且仅用于内部性能优化。</summary>
    </member>
    <member name="T:System.Linq.Expressions.IndexExpression">
      <summary>表示对一个属性或数组进行索引。</summary>
    </member>
    <member name="T:System.Linq.Expressions.InvocationExpression">
      <summary>表示一个将委托或 lambda 表达式应用到一个参数表达式列表的表达式。</summary>
    </member>
    <member name="T:System.Linq.Expressions.LabelExpression">
      <summary>表示一个标签，可以放置在任何 <see cref="T:System.Linq.Expressions.Expression" /> 上下文。 如果它跳转到，它会提供相应的值 <see cref="T:System.Linq.Expressions.GotoExpression" />。 否则，它接收中的值 <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" />。 如果 <see cref="T:System.Type" /> 等于 System.Void，则应提供任何值。</summary>
    </member>
    <member name="T:System.Linq.Expressions.LabelTarget">
      <summary>用来表示目标的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
    </member>
    <member name="T:System.Linq.Expressions.LambdaExpression">
      <summary>介绍 lambda 表达式。 它捕获一个类似于 .NET 方法主体的代码块。</summary>
    </member>
    <member name="T:System.Linq.Expressions.ListInitExpression">
      <summary>表示具有集合初始值设定项的构造函数调用。</summary>
    </member>
    <member name="T:System.Linq.Expressions.LoopExpression">
      <summary>表示无限循环。 可通过“中断”退出该循环。</summary>
    </member>
    <member name="T:System.Linq.Expressions.MemberAssignment">
      <summary>表示对象的字段或属性的赋值操作。</summary>
    </member>
    <member name="T:System.Linq.Expressions.MemberBinding">
      <summary>提供表示绑定的类派生自的基类，这些绑定用于对新创建对象的成员进行初始化。</summary>
    </member>
    <member name="T:System.Linq.Expressions.MemberBindingType">
      <summary>描述中使用的绑定类型 <see cref="T:System.Linq.Expressions.MemberInitExpression" /> 对象。</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.Assignment">
      <summary>一个绑定，它表示正在初始化表达式的值的成员。</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.MemberBinding">
      <summary>一个绑定，它表示递归初始化某个成员的成员。</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.ListBinding">
      <summary>一个绑定，它表示正在初始化的类型成员 <see cref="T:System.Collections.IList" /> 或 <see cref="T:System.Collections.Generic.ICollection`1" /> 从元素的列表。</summary>
    </member>
    <member name="T:System.Linq.Expressions.MemberExpression">
      <summary>表示访问字段或属性。</summary>
    </member>
    <member name="T:System.Linq.Expressions.MemberInitExpression">
      <summary>表示调用构造函数并初始化新对象的一个或多个成员。</summary>
    </member>
    <member name="T:System.Linq.Expressions.MemberListBinding">
      <summary>表示初始化新创建对象的一个集合成员的元素。</summary>
    </member>
    <member name="T:System.Linq.Expressions.MemberMemberBinding">
      <summary>表示初始化新创建对象的一个成员的成员。</summary>
    </member>
    <member name="T:System.Linq.Expressions.MethodCallExpression">
      <summary>表示对静态方法或实例方法的调用。</summary>
    </member>
    <member name="T:System.Linq.Expressions.NewArrayExpression">
      <summary>表示创建一个新数组，并可能初始化该新数组的元素。</summary>
    </member>
    <member name="T:System.Linq.Expressions.NewExpression">
      <summary>表示一个构造函数调用。</summary>
    </member>
    <member name="T:System.Linq.Expressions.ParameterExpression">
      <summary>表示一个命名的参数表达式。</summary>
    </member>
    <member name="T:System.Linq.Expressions.RuntimeVariablesExpression">
      <summary>一个表达式，提供变量的运行时读/写权限。</summary>
    </member>
    <member name="T:System.Linq.Expressions.SwitchCase">
      <summary>表示的一种情况 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</summary>
    </member>
    <member name="T:System.Linq.Expressions.SwitchExpression">
      <summary>表示通过将控制权传递给处理多个选择的控件表达式 <see cref="T:System.Linq.Expressions.SwitchCase" />。</summary>
    </member>
    <member name="T:System.Linq.Expressions.SymbolDocumentInfo">
      <summary>存储用于发出源文件调试符号信息所必要的信息，尤其是文件名和唯一的语言标识符。</summary>
    </member>
    <member name="T:System.Linq.Expressions.TryExpression">
      <summary>表示一个 try/catch/finally/fault 块。</summary>
    </member>
    <member name="T:System.Linq.Expressions.TypeBinaryExpression">
      <summary>表示表达式和类型之间的操作。</summary>
    </member>
    <member name="T:System.Linq.Expressions.UnaryExpression">
      <summary>表示具有一元运算符的表达式。</summary>
    </member>
    <member name="T:System.Linq.IGrouping`2">
      <summary>表示具有公共键的对象的集合。</summary>
      <typeparam name="TKey">键的类型 <see cref="T:System.Linq.IGrouping`2" />。</typeparam>
      <typeparam name="TElement">中的值的类型 <see cref="T:System.Linq.IGrouping`2" />。</typeparam>
    </member>
    <member name="T:System.Linq.ILookup`2">
      <summary>定义索引器、 大小属性，并将键映射到的数据结构的布尔搜索方法 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 值的序列。</summary>
      <typeparam name="TKey">中的键的类型 <see cref="T:System.Linq.ILookup`2" />。</typeparam>
      <typeparam name="TElement">中的元素的类型 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列中的值构成 <see cref="T:System.Linq.ILookup`2" />。</typeparam>
    </member>
    <member name="T:System.Linq.IOrderedEnumerable`1">
      <summary>表示一个排序的序列。</summary>
      <typeparam name="TElement">对序列中的元素的类型。</typeparam>
    </member>
    <member name="T:System.Linq.IOrderedQueryable">
      <summary>表示排序操作的结果。</summary>
    </member>
    <member name="T:System.Linq.IOrderedQueryable`1">
      <summary>表示排序操作的结果。</summary>
      <typeparam name="T">数据源的内容类型。</typeparam>
    </member>
    <member name="T:System.Linq.IQueryable">
      <summary>提供针对特定数据源（其中数据类型未指定）评估查询的功能。</summary>
    </member>
    <member name="T:System.Linq.IQueryable`1">
      <summary>提供针对特定数据源（其中数据类型未未知）评估查询的功能。</summary>
      <typeparam name="T">数据源中数据的类型。</typeparam>
    </member>
    <member name="T:System.Linq.IQueryProvider">
      <summary>定义用于创建和执行查询所描述的方法 <see cref="T:System.Linq.IQueryable" /> 对象。</summary>
    </member>
    <member name="T:System.Linq.Lookup`2">
      <summary>表示键的集合，其中每个键映射到一个或多个值。</summary>
      <typeparam name="TKey">中的键的类型 <see cref="T:System.Linq.Lookup`2" />。</typeparam>
      <typeparam name="TElement">每个元素的类型 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 中的值 <see cref="T:System.Linq.Lookup`2" />。</typeparam>
    </member>
    <member name="T:System.Linq.OrderedParallelQuery`1">
      <summary>表示一个排序的并行序列。</summary>
      <typeparam name="TSource">源集合中元素的类型。</typeparam>
    </member>
    <member name="T:System.Linq.ParallelEnumerable">
      <summary>提供一组用于查询实现 ParallelQuery{TSource} 的对象的方法。 此命令的并行等效 <see cref="T:System.Linq.Enumerable" />。</summary>
    </member>
    <member name="T:System.Linq.ParallelExecutionMode">
      <summary>查询执行模式是一个提示，指定在对查询进行并行化时系统应如何处理性能权衡。</summary>
    </member>
    <member name="F:System.Linq.ParallelExecutionMode.Default">
      <summary>此设置为默认设置。 PLINQ 将检查查询的结构和只能并行查询如果将可能会导致加速。 如果查询结构指示该加速且不太可能获得，PLINQ 将为普通 LINQ to Objects 查询执行查询。</summary>
    </member>
    <member name="F:System.Linq.ParallelExecutionMode.ForceParallelism">
      <summary>并行化整个查询，即使这意味着使用高开销的算法。 在您知道，并行执行的查询将导致加速，但在默认模式下的 PLINQ 将按顺序执行它的情况下使用此标志。</summary>
    </member>
    <member name="T:System.Linq.ParallelMergeOptions">
      <summary>指定首选的类型 输出合并 要在查询中使用。 换而言之，它指示 PLINQ 应如何将来自各个分区的结果合并回单个结果序列。 这只是一个提示，并且在对所有查询进行并行化时系统可能不会遵循此提示。</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.Default">
      <summary>使用默认合并类型，即 AutoBuffered。</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.NotBuffered">
      <summary>使用合并而无需输出缓冲区。 计算结果元素时，就立即使该元素可供查询的使用者。</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.AutoBuffered">
      <summary>利用系统所选择的大小的输出缓冲区进行合并。 它们可供查询的使用者之前，结果将累计到输出缓冲区。</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.FullyBuffered">
      <summary>利用其中包含完整的输出的缓冲区进行合并。 系统将累积的所有结果之前使其中的任何可供查询的使用者。</summary>
    </member>
    <member name="T:System.Linq.ParallelQuery">
      <summary>表示一个并行序列。</summary>
    </member>
    <member name="T:System.Linq.ParallelQuery`1">
      <summary>表示一个并行序列。</summary>
      <typeparam name="TSource">源序列中的元素的类型。</typeparam>
    </member>
    <member name="T:System.Linq.Queryable">
      <summary>提供了一套 static (Shared 在 Visual Basic 中) 方法来查询数据结构，并实现 <see cref="T:System.Linq.IQueryable`1" />。</summary>
    </member>
    <member name="T:System.Management.Instrumentation.InstanceNotFoundException">
      <summary>提供程序未不返回任何实例，指示所引发的异常。</summary>
    </member>
    <member name="T:System.Management.Instrumentation.InstrumentationBaseException">
      <summary>表示与提供程序相关的基础异常。</summary>
    </member>
    <member name="T:System.Management.Instrumentation.InstrumentationException">
      <summary>表示与提供程序相关的异常。</summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementBindAttribute">
      <summary>ManagementBind 属性指示一种方法用于返回与特定的密钥值相关联的 WMI 类的实例。</summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementCommitAttribute">
      <summary>ManagementCommit 特性标记需要更新的一组读 / 写属性在一次，原子操作时调用的方法。</summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementConfigurationAttribute">
      <summary>ManagementConfiguration 属性指示的属性或字段表示读写 WMI 属性。</summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementConfigurationType">
      <summary>表示读/写属性的可能的提交行为。 它用作参数的值 <see cref="T:System.Management.Instrumentation.ManagementConfigurationAttribute" /> 属性。</summary>
    </member>
    <member name="F:System.Management.Instrumentation.ManagementConfigurationType.Apply">
      <summary>仅当调用提交时，设置的值将会生效。</summary>
    </member>
    <member name="F:System.Management.Instrumentation.ManagementConfigurationType.OnCommit">
      <summary>设置的值会立即应用。</summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementCreateAttribute">
      <summary>ManagementCreateAttribute 用于指示一种方法创建的受管实体的新实例。</summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementEntityAttribute">
      <summary>ManagementEntity 属性指示某个类提供通过 WMI 提供程序公开的管理信息。</summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementEnumeratorAttribute">
      <summary>ManagementEnumerator 特性标记返回 WMI 类的所有实例的方法。</summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementHostingModel">
      <summary>定义提供程序指定的承载模型的值。</summary>
    </member>
    <member name="F:System.Management.Instrumentation.ManagementHostingModel.Decoupled">
      <summary>激活分离式提供程序的访问接口。</summary>
    </member>
    <member name="F:System.Management.Instrumentation.ManagementHostingModel.NetworkService">
      <summary>激活 NetworkService 帐户下运行的提供程序主机进程中的提供程序。</summary>
    </member>
    <member name="F:System.Management.Instrumentation.ManagementHostingModel.LocalService">
      <summary>激活的 LocalService 帐户下运行的提供程序主机进程中的提供程序。</summary>
    </member>
    <member name="F:System.Management.Instrumentation.ManagementHostingModel.LocalSystem">
      <summary>激活用于在本地系统帐户下运行的提供程序宿主进程中的提供程序。</summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementKeyAttribute">
      <summary>ManagementKey 属性标识 WMI 类的键属性。</summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementMemberAttribute">
      <summary>通过 WMI.NET 提供程序扩展框架使用此类。 它是可以应用于成员的所有管理特性的基类。</summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementNameAttribute">
      <summary>ManagementName 属性用于重写通过 WMI 类公开的名称。</summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementNewInstanceAttribute">
      <summary>具有仅运行时功能，而没有架构表示形式的管理特性的基类。 ManagementBindAttribute、 ManagementCreateAttribute 和 ManagementEnumeratorAttribute 的管理属性类都派生自此类。</summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementProbeAttribute">
      <summary>ManagementProbe 属性表示的属性或字段表示只读 WMI 属性。</summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementReferenceAttribute">
      <summary>ManagementReferenceAttribute 将类成员、 属性或方法参数标记为对另一个管理对象或类的引用。</summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementRemoveAttribute">
      <summary>ManagementRemoveAttribute 用于指示方法清理托管实体的实例。</summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementTaskAttribute">
      <summary>ManagementTask 属性表示目标方法实现了 WMI 方法。</summary>
    </member>
    <member name="T:System.Management.Instrumentation.WmiConfigurationAttribute">
      <summary>WmiConfiguration 属性指示程序集包含通过使用 WMI.NET 提供程序扩展模型来实现 WMI 提供程序的代码。 此属性接受的参数可建立实现 WMI 提供程序的高级配置。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite">
      <summary>动态调用站点基类。 此类型用作动态站点目标的参数类型。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite`1">
      <summary>动态站点类型。</summary>
      <typeparam name="T">委托类型。</typeparam>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteBinder">
      <summary>类负责对动态调用站点的动态操作的运行时绑定。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteHelpers">
      <summary>包含 DLR 调用站点的帮助器方法的类。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteOps">
      <summary>创建并缓存绑定规则。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.Closure">
      <summary>表示动态生成的方法的运行时状态。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.DebugInfoGenerator">
      <summary>在表达式目录树中生成调试信息的 lambda 表达式。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.DynamicAttribute">
      <summary>指示使用 <see cref="T:System.Object" /> 成员上应被视为动态调度类型。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ExecutionScope">
      <summary>表示动态生成的方法的运行时状态。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IRuntimeVariables">
      <summary>表示运行时变量的值。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IStrongBox">
      <summary>定义用于访问对象引用的值的属性。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1">
      <summary>只读集合的生成器。</summary>
      <typeparam name="T">集合元素的类型。</typeparam>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuleCache`1">
      <summary>表示运行时绑定规则的缓存。</summary>
      <typeparam name="T">委托类型。</typeparam>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeOps">
      <summary>包含从动态生成的方法调用的帮助器方法。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.StrongBox`1">
      <summary>保存对值的引用。</summary>
      <typeparam name="T">
        <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 引用的值的类型。</typeparam>
    </member>
    <member name="T:System.Runtime.InteropServices.ComAwareEventInfo">
      <summary>允许事件处理程序的后期绑定注册。</summary>
    </member>
    <member name="T:System.Security.Cryptography.AesCng">
      <summary>提供的高级加密标准 (AES) 算法的下一代加密技术 (CNG) 实现。</summary>
    </member>
    <member name="T:System.Security.Cryptography.AesCryptoServiceProvider">
      <summary>执行对称加密和解密使用高级加密标准 (AES) 算法的加密应用程序编程接口 (CAPI) 实现。</summary>
    </member>
    <member name="T:System.Security.Cryptography.AesManaged">
      <summary>提供了高级加密标准 (AES) 对称算法的一种托管的实现。</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngAlgorithm">
      <summary>封装加密算法的名称。</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngAlgorithmGroup">
      <summary>封装加密算法组的名称。</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngExportPolicies">
      <summary>指定密钥的密钥导出策略。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngExportPolicies.None">
      <summary>不建立任何导出策略。 导出密钥允许不受限制。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngExportPolicies.AllowExport">
      <summary>可以多次导出私钥。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngExportPolicies.AllowPlaintextExport">
      <summary>私钥可导出多次以明文形式存储。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngExportPolicies.AllowArchiving">
      <summary>可以用于存档目的的一次导出私钥。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngExportPolicies.AllowPlaintextArchiving">
      <summary>可以一次以纯文本形式导出私钥。</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngKey">
      <summary>定义用于下一代加密技术 (CNG) 对象的密钥核心功能。</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyBlobFormat">
      <summary>指定用于 Microsoft 下一代加密技术 (CNG) 对象的密钥 BLOB 格式。</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyCreationOptions">
      <summary>指定用于密钥创建的选项。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyCreationOptions.None">
      <summary>未不使用任何密钥创建选项。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyCreationOptions.MachineKey">
      <summary>创建计算机范围密钥。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyCreationOptions.OverwriteExistingKey">
      <summary>中的现有密钥在密钥创建过程将被覆盖。</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyCreationParameters">
      <summary>包含密钥创建的高级属性。</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyHandleOpenOptions">
      <summary>指定用于打开密钥句柄的选项。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyHandleOpenOptions.None">
      <summary>正在打开的密钥句柄不指定一个临时密钥。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyHandleOpenOptions.EphemeralKey">
      <summary>正在打开的密钥句柄指定一个临时密钥。</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyOpenOptions">
      <summary>指定用于打开密钥的选项。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyOpenOptions.None">
      <summary>未不指定任何键打开选项。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyOpenOptions.UserKey">
      <summary>如果 <see cref="F:System.Security.Cryptography.CngKeyOpenOptions.MachineKey" /> 值未指定，则转而打开用户密钥。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyOpenOptions.MachineKey">
      <summary>打开计算机范围的密钥。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyOpenOptions.Silent">
      <summary>已取消显示提示 UI。</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyUsages">
      <summary>指定下一代加密技术 (CNG) 密钥可能用于的加密操作。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyUsages.None">
      <summary>没有使用情况将值赋给该密钥。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyUsages.Decryption">
      <summary>密钥可以用于加密和解密。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyUsages.Signing">
      <summary>密钥可用于签名和验证。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyUsages.KeyAgreement">
      <summary>密钥可用于机密协议生成和密钥交换。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyUsages.AllUsages">
      <summary>密钥可用于所有目的。</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngProperty">
      <summary>封装下一代加密技术 (CNG) 密钥或提供程序的属性。</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngPropertyCollection">
      <summary>提供下一代加密技术 (CNG) 属性的强类型集合。</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngPropertyOptions">
      <summary>指定下一代加密技术 (CNG) 密钥属性选项。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngPropertyOptions.None">
      <summary>引用的属性没有任何选项。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngPropertyOptions.CustomProperty">
      <summary>CNG 未指定的属性。 使用此选项以避免与 CNG 属性将来的名称冲突。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngPropertyOptions.Persist">
      <summary>应保留该属性。</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngProvider">
      <summary>封装用于下一代加密技术 (CNG) 对象的密钥存储提供程序 (KSP) 名称。</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngUIPolicy">
      <summary>封装访问受保护密钥时下一代加密技术 (CNG) 所显示用户界面 (UI) 的可选配置参数。</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngUIProtectionLevels">
      <summary>在用户界面 (UI) 提示方案中指定密钥的保护级别。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngUIProtectionLevels.None">
      <summary>没有用户界面访问该密钥时，会显示提示。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngUIProtectionLevels.ProtectKey">
      <summary>一个用户界面将显示第一次密钥访问在进程中的提示。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngUIProtectionLevels.ForceHighProtection">
      <summary>一个用户界面提示每次访问密钥。</summary>
    </member>
    <member name="T:System.Security.Cryptography.DSACng">
      <summary>提供的下一代加密技术 (CNG) 实现的数字签名算法 (DSA)。</summary>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellman">
      <summary>提供一个抽象基类算法实现可以派生自该椭圆曲线 Diffie-hellman (ECDH)。 此类提供一组基本的所有 ECDH 实现必须都支持的操作。</summary>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellmanCng">
      <summary>提供的椭圆曲线 Diffie-hellman (ECDH) 算法的下一代加密技术 (CNG) 实现。 此类用于执行加密操作。</summary>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey">
      <summary>指定与一起使用的椭圆曲线 Diffie-hellman (ECDH) 公钥 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 类。</summary>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction">
      <summary>指定密钥派生函数 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 类将用来将机密协议转换为密钥材料。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash">
      <summary>哈希算法用于生成密钥材料。<see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm" /> 属性指定要使用的算法的名称。 如果未指定的算法名称， <see cref="T:System.Security.Cryptography.SHA256" /> 用作默认算法。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac">
      <summary>基于哈希的消息身份验证代码 (HMAC) 算法用于生成密钥材料。<see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.HmacKey" /> 属性指定要使用的密钥。 必须设置此属性或者或 <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey" /> 属性必须设置为 true; 否则为 <see cref="T:System.Security.Cryptography.CryptographicException" /> 您使用时，将引发 <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac" />。 如果设置这两个属性，则该机密协议用作 HMAC 密钥。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls">
      <summary>传输层安全性 (TLS) 协议用于生成密钥材料。<see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed" /> 和 <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Label" /> 属性必须设置; 否则为 <see cref="T:System.Security.Cryptography.CryptographicException" /> 您使用时，将引发 <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" />。</summary>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellmanPublicKey">
      <summary>提供所有 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> 实现必须从中继承的抽象基类。</summary>
    </member>
    <member name="T:System.Security.Cryptography.ECDsa">
      <summary>提供用于封装椭圆曲线数字签名算法 (ECDSA) 的抽象基类。</summary>
    </member>
    <member name="T:System.Security.Cryptography.ECDsaCng">
      <summary>提供椭圆曲线数字签名算法 (ECDSA) 的下一代加密技术 (CNG) 实现。</summary>
    </member>
    <member name="T:System.Security.Cryptography.ECKeyXmlFormat">
      <summary>定义椭圆曲线密钥的 XML 序列化格式。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050">
      <summary>XML 序列化格式所述 RFC 4050，"为 XML 数字签名使用椭圆曲线签名算法 (ECDSA)"。</summary>
    </member>
    <member name="T:System.Security.Cryptography.ManifestSignatureInformation">
      <summary>提供有关清单签名信息。</summary>
    </member>
    <member name="T:System.Security.Cryptography.ManifestSignatureInformationCollection">
      <summary>表示 <see cref="T:System.Security.Cryptography.ManifestSignatureInformation" /> 对象的只读集合。  </summary>
    </member>
    <member name="T:System.Security.Cryptography.MD5Cng">
      <summary>提供 CNG （下一代加密技术） 实现的 MD5 (消息摘要 5) 128 位哈希算法。</summary>
    </member>
    <member name="T:System.Security.Cryptography.RSACng">
      <summary>提供 RSA 算法的下一代加密技术(CNG)实现。</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA1Cng">
      <summary>提供的下一代加密技术 (CNG) 实现的安全哈希算法 (SHA)。</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA256Cng">
      <summary>提供的下一代加密技术 (CNG) 实现的安全哈希算法 (SHA) 256 位哈希值。</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA256CryptoServiceProvider">
      <summary>定义一个包装对象来访问加密服务提供程序 (CSP) 实现的 <see cref="T:System.Security.Cryptography.SHA256" /> 算法。</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA384Cng">
      <summary>为 384 位哈希值提供的下一代加密技术 (CNG) 实现的安全哈希算法 (SHA)。</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA384CryptoServiceProvider">
      <summary>定义一个包装对象来访问加密服务提供程序 (CSP) 实现的 <see cref="T:System.Security.Cryptography.SHA384" /> 算法。</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA512Cng">
      <summary>为 512 位哈希值提供的下一代加密技术 (CNG) 实现的安全哈希算法 (SHA)。</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA512CryptoServiceProvider">
      <summary>定义一个包装对象来访问加密服务提供程序 (CSP) 实现的 <see cref="T:System.Security.Cryptography.SHA512" /> 算法。</summary>
    </member>
    <member name="T:System.Security.Cryptography.SignatureVerificationResult">
      <summary>指定用于签名验证的结果代码的大多数。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.Valid">
      <summary>证书验证结果无效。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.AssemblyIdentityMismatch">
      <summary>/Asm:assembly 中指定的程序集的标识 / 清单的 asm:assemblyIdentity 节点中 /asm:assembly 中的验证码签名的程序集的标识不匹配 / ds:signature / ds:KeyInfo / msrel:RelData / r ︰ 许可证 / r ︰ 授予 / 作为 ︰ ManifestInformation/作为 ︰ assemblyIdentity 节点。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.ContainingSignatureInvalid">
      <summary>中不会验证强名称签名 <see cref="T:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation" /> 对象。 由于强名称签名包装验证码签名，有人可能将替换为其选择的签名验证码签名。 若要避免此情形，如果强名称不会验证因为替换强名称签名的一部分将不对其进行验证，则返回此错误代码。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.PublicKeyTokenMismatch">
      <summary>从清单中 /asm:assembly 标识的公钥标记 / asm:AssemblyIdentity 节点与用于对清单进行签名的密钥的公钥标记不匹配。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.PublisherMismatch">
      <summary>发布者名称从 /asm:assembly / asmv2:publisherIdentity 与签名证书的使用者名称不匹配，或从同一 publisherIdentity 节点的颁发者密钥哈希与签名证书的密钥哈希不匹配。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.SystemError">
      <summary>验证信任关系时出现系统级错误。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidSignerCertificate">
      <summary>消息的签名者的证书是无效或找不到。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidCountersignature">
      <summary>其中一个计数器签名无效。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidCertificateSignature">
      <summary>无法验证证书的签名。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidTimestamp">
      <summary>时间戳签名或证书无法验证或格式不正确。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.BadDigest">
      <summary>该对象的数字签名未验证。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.BasicConstraintsNotObserved">
      <summary>尚未观察到证书的基本约束扩展。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.UnknownTrustProvider">
      <summary>该证书具有未知的信任提供程序。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.UnknownVerificationAction">
      <summary>该证书具有未知的验证操作。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.BadSignatureFormat">
      <summary>签名格式无效。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CertificateNotExplicitlyTrusted">
      <summary>显式不受信任证书。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.MissingSignature">
      <summary>找不到签名。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CertificateExpired">
      <summary>证书已过期。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidTimePeriodNesting">
      <summary>即将颁发的证书过期后，已颁发的证书。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidCertificateRole">
      <summary>该证书具有无效的角色。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.PathLengthConstraintViolated">
      <summary>违反了证书链中的路径长度限制。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.UnknownCriticalExtension">
      <summary>证书包含标记为关键的未知的扩展名。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CertificateUsageNotAllowed">
      <summary>证书不能用于签名和验证。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.IssuerChainingError">
      <summary>给定证书的父证书没有颁发此子证书。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CertificateMalformed">
      <summary>证书缺失或具有重要的字段中，如主题或颁发者名称为空值。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.UntrustedRootCertificate">
      <summary>不受信任的根证书。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CouldNotBuildChain">
      <summary>无法生成该链。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.GenericTrustFailure">
      <summary>没有与该证书的一般信任失败。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CertificateRevoked">
      <summary>该证书已被吊销。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.UntrustedTestRootCertificate">
      <summary>测试根证书不受信任。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.RevocationCheckFailure">
      <summary>吊销检查失败。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidCertificateUsage">
      <summary>该证书具有用法无效。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CertificateExplicitlyDistrusted">
      <summary>该证书已被显式标记为不受信任的用户。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.UntrustedCertificationAuthority">
      <summary>证书链已正确处理，但其中一个 CA 证书不受策略提供程序。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidCertificatePolicy">
      <summary>该证书具有无效的策略。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidCertificateName">
      <summary>该证书具有无效的名称。 名称或者未包含在允许列表或已被明确排除。</summary>
    </member>
    <member name="T:System.Security.Cryptography.StrongNameSignatureInformation">
      <summary>包含清单的强名称签名信息。</summary>
    </member>
    <member name="T:System.Security.Cryptography.TripleDESCng">
      <summary>提供三重数据加密标准 (3DES) 算法的下一代加密技术 (CNG) 实现。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation">
      <summary>清单提供有关验证码签名信息。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.DSACertificateExtensions">
      <summary>提供用于检索的扩展方法 <see cref="T:System.Security.Cryptography.DSA" /> 实现的公钥和私钥键 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions">
      <summary>提供用于对 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 证书的公钥和私钥的 <see cref="T:System.Security.Cryptography.ECDsa" /> 实现进行检索的扩展方法。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.RSACertificateExtensions">
      <summary>提供用于对 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 的公钥和私钥的 <see cref="T:System.Security.Cryptography.RSA" /> 实现进行检索的扩展方法。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.TimestampInformation">
      <summary>提供有关已应用于验证码签名清单的时间戳的详细信息。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.TrustStatus">
      <summary>用于确定分配给为清单签名的可信赖性级别。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.TrustStatus.Untrusted">
      <summary>通过明确不可信的发布服务器上创建了签名。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.TrustStatus.UnknownIdentity">
      <summary>标识未知，该签名无效。 由于没有签名未经验证，因此不能确定的标识。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.TrustStatus.KnownIdentity">
      <summary>该标识已知，并且该签名有效。 有效的 Authenticode 签名提供标识。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.TrustStatus.Trusted">
      <summary>签名有效，且由明确信任的发布服务器。</summary>
    </member>
    <member name="T:System.Security.ManifestKinds">
      <summary>表示清单的签名信息适用于类型。</summary>
    </member>
    <member name="F:System.Security.ManifestKinds.None">
      <summary>该清单不属于任何特定类型。</summary>
    </member>
    <member name="F:System.Security.ManifestKinds.Deployment">
      <summary>清单仅适用于部署。</summary>
    </member>
    <member name="F:System.Security.ManifestKinds.Application">
      <summary>该清单适用于应用程序。</summary>
    </member>
    <member name="F:System.Security.ManifestKinds.ApplicationAndDeployment">
      <summary>该清单适用于部署和应用程序。 是用于验证签名的默认值。</summary>
    </member>
    <member name="T:System.Threading.LockRecursionPolicy">
      <summary>指定同一个线程是否可以多次进入一个锁定状态。</summary>
    </member>
    <member name="F:System.Threading.LockRecursionPolicy.NoRecursion">
      <summary>如果线程尝试锁定以递归方式进入，则将引发异常。 当此设置生效，一些类可能会允许特定的递归方式。</summary>
    </member>
    <member name="F:System.Threading.LockRecursionPolicy.SupportsRecursion">
      <summary>一个线程可以输入锁以递归方式。 一些类可能会限制这一功能。</summary>
    </member>
    <member name="T:System.Threading.ReaderWriterLockSlim">
      <summary>表示用于管理资源访问的锁定状态，可实现多线程读取或进行独占式写入访问。</summary>
    </member>
    <member name="T:System.Threading.Tasks.TaskExtensions">
      <summary>提供了一套用于处理特定类型的静态 (在 Visual Basic 中的为 Shared) 方法的 <see cref="T:System.Threading.Tasks.Task" /> 实例。</summary>
    </member>
  </members>
</doc>