<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.IdentityModel.Services</name>
  </assembly>
  <members>
    <member name="E:System.IdentityModel.Services.FederatedAuthentication.FederationConfigurationCreated">
      <summary>发生时 <see cref="P:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration" /> 由其中一个 web 应用程序中的 HTTP 模块第一次访问属性。</summary>
    </member>
    <member name="E:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated">
      <summary>当创建会话安全令牌时出现。</summary>
    </member>
    <member name="E:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived">
      <summary>已从 cookie 读取会话安全令牌时发生。</summary>
    </member>
    <member name="E:System.IdentityModel.Services.SessionAuthenticationModule.SignedOut">
      <summary>在用户注销后发生。</summary>
    </member>
    <member name="E:System.IdentityModel.Services.SessionAuthenticationModule.SigningOut">
      <summary>在删除登录会话前发生。</summary>
    </member>
    <member name="E:System.IdentityModel.Services.SessionAuthenticationModule.SignOutError">
      <summary>在注销时出现错误时发生。</summary>
    </member>
    <member name="E:System.IdentityModel.Services.WSFederationAuthenticationModule.AuthorizationFailed">
      <summary>该模块确定是否它应将用户重定向到已配置的颁发者进行身份验证时发生。</summary>
    </member>
    <member name="E:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider">
      <summary>该模块会将用户重定向到标识提供程序时发生。</summary>
    </member>
    <member name="E:System.IdentityModel.Services.WSFederationAuthenticationModule.SecurityTokenReceived">
      <summary>当收到了来自安全令牌服务 (STS) 的安全令牌时出现。</summary>
    </member>
    <member name="E:System.IdentityModel.Services.WSFederationAuthenticationModule.SecurityTokenValidated">
      <summary>之后来自安全令牌服务 (STS) 的安全令牌已经过验证且会话安全令牌在创建前发生。</summary>
    </member>
    <member name="E:System.IdentityModel.Services.WSFederationAuthenticationModule.SessionSecurityTokenCreated">
      <summary>当从安全令牌从安全令牌服务 (STS) 接收到已创建的会话安全令牌时出现。</summary>
    </member>
    <member name="E:System.IdentityModel.Services.WSFederationAuthenticationModule.SignedIn">
      <summary>在用户登录后发生。</summary>
    </member>
    <member name="E:System.IdentityModel.Services.WSFederationAuthenticationModule.SignedOut">
      <summary>在删除期间注销会话后发生。</summary>
    </member>
    <member name="E:System.IdentityModel.Services.WSFederationAuthenticationModule.SignInError">
      <summary>在登录期间出现的错误发生时引发。</summary>
    </member>
    <member name="E:System.IdentityModel.Services.WSFederationAuthenticationModule.SigningOut">
      <summary>在删除该会话在注销前发生。</summary>
    </member>
    <member name="E:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOutError">
      <summary>当注销过程中发生错误时引发。</summary>
    </member>
    <member name="F:System.IdentityModel.Services.ChunkedCookieHandler.DefaultChunkSize">
      <summary>默认区块的大小为 2000年个字符。</summary>
    </member>
    <member name="F:System.IdentityModel.Services.ChunkedCookieHandler.MinimumChunkSize">
      <summary>最小的块大小为 1000年个字符。</summary>
    </member>
    <member name="F:System.IdentityModel.Services.Configuration.FederationConfiguration.DefaultFederationConfigurationName">
      <summary>定义默认值的名称 &lt;federationConfiguration&gt; 元素应从其加载设置。 未命名的默认元素原样，这是一个空字符串。</summary>
    </member>
    <member name="F:System.IdentityModel.Services.Configuration.SystemIdentityModelServicesSection.SectionName">
      <summary>一个常数，用于定义名称的配置部分中;"system.identityModel.services"。</summary>
    </member>
    <member name="F:System.IdentityModel.Services.Configuration.WsFederationConfiguration.DefaultFreshness">
      <summary>一个常量，它包含的默认值为 <see cref="P:System.IdentityModel.Services.Configuration.WsFederationConfiguration.Freshness" /> 属性; 为零。</summary>
    </member>
    <member name="F:System.IdentityModel.Services.Configuration.WsFederationConfiguration.DefaultMaxArrayLength">
      <summary>一个常量，它设置为默认值 <see cref="P:System.Xml.XmlDictionaryReaderQuotas.MaxArrayLength" /> 属性所引用的 XML 字典读取器配额对象 <see cref="P:System.IdentityModel.Services.Configuration.WsFederationConfiguration.XmlDictionaryReaderQuotas" /> 属性。</summary>
    </member>
    <member name="F:System.IdentityModel.Services.Configuration.WsFederationConfiguration.DefaultMaxStringContentLength">
      <summary>一个常量，它设置为默认值 <see cref="P:System.Xml.XmlDictionaryReaderQuotas.MaxStringContentLength" /> 属性所引用的 XML 字典读取器配额对象 <see cref="P:System.IdentityModel.Services.Configuration.WsFederationConfiguration.XmlDictionaryReaderQuotas" /> 属性。</summary>
    </member>
    <member name="F:System.IdentityModel.Services.Configuration.WsFederationConfiguration.DefaultPassiveRedirectEnabled">
      <summary>一个常量，它包含的默认值为 <see cref="P:System.IdentityModel.Services.Configuration.WsFederationConfiguration.PassiveRedirectEnabled" /> 属性; true, 、 被动式启用重定向。</summary>
    </member>
    <member name="F:System.IdentityModel.Services.Configuration.WsFederationConfiguration.DefaultPersistentCookiesOnPassiveRedirects">
      <summary>一个常量，它包含的默认值为 <see cref="P:System.IdentityModel.Services.Configuration.WsFederationConfiguration.PersistentCookiesOnPassiveRedirects" /> 属性; false, ，未启用 cookie。</summary>
    </member>
    <member name="F:System.IdentityModel.Services.Configuration.WsFederationConfiguration.DefaultRequireHttps">
      <summary>一个常量，它包含的默认值为 <see cref="P:System.IdentityModel.Services.Configuration.WsFederationConfiguration.RequireHttps" /> 属性; true, ，在重定向需要 HTTPS。</summary>
    </member>
    <member name="M:System.IdentityModel.Services.AsynchronousOperationException.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Services.AsynchronousOperationException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Services.AsynchronousOperationException.#ctor(System.Exception)">
      <summary>新实例初始化 <see cref="T:System.IdentityModel.Services.AsynchronousOperationException" /> 使用系统提供的错误消息和对导致此异常的内部异常的引用。</summary>
      <param name="innerException">
        <see cref="T:System.Exception" /> 导致当前异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="M:System.IdentityModel.Services.AsynchronousOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.IdentityModel.Services.AsynchronousOperationException" /> 类的新实例。</summary>
      <param name="info">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，其中包含序列化的对象数据。</param>
      <param name="context">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，其中包含有关源或目标的上下文信息。</param>
    </member>
    <member name="M:System.IdentityModel.Services.AsynchronousOperationException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.IdentityModel.Services.AsynchronousOperationException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
    </member>
    <member name="M:System.IdentityModel.Services.AsynchronousOperationException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IdentityModel.Services.AsynchronousOperationException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">
        <see cref="T:System.Exception" /> 导致当前异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="M:System.IdentityModel.Services.AttributeRequestMessage.#ctor(System.Uri)">
      <summary>新实例初始化 <see cref="T:System.IdentityModel.Services.AttributeRequestMessage" /> 类具有指定的基 URL。</summary>
      <param name="baseUrl">此消息适用的基 URL。</param>
    </member>
    <member name="M:System.IdentityModel.Services.AttributeRequestMessage.Validate">
      <summary>由框架不执行任何验证。 此类的用户应从外部验证。</summary>
    </member>
    <member name="M:System.IdentityModel.Services.AttributeRequestMessage.Write(System.IO.TextWriter)">
      <summary>查询字符串形式将消息写入指定的文本编写器。</summary>
      <param name="writer">要向其写入消息编写器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.AuthorizationFailedEventArgs.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Services.AuthorizationFailedEventArgs" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Services.ChunkedCookieHandler.#ctor">
      <summary>新实例初始化 <see cref="T:System.IdentityModel.Services.ChunkedCookieHandler" /> 类，该类使用默认块区大小。</summary>
    </member>
    <member name="M:System.IdentityModel.Services.ChunkedCookieHandler.#ctor(System.Int32)">
      <summary>新实例初始化 <see cref="T:System.IdentityModel.Services.ChunkedCookieHandler" /> 类，该类使用指定的块大小。</summary>
      <param name="chunkSize">将用于写入 cookie 区块的大小。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="chunkSize" />小于最小块区大小为 1000年 (<see cref="F:System.IdentityModel.Services.ChunkedCookieHandler.MinimumChunkSize" />)。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.ChunkedCookieHandlerElement.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Services.ChunkedCookieHandlerElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Services.ClaimsAuthorizationModule.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Services.ClaimsAuthorizationModule" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Services.ClaimsAuthorizationModule.Authorize">
      <summary>返回一个值，该值指示是否为当前请求授权请求程序 （主体）。</summary>
      <returns>true 如果授权主体;，否则为 false。 默认值是 true 如果没有声明的身份验证管理器与此模块相关联。</returns>
      <exception cref="T:System.UnauthorizedAccessException">
        <see cref="T:System.Security.Claims.ClaimsPrincipal" /> 与未授权请求。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.ClaimsAuthorizationModule.Dispose">
      <summary>释放由模块使用的资源 （内存除外）。</summary>
    </member>
    <member name="M:System.IdentityModel.Services.ClaimsAuthorizationModule.InitializeModule(System.Web.HttpApplication)">
      <summary>初始化工作模块并准备处理来自事件及其 ASP.NET 应用程序对象。</summary>
      <param name="context">包含此模块的应用程序对象。</param>
      <exception cref="">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.ClaimsAuthorizationModule.InitializePropertiesFromConfiguration">
      <summary>初始化基于配置文件中定义的模块属性。</summary>
    </member>
    <member name="M:System.IdentityModel.Services.ClaimsAuthorizationModule.OnAuthorizeRequest(System.Object,System.EventArgs)">
      <summary>处理 HTTP 管道 <see cref="E:System.Web.HttpApplication.AuthorizeRequest" /> 事件</summary>
      <param name="sender">事件源。</param>
      <param name="args">事件的数据。</param>
    </member>
    <member name="M:System.IdentityModel.Services.ClaimsPrincipalPermission.#ctor(System.String,System.String)">
      <summary>创建 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> 类的新实例。</summary>
      <param name="resource">应在其授权主体资源。</param>
      <param name="action">应为其授权主体的操作。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="resource" /> 为 null 或空字符串。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess(System.String,System.String)">
      <summary>检查当前的主体有权在指定的资源上执行指定的操作。</summary>
      <param name="resource">应在其授权主体资源。</param>
      <param name="action">应为其授权主体的操作。</param>
      <exception cref="T:System.InvalidOperationException">当前的主体不是从赋值 <see cref="T:System.Security.Claims.ClaimsPrincipal" />。- 或 -有没有 <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> 配置。</exception>
      <exception cref="T:System.Security.SecurityException">授权检查失败。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Copy">
      <summary>返回的当前副本 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> 实例。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> 复制当前实例中。</returns>
    </member>
    <member name="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand">
      <summary>检查是否以与当前实例相关联的资源操作对授权当前主体。</summary>
      <exception cref="T:System.InvalidOperationException">当前的主体不是从赋值 <see cref="T:System.Security.Claims.ClaimsPrincipal" />。- 或 -有没有 <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> 配置。</exception>
      <exception cref="T:System.Security.SecurityException">授权检查失败。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml(System.Security.SecurityElement)">
      <summary>重新构造当前权限和其状态从指定的 XML 编码。</summary>
      <param name="element">用于重新构造权限的 XML 编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">编码包含无法识别的元素或特性或格式不正确的 XML。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect(System.Security.IPermission)">
      <summary>返回的权限，则当前的权限和指定的权限的交集。</summary>
      <param name="target">要与当前权限相交的权限。 它必须是实例 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />。</param>
      <returns>一个新 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> ，它表示当前的权限和指定的权限; 的交集或 null 如果 <paramref name="target" /> 是 <paramref name="null" /> 或者不是实例 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />。</returns>
    </member>
    <member name="M:System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>返回一个值，该值指示当前权限是否为指定权限的子集。</summary>
      <param name="target">要测试子集关系的权限。 它必须是实例 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />。</param>
      <returns>true 如果当前权限是指定的权限; 的子集否则为 false。</returns>
    </member>
    <member name="M:System.IdentityModel.Services.ClaimsPrincipalPermission.IsUnrestricted">
      <summary>返回一个值，该值指示是否不受限制的权限。</summary>
      <returns>true 如果权限不受限制;否则为 false。 始终返回 true ，该值指示权限不受限制。</returns>
    </member>
    <member name="M:System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml">
      <summary>返回 XML 编码形式的当前权限和其状态。</summary>
      <returns>XML 编码形式的当前权限和其状态。</returns>
    </member>
    <member name="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Union(System.Security.IPermission)">
      <summary>返回一个新的权限，是当前的权限和指定的权限的并集。<see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> 具有的当前实例和目标实例中存在的资源操作对所有的对象。</summary>
      <param name="target">要将与当前权限结合起来的权限。 该对象的类型必须是 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />。</param>
      <returns>一个新 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> ，它表示的当前权限和指定的权限; 并集或 null 如果 <paramref name="target" /> 是 <paramref name="null" /> 或者不是实例 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />。</returns>
    </member>
    <member name="M:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>初始化 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute" /> 类的新实例。</summary>
      <param name="action">指定使用声明性安全时，可以执行的安全操作的值之一。</param>
    </member>
    <member name="M:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute.CreatePermission">
      <summary>创建的新实例 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> 取决于当前实例的类。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> 对操作和与此实例关联的资源。</returns>
    </member>
    <member name="M:System.IdentityModel.Services.Configuration.FederationConfiguration.#ctor">
      <summary>新实例初始化 <see cref="T:System.IdentityModel.Services.Configuration.FederationConfiguration" /> 类加载设置从 system.identityModel.services 配置文件节。</summary>
    </member>
    <member name="M:System.IdentityModel.Services.Configuration.FederationConfiguration.#ctor(System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.IdentityModel.Services.Configuration.FederationConfiguration" /> 类根据需要加载设置从 system.identityModel.services 配置文件节。</summary>
      <param name="loadConfig">true 若要初始化，从配置文件，则加载设置 false 初始化为默认值。</param>
      <exception cref="T:System.InvalidOperationException">system.identityModel 在配置文件中未定义配置节。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.Configuration.FederationConfiguration.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.IdentityModel.Services.Configuration.FederationConfiguration" /> 类 &lt;federationConfiguration&gt; 具有指定名称的元素。</summary>
      <param name="federationConfigurationName">名称 &lt;federationConfiguration&gt; 从中加载配置元素。</param>
      <exception cref="T:System.InvalidOperationException">有没有 system.identityModel.services 配置文件中定义的部分。- 或 -有没有 system.identityModel 配置文件中定义的部分。- 或 -有没有 &lt;federationConfiguration&gt; 中具有指定名称的元素 system.identityModel.services 部分。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.Configuration.FederationConfiguration.Initialize">
      <summary>当前实例进行初始化。</summary>
      <exception cref="T:System.InvalidOperationException">当前实例已初始化 ( <see cref="P:System.IdentityModel.Services.Configuration.FederationConfiguration.IsInitialized" /> 属性是 true。)</exception>
    </member>
    <member name="M:System.IdentityModel.Services.Configuration.FederationConfiguration.LoadConfiguration(System.IdentityModel.Services.Configuration.FederationConfigurationElement)">
      <summary>从配置文件中加载的当前实例的属性。 初始化新创建的构造函数调用此方法 <see cref="T:System.IdentityModel.Services.Configuration.FederationConfiguration" /> 从配置设置。</summary>
      <param name="element">&lt;federationConfiguration&gt; 元素加载中的设置。 可以是 null 加载默认值。</param>
    </member>
    <member name="M:System.IdentityModel.Services.Configuration.FederationConfigurationCreatedEventArgs.#ctor(System.IdentityModel.Services.Configuration.FederationConfiguration)">
      <summary>新实例初始化 <see cref="T:System.IdentityModel.Services.Configuration.FederationConfigurationCreatedEventArgs" /> 指定联合身份验证配置对象类。</summary>
      <param name="config">联合身份验证配置对象。 一个 <see cref="T:System.IdentityModel.Services.Configuration.FederationConfiguration" /> 对象包含的可配置属性的 WS 联合身份验证模块 (<see cref="T:System.IdentityModel.Services.WSFederationAuthenticationModule" />) 和会话身份验证模块 (<see cref="T:System.IdentityModel.Services.SessionAuthenticationModule" />) web 应用程序中。</param>
    </member>
    <member name="M:System.IdentityModel.Services.Configuration.FederationConfigurationElement.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Services.Configuration.FederationConfigurationElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Services.Configuration.FederationConfigurationElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Services.Configuration.FederationConfigurationElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Services.Configuration.FederationConfigurationElementCollection.GetElement(System.String)">
      <summary>检索 &lt;federationConfiguration&gt; 具有指定的名称的元素。</summary>
      <param name="name">名称 &lt;federationConfiguration&gt; 要检索元素。</param>
      <returns>&lt;federationConfiguration&gt; 具有指定的名称的元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">未找到的元素具有指定名称。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.Configuration.SystemIdentityModelServicesSection.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Services.Configuration.SystemIdentityModelServicesSection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Services.Configuration.WsFederationConfiguration.#ctor(System.IdentityModel.Services.Configuration.WSFederationElement)">
      <summary>新实例初始化 <see cref="T:System.IdentityModel.Services.Configuration.WsFederationConfiguration" /> 从指定的类 &lt;wsFederation&gt; 元素。</summary>
      <param name="federationElement">&lt;wsFederation&gt; 元素来初始化新实例。</param>
    </member>
    <member name="M:System.IdentityModel.Services.Configuration.WsFederationConfiguration.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.IdentityModel.Services.Configuration.WsFederationConfiguration" /> 类通过使用指定的颁发者和领域。</summary>
      <param name="issuer">一个字符串，其中包含要使用的 WS 联合身份验证模块 (WSFAM) 的颁发者的 URI。</param>
      <param name="realm">一个字符串，包含将由 WSFAM 发出请求的领域的 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="issuer" /> 为 null。- 或 -<paramref name="realm" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.Configuration.WSFederationElement.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Services.Configuration.WSFederationElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Services.CookieHandler.#ctor">
      <summary>从构造函数初始化派生类中调用 <see cref="T:System.IdentityModel.Services.CookieHandler" /> 类。</summary>
    </member>
    <member name="M:System.IdentityModel.Services.CookieHandler.Delete">
      <summary>删除与当前具有默认名称、 域和路径的请求关联的 cookie。</summary>
    </member>
    <member name="M:System.IdentityModel.Services.CookieHandler.Delete(System.String)">
      <summary>删除具有指定的名称的默认域和路径的当前请求关联的 cookie。</summary>
      <param name="name">Cookie 的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null 或空。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.CookieHandler.Delete(System.String,System.String,System.String,System.Web.HttpContext)">
      <summary>删除与指定具有指定的名称、 路径和域的请求关联的 cookie。</summary>
      <param name="name">Cookie 的名称。</param>
      <param name="path">Cookie 的路径。</param>
      <param name="domain">Cookie 的域</param>
      <param name="context">
        <see cref="T:System.Web.HttpContext" /> 请求</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null 或空。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.CookieHandler.Delete(System.String,System.Web.HttpContext)">
      <summary>删除与指定具有指定的名称的默认域和路径的请求关联的 cookie。</summary>
      <param name="name">Cookie 的名称。</param>
      <param name="context">
        <see cref="T:System.Web.HttpContext" /> 请求。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null 或空。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.CookieHandler.Delete(System.Web.HttpContext)">
      <summary>删除与当前具有默认名称、 域和路径的请求关联的 cookie。</summary>
      <param name="context">
        <see cref="T:System.Web.HttpContext" /> 请求。</param>
    </member>
    <member name="M:System.IdentityModel.Services.CookieHandler.DeleteCore(System.String,System.String,System.String,System.Web.HttpContext)">
      <summary>当在派生类中重写，会删除与指定具有指定的名称、 域和路径的请求关联的 cookie。</summary>
      <param name="name">Cookie 名称</param>
      <param name="path">Cookie 的路径</param>
      <param name="domain">Cookie 的域</param>
      <param name="context">
        <see cref="T:System.Web.HttpContext" /> 请求。</param>
    </member>
    <member name="M:System.IdentityModel.Services.CookieHandler.MatchCookiePath(System.Uri,System.Uri)">
      <summary>如果目标域是在 cookie 域内，并且目标路径在 cookie 路径，则匹配 cookie 路径部分的大小写。</summary>
      <param name="baseUri">请求的基 URL。</param>
      <param name="targetUri">要匹配的 URL</param>
      <returns>返回 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.IdentityModel.Services.CookieHandler.Read">
      <summary>读取与当前有一个默认名称的请求关联的 cookie。</summary>
      <returns>Cookie 值或 null 如果找不到该 cookie。</returns>
    </member>
    <member name="M:System.IdentityModel.Services.CookieHandler.Read(System.String)">
      <summary>读取与当前具有指定的名称的请求关联的 cookie。</summary>
      <param name="name">要读取的 cookie 的名称。</param>
      <returns>Cookie 值或 null 如果找不到该 cookie。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 为 null 或空。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.CookieHandler.Read(System.String,System.Web.HttpContext)">
      <summary>读取具有指定的名称的默认域和路径的指定请求关联的 cookie。</summary>
      <param name="name">要读取的 cookie 的名称。</param>
      <param name="context">
        <see cref="T:System.Web.HttpContext" /> 请求。</param>
      <returns>Cookie 值或 null 如果找不到该 cookie。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 为 null 或空。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.CookieHandler.Read(System.Web.HttpContext)">
      <summary>读取与当前具有默认名称、 域和路径的请求关联的 cookie。</summary>
      <param name="context">
        <see cref="T:System.Web.HttpContext" /> 请求。</param>
      <returns>Cookie 值或 null 如果找不到该 cookie。</returns>
    </member>
    <member name="M:System.IdentityModel.Services.CookieHandler.ReadCore(System.String,System.Web.HttpContext)">
      <summary>当在派生类中重写时读取具有指定的名称的 cookie，并指定的请求与该键相关联。</summary>
      <param name="name">Cookie 名称</param>
      <param name="context">
        <see cref="T:System.Web.HttpContext" /> 请求。</param>
      <returns>Cookie 值或 null 如果找不到 cookie</returns>
    </member>
    <member name="M:System.IdentityModel.Services.CookieHandler.Write(System.Byte[],System.Boolean,System.DateTime)">
      <summary>写入具有指定的值、 持久性和过期时间的当前请求关联的 cookie。</summary>
      <param name="value">Cookie 值中。</param>
      <param name="isPersistent">true 如果该 cookie 出现不一致; false 如果 cookie 是只会话，即仅有效期至客户端上的浏览器已关闭。</param>
      <param name="tokenExpirationTime">基础令牌到期时间。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null 或空。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.CookieHandler.Write(System.Byte[],System.String,System.DateTime)">
      <summary>写入具有指定的名称、 值和过期时间的当前请求关联的 cookie。</summary>
      <param name="value">Cookie 值中。</param>
      <param name="name">Cookie 的名称。</param>
      <param name="expirationTime">该 cookie 的到期时间或 <see cref="F:System.DateTime.MinValue" /> 会话 （仅限于会话） cookie 的。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null 或空。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 为 null 或空。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.CookieHandler.Write(System.Byte[],System.String,System.DateTime,System.Web.HttpContext)">
      <summary>写入具有指定的名称、 值和过期时间的指定请求关联的 cookie。</summary>
      <param name="value">Cookie 值中。</param>
      <param name="name">Cookie 的名称。</param>
      <param name="expirationTime">该 cookie 的到期时间或 <see cref="F:System.DateTime.MinValue" /> 会话 （仅限于会话） cookie 的。</param>
      <param name="context">
        <see cref="T:System.Web.HttpContext" /> 请求。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null 或空。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 为 null 或空。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.CookieHandler.Write(System.Byte[],System.String,System.String,System.String,System.DateTime,System.Boolean,System.Boolean,System.Web.HttpContext)">
      <summary>写入具有指定的名称、 值、 域、 路径、 到期时间和可见性指定请求与关联的 cookie。</summary>
      <param name="value">Cookie 值中。</param>
      <param name="name">Cookie 的名称。</param>
      <param name="path">Cookie 的路径</param>
      <param name="domain">Cookie 的域</param>
      <param name="expirationTime">该 cookie 的到期时间或 <see cref="F:System.DateTime.MinValue" /> 会话 （仅限于会话） cookie 的。</param>
      <param name="requiresSsl">true 如果该 cookie 应仅用于通过 SSL 连接;否则为 false。</param>
      <param name="hideFromClientScript">true 如果应从客户端脚本; 隐藏 cookie，否则为 false。</param>
      <param name="context">
        <see cref="T:System.Web.HttpContext" /> 请求。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null 或空。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 为 null 或空。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.CookieHandler.WriteCore(System.Byte[],System.String,System.String,System.String,System.DateTime,System.Boolean,System.Boolean,System.Web.HttpContext)">
      <summary>当在派生类中重写时写入与指定具有指定的名称、 值、 域、 路径、 过期时间、 持久性和可见性的请求关联的 cookie。</summary>
      <param name="value">Cookie 值中。</param>
      <param name="name">Cookie 的名称。</param>
      <param name="path">Cookie 的路径</param>
      <param name="domain">Cookie 的域</param>
      <param name="expirationTime">该 cookie 的到期时间或 <see cref="F:System.DateTime.MinValue" /> 会话 （仅限于会话） cookie 的。</param>
      <param name="secure">true 如果该 cookie 应仅用于通过 SSL 连接;否则为 false。</param>
      <param name="httpOnly">true 如果应从客户端脚本; 隐藏 cookie，否则为 false。</param>
      <param name="context">
        <see cref="T:System.Web.HttpContext" /> 请求。</param>
    </member>
    <member name="M:System.IdentityModel.Services.CookieHandlerElement.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Services.CookieHandlerElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Services.CookieHandlerElement.GetConfiguredCookieHandler">
      <summary>获取新 cookie 处理程序基于配置属性。</summary>
      <returns>Cookie 处理程序。 这将是实例 <see cref="T:System.IdentityModel.Services.CookieHandler" /> 或 <see cref="T:System.IdentityModel.Services.ChunkedCookieHandler" /> 具体取决于处理程序，它由当前实例的属性配置的类型。</returns>
      <exception cref="T:System.Configuration.ConfigurationException">Cookie 处理程序无法创建与当前实例的属性。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.ErrorEventArgs.#ctor(System.Boolean,System.Exception)">
      <summary>新实例初始化 <see cref="T:System.IdentityModel.Services.ErrorEventArgs" /> 类与指定取消状态和异常。</summary>
      <param name="cancel">初始的取消状态中。 设置 <see cref="P:System.ComponentModel.CancelEventArgs.Cancel" /> 属性。</param>
      <param name="exception">发生的异常。 设置 <see cref="P:System.IdentityModel.Services.ErrorEventArgs.Exception" /> 属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.ErrorEventArgs.#ctor(System.Exception)">
      <summary>新实例初始化 <see cref="T:System.IdentityModel.Services.ErrorEventArgs" /> 使用指定的异常类。</summary>
      <param name="exception">发生的异常。 设置 <see cref="P:System.IdentityModel.Services.ErrorEventArgs.Exception" /> 属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.FederatedAuthentication.GetHttpModule``1">
      <summary>获取的指定类型的 web 应用程序正在使用的 HTTP 模块。</summary>
      <typeparam name="T">该模块的类型。</typeparam>
      <returns>指定类型的 HTTP 模块或 null 如果找不到指定类型的模块。</returns>
    </member>
    <member name="M:System.IdentityModel.Services.FederatedAuthenticationSessionEndingException.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Services.FederatedAuthenticationSessionEndingException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Services.FederatedAuthenticationSessionEndingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.IdentityModel.Services.FederatedAuthenticationSessionEndingException" /> 类的新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它保存关于所引发异常的序列化对象数据。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。</param>
    </member>
    <member name="M:System.IdentityModel.Services.FederatedAuthenticationSessionEndingException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.IdentityModel.Services.FederatedAuthenticationSessionEndingException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.IdentityModel.Services.FederatedAuthenticationSessionEndingException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IdentityModel.Services.FederatedAuthenticationSessionEndingException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
      <param name="inner">导致当前异常的异常或 null 如果未不指定任何内部异常。</param>
    </member>
    <member name="M:System.IdentityModel.Services.FederatedPassiveSecurityTokenServiceOperations.ProcessRequest(System.Web.HttpRequest,System.Security.Claims.ClaimsPrincipal,System.IdentityModel.SecurityTokenService,System.Web.HttpResponse)">
      <summary>处理传入的 WS 联合身份验证被动协议请求。</summary>
      <param name="request">传入的 HTTP 请求。</param>
      <param name="principal">与此请求关联的主体。</param>
      <param name="sts">安全令牌服务 (STS) 来使用颁发令牌。</param>
      <param name="response">传出 HTTP 响应。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> 为 null。- 或 -<paramref name="principal" /> 为 null。- 或 -<paramref name="sts" /> 为 null。- 或 -<paramref name="response" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.FederatedPassiveSecurityTokenServiceOperations.ProcessRequest(System.Web.HttpRequest,System.Security.Claims.ClaimsPrincipal,System.IdentityModel.SecurityTokenService,System.Web.HttpResponse,System.IdentityModel.Services.WSFederationSerializer)">
      <summary>通过使用指定的 WS 联合身份验证序列化程序处理传入的 WS 联合身份验证被动协议请求。</summary>
      <param name="request">传入的 HTTP 请求。</param>
      <param name="principal">与此请求关联的主体。</param>
      <param name="sts">安全令牌服务 (STS) 来使用颁发令牌。</param>
      <param name="response">传出 HTTP 响应。</param>
      <param name="federationSerializer">序列化程序，用于 WS 联合身份验证被动协议的消息进行处理。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> 为 null。- 或 -<paramref name="principal" /> 为 null。- 或 -<paramref name="sts" /> 为 null。- 或 -<paramref name="response" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.FederatedPassiveSecurityTokenServiceOperations.ProcessSignInRequest(System.IdentityModel.Services.SignInRequestMessage,System.Security.Claims.ClaimsPrincipal,System.IdentityModel.SecurityTokenService)">
      <summary>处理传入的 WS 联合身份验证被动协议登录请求。</summary>
      <param name="requestMessage">传入登录请求消息。</param>
      <param name="principal">与请求关联的主体。</param>
      <param name="sts">安全令牌服务 (STS) 来使用颁发令牌。</param>
      <returns>在登录响应消息而得出处理请求。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestMessage" /> 为 null。- 或 -<paramref name="principal" /> 为 null。- 或 -<paramref name="sts" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.FederatedPassiveSecurityTokenServiceOperations.ProcessSignInRequest(System.IdentityModel.Services.SignInRequestMessage,System.Security.Claims.ClaimsPrincipal,System.IdentityModel.SecurityTokenService,System.IdentityModel.Services.WSFederationSerializer)">
      <summary>通过使用指定的 WS 联合身份验证序列化程序处理传入的 WS 联合身份验证被动协议登录请求。</summary>
      <param name="requestMessage">传入登录请求消息。</param>
      <param name="principal">与请求关联的主体。</param>
      <param name="sts">安全令牌服务 (STS) 来使用颁发令牌。</param>
      <param name="federationSerializer">序列化程序，用于 WS 联合身份验证被动协议的消息进行处理。</param>
      <returns>在登录响应消息而得出处理请求。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestMessage" /> 为 null。- 或 -<paramref name="principal" /> 为 null。- 或 -<paramref name="sts" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.FederatedPassiveSecurityTokenServiceOperations.ProcessSignInResponse(System.IdentityModel.Services.SignInResponseMessage,System.Web.HttpResponse)">
      <summary>处理登录响应消息。</summary>
      <param name="signInResponseMessage">要处理的登录响应消息。</param>
      <param name="httpResponse">传出 HTTP 响应。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="signInResponseMessage" /> 为 null。- 或 -<paramref name="httpResponse" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.FederatedPassiveSecurityTokenServiceOperations.ProcessSignOutRequest(System.IdentityModel.Services.FederationMessage,System.Security.Claims.ClaimsPrincipal,System.String,System.Web.HttpResponse)">
      <summary>处理传入的 WS 联合身份验证被动协议注销请求。</summary>
      <param name="requestMessage">传入的 WS 联合身份验证消息表示注销请求。 默认情况下，这必须是实例 <see cref="T:System.IdentityModel.Services.SignOutRequestMessage" /> 或 <see cref="T:System.IdentityModel.Services.SignOutCleanupRequestMessage" />。</param>
      <param name="principal">与请求关联的主体。</param>
      <param name="reply">回复 URL 重定向到后注销。</param>
      <param name="httpResponse">传出 HTTP 响应。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="httpRequest" /> 为 null。- 或 -<paramref name="principal" /> 为 null。- 或 -<paramref name="httpResponse" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="httpRequest" /> 不是实例的 <see cref="T:System.IdentityModel.Services.SignOutRequestMessage" /> 或 <see cref="T:System.IdentityModel.Services.SignOutCleanupRequestMessage" />。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.FederatedSessionExpiredException.#ctor">
      <summary>新实例初始化 <see cref="T:System.IdentityModel.Services.FederatedSessionExpiredException" />类。</summary>
    </member>
    <member name="M:System.IdentityModel.Services.FederatedSessionExpiredException.#ctor(System.DateTime,System.DateTime)">
      <summary>新实例初始化 <see cref="T:System.IdentityModel.Services.FederatedSessionExpiredException" /> 类，该类具有指定实时会话已验证，它已过期的时刻。</summary>
      <param name="tested">验证会话的时间。</param>
      <param name="expired">会话过期时间。</param>
    </member>
    <member name="M:System.IdentityModel.Services.FederatedSessionExpiredException.#ctor(System.DateTime,System.DateTime,System.Exception)">
      <summary>新实例初始化 <see cref="T:System.IdentityModel.Services.FederatedSessionExpiredException" /> 类与指定会话已验证的时刻、 会话过期，即时和对导致此异常的内部异常的引用。</summary>
      <param name="tested">会话已验证的时间。</param>
      <param name="expired">会话已过期时间。</param>
      <param name="inner">导致当前异常的异常或 null 如果未不指定任何内部异常。</param>
    </member>
    <member name="M:System.IdentityModel.Services.FederatedSessionExpiredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>新实例初始化 <see cref="T:System.IdentityModel.Services.FederatedSessionExpiredException" />用序列化数据的类。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它保存关于所引发异常的序列化对象数据。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.FederatedSessionExpiredException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.IdentityModel.Services.FederatedSessionExpiredException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
    </member>
    <member name="M:System.IdentityModel.Services.FederatedSessionExpiredException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IdentityModel.Services.FederatedSessionExpiredException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="inner">
        <see cref="T:System.Exception" /> 导致当前异常。 如果 <paramref name="inner" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="M:System.IdentityModel.Services.FederatedSessionExpiredException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>在派生类中重写时，使用有关异常的信息设置 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它保存关于所引发异常的序列化对象数据。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。</param>
    </member>
    <member name="M:System.IdentityModel.Services.FederationException.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Services.FederationException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Services.FederationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.IdentityModel.Services.FederationException" /> 类的新实例。</summary>
      <param name="info">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，其中包含序列化的对象数据。</param>
      <param name="context">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，其中包含有关源或目标的上下文信息。</param>
    </member>
    <member name="M:System.IdentityModel.Services.FederationException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.IdentityModel.Services.FederationException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
    </member>
    <member name="M:System.IdentityModel.Services.FederationException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IdentityModel.Services.FederationException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="inner">
        <see cref="T:System.Exception" /> 导致当前异常。 如果 <paramref name="inner" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="M:System.IdentityModel.Services.FederationManagement.CreateApplicationFederationMetadata(System.Uri,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Collections.ObjectModel.Collection{System.IdentityModel.Metadata.DisplayClaim},System.IdentityModel.Services.ApplicationType,System.Collections.ObjectModel.Collection{System.Uri})">
      <summary>创建一个包含联合元数据的 XML 文档。</summary>
      <param name="applicationUri">应用程序 URI。</param>
      <param name="certificate">要用于对元数据进行签名的 X.509 证书。</param>
      <param name="claimsRequired">由应用程序所需的声明。</param>
      <param name="applicationType">其中一个 <see cref="T:System.IdentityModel.Services.ApplicationType" /> 值，该值指定的元数据描述的应用程序的类型。 这用于确定要创建的终结点。</param>
      <param name="audienceUris">可以使用此应用程序的可接受 Uri 的集合。</param>
      <returns>XML 读取器，其中包含使用参数创建的元数据文档。</returns>
    </member>
    <member name="M:System.IdentityModel.Services.FederationManagement.UpdateIdentityProviderTrustInfo(System.Xml.XmlReader,System.Xml.XmlReader,System.Boolean)">
      <summary>更新指定的应用程序配置中，如果需要，根据指定的联合元数据文档和一个值，指定声明是否提供应更新列表。</summary>
      <param name="metadataReader">XML 读取器包含的元数据文档。</param>
      <param name="inputConfiguration">XML 读取器包含的配置。</param>
      <param name="claimsOfferedUpdate">true 如果声明提供列表应该更新;否则为 false。</param>
      <returns>一个包含更新的配置的 XML 读取器或 null 如果无法更新配置。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="metadataReader" /> 为 null。- 或 -<paramref name="inputConfiguration" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.FederationManagement.UpdateIdentityProviderTrustInfo(System.Xml.XmlReader,System.Xml.XmlReader,System.Boolean,System.IdentityModel.Metadata.MetadataSerializer)">
      <summary>更新指定的应用程序配置中，如果需要，根据指定的联合元数据文档和一个值，指定声明是否提供应更新列表。 此外指定用来读取安全令牌服务 (STS) 元数据的序列化程序。</summary>
      <param name="metadataReader">XML 读取器包含的元数据文档。</param>
      <param name="inputConfiguration">XML 读取器包含的配置。</param>
      <param name="claimsOfferedUpdate">true 如果声明提供列表应该更新;否则为 false。</param>
      <param name="metadataSerializer">用来读取 STS 元数据序列化程序。</param>
      <returns>一个包含更新的配置的 XML 读取器或 null 如果无法更新配置。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="metadataReader" /> 为 null。- 或 -<paramref name="inputConfiguration" /> 为 null。- 或 -<paramref name="metadataSerializer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.FederationManagement.UpdateIdentityProviderTrustInfo(System.Xml.XmlReader,System.Xml.XmlReader,System.Xml.XmlNodeReader@,System.Xml.XmlNodeReader@)">
      <summary>更新指定的应用程序配置中，如果需要，根据指定的联合元数据文档。 返回的配置元素的颁发者名称注册表，以及更新的声明类型列表的配置元素，如果提供已更新。</summary>
      <param name="metadataReader">XML 读取器包含的元数据文档。</param>
      <param name="inputConfiguration">XML 读取器包含的配置。</param>
      <param name="newIssuerNameRegistry">此方法返回时，包含的 XML 节点读取器包含用于指定颁发者名称注册表的元素。null 如果没有为指定没有颁发者名称注册表。 该参数未经初始化即被处理。</param>
      <param name="claimTypesOffered">当此方法返回时，如果已更改的提供的声明类型列表，包含 XML 节点读取器，其中包含指定新的列表的元素。 如果列表没有更改，将返回 null。 该参数未经初始化即被处理。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="metadataReader" /> 为 null。- 或 -<paramref name="inputConfiguration" /><paramref name="metadataReader" /> 是 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.FederationManagement.UpdateIdentityProviderTrustInfo(System.Xml.XmlReader,System.Xml.XmlReader,System.Xml.XmlNodeReader@,System.Xml.XmlNodeReader@,System.IdentityModel.Metadata.MetadataSerializer)">
      <summary>更新指定的应用程序配置中，如果需要，根据指定的联合元数据文档。 返回配置元素的颁发者名称注册表，以及更新的声明类型列表的配置元素，如果提供已更新。 此外指定用来读取安全令牌服务 (STS) 元数据的序列化程序。</summary>
      <param name="metadataReader">XML 读取器包含的元数据文档。</param>
      <param name="inputConfiguration">XML 读取器包含的配置。</param>
      <param name="newIssuerNameRegistry">此方法返回时，包含的 XML 节点读取器包含用于指定颁发者名称注册表的元素。null 如果没有为指定没有颁发者名称注册表。 该参数未经初始化即被处理。</param>
      <param name="claimTypesOffered">当此方法返回时，如果已更改的提供的声明类型列表，包含 XML 节点读取器，其中包含指定新的列表的元素。 如果列表没有更改，将返回 null。 该参数未经初始化即被处理。</param>
      <param name="metadataSerializer">用来读取 STS 元数据序列化程序。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="metadataReader" /> 为 null。- 或 -<paramref name="inputConfiguration" /> 为 null。- 或 -<paramref name="metadataSerializer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.FederationMessage.#ctor(System.Uri)">
      <summary>从构造函数初始化派生类中调用 <see cref="T:System.IdentityModel.Services.FederationMessage" /> 类。</summary>
      <param name="baseUrl">联合身份验证消息应用于基 URL。 初始化 <see cref="P:System.IdentityModel.Services.FederationMessage.BaseUri" /> 属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> 为 null。</exception>
      <exception cref="T:System.IdentityModel.Services.WSFederationMessageException">
        <paramref name="baseUri" /> 不是有效的绝对 URI。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.FederationMessage.GetBaseUrl(System.Uri)">
      <summary>从指定的 URI 中提取的基 URL 的帮助器方法。</summary>
      <param name="uri">要从中提取的基 URL URI。</param>
      <returns>提取基 URL。</returns>
    </member>
    <member name="M:System.IdentityModel.Services.FederationMessage.GetParameter(System.String)">
      <summary>从参数字典返回指定的参数值。</summary>
      <param name="parameter">要搜索参数。</param>
      <returns>参数的值或 null 如果参数不存在。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameter" /> 为 null 或空字符串。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.FederationMessage.ParseQueryString(System.Uri)">
      <summary>帮助器方法，将分析的查询字符串中指定的 URI 分解为 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</summary>
      <param name="data">要分析的 URI。</param>
      <returns>一个 <see cref="T:System.Collections.Specialized.NameValueCollection" /> ，其中包含查询字符串中的参数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.FederationMessage.RemoveParameter(System.String)">
      <summary>从参数字典中移除参数。</summary>
      <param name="parameter">要删除的参数的名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameter" /> 为 null 或空字符串。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.FederationMessage.SetParameter(System.String,System.String)">
      <summary>在参数字典中设置参数的值。</summary>
      <param name="parameter">要设置的参数的名称。</param>
      <param name="value">要赋给该参数的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameter" /> 为 null 或空字符串。- 或 -<paramref name="value" /> 为 null 或空字符串。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.FederationMessage.SetUriParameter(System.String,System.String)">
      <summary>在参数字典中设置参数的值。 该值必须为绝对 URI。</summary>
      <param name="parameter">参数名称。</param>
      <param name="value">参数值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameter" /> 为 null。- 或 -<paramref name="value" /> 是 null 或不是绝对 URI。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.FederationMessage.Validate">
      <summary>验证消息。</summary>
      <exception cref="T:System.IdentityModel.Services.WSFederationMessageException">值 <see cref="P:System.IdentityModel.Services.FederationMessage.BaseUri" /> 属性是 null 或不是绝对 URI。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.FederationMessage.Write(System.IO.TextWriter)">
      <summary>当在派生类中重写，将消息写入输出流。</summary>
      <param name="writer">向其写入消息的文本编写器。</param>
    </member>
    <member name="M:System.IdentityModel.Services.FederationMessage.WriteFormPost">
      <summary>序列化作为窗体发布请求消息，并返回作为字符串及其 Javascript 以及生成的表单。</summary>
      <returns>字符串表示形式将消息作为其关联的 Javascript 以及窗体。</returns>
    </member>
    <member name="M:System.IdentityModel.Services.FederationMessage.WriteQueryString">
      <summary>查询字符串格式返回的字符串表示形式的消息。</summary>
      <returns>查询字符串格式中的消息。</returns>
    </member>
    <member name="M:System.IdentityModel.Services.HttpModuleBase.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Services.HttpModuleBase" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Services.HttpModuleBase.Dispose">
      <summary>释放当前实例所使用的资源 （除内存） <see cref="T:System.IdentityModel.Services.HttpModuleBase" /> 类。</summary>
    </member>
    <member name="M:System.IdentityModel.Services.HttpModuleBase.Init(System.Web.HttpApplication)">
      <summary>初始化 HTTP 模块。</summary>
      <param name="context">包含此模块的应用程序对象。</param>
    </member>
    <member name="M:System.IdentityModel.Services.HttpModuleBase.InitializeModule(System.Web.HttpApplication)">
      <summary>当在派生类中重写，初始化当前模块并准备处理来自其 ASP.NET 应用程序对象的事件。</summary>
      <param name="context">包含此模块的应用程序对象。</param>
    </member>
    <member name="M:System.IdentityModel.Services.HttpModuleBase.InitializePropertiesFromConfiguration">
      <summary>当在派生类中重写，初始化模块属性中的值基于 <see cref="T:System.IdentityModel.Services.Configuration.FederationConfiguration" /> 是有效的对象。</summary>
    </member>
    <member name="M:System.IdentityModel.Services.MachineKeyTransform.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Services.MachineKeyTransform" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Services.MachineKeyTransform.Decode(System.Byte[])">
      <summary>反转转换。</summary>
      <param name="encoded">Cookie 该编码的格式。</param>
      <returns>已解码的字节数组中。</returns>
    </member>
    <member name="M:System.IdentityModel.Services.MachineKeyTransform.Encode(System.Byte[])">
      <summary>应用转换。</summary>
      <param name="value">要进行编码的字节数组。</param>
      <returns>编码的 cookie。</returns>
    </member>
    <member name="M:System.IdentityModel.Services.PseudonymRequestMessage.#ctor(System.Uri)">
      <summary>新实例初始化 <see cref="T:System.IdentityModel.Services.PseudonymRequestMessage" /> 类具有指定的基 URL。</summary>
      <param name="baseUrl">此消息适用的基 URL。</param>
    </member>
    <member name="M:System.IdentityModel.Services.PseudonymRequestMessage.Validate">
      <summary>由框架不执行任何验证。 此类的用户应从外部验证。</summary>
    </member>
    <member name="M:System.IdentityModel.Services.PseudonymRequestMessage.Write(System.IO.TextWriter)">
      <summary>在使用查询字符串格式的此消息写入指定的文本编写器。</summary>
      <param name="writer">要将消息写入到文本编写器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.RedirectingToIdentityProviderEventArgs.#ctor(System.IdentityModel.Services.SignInRequestMessage)">
      <summary>初始化的实例 <see cref="T:System.IdentityModel.Services.RedirectingToIdentityProviderEventArgs" /> 类通过使用指定的 WS 联合身份验证被动登录消息。</summary>
      <param name="signInRequestMessage">WS 联合身份验证被动登录消息，将用来将用户重定向到标识提供程序。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="signInRequestMessage" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.SecurityTokenReceivedEventArgs.#ctor(System.IdentityModel.Tokens.SecurityToken)">
      <summary>新实例初始化 <see cref="T:System.IdentityModel.Services.SecurityTokenReceivedEventArgs" /> 通过使用指定的安全令牌的类。</summary>
      <param name="securityToken">颁发的安全令牌。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityToken" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.SecurityTokenReceivedEventArgs.#ctor(System.IdentityModel.Tokens.SecurityToken,System.String)">
      <summary>新实例初始化 <see cref="T:System.IdentityModel.Services.SecurityTokenReceivedEventArgs" /> 使用指定的安全令牌和登录上下文的类。</summary>
      <param name="securityToken">颁发的安全令牌。</param>
      <param name="signInContext">在控件中指定的登录上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityToken" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.SecurityTokenValidatedEventArgs.#ctor(System.Security.Claims.ClaimsPrincipal)">
      <summary>初始化 <see cref="T:System.IdentityModel.Services.SecurityTokenValidatedEventArgs" /> 类的新实例。</summary>
      <param name="claimsPrincipal">由验证收到的产生的声明主体 <see cref="T:System.IdentityModel.Tokens.SecurityToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="claimsPrincipal" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.ServiceCertificateElement.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Services.ServiceCertificateElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Services.SessionAuthenticationModule.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Services.SessionAuthenticationModule" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken(System.IdentityModel.Tokens.SessionSecurityToken,System.Boolean)">
      <summary>对传入请求进行验证传入的会话令牌身份验证。 验证成功时，它更新的当前 HTTP 上下文和线程主体具有指定  <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />。</summary>
      <param name="sessionToken">要用于对传入的 HTTP 请求进行身份验证的会话安全令牌。</param>
      <param name="writeCookie">true 若要编写会话 cookie 中;否则为 false。</param>
    </member>
    <member name="M:System.IdentityModel.Services.SessionAuthenticationModule.ContainsSessionTokenCookie(System.Web.HttpCookieCollection)">
      <summary>确定指定的 cookie 集合中是否为会话 cookie。</summary>
      <param name="httpCookieCollection">要在其中搜索的 cookie 的集合。</param>
      <returns>true 如果找到会话 cookie，则否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="httpCookieCollection" /> 为 null</exception>
    </member>
    <member name="M:System.IdentityModel.Services.SessionAuthenticationModule.CreateSessionSecurityToken(System.Security.Claims.ClaimsPrincipal,System.String,System.DateTime,System.DateTime,System.Boolean)">
      <summary>创建 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 从指定的参数，通过使用配置的会话令牌处理程序。</summary>
      <param name="principal">要在令牌中捕获的主体。</param>
      <param name="context">应用程序定义的上下文的字符串。</param>
      <param name="validFrom">此令牌无效的最初时刻。</param>
      <param name="validTo">最后一个即时此令牌无效。</param>
      <param name="isPersistent">true 如果应由用户代理; 保持值否则为 false。</param>
      <returns>会话令牌中。</returns>
      <exception cref="T:System.InvalidOperationException">不是配置一个有效的会话令牌处理程序。 (没有任何 <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" /> 中配置 <see cref="P:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers" /> 属性。)</exception>
    </member>
    <member name="M:System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie">
      <summary>删除会话 cookie，并将其从缓存中删除。</summary>
    </member>
    <member name="M:System.IdentityModel.Services.SessionAuthenticationModule.InitializeModule(System.Web.HttpApplication)">
      <summary>初始化工作模块并准备该模块的事件处理 ASP.NET 应用程序对象。</summary>
      <param name="context">包含此模块的 HTTP 应用程序对象。</param>
    </member>
    <member name="M:System.IdentityModel.Services.SessionAuthenticationModule.InitializePropertiesFromConfiguration">
      <summary>初始化基于配置文件中定义的模块属性。</summary>
    </member>
    <member name="M:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest(System.Object,System.EventArgs)">
      <summary>处理 <see cref="E:System.Web.HttpApplication.AuthenticateRequest" /> 来自事件 ASP.NET 管道。</summary>
      <param name="sender">事件的源。 这将是 <see cref="T:System.Web.HttpApplication" /> 对象。</param>
      <param name="eventArgs">事件的数据。</param>
      <exception cref="T:System.InvalidOperationException">不是配置一个有效的会话令牌处理程序。 (没有任何 <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" /> 中配置 <see cref="P:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers" /> 属性。)</exception>
    </member>
    <member name="M:System.IdentityModel.Services.SessionAuthenticationModule.OnPostAuthenticateRequest(System.Object,System.EventArgs)">
      <summary>处理 <see cref="E:System.Web.HttpApplication.PostAuthenticateRequest" /> 来自事件 ASP.NET 管道。</summary>
      <param name="sender">事件的源。 这将是 <see cref="T:System.Web.HttpApplication" /> 对象。</param>
      <param name="e">事件的数据。</param>
    </member>
    <member name="M:System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenCreated(System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs)">
      <summary>引发 <see cref="E:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated" /> 事件。</summary>
      <param name="args">事件的数据。</param>
    </member>
    <member name="M:System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenReceived(System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs)">
      <summary>引发 <see cref="E:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived" /> 事件。</summary>
      <param name="args">事件的数据。</param>
    </member>
    <member name="M:System.IdentityModel.Services.SessionAuthenticationModule.OnSignedOut(System.EventArgs)">
      <summary>引发 <see cref="E:System.IdentityModel.Services.SessionAuthenticationModule.SignedOut" /> 事件。</summary>
      <param name="e">事件的数据。</param>
    </member>
    <member name="M:System.IdentityModel.Services.SessionAuthenticationModule.OnSigningOut(System.IdentityModel.Services.SigningOutEventArgs)">
      <summary>引发 <see cref="E:System.IdentityModel.Services.SessionAuthenticationModule.SigningOut" /> 事件。</summary>
      <param name="e">事件的数据。</param>
    </member>
    <member name="M:System.IdentityModel.Services.SessionAuthenticationModule.OnSignOutError(System.IdentityModel.Services.ErrorEventArgs)">
      <summary>引发 <see cref="E:System.IdentityModel.Services.SessionAuthenticationModule.SignOutError" /> 事件。</summary>
      <param name="e">事件的数据。</param>
    </member>
    <member name="M:System.IdentityModel.Services.SessionAuthenticationModule.ReadSessionTokenFromCookie(System.Byte[])">
      <summary>读取 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 从指定的会话 cookie。</summary>
      <param name="sessionCookie">以原始格式，包含会话令牌 cookie。</param>
      <returns>从该 cookie 读取会话令牌。</returns>
      <exception cref="T:System.InvalidOperationException">不是配置一个有效的会话令牌处理程序。 (没有任何 <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" /> 中配置 <see cref="P:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers" /> 属性。)</exception>
    </member>
    <member name="M:System.IdentityModel.Services.SessionAuthenticationModule.SetPrincipalFromSessionToken(System.IdentityModel.Tokens.SessionSecurityToken)">
      <summary>在设置的主体 <see cref="T:System.Web.HttpContext" /> 和 <see cref="T:System.Threading.Thread" /> 包含在指定的会话令牌的主体。</summary>
      <param name="sessionSecurityToken">要设置主体从中会话令牌。</param>
    </member>
    <member name="M:System.IdentityModel.Services.SessionAuthenticationModule.SignOut">
      <summary>注销当前用户，并引发相关联的事件。</summary>
    </member>
    <member name="M:System.IdentityModel.Services.SessionAuthenticationModule.TryReadSessionTokenFromCookie(System.IdentityModel.Tokens.SessionSecurityToken@)">
      <summary>尝试读取 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 从会话 cookie，并返回一个值，该值指示是否已成功读取的会话 cookie。</summary>
      <param name="sessionToken">此方法返回时，包含从会话 cookie 读取会话安全令牌。</param>
      <returns>true 如果会话 cookie 已成功读取请求;否则为 false。</returns>
    </member>
    <member name="M:System.IdentityModel.Services.SessionAuthenticationModule.ValidateSessionToken(System.IdentityModel.Tokens.SessionSecurityToken)">
      <summary>验证指定 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> ，并返回其身份。</summary>
      <param name="sessionSecurityToken">要验证的标记。</param>
      <returns>令牌中包含的标识的集合。</returns>
      <exception cref="T:System.IdentityModel.Services.FederatedSessionExpiredException">令牌已过期。</exception>
      <exception cref="T:System.IdentityModel.Services.FederationException">令牌的起始时间尚不可有效。</exception>
      <exception cref="T:System.InvalidOperationException">不是配置一个有效的会话令牌处理程序。 (没有任何 <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" /> 中配置 <see cref="P:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers" /> 属性。)</exception>
    </member>
    <member name="M:System.IdentityModel.Services.SessionAuthenticationModule.WriteSessionTokenToCookie(System.IdentityModel.Tokens.SessionSecurityToken)">
      <summary>将指定 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 至的会话 cookie。</summary>
      <param name="sessionToken">要写入的会话安全令牌。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sessionToken" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">不是配置一个有效的会话令牌处理程序。 (没有任何 <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" /> 中配置 <see cref="P:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers" /> 属性。)</exception>
    </member>
    <member name="M:System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs.#ctor(System.IdentityModel.Tokens.SessionSecurityToken)">
      <summary>新实例初始化 <see cref="T:System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs" /> 通过使用指定的会话安全令牌的类。</summary>
      <param name="sessionToken">已创建的会话安全令牌。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sessionToken" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs.#ctor(System.IdentityModel.Tokens.SessionSecurityToken)">
      <summary>新实例初始化 <see cref="T:System.IdentityModel.Services.SecurityTokenReceivedEventArgs" /> 类，该类具有指定的会话令牌。</summary>
      <param name="sessionToken">已收到会话安全令牌。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sessionToken" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.SessionSecurityTokenResolver.#ctor(System.IdentityModel.Tokens.SessionSecurityTokenCache,System.String)">
      <summary>初始化 <see cref="T:System.IdentityModel.Services.SessionSecurityTokenResolver" /> 类的新实例。</summary>
      <param name="tokenCache">令牌缓存。</param>
      <param name="endpointId">终结点的标识符。</param>
    </member>
    <member name="M:System.IdentityModel.Services.SessionSecurityTokenResolver.TryResolveSecurityKeyCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)">
      <summary>在提供了指定的密钥标识符子句的情况下，尝试解析安全密钥核心。</summary>
      <param name="keyIdentifierClause">安全密钥标识符子句。</param>
      <param name="key">此方法返回时将包含解析的密钥核心。 此参数未经初始化即被传递。</param>
      <returns>如果已成功解析密钥核心，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.IdentityModel.Services.SessionSecurityTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>尝试解析指定的密钥标识符中的令牌。</summary>
      <param name="keyIdentifier">密钥标识符。</param>
      <param name="token">此方法返回时将包含解析的密钥核心。 此参数未经初始化即被传递。</param>
      <returns>如果已成功解析密钥令牌，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.IdentityModel.Services.SessionSecurityTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)">
      <summary>尝试解析指定的密钥标识符子句中的令牌。</summary>
      <param name="keyIdentifierClause">指定的密钥标识符子句。</param>
      <param name="token">此方法返回时将包含解析的密钥核心。 此参数未经初始化即被传递。</param>
      <returns>如果已成功解析密钥令牌，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.IdentityModel.Services.SigningOutEventArgs.#ctor(System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.IdentityModel.Services.SigningOutEventArgs" /> 通过使用一个值，指定是否由标识提供程序 (IP) 请求注销的类。</summary>
      <param name="isIPInitiated">true 当注销请求时由 IP;否则为 false。</param>
    </member>
    <member name="M:System.IdentityModel.Services.SignInRequestMessage.#ctor(System.Uri,System.String)">
      <summary>新实例初始化 <see cref="T:System.IdentityModel.Services.SignInRequestMessage" /> 使用指定的基 URL 和 wtrealm 参数的类。</summary>
      <param name="baseUrl">登录消息应用于基 URL。</param>
      <param name="realm">Wtrealm 消息参数的值。 设置 <see cref="P:System.IdentityModel.Services.SignInRequestMessage.Realm" /> 属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="realm" /> 为 null 或空字符串。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.SignInRequestMessage.#ctor(System.Uri,System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.IdentityModel.Services.SignInRequestMessage" /> 类使用指定的基 URI、 wtrealm 参数和 wreply 参数。 为了向后兼容支持创建非标准的消息。</summary>
      <param name="baseUrl">登录消息应用于基 URL。</param>
      <param name="realm">Wtrealm 消息参数的值。 如果不是 null 或为空，设置 <see cref="P:System.IdentityModel.Services.SignInRequestMessage.Realm" /> 属性。</param>
      <param name="reply">要与其进行回复 URI。 （wreply 消息参数的值。） 如果不为 null 或为空，将设置 <see cref="P:System.IdentityModel.Services.SignInRequestMessage.Reply" /> 属性。</param>
      <exception cref="T:System.ArgumentNullException">同时 <paramref name="realm" /> 和 <paramref name="reply" /> 是 null 或空字符串。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.SignInRequestMessage.Validate">
      <summary>验证当前实例。</summary>
      <exception cref="T:System.InvalidOperationException">Wa 参数 ( <see cref="P:System.IdentityModel.Services.WSFederationMessage.Action" /> 属性) 未设置为"wsignin1.0"。</exception>
      <exception cref="T:System.IdentityModel.Services.WSFederationMessageException">Wtrealm 参数和 wreply 参数都不会显示。 ( <see cref="P:System.IdentityModel.Services.SignInRequestMessage.Realm" /> 属性和 <see cref="P:System.IdentityModel.Services.SignInRequestMessage.Reply" /> 属性 null 或为空。)- 或 -Wreq 参数和 wreqptr 参数都有。 ( <see cref="P:System.IdentityModel.Services.SignInRequestMessage.Request" /> 属性和 <see cref="P:System.IdentityModel.Services.SignInRequestMessage.RequestPtr" /> 属性都被设置。)</exception>
    </member>
    <member name="M:System.IdentityModel.Services.SignInRequestMessage.Write(System.IO.TextWriter)">
      <summary>查询字符串形式将此消息写入指定的文本编写器。</summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> 要向其写入消息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.SignInResponseMessage.#ctor(System.Uri,System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.IdentityModel.Services.WSFederationSerializer,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>新实例初始化 <see cref="T:System.IdentityModel.Services.SignInResponseMessage" /> 通过使用指定的基 URL、 响应消息对象，联合身份验证序列化程序和序列化上下文的类。</summary>
      <param name="baseUrl">在登录响应消息应用于基 URL。</param>
      <param name="response">
        <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 要返回。</param>
      <param name="federationSerializer">
        <see cref="T:System.IdentityModel.Services.WSFederationSerializer" /> 要用于序列化的响应。</param>
      <param name="context">
        <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext" /> 包含序列化上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUrl" /> 为 null。- 或 -<paramref name="Response" /> 为 null。- 或 -<paramref name="federationSerializer" /> 为 null。- 或 -<paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.SignInResponseMessage.#ctor(System.Uri,System.String)">
      <summary>新实例初始化 <see cref="T:System.IdentityModel.Services.SignInResponseMessage" /> 使用指定的基 URL 和 wresult 参数的类。</summary>
      <param name="baseUrl">在登录响应消息应用于基 URL。</param>
      <param name="result">消息中的 wresult 参数。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="result" /> 为 null 或空。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.SignInResponseMessage.#ctor(System.Uri,System.Uri)">
      <summary>初始化的实例 <see cref="T:System.IdentityModel.Services.SignInResponseMessage" /> 类使用指定的基 URL 和 wresultptr 参数。</summary>
      <param name="baseUrl">在登录响应消息应用于基 URL。</param>
      <param name="resultPtr">消息中的 wresultptr 参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="resultPtr" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.SignInResponseMessage.Validate">
      <summary>验证当前实例。</summary>
      <exception cref="T:System.InvalidOperationException">操作参数 (wa) 不是"wsignin1.0"。</exception>
      <exception cref="T:System.IdentityModel.Services.WSFederationMessageException">Wresult 参数和 wresultptr 参数均未指定- 或 -指定了 wresult 参数和 wresultptr 参数。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.SignInResponseMessage.Write(System.IO.TextWriter)">
      <summary>窗体 post 格式将此消息写入指定的文本编写器。</summary>
      <param name="writer">要将消息写入到文本编写器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.SignOutCleanupRequestMessage.#ctor(System.Uri)">
      <summary>新实例初始化 <see cref="T:System.IdentityModel.Services.SignOutCleanupRequestMessage" /> 类具有指定的基 URL。</summary>
      <param name="baseUrl">此消息适用的基 URL。</param>
    </member>
    <member name="M:System.IdentityModel.Services.SignOutCleanupRequestMessage.#ctor(System.Uri,System.String)">
      <summary>新实例初始化 <see cref="T:System.IdentityModel.Services.SignOutCleanupRequestMessage" /> 使用指定的基 URL 和 wreply 参数的类。</summary>
      <param name="baseUrl">此消息适用的基 URL。</param>
      <param name="reply">Wreply 参数的值。 答复应发送到 URL。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="reply" /> 为空或 null。- 或 -<paramref name="reply" /> 不是有效的 URI。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.SignOutCleanupRequestMessage.Validate">
      <summary>验证当前实例。</summary>
      <exception cref="T:System.InvalidOperationException">Wa 参数 ( <see cref="P:System.IdentityModel.Services.WSFederationMessage.Action" /> 属性) 未设置为"wsignoutcleanup1.0"。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.SignOutCleanupRequestMessage.Write(System.IO.TextWriter)">
      <summary>查询字符串形式将消息写入指定的文本编写器。</summary>
      <param name="writer">要向其写入消息编写器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.SignOutRequestMessage.#ctor(System.Uri)">
      <summary>新实例初始化 <see cref="T:System.IdentityModel.Services.SignOutRequestMessage" /> 类具有指定的基 URL。</summary>
      <param name="baseUrl">此消息适用的基 URL。 集  <see cref="" /> 属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUrl" /> 为 null。</exception>
      <exception cref="T:System.IdentityModel.Services.WSFederationMessageException">
        <paramref name="baseUrl" /> 不是有效的绝对 URI。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.SignOutRequestMessage.#ctor(System.Uri,System.String)">
      <summary>新实例初始化 <see cref="T:System.IdentityModel.Services.SignOutRequestMessage" /> 使用指定的基 URL 和 wreply 参数的类。</summary>
      <param name="baseUrl">此消息适用的基 URL。</param>
      <param name="reply">Wreply 参数的值。 答复应发送到 URL。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="reply" /> 为空或 null。- 或 -<paramref name="reply" /> 不是有效的绝对 URI。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUrl" /> 为 null。</exception>
      <exception cref="T:System.IdentityModel.Services.WSFederationMessageException">
        <paramref name="baseUrl" /> 不是有效的绝对 URI。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.SignOutRequestMessage.Validate">
      <summary>验证当前实例。</summary>
      <exception cref="T:System.InvalidOperationException">Wa 参数 ( <see cref="P:System.IdentityModel.Services.WSFederationMessage.Action" /> 属性) 未设置为"wsignout1.0"。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.SignOutRequestMessage.Write(System.IO.TextWriter)">
      <summary>查询字符串形式将消息写入指定的文本编写器。</summary>
      <param name="writer">要向其写入消息编写器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler.#ctor(System.TimeSpan)">
      <summary>新实例初始化 <see cref="T:System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler" /> 类，该类具有指定的默认令牌生存期。</summary>
      <param name="tokenLifetime">获取令牌默认生存时间。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="tokenLifetime" /> 长度小于或等于 <see cref="F:System.TimeSpan.Zero" /></exception>
    </member>
    <member name="M:System.IdentityModel.Services.Tokens.MembershipUserNameSecurityTokenHandler.#ctor">
      <summary>新实例初始化 <see cref="T:System.IdentityModel.Services.Tokens.MembershipUserNameSecurityTokenHandler" /> 类，该类使用的默认成员资格提供程序配置为应用程序。</summary>
      <exception cref="T:System.InvalidOperationException">没有默认成员资格提供程序配置为使用该应用程序。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.Tokens.MembershipUserNameSecurityTokenHandler.#ctor(System.Web.Security.MembershipProvider)">
      <summary>新实例初始化 <see cref="T:System.IdentityModel.Services.Tokens.MembershipUserNameSecurityTokenHandler" /> 类，该类使用指定的成员资格提供程序。</summary>
      <param name="provider">要用于验证令牌的成员资格提供程序。</param>
    </member>
    <member name="M:System.IdentityModel.Services.Tokens.MembershipUserNameSecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)">
      <summary>从 XML 加载自定义配置。</summary>
      <param name="customConfigElements">自定义的 XML 元素。</param>
    </member>
    <member name="M:System.IdentityModel.Services.Tokens.MembershipUserNameSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
      <summary>使用配置指定的安全令牌进行验证 <see cref="T:System.Web.Security.MembershipProvider" />。</summary>
      <param name="token">要验证的安全令牌。</param>
      <returns>令牌中包含的标识。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="token" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="token" /> 不是实例的 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" />。</exception>
      <exception cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException">
        <paramref name="token" /> 使用配置的验证失败 <see cref="T:System.Web.Security.MembershipProvider" />。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationAuthenticationModule.#ctor">
      <summary>在派生类中初始化的构造函数调用 <see cref="T:System.IdentityModel.Services.WSFederationAuthenticationModule" /> 类。</summary>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationAuthenticationModule.CanReadSignInResponse(System.Web.HttpRequestBase)">
      <summary>返回一个值，该值指示指定的 HTTP 请求是否为 WS 联合身份验证登录响应消息。 如果消息是 WS 联合身份验证注销清除消息 ("wsignoutcleanup1.0")，此方法将处理该请求。</summary>
      <param name="request">传入的 HTTP 请求。</param>
      <returns>true 如果指定的 HTTP 请求包含窗体发布顺序 wa 参数设置为"wsignout1.0"且 wresult 参数不为空;否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationAuthenticationModule.CanReadSignInResponse(System.Web.HttpRequestBase,System.Boolean)">
      <summary>返回一个值，该值指示指定的 HTTP 请求是否为 WS 联合身份验证登录响应消息。 如果消息是 WS 联合身份验证注销清除消息 ("wsignoutcleanup1.0")，此方法将处理该请求。</summary>
      <param name="request">传入的 HTTP 请求。</param>
      <param name="onPage">true 如果在调用源自处理页面请求时。false 如果调用方是一个 HTTP 模块。 此参数确定如何终止处理或发送重定向消息，如果传入的消息是 WS 联合身份验证注销清除消息 ("wsignoutcleanup1.0")。</param>
      <returns>true 如果指定的 HTTP 请求包含窗体发布其中 wa 参数设置为"wsignout1.0"，并使用 wresult 参数，不为空;否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationAuthenticationModule.CreateSignInRequest(System.String,System.String,System.Boolean)">
      <summary>通过使用配置模块上的 WS 联合身份验证参数创建请求消息中的 WS 联合身份验证登录。</summary>
      <param name="uniqueId">WSFAM 将该值保存在 WS 联合身份验证登录请求; 中的 wctx 参数但是，该模块不使用它在处理登录请求或登录响应时。 可以将此属性设置为任何值。 它不必是唯一的。</param>
      <param name="returnUrl">该模块进行身份验证后应返回 URL。</param>
      <param name="rememberMeSet">WSFAM 将该值保存在 WS 联合身份验证登录请求; 中的 wctx 参数但是，该模块不使用它在处理登录请求或登录响应时。 可以将其设置既 true 或 false。</param>
      <returns>WS 联合身份验证登录请求消息。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer" /> 属性是 null 或空字符串。- 或 -<see cref="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Realm" /> 属性是 null 或空字符串。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationAuthenticationModule.FederatedSignOut(System.Uri,System.Uri)">
      <summary>在通过使用 WS 联合身份验证协议的指定的安全令牌服务 (STS) 出迹象。</summary>
      <param name="signOutUrl">用于接收 WS 联合身份验证注销请求消息的 STS 的 URL。 不能为 null。</param>
      <param name="replyUrl">要将注销请求消息中的 wreply 值作为发送的 URL。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="signOutUrl" /> 不是 null 并不是绝对 URI。- 或 -<paramref name="replyUrl" /> 不是 null 并不是绝对 URI。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="signOutUrl" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationAuthenticationModule.GetFederationPassiveSignOutUrl(System.String,System.String,System.String)">
      <summary>返回的 URL，以表示传递给指定的颁发者提出的 WS 联合身份验证注销要求，其中包含指定的 wreply 参数并使用指定的其他参数。</summary>
      <param name="issuer">颁发者的地址。 该地址的安全令牌服务 (STS) 要将请求定向到。</param>
      <param name="signOutReply">指定要返回为 after 的地址的 URL 来注销。 这会设置 wreply 参数中注销请求。 可以是 null 或如果没有 wreply 参数应包含在生成的注销请求为空。 这应该是一个绝对 URI。</param>
      <param name="signOutQueryString">要注销请求中可包含其他查询字符串参数。 可以是 null 或如果不是任何其他要生成的注销请求中包括的参数为空。 这应该是相对的 URI。</param>
      <returns>包含通过使用指定的参数生成的 WS 联合身份验证被动注销请求的 URL。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="issuer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationAuthenticationModule.GetReferencedResult(System.String)">
      <summary>从指定的 URL 获取颁发结果 （通常已颁发的令牌）。 解析登录响应消息中的 wresultptr 参数中指定的 URL。</summary>
      <param name="resultPtr">指定颁发结果的地址的 URL。</param>
      <returns>通过 URL 来引用了颁发结果。</returns>
      <exception cref="T:System.NotSupportedException">在基类中不支持此方法。 您必须在派生类中覆盖它。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationAuthenticationModule.GetReturnUrlFromResponse(System.Web.HttpRequestBase)">
      <summary>提取从登录响应最初请求的页面的 URL。</summary>
      <param name="request">包含窗体 POST，包含 WS 联合身份验证登录响应消息的 HTTP 请求。</param>
      <returns>最初由客户端请求的页的 URL。 这是向其客户端应重定向后成功登录 URL （在信赖方）。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationAuthenticationModule.GetSecurityToken(System.IdentityModel.Services.SignInResponseMessage)">
      <summary>从指定的 WS 联合身份验证登录响应消息中读取安全令牌。</summary>
      <param name="message">从中读取令牌登录响应消息。</param>
      <returns>从消息中读取安全令牌。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationAuthenticationModule.GetSecurityToken(System.Web.HttpRequestBase)">
      <summary>从指定的 HTTP 请求中读取安全令牌。</summary>
      <param name="request">从中读取令牌的 HTTP 请求。</param>
      <returns>读取的安全令牌。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationAuthenticationModule.GetSessionTokenContext">
      <summary>获取一个字符串，应使用会话 cookie 中保持 <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.Context" /> 属性。</summary>
      <returns>要保留在会话 cookie 中的字符串。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer" /> 属性为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationAuthenticationModule.GetSignInResponseMessage(System.Web.HttpRequestBase)">
      <summary>读取 <see cref="T:System.IdentityModel.Services.SignInResponseMessage" /> 从窗体 POST 由指定的 HTTP 请求的对象。</summary>
      <param name="request">从中进行读取登录响应消息的 HTTP 请求。 该请求应表示表单 POST。</param>
      <returns>已创建的登录响应消息。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">无法从指定的请求中读取一个登录响应消息。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationAuthenticationModule.GetSignOutRedirectUrl(System.IdentityModel.Services.SignOutCleanupRequestMessage)">
      <summary>确定在处理包含 wreply 参数的 WS 联合身份验证注销清除请求 (wsignoutcleanup1.0) 时，将重定向到的 URL。</summary>
      <param name="signOutMessage">注销清除请求。</param>
      <returns>要将重定向到的 URL。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="signOutMessage" /> 具有 <see cref="P:System.IdentityModel.Services.SignOutCleanupRequestMessage.Reply" /> 属性都 null 或为空。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="signOutMessage" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationAuthenticationModule.GetXmlTokenFromMessage(System.IdentityModel.Services.SignInResponseMessage)">
      <summary>从指定的 WS 联合身份验证登录响应消息中提取已颁发的令牌。</summary>
      <param name="message">要从令牌中提取的登录响应消息。 在登录响应中包含由 STS 颁发的令牌。</param>
      <returns>一个字符串，包含表示已颁发的令牌的 XML。 这是 &lt;wst:RequestSecurityTokenResponse&gt; 元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="message" /> 不包含一个令牌。 （它不包含有效的 wresult 或 wresultptr 参数）。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationAuthenticationModule.GetXmlTokenFromMessage(System.IdentityModel.Services.SignInResponseMessage,System.IdentityModel.Services.WSFederationSerializer)">
      <summary>通过使用指定的 WS 联合身份验证序列化程序，从指定的 WS 联合身份验证登录响应消息中提取已颁发的令牌。</summary>
      <param name="message">要从令牌中提取的登录响应消息。 在登录响应中包含由 STS 颁发的令牌。</param>
      <param name="federationSerializer">WS 联合身份验证用序列化程序反序列化登录响应消息。</param>
      <returns>一个字符串，包含表示已颁发的令牌的 XML。 这是 &lt;wst:RequestSecurityTokenResponse&gt; 元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationAuthenticationModule.InitializeModule(System.Web.HttpApplication)">
      <summary>初始化工作模块并准备该模块的事件处理 ASP.NET 应用程序对象。</summary>
      <param name="context">包含此模块的 HTTP 应用程序对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationAuthenticationModule.InitializePropertiesFromConfiguration">
      <summary>初始化基于所指定的配置的模块属性 <see cref="P:System.IdentityModel.Services.HttpModuleBase.FederationConfiguration" /> 模块的属性。</summary>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationAuthenticationModule.IsSignInResponse(System.Web.HttpRequestBase)">
      <summary>获取一个值，该值指示指定的请求是否为 WS 联合身份验证登录响应消息。</summary>
      <param name="request">传入的 HTTP 请求。</param>
      <returns>true 如果请求为 WS 联合身份验证登录响应消息;否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationAuthenticationModule.OnAuthenticateRequest(System.Object,System.EventArgs)">
      <summary>处理 <see cref="E:System.Web.HttpApplication.AuthenticateRequest" /> 来自事件 ASP.NET 管道。</summary>
      <param name="sender">事件的源。 这将是 <see cref="T:System.Web.HttpApplication" /> 对象。</param>
      <param name="args">事件的数据。</param>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationAuthenticationModule.OnAuthorizationFailed(System.IdentityModel.Services.AuthorizationFailedEventArgs)">
      <summary>引发 <see cref="E:System.IdentityModel.Services.WSFederationAuthenticationModule.AuthorizationFailed" /> 事件。</summary>
      <param name="e">事件的数据。</param>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationAuthenticationModule.OnEndRequest(System.Object,System.EventArgs)">
      <summary>处理 <see cref="E:System.Web.HttpApplication.EndRequest" /> 来自事件 ASP.NET 管道。</summary>
      <param name="sender">事件的源。 这将是 <see cref="T:System.Web.HttpApplication" /> 对象。</param>
      <param name="args">事件的数据。</param>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationAuthenticationModule.OnPostAuthenticateRequest(System.Object,System.EventArgs)">
      <summary>处理 <see cref="E:System.Web.HttpApplication.PostAuthenticateRequest" /> 来自事件 ASP.NET 管道。</summary>
      <param name="sender">事件的源。 这将是 <see cref="T:System.Web.HttpApplication" /> 对象。</param>
      <param name="e">事件的数据。</param>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationAuthenticationModule.OnRedirectingToIdentityProvider(System.IdentityModel.Services.RedirectingToIdentityProviderEventArgs)">
      <summary>引发 <see cref="E:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider" /> 事件。</summary>
      <param name="e">事件的数据。</param>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationAuthenticationModule.OnSessionSecurityTokenCreated(System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs)">
      <summary>引发 <see cref="E:System.IdentityModel.Services.WSFederationAuthenticationModule.SessionSecurityTokenCreated" /> 事件。</summary>
      <param name="args">事件的数据。</param>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignedIn(System.EventArgs)">
      <summary>引发 <see cref="E:System.IdentityModel.Services.WSFederationAuthenticationModule.SignedIn" /> 事件。</summary>
      <param name="args">事件的数据。</param>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignedOut(System.EventArgs)">
      <summary>引发 <see cref="E:System.IdentityModel.Services.WSFederationAuthenticationModule.SignedOut" /> 事件。</summary>
      <param name="args">事件的数据。</param>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignInError(System.IdentityModel.Services.ErrorEventArgs)">
      <summary>引发 <see cref="E:System.IdentityModel.Services.WSFederationAuthenticationModule.SignInError" /> 事件。</summary>
      <param name="args">事件的数据。</param>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationAuthenticationModule.OnSigningOut(System.IdentityModel.Services.SigningOutEventArgs)">
      <summary>引发 <see cref="E:System.IdentityModel.Services.WSFederationAuthenticationModule.SigningOut" /> 事件。</summary>
      <param name="args">事件的数据。</param>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignOutError(System.IdentityModel.Services.ErrorEventArgs)">
      <summary>引发 <see cref="E:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOutError" /> 事件。</summary>
      <param name="args">事件的数据。</param>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectToIdentityProvider(System.String,System.String,System.Boolean)">
      <summary>将指定的用户对安全令牌服务 (STS) 来重定向 <see cref="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer" /> 属性来获取安全令牌使用 WS 联合身份验证协议。</summary>
      <param name="uniqueId">WSFAM 将该值保存在 WS 联合身份验证登录请求; 中的 wctx 参数但是，该模块不使用它在处理登录请求或登录响应时。 可以将此属性设置为任何值。 它不必是唯一的。 有关更多信息，请参见 <see cref="M:System.IdentityModel.Services.WSFederationAuthenticationModule.CreateSignInRequest(System.String,System.String,System.Boolean)" /> 方法。</param>
      <param name="returnUrl">该模块进行身份验证后应返回 URL。</param>
      <param name="persist">WSFAM 将该值保存在 WS 联合身份验证登录请求; 中的 wctx 参数但是，该模块不使用它在处理登录请求或登录响应时。 可以将其设置既 true 或 false。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer" /> 为 null 或空字符串。- 或 -<see cref="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Realm" /> 为 null 或空字符串。- 或 -<see cref="P:System.Web.HttpContext.Current" /> 属性是 null 或为空。- 或 -<see cref="P:System.Web.HttpContext.Response" /> 返回上下文的属性 <see cref="P:System.Web.HttpContext.Current" /> 是 null 或为空。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationAuthenticationModule.SetPrincipalAndWriteSessionToken(System.IdentityModel.Tokens.SessionSecurityToken,System.Boolean)">
      <summary>设置线程主体并 （可选） 将写入会话 cookie。</summary>
      <param name="sessionToken">从 STS WS 联合身份验证登录响应消息中创建安全令牌，该会话。</param>
      <param name="isSession">true 若要编写一个表示响应; 中包含的会话的 cookie否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sessionToken" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationAuthenticationModule.SignIn(System.String)">
      <summary>登录到通过 WS 联合身份验证协议的安全令牌服务 (STS) 执行。</summary>
      <param name="ControlId">WSFAM 将该值保存在 WS 联合身份验证登录请求; 中的 wctx 参数但是，该模块不使用它在处理登录请求或登录响应时。 可以将此属性设置为任何值。 它不必是唯一的。 有关更多信息，请参见 <see cref="M:System.IdentityModel.Services.WSFederationAuthenticationModule.CreateSignInRequest(System.String,System.String,System.Boolean)" /> 方法。</param>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut">
      <summary>重定向回当前 HTTP 请求中指定的 URL 从当前会话和请求迹象。</summary>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut(System.Boolean)">
      <summary>注销当前会话，并引发相应的事件。</summary>
      <param name="isIPRequest">true 如果该请求由通过 WS 联合身份验证注销清除请求消息 ("wsignoutcleanup1.0"); IP-STS 初始化否则为 false。</param>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut(System.String)">
      <summary>注销当前会话和请求返回到指定的 URL 重定向。</summary>
      <param name="redirectUrl">该浏览器应被重定向到在会话结束后的 URL 将被删除。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="redirectUrl" /> 不是有效的 URI。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut(System.String,System.Boolean)">
      <summary>注销当前会话和请求返回到指定的 URL 重定向。</summary>
      <param name="redirectUrl">向其浏览器应重定向后的 URL 注销。</param>
      <param name="initiateSignoutCleanup">始终设置 false。 将此参数设置为 true 不受支持。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="redirectUrl" /> 不是有效的 URI。</exception>
      <exception cref="T:System.NotImplementedException">
        <see cref="T:System.IdentityModel.Services.WSFederationAuthenticationModule" /> 类会引发此异常，如果 <paramref name="initiateSignoutCleanup" /> 是 true。 未设置此参数为 true。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationAuthenticationModule.VerifyProperties">
      <summary>验证 <see cref="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer" /> 和 <see cref="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Realm" /> 属性都为非空，，如果 <see cref="P:System.IdentityModel.Services.WSFederationAuthenticationModule.RequireHttps" /> 属性是 true, ，为指定 Uri <see cref="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer" /> 和 <see cref="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Realm" /> HTTPS 兼容。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer" /> 为 null 或空字符串。- 或 -<see cref="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Realm" /> 为 null 或空字符串。- 或 -<see cref="P:System.IdentityModel.Services.WSFederationAuthenticationModule.RequireHttps" /> 是 true 和 <see cref="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer" /> HTTPS 不符合。- 或 -<see cref="P:System.IdentityModel.Services.WSFederationAuthenticationModule.RequireHttps" /> 是 true 和 <see cref="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Realm" /> HTTPS 不符合。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationMessage.#ctor(System.Uri,System.String)">
      <summary>新实例初始化 <see cref="T:System.IdentityModel.Services.WSFederationMessage" /> 类的基 URL 从其应用消息和执行操作才能执行 （wa 消息参数）。</summary>
      <param name="baseUrl">WS 联合身份验证消息应用于基 URL。 这是不带任何查询参数的 URL。 设置 <see cref="P:System.IdentityModel.Services.FederationMessage.BaseUri" /> 属性。</param>
      <param name="action">消息的 wa 参数。 指定要执行; 的操作例如，"wsignin1.0"WS 联合身份验证登录请求。 设置 <see cref="P:System.IdentityModel.Services.WSFederationMessage.Action" /> 属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="action" /> 为 null 或空字符串。</exception>
      <exception cref="T:System.IdentityModel.Services.WSFederationMessageException">
        <paramref name="baseUri" /> 不是有效的绝对 URI。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationMessage.CreateFromFormPost(System.Web.HttpRequestBase)">
      <summary>从在指定的请求中收到窗体发布创建 WS 联合身份验证的消息。</summary>
      <param name="request">包含窗体发布请求的请求。</param>
      <returns>已创建的消息或 null 如果无法创建一条消息。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationMessage.CreateFromNameValueCollection(System.Uri,System.Collections.Specialized.NameValueCollection)">
      <summary>创建从 WS 联合身份验证消息 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 的参数。</summary>
      <param name="baseUrl">此消息适用的基 URL。</param>
      <param name="collection">
        <see cref="T:System.Collections.Specialized.NameValueCollection" /> ，其中包含消息的参数。</param>
      <returns>已创建的消息或 null 如果无法创建一条消息。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUrl" /> 为 null。- 或 -<paramref name="collection" /> 为 null。</exception>
      <exception cref="T:System.IdentityModel.Services.WSFederationMessageException">无法识别的参数集合中的 wa 参数。</exception>
      <exception cref="T:System.ArgumentException">登录响应消息的参数集合中具有 wresult 和 wresultptr 参数。 （有效的登录响应消息有 wa 参数相等与"wsignin1.0"或者 wresult 或 wresultptr 参数之一，但不要同时使用两者。）</exception>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationMessage.CreateFromUri(System.Uri)">
      <summary>从指定的 URI 创建 WS 联合身份验证的消息。 参数采用查询字符串中指定。</summary>
      <param name="requestUri">从中创建消息 URI。 消息参数的查询字符串中指定。 Wa 参数必须存在。</param>
      <returns>已创建的消息。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> 为 null。</exception>
      <exception cref="T:System.IdentityModel.Services.WSFederationMessageException">无法从指定的 URI 创建一条消息。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationMessage.TryCreateFromUri(System.Uri,System.IdentityModel.Services.WSFederationMessage@)">
      <summary>尝试从指定的 URI 创建 WS 联合身份验证消息。 假定参数被指定为查询字符串。</summary>
      <param name="requestUri">从中创建消息 URI。 消息参数的查询字符串中指定。 Wa 参数必须存在。</param>
      <param name="fedMsg">此方法返回时，包含已创建的消息或 null 如果无法创建一条消息。 该参数未经初始化即被处理。</param>
      <returns>true 如果成功创建一条消息;否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationMessageException.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Services.WSFederationMessageException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationMessageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.IdentityModel.Services.WSFederationMessageException" /> 类的新实例。</summary>
      <param name="info">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，其中包含序列化的对象数据。</param>
      <param name="context">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，其中包含有关源或目标的上下文信息。</param>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationMessageException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.IdentityModel.Services.WSFederationMessageException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationMessageException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IdentityModel.Services.WSFederationMessageException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="inner">
        <see cref="T:System.Exception" /> 导致当前异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationSerializer.#ctor">
      <summary>初始化 <see cref="T:System.IdentityModel.Services.WSFederationSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationSerializer.#ctor(System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer,System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer)">
      <summary>新实例初始化 <see cref="T:System.IdentityModel.Services.WSFederationSerializer" /> 类通过指定请求和响应序列化程序。</summary>
      <param name="requestSerializer">要用于读取请求 (RST) WS 信任序列化程序。</param>
      <param name="responseSerializer">WS 信任序列化程序用来写入响应 (RSTR)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestSerializer" /> 为 null。- 或 -<paramref name="responseSerializer" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationSerializer.#ctor(System.Xml.XmlDictionaryReader)">
      <summary>新实例初始化 <see cref="T:System.IdentityModel.Services.WSFederationSerializer" /> 类根据消息的响应 XML 命名空间。</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlDictionaryReader" /> 开启的响应 XML。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationSerializer.CanReadRequest(System.String)">
      <summary>检查指定的字符串是否与所识别的命名空间的 wst:RequestSecurityToken 消息通过包装 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer" />。</summary>
      <param name="trustMessage">要检查的 WS 信任消息。</param>
      <returns>true 如果消息是一个有效 wst:RequestSecurityToken 消息具有命名空间相匹配的 WS 信任协议此 <see cref="T:System.IdentityModel.Services.WSFederationSerializer" /> 支持; 否则为 false。</returns>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationSerializer.CanReadResponse(System.String)">
      <summary>检查指定的字符串是否与所识别的命名空间的 wst:RequestSecurityTokenResponse 消息通过包装 <see cref="T:System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer" />。</summary>
      <param name="trustMessage">要检查的 WS 信任消息。</param>
      <returns>true 如果消息是一个有效 wst:RequestSecurityTokenResponse 消息具有命名空间相匹配的 WS 信任协议此 <see cref="T:System.IdentityModel.Services.WSFederationSerializer" /> 支持; 否则为 false。</returns>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationSerializer.CreateRequest(System.IdentityModel.Services.FederationMessage,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>将转换 WS 联合身份验证登录请求消息发送给 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 安全令牌服务的对象 ( <see cref="T:System.IdentityModel.SecurityTokenService" /> 类) 可以使用。</summary>
      <param name="message">要转换的消息。 这应该是实例 <see cref="T:System.IdentityModel.Services.SignInRequestMessage" />。</param>
      <param name="context">当前的序列化上下文。</param>
      <returns>一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象，表示转换后的登录请求消息。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 为 null。- 或 -<paramref name="context" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">消息的类型不是 <see cref="T:System.IdentityModel.Services.SignInRequestMessage" />。- 或 -<see cref="T:System.IdentityModel.Services.SignInRequestMessage" /> 对象缺少必需的信息来构造一个有效 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationSerializer.CreateResponse(System.IdentityModel.Services.FederationMessage,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>WS 联合身份验证登录响应消息将对象转换为 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象。</summary>
      <param name="message">要转换的消息。 这应该是实例 <see cref="T:System.IdentityModel.Services.SignInResponseMessage" />。</param>
      <param name="context">当前的序列化上下文。</param>
      <returns>一个 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象，表示转换后的登录响应消息。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 为 null。- 或 -<paramref name="context" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">消息的类型不是 <see cref="T:System.IdentityModel.Services.SignInResponseMessage" />。- 或 -<see cref="T:System.IdentityModel.Services.SignInResponseMessage" /> 对象缺少必需的信息来构造一个有效 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationSerializer.GetReferencedRequest(System.String)">
      <summary>从引用的 URL 中获取的 wreq 字符串。</summary>
      <param name="wreqptr">请求数据的 URL。</param>
      <returns>从 URL 请求数据。</returns>
      <exception cref="T:System.NotSupportedException">引发的默认实现。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationSerializer.GetReferencedResult(System.String)">
      <summary>从引用的 URL 获取 wresult 字符串。</summary>
      <param name="wresultptr">结果数据的 URL。</param>
      <returns>从 URL 请求数据。</returns>
      <exception cref="T:System.NotSupportedException">引发的默认实现。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationSerializer.GetRequestAsString(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>将序列化为指定 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象转换为字符串。</summary>
      <param name="request">
        <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 要序列化对象。</param>
      <param name="context">当前的序列化上下文。</param>
      <returns>序列化的字符串表示形式 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> 为 null。- 或 -<paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.IdentityModel.Services.WSFederationSerializer.GetResponseAsString(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext)">
      <summary>将序列化为指定 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象转换为字符串。</summary>
      <param name="response">
        <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 要序列化对象。</param>
      <param name="context">当前的序列化上下文。</param>
      <returns>序列化的字符串表示形式 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="response" /> 为 null。- 或 -<paramref name="context" /> 为 null。</exception>
    </member>
    <member name="P:System.IdentityModel.Services.AttributeRequestMessage.Attribute">
      <summary>获取或设置消息的 wattr 参数。</summary>
      <returns>一个字符串，包含 wattr 参数的值。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.AttributeRequestMessage.AttributePtr">
      <summary>获取或设置消息的 wattrptr 参数。</summary>
      <returns>一个字符串，包含 wattrptr 参数的值。</returns>
      <exception cref="T:System.ArgumentException">尝试设置一个值，不是有效的 URI 发生。</exception>
    </member>
    <member name="P:System.IdentityModel.Services.AttributeRequestMessage.Reply">
      <summary>获取或设置消息的 wreply 参数。</summary>
      <returns>一个字符串，包含 wreply 参数的值。 这是答复应发送到的 URL。</returns>
      <exception cref="T:System.ArgumentException">尝试设置一个值，不是有效的 URI 发生。</exception>
    </member>
    <member name="P:System.IdentityModel.Services.AttributeRequestMessage.Result">
      <summary>获取或设置消息的 wresult 参数。</summary>
      <returns>一个字符串，包含 wresult 参数的值。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.AttributeRequestMessage.ResultPtr">
      <summary>获取或设置消息的 wresultptr 参数。</summary>
      <returns>一个字符串，包含 wresultptr 参数的值。</returns>
      <exception cref="T:System.ArgumentException">尝试设置一个值，不是有效的 URI 发生。</exception>
    </member>
    <member name="P:System.IdentityModel.Services.AuthorizationFailedEventArgs.RedirectToIdentityProvider">
      <summary>获取或设置一个值，该值指示是否运行时 (<see cref="T:System.IdentityModel.Services.WSFederationAuthenticationModule" />) 应重定向到标识提供程序。</summary>
      <returns>true 若要重定向;否则为 false。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.ChunkedCookieHandler.ChunkSize">
      <summary>获取当前实例所使用的块区大小。</summary>
      <returns>区块的大小，以字节为单位。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.ChunkedCookieHandlerElement.ChunkSize">
      <summary>获取或设置处理程序块的大小。</summary>
      <returns>区块的大小，以字节为单位。 默认值为 <see cref="F:System.IdentityModel.Services.ChunkedCookieHandler.DefaultChunkSize" />。 未设置的值低于最小块区大小由定义 <see cref="F:System.IdentityModel.Services.ChunkedCookieHandler.MinimumChunkSize" />。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.ClaimsAuthorizationModule.ClaimsAuthorizationManager">
      <summary>获取或设置该模块使用的当前声明授权管理器实例。</summary>
      <returns>声明授权管理器实例或 null 如果没有声明授权管理器与此模块相关联。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将该属性设置为 null 时发生。</exception>
    </member>
    <member name="P:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute.Operation">
      <summary>获取或设置应为其授权当前主体的操作对指定资源。</summary>
      <returns>应为其授权当前主体的操作。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute.Resource">
      <summary>获取或设置在其主体应该有权执行指定的操作 （操作） 的资源。</summary>
      <returns>当前的主体应授权在其的资源。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.FederationConfiguration.CookieHandler">
      <summary>获取或设置 cookie 处理将由会话的身份验证模块 (<see cref="T:System.IdentityModel.Services.SessionAuthenticationModule" />)。</summary>
      <returns>要使用的会话的身份验证模块 (SAM) 的 cookie 处理程序。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将该属性设置为 null 时发生。</exception>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.FederationConfiguration.CustomElement">
      <summary>获取或设置自定义的 XML 元素，如果任何，显示在此配置中。</summary>
      <returns>自定义的 XML 元素。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.FederationConfiguration.IdentityConfiguration">
      <summary>获取或设置 <see cref="T:System.IdentityModel.Configuration.IdentityConfiguration" /> 与此实例关联的对象。</summary>
      <returns>与此实例关联的标识配置对象。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将该属性设置为 null 时发生。</exception>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.FederationConfiguration.IsInitialized">
      <summary>获取或设置一个值，该值指示是否 <see cref="M:System.IdentityModel.Services.Configuration.FederationConfiguration.Initialize" /> 调用方法。</summary>
      <returns>true 如果已配置的配置对象。否则为 false。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.FederationConfiguration.Name">
      <summary>获取与此实例关联的名称。</summary>
      <returns>与此联合身份验证配置实例关联的名称。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.FederationConfiguration.ServiceCertificate">
      <summary>获取或设置用于 WS 联合身份验证协议消息进行签名的 X.509 证书。</summary>
      <returns>使用 WS 联合身份验证协议消息进行签名的 X.509 证书。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.FederationConfiguration.WsFederationConfiguration">
      <summary>获取或设置 WS 联合身份验证模块的配置设置 (<see cref="T:System.IdentityModel.Services.WSFederationAuthenticationModule" />)。</summary>
      <returns>WS 联合身份验证模块的配置设置。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将该属性设置为 null 时发生。</exception>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.FederationConfigurationCreatedEventArgs.FederationConfiguration">
      <summary>获取或设置从配置文件的已初始化的联合身份验证配置对象。</summary>
      <returns>从配置初始化联合身份验证配置对象。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.FederationConfigurationElement.CookieHandler">
      <summary>获取或设置子 &lt;cookieHandler&gt; 元素。</summary>
      <returns>子 &lt;cookieHandler&gt; 元素。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.FederationConfigurationElement.CustomElement">
      <summary>获取或设置自定义的子配置元素，如果存在。</summary>
      <returns>自定义配置元素中。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.FederationConfigurationElement.IdentityConfigurationName">
      <summary>获取或设置 identityConfigurationName 属性。</summary>
      <returns>名称 &lt;identityConfiguration&gt; 部分，以将与此相关联 &lt;federationConfiguration&gt; 元素。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.FederationConfigurationElement.IsConfigured">
      <summary>获取一个值，该值指示是否已使用非默认值配置此元素。</summary>
      <returns>true 如果该元素已配置为使用非默认值;否则为 false。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.FederationConfigurationElement.Name">
      <summary>获取或设置 name 属性。</summary>
      <returns>此联合身份验证配置元素的名称。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.FederationConfigurationElement.ServiceCertificate">
      <summary>获取或设置子 &lt;serviceCertificate&gt; 元素。</summary>
      <returns>子 &lt;serviceCertificate&gt; 元素。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.FederationConfigurationElement.WsFederation">
      <summary>获取或设置子 &lt;wsFederation&gt; 元素。</summary>
      <returns>子 &lt;wsFederation&gt; 元素。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.SystemIdentityModelServicesSection.Current">
      <summary>获取对 &lt;system.identityModel.services&gt; 从配置文件的部分。</summary>
      <returns>&lt;system.identityModel.services&gt; 从配置文件的部分。null 如果配置文件不包含 &lt;system.identityModel.services&gt; 部分。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.SystemIdentityModelServicesSection.DefaultFederationConfigurationElement">
      <summary>获取未命名 &lt;federationConfiguration&gt; 配置文件中的元素。</summary>
      <returns>未命名 &lt;federationConfiguration&gt; 配置文件中的元素。null 如果配置文件不包含 &lt;system.identityModel.services&gt; 部分。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.SystemIdentityModelServicesSection.FederationConfigurationElements">
      <summary>获取的集合 &lt;federationConfiguration&gt; 在此配置元素 &lt;system.identityModel.services&gt; 部分。</summary>
      <returns>一个包含的所有集合 &lt;federationConfiguration&gt; 在此配置元素 &lt;system.identityModel.services&gt; 部分。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.WsFederationConfiguration.AuthenticationType">
      <summary>获取或设置要使用 WS 联合身份验证登录请求 ("wsignin1.0") 中的 wauth 参数的值。</summary>
      <returns>一个 URI，指定身份验证类型。 默认值为一个空字符串。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.WsFederationConfiguration.CustomAttributes">
      <summary>获取一个字典，其中包含在指定的任何额外属性 &lt;wsFederation&gt; 配置文件中的元素。</summary>
      <returns>包含额外的属性的字典。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.WsFederationConfiguration.Freshness">
      <summary>获取或设置要使用 WS 联合身份验证登录请求 ("wsignin1.0") 中的 wfresh 参数的值。</summary>
      <returns>所需最长寿命的身份验证请求，以分钟为单位。 默认值为 <see cref="F:System.IdentityModel.Services.Configuration.WsFederationConfiguration.DefaultFreshness" />。.NET Framework 4.5 的下一版本 <see cref="P:System.IdentityModel.Services.Configuration.WsFederationConfiguration.Freshness" /> 属性的类型将为 <see cref="T:System.String" /> ，其默认值将为 null。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.WsFederationConfiguration.HomeRealm">
      <summary>获取或设置要使用 WS 联合身份验证登录请求 ("wsignin1.0") 中的 whr 参数的值。</summary>
      <returns>主领域标识提供程序的地址。 默认值为一个空字符串。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.WsFederationConfiguration.Issuer">
      <summary>获取或设置标识安全令牌的预期颁发者的 URI。</summary>
      <returns>用于标识安全令牌服务 (STS) 的 URI。 不能为 null。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将该属性设置为 null 时发生。</exception>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.WsFederationConfiguration.PassiveRedirectEnabled">
      <summary>获取或设置一个值，指定是否启用该模块以启动 WS 联合身份验证协议重定向。</summary>
      <returns>true 若要启用重定向;否则为 false。 默认值是 <see cref="F:System.IdentityModel.Services.Configuration.WsFederationConfiguration.DefaultPassiveRedirectEnabled" />, ，启用重定向。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.WsFederationConfiguration.PersistentCookiesOnPassiveRedirects">
      <summary>获取或设置一个值，指定是否在身份验证成功发出一个持久性会话 cookie。</summary>
      <returns>true 若要发出持续会话 cookie;否则为 false。 默认值是 <see cref="F:System.IdentityModel.Services.Configuration.WsFederationConfiguration.DefaultPersistentCookiesOnPassiveRedirects" />, ，未启用 cookie。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.WsFederationConfiguration.Policy">
      <summary>获取或设置要在 WS 联合身份验证登录请求 ("wsignin1.0") 中使用的 wp 参数的值。</summary>
      <returns>标识要使用的策略的 URL。 默认值为一个空字符串。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.WsFederationConfiguration.Realm">
      <summary>获取或设置要用于 WS 联合身份验证登录请求 ("wsignin1.0") 的 wtrealm 参数的值。</summary>
      <returns>一个 URI，对安全令牌服务 (STS) 标识信赖方 (RP)。 不能为 null。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将该属性设置为 null 时发生。</exception>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.WsFederationConfiguration.Reply">
      <summary>获取或设置要使用 WS 联合身份验证登录请求 ("wsignin1.0") 中的 wreply 参数的值。</summary>
      <returns>标识从该处信赖方 (RP) 应用程序想要从安全令牌服务 (STS) 都收到了答复的地址的 URL。 默认值为一个空字符串。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.WsFederationConfiguration.Request">
      <summary>获取或设置要使用 WS 联合身份验证登录请求 ("wsignin1.0") 中的 wreq 参数的值。</summary>
      <returns>令牌颁发请求表示为 &lt;wst:RequestSecurityToken&gt; 元素。 默认值为一个空字符串。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.WsFederationConfiguration.RequestPtr">
      <summary>获取或设置要使用 WS 联合身份验证登录请求 ("wsignin1.0") 中的 wreqptr 参数的值。</summary>
      <returns>指定表示与令牌颁发请求的位置的 URL &lt;wst:RequestSecurityToken&gt; 元素</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.WsFederationConfiguration.RequireHttps">
      <summary>获取或设置一个值，指定是否与安全令牌服务 (STS) 的通信必须使用 HTTPS 协议。</summary>
      <returns>true 如果必须使用 HTTPS; 保护与 STS 进行通信，否则为 false。 默认值是 <see cref="F:System.IdentityModel.Services.Configuration.WsFederationConfiguration.DefaultRequireHttps" />, ，则需要使用 HTTPS。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.WsFederationConfiguration.Resource">
      <summary>获取或设置要使用 WS 联合身份验证登录请求 ("wsignin1.0") 中的 wres 参数的值。</summary>
      <returns>为标识要访问的资源的信赖方 (RP) 的 URI 对安全令牌服务 (STS)。 默认值为一个空字符串。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.WsFederationConfiguration.SignInQueryString">
      <summary>获取或设置包含在 WS 联合身份验证登录请求 ("wsignin1.0") 中发送任何其他参数的查询字符串。</summary>
      <returns>包含以下列格式的更多的消息参数的 URL 片段 ︰ “?param1=value1&amp;param2=value2&amp;paramN=valueN”。 默认值为一个空字符串。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.WsFederationConfiguration.SignOutQueryString">
      <summary>获取或设置在被动注销过程包含在 WS 联合身份验证注销请求 ("wsignout1.0") 中发送任何其他参数的查询字符串。</summary>
      <returns>包含以下列格式的更多的消息参数的 URL 片段 ︰ “?param1=value1&amp;param2=value2&amp;paramN=valueN”。 默认值为一个空字符串。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.WsFederationConfiguration.SignOutReply">
      <summary>获取或设置 wreply 参数用于在 WS 联合身份验证注销请求 ("wsignout1.0") 过程中的值。</summary>
      <returns>该客户端应被重定向到由安全令牌服务 (STS) 期间被动注销通过 WS 联合身份验证协议的 URL。 默认值为一个空字符串。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.WsFederationConfiguration.XmlDictionaryReaderQuotas">
      <summary>获取或设置此实例所使用的 XML 字典读取器可配置配额值。</summary>
      <returns>包含可配置配额值的对象。 默认对象 <see cref="P:System.Xml.XmlDictionaryReaderQuotas.MaxArrayLength" /> 属性设置为 <see cref="F:System.IdentityModel.Services.Configuration.WsFederationConfiguration.DefaultMaxArrayLength" /> 和 <see cref="P:System.Xml.XmlDictionaryReaderQuotas.MaxStringContentLength" /> 属性设置为 <see cref="F:System.IdentityModel.Services.Configuration.WsFederationConfiguration.DefaultMaxStringContentLength" />。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将该属性设置为 null 时发生。</exception>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.WSFederationElement.AuthenticationType">
      <summary>获取或设置 authenticationType 属性。</summary>
      <returns>一个字符串，包含表示 WS 联合身份验证登录请求 wauth 类型的 URI。 默认值为一个空字符串。 可选。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.WSFederationElement.CustomAttributes">
      <summary>获取或设置字典，其中包含任何自定义属性。</summary>
      <returns>包含由属性名称进行键控的自定义属性的字典。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.WSFederationElement.Freshness">
      <summary>获取或设置 freshness 属性。</summary>
      <returns>所需的新鲜度。 设置的 WS 联合身份验证登录请求 wfresh 参数。 可选。.NET Framework 4.5 的下一版本 <see cref="P:System.IdentityModel.Services.Configuration.WSFederationElement.Freshness" /> 属性的类型将为 <see cref="T:System.String" /> ，其默认值将为 null。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.WSFederationElement.HomeRealm">
      <summary>获取或设置 homeRealm 属性。</summary>
      <returns>一个字符串，其中包含标识提供程序 (IP) 的主领域的 URI。 默认值为一个空字符串。 设置的 WS 联合身份验证登录请求 whr 参数。 可选。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.WSFederationElement.IsConfigured">
      <summary>获取一个值，该值指示是否已使用非默认值配置此元素。</summary>
      <returns>true 如果该元素已配置为使用非默认值;否则为 false。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.WSFederationElement.Issuer">
      <summary>获取或设置 issuer 属性。</summary>
      <returns>一个字符串，其中包含令牌的颁发者的 URI。 默认值为一个空字符串。 必需。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.WSFederationElement.PassiveRedirectEnabled">
      <summary>获取或设置 passiveRedirectEnabled 属性。</summary>
      <returns>true 若要启用 WS 联合身份验证模块 (WSFAM) 自动将未经授权的请求重定向到 STS;否则为 false。 默认值是 true, ，未经授权的请求将自动重定向。 可选。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.WSFederationElement.PersistentCookiesOnPassiveRedirects">
      <summary>获取或设置 persistentCookiesOnPassiveRedirects 属性。</summary>
      <returns>true 当 WS 联合身份验证模块 (WSFAM) 能够启动 WS 联合身份验证被动协议时才颁发永久 cookie 将重定向;否则为 false。 默认值是 false, ，不颁发 cookie。 可选。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.WSFederationElement.Policy">
      <summary>获取或设置 policy 属性。</summary>
      <returns>一个字符串，其中包含相关的策略的 URI。 默认值为一个空字符串。 设置的 WS 联合身份验证登录请求 wp 参数。 可选。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.WSFederationElement.Realm">
      <summary>获取或设置 realm 属性。</summary>
      <returns>一个字符串，其中包含请求的领域的 URI。 默认值为一个空字符串。 设置的 WS 联合身份验证登录请求 wtrealm 参数。 必需。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.WSFederationElement.Reply">
      <summary>获取或设置 reply 属性。</summary>
      <returns>一个字符串，包含要回复地址的 URI。 默认值为一个空字符串。 在 WS 联合身份验证登录请求上设置 wreply 参数。 可选。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.WSFederationElement.Request">
      <summary>获取或设置 request 属性。</summary>
      <returns>一个字符串，包含令牌颁发请求。 默认值为一个空字符串。 设置 WS 联合身份验证登录请求的 wreq 参数。 可选。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.WSFederationElement.RequestPtr">
      <summary>获取或设置 requestPtr 属性。</summary>
      <returns>一个指定令牌颁发请求的位置的 URL。 默认值为一个空字符串。 设置的 WS 联合身份验证登录请求 wreqptr 参数。 可选。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.WSFederationElement.RequireHttps">
      <summary>获取或设置 requireHttps 属性。</summary>
      <returns>true 若要指定的 WS 联合身份验证模块 (WSFAM) 仅将重定向到安全的 URL sts;否则为 false。 默认值是 true, ，WSFAM 仅将重定向到安全的 URL sts。 可选。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.WSFederationElement.Resource">
      <summary>获取或设置 resource 属性。</summary>
      <returns>一个字符串，其中包含的 URI 的 WS 联合身份验证资源值。 默认值为一个空字符串。 设置请求 WS 联合身份验证登录请求 wres 参数。 可选。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.WSFederationElement.SignInQueryString">
      <summary>获取或设置 signInQueryString 属性。</summary>
      <returns>应用程序定义参数的 WS-联合身份验证登录请求 URL。 默认值为一个空字符串。 提供一个扩展性点，以便在登录请求 URL 中包括应用程序定义查询参数。 可选。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.WSFederationElement.SignOutQueryString">
      <summary>获取或设置 signOutQueryString 属性。</summary>
      <returns>任何应用程序定义为 WS 联合身份验证注销请求 URL 的参数。 默认值为一个空字符串。 提供一个扩展性点，以便在注销请求 URL 中包括应用程序定义查询参数。 可选。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Configuration.WSFederationElement.SignOutReply">
      <summary>获取或设置 signOutReply 属性。</summary>
      <returns>一个字符串，包含要返回到以下注销的 URL。 在 WS 联合身份验证的注销请求上设置 wreply 参数。 可选。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.CookieHandler.Domain">
      <summary>获取或设置使用 cookie 的域。</summary>
      <returns>使用 cookie 的域。 默认值为 null。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.CookieHandler.HideFromClientScript">
      <summary>获取或设置一个值，该值指示是否应从客户端脚本隐藏该 cookie。</summary>
      <returns>true 如果应从客户端脚本; 隐藏 cookie，否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.CookieHandler.Name">
      <summary>获取或设置由该处理程序编写的 cookie 的基名称。</summary>
      <returns>要使用 cookie 的基名称。 默认值为"FedAuth"。</returns>
      <exception cref="T:System.ArgumentException">尝试设置 null 或出现空值。</exception>
    </member>
    <member name="P:System.IdentityModel.Services.CookieHandler.Path">
      <summary>获取或设置 cookie 编写处理程序的虚拟路径。</summary>
      <returns>虚拟路径。 默认值为 ASP.NET 应用程序的根目录。</returns>
      <exception cref="T:System.ArgumentException">尝试设置 null 或出现空值。</exception>
    </member>
    <member name="P:System.IdentityModel.Services.CookieHandler.PersistentSessionLifetime">
      <summary>持续会话的生存期。 如果为零，总是使用临时会话。</summary>
      <returns>会话生存期中。 默认值为 null。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">指定一个值，也不可小于零。</exception>
    </member>
    <member name="P:System.IdentityModel.Services.CookieHandler.RequireSsl">
      <summary>获取或设置一个值，指定是否应该只能与 SSL 一起使用 cookie。</summary>
      <returns>true 如果该 cookie 应仅用于通过 SSL 连接;否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.CookieHandlerElement.ChunkedCookieHandler">
      <summary>获取或设置一个分块的 cookie 处理程序。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Services.ChunkedCookieHandlerElement" /> 提供分块的 cookie 处理程序的其他配置。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.CookieHandlerElement.CustomCookieHandler">
      <summary>获取或设置自定义 cookie 处理程序类型。 正在配置自定义 cookie 处理程序时，必须设置此属性。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Configuration.CustomTypeElement" /> ，它定义的自定义 cookie 处理程序类型。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.CookieHandlerElement.Domain">
      <summary>获取或设置由该处理程序编写的 cookie 的域值。</summary>
      <returns>域值中。 默认值为一个空字符串。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.CookieHandlerElement.HideFromScript">
      <summary>获取或设置一个值，指定是否 httpOnly 应将此处理程序写入的 cookie 属性设置。</summary>
      <returns>true 如果 httpOnly 属性应设置; 否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.CookieHandlerElement.Mode">
      <summary>获取或设置 cookie 处理程序模式。</summary>
      <returns>一个有效 <see cref="T:System.IdentityModel.Services.CookieHandlerMode" /> 值，该值指示正在其上配置的 cookie 处理程序的类型。 默认值是 <see cref="F:System.IdentityModel.Services.CookieHandlerMode.Default" />, ，这表示分块的 cookie 处理程序。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.CookieHandlerElement.Name">
      <summary>获取或设置由该处理程序编写的任何 cookie 的基名称。</summary>
      <returns>基名称的 cookie。 默认值为"FedAuth"。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.CookieHandlerElement.Path">
      <summary>获取或设置由该处理程序编写的 cookie 的路径值。</summary>
      <returns>一个字符串，包含的路径。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.CookieHandlerElement.PersistentSessionLifetime">
      <summary>获取或设置由该处理程序颁发的 cookie 的生存期。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" /> 表示 cookie 的生命周期。 默认值为 0 天 ("0.0:0:0")。 值必须是 0 ("0.0:0:0") 和 ("365.0:0:0") 的 365 天之间的值。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.CookieHandlerElement.RequireSsl">
      <summary>获取或设置一个值，指定是否应该只能与 SSL 一起使用 cookie。</summary>
      <returns>true 如果该 cookie 应仅用于通过 SSL 连接;否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.ErrorEventArgs.Exception">
      <summary>获取发生的异常。</summary>
      <returns>发生的异常。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.FederatedAuthentication.ClaimsAuthorizationModule">
      <summary>获取 web 应用程序使用的声明授权模块。</summary>
      <returns>声明授权模块。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration">
      <summary>获取与单一实例 <see cref="T:System.IdentityModel.Services.Configuration.FederationConfiguration" /> HTTP 模块在此 web 应用程序所用的实例。</summary>
      <returns>联合身份验证配置实例。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.IdentityModel.Services.Configuration.FederationConfigurationCreatedEventArgs.FederationConfiguration" /> 属性设置为 null 的事件处理程序通过 <see cref="E:System.IdentityModel.Services.FederatedAuthentication.FederationConfigurationCreated" /> 事件。</exception>
    </member>
    <member name="P:System.IdentityModel.Services.FederatedAuthentication.SessionAuthenticationModule">
      <summary>获取 web 应用程序使用的会话的身份验证模块 (SAM)。</summary>
      <returns>会话的身份验证模块。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.FederatedAuthentication.WSFederationAuthenticationModule">
      <summary>获取 web 应用程序使用 WS 联合身份验证模块 (WSFAM)。</summary>
      <returns>WS 联合身份验证模块。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.FederatedSessionExpiredException.Expired">
      <summary>获取会话过期的时间。</summary>
      <returns>会话过期时间。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.FederatedSessionExpiredException.Tested">
      <summary>获取该会话已验证的时间。</summary>
      <returns>验证会话的时间。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.FederationMessage.BaseUri">
      <summary>获取或设置消息适用的基 URL。</summary>
      <returns>一个 <see cref="T:System.Uri" /> ，其中包含的基 URL。</returns>
      <exception cref="T:System.ArgumentNullException">尝试设置一个值，该值 null 时发生。</exception>
      <exception cref="T:System.IdentityModel.Services.WSFederationMessageException">尝试设置一个值，不是有效的 URI 发生。</exception>
    </member>
    <member name="P:System.IdentityModel.Services.FederationMessage.Parameters">
      <summary>作为字典中获取消息参数。</summary>
      <returns>一个包含消息参数的字典。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.HttpModuleBase.FederationConfiguration">
      <summary>获取或设置 <see cref="T:System.IdentityModel.Services.Configuration.FederationConfiguration" /> 实际上是为当前模块的对象。</summary>
      <returns>
        <see cref="T:System.IdentityModel.Services.Configuration.FederationConfiguration" /> 实际上是为当前模块的对象。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将该属性设置为 null 时发生。</exception>
    </member>
    <member name="P:System.IdentityModel.Services.PseudonymRequestMessage.Pseudonym">
      <summary>获取或设置消息的 wpseudo 参数。</summary>
      <returns>一个字符串，包含 wpseudo 参数的值。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.PseudonymRequestMessage.PseudonymPtr">
      <summary>获取或设置消息的 wpseudoptr 参数。</summary>
      <returns>一个字符串，包含 wpseudoptr 参数的值。</returns>
      <exception cref="T:System.ArgumentException">尝试设置一个值，不是有效的 URI 发生。</exception>
    </member>
    <member name="P:System.IdentityModel.Services.PseudonymRequestMessage.Reply">
      <summary>获取或设置消息的答复参数。</summary>
      <returns>一个字符串，包含 wreply 参数的值。 这是答复应发送到的 URL。</returns>
      <exception cref="T:System.ArgumentException">尝试设置一个值，不是有效的 URI 发生。</exception>
    </member>
    <member name="P:System.IdentityModel.Services.PseudonymRequestMessage.Result">
      <summary>获取或设置消息的 wresult 参数。</summary>
      <returns>一个字符串，包含 wresult 参数的值。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.PseudonymRequestMessage.ResultPtr">
      <summary>获取或设置消息的 wresultptr 参数。</summary>
      <returns>一个字符串，包含 wresultptr 参数的值。 这是一个 URI。</returns>
      <exception cref="T:System.ArgumentException">尝试设置一个值，不是有效的 URI 发生。</exception>
    </member>
    <member name="P:System.IdentityModel.Services.RedirectingToIdentityProviderEventArgs.SignInRequestMessage">
      <summary>获取或设置用于将用户重定向到标识提供程序的 WS 联合身份验证被动登录消息。</summary>
      <returns>WS 联合身份验证登录消息，将用来将用户重定向到标识提供程序。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将该属性设置为 null 时发生。</exception>
    </member>
    <member name="P:System.IdentityModel.Services.SecurityTokenReceivedEventArgs.SecurityToken">
      <summary>获取或设置颁发的安全令牌。</summary>
      <returns>颁发的安全令牌。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.SecurityTokenReceivedEventArgs.SignInContext">
      <summary>获取在控件中指定的登录上下文。</summary>
      <returns>在登录上下文中。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.SecurityTokenValidatedEventArgs.ClaimsPrincipal">
      <summary>获取或设置 <see cref="T:System.Security.Claims.ClaimsPrincipal" /> 中时得到的令牌验证。</summary>
      <returns>从令牌验证结果所声明的主体。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.ServiceCertificateElement.CertificateReference">
      <summary>获取或设置子 &lt;certificateReference&gt; 元素为此 &lt;serviceCertificate&gt; 元素。</summary>
      <returns>&lt;certificateReference&gt; 元素。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.SessionAuthenticationModule.ContextSessionSecurityToken">
      <summary>获取活动 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 当前 <see cref="T:System.Web.HttpContext" />。</summary>
      <returns>活动会话的安全令牌。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler">
      <summary>获取用于读取、 写入和删除会话 cookie 的 cookie 处理程序。</summary>
      <returns>Cookie 处理程序。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.SessionAuthenticationModule.IsReferenceMode">
      <summary>获取或设置一个值，指定是否 （声明值等） 的会话信息 应存储在会话 cookie 或是否应在服务器端，使用 cookie 来存储只是引用存储会话内容。</summary>
      <returns>true 已颁发的 cookie 是否采用引用模式;否则为 false。 默认值是 false, ，它指定颁发 cookie 是否未处于引用模式。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs.SessionToken">
      <summary>获取或设置已创建的会话安全令牌。</summary>
      <returns>已创建的会话令牌。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs.WriteSessionCookie">
      <summary>获取或设置一个值，该值指示是否应在响应中写入一个 cookie。</summary>
      <returns>true 若要在响应中; 中编写一个 cookie否则为 false。 默认值是 false, ，cookie 不在响应中编写。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs.ReissueCookie">
      <summary>获取或设置一个值，该值指定是否以重新颁发与响应的会话 cookie。</summary>
      <returns>true 以重新颁发响应; 与会话 cookie否则为 false。 默认值是 false, 、 不随响应一起银行重新签发 cookie 的会话。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs.SessionToken">
      <summary>获取或设置已接收到的会话安全令牌。</summary>
      <returns>已收到会话令牌。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.SigningOutEventArgs.IPInitiated">
      <summary>获取 <see cref="T:System.IdentityModel.Services.SigningOutEventArgs" /> ，该值指示由标识提供程序 (IP) 启动注销。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Services.SigningOutEventArgs" /> 具有其 <see cref="P:System.IdentityModel.Services.SigningOutEventArgs.IsIPInitiated" /> 属性集 true。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.SigningOutEventArgs.IsIPInitiated">
      <summary>获取一个值，该值指示是否通过 WS 联合身份验证注销清除消息 ("wsignoutcleanup1.0") 的标识提供程序 (IP) 启动注销。</summary>
      <returns>true 如果由 IP; 启动注销否则为 false。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.SigningOutEventArgs.RPInitiated">
      <summary>获取 <see cref="T:System.IdentityModel.Services.SigningOutEventArgs" /> ，该值指示由信赖方 (RP) 启动注销。</summary>
      <returns>一个 <see cref="T:System.IdentityModel.Services.SigningOutEventArgs" /> 具有其 <see cref="P:System.IdentityModel.Services.SigningOutEventArgs.IsIPInitiated" /> 属性集 false。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.SignInRequestMessage.AuthenticationType">
      <summary>获取或设置消息的 wauth 参数。</summary>
      <returns>身份验证类型。 这被指定为 URI。</returns>
      <exception cref="T:System.ArgumentException">设置一个值，不是有效的绝对 URI 的尝试时发生。</exception>
    </member>
    <member name="P:System.IdentityModel.Services.SignInRequestMessage.CurrentTime">
      <summary>获取或设置消息的 wct 参数。</summary>
      <returns>以 UTC datetime 字符串形式指定的 wct 参数值。</returns>
      <exception cref="T:System.ArgumentException">尝试设置一个值，不是有效的日期时间字符串时发生。</exception>
    </member>
    <member name="P:System.IdentityModel.Services.SignInRequestMessage.Federation">
      <summary>获取或设置消息的 wfed 参数。</summary>
      <returns>Wfed 参数的值。 这被指定为 URI。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.SignInRequestMessage.Freshness">
      <summary>获取或设置消息的 wfresh 参数。</summary>
      <returns>Wfresh 参数的值。 这应该是以字符串形式表示的整数。 它在身份验证都有效的几分钟内指定的最长时间。 零表示令牌颁发之前会提示用户。</returns>
      <exception cref="T:System.ArgumentException">尝试设置一个值，不是一个整数的字符串表示。</exception>
    </member>
    <member name="P:System.IdentityModel.Services.SignInRequestMessage.HomeRealm">
      <summary>获取或设置消息的 whr 参数。</summary>
      <returns>Whr 参数的值。 这被指定为 URI。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.SignInRequestMessage.Policy">
      <summary>获取或设置消息的 wp 参数。</summary>
      <returns>Wp 参数的值。 这被指定为 URI。</returns>
      <exception cref="T:System.ArgumentException">设置一个值，不是有效的绝对 URI 的尝试时发生。</exception>
    </member>
    <member name="P:System.IdentityModel.Services.SignInRequestMessage.Realm">
      <summary>获取或设置消息的 wtrealm 参数。</summary>
      <returns>Wtrealm 参数的值。 这被指定为 URI。</returns>
      <exception cref="T:System.ArgumentException">设置一个值，不是有效的绝对 URI 的尝试时发生。</exception>
    </member>
    <member name="P:System.IdentityModel.Services.SignInRequestMessage.Reply">
      <summary>获取或设置消息的 wreply 参数。</summary>
      <returns>Wreply 参数的值。 这被指定为 URI。</returns>
      <exception cref="T:System.ArgumentException">设置一个值，不是有效的绝对 URI 的尝试时发生。</exception>
    </member>
    <member name="P:System.IdentityModel.Services.SignInRequestMessage.Request">
      <summary>获取或设置消息的 wreq 参数。</summary>
      <returns>Wreq 参数的值。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.SignInRequestMessage.RequestPtr">
      <summary>获取或设置消息的 wreqptr 参数。</summary>
      <returns>Wreqptr 参数的值。</returns>
      <exception cref="T:System.ArgumentException">设置一个值，不是有效的绝对 URI 的尝试时发生。</exception>
    </member>
    <member name="P:System.IdentityModel.Services.SignInRequestMessage.RequestUrl">
      <summary>获取对应于该消息的 URL 的字符串表示形式。</summary>
      <returns>一个序列化当前实例中的 URL。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.SignInRequestMessage.Resource">
      <summary>获取或设置消息的 wres 参数。</summary>
      <returns>Wres 参数的值。</returns>
      <exception cref="T:System.ArgumentException">设置一个值，不是有效的绝对 URI 的尝试时发生。</exception>
    </member>
    <member name="P:System.IdentityModel.Services.SignInResponseMessage.Result">
      <summary>获取或设置消息的 wresult 参数。</summary>
      <returns>Wresult 参数的值。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.SignInResponseMessage.ResultPtr">
      <summary>获取或设置消息的 wresultptr 参数。</summary>
      <returns>Wresultptr 参数的值。</returns>
      <exception cref="T:System.ArgumentException">设置一个值，不是有效的绝对 URI 的尝试时发生。 可以是 null 或为空。</exception>
    </member>
    <member name="P:System.IdentityModel.Services.SignOutCleanupRequestMessage.Reply">
      <summary>获取或设置消息的 wreply 参数。</summary>
      <returns>Wreply 参数的值。 这是答复应发送到的 URL。</returns>
      <exception cref="T:System.ArgumentException">设置一个值，不是有效的绝对 URI 的尝试时发生。</exception>
    </member>
    <member name="P:System.IdentityModel.Services.SignOutRequestMessage.Reply">
      <summary>获取或设置消息的 wreply 参数。</summary>
      <returns>Wreply 参数的值。 这是浏览器应重定向到的 URL。</returns>
      <exception cref="T:System.ArgumentException">设置一个值，不是有效的绝对 URI 的尝试时发生。</exception>
    </member>
    <member name="P:System.IdentityModel.Services.Tokens.MembershipUserNameSecurityTokenHandler.CanValidateToken">
      <summary>获取一个值，该值指示当前实例是否可以验证类型的安全令牌 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" />。 总是为 true。</summary>
      <returns>true 如果令牌处理程序可以验证用户名安全令牌。否则为 false。 总是为 true。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.Tokens.MembershipUserNameSecurityTokenHandler.MembershipProvider">
      <summary>获取 <see cref="T:System.Web.Security.MembershipProvider" /> 配置的当前实例。</summary>
      <returns>配置成员资格提供程序。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.WSFederationAuthenticationModule.AuthenticationType">
      <summary>获取或设置要使用 WS 联合身份验证登录请求 ("wsignin1.0") 中的 wauth 参数的值。</summary>
      <returns>一个 URI，指定身份验证类型。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Freshness">
      <summary>获取或设置要使用 WS 联合身份验证登录请求 ("wsignin1.0") 中的 wfresh 参数的值。</summary>
      <returns>所需最长寿命的身份验证请求，以分钟为单位。.NET Framework 4.5 的下一版本 <see cref="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Freshness" /> 属性的类型将为 <see cref="T:System.String" /> ，其默认值将为 null。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.WSFederationAuthenticationModule.HomeRealm">
      <summary>获取或设置要使用 WS 联合身份验证登录请求 ("wsignin1.0") 中的 whr 参数的值。</summary>
      <returns>标识提供程序的地址。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer">
      <summary>获取或设置标识安全令牌的预期颁发者的 URI。</summary>
      <returns>用于标识安全令牌服务 (STS) 的 URI。</returns>
      <exception cref="T:System.ArgumentException">尝试将该属性设置为 null 或空字符串的出现。- 或 -尝试将属性设置为不是有效的绝对 URI 的值时发生。</exception>
    </member>
    <member name="P:System.IdentityModel.Services.WSFederationAuthenticationModule.PassiveRedirectEnabled">
      <summary>获取或设置一个值，指定是否启用该模块以启动 WS 联合身份验证协议重定向。</summary>
      <returns>true 若要启用重定向;否则为 false。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.WSFederationAuthenticationModule.PersistentCookiesOnPassiveRedirects">
      <summary>获取或设置一个值，指定是否在身份验证成功发出一个持久性会话 cookie。</summary>
      <returns>true 若要发出持续会话 cookie;否则为 false。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Policy">
      <summary>获取或设置要在 WS 联合身份验证登录请求 ("wsignin1.0") 中使用的 wp 参数的值。</summary>
      <returns>标识要使用的策略的 URL。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Realm">
      <summary>获取或设置要用于 WS 联合身份验证登录请求 ("wsignin1.0") 的 wtrealm 参数的值。</summary>
      <returns>一个 URI，对安全令牌服务 (STS) 标识信赖方 (RP)。</returns>
      <exception cref="T:System.ArgumentException">尝试将该属性设置为 null 或空字符串的出现。- 或 -尝试将属性设置为不是有效的绝对 URI 的值时发生。</exception>
    </member>
    <member name="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Reply">
      <summary>获取或设置要使用 WS 联合身份验证登录请求 ("wsignin1.0") 中的 wreply 参数的值。</summary>
      <returns>标识从该处信赖方 (RP) 应用程序想要从安全令牌服务 (STS) 都收到了答复的地址的 URL。</returns>
      <exception cref="T:System.ArgumentException">尝试将属性设置为不是有效的绝对 URI 的值时发生。</exception>
    </member>
    <member name="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Request">
      <summary>获取或设置要使用 WS 联合身份验证登录请求 ("wsignin1.0") 中的 wreq 参数的值。</summary>
      <returns>令牌颁发请求表示为 &lt;wst:RequestSecurityToken&gt; 元素。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.WSFederationAuthenticationModule.RequestPtr">
      <summary>获取或设置要使用 WS 联合身份验证登录请求 ("wsignin1.0") 中的 wreqptr 参数的值。</summary>
      <returns>指定表示与令牌颁发请求的位置的 URL &lt;wst:RequestSecurityToken&gt; 元素</returns>
      <exception cref="T:System.ArgumentException">尝试将属性设置为不是有效的绝对 URI 的值时发生。</exception>
    </member>
    <member name="P:System.IdentityModel.Services.WSFederationAuthenticationModule.RequireHttps">
      <summary>获取或设置一个值，指定是否与安全令牌服务 (STS) 的通信必须使用 HTTPS 协议。</summary>
      <returns>true 如果必须使用 HTTPS; 保护与 STS 进行通信，否则为 false。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Resource">
      <summary>获取或设置要使用 WS 联合身份验证登录请求 ("wsignin1.0") 中的 wres 参数的值。</summary>
      <returns>为标识要访问的资源的信赖方 (RP) 的 URI 对安全令牌服务 (STS)。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.WSFederationAuthenticationModule.SignInContext">
      <summary>获取或设置应用程序特定的上下文的值包含在 WS 联合身份验证登录请求中的 wctx 参数。</summary>
      <returns>要在登录请求的 wctx 参数中包含的应用程序特定的上下文值。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.WSFederationAuthenticationModule.SignInQueryString">
      <summary>获取或设置包含在 WS 联合身份验证登录请求 ("wsignin1.0") 中发送任何其他参数的查询字符串。</summary>
      <returns>包含以下列格式的更多的消息参数的 URL 片段 ︰ param1=value1&amp;param2=value2&amp;paramN=valueN。 默认值为一个空字符串。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将该属性设置为 null 时发生。</exception>
    </member>
    <member name="P:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOutQueryString">
      <summary>获取或设置包含在 WS 联合身份验证注销请求 ("wsignout1.0") 中发送任何其他参数的查询字符串。</summary>
      <returns>包含以下列格式的更多的消息参数的 URL 片段 ︰ param1=value1&amp;param2=value2&amp;paramN=valueN。 默认值为一个空字符串。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将该属性设置为 null 时发生。</exception>
    </member>
    <member name="P:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOutReply">
      <summary>获取或设置 wreply 参数用于在 WS 联合身份验证注销请求 ("wsignout1.0") 过程中的值。</summary>
      <returns>向其客户端应重定向通过按照注销通过 WS 联合身份验证协议的安全令牌服务 (STS) 的 URL。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.WSFederationAuthenticationModule.XmlDictionaryReaderQuotas">
      <summary>获取或设置 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> 对象时要使用 WS 联合身份验证登录响应消息反序列化以获取安全令牌服务 (STS) 颁发的令牌。</summary>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> 对象时要使用 WS 联合身份验证登录响应消息反序列化以获取安全令牌服务 (STS) 颁发的令牌。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将该属性设置为 null 时发生。</exception>
    </member>
    <member name="P:System.IdentityModel.Services.WSFederationMessage.Action">
      <summary>获取或设置消息的 wa 参数。</summary>
      <returns>Wa 参数的值。</returns>
      <exception cref="T:System.ArgumentException">尝试设置一个值，该值 null 或空发生。</exception>
    </member>
    <member name="P:System.IdentityModel.Services.WSFederationMessage.Context">
      <summary>获取或设置消息的 wctx 参数。</summary>
      <returns>Wctx 参数的值。</returns>
    </member>
    <member name="P:System.IdentityModel.Services.WSFederationMessage.Encoding">
      <summary>获取或设置消息的 wencoding 参数。</summary>
      <returns>Wencoding 参数的值。</returns>
    </member>
    <member name="T:System.IdentityModel.Services.ApplicationType">
      <summary>指定类型的应用程序。</summary>
    </member>
    <member name="F:System.IdentityModel.Services.ApplicationType.AspNetWebApplication">
      <summary>ASP.NET Web 应用程序。</summary>
    </member>
    <member name="F:System.IdentityModel.Services.ApplicationType.WcfServiceApplication">
      <summary>一个 Windows Communication Foundation (WCF) 应用程序。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.AsynchronousOperationException">
      <summary>异步操作期间发生错误时引发的异常。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.AttributeRequestMessage">
      <summary>表示 WS 联合身份验证属性请求消息。 当接收到消息中的 wa 参数"wattr1.0"时，将创建此消息。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.AuthorizationFailedEventArgs">
      <summary>为 <see cref="E:System.IdentityModel.Services.WSFederationAuthenticationModule.AuthorizationFailed" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.ChunkedCookieHandler">
      <summary>表示写入 cookie 数据以使 cookie 永远不会超过集大小的 cookie 处理。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.ChunkedCookieHandlerElement">
      <summary>表示 &lt;chunkedCookieHandler&gt; 配置元素。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.ClaimsAuthorizationModule">
      <summary>表示 HTTP 模块，用于执行基于声明的授权。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.ClaimsPrincipalPermission">
      <summary>表示一个权限，它使用 <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> 实现，以确定是否应授予对资源的访问权限的活动的主体。 此类不能被继承。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute">
      <summary>表示用于以声明方式将分配基于提供的逻辑的访问权限检查的安全特性 <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> 当前的应用程序上下文中的实例。 此类不能被继承。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.Configuration.FederationConfiguration">
      <summary>显示包含控制行为的 WS 联合身份验证模块的联合身份验证设置的属性 (<see cref="T:System.IdentityModel.Services.WSFederationAuthenticationModule" />) 和会话身份验证模块 (<see cref="T:System.IdentityModel.Services.SessionAuthenticationModule" />) 在 web 应用程序。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.Configuration.FederationConfigurationCreatedEventArgs">
      <summary>为 <see cref="E:System.IdentityModel.Services.FederatedAuthentication.FederationConfigurationCreated" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.Configuration.FederationConfigurationElement">
      <summary>表示 &lt;federationConfiguration&gt; 配置文件中的元素。 此类不能被继承。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.Configuration.FederationConfigurationElementCollection">
      <summary>包含所有组成的集合 &lt;federationConfiguration&gt; 在配置文件中指定的元素。 无法继承此类。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.Configuration.SystemIdentityModelServicesSection">
      <summary>表示 &lt;system.identityModel.services&gt; 配置文件中的部分。 此类不能被继承。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.Configuration.WsFederationConfiguration">
      <summary>包含所有 WS 联合身份验证模块所需的配置设置 (<see cref="T:System.IdentityModel.Services.WSFederationAuthenticationModule" />)。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.Configuration.WSFederationElement">
      <summary>表示 &lt;wsFederation&gt; 配置文件中的元素。 此类不能被继承。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.CookieHandler">
      <summary>用于读取、 写入和删除 HTTP 客户端上的会话 cookie 提供一个抽象基类。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.CookieHandlerElement">
      <summary>表示 &lt;cookieHandler&gt; 配置元素。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.CookieHandlerMode">
      <summary>指定支持的 cookie 处理程序模式。定义的可能值 <see cref="P:System.IdentityModel.Services.CookieHandlerElement.Mode" /> 属性。 此属性定义 cookie 处理程序的类型， <see cref="T:System.IdentityModel.Services.CookieHandlerElement" /> 对象配置。 有关更多信息，请参见 <see cref="T:System.IdentityModel.Services.CookieHandlerElement" /> 类。</summary>
    </member>
    <member name="F:System.IdentityModel.Services.CookieHandlerMode.Default">
      <summary>指定使用 cookie 处理程序的默认类型。 有关 <see cref="T:System.IdentityModel.Services.CookieHandlerElement" /> 类默认值是分块的 cookie 处理。</summary>
    </member>
    <member name="F:System.IdentityModel.Services.CookieHandlerMode.Chunked">
      <summary>指定分块的 cookie 处理程序;cookie 处理程序的实例或派生自 <see cref="T:System.IdentityModel.Services.ChunkedCookieHandler" /> 类。</summary>
    </member>
    <member name="F:System.IdentityModel.Services.CookieHandlerMode.Custom">
      <summary>指定自定义 cookie 处理程序;派生自的自定义 cookie 处理 <see cref="T:System.IdentityModel.Services.CookieHandler" /> 类。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.ErrorEventArgs">
      <summary>为 <see cref="E:System.IdentityModel.Services.SessionAuthenticationModule.SignOutError" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.FederatedAuthentication">
      <summary>提供对有关与 web 应用程序中的联合身份验证相关的所有 HTTP 模块的状态的访问。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.FederatedAuthenticationSessionEndingException">
      <summary>指示登录会话应被终止，并且当前请求未经过身份验证。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.FederatedPassiveSecurityTokenServiceOperations">
      <summary>封装由联合被动安全令牌服务通常执行的操作的实用程序类。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.FederatedSessionExpiredException">
      <summary>当一个会话已过期时引发的异常。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.FederationException">
      <summary>WS 联合身份验证支持中引发的异常的基类。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.FederationManagement">
      <summary>定义用于创建联合身份验证元数据文档并更新应用程序配置基于联合身份验证元数据文档的静态方法。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.FederationMessage">
      <summary>定义的所有联合身份验证消息的类派生的基类。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.HttpModuleBase">
      <summary>从哪些 HTTP 模块是具有可配置的基类 &lt;system.identityModel.services&gt; 元素 (<see cref="T:System.IdentityModel.Services.Configuration.SystemIdentityModelServicesSection" />) 派生。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.MachineKeyTransform">
      <summary>使用指定的加密材料来保护会话令牌 &lt;machineKey&gt; web.config 或 machine.config 配置文件节。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.PseudonymRequestMessage">
      <summary>表示 WS 联合身份验证伪请求消息。 在接收到的消息 wa 参数为"wpseudo1.0"时，将创建此消息。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.RedirectingToIdentityProviderEventArgs">
      <summary>为 <see cref="E:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.SecurityTokenReceivedEventArgs">
      <summary>为 <see cref="E:System.IdentityModel.Services.WSFederationAuthenticationModule.SecurityTokenReceived" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.SecurityTokenValidatedEventArgs">
      <summary>为 <see cref="E:System.IdentityModel.Services.WSFederationAuthenticationModule.SecurityTokenValidated" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.ServiceCertificateElement">
      <summary>表示 &lt;serviceCertificate&gt; 配置文件中的元素。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.SessionAuthenticationModule">
      <summary>实现一个处理 WS 联合身份验证方案中的会话 cookie 的 ASP.NET 模块。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs">
      <summary>将提供数据供 <see cref="E:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated" /> 事件和 <see cref="E:System.IdentityModel.Services.WSFederationAuthenticationModule.SessionSecurityTokenCreated" /> 事件。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs">
      <summary>为 <see cref="E:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.SessionSecurityTokenResolver">
      <summary>解析当前缓存中的会话安全令牌。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.SigningOutEventArgs">
      <summary>为 <see cref="E:System.IdentityModel.Services.WSFederationAuthenticationModule.SigningOut" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.SignInRequestMessage">
      <summary>表示 WS 联合身份验证登录请求消息。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.SignInResponseMessage">
      <summary>表示 WS 联合身份验证登录响应消息。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.SignOutCleanupRequestMessage">
      <summary>表示 WS 联合身份验证注销清除消息。 当接收到的消息具有操作参数 (wa) 设置为"wsignoutcleanup1.0"时，将创建的消息。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.SignOutRequestMessage">
      <summary>表示 WS 联合身份验证的注销消息。 当接收到的消息具有操作参数 (wa) 设置为"wsignout1.0"时，将创建此消息。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler">
      <summary>通过使用在 ASP.NET 中指定的签名和加密密钥来处理会话令牌 &lt;machineKey&gt; 配置文件中的元素。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.Tokens.MembershipUserNameSecurityTokenHandler">
      <summary>一个 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityTokenHandler" /> 来验证 <see cref="T:System.IdentityModel.Tokens.UserNameSecurityToken" /> 通过使用一个已配置 <see cref="T:System.Web.Security.MembershipProvider" />。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.WSFederationAuthenticationModule">
      <summary>
        <see cref="T:System.IdentityModel.Services.WSFederationAuthenticationModule" /> 是一个 HTTP 模块，用于保护 ASP.NET 通过强制执行的应用程序的联合身份验证设置对传入请求。<see cref="T:System.IdentityModel.Services.WSFederationAuthenticationModule" /> 是利用 WIF，可以在初始状态下处理中的基于声明的标识访问的主模块 ASP.NET  应用程序。<see cref="T:System.IdentityModel.Services.WSFederationAuthenticationModule" /> 引发多个事件，这样，ASP.NET 开发人员来更改默认行为和控制如何身份验证和索赔处理发生的详细信息。<see cref="T:System.IdentityModel.Services.WSFederationAuthenticationModule" /> 功能划分为特定于任务的方法。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.WSFederationMessage">
      <summary>表示 WS 联合身份验证消息，并定义更专业的 WS 联合身份验证消息类从中派生的基类。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.WSFederationMessageException">
      <summary>在序列化或反序列化 WS 联合身份验证消息时出现错误时引发的异常。</summary>
    </member>
    <member name="T:System.IdentityModel.Services.WSFederationSerializer">
      <summary>提供用于转换到的 WS 联合身份验证消息方法 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> 和 <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> 对象，后者是特定于 WS 信任协议。</summary>
    </member>
  </members>
</doc>