<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.AddIn</name>
  </assembly>
  <members>
    <member name="E:System.AddIn.Hosting.AddInProcess.ShuttingDown">
      <summary>通过所表示的进程时发生 <see cref="T:System.AddIn.Hosting.AddInProcess" /> 对象即将关闭。</summary>
    </member>
    <member name="M:System.AddIn.AddInAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.AddIn.AddInAttribute" /> 类的新实例。</summary>
      <param name="name">外接程序的名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 是一个长度为零的字符串。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
    </member>
    <member name="M:System.AddIn.Hosting.AddInController.GetAddInController(System.Object)">
      <summary>获取外接程序的控制器。</summary>
      <param name="addIn">外接程序主机视图中。</param>
      <returns>外接程序控制器。</returns>
    </member>
    <member name="M:System.AddIn.Hosting.AddInController.Shutdown">
      <summary>禁用外接程序。</summary>
    </member>
    <member name="M:System.AddIn.Hosting.AddInEnvironment.#ctor(System.AppDomain)">
      <summary>初始化 <see cref="T:System.AddIn.Hosting.AddInEnvironment" /> 类的新实例。</summary>
      <param name="appDomain">包含外接程序的应用程序域。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="appDomain" /> 为 null。</exception>
      <exception cref="T:System.Security.SecurityException">需要完全信任权限。 在调用链中的调用方没有足够的权限。</exception>
    </member>
    <member name="M:System.AddIn.Hosting.AddInProcess.#ctor">
      <summary>初始化 <see cref="T:System.AddIn.Hosting.AddInProcess" /> 类的新实例。</summary>
    </member>
    <member name="M:System.AddIn.Hosting.AddInProcess.#ctor(System.AddIn.Hosting.Platform)">
      <summary>新实例初始化 <see cref="T:System.AddIn.Hosting.AddInProcess" /> 类，同时指定在其中外接程序运行的进程每字位数。</summary>
      <param name="platform">一个值，指定的外接程序运行的进程每字位数。</param>
      <exception cref="T:System.InvalidOperationException">找不到可执行文件 （AddInProcess.exe 或 AddInProcess32.exe） 的路径的注册表项。- 或 -找不到可执行文件。</exception>
    </member>
    <member name="M:System.AddIn.Hosting.AddInProcess.Shutdown">
      <summary>强制关闭该外部进程。</summary>
      <returns>true 如果该外部进程已运行，并且已成功关闭; false 如果没有不活动的进程关联 <see cref="T:System.AddIn.Hosting.AddInProcess" />。</returns>
      <exception cref="T:System.InvalidOperationException">外接程序是过程与主机应用程序。 启动和停止该过程仅允许使用外部进程，不是为宿主进程。</exception>
    </member>
    <member name="M:System.AddIn.Hosting.AddInProcess.Start">
      <summary>启动该外部进程。</summary>
      <returns>true 如果已成功启动该过程; false 如果该进程已运行。</returns>
      <exception cref="T:System.InvalidOperationException">外接程序是过程与主机应用程序。 启动和停止该过程仅允许使用外部进程，不是为宿主进程。</exception>
    </member>
    <member name="M:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException.#ctor">
      <summary>初始化 <see cref="T:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>新实例初始化 <see cref="T:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException" /> 类的序列化数据。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">有关源或目标对象数据的上下文信息。</param>
    </member>
    <member name="M:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException" /> 使用指定的消息的类。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null 引用时，在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="M:System.AddIn.Hosting.AddInStore.FindAddIn(System.Type,System.String,System.String,System.String)">
      <summary>查找特定的加载项。</summary>
      <param name="hostViewOfAddIn">定义外接程序的宿主视图的类型。</param>
      <param name="pipelineRootFolderPath">管线目录结构的根路径。</param>
      <param name="addInFilePath">外接程序若要查找的路径和文件名称。</param>
      <param name="addInTypeName">外接程序类型名称。</param>
      <returns>标记的集合，其中包含仅表示找到的外接程序的标记。</returns>
      <exception cref="T:System.ArgumentException">长度 <paramref name="pipelineRootFolderPath" /> 或 <paramref name="addInFilePath" /> 或 <paramref name="addInTypeName" /> 为 0。- 或 -外接程序文件中不存在 <paramref name="addInfilePath" />。</exception>
      <exception cref="T:System.ArgumentNullException">一个或多个参数都是 null。</exception>
      <exception cref="T:System.Security.SecurityException">调用方不具有读取访问权限 <paramref name="pipelineRootFolderPath" />。</exception>
    </member>
    <member name="M:System.AddIn.Hosting.AddInStore.FindAddIns(System.Type,System.AddIn.Hosting.PipelineStoreLocation)">
      <summary>查找所有外接程序的外接程序通过指定的位置处的指定的主机视图 <see cref="T:System.AddIn.Hosting.PipelineStoreLocation" /> 枚举值。</summary>
      <param name="hostViewOfAddIn">定义外接程序的宿主视图的类型。</param>
      <param name="location">宿主应用程序的基目录。</param>
      <returns>表示外接程序发现的令牌的集合。</returns>
      <exception cref="T:System.AddIn.Hosting.InvalidPipelineStoreException">没有到管线目录结构的访问冲突。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="location" /> 是一个无效 <see cref="T:System.AddIn.Hosting.PipelineStoreLocation" /> 值。</exception>
    </member>
    <member name="M:System.AddIn.Hosting.AddInStore.FindAddIns(System.Type,System.AddIn.Hosting.PipelineStoreLocation,System.String[])">
      <summary>查找所有外接程序的外接程序通过指定的位置处的指定的主机视图 <see cref="T:System.AddIn.Hosting.PipelineStoreLocation" /> 值和可选的外接程序文件夹。</summary>
      <param name="hostViewOfAddIn">定义外接程序的宿主视图的类型。</param>
      <param name="location">枚举值之一。目前，此枚举中的唯一值是由指定的目录 <see cref="P:System.AppDomainSetup.ApplicationBase" />  用于设置宿主的应用程序域的属性。</param>
      <param name="addInFolderPaths">（可选）。 包含的加载项的一个或多个子目录的目录的路径。 由于此参数采用一个字符串数组，可以指定多个路径。如果在外接程序文件夹下的管线目录结构中的位置加载项，则不需要此参数。</param>
      <returns>表示外接程序发现的令牌的集合。</returns>
      <exception cref="T:System.AddIn.Hosting.InvalidPipelineStoreException">没有到管线目录结构的访问冲突。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="location" /> 是一个无效 <see cref="T:System.AddIn.Hosting.PipelineStoreLocation" /> 值。</exception>
    </member>
    <member name="M:System.AddIn.Hosting.AddInStore.FindAddIns(System.Type,System.String,System.String[])">
      <summary>指定的宿主视图的外接程序从指定的根目录中查找所有加载项。</summary>
      <param name="hostViewOfAddIn">定义外接程序的宿主视图的类型。</param>
      <param name="pipelineRootFolderPath">管线目录结构的根路径。</param>
      <param name="addInFolderPaths">（可选）。 包含的加载项的一个或多个子目录的目录的路径。 由于此参数采用一个字符串数组，可以指定多个路径。如果在外接程序文件夹下的管线目录结构中的位置加载项，则不需要此参数。</param>
      <returns>表示外接程序发现的令牌的集合。</returns>
      <exception cref="T:System.AddIn.Hosting.InvalidPipelineStoreException">没有到管线目录结构的访问冲突。</exception>
    </member>
    <member name="M:System.AddIn.Hosting.AddInStore.Rebuild(System.AddIn.Hosting.PipelineStoreLocation)">
      <summary>重新生成管线段缓存并包括所指定的位置上的新段 <see cref="T:System.AddIn.Hosting.PipelineStoreLocation" /> 值。</summary>
      <param name="location">枚举值之一。目前，此枚举中的唯一值是由指定的目录 <see cref="P:System.AppDomainSetup.ApplicationBase" />  用于设置宿主的应用程序域的属性。</param>
      <returns>在计算的管线段说明警告的字符串的集合。</returns>
      <exception cref="T:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException">管线目录结构中缺少段目录。</exception>
      <exception cref="T:System.AddIn.Hosting.InvalidPipelineStoreException">没有到管线目录结构的访问冲突。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="location" /> 是一个无效 <see cref="T:System.AddIn.Hosting.PipelineStoreLocation" /> 值。</exception>
    </member>
    <member name="M:System.AddIn.Hosting.AddInStore.Rebuild(System.String)">
      <summary>重新生成管线段缓存并包括指定的根目录中的新段。</summary>
      <param name="pipelineRootFolderPath">管线目录结构的根路径。</param>
      <returns>在计算的管线段说明警告的字符串的集合。</returns>
      <exception cref="T:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException">管线目录结构中缺少段目录。</exception>
      <exception cref="T:System.AddIn.Hosting.InvalidPipelineStoreException">没有到管线目录结构的访问冲突。</exception>
    </member>
    <member name="M:System.AddIn.Hosting.AddInStore.RebuildAddIns(System.String)">
      <summary>重新生成外接程序缓存并包括新加载项从指定的根目录。</summary>
      <param name="addInsFolderPath">包含的加载项的一个或多个子目录的目录的路径。</param>
      <returns>在计算的管线段说明警告的字符串的集合。</returns>
      <exception cref="T:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException">管线目录结构中缺少段目录。</exception>
      <exception cref="T:System.AddIn.Hosting.InvalidPipelineStoreException">没有到管线目录结构的访问冲突。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addInsFolderPath" /> 为 null。</exception>
      <exception cref="T:System.Security.SecurityException">调用方不到由指定的位置具有读取和写入访问权限 <paramref name="addInsFolderPath" />。</exception>
    </member>
    <member name="M:System.AddIn.Hosting.AddInStore.Update(System.AddIn.Hosting.PipelineStoreLocation)">
      <summary>更新管线段缓存与指定的位置上的新段 <see cref="T:System.AddIn.Hosting.PipelineStoreLocation" /> 值。</summary>
      <param name="location">枚举值之一。此枚举中的唯一值是由指定的目录的当前 <see cref="P:System.AppDomainSetup.ApplicationBase" />  用于设置宿主的应用程序域的属性。</param>
      <returns>在计算的管线段说明警告的字符串的集合。</returns>
      <exception cref="T:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException">管线目录结构中缺少段目录。</exception>
      <exception cref="T:System.AddIn.Hosting.InvalidPipelineStoreException">没有到管线目录结构的访问冲突。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="location" /> 是一个无效 <see cref="T:System.AddIn.Hosting.PipelineStoreLocation" /> 值。</exception>
    </member>
    <member name="M:System.AddIn.Hosting.AddInStore.Update(System.String)">
      <summary>使用指定的根目录中的新段更新管线段缓存。</summary>
      <param name="pipelineRootFolderPath">管线目录结构的根路径。</param>
      <returns>在计算的管线段说明警告的字符串的集合。</returns>
      <exception cref="T:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException">管线目录结构中缺少段目录。</exception>
      <exception cref="T:System.AddIn.Hosting.InvalidPipelineStoreException">没有到管线目录结构的访问冲突。</exception>
    </member>
    <member name="M:System.AddIn.Hosting.AddInStore.UpdateAddIns(System.String)">
      <summary>更新外接程序缓存，并且包括新加载项中指定的位置。</summary>
      <param name="addInsFolderPath">包含的加载项的一个或多个子目录的目录的路径。</param>
      <returns>在计算的管线段说明警告的字符串的集合。</returns>
      <exception cref="T:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException">管线目录结构中缺少段目录。</exception>
      <exception cref="T:System.AddIn.Hosting.InvalidPipelineStoreException">没有到管线目录结构的访问冲突。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addInsFolderPath" /> 为 null。</exception>
      <exception cref="T:System.Security.SecurityException">调用方不到由指定的位置具有读取和写入访问权限 <paramref name="addInsFolderPath" />。</exception>
    </member>
    <member name="M:System.AddIn.Hosting.AddInToken.Activate``1(System.AddIn.Hosting.AddInEnvironment)">
      <summary>激活外接程序的另一个外接程序的环境中。</summary>
      <param name="environment">应用程序域和包含的原始外接程序的进程中。</param>
      <typeparam name="T">接口或抽象基类，它表示外接程序的宿主视图中。</typeparam>
      <returns>外接程序主机视图中。</returns>
    </member>
    <member name="M:System.AddIn.Hosting.AddInToken.Activate``1(System.AddIn.Hosting.AddInProcess,System.AddIn.Hosting.AddInSecurityLevel)">
      <summary>激活外接程序在外部进程，在新的应用程序域，并具有指定的信任级别。</summary>
      <param name="process">在其中激活外接程序的外部进程。</param>
      <param name="level">指定的信任级别的枚举值之一。</param>
      <typeparam name="T">接口或抽象基类，它表示外接程序的宿主视图中。</typeparam>
      <returns>外接程序主机视图中。</returns>
    </member>
    <member name="M:System.AddIn.Hosting.AddInToken.Activate``1(System.AddIn.Hosting.AddInProcess,System.Security.PermissionSet)">
      <summary>激活外接程序在外部进程，在新的应用程序域，并与指定的权限集。</summary>
      <param name="process">在其中激活外接程序的外部进程。</param>
      <param name="permissionSet">需要授予的权限集外接程序。</param>
      <typeparam name="T">接口或抽象基类，它表示外接程序的宿主视图中。</typeparam>
      <returns>外接程序主机视图中。</returns>
    </member>
    <member name="M:System.AddIn.Hosting.AddInToken.Activate``1(System.AddIn.Hosting.AddInSecurityLevel)">
      <summary>激活外接程序具有新的应用程序域中指定的信任级别。</summary>
      <param name="trustLevel">指定的信任级别的枚举值之一。</param>
      <typeparam name="T">接口或抽象基类，它表示外接程序的宿主视图中。</typeparam>
      <returns>外接程序主机视图中。</returns>
    </member>
    <member name="M:System.AddIn.Hosting.AddInToken.Activate``1(System.AddIn.Hosting.AddInSecurityLevel,System.String)">
      <summary>激活外接程序中具有指定名称和信任级别的新应用程序域。</summary>
      <param name="trustLevel">指定的信任级别的枚举值之一。</param>
      <param name="appDomainName">要将分配给新的应用程序域的友好名称。</param>
      <typeparam name="T">接口或抽象基类，它表示外接程序的宿主视图中。</typeparam>
      <returns>外接程序主机视图中。</returns>
    </member>
    <member name="M:System.AddIn.Hosting.AddInToken.Activate``1(System.AppDomain)">
      <summary>激活外接程序的现有应用程序域中。</summary>
      <param name="target">外接程序应在其中激活应用程序域。</param>
      <typeparam name="T">接口或抽象基类，它表示外接程序的宿主视图中。</typeparam>
      <returns>外接程序主机视图中。</returns>
      <exception cref="T:System.Security.SecurityException">需要完全信任权限。 在调用链中的调用方没有足够的权限。</exception>
    </member>
    <member name="M:System.AddIn.Hosting.AddInToken.Activate``1(System.Security.PermissionSet)">
      <summary>激活外接程序与新的应用程序域中设置的指定权限。</summary>
      <param name="permissions">外接程序授予的权限。</param>
      <typeparam name="T">接口或抽象基类，它表示外接程序的宿主视图中。</typeparam>
      <returns>外接程序主机视图中。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="permissions" /> 为 null。</exception>
    </member>
    <member name="M:System.AddIn.Hosting.AddInToken.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前实例。</summary>
      <param name="obj">要与当前实例进行比较的对象。</param>
      <returns>true 如果指定的对象与当前实例是否相等。否则为 false。</returns>
    </member>
    <member name="M:System.AddIn.Hosting.AddInToken.GetEnumerator">
      <summary>返回与此令牌相关联的管道段的限定数据的枚举数。</summary>
      <returns>一个枚举器可用于循环访问与当前令牌相关联的管线段限定数据。</returns>
    </member>
    <member name="M:System.AddIn.Hosting.AddInToken.GetHashCode">
      <summary>用作一个令牌哈希函数。</summary>
      <returns>当前令牌哈希代码。</returns>
    </member>
    <member name="M:System.AddIn.Hosting.AddInToken.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回与此令牌相关联的管道段的限定数据的枚举数。</summary>
      <returns>一个枚举器可用于循环访问与当前令牌相关联的管线段限定数据。</returns>
    </member>
    <member name="M:System.AddIn.Hosting.AddInToken.ToString">
      <summary>返回一个字符串，表示令牌。</summary>
      <returns>一个表示令牌的字符串。</returns>
    </member>
    <member name="M:System.AddIn.Hosting.InvalidPipelineStoreException.#ctor">
      <summary>初始化 <see cref="T:System.AddIn.Hosting.InvalidPipelineStoreException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.AddIn.Hosting.InvalidPipelineStoreException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>新实例初始化 <see cref="T:System.AddIn.Hosting.InvalidPipelineStoreException" /> 用序列化和流上下文信息的类。</summary>
      <param name="info">序列化的对象数据中。</param>
      <param name="context">有关源或目标对象数据的上下文信息。</param>
    </member>
    <member name="M:System.AddIn.Hosting.InvalidPipelineStoreException.#ctor(System.String)">
      <summary>使用指定的消息初始化 <see cref="T:System.AddIn.Hosting.InvalidPipelineStoreException" /> 类的新实例。</summary>
      <param name="message">错误说明。</param>
    </member>
    <member name="M:System.AddIn.Hosting.InvalidPipelineStoreException.#ctor(System.String,System.Exception)">
      <summary>新实例初始化 <see cref="T:System.AddIn.Hosting.InvalidPipelineStoreException" /> 类，具有指定的消息和对导致此异常的内部异常的引用。</summary>
      <param name="message">错误说明。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null 引用时，在处理内部异常的 catch 块中引发当前异常。</param>
    </member>
    <member name="M:System.AddIn.Hosting.QualificationDataItem.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前的限定数据项。</summary>
      <param name="obj">要比较的对象。</param>
      <returns>如果 <paramref name="obj" /> 等于当前实例，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.AddIn.Hosting.QualificationDataItem.GetHashCode">
      <summary>获取此限定数据项的哈希代码。</summary>
      <returns>哈希代码。</returns>
    </member>
    <member name="M:System.AddIn.Hosting.QualificationDataItem.op_Equality(System.AddIn.Hosting.QualificationDataItem,System.AddIn.Hosting.QualificationDataItem)">
      <summary>确定两个 <see cref="T:System.AddIn.Hosting.QualificationDataItem" /> 结构是否相等。</summary>
      <param name="item1">要比较的第一个 <see cref="T:System.AddIn.Hosting.QualificationDataItem" />。</param>
      <param name="item2">要比较的第二个 <see cref="T:System.AddIn.Hosting.QualificationDataItem" />。</param>
      <returns>如果 <paramref name="item1" /> 和 <paramref name="item2" /> 相等，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.AddIn.Hosting.QualificationDataItem.op_Inequality(System.AddIn.Hosting.QualificationDataItem,System.AddIn.Hosting.QualificationDataItem)">
      <summary>确定两个 <see cref="T:System.AddIn.Hosting.QualificationDataItem" /> 结构是否不同。</summary>
      <param name="item1">要比较的第一个 <see cref="T:System.AddIn.Hosting.QualificationDataItem" />。</param>
      <param name="item2">要比较的第二个 <see cref="T:System.AddIn.Hosting.QualificationDataItem" />。</param>
      <returns>如果 <paramref name="item1" /> 和 <paramref name="item2" /> 不相等，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.AddIn.Pipeline.AddInAdapterAttribute.#ctor">
      <summary>初始化 <see cref="T:System.AddIn.Pipeline.AddInAdapterAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.AddIn.Pipeline.AddInBaseAttribute.#ctor">
      <summary>初始化 <see cref="T:System.AddIn.Pipeline.AddInBaseAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``1(System.AddIn.Contract.IListContract{``0})">
      <summary>将指定 <see cref="T:System.AddIn.Contract.IListContract`1" /> 集合与 <see cref="T:System.Collections.Generic.IList`1" /> 集合。</summary>
      <param name="collection">来自其他方管道的集合。</param>
      <typeparam name="T">在列表中包含的对象的类型。<paramref name="T" /> 必须是可序列化。</typeparam>
      <returns>已转换的集合。</returns>
    </member>
    <member name="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
      <summary>将转换指定 <see cref="T:System.AddIn.Contract.IListContract`1" /> 集合与 <see cref="T:System.Collections.Generic.IList`1" /> 通过使用转换器适配器的集合。</summary>
      <param name="collection">要传递给管道另一端的集合。</param>
      <param name="contractViewAdapter">一个将数据从视图中的预期类型的协定中定义的类型改编的转换器。</param>
      <param name="viewContractAdapter">改编数据从为所需的协定的类型视图中定义的类型转换器。</param>
      <typeparam name="TView">在列表中定义的对象视图的类型。</typeparam>
      <typeparam name="TContract">为传递类型的对象定义协定的类型 <paramref name="TView" /> 跨隔离边界。</typeparam>
      <returns>已转换的集合。</returns>
    </member>
    <member name="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1(System.Collections.Generic.IList{``0})">
      <summary>将转换指定 <see cref="T:System.Collections.Generic.IList`1" /> 集合与 <see cref="T:System.AddIn.Contract.IListContract`1" /> 集合。</summary>
      <param name="collection">要转换的集合。</param>
      <typeparam name="T">在列表中包含的对象的类型。<paramref name="T" /> 必须是可序列化。</typeparam>
      <returns>已转换的集合。</returns>
    </member>
    <member name="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})">
      <summary>将转换指定 <see cref="T:System.Collections.Generic.IList`1" /> 集合与 <see cref="T:System.AddIn.Contract.IListContract`1" /> 通过使用转换器适配器的集合。</summary>
      <param name="collection">要转换的集合。</param>
      <param name="viewContractAdapter">改编数据从为所需的协定的类型视图中定义的类型转换器。</param>
      <param name="contractViewAdapter">一个将数据从视图中的预期类型的协定中定义的类型改编的转换器。</param>
      <typeparam name="TView">在列表中定义的对象视图的类型。</typeparam>
      <typeparam name="TContract">为传递类型的对象定义协定的类型 <paramref name="TView" /> 跨隔离边界。</typeparam>
      <returns>已转换的集合。</returns>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractAdapter.ContractToViewAdapter``1(System.AddIn.Pipeline.ContractHandle,System.AddIn.Hosting.PipelineStoreLocation)">
      <summary>如果在从值所指定的位置中找到合适的宿主端适配器获取的外接程序的宿主视图 <see cref="T:System.AddIn.Hosting.PipelineStoreLocation" /> 枚举。</summary>
      <param name="contract">使用的外接程序可以共享协定句柄。</param>
      <param name="location">主机的应用程序基目录。</param>
      <typeparam name="TView">定义外接程序的宿主视图的类型。</typeparam>
      <returns>共享的外接程序的主机视图中。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="location" /> 无效。</exception>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractAdapter.ContractToViewAdapter``1(System.AddIn.Pipeline.ContractHandle,System.String)">
      <summary>如果在由路径指定一个位置中找到合适的宿主端适配器，获取的宿主视图的外接程序。</summary>
      <param name="contract">使用的外接程序可以共享协定句柄。</param>
      <param name="pipelineRoot">外接程序存储的路径。</param>
      <typeparam name="TView">定义外接程序的宿主视图的类型。</typeparam>
      <returns>共享的外接程序的主机视图中。</returns>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractAdapter.ViewToContractAdapter(System.Object)">
      <summary>提供的宿主视图的外接程序中获取该协定的句柄。</summary>
      <param name="view">宿主视图的外接程序由从当前的应用程序域系统激活。</param>
      <returns>协定句柄。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="view" /> 为 null。</exception>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractBase.#ctor">
      <summary>初始化 <see cref="T:System.AddIn.Pipeline.ContractBase" /> 类的新实例。</summary>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractBase.AcquireLifetimeToken">
      <summary>获取一个生存期标记。</summary>
      <returns>一个随机数字，标识令牌。</returns>
      <exception cref="T:System.InvalidOperationException">所有以前已获得的令牌都已吊销。  没有更多的标记都可用。</exception>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractBase.GetRemoteHashCode">
      <summary>获取当前的哈希代码 <see cref="T:System.AddIn.Pipeline.ContractBase" /> 对象。</summary>
      <returns>当前的哈希代码 <see cref="T:System.AddIn.Pipeline.ContractBase" /> 对象。</returns>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractBase.OnFinalRevoke">
      <summary>重写时在外接程序端适配器中，释放由适配器占用的本机资源。</summary>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractBase.QueryContract(System.String)">
      <summary>反映在协定的实例，并返回 this 指针如果当前对象实现该协定。</summary>
      <param name="contractIdentifier">合同，包括其程序集名称的完整名称。</param>
      <returns>this 指针，指向 <see cref="T:System.AddIn.Contract.IContract" /> 接口，或 null 如果未实现该协定。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contractIdentifier" /> 为 null。</exception>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractBase.RemoteEquals(System.AddIn.Contract.IContract)">
      <summary>比较对象与远程对象相等。</summary>
      <param name="contract">要测试与远程对象相等的对象。</param>
      <returns>true 如果该对象是否等于远程对象;否则为 false。</returns>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractBase.RemoteToString">
      <summary>获取一个字符串，标识远程对象。</summary>
      <returns>一个字符串，标识的远程对象。</returns>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractBase.Renewal(System.Runtime.Remoting.Lifetime.ILease)">
      <summary>请求发起客户端续订指定的对象的租约。</summary>
      <param name="lease">生存期租约对象，其中由远程处理生存期服务。</param>
      <returns>续订的租约。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lease" /> 为 null。</exception>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractBase.RevokeLifetimeToken(System.Int32)">
      <summary>从列表中未完成的生存期标记中移除指定的令牌。</summary>
      <param name="token">标记号。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="token" /> 未完成的生存期标记的列表中未找到。</exception>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractHandle.#ctor(System.AddIn.Contract.IContract)">
      <summary>初始化 <see cref="T:System.AddIn.Pipeline.ContractHandle" /> 类的新实例。</summary>
      <param name="contract">要在管道中使用的协定。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contract" /> 为 null。</exception>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractHandle.AppDomainOwner(System.AppDomain)">
      <summary>创建应用程序域时，请获取外接程序端适配器的实例。</summary>
      <param name="domain">要检查的应用程序域。</param>
      <returns>
        <see cref="T:System.AddIn.Contract.IContract" /> 对象，表示应用程序域的所有者。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="domain" /> 为 null。</exception>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain(System.AddIn.Contract.IContract,System.AppDomain)">
      <summary>确定应用程序域是否拥有指定的协定。</summary>
      <param name="contract">要检查的协定。</param>
      <param name="domain">要检查的应用程序域。</param>
      <returns>true 如果协定拥有应用程序域中。否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contract" /> 或 <paramref name="domain" /> 为 null。</exception>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractHandle.Dispose">
      <summary>撤消上一个协定，而不考虑输入的生存期标记。</summary>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractHandle.Dispose(System.Boolean)">
      <summary>撤消上而不考虑输入协定的生存期标记，并可以选择释放托管的资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.AddIn.Pipeline.ContractHandle.Finalize">
      <summary>释放与关联的资源 <see cref="T:System.AddIn.Pipeline.ContractHandle" /> 实例。</summary>
    </member>
    <member name="M:System.AddIn.Pipeline.HostAdapterAttribute.#ctor">
      <summary>初始化 <see cref="T:System.AddIn.Pipeline.HostAdapterAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.AddIn.AddInAttribute.Description">
      <summary>获取或设置外接程序的说明。</summary>
      <returns>外接程序当前的说明。</returns>
    </member>
    <member name="P:System.AddIn.AddInAttribute.Name">
      <summary>获取外接程序的名称。</summary>
      <returns>外接程序的名称。</returns>
    </member>
    <member name="P:System.AddIn.AddInAttribute.Publisher">
      <summary>获取或设置发布服务器上的外接程序。</summary>
      <returns>发布服务器外接程序。</returns>
    </member>
    <member name="P:System.AddIn.AddInAttribute.Version">
      <summary>获取或设置外接程序的软件版本。</summary>
      <returns>外接程序的软件版本。</returns>
    </member>
    <member name="P:System.AddIn.Hosting.AddInController.AddInEnvironment">
      <summary>获取 <see cref="T:System.AddIn.Hosting.AddInEnvironment" /> 对象。</summary>
      <returns>可以用于激活的原始外接程序的同一环境中的其他外接一个对象。</returns>
    </member>
    <member name="P:System.AddIn.Hosting.AddInController.AppDomain">
      <summary>获取包含外接程序的应用程序域。</summary>
      <returns>应用程序域外接程序。</returns>
    </member>
    <member name="P:System.AddIn.Hosting.AddInController.Token">
      <summary>获取表示外接程序的令牌。</summary>
      <returns>一个对象，表示外接程序。</returns>
    </member>
    <member name="P:System.AddIn.Hosting.AddInEnvironment.Process">
      <summary>获取 <see cref="T:System.AddIn.Hosting.AddInProcess" /> 对象，表示在其中运行外接程序的过程。</summary>
      <returns>在其中运行外接程序的过程。</returns>
    </member>
    <member name="P:System.AddIn.Hosting.AddInProcess.IsCurrentProcess">
      <summary>获取一个值，该值指示是否当前 <see cref="T:System.AddIn.Hosting.AddInProcess" /> 对象都表示主机应用程序进程。</summary>
      <returns>true 如果 <see cref="T:System.AddIn.Hosting.AddInProcess" /> 对象对应于当前进程; 否则为 false。</returns>
    </member>
    <member name="P:System.AddIn.Hosting.AddInProcess.KeepAlive">
      <summary>获取或设置一个值，该值指示是否使该外部进程保持活动状态。</summary>
      <returns>true 如果该外部进程应保持活动状态;否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.AddIn.Hosting.AddInProcess.Platform">
      <summary>获取在其中运行的进程外外接程序的进程每字位数。</summary>
      <returns>-每字位数的外接程序运行的进程。</returns>
    </member>
    <member name="P:System.AddIn.Hosting.AddInProcess.ProcessId">
      <summary>获取该外部进程的进程 ID。</summary>
      <returns>进程 ID 或-1，如果该外部进程尚未启动。</returns>
    </member>
    <member name="P:System.AddIn.Hosting.AddInProcess.StartupTimeout">
      <summary>获取或设置要启动的进程的允许的秒数。</summary>
      <returns>若要允许进程启动的秒数。</returns>
      <exception cref="T:System.InvalidOperationException">该进程已运行。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">所赋的值小于 0 （零）。</exception>
    </member>
    <member name="P:System.AddIn.Hosting.AddInToken.AddInFullName">
      <summary>获取命名空间和外接程序的类型。</summary>
      <returns>外接程序，由其命名空间完全限定的类型。</returns>
    </member>
    <member name="P:System.AddIn.Hosting.AddInToken.AssemblyName">
      <summary>获取包含外接程序的程序集的名称。</summary>
      <returns>程序集的名称。</returns>
    </member>
    <member name="P:System.AddIn.Hosting.AddInToken.Description">
      <summary>获取外接程序的说明。</summary>
      <returns>外接程序的说明或 null 如果中未指定说明 <see cref="T:System.AddIn.AddInAttribute" /> 属性。</returns>
    </member>
    <member name="P:System.AddIn.Hosting.AddInToken.EnableDirectConnect">
      <summary>获取和设置一个值，指示在条件允许时外接程序是否应直接连接到它们的宿主。</summary>
      <returns>true 如果外接程序应直接连接到进程内主机。否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.AddIn.Hosting.AddInToken.Name">
      <summary>获取外接程序的名称。</summary>
      <returns>外接程序的名称。</returns>
    </member>
    <member name="P:System.AddIn.Hosting.AddInToken.Publisher">
      <summary>获取外接程序的发布者。</summary>
      <returns>外接程序的发布者或 null 如果中未指定发布服务器 <see cref="T:System.AddIn.AddInAttribute" /> 属性。</returns>
    </member>
    <member name="P:System.AddIn.Hosting.AddInToken.QualificationData">
      <summary>获取与当前标记相关联的管道中的数据段的字典。</summary>
      <returns>对每个段，表示限定数据的字典的键为管线段，其值为名称/值字典。</returns>
    </member>
    <member name="P:System.AddIn.Hosting.AddInToken.Version">
      <summary>获取外接程序，在中指定的版本 <see cref="T:System.AddIn.AddInAttribute" /> 属性。</summary>
      <returns>外接程序的版本或 null 如果中未指定的版本号 <see cref="T:System.AddIn.AddInAttribute" /> 属性。</returns>
    </member>
    <member name="P:System.AddIn.Hosting.QualificationDataItem.Name">
      <summary>获取限定数据项的名称。</summary>
      <returns>限定数据项目的名称。</returns>
    </member>
    <member name="P:System.AddIn.Hosting.QualificationDataItem.Segment">
      <summary>获取一个值，标识管线段数据项被应用到限定。</summary>
      <returns>管线段数据项被应用到的类型。</returns>
    </member>
    <member name="P:System.AddIn.Hosting.QualificationDataItem.Value">
      <summary>获取限定数据项的值。</summary>
      <returns>项的值。</returns>
    </member>
    <member name="P:System.AddIn.Pipeline.AddInBaseAttribute.ActivatableAs">
      <summary>获取或设置一个或多个外接程序基类型的单个接程序端适配器可用于构造管道。</summary>
      <returns>外接程序的基类型的数组。</returns>
    </member>
    <member name="P:System.AddIn.Pipeline.ContractHandle.Contract">
      <summary>获取管道使用的协定。</summary>
      <returns>派生自协定 <see cref="T:System.AddIn.Contract.IContract" />。</returns>
    </member>
    <member name="T:System.AddIn.AddInAttribute">
      <summary>将对象标识为外接程序。</summary>
    </member>
    <member name="T:System.AddIn.Hosting.AddInController">
      <summary>提供对外接程序的各种任务的访问。</summary>
    </member>
    <member name="T:System.AddIn.Hosting.AddInEnvironment">
      <summary>提供对应用程序域和进程外接程序的访问。</summary>
    </member>
    <member name="T:System.AddIn.Hosting.AddInProcess">
      <summary>提供从主机应用程序运行的插件进程外的外部进程。</summary>
    </member>
    <member name="T:System.AddIn.Hosting.AddInSecurityLevel">
      <summary>指定授予外接程序加载到应用程序域的信任级别。</summary>
    </member>
    <member name="F:System.AddIn.Hosting.AddInSecurityLevel.Internet">
      <summary>具有低信任级别的外接程序中使用的 Internet 安全级别。</summary>
    </member>
    <member name="F:System.AddIn.Hosting.AddInSecurityLevel.Intranet">
      <summary>位于公司的 intranet 的外接程序中使用的 Intranet 安全级别。 由于服务器和信息是一家公司防火墙内，这些加载项可以具有较高信任级别。</summary>
    </member>
    <member name="F:System.AddIn.Hosting.AddInSecurityLevel.FullTrust">
      <summary>允许读写到本地文件系统、 创建网络连接，并从注册表中读取的外接程序中使用完全信任安全级别。 此安全级别授予的外接程序的代码访问安全性 (CAS) 的完全访问权限通过应用 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> 字段。</summary>
    </member>
    <member name="F:System.AddIn.Hosting.AddInSecurityLevel.Host">
      <summary>使用主机安全级别当前授予托管代码的相同权限授予外接程序。</summary>
    </member>
    <member name="T:System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException">
      <summary>管线目录结构中缺少段目录时引发的异常。</summary>
    </member>
    <member name="T:System.AddIn.Hosting.AddInSegmentType">
      <summary>指定管道段的类型。</summary>
    </member>
    <member name="F:System.AddIn.Hosting.AddInSegmentType.HostViewOfAddIn">
      <summary>指定外接程序段的程序的宿主视图。</summary>
    </member>
    <member name="F:System.AddIn.Hosting.AddInSegmentType.HostSideAdapter">
      <summary>指定宿主端适配器段。</summary>
    </member>
    <member name="F:System.AddIn.Hosting.AddInSegmentType.Contract">
      <summary>指定协定段。</summary>
    </member>
    <member name="F:System.AddIn.Hosting.AddInSegmentType.AddInSideAdapter">
      <summary>指定外接程序端适配器段。</summary>
    </member>
    <member name="F:System.AddIn.Hosting.AddInSegmentType.AddInView">
      <summary>指定外接程序视图段。</summary>
    </member>
    <member name="F:System.AddIn.Hosting.AddInSegmentType.AddIn">
      <summary>指定外接程序段。</summary>
    </member>
    <member name="T:System.AddIn.Hosting.AddInStore">
      <summary>提供存储和查找有关可用外接程序的信息并管道段的方法。</summary>
    </member>
    <member name="T:System.AddIn.Hosting.AddInToken">
      <summary>表示可激活的外接程序。</summary>
    </member>
    <member name="T:System.AddIn.Hosting.InvalidPipelineStoreException">
      <summary>未找到目录以及用户无权访问管线根路径或外接程序路径时，将引发异常。</summary>
    </member>
    <member name="T:System.AddIn.Hosting.PipelineStoreLocation">
      <summary>指定的管道存储区而不是目录的路径的备用位置。</summary>
    </member>
    <member name="F:System.AddIn.Hosting.PipelineStoreLocation.ApplicationBase">
      <summary>指定的位置 <see cref="P:System.AppDomainSetup.ApplicationBase" /> 设置应用程序域的主机的属性。</summary>
    </member>
    <member name="T:System.AddIn.Hosting.Platform">
      <summary>指定在其中运行的进程外外接程序的进程每字位数。</summary>
    </member>
    <member name="F:System.AddIn.Hosting.Platform.Host">
      <summary>外接程序加载到外部进程与宿主进程相同的每个字位数。</summary>
    </member>
    <member name="F:System.AddIn.Hosting.Platform.AnyCpu">
      <summary>外接程序加载到外部进程与操作系统相同的每个字位数。</summary>
    </member>
    <member name="F:System.AddIn.Hosting.Platform.X86">
      <summary>外接程序加载到 32 位外部进程。</summary>
    </member>
    <member name="F:System.AddIn.Hosting.Platform.X64">
      <summary>外接程序加载到 64 位外部进程。</summary>
    </member>
    <member name="F:System.AddIn.Hosting.Platform.ARM">
      <summary>外接程序加载到 ARM 处理器上的 32 位进程。</summary>
    </member>
    <member name="T:System.AddIn.Hosting.QualificationDataItem">
      <summary>表示一个管道段，以供该主机的开发人员提供的信息。</summary>
    </member>
    <member name="T:System.AddIn.Pipeline.AddInAdapterAttribute">
      <summary>将对象标识为管道外接程序端适配器段。</summary>
    </member>
    <member name="T:System.AddIn.Pipeline.AddInBaseAttribute">
      <summary>将对象标识为在管道的外接程序视图段。</summary>
    </member>
    <member name="T:System.AddIn.Pipeline.CollectionAdapters">
      <summary>使外接程序与其主机应用程序之间传递集合。</summary>
    </member>
    <member name="T:System.AddIn.Pipeline.ContractAdapter">
      <summary>有关共享和重新适应加载项提供的方法。</summary>
    </member>
    <member name="T:System.AddIn.Pipeline.ContractBase">
      <summary>提供的默认实现 <see cref="T:System.AddIn.Contract.IContract" /> 成员。</summary>
    </member>
    <member name="T:System.AddIn.Pipeline.ContractHandle">
      <summary>提供控制外接程序的生存期的方法。</summary>
    </member>
    <member name="T:System.AddIn.Pipeline.HostAdapterAttribute">
      <summary>将对象标识为管道的宿主端适配器段。</summary>
    </member>
  </members>
</doc>